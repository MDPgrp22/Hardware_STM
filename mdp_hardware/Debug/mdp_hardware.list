
mdp_hardware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005aa8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b60  08005c38  08005c38  00015c38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006798  08006798  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08006798  08006798  00016798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080067a0  080067a0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080067a0  080067a0  000167a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080067a4  080067a4  000167a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080067a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00004e58  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004e68  20004e68  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017437  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002eee  00000000  00000000  00037477  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001290  00000000  00000000  0003a368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001158  00000000  00000000  0003b5f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000032b5  00000000  00000000  0003c750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000144df  00000000  00000000  0003fa05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2a49  00000000  00000000  00053ee4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0012692d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004db4  00000000  00000000  00126980  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005c20 	.word	0x08005c20

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08005c20 	.word	0x08005c20

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96e 	b.w	80004c4 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468c      	mov	ip, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	f040 8083 	bne.w	8000316 <__udivmoddi4+0x116>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d947      	bls.n	80002a6 <__udivmoddi4+0xa6>
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	b142      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021c:	f1c2 0020 	rsb	r0, r2, #32
 8000220:	fa24 f000 	lsr.w	r0, r4, r0
 8000224:	4091      	lsls	r1, r2
 8000226:	4097      	lsls	r7, r2
 8000228:	ea40 0c01 	orr.w	ip, r0, r1
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbbc f6f8 	udiv	r6, ip, r8
 8000238:	fa1f fe87 	uxth.w	lr, r7
 800023c:	fb08 c116 	mls	r1, r8, r6, ip
 8000240:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000244:	fb06 f10e 	mul.w	r1, r6, lr
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18fb      	adds	r3, r7, r3
 800024e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000252:	f080 8119 	bcs.w	8000488 <__udivmoddi4+0x288>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8116 	bls.w	8000488 <__udivmoddi4+0x288>
 800025c:	3e02      	subs	r6, #2
 800025e:	443b      	add	r3, r7
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0f8 	udiv	r0, r3, r8
 8000268:	fb08 3310 	mls	r3, r8, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fe0e 	mul.w	lr, r0, lr
 8000274:	45a6      	cmp	lr, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	193c      	adds	r4, r7, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8105 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000282:	45a6      	cmp	lr, r4
 8000284:	f240 8102 	bls.w	800048c <__udivmoddi4+0x28c>
 8000288:	3802      	subs	r0, #2
 800028a:	443c      	add	r4, r7
 800028c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000290:	eba4 040e 	sub.w	r4, r4, lr
 8000294:	2600      	movs	r6, #0
 8000296:	b11d      	cbz	r5, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c5 4300 	strd	r4, r3, [r5]
 80002a0:	4631      	mov	r1, r6
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	b902      	cbnz	r2, 80002aa <__udivmoddi4+0xaa>
 80002a8:	deff      	udf	#255	; 0xff
 80002aa:	fab2 f282 	clz	r2, r2
 80002ae:	2a00      	cmp	r2, #0
 80002b0:	d150      	bne.n	8000354 <__udivmoddi4+0x154>
 80002b2:	1bcb      	subs	r3, r1, r7
 80002b4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b8:	fa1f f887 	uxth.w	r8, r7
 80002bc:	2601      	movs	r6, #1
 80002be:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c2:	0c21      	lsrs	r1, r4, #16
 80002c4:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002cc:	fb08 f30c 	mul.w	r3, r8, ip
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d907      	bls.n	80002e4 <__udivmoddi4+0xe4>
 80002d4:	1879      	adds	r1, r7, r1
 80002d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002da:	d202      	bcs.n	80002e2 <__udivmoddi4+0xe2>
 80002dc:	428b      	cmp	r3, r1
 80002de:	f200 80e9 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 80002e2:	4684      	mov	ip, r0
 80002e4:	1ac9      	subs	r1, r1, r3
 80002e6:	b2a3      	uxth	r3, r4
 80002e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80002ec:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f4:	fb08 f800 	mul.w	r8, r8, r0
 80002f8:	45a0      	cmp	r8, r4
 80002fa:	d907      	bls.n	800030c <__udivmoddi4+0x10c>
 80002fc:	193c      	adds	r4, r7, r4
 80002fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000302:	d202      	bcs.n	800030a <__udivmoddi4+0x10a>
 8000304:	45a0      	cmp	r8, r4
 8000306:	f200 80d9 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 800030a:	4618      	mov	r0, r3
 800030c:	eba4 0408 	sub.w	r4, r4, r8
 8000310:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000314:	e7bf      	b.n	8000296 <__udivmoddi4+0x96>
 8000316:	428b      	cmp	r3, r1
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x12e>
 800031a:	2d00      	cmp	r5, #0
 800031c:	f000 80b1 	beq.w	8000482 <__udivmoddi4+0x282>
 8000320:	2600      	movs	r6, #0
 8000322:	e9c5 0100 	strd	r0, r1, [r5]
 8000326:	4630      	mov	r0, r6
 8000328:	4631      	mov	r1, r6
 800032a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800032e:	fab3 f683 	clz	r6, r3
 8000332:	2e00      	cmp	r6, #0
 8000334:	d14a      	bne.n	80003cc <__udivmoddi4+0x1cc>
 8000336:	428b      	cmp	r3, r1
 8000338:	d302      	bcc.n	8000340 <__udivmoddi4+0x140>
 800033a:	4282      	cmp	r2, r0
 800033c:	f200 80b8 	bhi.w	80004b0 <__udivmoddi4+0x2b0>
 8000340:	1a84      	subs	r4, r0, r2
 8000342:	eb61 0103 	sbc.w	r1, r1, r3
 8000346:	2001      	movs	r0, #1
 8000348:	468c      	mov	ip, r1
 800034a:	2d00      	cmp	r5, #0
 800034c:	d0a8      	beq.n	80002a0 <__udivmoddi4+0xa0>
 800034e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000354:	f1c2 0320 	rsb	r3, r2, #32
 8000358:	fa20 f603 	lsr.w	r6, r0, r3
 800035c:	4097      	lsls	r7, r2
 800035e:	fa01 f002 	lsl.w	r0, r1, r2
 8000362:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000366:	40d9      	lsrs	r1, r3
 8000368:	4330      	orrs	r0, r6
 800036a:	0c03      	lsrs	r3, r0, #16
 800036c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000370:	fa1f f887 	uxth.w	r8, r7
 8000374:	fb0e 1116 	mls	r1, lr, r6, r1
 8000378:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037c:	fb06 f108 	mul.w	r1, r6, r8
 8000380:	4299      	cmp	r1, r3
 8000382:	fa04 f402 	lsl.w	r4, r4, r2
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x19c>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f106 3cff 	add.w	ip, r6, #4294967295
 800038e:	f080 808d 	bcs.w	80004ac <__udivmoddi4+0x2ac>
 8000392:	4299      	cmp	r1, r3
 8000394:	f240 808a 	bls.w	80004ac <__udivmoddi4+0x2ac>
 8000398:	3e02      	subs	r6, #2
 800039a:	443b      	add	r3, r7
 800039c:	1a5b      	subs	r3, r3, r1
 800039e:	b281      	uxth	r1, r0
 80003a0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb00 f308 	mul.w	r3, r0, r8
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x1c4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ba:	d273      	bcs.n	80004a4 <__udivmoddi4+0x2a4>
 80003bc:	428b      	cmp	r3, r1
 80003be:	d971      	bls.n	80004a4 <__udivmoddi4+0x2a4>
 80003c0:	3802      	subs	r0, #2
 80003c2:	4439      	add	r1, r7
 80003c4:	1acb      	subs	r3, r1, r3
 80003c6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ca:	e778      	b.n	80002be <__udivmoddi4+0xbe>
 80003cc:	f1c6 0c20 	rsb	ip, r6, #32
 80003d0:	fa03 f406 	lsl.w	r4, r3, r6
 80003d4:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d8:	431c      	orrs	r4, r3
 80003da:	fa20 f70c 	lsr.w	r7, r0, ip
 80003de:	fa01 f306 	lsl.w	r3, r1, r6
 80003e2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003e6:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ea:	431f      	orrs	r7, r3
 80003ec:	0c3b      	lsrs	r3, r7, #16
 80003ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f2:	fa1f f884 	uxth.w	r8, r4
 80003f6:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003fe:	fb09 fa08 	mul.w	sl, r9, r8
 8000402:	458a      	cmp	sl, r1
 8000404:	fa02 f206 	lsl.w	r2, r2, r6
 8000408:	fa00 f306 	lsl.w	r3, r0, r6
 800040c:	d908      	bls.n	8000420 <__udivmoddi4+0x220>
 800040e:	1861      	adds	r1, r4, r1
 8000410:	f109 30ff 	add.w	r0, r9, #4294967295
 8000414:	d248      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 8000416:	458a      	cmp	sl, r1
 8000418:	d946      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800041a:	f1a9 0902 	sub.w	r9, r9, #2
 800041e:	4421      	add	r1, r4
 8000420:	eba1 010a 	sub.w	r1, r1, sl
 8000424:	b2bf      	uxth	r7, r7
 8000426:	fbb1 f0fe 	udiv	r0, r1, lr
 800042a:	fb0e 1110 	mls	r1, lr, r0, r1
 800042e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000432:	fb00 f808 	mul.w	r8, r0, r8
 8000436:	45b8      	cmp	r8, r7
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x24a>
 800043a:	19e7      	adds	r7, r4, r7
 800043c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000440:	d22e      	bcs.n	80004a0 <__udivmoddi4+0x2a0>
 8000442:	45b8      	cmp	r8, r7
 8000444:	d92c      	bls.n	80004a0 <__udivmoddi4+0x2a0>
 8000446:	3802      	subs	r0, #2
 8000448:	4427      	add	r7, r4
 800044a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800044e:	eba7 0708 	sub.w	r7, r7, r8
 8000452:	fba0 8902 	umull	r8, r9, r0, r2
 8000456:	454f      	cmp	r7, r9
 8000458:	46c6      	mov	lr, r8
 800045a:	4649      	mov	r1, r9
 800045c:	d31a      	bcc.n	8000494 <__udivmoddi4+0x294>
 800045e:	d017      	beq.n	8000490 <__udivmoddi4+0x290>
 8000460:	b15d      	cbz	r5, 800047a <__udivmoddi4+0x27a>
 8000462:	ebb3 020e 	subs.w	r2, r3, lr
 8000466:	eb67 0701 	sbc.w	r7, r7, r1
 800046a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800046e:	40f2      	lsrs	r2, r6
 8000470:	ea4c 0202 	orr.w	r2, ip, r2
 8000474:	40f7      	lsrs	r7, r6
 8000476:	e9c5 2700 	strd	r2, r7, [r5]
 800047a:	2600      	movs	r6, #0
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	462e      	mov	r6, r5
 8000484:	4628      	mov	r0, r5
 8000486:	e70b      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000488:	4606      	mov	r6, r0
 800048a:	e6e9      	b.n	8000260 <__udivmoddi4+0x60>
 800048c:	4618      	mov	r0, r3
 800048e:	e6fd      	b.n	800028c <__udivmoddi4+0x8c>
 8000490:	4543      	cmp	r3, r8
 8000492:	d2e5      	bcs.n	8000460 <__udivmoddi4+0x260>
 8000494:	ebb8 0e02 	subs.w	lr, r8, r2
 8000498:	eb69 0104 	sbc.w	r1, r9, r4
 800049c:	3801      	subs	r0, #1
 800049e:	e7df      	b.n	8000460 <__udivmoddi4+0x260>
 80004a0:	4608      	mov	r0, r1
 80004a2:	e7d2      	b.n	800044a <__udivmoddi4+0x24a>
 80004a4:	4660      	mov	r0, ip
 80004a6:	e78d      	b.n	80003c4 <__udivmoddi4+0x1c4>
 80004a8:	4681      	mov	r9, r0
 80004aa:	e7b9      	b.n	8000420 <__udivmoddi4+0x220>
 80004ac:	4666      	mov	r6, ip
 80004ae:	e775      	b.n	800039c <__udivmoddi4+0x19c>
 80004b0:	4630      	mov	r0, r6
 80004b2:	e74a      	b.n	800034a <__udivmoddi4+0x14a>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	4439      	add	r1, r7
 80004ba:	e713      	b.n	80002e4 <__udivmoddi4+0xe4>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	e724      	b.n	800030c <__udivmoddi4+0x10c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004cc:	f000 fcc8 	bl	8000e60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d0:	f000 f848 	bl	8000564 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 f9f6 	bl	80008c4 <MX_GPIO_Init>
  MX_TIM8_Init();
 80004d8:	f000 f94a 	bl	8000770 <MX_TIM8_Init>
  MX_TIM2_Init();
 80004dc:	f000 f8a0 	bl	8000620 <MX_TIM2_Init>
  MX_TIM3_Init();
 80004e0:	f000 f8f2 	bl	80006c8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  OLED_Init();
 80004e4:	f005 fad6 	bl	8005a94 <OLED_Init>
//  show();	// To print on the OLED
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004e8:	f002 fbda 	bl	8002ca0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004ec:	4a11      	ldr	r2, [pc, #68]	; (8000534 <main+0x6c>)
 80004ee:	2100      	movs	r1, #0
 80004f0:	4811      	ldr	r0, [pc, #68]	; (8000538 <main+0x70>)
 80004f2:	f002 fc1f 	bl	8002d34 <osThreadNew>
 80004f6:	4603      	mov	r3, r0
 80004f8:	4a10      	ldr	r2, [pc, #64]	; (800053c <main+0x74>)
 80004fa:	6013      	str	r3, [r2, #0]

  /* creation of MotorTask */
  MotorTaskHandle = osThreadNew(motor, NULL, &MotorTask_attributes);
 80004fc:	4a10      	ldr	r2, [pc, #64]	; (8000540 <main+0x78>)
 80004fe:	2100      	movs	r1, #0
 8000500:	4810      	ldr	r0, [pc, #64]	; (8000544 <main+0x7c>)
 8000502:	f002 fc17 	bl	8002d34 <osThreadNew>
 8000506:	4603      	mov	r3, r0
 8000508:	4a0f      	ldr	r2, [pc, #60]	; (8000548 <main+0x80>)
 800050a:	6013      	str	r3, [r2, #0]

  /* creation of showOLED */
  showOLEDHandle = osThreadNew(showoled, NULL, &showOLED_attributes);
 800050c:	4a0f      	ldr	r2, [pc, #60]	; (800054c <main+0x84>)
 800050e:	2100      	movs	r1, #0
 8000510:	480f      	ldr	r0, [pc, #60]	; (8000550 <main+0x88>)
 8000512:	f002 fc0f 	bl	8002d34 <osThreadNew>
 8000516:	4603      	mov	r3, r0
 8000518:	4a0e      	ldr	r2, [pc, #56]	; (8000554 <main+0x8c>)
 800051a:	6013      	str	r3, [r2, #0]

  /* creation of EncoderTask */
  EncoderTaskHandle = osThreadNew(encoder_task, NULL, &EncoderTask_attributes);
 800051c:	4a0e      	ldr	r2, [pc, #56]	; (8000558 <main+0x90>)
 800051e:	2100      	movs	r1, #0
 8000520:	480e      	ldr	r0, [pc, #56]	; (800055c <main+0x94>)
 8000522:	f002 fc07 	bl	8002d34 <osThreadNew>
 8000526:	4603      	mov	r3, r0
 8000528:	4a0d      	ldr	r2, [pc, #52]	; (8000560 <main+0x98>)
 800052a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800052c:	f002 fbdc 	bl	8002ce8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000530:	e7fe      	b.n	8000530 <main+0x68>
 8000532:	bf00      	nop
 8000534:	08005c94 	.word	0x08005c94
 8000538:	080009b1 	.word	0x080009b1
 800053c:	2000493c 	.word	0x2000493c
 8000540:	08005cb8 	.word	0x08005cb8
 8000544:	080009c1 	.word	0x080009c1
 8000548:	20004988 	.word	0x20004988
 800054c:	08005cdc 	.word	0x08005cdc
 8000550:	08000a89 	.word	0x08000a89
 8000554:	20004a20 	.word	0x20004a20
 8000558:	08005d00 	.word	0x08005d00
 800055c:	08000ac9 	.word	0x08000ac9
 8000560:	2000498c 	.word	0x2000498c

08000564 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b094      	sub	sp, #80	; 0x50
 8000568:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056a:	f107 0320 	add.w	r3, r7, #32
 800056e:	2230      	movs	r2, #48	; 0x30
 8000570:	2100      	movs	r1, #0
 8000572:	4618      	mov	r0, r3
 8000574:	f005 fb4c 	bl	8005c10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000578:	f107 030c 	add.w	r3, r7, #12
 800057c:	2200      	movs	r2, #0
 800057e:	601a      	str	r2, [r3, #0]
 8000580:	605a      	str	r2, [r3, #4]
 8000582:	609a      	str	r2, [r3, #8]
 8000584:	60da      	str	r2, [r3, #12]
 8000586:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000588:	2300      	movs	r3, #0
 800058a:	60bb      	str	r3, [r7, #8]
 800058c:	4b22      	ldr	r3, [pc, #136]	; (8000618 <SystemClock_Config+0xb4>)
 800058e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000590:	4a21      	ldr	r2, [pc, #132]	; (8000618 <SystemClock_Config+0xb4>)
 8000592:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000596:	6413      	str	r3, [r2, #64]	; 0x40
 8000598:	4b1f      	ldr	r3, [pc, #124]	; (8000618 <SystemClock_Config+0xb4>)
 800059a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800059c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005a0:	60bb      	str	r3, [r7, #8]
 80005a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005a4:	2300      	movs	r3, #0
 80005a6:	607b      	str	r3, [r7, #4]
 80005a8:	4b1c      	ldr	r3, [pc, #112]	; (800061c <SystemClock_Config+0xb8>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4a1b      	ldr	r2, [pc, #108]	; (800061c <SystemClock_Config+0xb8>)
 80005ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005b2:	6013      	str	r3, [r2, #0]
 80005b4:	4b19      	ldr	r3, [pc, #100]	; (800061c <SystemClock_Config+0xb8>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005bc:	607b      	str	r3, [r7, #4]
 80005be:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005c0:	2302      	movs	r3, #2
 80005c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c4:	2301      	movs	r3, #1
 80005c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c8:	2310      	movs	r3, #16
 80005ca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005cc:	2300      	movs	r3, #0
 80005ce:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d0:	f107 0320 	add.w	r3, r7, #32
 80005d4:	4618      	mov	r0, r3
 80005d6:	f000 ff9d 	bl	8001514 <HAL_RCC_OscConfig>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80005e0:	f000 faca 	bl	8000b78 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e4:	230f      	movs	r3, #15
 80005e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005e8:	2300      	movs	r3, #0
 80005ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ec:	2300      	movs	r3, #0
 80005ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005f0:	2300      	movs	r3, #0
 80005f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f4:	2300      	movs	r3, #0
 80005f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005f8:	f107 030c 	add.w	r3, r7, #12
 80005fc:	2100      	movs	r1, #0
 80005fe:	4618      	mov	r0, r3
 8000600:	f001 fa00 	bl	8001a04 <HAL_RCC_ClockConfig>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800060a:	f000 fab5 	bl	8000b78 <Error_Handler>
  }
}
 800060e:	bf00      	nop
 8000610:	3750      	adds	r7, #80	; 0x50
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	40023800 	.word	0x40023800
 800061c:	40007000 	.word	0x40007000

08000620 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b08c      	sub	sp, #48	; 0x30
 8000624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000626:	f107 030c 	add.w	r3, r7, #12
 800062a:	2224      	movs	r2, #36	; 0x24
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f005 faee 	bl	8005c10 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000634:	1d3b      	adds	r3, r7, #4
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
 800063a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800063c:	4b21      	ldr	r3, [pc, #132]	; (80006c4 <MX_TIM2_Init+0xa4>)
 800063e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000642:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000644:	4b1f      	ldr	r3, [pc, #124]	; (80006c4 <MX_TIM2_Init+0xa4>)
 8000646:	2200      	movs	r2, #0
 8000648:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800064a:	4b1e      	ldr	r3, [pc, #120]	; (80006c4 <MX_TIM2_Init+0xa4>)
 800064c:	2200      	movs	r2, #0
 800064e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000650:	4b1c      	ldr	r3, [pc, #112]	; (80006c4 <MX_TIM2_Init+0xa4>)
 8000652:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000656:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000658:	4b1a      	ldr	r3, [pc, #104]	; (80006c4 <MX_TIM2_Init+0xa4>)
 800065a:	2200      	movs	r2, #0
 800065c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800065e:	4b19      	ldr	r3, [pc, #100]	; (80006c4 <MX_TIM2_Init+0xa4>)
 8000660:	2200      	movs	r2, #0
 8000662:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000664:	2303      	movs	r3, #3
 8000666:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000668:	2300      	movs	r3, #0
 800066a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800066c:	2301      	movs	r3, #1
 800066e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000670:	2300      	movs	r3, #0
 8000672:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8000674:	230a      	movs	r3, #10
 8000676:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000678:	2300      	movs	r3, #0
 800067a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800067c:	2301      	movs	r3, #1
 800067e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000680:	2300      	movs	r3, #0
 8000682:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8000684:	230a      	movs	r3, #10
 8000686:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000688:	f107 030c 	add.w	r3, r7, #12
 800068c:	4619      	mov	r1, r3
 800068e:	480d      	ldr	r0, [pc, #52]	; (80006c4 <MX_TIM2_Init+0xa4>)
 8000690:	f001 fcc4 	bl	800201c <HAL_TIM_Encoder_Init>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800069a:	f000 fa6d 	bl	8000b78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800069e:	2300      	movs	r3, #0
 80006a0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006a2:	2300      	movs	r3, #0
 80006a4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006a6:	1d3b      	adds	r3, r7, #4
 80006a8:	4619      	mov	r1, r3
 80006aa:	4806      	ldr	r0, [pc, #24]	; (80006c4 <MX_TIM2_Init+0xa4>)
 80006ac:	f002 f9f6 	bl	8002a9c <HAL_TIMEx_MasterConfigSynchronization>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80006b6:	f000 fa5f 	bl	8000b78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80006ba:	bf00      	nop
 80006bc:	3730      	adds	r7, #48	; 0x30
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	200049d8 	.word	0x200049d8

080006c8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b08c      	sub	sp, #48	; 0x30
 80006cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80006ce:	f107 030c 	add.w	r3, r7, #12
 80006d2:	2224      	movs	r2, #36	; 0x24
 80006d4:	2100      	movs	r1, #0
 80006d6:	4618      	mov	r0, r3
 80006d8:	f005 fa9a 	bl	8005c10 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006dc:	1d3b      	adds	r3, r7, #4
 80006de:	2200      	movs	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]
 80006e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80006e4:	4b20      	ldr	r3, [pc, #128]	; (8000768 <MX_TIM3_Init+0xa0>)
 80006e6:	4a21      	ldr	r2, [pc, #132]	; (800076c <MX_TIM3_Init+0xa4>)
 80006e8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80006ea:	4b1f      	ldr	r3, [pc, #124]	; (8000768 <MX_TIM3_Init+0xa0>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006f0:	4b1d      	ldr	r3, [pc, #116]	; (8000768 <MX_TIM3_Init+0xa0>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80006f6:	4b1c      	ldr	r3, [pc, #112]	; (8000768 <MX_TIM3_Init+0xa0>)
 80006f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006fc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006fe:	4b1a      	ldr	r3, [pc, #104]	; (8000768 <MX_TIM3_Init+0xa0>)
 8000700:	2200      	movs	r2, #0
 8000702:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000704:	4b18      	ldr	r3, [pc, #96]	; (8000768 <MX_TIM3_Init+0xa0>)
 8000706:	2200      	movs	r2, #0
 8000708:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800070a:	2303      	movs	r3, #3
 800070c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800070e:	2300      	movs	r3, #0
 8000710:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000712:	2301      	movs	r3, #1
 8000714:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000716:	2300      	movs	r3, #0
 8000718:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 800071a:	230a      	movs	r3, #10
 800071c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800071e:	2300      	movs	r3, #0
 8000720:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000722:	2301      	movs	r3, #1
 8000724:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000726:	2300      	movs	r3, #0
 8000728:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 800072a:	230a      	movs	r3, #10
 800072c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800072e:	f107 030c 	add.w	r3, r7, #12
 8000732:	4619      	mov	r1, r3
 8000734:	480c      	ldr	r0, [pc, #48]	; (8000768 <MX_TIM3_Init+0xa0>)
 8000736:	f001 fc71 	bl	800201c <HAL_TIM_Encoder_Init>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000740:	f000 fa1a 	bl	8000b78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000744:	2300      	movs	r3, #0
 8000746:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000748:	2300      	movs	r3, #0
 800074a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800074c:	1d3b      	adds	r3, r7, #4
 800074e:	4619      	mov	r1, r3
 8000750:	4805      	ldr	r0, [pc, #20]	; (8000768 <MX_TIM3_Init+0xa0>)
 8000752:	f002 f9a3 	bl	8002a9c <HAL_TIMEx_MasterConfigSynchronization>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800075c:	f000 fa0c 	bl	8000b78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000760:	bf00      	nop
 8000762:	3730      	adds	r7, #48	; 0x30
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	20004990 	.word	0x20004990
 800076c:	40000400 	.word	0x40000400

08000770 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b096      	sub	sp, #88	; 0x58
 8000774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000776:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	605a      	str	r2, [r3, #4]
 8000780:	609a      	str	r2, [r3, #8]
 8000782:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000784:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800078e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	605a      	str	r2, [r3, #4]
 8000798:	609a      	str	r2, [r3, #8]
 800079a:	60da      	str	r2, [r3, #12]
 800079c:	611a      	str	r2, [r3, #16]
 800079e:	615a      	str	r2, [r3, #20]
 80007a0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007a2:	1d3b      	adds	r3, r7, #4
 80007a4:	2220      	movs	r2, #32
 80007a6:	2100      	movs	r1, #0
 80007a8:	4618      	mov	r0, r3
 80007aa:	f005 fa31 	bl	8005c10 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80007ae:	4b43      	ldr	r3, [pc, #268]	; (80008bc <MX_TIM8_Init+0x14c>)
 80007b0:	4a43      	ldr	r2, [pc, #268]	; (80008c0 <MX_TIM8_Init+0x150>)
 80007b2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80007b4:	4b41      	ldr	r3, [pc, #260]	; (80008bc <MX_TIM8_Init+0x14c>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ba:	4b40      	ldr	r3, [pc, #256]	; (80008bc <MX_TIM8_Init+0x14c>)
 80007bc:	2200      	movs	r2, #0
 80007be:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 80007c0:	4b3e      	ldr	r3, [pc, #248]	; (80008bc <MX_TIM8_Init+0x14c>)
 80007c2:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80007c6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007c8:	4b3c      	ldr	r3, [pc, #240]	; (80008bc <MX_TIM8_Init+0x14c>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80007ce:	4b3b      	ldr	r3, [pc, #236]	; (80008bc <MX_TIM8_Init+0x14c>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007d4:	4b39      	ldr	r3, [pc, #228]	; (80008bc <MX_TIM8_Init+0x14c>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80007da:	4838      	ldr	r0, [pc, #224]	; (80008bc <MX_TIM8_Init+0x14c>)
 80007dc:	f001 faae 	bl	8001d3c <HAL_TIM_Base_Init>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80007e6:	f000 f9c7 	bl	8000b78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ee:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80007f0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80007f4:	4619      	mov	r1, r3
 80007f6:	4831      	ldr	r0, [pc, #196]	; (80008bc <MX_TIM8_Init+0x14c>)
 80007f8:	f001 fd78 	bl	80022ec <HAL_TIM_ConfigClockSource>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8000802:	f000 f9b9 	bl	8000b78 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000806:	482d      	ldr	r0, [pc, #180]	; (80008bc <MX_TIM8_Init+0x14c>)
 8000808:	f001 fae7 	bl	8001dda <HAL_TIM_PWM_Init>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8000812:	f000 f9b1 	bl	8000b78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000816:	2300      	movs	r3, #0
 8000818:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800081a:	2300      	movs	r3, #0
 800081c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800081e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000822:	4619      	mov	r1, r3
 8000824:	4825      	ldr	r0, [pc, #148]	; (80008bc <MX_TIM8_Init+0x14c>)
 8000826:	f002 f939 	bl	8002a9c <HAL_TIMEx_MasterConfigSynchronization>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8000830:	f000 f9a2 	bl	8000b78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000834:	2360      	movs	r3, #96	; 0x60
 8000836:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000838:	2300      	movs	r3, #0
 800083a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800083c:	2300      	movs	r3, #0
 800083e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000840:	2300      	movs	r3, #0
 8000842:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000844:	2300      	movs	r3, #0
 8000846:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000848:	2300      	movs	r3, #0
 800084a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800084c:	2300      	movs	r3, #0
 800084e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000850:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000854:	2200      	movs	r2, #0
 8000856:	4619      	mov	r1, r3
 8000858:	4818      	ldr	r0, [pc, #96]	; (80008bc <MX_TIM8_Init+0x14c>)
 800085a:	f001 fc85 	bl	8002168 <HAL_TIM_PWM_ConfigChannel>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8000864:	f000 f988 	bl	8000b78 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000868:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800086c:	2204      	movs	r2, #4
 800086e:	4619      	mov	r1, r3
 8000870:	4812      	ldr	r0, [pc, #72]	; (80008bc <MX_TIM8_Init+0x14c>)
 8000872:	f001 fc79 	bl	8002168 <HAL_TIM_PWM_ConfigChannel>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 800087c:	f000 f97c 	bl	8000b78 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000880:	2300      	movs	r3, #0
 8000882:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000884:	2300      	movs	r3, #0
 8000886:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000888:	2300      	movs	r3, #0
 800088a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800088c:	2300      	movs	r3, #0
 800088e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000890:	2300      	movs	r3, #0
 8000892:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000894:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000898:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800089a:	2300      	movs	r3, #0
 800089c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800089e:	1d3b      	adds	r3, r7, #4
 80008a0:	4619      	mov	r1, r3
 80008a2:	4806      	ldr	r0, [pc, #24]	; (80008bc <MX_TIM8_Init+0x14c>)
 80008a4:	f002 f976 	bl	8002b94 <HAL_TIMEx_ConfigBreakDeadTime>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 80008ae:	f000 f963 	bl	8000b78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80008b2:	bf00      	nop
 80008b4:	3758      	adds	r7, #88	; 0x58
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	20004940 	.word	0x20004940
 80008c0:	40010400 	.word	0x40010400

080008c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b08a      	sub	sp, #40	; 0x28
 80008c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ca:	f107 0314 	add.w	r3, r7, #20
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	605a      	str	r2, [r3, #4]
 80008d4:	609a      	str	r2, [r3, #8]
 80008d6:	60da      	str	r2, [r3, #12]
 80008d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	613b      	str	r3, [r7, #16]
 80008de:	4b31      	ldr	r3, [pc, #196]	; (80009a4 <MX_GPIO_Init+0xe0>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	4a30      	ldr	r2, [pc, #192]	; (80009a4 <MX_GPIO_Init+0xe0>)
 80008e4:	f043 0310 	orr.w	r3, r3, #16
 80008e8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ea:	4b2e      	ldr	r3, [pc, #184]	; (80009a4 <MX_GPIO_Init+0xe0>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	f003 0310 	and.w	r3, r3, #16
 80008f2:	613b      	str	r3, [r7, #16]
 80008f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	60fb      	str	r3, [r7, #12]
 80008fa:	4b2a      	ldr	r3, [pc, #168]	; (80009a4 <MX_GPIO_Init+0xe0>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	4a29      	ldr	r2, [pc, #164]	; (80009a4 <MX_GPIO_Init+0xe0>)
 8000900:	f043 0301 	orr.w	r3, r3, #1
 8000904:	6313      	str	r3, [r2, #48]	; 0x30
 8000906:	4b27      	ldr	r3, [pc, #156]	; (80009a4 <MX_GPIO_Init+0xe0>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	f003 0301 	and.w	r3, r3, #1
 800090e:	60fb      	str	r3, [r7, #12]
 8000910:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	60bb      	str	r3, [r7, #8]
 8000916:	4b23      	ldr	r3, [pc, #140]	; (80009a4 <MX_GPIO_Init+0xe0>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	4a22      	ldr	r2, [pc, #136]	; (80009a4 <MX_GPIO_Init+0xe0>)
 800091c:	f043 0304 	orr.w	r3, r3, #4
 8000920:	6313      	str	r3, [r2, #48]	; 0x30
 8000922:	4b20      	ldr	r3, [pc, #128]	; (80009a4 <MX_GPIO_Init+0xe0>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	f003 0304 	and.w	r3, r3, #4
 800092a:	60bb      	str	r3, [r7, #8]
 800092c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	607b      	str	r3, [r7, #4]
 8000932:	4b1c      	ldr	r3, [pc, #112]	; (80009a4 <MX_GPIO_Init+0xe0>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	4a1b      	ldr	r2, [pc, #108]	; (80009a4 <MX_GPIO_Init+0xe0>)
 8000938:	f043 0302 	orr.w	r3, r3, #2
 800093c:	6313      	str	r3, [r2, #48]	; 0x30
 800093e:	4b19      	ldr	r3, [pc, #100]	; (80009a4 <MX_GPIO_Init+0xe0>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	f003 0302 	and.w	r3, r3, #2
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 800094a:	2200      	movs	r2, #0
 800094c:	f44f 61bc 	mov.w	r1, #1504	; 0x5e0
 8000950:	4815      	ldr	r0, [pc, #84]	; (80009a8 <MX_GPIO_Init+0xe4>)
 8000952:	f000 fd9d 	bl	8001490 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin, GPIO_PIN_RESET);
 8000956:	2200      	movs	r2, #0
 8000958:	213c      	movs	r1, #60	; 0x3c
 800095a:	4814      	ldr	r0, [pc, #80]	; (80009ac <MX_GPIO_Init+0xe8>)
 800095c:	f000 fd98 	bl	8001490 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin
                           LED3_Pin */
  GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 8000960:	f44f 63bc 	mov.w	r3, #1504	; 0x5e0
 8000964:	617b      	str	r3, [r7, #20]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000966:	2301      	movs	r3, #1
 8000968:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	2300      	movs	r3, #0
 800096c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096e:	2300      	movs	r3, #0
 8000970:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000972:	f107 0314 	add.w	r3, r7, #20
 8000976:	4619      	mov	r1, r3
 8000978:	480b      	ldr	r0, [pc, #44]	; (80009a8 <MX_GPIO_Init+0xe4>)
 800097a:	f000 fbed 	bl	8001158 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin BIN1_Pin BIN2_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin;
 800097e:	233c      	movs	r3, #60	; 0x3c
 8000980:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000982:	2301      	movs	r3, #1
 8000984:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800098a:	2302      	movs	r3, #2
 800098c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800098e:	f107 0314 	add.w	r3, r7, #20
 8000992:	4619      	mov	r1, r3
 8000994:	4805      	ldr	r0, [pc, #20]	; (80009ac <MX_GPIO_Init+0xe8>)
 8000996:	f000 fbdf 	bl	8001158 <HAL_GPIO_Init>

}
 800099a:	bf00      	nop
 800099c:	3728      	adds	r7, #40	; 0x28
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40023800 	.word	0x40023800
 80009a8:	40021000 	.word	0x40021000
 80009ac:	40020000 	.word	0x40020000

080009b0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80009b8:	2001      	movs	r0, #1
 80009ba:	f002 fa4d 	bl	8002e58 <osDelay>
 80009be:	e7fb      	b.n	80009b8 <StartDefaultTask+0x8>

080009c0 <motor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_motor */
void motor(void *argument)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b084      	sub	sp, #16
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN motor */
	uint16_t pwmVal = 0;
 80009c8:	2300      	movs	r3, #0
 80009ca:	81fb      	strh	r3, [r7, #14]
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80009cc:	2100      	movs	r1, #0
 80009ce:	482c      	ldr	r0, [pc, #176]	; (8000a80 <motor+0xc0>)
 80009d0:	f001 fa5c 	bl	8001e8c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 80009d4:	2104      	movs	r1, #4
 80009d6:	482a      	ldr	r0, [pc, #168]	; (8000a80 <motor+0xc0>)
 80009d8:	f001 fa58 	bl	8001e8c <HAL_TIM_PWM_Start>
  /* Infinite loop */
  for(;;)
  {
	  // Clock Wise
	  while(pwmVal< 2000)
 80009dc:	e021      	b.n	8000a22 <motor+0x62>
	  {
		  // H-Bridge Circuit for AINx; 1 turn on, the other turns off
		  // MOTOR A
		  HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 80009de:	2201      	movs	r2, #1
 80009e0:	2104      	movs	r1, #4
 80009e2:	4828      	ldr	r0, [pc, #160]	; (8000a84 <motor+0xc4>)
 80009e4:	f000 fd54 	bl	8001490 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 80009e8:	2200      	movs	r2, #0
 80009ea:	2108      	movs	r1, #8
 80009ec:	4825      	ldr	r0, [pc, #148]	; (8000a84 <motor+0xc4>)
 80009ee:	f000 fd4f 	bl	8001490 <HAL_GPIO_WritePin>

		  // MOTOR B
		  HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 80009f2:	2201      	movs	r2, #1
 80009f4:	2120      	movs	r1, #32
 80009f6:	4823      	ldr	r0, [pc, #140]	; (8000a84 <motor+0xc4>)
 80009f8:	f000 fd4a 	bl	8001490 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 80009fc:	2200      	movs	r2, #0
 80009fe:	2110      	movs	r1, #16
 8000a00:	4820      	ldr	r0, [pc, #128]	; (8000a84 <motor+0xc4>)
 8000a02:	f000 fd45 	bl	8001490 <HAL_GPIO_WritePin>

		  pwmVal++;
 8000a06:	89fb      	ldrh	r3, [r7, #14]
 8000a08:	3301      	adds	r3, #1
 8000a0a:	81fb      	strh	r3, [r7, #14]
		  // Modify comparison value for duty cycle
		  __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmVal);
 8000a0c:	4b1c      	ldr	r3, [pc, #112]	; (8000a80 <motor+0xc0>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	89fa      	ldrh	r2, [r7, #14]
 8000a12:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, pwmVal);
 8000a14:	4b1a      	ldr	r3, [pc, #104]	; (8000a80 <motor+0xc0>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	89fa      	ldrh	r2, [r7, #14]
 8000a1a:	639a      	str	r2, [r3, #56]	; 0x38
		  osDelay(10);
 8000a1c:	200a      	movs	r0, #10
 8000a1e:	f002 fa1b 	bl	8002e58 <osDelay>
	  while(pwmVal< 2000)
 8000a22:	89fb      	ldrh	r3, [r7, #14]
 8000a24:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000a28:	d3d9      	bcc.n	80009de <motor+0x1e>
	  }
	  // Anti clock wise
	  while(pwmVal>0)
 8000a2a:	e021      	b.n	8000a70 <motor+0xb0>
	  {
		  // MOTOR A
		  HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	2104      	movs	r1, #4
 8000a30:	4814      	ldr	r0, [pc, #80]	; (8000a84 <motor+0xc4>)
 8000a32:	f000 fd2d 	bl	8001490 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8000a36:	2201      	movs	r2, #1
 8000a38:	2108      	movs	r1, #8
 8000a3a:	4812      	ldr	r0, [pc, #72]	; (8000a84 <motor+0xc4>)
 8000a3c:	f000 fd28 	bl	8001490 <HAL_GPIO_WritePin>

		  // MOTOR B
		  HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 8000a40:	2200      	movs	r2, #0
 8000a42:	2120      	movs	r1, #32
 8000a44:	480f      	ldr	r0, [pc, #60]	; (8000a84 <motor+0xc4>)
 8000a46:	f000 fd23 	bl	8001490 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET);
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	2110      	movs	r1, #16
 8000a4e:	480d      	ldr	r0, [pc, #52]	; (8000a84 <motor+0xc4>)
 8000a50:	f000 fd1e 	bl	8001490 <HAL_GPIO_WritePin>
		  pwmVal--;
 8000a54:	89fb      	ldrh	r3, [r7, #14]
 8000a56:	3b01      	subs	r3, #1
 8000a58:	81fb      	strh	r3, [r7, #14]
		  __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmVal);
 8000a5a:	4b09      	ldr	r3, [pc, #36]	; (8000a80 <motor+0xc0>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	89fa      	ldrh	r2, [r7, #14]
 8000a60:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, pwmVal);
 8000a62:	4b07      	ldr	r3, [pc, #28]	; (8000a80 <motor+0xc0>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	89fa      	ldrh	r2, [r7, #14]
 8000a68:	639a      	str	r2, [r3, #56]	; 0x38
		  osDelay(10);
 8000a6a:	200a      	movs	r0, #10
 8000a6c:	f002 f9f4 	bl	8002e58 <osDelay>
	  while(pwmVal>0)
 8000a70:	89fb      	ldrh	r3, [r7, #14]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d1da      	bne.n	8000a2c <motor+0x6c>
	  }
	  osDelay(1);
 8000a76:	2001      	movs	r0, #1
 8000a78:	f002 f9ee 	bl	8002e58 <osDelay>
	  while(pwmVal< 2000)
 8000a7c:	e7d1      	b.n	8000a22 <motor+0x62>
 8000a7e:	bf00      	nop
 8000a80:	20004940 	.word	0x20004940
 8000a84:	40020000 	.word	0x40020000

08000a88 <showoled>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_showoled */
void showoled(void *argument)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b088      	sub	sp, #32
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN showoled */
  /* Infinite loop */
	uint8_t hello [20] = "motor test\0";
 8000a90:	4a0c      	ldr	r2, [pc, #48]	; (8000ac4 <showoled+0x3c>)
 8000a92:	f107 030c 	add.w	r3, r7, #12
 8000a96:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a98:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000a9c:	f107 0318 	add.w	r3, r7, #24
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	605a      	str	r2, [r3, #4]
	for(;;)
	{
		OLED_ShowString(10, 10, hello);
 8000aa6:	f107 030c 	add.w	r3, r7, #12
 8000aaa:	461a      	mov	r2, r3
 8000aac:	210a      	movs	r1, #10
 8000aae:	200a      	movs	r0, #10
 8000ab0:	f004 ffbe 	bl	8005a30 <OLED_ShowString>
		OLED_Refresh_Gram();
 8000ab4:	f004 fe48 	bl	8005748 <OLED_Refresh_Gram>
		osDelay(1000);
 8000ab8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000abc:	f002 f9cc 	bl	8002e58 <osDelay>
		OLED_ShowString(10, 10, hello);
 8000ac0:	e7f1      	b.n	8000aa6 <showoled+0x1e>
 8000ac2:	bf00      	nop
 8000ac4:	08005c68 	.word	0x08005c68

08000ac8 <encoder_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_encoder_task */
void encoder_task(void *argument)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b08c      	sub	sp, #48	; 0x30
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN encoder_task */
  /* Infinite loop */
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_ALL);
 8000ad0:	213c      	movs	r1, #60	; 0x3c
 8000ad2:	4828      	ldr	r0, [pc, #160]	; (8000b74 <encoder_task+0xac>)
 8000ad4:	f001 f9da 	bl	8001e8c <HAL_TIM_PWM_Start>

	int cnt1, cnt2, diff;
	uint32_t tick;

	cnt1 = __HAL_TIM_GET_COUNTER(&htim2);
 8000ad8:	4b26      	ldr	r3, [pc, #152]	; (8000b74 <encoder_task+0xac>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ade:	62fb      	str	r3, [r7, #44]	; 0x2c
	tick = HAL_GetTick();
 8000ae0:	f000 fa24 	bl	8000f2c <HAL_GetTick>
 8000ae4:	62b8      	str	r0, [r7, #40]	; 0x28
	uint8_t msg[20];
	uint16_t dir;

	for(;;)
	{
		if(HAL_GetTick()-tick > 1000L){
 8000ae6:	f000 fa21 	bl	8000f2c <HAL_GetTick>
 8000aea:	4602      	mov	r2, r0
 8000aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000aee:	1ad3      	subs	r3, r2, r3
 8000af0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000af4:	d9f7      	bls.n	8000ae6 <encoder_task+0x1e>
			cnt2 = __HAL_TIM_GET_COUNTER(&htim2);
 8000af6:	4b1f      	ldr	r3, [pc, #124]	; (8000b74 <encoder_task+0xac>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000afc:	627b      	str	r3, [r7, #36]	; 0x24
			if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)){
 8000afe:	4b1d      	ldr	r3, [pc, #116]	; (8000b74 <encoder_task+0xac>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	f003 0310 	and.w	r3, r3, #16
 8000b08:	2b10      	cmp	r3, #16
 8000b0a:	d110      	bne.n	8000b2e <encoder_task+0x66>
				if(cnt2<cnt1)
 8000b0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b10:	429a      	cmp	r2, r3
 8000b12:	da04      	bge.n	8000b1e <encoder_task+0x56>
					diff = cnt1 - cnt2;
 8000b14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b18:	1ad3      	subs	r3, r2, r3
 8000b1a:	623b      	str	r3, [r7, #32]
 8000b1c:	e017      	b.n	8000b4e <encoder_task+0x86>
				else //overflow
					diff = (65535 - cnt2) + cnt1;
 8000b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b20:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8000b24:	33ff      	adds	r3, #255	; 0xff
 8000b26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000b28:	4413      	add	r3, r2
 8000b2a:	623b      	str	r3, [r7, #32]
 8000b2c:	e00f      	b.n	8000b4e <encoder_task+0x86>
			}
			else{
				if(cnt2 > cnt1)
 8000b2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b32:	429a      	cmp	r2, r3
 8000b34:	dd04      	ble.n	8000b40 <encoder_task+0x78>
					diff = cnt2 - cnt1;
 8000b36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b3a:	1ad3      	subs	r3, r2, r3
 8000b3c:	623b      	str	r3, [r7, #32]
 8000b3e:	e006      	b.n	8000b4e <encoder_task+0x86>
				else
					diff = (65535 - cnt1) + cnt2;
 8000b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b42:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8000b46:	33ff      	adds	r3, #255	; 0xff
 8000b48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b4a:	4413      	add	r3, r2
 8000b4c:	623b      	str	r3, [r7, #32]
			}

			dir = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2);
 8000b4e:	4b09      	ldr	r3, [pc, #36]	; (8000b74 <encoder_task+0xac>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	f003 0310 	and.w	r3, r3, #16
 8000b58:	2b10      	cmp	r3, #16
 8000b5a:	bf0c      	ite	eq
 8000b5c:	2301      	moveq	r3, #1
 8000b5e:	2300      	movne	r3, #0
 8000b60:	b2db      	uxtb	r3, r3
 8000b62:	83fb      	strh	r3, [r7, #30]
//			// Display direction
//			sprintf(msg, "dir:%5d\0",dir);
//			OLED_ShowString(10,30,msg);

			// Reset base tick
			cnt1 = __HAL_TIM_GET_COUNTER(&htim2);
 8000b64:	4b03      	ldr	r3, [pc, #12]	; (8000b74 <encoder_task+0xac>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
			tick = HAL_GetTick();
 8000b6c:	f000 f9de 	bl	8000f2c <HAL_GetTick>
 8000b70:	62b8      	str	r0, [r7, #40]	; 0x28
		if(HAL_GetTick()-tick > 1000L){
 8000b72:	e7b8      	b.n	8000ae6 <encoder_task+0x1e>
 8000b74:	200049d8 	.word	0x200049d8

08000b78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b7c:	b672      	cpsid	i
}
 8000b7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b80:	e7fe      	b.n	8000b80 <Error_Handler+0x8>
	...

08000b84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	607b      	str	r3, [r7, #4]
 8000b8e:	4b12      	ldr	r3, [pc, #72]	; (8000bd8 <HAL_MspInit+0x54>)
 8000b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b92:	4a11      	ldr	r2, [pc, #68]	; (8000bd8 <HAL_MspInit+0x54>)
 8000b94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b98:	6453      	str	r3, [r2, #68]	; 0x44
 8000b9a:	4b0f      	ldr	r3, [pc, #60]	; (8000bd8 <HAL_MspInit+0x54>)
 8000b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ba2:	607b      	str	r3, [r7, #4]
 8000ba4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	603b      	str	r3, [r7, #0]
 8000baa:	4b0b      	ldr	r3, [pc, #44]	; (8000bd8 <HAL_MspInit+0x54>)
 8000bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bae:	4a0a      	ldr	r2, [pc, #40]	; (8000bd8 <HAL_MspInit+0x54>)
 8000bb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bb4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bb6:	4b08      	ldr	r3, [pc, #32]	; (8000bd8 <HAL_MspInit+0x54>)
 8000bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bbe:	603b      	str	r3, [r7, #0]
 8000bc0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	210f      	movs	r1, #15
 8000bc6:	f06f 0001 	mvn.w	r0, #1
 8000bca:	f000 fa9c 	bl	8001106 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40023800 	.word	0x40023800

08000bdc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b08c      	sub	sp, #48	; 0x30
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be4:	f107 031c 	add.w	r3, r7, #28
 8000be8:	2200      	movs	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	605a      	str	r2, [r3, #4]
 8000bee:	609a      	str	r2, [r3, #8]
 8000bf0:	60da      	str	r2, [r3, #12]
 8000bf2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000bfc:	d14b      	bne.n	8000c96 <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000bfe:	2300      	movs	r3, #0
 8000c00:	61bb      	str	r3, [r7, #24]
 8000c02:	4b3f      	ldr	r3, [pc, #252]	; (8000d00 <HAL_TIM_Encoder_MspInit+0x124>)
 8000c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c06:	4a3e      	ldr	r2, [pc, #248]	; (8000d00 <HAL_TIM_Encoder_MspInit+0x124>)
 8000c08:	f043 0301 	orr.w	r3, r3, #1
 8000c0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c0e:	4b3c      	ldr	r3, [pc, #240]	; (8000d00 <HAL_TIM_Encoder_MspInit+0x124>)
 8000c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c12:	f003 0301 	and.w	r3, r3, #1
 8000c16:	61bb      	str	r3, [r7, #24]
 8000c18:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	617b      	str	r3, [r7, #20]
 8000c1e:	4b38      	ldr	r3, [pc, #224]	; (8000d00 <HAL_TIM_Encoder_MspInit+0x124>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	4a37      	ldr	r2, [pc, #220]	; (8000d00 <HAL_TIM_Encoder_MspInit+0x124>)
 8000c24:	f043 0301 	orr.w	r3, r3, #1
 8000c28:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2a:	4b35      	ldr	r3, [pc, #212]	; (8000d00 <HAL_TIM_Encoder_MspInit+0x124>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	f003 0301 	and.w	r3, r3, #1
 8000c32:	617b      	str	r3, [r7, #20]
 8000c34:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	613b      	str	r3, [r7, #16]
 8000c3a:	4b31      	ldr	r3, [pc, #196]	; (8000d00 <HAL_TIM_Encoder_MspInit+0x124>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	4a30      	ldr	r2, [pc, #192]	; (8000d00 <HAL_TIM_Encoder_MspInit+0x124>)
 8000c40:	f043 0302 	orr.w	r3, r3, #2
 8000c44:	6313      	str	r3, [r2, #48]	; 0x30
 8000c46:	4b2e      	ldr	r3, [pc, #184]	; (8000d00 <HAL_TIM_Encoder_MspInit+0x124>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	f003 0302 	and.w	r3, r3, #2
 8000c4e:	613b      	str	r3, [r7, #16]
 8000c50:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000c52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c58:	2302      	movs	r3, #2
 8000c5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c60:	2300      	movs	r3, #0
 8000c62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000c64:	2301      	movs	r3, #1
 8000c66:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c68:	f107 031c 	add.w	r3, r7, #28
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4825      	ldr	r0, [pc, #148]	; (8000d04 <HAL_TIM_Encoder_MspInit+0x128>)
 8000c70:	f000 fa72 	bl	8001158 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c74:	2308      	movs	r3, #8
 8000c76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c78:	2302      	movs	r3, #2
 8000c7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c80:	2300      	movs	r3, #0
 8000c82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000c84:	2301      	movs	r3, #1
 8000c86:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c88:	f107 031c 	add.w	r3, r7, #28
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	481e      	ldr	r0, [pc, #120]	; (8000d08 <HAL_TIM_Encoder_MspInit+0x12c>)
 8000c90:	f000 fa62 	bl	8001158 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000c94:	e030      	b.n	8000cf8 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM3)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4a1c      	ldr	r2, [pc, #112]	; (8000d0c <HAL_TIM_Encoder_MspInit+0x130>)
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	d12b      	bne.n	8000cf8 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	60fb      	str	r3, [r7, #12]
 8000ca4:	4b16      	ldr	r3, [pc, #88]	; (8000d00 <HAL_TIM_Encoder_MspInit+0x124>)
 8000ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca8:	4a15      	ldr	r2, [pc, #84]	; (8000d00 <HAL_TIM_Encoder_MspInit+0x124>)
 8000caa:	f043 0302 	orr.w	r3, r3, #2
 8000cae:	6413      	str	r3, [r2, #64]	; 0x40
 8000cb0:	4b13      	ldr	r3, [pc, #76]	; (8000d00 <HAL_TIM_Encoder_MspInit+0x124>)
 8000cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb4:	f003 0302 	and.w	r3, r3, #2
 8000cb8:	60fb      	str	r3, [r7, #12]
 8000cba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	60bb      	str	r3, [r7, #8]
 8000cc0:	4b0f      	ldr	r3, [pc, #60]	; (8000d00 <HAL_TIM_Encoder_MspInit+0x124>)
 8000cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc4:	4a0e      	ldr	r2, [pc, #56]	; (8000d00 <HAL_TIM_Encoder_MspInit+0x124>)
 8000cc6:	f043 0301 	orr.w	r3, r3, #1
 8000cca:	6313      	str	r3, [r2, #48]	; 0x30
 8000ccc:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <HAL_TIM_Encoder_MspInit+0x124>)
 8000cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd0:	f003 0301 	and.w	r3, r3, #1
 8000cd4:	60bb      	str	r3, [r7, #8]
 8000cd6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000cd8:	23c0      	movs	r3, #192	; 0xc0
 8000cda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cec:	f107 031c 	add.w	r3, r7, #28
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4804      	ldr	r0, [pc, #16]	; (8000d04 <HAL_TIM_Encoder_MspInit+0x128>)
 8000cf4:	f000 fa30 	bl	8001158 <HAL_GPIO_Init>
}
 8000cf8:	bf00      	nop
 8000cfa:	3730      	adds	r7, #48	; 0x30
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	40023800 	.word	0x40023800
 8000d04:	40020000 	.word	0x40020000
 8000d08:	40020400 	.word	0x40020400
 8000d0c:	40000400 	.word	0x40000400

08000d10 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b08a      	sub	sp, #40	; 0x28
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d18:	f107 0314 	add.w	r3, r7, #20
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	609a      	str	r2, [r3, #8]
 8000d24:	60da      	str	r2, [r3, #12]
 8000d26:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM8)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a19      	ldr	r2, [pc, #100]	; (8000d94 <HAL_TIM_Base_MspInit+0x84>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d12b      	bne.n	8000d8a <HAL_TIM_Base_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	613b      	str	r3, [r7, #16]
 8000d36:	4b18      	ldr	r3, [pc, #96]	; (8000d98 <HAL_TIM_Base_MspInit+0x88>)
 8000d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d3a:	4a17      	ldr	r2, [pc, #92]	; (8000d98 <HAL_TIM_Base_MspInit+0x88>)
 8000d3c:	f043 0302 	orr.w	r3, r3, #2
 8000d40:	6453      	str	r3, [r2, #68]	; 0x44
 8000d42:	4b15      	ldr	r3, [pc, #84]	; (8000d98 <HAL_TIM_Base_MspInit+0x88>)
 8000d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d46:	f003 0302 	and.w	r3, r3, #2
 8000d4a:	613b      	str	r3, [r7, #16]
 8000d4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	60fb      	str	r3, [r7, #12]
 8000d52:	4b11      	ldr	r3, [pc, #68]	; (8000d98 <HAL_TIM_Base_MspInit+0x88>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	4a10      	ldr	r2, [pc, #64]	; (8000d98 <HAL_TIM_Base_MspInit+0x88>)
 8000d58:	f043 0304 	orr.w	r3, r3, #4
 8000d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5e:	4b0e      	ldr	r3, [pc, #56]	; (8000d98 <HAL_TIM_Base_MspInit+0x88>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	f003 0304 	and.w	r3, r3, #4
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 8000d6a:	23c0      	movs	r3, #192	; 0xc0
 8000d6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6e:	2302      	movs	r3, #2
 8000d70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d72:	2300      	movs	r3, #0
 8000d74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d76:	2300      	movs	r3, #0
 8000d78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8000d7a:	2303      	movs	r3, #3
 8000d7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d7e:	f107 0314 	add.w	r3, r7, #20
 8000d82:	4619      	mov	r1, r3
 8000d84:	4805      	ldr	r0, [pc, #20]	; (8000d9c <HAL_TIM_Base_MspInit+0x8c>)
 8000d86:	f000 f9e7 	bl	8001158 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8000d8a:	bf00      	nop
 8000d8c:	3728      	adds	r7, #40	; 0x28
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	40010400 	.word	0x40010400
 8000d98:	40023800 	.word	0x40023800
 8000d9c:	40020800 	.word	0x40020800

08000da0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000da4:	e7fe      	b.n	8000da4 <NMI_Handler+0x4>

08000da6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000da6:	b480      	push	{r7}
 8000da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000daa:	e7fe      	b.n	8000daa <HardFault_Handler+0x4>

08000dac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000db0:	e7fe      	b.n	8000db0 <MemManage_Handler+0x4>

08000db2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000db2:	b480      	push	{r7}
 8000db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000db6:	e7fe      	b.n	8000db6 <BusFault_Handler+0x4>

08000db8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dbc:	e7fe      	b.n	8000dbc <UsageFault_Handler+0x4>

08000dbe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr

08000dcc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dd0:	f000 f898 	bl	8000f04 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000dd4:	f004 f88a 	bl	8004eec <xTaskGetSchedulerState>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b01      	cmp	r3, #1
 8000ddc:	d001      	beq.n	8000de2 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000dde:	f002 fceb 	bl	80037b8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000de2:	bf00      	nop
 8000de4:	bd80      	pop	{r7, pc}
	...

08000de8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dec:	4b06      	ldr	r3, [pc, #24]	; (8000e08 <SystemInit+0x20>)
 8000dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000df2:	4a05      	ldr	r2, [pc, #20]	; (8000e08 <SystemInit+0x20>)
 8000df4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000df8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dfc:	bf00      	nop
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	e000ed00 	.word	0xe000ed00

08000e0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e44 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e10:	480d      	ldr	r0, [pc, #52]	; (8000e48 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e12:	490e      	ldr	r1, [pc, #56]	; (8000e4c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e14:	4a0e      	ldr	r2, [pc, #56]	; (8000e50 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e18:	e002      	b.n	8000e20 <LoopCopyDataInit>

08000e1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e1e:	3304      	adds	r3, #4

08000e20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e24:	d3f9      	bcc.n	8000e1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e26:	4a0b      	ldr	r2, [pc, #44]	; (8000e54 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e28:	4c0b      	ldr	r4, [pc, #44]	; (8000e58 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e2c:	e001      	b.n	8000e32 <LoopFillZerobss>

08000e2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e30:	3204      	adds	r2, #4

08000e32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e34:	d3fb      	bcc.n	8000e2e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e36:	f7ff ffd7 	bl	8000de8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e3a:	f004 feb7 	bl	8005bac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e3e:	f7ff fb43 	bl	80004c8 <main>
  bx  lr    
 8000e42:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e44:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e4c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000e50:	080067a8 	.word	0x080067a8
  ldr r2, =_sbss
 8000e54:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000e58:	20004e68 	.word	0x20004e68

08000e5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e5c:	e7fe      	b.n	8000e5c <ADC_IRQHandler>
	...

08000e60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e64:	4b0e      	ldr	r3, [pc, #56]	; (8000ea0 <HAL_Init+0x40>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a0d      	ldr	r2, [pc, #52]	; (8000ea0 <HAL_Init+0x40>)
 8000e6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e70:	4b0b      	ldr	r3, [pc, #44]	; (8000ea0 <HAL_Init+0x40>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a0a      	ldr	r2, [pc, #40]	; (8000ea0 <HAL_Init+0x40>)
 8000e76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e7c:	4b08      	ldr	r3, [pc, #32]	; (8000ea0 <HAL_Init+0x40>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a07      	ldr	r2, [pc, #28]	; (8000ea0 <HAL_Init+0x40>)
 8000e82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e88:	2003      	movs	r0, #3
 8000e8a:	f000 f931 	bl	80010f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e8e:	200f      	movs	r0, #15
 8000e90:	f000 f808 	bl	8000ea4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e94:	f7ff fe76 	bl	8000b84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e98:	2300      	movs	r3, #0
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	40023c00 	.word	0x40023c00

08000ea4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000eac:	4b12      	ldr	r3, [pc, #72]	; (8000ef8 <HAL_InitTick+0x54>)
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	4b12      	ldr	r3, [pc, #72]	; (8000efc <HAL_InitTick+0x58>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f000 f93b 	bl	800113e <HAL_SYSTICK_Config>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	e00e      	b.n	8000ef0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2b0f      	cmp	r3, #15
 8000ed6:	d80a      	bhi.n	8000eee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	6879      	ldr	r1, [r7, #4]
 8000edc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ee0:	f000 f911 	bl	8001106 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ee4:	4a06      	ldr	r2, [pc, #24]	; (8000f00 <HAL_InitTick+0x5c>)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eea:	2300      	movs	r3, #0
 8000eec:	e000      	b.n	8000ef0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	3708      	adds	r7, #8
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	20000000 	.word	0x20000000
 8000efc:	20000008 	.word	0x20000008
 8000f00:	20000004 	.word	0x20000004

08000f04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f08:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <HAL_IncTick+0x20>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	461a      	mov	r2, r3
 8000f0e:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <HAL_IncTick+0x24>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4413      	add	r3, r2
 8000f14:	4a04      	ldr	r2, [pc, #16]	; (8000f28 <HAL_IncTick+0x24>)
 8000f16:	6013      	str	r3, [r2, #0]
}
 8000f18:	bf00      	nop
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	20000008 	.word	0x20000008
 8000f28:	20004a24 	.word	0x20004a24

08000f2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f30:	4b03      	ldr	r3, [pc, #12]	; (8000f40 <HAL_GetTick+0x14>)
 8000f32:	681b      	ldr	r3, [r3, #0]
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	20004a24 	.word	0x20004a24

08000f44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f4c:	f7ff ffee 	bl	8000f2c <HAL_GetTick>
 8000f50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f5c:	d005      	beq.n	8000f6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f5e:	4b0a      	ldr	r3, [pc, #40]	; (8000f88 <HAL_Delay+0x44>)
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	461a      	mov	r2, r3
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	4413      	add	r3, r2
 8000f68:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f6a:	bf00      	nop
 8000f6c:	f7ff ffde 	bl	8000f2c <HAL_GetTick>
 8000f70:	4602      	mov	r2, r0
 8000f72:	68bb      	ldr	r3, [r7, #8]
 8000f74:	1ad3      	subs	r3, r2, r3
 8000f76:	68fa      	ldr	r2, [r7, #12]
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	d8f7      	bhi.n	8000f6c <HAL_Delay+0x28>
  {
  }
}
 8000f7c:	bf00      	nop
 8000f7e:	bf00      	nop
 8000f80:	3710      	adds	r7, #16
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	20000008 	.word	0x20000008

08000f8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b085      	sub	sp, #20
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	f003 0307 	and.w	r3, r3, #7
 8000f9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f9c:	4b0c      	ldr	r3, [pc, #48]	; (8000fd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fa2:	68ba      	ldr	r2, [r7, #8]
 8000fa4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fa8:	4013      	ands	r3, r2
 8000faa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fbe:	4a04      	ldr	r2, [pc, #16]	; (8000fd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	60d3      	str	r3, [r2, #12]
}
 8000fc4:	bf00      	nop
 8000fc6:	3714      	adds	r7, #20
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr
 8000fd0:	e000ed00 	.word	0xe000ed00

08000fd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fd8:	4b04      	ldr	r3, [pc, #16]	; (8000fec <__NVIC_GetPriorityGrouping+0x18>)
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	0a1b      	lsrs	r3, r3, #8
 8000fde:	f003 0307 	and.w	r3, r3, #7
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	e000ed00 	.word	0xe000ed00

08000ff0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	6039      	str	r1, [r7, #0]
 8000ffa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ffc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001000:	2b00      	cmp	r3, #0
 8001002:	db0a      	blt.n	800101a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	b2da      	uxtb	r2, r3
 8001008:	490c      	ldr	r1, [pc, #48]	; (800103c <__NVIC_SetPriority+0x4c>)
 800100a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100e:	0112      	lsls	r2, r2, #4
 8001010:	b2d2      	uxtb	r2, r2
 8001012:	440b      	add	r3, r1
 8001014:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001018:	e00a      	b.n	8001030 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	b2da      	uxtb	r2, r3
 800101e:	4908      	ldr	r1, [pc, #32]	; (8001040 <__NVIC_SetPriority+0x50>)
 8001020:	79fb      	ldrb	r3, [r7, #7]
 8001022:	f003 030f 	and.w	r3, r3, #15
 8001026:	3b04      	subs	r3, #4
 8001028:	0112      	lsls	r2, r2, #4
 800102a:	b2d2      	uxtb	r2, r2
 800102c:	440b      	add	r3, r1
 800102e:	761a      	strb	r2, [r3, #24]
}
 8001030:	bf00      	nop
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr
 800103c:	e000e100 	.word	0xe000e100
 8001040:	e000ed00 	.word	0xe000ed00

08001044 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001044:	b480      	push	{r7}
 8001046:	b089      	sub	sp, #36	; 0x24
 8001048:	af00      	add	r7, sp, #0
 800104a:	60f8      	str	r0, [r7, #12]
 800104c:	60b9      	str	r1, [r7, #8]
 800104e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	f003 0307 	and.w	r3, r3, #7
 8001056:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	f1c3 0307 	rsb	r3, r3, #7
 800105e:	2b04      	cmp	r3, #4
 8001060:	bf28      	it	cs
 8001062:	2304      	movcs	r3, #4
 8001064:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	3304      	adds	r3, #4
 800106a:	2b06      	cmp	r3, #6
 800106c:	d902      	bls.n	8001074 <NVIC_EncodePriority+0x30>
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	3b03      	subs	r3, #3
 8001072:	e000      	b.n	8001076 <NVIC_EncodePriority+0x32>
 8001074:	2300      	movs	r3, #0
 8001076:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001078:	f04f 32ff 	mov.w	r2, #4294967295
 800107c:	69bb      	ldr	r3, [r7, #24]
 800107e:	fa02 f303 	lsl.w	r3, r2, r3
 8001082:	43da      	mvns	r2, r3
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	401a      	ands	r2, r3
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800108c:	f04f 31ff 	mov.w	r1, #4294967295
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	fa01 f303 	lsl.w	r3, r1, r3
 8001096:	43d9      	mvns	r1, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800109c:	4313      	orrs	r3, r2
         );
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3724      	adds	r7, #36	; 0x24
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
	...

080010ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	3b01      	subs	r3, #1
 80010b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010bc:	d301      	bcc.n	80010c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010be:	2301      	movs	r3, #1
 80010c0:	e00f      	b.n	80010e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010c2:	4a0a      	ldr	r2, [pc, #40]	; (80010ec <SysTick_Config+0x40>)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	3b01      	subs	r3, #1
 80010c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010ca:	210f      	movs	r1, #15
 80010cc:	f04f 30ff 	mov.w	r0, #4294967295
 80010d0:	f7ff ff8e 	bl	8000ff0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010d4:	4b05      	ldr	r3, [pc, #20]	; (80010ec <SysTick_Config+0x40>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010da:	4b04      	ldr	r3, [pc, #16]	; (80010ec <SysTick_Config+0x40>)
 80010dc:	2207      	movs	r2, #7
 80010de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010e0:	2300      	movs	r3, #0
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	e000e010 	.word	0xe000e010

080010f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f7ff ff47 	bl	8000f8c <__NVIC_SetPriorityGrouping>
}
 80010fe:	bf00      	nop
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}

08001106 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001106:	b580      	push	{r7, lr}
 8001108:	b086      	sub	sp, #24
 800110a:	af00      	add	r7, sp, #0
 800110c:	4603      	mov	r3, r0
 800110e:	60b9      	str	r1, [r7, #8]
 8001110:	607a      	str	r2, [r7, #4]
 8001112:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001114:	2300      	movs	r3, #0
 8001116:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001118:	f7ff ff5c 	bl	8000fd4 <__NVIC_GetPriorityGrouping>
 800111c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800111e:	687a      	ldr	r2, [r7, #4]
 8001120:	68b9      	ldr	r1, [r7, #8]
 8001122:	6978      	ldr	r0, [r7, #20]
 8001124:	f7ff ff8e 	bl	8001044 <NVIC_EncodePriority>
 8001128:	4602      	mov	r2, r0
 800112a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800112e:	4611      	mov	r1, r2
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff ff5d 	bl	8000ff0 <__NVIC_SetPriority>
}
 8001136:	bf00      	nop
 8001138:	3718      	adds	r7, #24
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}

0800113e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800113e:	b580      	push	{r7, lr}
 8001140:	b082      	sub	sp, #8
 8001142:	af00      	add	r7, sp, #0
 8001144:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f7ff ffb0 	bl	80010ac <SysTick_Config>
 800114c:	4603      	mov	r3, r0
}
 800114e:	4618      	mov	r0, r3
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
	...

08001158 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001158:	b480      	push	{r7}
 800115a:	b089      	sub	sp, #36	; 0x24
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001162:	2300      	movs	r3, #0
 8001164:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001166:	2300      	movs	r3, #0
 8001168:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800116a:	2300      	movs	r3, #0
 800116c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800116e:	2300      	movs	r3, #0
 8001170:	61fb      	str	r3, [r7, #28]
 8001172:	e16b      	b.n	800144c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001174:	2201      	movs	r2, #1
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	697a      	ldr	r2, [r7, #20]
 8001184:	4013      	ands	r3, r2
 8001186:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001188:	693a      	ldr	r2, [r7, #16]
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	429a      	cmp	r2, r3
 800118e:	f040 815a 	bne.w	8001446 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f003 0303 	and.w	r3, r3, #3
 800119a:	2b01      	cmp	r3, #1
 800119c:	d005      	beq.n	80011aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011a6:	2b02      	cmp	r3, #2
 80011a8:	d130      	bne.n	800120c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	2203      	movs	r2, #3
 80011b6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ba:	43db      	mvns	r3, r3
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	4013      	ands	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	68da      	ldr	r2, [r3, #12]
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	fa02 f303 	lsl.w	r3, r2, r3
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	69ba      	ldr	r2, [r7, #24]
 80011d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011e0:	2201      	movs	r2, #1
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	43db      	mvns	r3, r3
 80011ea:	69ba      	ldr	r2, [r7, #24]
 80011ec:	4013      	ands	r3, r2
 80011ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	091b      	lsrs	r3, r3, #4
 80011f6:	f003 0201 	and.w	r2, r3, #1
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	4313      	orrs	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f003 0303 	and.w	r3, r3, #3
 8001214:	2b03      	cmp	r3, #3
 8001216:	d017      	beq.n	8001248 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	2203      	movs	r2, #3
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	43db      	mvns	r3, r3
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	4013      	ands	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	689a      	ldr	r2, [r3, #8]
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	005b      	lsls	r3, r3, #1
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	4313      	orrs	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f003 0303 	and.w	r3, r3, #3
 8001250:	2b02      	cmp	r3, #2
 8001252:	d123      	bne.n	800129c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	08da      	lsrs	r2, r3, #3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	3208      	adds	r2, #8
 800125c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001260:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	f003 0307 	and.w	r3, r3, #7
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	220f      	movs	r2, #15
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	43db      	mvns	r3, r3
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	4013      	ands	r3, r2
 8001276:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	691a      	ldr	r2, [r3, #16]
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	f003 0307 	and.w	r3, r3, #7
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	4313      	orrs	r3, r2
 800128c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	08da      	lsrs	r2, r3, #3
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	3208      	adds	r2, #8
 8001296:	69b9      	ldr	r1, [r7, #24]
 8001298:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	2203      	movs	r2, #3
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	43db      	mvns	r3, r3
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	4013      	ands	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f003 0203 	and.w	r2, r3, #3
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012d8:	2b00      	cmp	r3, #0
 80012da:	f000 80b4 	beq.w	8001446 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	60fb      	str	r3, [r7, #12]
 80012e2:	4b60      	ldr	r3, [pc, #384]	; (8001464 <HAL_GPIO_Init+0x30c>)
 80012e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e6:	4a5f      	ldr	r2, [pc, #380]	; (8001464 <HAL_GPIO_Init+0x30c>)
 80012e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012ec:	6453      	str	r3, [r2, #68]	; 0x44
 80012ee:	4b5d      	ldr	r3, [pc, #372]	; (8001464 <HAL_GPIO_Init+0x30c>)
 80012f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012f6:	60fb      	str	r3, [r7, #12]
 80012f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012fa:	4a5b      	ldr	r2, [pc, #364]	; (8001468 <HAL_GPIO_Init+0x310>)
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	089b      	lsrs	r3, r3, #2
 8001300:	3302      	adds	r3, #2
 8001302:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001306:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	f003 0303 	and.w	r3, r3, #3
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	220f      	movs	r2, #15
 8001312:	fa02 f303 	lsl.w	r3, r2, r3
 8001316:	43db      	mvns	r3, r3
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	4013      	ands	r3, r2
 800131c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a52      	ldr	r2, [pc, #328]	; (800146c <HAL_GPIO_Init+0x314>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d02b      	beq.n	800137e <HAL_GPIO_Init+0x226>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4a51      	ldr	r2, [pc, #324]	; (8001470 <HAL_GPIO_Init+0x318>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d025      	beq.n	800137a <HAL_GPIO_Init+0x222>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4a50      	ldr	r2, [pc, #320]	; (8001474 <HAL_GPIO_Init+0x31c>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d01f      	beq.n	8001376 <HAL_GPIO_Init+0x21e>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a4f      	ldr	r2, [pc, #316]	; (8001478 <HAL_GPIO_Init+0x320>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d019      	beq.n	8001372 <HAL_GPIO_Init+0x21a>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4a4e      	ldr	r2, [pc, #312]	; (800147c <HAL_GPIO_Init+0x324>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d013      	beq.n	800136e <HAL_GPIO_Init+0x216>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4a4d      	ldr	r2, [pc, #308]	; (8001480 <HAL_GPIO_Init+0x328>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d00d      	beq.n	800136a <HAL_GPIO_Init+0x212>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4a4c      	ldr	r2, [pc, #304]	; (8001484 <HAL_GPIO_Init+0x32c>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d007      	beq.n	8001366 <HAL_GPIO_Init+0x20e>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4a4b      	ldr	r2, [pc, #300]	; (8001488 <HAL_GPIO_Init+0x330>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d101      	bne.n	8001362 <HAL_GPIO_Init+0x20a>
 800135e:	2307      	movs	r3, #7
 8001360:	e00e      	b.n	8001380 <HAL_GPIO_Init+0x228>
 8001362:	2308      	movs	r3, #8
 8001364:	e00c      	b.n	8001380 <HAL_GPIO_Init+0x228>
 8001366:	2306      	movs	r3, #6
 8001368:	e00a      	b.n	8001380 <HAL_GPIO_Init+0x228>
 800136a:	2305      	movs	r3, #5
 800136c:	e008      	b.n	8001380 <HAL_GPIO_Init+0x228>
 800136e:	2304      	movs	r3, #4
 8001370:	e006      	b.n	8001380 <HAL_GPIO_Init+0x228>
 8001372:	2303      	movs	r3, #3
 8001374:	e004      	b.n	8001380 <HAL_GPIO_Init+0x228>
 8001376:	2302      	movs	r3, #2
 8001378:	e002      	b.n	8001380 <HAL_GPIO_Init+0x228>
 800137a:	2301      	movs	r3, #1
 800137c:	e000      	b.n	8001380 <HAL_GPIO_Init+0x228>
 800137e:	2300      	movs	r3, #0
 8001380:	69fa      	ldr	r2, [r7, #28]
 8001382:	f002 0203 	and.w	r2, r2, #3
 8001386:	0092      	lsls	r2, r2, #2
 8001388:	4093      	lsls	r3, r2
 800138a:	69ba      	ldr	r2, [r7, #24]
 800138c:	4313      	orrs	r3, r2
 800138e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001390:	4935      	ldr	r1, [pc, #212]	; (8001468 <HAL_GPIO_Init+0x310>)
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	089b      	lsrs	r3, r3, #2
 8001396:	3302      	adds	r3, #2
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800139e:	4b3b      	ldr	r3, [pc, #236]	; (800148c <HAL_GPIO_Init+0x334>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	43db      	mvns	r3, r3
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	4013      	ands	r3, r2
 80013ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d003      	beq.n	80013c2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80013ba:	69ba      	ldr	r2, [r7, #24]
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	4313      	orrs	r3, r2
 80013c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80013c2:	4a32      	ldr	r2, [pc, #200]	; (800148c <HAL_GPIO_Init+0x334>)
 80013c4:	69bb      	ldr	r3, [r7, #24]
 80013c6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80013c8:	4b30      	ldr	r3, [pc, #192]	; (800148c <HAL_GPIO_Init+0x334>)
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	43db      	mvns	r3, r3
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	4013      	ands	r3, r2
 80013d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d003      	beq.n	80013ec <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013ec:	4a27      	ldr	r2, [pc, #156]	; (800148c <HAL_GPIO_Init+0x334>)
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013f2:	4b26      	ldr	r3, [pc, #152]	; (800148c <HAL_GPIO_Init+0x334>)
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	43db      	mvns	r3, r3
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	4013      	ands	r3, r2
 8001400:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d003      	beq.n	8001416 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	4313      	orrs	r3, r2
 8001414:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001416:	4a1d      	ldr	r2, [pc, #116]	; (800148c <HAL_GPIO_Init+0x334>)
 8001418:	69bb      	ldr	r3, [r7, #24]
 800141a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800141c:	4b1b      	ldr	r3, [pc, #108]	; (800148c <HAL_GPIO_Init+0x334>)
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	43db      	mvns	r3, r3
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	4013      	ands	r3, r2
 800142a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001434:	2b00      	cmp	r3, #0
 8001436:	d003      	beq.n	8001440 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001438:	69ba      	ldr	r2, [r7, #24]
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	4313      	orrs	r3, r2
 800143e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001440:	4a12      	ldr	r2, [pc, #72]	; (800148c <HAL_GPIO_Init+0x334>)
 8001442:	69bb      	ldr	r3, [r7, #24]
 8001444:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	3301      	adds	r3, #1
 800144a:	61fb      	str	r3, [r7, #28]
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	2b0f      	cmp	r3, #15
 8001450:	f67f ae90 	bls.w	8001174 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001454:	bf00      	nop
 8001456:	bf00      	nop
 8001458:	3724      	adds	r7, #36	; 0x24
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	40023800 	.word	0x40023800
 8001468:	40013800 	.word	0x40013800
 800146c:	40020000 	.word	0x40020000
 8001470:	40020400 	.word	0x40020400
 8001474:	40020800 	.word	0x40020800
 8001478:	40020c00 	.word	0x40020c00
 800147c:	40021000 	.word	0x40021000
 8001480:	40021400 	.word	0x40021400
 8001484:	40021800 	.word	0x40021800
 8001488:	40021c00 	.word	0x40021c00
 800148c:	40013c00 	.word	0x40013c00

08001490 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	460b      	mov	r3, r1
 800149a:	807b      	strh	r3, [r7, #2]
 800149c:	4613      	mov	r3, r2
 800149e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014a0:	787b      	ldrb	r3, [r7, #1]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d003      	beq.n	80014ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014a6:	887a      	ldrh	r2, [r7, #2]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014ac:	e003      	b.n	80014b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014ae:	887b      	ldrh	r3, [r7, #2]
 80014b0:	041a      	lsls	r2, r3, #16
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	619a      	str	r2, [r3, #24]
}
 80014b6:	bf00      	nop
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
	...

080014c4 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80014ca:	4b06      	ldr	r3, [pc, #24]	; (80014e4 <HAL_PWR_EnableBkUpAccess+0x20>)
 80014cc:	2201      	movs	r2, #1
 80014ce:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 80014d0:	4b05      	ldr	r3, [pc, #20]	; (80014e8 <HAL_PWR_EnableBkUpAccess+0x24>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 80014d6:	687b      	ldr	r3, [r7, #4]
}
 80014d8:	bf00      	nop
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr
 80014e4:	420e0020 	.word	0x420e0020
 80014e8:	40007000 	.word	0x40007000

080014ec <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 80014f2:	4b06      	ldr	r3, [pc, #24]	; (800150c <HAL_PWR_DisableBkUpAccess+0x20>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 80014f8:	4b05      	ldr	r3, [pc, #20]	; (8001510 <HAL_PWR_DisableBkUpAccess+0x24>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 80014fe:	687b      	ldr	r3, [r7, #4]
}
 8001500:	bf00      	nop
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr
 800150c:	420e0020 	.word	0x420e0020
 8001510:	40007000 	.word	0x40007000

08001514 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b086      	sub	sp, #24
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d101      	bne.n	8001526 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e264      	b.n	80019f0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 0301 	and.w	r3, r3, #1
 800152e:	2b00      	cmp	r3, #0
 8001530:	d075      	beq.n	800161e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001532:	4ba3      	ldr	r3, [pc, #652]	; (80017c0 <HAL_RCC_OscConfig+0x2ac>)
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	f003 030c 	and.w	r3, r3, #12
 800153a:	2b04      	cmp	r3, #4
 800153c:	d00c      	beq.n	8001558 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800153e:	4ba0      	ldr	r3, [pc, #640]	; (80017c0 <HAL_RCC_OscConfig+0x2ac>)
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001546:	2b08      	cmp	r3, #8
 8001548:	d112      	bne.n	8001570 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800154a:	4b9d      	ldr	r3, [pc, #628]	; (80017c0 <HAL_RCC_OscConfig+0x2ac>)
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001552:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001556:	d10b      	bne.n	8001570 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001558:	4b99      	ldr	r3, [pc, #612]	; (80017c0 <HAL_RCC_OscConfig+0x2ac>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001560:	2b00      	cmp	r3, #0
 8001562:	d05b      	beq.n	800161c <HAL_RCC_OscConfig+0x108>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d157      	bne.n	800161c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	e23f      	b.n	80019f0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001578:	d106      	bne.n	8001588 <HAL_RCC_OscConfig+0x74>
 800157a:	4b91      	ldr	r3, [pc, #580]	; (80017c0 <HAL_RCC_OscConfig+0x2ac>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a90      	ldr	r2, [pc, #576]	; (80017c0 <HAL_RCC_OscConfig+0x2ac>)
 8001580:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001584:	6013      	str	r3, [r2, #0]
 8001586:	e01d      	b.n	80015c4 <HAL_RCC_OscConfig+0xb0>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001590:	d10c      	bne.n	80015ac <HAL_RCC_OscConfig+0x98>
 8001592:	4b8b      	ldr	r3, [pc, #556]	; (80017c0 <HAL_RCC_OscConfig+0x2ac>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a8a      	ldr	r2, [pc, #552]	; (80017c0 <HAL_RCC_OscConfig+0x2ac>)
 8001598:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800159c:	6013      	str	r3, [r2, #0]
 800159e:	4b88      	ldr	r3, [pc, #544]	; (80017c0 <HAL_RCC_OscConfig+0x2ac>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a87      	ldr	r2, [pc, #540]	; (80017c0 <HAL_RCC_OscConfig+0x2ac>)
 80015a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015a8:	6013      	str	r3, [r2, #0]
 80015aa:	e00b      	b.n	80015c4 <HAL_RCC_OscConfig+0xb0>
 80015ac:	4b84      	ldr	r3, [pc, #528]	; (80017c0 <HAL_RCC_OscConfig+0x2ac>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a83      	ldr	r2, [pc, #524]	; (80017c0 <HAL_RCC_OscConfig+0x2ac>)
 80015b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015b6:	6013      	str	r3, [r2, #0]
 80015b8:	4b81      	ldr	r3, [pc, #516]	; (80017c0 <HAL_RCC_OscConfig+0x2ac>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a80      	ldr	r2, [pc, #512]	; (80017c0 <HAL_RCC_OscConfig+0x2ac>)
 80015be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d013      	beq.n	80015f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015cc:	f7ff fcae 	bl	8000f2c <HAL_GetTick>
 80015d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015d2:	e008      	b.n	80015e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015d4:	f7ff fcaa 	bl	8000f2c <HAL_GetTick>
 80015d8:	4602      	mov	r2, r0
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	2b64      	cmp	r3, #100	; 0x64
 80015e0:	d901      	bls.n	80015e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80015e2:	2303      	movs	r3, #3
 80015e4:	e204      	b.n	80019f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015e6:	4b76      	ldr	r3, [pc, #472]	; (80017c0 <HAL_RCC_OscConfig+0x2ac>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d0f0      	beq.n	80015d4 <HAL_RCC_OscConfig+0xc0>
 80015f2:	e014      	b.n	800161e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f4:	f7ff fc9a 	bl	8000f2c <HAL_GetTick>
 80015f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015fa:	e008      	b.n	800160e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015fc:	f7ff fc96 	bl	8000f2c <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	2b64      	cmp	r3, #100	; 0x64
 8001608:	d901      	bls.n	800160e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e1f0      	b.n	80019f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800160e:	4b6c      	ldr	r3, [pc, #432]	; (80017c0 <HAL_RCC_OscConfig+0x2ac>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d1f0      	bne.n	80015fc <HAL_RCC_OscConfig+0xe8>
 800161a:	e000      	b.n	800161e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800161c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 0302 	and.w	r3, r3, #2
 8001626:	2b00      	cmp	r3, #0
 8001628:	d063      	beq.n	80016f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800162a:	4b65      	ldr	r3, [pc, #404]	; (80017c0 <HAL_RCC_OscConfig+0x2ac>)
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	f003 030c 	and.w	r3, r3, #12
 8001632:	2b00      	cmp	r3, #0
 8001634:	d00b      	beq.n	800164e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001636:	4b62      	ldr	r3, [pc, #392]	; (80017c0 <HAL_RCC_OscConfig+0x2ac>)
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800163e:	2b08      	cmp	r3, #8
 8001640:	d11c      	bne.n	800167c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001642:	4b5f      	ldr	r3, [pc, #380]	; (80017c0 <HAL_RCC_OscConfig+0x2ac>)
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d116      	bne.n	800167c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800164e:	4b5c      	ldr	r3, [pc, #368]	; (80017c0 <HAL_RCC_OscConfig+0x2ac>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 0302 	and.w	r3, r3, #2
 8001656:	2b00      	cmp	r3, #0
 8001658:	d005      	beq.n	8001666 <HAL_RCC_OscConfig+0x152>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	68db      	ldr	r3, [r3, #12]
 800165e:	2b01      	cmp	r3, #1
 8001660:	d001      	beq.n	8001666 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e1c4      	b.n	80019f0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001666:	4b56      	ldr	r3, [pc, #344]	; (80017c0 <HAL_RCC_OscConfig+0x2ac>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	691b      	ldr	r3, [r3, #16]
 8001672:	00db      	lsls	r3, r3, #3
 8001674:	4952      	ldr	r1, [pc, #328]	; (80017c0 <HAL_RCC_OscConfig+0x2ac>)
 8001676:	4313      	orrs	r3, r2
 8001678:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800167a:	e03a      	b.n	80016f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d020      	beq.n	80016c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001684:	4b4f      	ldr	r3, [pc, #316]	; (80017c4 <HAL_RCC_OscConfig+0x2b0>)
 8001686:	2201      	movs	r2, #1
 8001688:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800168a:	f7ff fc4f 	bl	8000f2c <HAL_GetTick>
 800168e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001690:	e008      	b.n	80016a4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001692:	f7ff fc4b 	bl	8000f2c <HAL_GetTick>
 8001696:	4602      	mov	r2, r0
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	2b02      	cmp	r3, #2
 800169e:	d901      	bls.n	80016a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80016a0:	2303      	movs	r3, #3
 80016a2:	e1a5      	b.n	80019f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016a4:	4b46      	ldr	r3, [pc, #280]	; (80017c0 <HAL_RCC_OscConfig+0x2ac>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 0302 	and.w	r3, r3, #2
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d0f0      	beq.n	8001692 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016b0:	4b43      	ldr	r3, [pc, #268]	; (80017c0 <HAL_RCC_OscConfig+0x2ac>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	691b      	ldr	r3, [r3, #16]
 80016bc:	00db      	lsls	r3, r3, #3
 80016be:	4940      	ldr	r1, [pc, #256]	; (80017c0 <HAL_RCC_OscConfig+0x2ac>)
 80016c0:	4313      	orrs	r3, r2
 80016c2:	600b      	str	r3, [r1, #0]
 80016c4:	e015      	b.n	80016f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016c6:	4b3f      	ldr	r3, [pc, #252]	; (80017c4 <HAL_RCC_OscConfig+0x2b0>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016cc:	f7ff fc2e 	bl	8000f2c <HAL_GetTick>
 80016d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016d2:	e008      	b.n	80016e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016d4:	f7ff fc2a 	bl	8000f2c <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e184      	b.n	80019f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016e6:	4b36      	ldr	r3, [pc, #216]	; (80017c0 <HAL_RCC_OscConfig+0x2ac>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d1f0      	bne.n	80016d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 0308 	and.w	r3, r3, #8
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d030      	beq.n	8001760 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	695b      	ldr	r3, [r3, #20]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d016      	beq.n	8001734 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001706:	4b30      	ldr	r3, [pc, #192]	; (80017c8 <HAL_RCC_OscConfig+0x2b4>)
 8001708:	2201      	movs	r2, #1
 800170a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800170c:	f7ff fc0e 	bl	8000f2c <HAL_GetTick>
 8001710:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001712:	e008      	b.n	8001726 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001714:	f7ff fc0a 	bl	8000f2c <HAL_GetTick>
 8001718:	4602      	mov	r2, r0
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	2b02      	cmp	r3, #2
 8001720:	d901      	bls.n	8001726 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	e164      	b.n	80019f0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001726:	4b26      	ldr	r3, [pc, #152]	; (80017c0 <HAL_RCC_OscConfig+0x2ac>)
 8001728:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	2b00      	cmp	r3, #0
 8001730:	d0f0      	beq.n	8001714 <HAL_RCC_OscConfig+0x200>
 8001732:	e015      	b.n	8001760 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001734:	4b24      	ldr	r3, [pc, #144]	; (80017c8 <HAL_RCC_OscConfig+0x2b4>)
 8001736:	2200      	movs	r2, #0
 8001738:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800173a:	f7ff fbf7 	bl	8000f2c <HAL_GetTick>
 800173e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001740:	e008      	b.n	8001754 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001742:	f7ff fbf3 	bl	8000f2c <HAL_GetTick>
 8001746:	4602      	mov	r2, r0
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	2b02      	cmp	r3, #2
 800174e:	d901      	bls.n	8001754 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001750:	2303      	movs	r3, #3
 8001752:	e14d      	b.n	80019f0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001754:	4b1a      	ldr	r3, [pc, #104]	; (80017c0 <HAL_RCC_OscConfig+0x2ac>)
 8001756:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001758:	f003 0302 	and.w	r3, r3, #2
 800175c:	2b00      	cmp	r3, #0
 800175e:	d1f0      	bne.n	8001742 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 0304 	and.w	r3, r3, #4
 8001768:	2b00      	cmp	r3, #0
 800176a:	f000 80a0 	beq.w	80018ae <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800176e:	2300      	movs	r3, #0
 8001770:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001772:	4b13      	ldr	r3, [pc, #76]	; (80017c0 <HAL_RCC_OscConfig+0x2ac>)
 8001774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d10f      	bne.n	800179e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800177e:	2300      	movs	r3, #0
 8001780:	60bb      	str	r3, [r7, #8]
 8001782:	4b0f      	ldr	r3, [pc, #60]	; (80017c0 <HAL_RCC_OscConfig+0x2ac>)
 8001784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001786:	4a0e      	ldr	r2, [pc, #56]	; (80017c0 <HAL_RCC_OscConfig+0x2ac>)
 8001788:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800178c:	6413      	str	r3, [r2, #64]	; 0x40
 800178e:	4b0c      	ldr	r3, [pc, #48]	; (80017c0 <HAL_RCC_OscConfig+0x2ac>)
 8001790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001792:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001796:	60bb      	str	r3, [r7, #8]
 8001798:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800179a:	2301      	movs	r3, #1
 800179c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800179e:	4b0b      	ldr	r3, [pc, #44]	; (80017cc <HAL_RCC_OscConfig+0x2b8>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d121      	bne.n	80017ee <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017aa:	4b08      	ldr	r3, [pc, #32]	; (80017cc <HAL_RCC_OscConfig+0x2b8>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a07      	ldr	r2, [pc, #28]	; (80017cc <HAL_RCC_OscConfig+0x2b8>)
 80017b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017b6:	f7ff fbb9 	bl	8000f2c <HAL_GetTick>
 80017ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017bc:	e011      	b.n	80017e2 <HAL_RCC_OscConfig+0x2ce>
 80017be:	bf00      	nop
 80017c0:	40023800 	.word	0x40023800
 80017c4:	42470000 	.word	0x42470000
 80017c8:	42470e80 	.word	0x42470e80
 80017cc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017d0:	f7ff fbac 	bl	8000f2c <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	2b02      	cmp	r3, #2
 80017dc:	d901      	bls.n	80017e2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80017de:	2303      	movs	r3, #3
 80017e0:	e106      	b.n	80019f0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017e2:	4b85      	ldr	r3, [pc, #532]	; (80019f8 <HAL_RCC_OscConfig+0x4e4>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d0f0      	beq.n	80017d0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d106      	bne.n	8001804 <HAL_RCC_OscConfig+0x2f0>
 80017f6:	4b81      	ldr	r3, [pc, #516]	; (80019fc <HAL_RCC_OscConfig+0x4e8>)
 80017f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017fa:	4a80      	ldr	r2, [pc, #512]	; (80019fc <HAL_RCC_OscConfig+0x4e8>)
 80017fc:	f043 0301 	orr.w	r3, r3, #1
 8001800:	6713      	str	r3, [r2, #112]	; 0x70
 8001802:	e01c      	b.n	800183e <HAL_RCC_OscConfig+0x32a>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	2b05      	cmp	r3, #5
 800180a:	d10c      	bne.n	8001826 <HAL_RCC_OscConfig+0x312>
 800180c:	4b7b      	ldr	r3, [pc, #492]	; (80019fc <HAL_RCC_OscConfig+0x4e8>)
 800180e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001810:	4a7a      	ldr	r2, [pc, #488]	; (80019fc <HAL_RCC_OscConfig+0x4e8>)
 8001812:	f043 0304 	orr.w	r3, r3, #4
 8001816:	6713      	str	r3, [r2, #112]	; 0x70
 8001818:	4b78      	ldr	r3, [pc, #480]	; (80019fc <HAL_RCC_OscConfig+0x4e8>)
 800181a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800181c:	4a77      	ldr	r2, [pc, #476]	; (80019fc <HAL_RCC_OscConfig+0x4e8>)
 800181e:	f043 0301 	orr.w	r3, r3, #1
 8001822:	6713      	str	r3, [r2, #112]	; 0x70
 8001824:	e00b      	b.n	800183e <HAL_RCC_OscConfig+0x32a>
 8001826:	4b75      	ldr	r3, [pc, #468]	; (80019fc <HAL_RCC_OscConfig+0x4e8>)
 8001828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800182a:	4a74      	ldr	r2, [pc, #464]	; (80019fc <HAL_RCC_OscConfig+0x4e8>)
 800182c:	f023 0301 	bic.w	r3, r3, #1
 8001830:	6713      	str	r3, [r2, #112]	; 0x70
 8001832:	4b72      	ldr	r3, [pc, #456]	; (80019fc <HAL_RCC_OscConfig+0x4e8>)
 8001834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001836:	4a71      	ldr	r2, [pc, #452]	; (80019fc <HAL_RCC_OscConfig+0x4e8>)
 8001838:	f023 0304 	bic.w	r3, r3, #4
 800183c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d015      	beq.n	8001872 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001846:	f7ff fb71 	bl	8000f2c <HAL_GetTick>
 800184a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800184c:	e00a      	b.n	8001864 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800184e:	f7ff fb6d 	bl	8000f2c <HAL_GetTick>
 8001852:	4602      	mov	r2, r0
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	f241 3288 	movw	r2, #5000	; 0x1388
 800185c:	4293      	cmp	r3, r2
 800185e:	d901      	bls.n	8001864 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001860:	2303      	movs	r3, #3
 8001862:	e0c5      	b.n	80019f0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001864:	4b65      	ldr	r3, [pc, #404]	; (80019fc <HAL_RCC_OscConfig+0x4e8>)
 8001866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001868:	f003 0302 	and.w	r3, r3, #2
 800186c:	2b00      	cmp	r3, #0
 800186e:	d0ee      	beq.n	800184e <HAL_RCC_OscConfig+0x33a>
 8001870:	e014      	b.n	800189c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001872:	f7ff fb5b 	bl	8000f2c <HAL_GetTick>
 8001876:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001878:	e00a      	b.n	8001890 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800187a:	f7ff fb57 	bl	8000f2c <HAL_GetTick>
 800187e:	4602      	mov	r2, r0
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	f241 3288 	movw	r2, #5000	; 0x1388
 8001888:	4293      	cmp	r3, r2
 800188a:	d901      	bls.n	8001890 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800188c:	2303      	movs	r3, #3
 800188e:	e0af      	b.n	80019f0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001890:	4b5a      	ldr	r3, [pc, #360]	; (80019fc <HAL_RCC_OscConfig+0x4e8>)
 8001892:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001894:	f003 0302 	and.w	r3, r3, #2
 8001898:	2b00      	cmp	r3, #0
 800189a:	d1ee      	bne.n	800187a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800189c:	7dfb      	ldrb	r3, [r7, #23]
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d105      	bne.n	80018ae <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018a2:	4b56      	ldr	r3, [pc, #344]	; (80019fc <HAL_RCC_OscConfig+0x4e8>)
 80018a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a6:	4a55      	ldr	r2, [pc, #340]	; (80019fc <HAL_RCC_OscConfig+0x4e8>)
 80018a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018ac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	699b      	ldr	r3, [r3, #24]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	f000 809b 	beq.w	80019ee <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80018b8:	4b50      	ldr	r3, [pc, #320]	; (80019fc <HAL_RCC_OscConfig+0x4e8>)
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	f003 030c 	and.w	r3, r3, #12
 80018c0:	2b08      	cmp	r3, #8
 80018c2:	d05c      	beq.n	800197e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	699b      	ldr	r3, [r3, #24]
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d141      	bne.n	8001950 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018cc:	4b4c      	ldr	r3, [pc, #304]	; (8001a00 <HAL_RCC_OscConfig+0x4ec>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d2:	f7ff fb2b 	bl	8000f2c <HAL_GetTick>
 80018d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018d8:	e008      	b.n	80018ec <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018da:	f7ff fb27 	bl	8000f2c <HAL_GetTick>
 80018de:	4602      	mov	r2, r0
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	1ad3      	subs	r3, r2, r3
 80018e4:	2b02      	cmp	r3, #2
 80018e6:	d901      	bls.n	80018ec <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80018e8:	2303      	movs	r3, #3
 80018ea:	e081      	b.n	80019f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018ec:	4b43      	ldr	r3, [pc, #268]	; (80019fc <HAL_RCC_OscConfig+0x4e8>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d1f0      	bne.n	80018da <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	69da      	ldr	r2, [r3, #28]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6a1b      	ldr	r3, [r3, #32]
 8001900:	431a      	orrs	r2, r3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001906:	019b      	lsls	r3, r3, #6
 8001908:	431a      	orrs	r2, r3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800190e:	085b      	lsrs	r3, r3, #1
 8001910:	3b01      	subs	r3, #1
 8001912:	041b      	lsls	r3, r3, #16
 8001914:	431a      	orrs	r2, r3
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800191a:	061b      	lsls	r3, r3, #24
 800191c:	4937      	ldr	r1, [pc, #220]	; (80019fc <HAL_RCC_OscConfig+0x4e8>)
 800191e:	4313      	orrs	r3, r2
 8001920:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001922:	4b37      	ldr	r3, [pc, #220]	; (8001a00 <HAL_RCC_OscConfig+0x4ec>)
 8001924:	2201      	movs	r2, #1
 8001926:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001928:	f7ff fb00 	bl	8000f2c <HAL_GetTick>
 800192c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800192e:	e008      	b.n	8001942 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001930:	f7ff fafc 	bl	8000f2c <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	2b02      	cmp	r3, #2
 800193c:	d901      	bls.n	8001942 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e056      	b.n	80019f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001942:	4b2e      	ldr	r3, [pc, #184]	; (80019fc <HAL_RCC_OscConfig+0x4e8>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d0f0      	beq.n	8001930 <HAL_RCC_OscConfig+0x41c>
 800194e:	e04e      	b.n	80019ee <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001950:	4b2b      	ldr	r3, [pc, #172]	; (8001a00 <HAL_RCC_OscConfig+0x4ec>)
 8001952:	2200      	movs	r2, #0
 8001954:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001956:	f7ff fae9 	bl	8000f2c <HAL_GetTick>
 800195a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800195c:	e008      	b.n	8001970 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800195e:	f7ff fae5 	bl	8000f2c <HAL_GetTick>
 8001962:	4602      	mov	r2, r0
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	2b02      	cmp	r3, #2
 800196a:	d901      	bls.n	8001970 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800196c:	2303      	movs	r3, #3
 800196e:	e03f      	b.n	80019f0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001970:	4b22      	ldr	r3, [pc, #136]	; (80019fc <HAL_RCC_OscConfig+0x4e8>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001978:	2b00      	cmp	r3, #0
 800197a:	d1f0      	bne.n	800195e <HAL_RCC_OscConfig+0x44a>
 800197c:	e037      	b.n	80019ee <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	699b      	ldr	r3, [r3, #24]
 8001982:	2b01      	cmp	r3, #1
 8001984:	d101      	bne.n	800198a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e032      	b.n	80019f0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800198a:	4b1c      	ldr	r3, [pc, #112]	; (80019fc <HAL_RCC_OscConfig+0x4e8>)
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	699b      	ldr	r3, [r3, #24]
 8001994:	2b01      	cmp	r3, #1
 8001996:	d028      	beq.n	80019ea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d121      	bne.n	80019ea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d11a      	bne.n	80019ea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019b4:	68fa      	ldr	r2, [r7, #12]
 80019b6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80019ba:	4013      	ands	r3, r2
 80019bc:	687a      	ldr	r2, [r7, #4]
 80019be:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80019c0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d111      	bne.n	80019ea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019d0:	085b      	lsrs	r3, r3, #1
 80019d2:	3b01      	subs	r3, #1
 80019d4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d107      	bne.n	80019ea <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d001      	beq.n	80019ee <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e000      	b.n	80019f0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80019ee:	2300      	movs	r3, #0
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3718      	adds	r7, #24
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	40007000 	.word	0x40007000
 80019fc:	40023800 	.word	0x40023800
 8001a00:	42470060 	.word	0x42470060

08001a04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d101      	bne.n	8001a18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e0cc      	b.n	8001bb2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a18:	4b68      	ldr	r3, [pc, #416]	; (8001bbc <HAL_RCC_ClockConfig+0x1b8>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0307 	and.w	r3, r3, #7
 8001a20:	683a      	ldr	r2, [r7, #0]
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d90c      	bls.n	8001a40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a26:	4b65      	ldr	r3, [pc, #404]	; (8001bbc <HAL_RCC_ClockConfig+0x1b8>)
 8001a28:	683a      	ldr	r2, [r7, #0]
 8001a2a:	b2d2      	uxtb	r2, r2
 8001a2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a2e:	4b63      	ldr	r3, [pc, #396]	; (8001bbc <HAL_RCC_ClockConfig+0x1b8>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 0307 	and.w	r3, r3, #7
 8001a36:	683a      	ldr	r2, [r7, #0]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d001      	beq.n	8001a40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e0b8      	b.n	8001bb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0302 	and.w	r3, r3, #2
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d020      	beq.n	8001a8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 0304 	and.w	r3, r3, #4
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d005      	beq.n	8001a64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a58:	4b59      	ldr	r3, [pc, #356]	; (8001bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	4a58      	ldr	r2, [pc, #352]	; (8001bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a62:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 0308 	and.w	r3, r3, #8
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d005      	beq.n	8001a7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a70:	4b53      	ldr	r3, [pc, #332]	; (8001bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	4a52      	ldr	r2, [pc, #328]	; (8001bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a7c:	4b50      	ldr	r3, [pc, #320]	; (8001bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	494d      	ldr	r1, [pc, #308]	; (8001bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 0301 	and.w	r3, r3, #1
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d044      	beq.n	8001b24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d107      	bne.n	8001ab2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aa2:	4b47      	ldr	r3, [pc, #284]	; (8001bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d119      	bne.n	8001ae2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e07f      	b.n	8001bb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	2b02      	cmp	r3, #2
 8001ab8:	d003      	beq.n	8001ac2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001abe:	2b03      	cmp	r3, #3
 8001ac0:	d107      	bne.n	8001ad2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ac2:	4b3f      	ldr	r3, [pc, #252]	; (8001bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d109      	bne.n	8001ae2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e06f      	b.n	8001bb2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ad2:	4b3b      	ldr	r3, [pc, #236]	; (8001bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0302 	and.w	r3, r3, #2
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d101      	bne.n	8001ae2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e067      	b.n	8001bb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ae2:	4b37      	ldr	r3, [pc, #220]	; (8001bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	f023 0203 	bic.w	r2, r3, #3
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	4934      	ldr	r1, [pc, #208]	; (8001bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001af0:	4313      	orrs	r3, r2
 8001af2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001af4:	f7ff fa1a 	bl	8000f2c <HAL_GetTick>
 8001af8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001afa:	e00a      	b.n	8001b12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001afc:	f7ff fa16 	bl	8000f2c <HAL_GetTick>
 8001b00:	4602      	mov	r2, r0
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d901      	bls.n	8001b12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e04f      	b.n	8001bb2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b12:	4b2b      	ldr	r3, [pc, #172]	; (8001bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	f003 020c 	and.w	r2, r3, #12
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d1eb      	bne.n	8001afc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b24:	4b25      	ldr	r3, [pc, #148]	; (8001bbc <HAL_RCC_ClockConfig+0x1b8>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0307 	and.w	r3, r3, #7
 8001b2c:	683a      	ldr	r2, [r7, #0]
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d20c      	bcs.n	8001b4c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b32:	4b22      	ldr	r3, [pc, #136]	; (8001bbc <HAL_RCC_ClockConfig+0x1b8>)
 8001b34:	683a      	ldr	r2, [r7, #0]
 8001b36:	b2d2      	uxtb	r2, r2
 8001b38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b3a:	4b20      	ldr	r3, [pc, #128]	; (8001bbc <HAL_RCC_ClockConfig+0x1b8>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0307 	and.w	r3, r3, #7
 8001b42:	683a      	ldr	r2, [r7, #0]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d001      	beq.n	8001b4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e032      	b.n	8001bb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 0304 	and.w	r3, r3, #4
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d008      	beq.n	8001b6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b58:	4b19      	ldr	r3, [pc, #100]	; (8001bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	4916      	ldr	r1, [pc, #88]	; (8001bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b66:	4313      	orrs	r3, r2
 8001b68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0308 	and.w	r3, r3, #8
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d009      	beq.n	8001b8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b76:	4b12      	ldr	r3, [pc, #72]	; (8001bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	691b      	ldr	r3, [r3, #16]
 8001b82:	00db      	lsls	r3, r3, #3
 8001b84:	490e      	ldr	r1, [pc, #56]	; (8001bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b86:	4313      	orrs	r3, r2
 8001b88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b8a:	f000 f821 	bl	8001bd0 <HAL_RCC_GetSysClockFreq>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	4b0b      	ldr	r3, [pc, #44]	; (8001bc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	091b      	lsrs	r3, r3, #4
 8001b96:	f003 030f 	and.w	r3, r3, #15
 8001b9a:	490a      	ldr	r1, [pc, #40]	; (8001bc4 <HAL_RCC_ClockConfig+0x1c0>)
 8001b9c:	5ccb      	ldrb	r3, [r1, r3]
 8001b9e:	fa22 f303 	lsr.w	r3, r2, r3
 8001ba2:	4a09      	ldr	r2, [pc, #36]	; (8001bc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ba4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001ba6:	4b09      	ldr	r3, [pc, #36]	; (8001bcc <HAL_RCC_ClockConfig+0x1c8>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7ff f97a 	bl	8000ea4 <HAL_InitTick>

  return HAL_OK;
 8001bb0:	2300      	movs	r3, #0
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3710      	adds	r7, #16
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	40023c00 	.word	0x40023c00
 8001bc0:	40023800 	.word	0x40023800
 8001bc4:	08005d24 	.word	0x08005d24
 8001bc8:	20000000 	.word	0x20000000
 8001bcc:	20000004 	.word	0x20000004

08001bd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bd0:	b5b0      	push	{r4, r5, r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001bd6:	2100      	movs	r1, #0
 8001bd8:	6079      	str	r1, [r7, #4]
 8001bda:	2100      	movs	r1, #0
 8001bdc:	60f9      	str	r1, [r7, #12]
 8001bde:	2100      	movs	r1, #0
 8001be0:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001be2:	2100      	movs	r1, #0
 8001be4:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001be6:	4952      	ldr	r1, [pc, #328]	; (8001d30 <HAL_RCC_GetSysClockFreq+0x160>)
 8001be8:	6889      	ldr	r1, [r1, #8]
 8001bea:	f001 010c 	and.w	r1, r1, #12
 8001bee:	2908      	cmp	r1, #8
 8001bf0:	d00d      	beq.n	8001c0e <HAL_RCC_GetSysClockFreq+0x3e>
 8001bf2:	2908      	cmp	r1, #8
 8001bf4:	f200 8094 	bhi.w	8001d20 <HAL_RCC_GetSysClockFreq+0x150>
 8001bf8:	2900      	cmp	r1, #0
 8001bfa:	d002      	beq.n	8001c02 <HAL_RCC_GetSysClockFreq+0x32>
 8001bfc:	2904      	cmp	r1, #4
 8001bfe:	d003      	beq.n	8001c08 <HAL_RCC_GetSysClockFreq+0x38>
 8001c00:	e08e      	b.n	8001d20 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c02:	4b4c      	ldr	r3, [pc, #304]	; (8001d34 <HAL_RCC_GetSysClockFreq+0x164>)
 8001c04:	60bb      	str	r3, [r7, #8]
       break;
 8001c06:	e08e      	b.n	8001d26 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c08:	4b4b      	ldr	r3, [pc, #300]	; (8001d38 <HAL_RCC_GetSysClockFreq+0x168>)
 8001c0a:	60bb      	str	r3, [r7, #8]
      break;
 8001c0c:	e08b      	b.n	8001d26 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c0e:	4948      	ldr	r1, [pc, #288]	; (8001d30 <HAL_RCC_GetSysClockFreq+0x160>)
 8001c10:	6849      	ldr	r1, [r1, #4]
 8001c12:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8001c16:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c18:	4945      	ldr	r1, [pc, #276]	; (8001d30 <HAL_RCC_GetSysClockFreq+0x160>)
 8001c1a:	6849      	ldr	r1, [r1, #4]
 8001c1c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001c20:	2900      	cmp	r1, #0
 8001c22:	d024      	beq.n	8001c6e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c24:	4942      	ldr	r1, [pc, #264]	; (8001d30 <HAL_RCC_GetSysClockFreq+0x160>)
 8001c26:	6849      	ldr	r1, [r1, #4]
 8001c28:	0989      	lsrs	r1, r1, #6
 8001c2a:	4608      	mov	r0, r1
 8001c2c:	f04f 0100 	mov.w	r1, #0
 8001c30:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001c34:	f04f 0500 	mov.w	r5, #0
 8001c38:	ea00 0204 	and.w	r2, r0, r4
 8001c3c:	ea01 0305 	and.w	r3, r1, r5
 8001c40:	493d      	ldr	r1, [pc, #244]	; (8001d38 <HAL_RCC_GetSysClockFreq+0x168>)
 8001c42:	fb01 f003 	mul.w	r0, r1, r3
 8001c46:	2100      	movs	r1, #0
 8001c48:	fb01 f102 	mul.w	r1, r1, r2
 8001c4c:	1844      	adds	r4, r0, r1
 8001c4e:	493a      	ldr	r1, [pc, #232]	; (8001d38 <HAL_RCC_GetSysClockFreq+0x168>)
 8001c50:	fba2 0101 	umull	r0, r1, r2, r1
 8001c54:	1863      	adds	r3, r4, r1
 8001c56:	4619      	mov	r1, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	f04f 0300 	mov.w	r3, #0
 8001c60:	f7fe fab6 	bl	80001d0 <__aeabi_uldivmod>
 8001c64:	4602      	mov	r2, r0
 8001c66:	460b      	mov	r3, r1
 8001c68:	4613      	mov	r3, r2
 8001c6a:	60fb      	str	r3, [r7, #12]
 8001c6c:	e04a      	b.n	8001d04 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c6e:	4b30      	ldr	r3, [pc, #192]	; (8001d30 <HAL_RCC_GetSysClockFreq+0x160>)
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	099b      	lsrs	r3, r3, #6
 8001c74:	461a      	mov	r2, r3
 8001c76:	f04f 0300 	mov.w	r3, #0
 8001c7a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001c7e:	f04f 0100 	mov.w	r1, #0
 8001c82:	ea02 0400 	and.w	r4, r2, r0
 8001c86:	ea03 0501 	and.w	r5, r3, r1
 8001c8a:	4620      	mov	r0, r4
 8001c8c:	4629      	mov	r1, r5
 8001c8e:	f04f 0200 	mov.w	r2, #0
 8001c92:	f04f 0300 	mov.w	r3, #0
 8001c96:	014b      	lsls	r3, r1, #5
 8001c98:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001c9c:	0142      	lsls	r2, r0, #5
 8001c9e:	4610      	mov	r0, r2
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	1b00      	subs	r0, r0, r4
 8001ca4:	eb61 0105 	sbc.w	r1, r1, r5
 8001ca8:	f04f 0200 	mov.w	r2, #0
 8001cac:	f04f 0300 	mov.w	r3, #0
 8001cb0:	018b      	lsls	r3, r1, #6
 8001cb2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001cb6:	0182      	lsls	r2, r0, #6
 8001cb8:	1a12      	subs	r2, r2, r0
 8001cba:	eb63 0301 	sbc.w	r3, r3, r1
 8001cbe:	f04f 0000 	mov.w	r0, #0
 8001cc2:	f04f 0100 	mov.w	r1, #0
 8001cc6:	00d9      	lsls	r1, r3, #3
 8001cc8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001ccc:	00d0      	lsls	r0, r2, #3
 8001cce:	4602      	mov	r2, r0
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	1912      	adds	r2, r2, r4
 8001cd4:	eb45 0303 	adc.w	r3, r5, r3
 8001cd8:	f04f 0000 	mov.w	r0, #0
 8001cdc:	f04f 0100 	mov.w	r1, #0
 8001ce0:	0299      	lsls	r1, r3, #10
 8001ce2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001ce6:	0290      	lsls	r0, r2, #10
 8001ce8:	4602      	mov	r2, r0
 8001cea:	460b      	mov	r3, r1
 8001cec:	4610      	mov	r0, r2
 8001cee:	4619      	mov	r1, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	f04f 0300 	mov.w	r3, #0
 8001cf8:	f7fe fa6a 	bl	80001d0 <__aeabi_uldivmod>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	460b      	mov	r3, r1
 8001d00:	4613      	mov	r3, r2
 8001d02:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d04:	4b0a      	ldr	r3, [pc, #40]	; (8001d30 <HAL_RCC_GetSysClockFreq+0x160>)
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	0c1b      	lsrs	r3, r3, #16
 8001d0a:	f003 0303 	and.w	r3, r3, #3
 8001d0e:	3301      	adds	r3, #1
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001d14:	68fa      	ldr	r2, [r7, #12]
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d1c:	60bb      	str	r3, [r7, #8]
      break;
 8001d1e:	e002      	b.n	8001d26 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d20:	4b04      	ldr	r3, [pc, #16]	; (8001d34 <HAL_RCC_GetSysClockFreq+0x164>)
 8001d22:	60bb      	str	r3, [r7, #8]
      break;
 8001d24:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d26:	68bb      	ldr	r3, [r7, #8]
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3710      	adds	r7, #16
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bdb0      	pop	{r4, r5, r7, pc}
 8001d30:	40023800 	.word	0x40023800
 8001d34:	00f42400 	.word	0x00f42400
 8001d38:	017d7840 	.word	0x017d7840

08001d3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d101      	bne.n	8001d4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e041      	b.n	8001dd2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d106      	bne.n	8001d68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f7fe ffd4 	bl	8000d10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2202      	movs	r2, #2
 8001d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	3304      	adds	r3, #4
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4610      	mov	r0, r2
 8001d7c:	f000 fb7e 	bl	800247c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2201      	movs	r2, #1
 8001d84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2201      	movs	r2, #1
 8001da4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2201      	movs	r2, #1
 8001dac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2201      	movs	r2, #1
 8001db4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001dd0:	2300      	movs	r3, #0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3708      	adds	r7, #8
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b082      	sub	sp, #8
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d101      	bne.n	8001dec <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e041      	b.n	8001e70 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d106      	bne.n	8001e06 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f000 f839 	bl	8001e78 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2202      	movs	r2, #2
 8001e0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	3304      	adds	r3, #4
 8001e16:	4619      	mov	r1, r3
 8001e18:	4610      	mov	r0, r2
 8001e1a:	f000 fb2f 	bl	800247c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2201      	movs	r2, #1
 8001e22:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2201      	movs	r2, #1
 8001e2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2201      	movs	r2, #1
 8001e32:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2201      	movs	r2, #1
 8001e3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2201      	movs	r2, #1
 8001e42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2201      	movs	r2, #1
 8001e4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2201      	movs	r2, #1
 8001e52:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2201      	movs	r2, #1
 8001e5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2201      	movs	r2, #1
 8001e62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2201      	movs	r2, #1
 8001e6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e6e:	2300      	movs	r3, #0
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3708      	adds	r7, #8
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001e80:	bf00      	nop
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr

08001e8c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d109      	bne.n	8001eb0 <HAL_TIM_PWM_Start+0x24>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	bf14      	ite	ne
 8001ea8:	2301      	movne	r3, #1
 8001eaa:	2300      	moveq	r3, #0
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	e022      	b.n	8001ef6 <HAL_TIM_PWM_Start+0x6a>
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	2b04      	cmp	r3, #4
 8001eb4:	d109      	bne.n	8001eca <HAL_TIM_PWM_Start+0x3e>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	bf14      	ite	ne
 8001ec2:	2301      	movne	r3, #1
 8001ec4:	2300      	moveq	r3, #0
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	e015      	b.n	8001ef6 <HAL_TIM_PWM_Start+0x6a>
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	2b08      	cmp	r3, #8
 8001ece:	d109      	bne.n	8001ee4 <HAL_TIM_PWM_Start+0x58>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	bf14      	ite	ne
 8001edc:	2301      	movne	r3, #1
 8001ede:	2300      	moveq	r3, #0
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	e008      	b.n	8001ef6 <HAL_TIM_PWM_Start+0x6a>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	bf14      	ite	ne
 8001ef0:	2301      	movne	r3, #1
 8001ef2:	2300      	moveq	r3, #0
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e07c      	b.n	8001ff8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d104      	bne.n	8001f0e <HAL_TIM_PWM_Start+0x82>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2202      	movs	r2, #2
 8001f08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001f0c:	e013      	b.n	8001f36 <HAL_TIM_PWM_Start+0xaa>
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	2b04      	cmp	r3, #4
 8001f12:	d104      	bne.n	8001f1e <HAL_TIM_PWM_Start+0x92>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2202      	movs	r2, #2
 8001f18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001f1c:	e00b      	b.n	8001f36 <HAL_TIM_PWM_Start+0xaa>
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	2b08      	cmp	r3, #8
 8001f22:	d104      	bne.n	8001f2e <HAL_TIM_PWM_Start+0xa2>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2202      	movs	r2, #2
 8001f28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f2c:	e003      	b.n	8001f36 <HAL_TIM_PWM_Start+0xaa>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2202      	movs	r2, #2
 8001f32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	6839      	ldr	r1, [r7, #0]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f000 fd86 	bl	8002a50 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a2d      	ldr	r2, [pc, #180]	; (8002000 <HAL_TIM_PWM_Start+0x174>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d004      	beq.n	8001f58 <HAL_TIM_PWM_Start+0xcc>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a2c      	ldr	r2, [pc, #176]	; (8002004 <HAL_TIM_PWM_Start+0x178>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d101      	bne.n	8001f5c <HAL_TIM_PWM_Start+0xd0>
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e000      	b.n	8001f5e <HAL_TIM_PWM_Start+0xd2>
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d007      	beq.n	8001f72 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f70:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a22      	ldr	r2, [pc, #136]	; (8002000 <HAL_TIM_PWM_Start+0x174>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d022      	beq.n	8001fc2 <HAL_TIM_PWM_Start+0x136>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f84:	d01d      	beq.n	8001fc2 <HAL_TIM_PWM_Start+0x136>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a1f      	ldr	r2, [pc, #124]	; (8002008 <HAL_TIM_PWM_Start+0x17c>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d018      	beq.n	8001fc2 <HAL_TIM_PWM_Start+0x136>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a1d      	ldr	r2, [pc, #116]	; (800200c <HAL_TIM_PWM_Start+0x180>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d013      	beq.n	8001fc2 <HAL_TIM_PWM_Start+0x136>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a1c      	ldr	r2, [pc, #112]	; (8002010 <HAL_TIM_PWM_Start+0x184>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d00e      	beq.n	8001fc2 <HAL_TIM_PWM_Start+0x136>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a16      	ldr	r2, [pc, #88]	; (8002004 <HAL_TIM_PWM_Start+0x178>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d009      	beq.n	8001fc2 <HAL_TIM_PWM_Start+0x136>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a18      	ldr	r2, [pc, #96]	; (8002014 <HAL_TIM_PWM_Start+0x188>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d004      	beq.n	8001fc2 <HAL_TIM_PWM_Start+0x136>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a16      	ldr	r2, [pc, #88]	; (8002018 <HAL_TIM_PWM_Start+0x18c>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d111      	bne.n	8001fe6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	f003 0307 	and.w	r3, r3, #7
 8001fcc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2b06      	cmp	r3, #6
 8001fd2:	d010      	beq.n	8001ff6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f042 0201 	orr.w	r2, r2, #1
 8001fe2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fe4:	e007      	b.n	8001ff6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f042 0201 	orr.w	r2, r2, #1
 8001ff4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ff6:	2300      	movs	r3, #0
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3710      	adds	r7, #16
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	40010000 	.word	0x40010000
 8002004:	40010400 	.word	0x40010400
 8002008:	40000400 	.word	0x40000400
 800200c:	40000800 	.word	0x40000800
 8002010:	40000c00 	.word	0x40000c00
 8002014:	40014000 	.word	0x40014000
 8002018:	40001800 	.word	0x40001800

0800201c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b086      	sub	sp, #24
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d101      	bne.n	8002030 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e097      	b.n	8002160 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002036:	b2db      	uxtb	r3, r3
 8002038:	2b00      	cmp	r3, #0
 800203a:	d106      	bne.n	800204a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2200      	movs	r2, #0
 8002040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f7fe fdc9 	bl	8000bdc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2202      	movs	r2, #2
 800204e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	6812      	ldr	r2, [r2, #0]
 800205c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002060:	f023 0307 	bic.w	r3, r3, #7
 8002064:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	3304      	adds	r3, #4
 800206e:	4619      	mov	r1, r3
 8002070:	4610      	mov	r0, r2
 8002072:	f000 fa03 	bl	800247c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	699b      	ldr	r3, [r3, #24]
 8002084:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	6a1b      	ldr	r3, [r3, #32]
 800208c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	697a      	ldr	r2, [r7, #20]
 8002094:	4313      	orrs	r3, r2
 8002096:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800209e:	f023 0303 	bic.w	r3, r3, #3
 80020a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	689a      	ldr	r2, [r3, #8]
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	699b      	ldr	r3, [r3, #24]
 80020ac:	021b      	lsls	r3, r3, #8
 80020ae:	4313      	orrs	r3, r2
 80020b0:	693a      	ldr	r2, [r7, #16]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80020bc:	f023 030c 	bic.w	r3, r3, #12
 80020c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80020c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80020cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	68da      	ldr	r2, [r3, #12]
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	69db      	ldr	r3, [r3, #28]
 80020d6:	021b      	lsls	r3, r3, #8
 80020d8:	4313      	orrs	r3, r2
 80020da:	693a      	ldr	r2, [r7, #16]
 80020dc:	4313      	orrs	r3, r2
 80020de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	691b      	ldr	r3, [r3, #16]
 80020e4:	011a      	lsls	r2, r3, #4
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	6a1b      	ldr	r3, [r3, #32]
 80020ea:	031b      	lsls	r3, r3, #12
 80020ec:	4313      	orrs	r3, r2
 80020ee:	693a      	ldr	r2, [r7, #16]
 80020f0:	4313      	orrs	r3, r2
 80020f2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80020fa:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8002102:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685a      	ldr	r2, [r3, #4]
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	695b      	ldr	r3, [r3, #20]
 800210c:	011b      	lsls	r3, r3, #4
 800210e:	4313      	orrs	r3, r2
 8002110:	68fa      	ldr	r2, [r7, #12]
 8002112:	4313      	orrs	r3, r2
 8002114:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	697a      	ldr	r2, [r7, #20]
 800211c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	693a      	ldr	r2, [r7, #16]
 8002124:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	68fa      	ldr	r2, [r7, #12]
 800212c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2201      	movs	r2, #1
 8002132:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2201      	movs	r2, #1
 800213a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2201      	movs	r2, #1
 8002142:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2201      	movs	r2, #1
 800214a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2201      	movs	r2, #1
 8002152:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2201      	movs	r2, #1
 800215a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800215e:	2300      	movs	r3, #0
}
 8002160:	4618      	mov	r0, r3
 8002162:	3718      	adds	r7, #24
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}

08002168 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b086      	sub	sp, #24
 800216c:	af00      	add	r7, sp, #0
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	60b9      	str	r1, [r7, #8]
 8002172:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002174:	2300      	movs	r3, #0
 8002176:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800217e:	2b01      	cmp	r3, #1
 8002180:	d101      	bne.n	8002186 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002182:	2302      	movs	r3, #2
 8002184:	e0ae      	b.n	80022e4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2201      	movs	r2, #1
 800218a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2b0c      	cmp	r3, #12
 8002192:	f200 809f 	bhi.w	80022d4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002196:	a201      	add	r2, pc, #4	; (adr r2, 800219c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800219c:	080021d1 	.word	0x080021d1
 80021a0:	080022d5 	.word	0x080022d5
 80021a4:	080022d5 	.word	0x080022d5
 80021a8:	080022d5 	.word	0x080022d5
 80021ac:	08002211 	.word	0x08002211
 80021b0:	080022d5 	.word	0x080022d5
 80021b4:	080022d5 	.word	0x080022d5
 80021b8:	080022d5 	.word	0x080022d5
 80021bc:	08002253 	.word	0x08002253
 80021c0:	080022d5 	.word	0x080022d5
 80021c4:	080022d5 	.word	0x080022d5
 80021c8:	080022d5 	.word	0x080022d5
 80021cc:	08002293 	.word	0x08002293
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	68b9      	ldr	r1, [r7, #8]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f000 f9f0 	bl	80025bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	699a      	ldr	r2, [r3, #24]
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f042 0208 	orr.w	r2, r2, #8
 80021ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	699a      	ldr	r2, [r3, #24]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f022 0204 	bic.w	r2, r2, #4
 80021fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	6999      	ldr	r1, [r3, #24]
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	691a      	ldr	r2, [r3, #16]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	430a      	orrs	r2, r1
 800220c:	619a      	str	r2, [r3, #24]
      break;
 800220e:	e064      	b.n	80022da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	68b9      	ldr	r1, [r7, #8]
 8002216:	4618      	mov	r0, r3
 8002218:	f000 fa40 	bl	800269c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	699a      	ldr	r2, [r3, #24]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800222a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	699a      	ldr	r2, [r3, #24]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800223a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	6999      	ldr	r1, [r3, #24]
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	691b      	ldr	r3, [r3, #16]
 8002246:	021a      	lsls	r2, r3, #8
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	430a      	orrs	r2, r1
 800224e:	619a      	str	r2, [r3, #24]
      break;
 8002250:	e043      	b.n	80022da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	68b9      	ldr	r1, [r7, #8]
 8002258:	4618      	mov	r0, r3
 800225a:	f000 fa95 	bl	8002788 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	69da      	ldr	r2, [r3, #28]
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f042 0208 	orr.w	r2, r2, #8
 800226c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	69da      	ldr	r2, [r3, #28]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f022 0204 	bic.w	r2, r2, #4
 800227c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	69d9      	ldr	r1, [r3, #28]
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	691a      	ldr	r2, [r3, #16]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	430a      	orrs	r2, r1
 800228e:	61da      	str	r2, [r3, #28]
      break;
 8002290:	e023      	b.n	80022da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	68b9      	ldr	r1, [r7, #8]
 8002298:	4618      	mov	r0, r3
 800229a:	f000 fae9 	bl	8002870 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	69da      	ldr	r2, [r3, #28]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	69da      	ldr	r2, [r3, #28]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	69d9      	ldr	r1, [r3, #28]
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	691b      	ldr	r3, [r3, #16]
 80022c8:	021a      	lsls	r2, r3, #8
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	430a      	orrs	r2, r1
 80022d0:	61da      	str	r2, [r3, #28]
      break;
 80022d2:	e002      	b.n	80022da <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	75fb      	strb	r3, [r7, #23]
      break;
 80022d8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2200      	movs	r2, #0
 80022de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80022e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3718      	adds	r7, #24
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}

080022ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022f6:	2300      	movs	r3, #0
 80022f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002300:	2b01      	cmp	r3, #1
 8002302:	d101      	bne.n	8002308 <HAL_TIM_ConfigClockSource+0x1c>
 8002304:	2302      	movs	r3, #2
 8002306:	e0b4      	b.n	8002472 <HAL_TIM_ConfigClockSource+0x186>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2201      	movs	r2, #1
 800230c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2202      	movs	r2, #2
 8002314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002326:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800232e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	68ba      	ldr	r2, [r7, #8]
 8002336:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002340:	d03e      	beq.n	80023c0 <HAL_TIM_ConfigClockSource+0xd4>
 8002342:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002346:	f200 8087 	bhi.w	8002458 <HAL_TIM_ConfigClockSource+0x16c>
 800234a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800234e:	f000 8086 	beq.w	800245e <HAL_TIM_ConfigClockSource+0x172>
 8002352:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002356:	d87f      	bhi.n	8002458 <HAL_TIM_ConfigClockSource+0x16c>
 8002358:	2b70      	cmp	r3, #112	; 0x70
 800235a:	d01a      	beq.n	8002392 <HAL_TIM_ConfigClockSource+0xa6>
 800235c:	2b70      	cmp	r3, #112	; 0x70
 800235e:	d87b      	bhi.n	8002458 <HAL_TIM_ConfigClockSource+0x16c>
 8002360:	2b60      	cmp	r3, #96	; 0x60
 8002362:	d050      	beq.n	8002406 <HAL_TIM_ConfigClockSource+0x11a>
 8002364:	2b60      	cmp	r3, #96	; 0x60
 8002366:	d877      	bhi.n	8002458 <HAL_TIM_ConfigClockSource+0x16c>
 8002368:	2b50      	cmp	r3, #80	; 0x50
 800236a:	d03c      	beq.n	80023e6 <HAL_TIM_ConfigClockSource+0xfa>
 800236c:	2b50      	cmp	r3, #80	; 0x50
 800236e:	d873      	bhi.n	8002458 <HAL_TIM_ConfigClockSource+0x16c>
 8002370:	2b40      	cmp	r3, #64	; 0x40
 8002372:	d058      	beq.n	8002426 <HAL_TIM_ConfigClockSource+0x13a>
 8002374:	2b40      	cmp	r3, #64	; 0x40
 8002376:	d86f      	bhi.n	8002458 <HAL_TIM_ConfigClockSource+0x16c>
 8002378:	2b30      	cmp	r3, #48	; 0x30
 800237a:	d064      	beq.n	8002446 <HAL_TIM_ConfigClockSource+0x15a>
 800237c:	2b30      	cmp	r3, #48	; 0x30
 800237e:	d86b      	bhi.n	8002458 <HAL_TIM_ConfigClockSource+0x16c>
 8002380:	2b20      	cmp	r3, #32
 8002382:	d060      	beq.n	8002446 <HAL_TIM_ConfigClockSource+0x15a>
 8002384:	2b20      	cmp	r3, #32
 8002386:	d867      	bhi.n	8002458 <HAL_TIM_ConfigClockSource+0x16c>
 8002388:	2b00      	cmp	r3, #0
 800238a:	d05c      	beq.n	8002446 <HAL_TIM_ConfigClockSource+0x15a>
 800238c:	2b10      	cmp	r3, #16
 800238e:	d05a      	beq.n	8002446 <HAL_TIM_ConfigClockSource+0x15a>
 8002390:	e062      	b.n	8002458 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6818      	ldr	r0, [r3, #0]
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	6899      	ldr	r1, [r3, #8]
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	685a      	ldr	r2, [r3, #4]
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	f000 fb35 	bl	8002a10 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80023b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	68ba      	ldr	r2, [r7, #8]
 80023bc:	609a      	str	r2, [r3, #8]
      break;
 80023be:	e04f      	b.n	8002460 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6818      	ldr	r0, [r3, #0]
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	6899      	ldr	r1, [r3, #8]
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685a      	ldr	r2, [r3, #4]
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	f000 fb1e 	bl	8002a10 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	689a      	ldr	r2, [r3, #8]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80023e2:	609a      	str	r2, [r3, #8]
      break;
 80023e4:	e03c      	b.n	8002460 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6818      	ldr	r0, [r3, #0]
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	6859      	ldr	r1, [r3, #4]
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	461a      	mov	r2, r3
 80023f4:	f000 fa92 	bl	800291c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2150      	movs	r1, #80	; 0x50
 80023fe:	4618      	mov	r0, r3
 8002400:	f000 faeb 	bl	80029da <TIM_ITRx_SetConfig>
      break;
 8002404:	e02c      	b.n	8002460 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6818      	ldr	r0, [r3, #0]
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	6859      	ldr	r1, [r3, #4]
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	461a      	mov	r2, r3
 8002414:	f000 fab1 	bl	800297a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2160      	movs	r1, #96	; 0x60
 800241e:	4618      	mov	r0, r3
 8002420:	f000 fadb 	bl	80029da <TIM_ITRx_SetConfig>
      break;
 8002424:	e01c      	b.n	8002460 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6818      	ldr	r0, [r3, #0]
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	6859      	ldr	r1, [r3, #4]
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	461a      	mov	r2, r3
 8002434:	f000 fa72 	bl	800291c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2140      	movs	r1, #64	; 0x40
 800243e:	4618      	mov	r0, r3
 8002440:	f000 facb 	bl	80029da <TIM_ITRx_SetConfig>
      break;
 8002444:	e00c      	b.n	8002460 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4619      	mov	r1, r3
 8002450:	4610      	mov	r0, r2
 8002452:	f000 fac2 	bl	80029da <TIM_ITRx_SetConfig>
      break;
 8002456:	e003      	b.n	8002460 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	73fb      	strb	r3, [r7, #15]
      break;
 800245c:	e000      	b.n	8002460 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800245e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2201      	movs	r2, #1
 8002464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2200      	movs	r2, #0
 800246c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002470:	7bfb      	ldrb	r3, [r7, #15]
}
 8002472:	4618      	mov	r0, r3
 8002474:	3710      	adds	r7, #16
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
	...

0800247c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800247c:	b480      	push	{r7}
 800247e:	b085      	sub	sp, #20
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	4a40      	ldr	r2, [pc, #256]	; (8002590 <TIM_Base_SetConfig+0x114>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d013      	beq.n	80024bc <TIM_Base_SetConfig+0x40>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800249a:	d00f      	beq.n	80024bc <TIM_Base_SetConfig+0x40>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	4a3d      	ldr	r2, [pc, #244]	; (8002594 <TIM_Base_SetConfig+0x118>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d00b      	beq.n	80024bc <TIM_Base_SetConfig+0x40>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	4a3c      	ldr	r2, [pc, #240]	; (8002598 <TIM_Base_SetConfig+0x11c>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d007      	beq.n	80024bc <TIM_Base_SetConfig+0x40>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	4a3b      	ldr	r2, [pc, #236]	; (800259c <TIM_Base_SetConfig+0x120>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d003      	beq.n	80024bc <TIM_Base_SetConfig+0x40>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	4a3a      	ldr	r2, [pc, #232]	; (80025a0 <TIM_Base_SetConfig+0x124>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d108      	bne.n	80024ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	68fa      	ldr	r2, [r7, #12]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4a2f      	ldr	r2, [pc, #188]	; (8002590 <TIM_Base_SetConfig+0x114>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d02b      	beq.n	800252e <TIM_Base_SetConfig+0xb2>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024dc:	d027      	beq.n	800252e <TIM_Base_SetConfig+0xb2>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a2c      	ldr	r2, [pc, #176]	; (8002594 <TIM_Base_SetConfig+0x118>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d023      	beq.n	800252e <TIM_Base_SetConfig+0xb2>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a2b      	ldr	r2, [pc, #172]	; (8002598 <TIM_Base_SetConfig+0x11c>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d01f      	beq.n	800252e <TIM_Base_SetConfig+0xb2>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4a2a      	ldr	r2, [pc, #168]	; (800259c <TIM_Base_SetConfig+0x120>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d01b      	beq.n	800252e <TIM_Base_SetConfig+0xb2>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4a29      	ldr	r2, [pc, #164]	; (80025a0 <TIM_Base_SetConfig+0x124>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d017      	beq.n	800252e <TIM_Base_SetConfig+0xb2>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4a28      	ldr	r2, [pc, #160]	; (80025a4 <TIM_Base_SetConfig+0x128>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d013      	beq.n	800252e <TIM_Base_SetConfig+0xb2>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4a27      	ldr	r2, [pc, #156]	; (80025a8 <TIM_Base_SetConfig+0x12c>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d00f      	beq.n	800252e <TIM_Base_SetConfig+0xb2>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4a26      	ldr	r2, [pc, #152]	; (80025ac <TIM_Base_SetConfig+0x130>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d00b      	beq.n	800252e <TIM_Base_SetConfig+0xb2>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a25      	ldr	r2, [pc, #148]	; (80025b0 <TIM_Base_SetConfig+0x134>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d007      	beq.n	800252e <TIM_Base_SetConfig+0xb2>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a24      	ldr	r2, [pc, #144]	; (80025b4 <TIM_Base_SetConfig+0x138>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d003      	beq.n	800252e <TIM_Base_SetConfig+0xb2>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a23      	ldr	r2, [pc, #140]	; (80025b8 <TIM_Base_SetConfig+0x13c>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d108      	bne.n	8002540 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002534:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	68fa      	ldr	r2, [r7, #12]
 800253c:	4313      	orrs	r3, r2
 800253e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	695b      	ldr	r3, [r3, #20]
 800254a:	4313      	orrs	r3, r2
 800254c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	68fa      	ldr	r2, [r7, #12]
 8002552:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	689a      	ldr	r2, [r3, #8]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	4a0a      	ldr	r2, [pc, #40]	; (8002590 <TIM_Base_SetConfig+0x114>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d003      	beq.n	8002574 <TIM_Base_SetConfig+0xf8>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	4a0c      	ldr	r2, [pc, #48]	; (80025a0 <TIM_Base_SetConfig+0x124>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d103      	bne.n	800257c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	691a      	ldr	r2, [r3, #16]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	615a      	str	r2, [r3, #20]
}
 8002582:	bf00      	nop
 8002584:	3714      	adds	r7, #20
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop
 8002590:	40010000 	.word	0x40010000
 8002594:	40000400 	.word	0x40000400
 8002598:	40000800 	.word	0x40000800
 800259c:	40000c00 	.word	0x40000c00
 80025a0:	40010400 	.word	0x40010400
 80025a4:	40014000 	.word	0x40014000
 80025a8:	40014400 	.word	0x40014400
 80025ac:	40014800 	.word	0x40014800
 80025b0:	40001800 	.word	0x40001800
 80025b4:	40001c00 	.word	0x40001c00
 80025b8:	40002000 	.word	0x40002000

080025bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80025bc:	b480      	push	{r7}
 80025be:	b087      	sub	sp, #28
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a1b      	ldr	r3, [r3, #32]
 80025ca:	f023 0201 	bic.w	r2, r3, #1
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a1b      	ldr	r3, [r3, #32]
 80025d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	699b      	ldr	r3, [r3, #24]
 80025e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	f023 0303 	bic.w	r3, r3, #3
 80025f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	68fa      	ldr	r2, [r7, #12]
 80025fa:	4313      	orrs	r3, r2
 80025fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	f023 0302 	bic.w	r3, r3, #2
 8002604:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	697a      	ldr	r2, [r7, #20]
 800260c:	4313      	orrs	r3, r2
 800260e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	4a20      	ldr	r2, [pc, #128]	; (8002694 <TIM_OC1_SetConfig+0xd8>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d003      	beq.n	8002620 <TIM_OC1_SetConfig+0x64>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	4a1f      	ldr	r2, [pc, #124]	; (8002698 <TIM_OC1_SetConfig+0xdc>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d10c      	bne.n	800263a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	f023 0308 	bic.w	r3, r3, #8
 8002626:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	697a      	ldr	r2, [r7, #20]
 800262e:	4313      	orrs	r3, r2
 8002630:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	f023 0304 	bic.w	r3, r3, #4
 8002638:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a15      	ldr	r2, [pc, #84]	; (8002694 <TIM_OC1_SetConfig+0xd8>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d003      	beq.n	800264a <TIM_OC1_SetConfig+0x8e>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a14      	ldr	r2, [pc, #80]	; (8002698 <TIM_OC1_SetConfig+0xdc>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d111      	bne.n	800266e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002650:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002658:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	695b      	ldr	r3, [r3, #20]
 800265e:	693a      	ldr	r2, [r7, #16]
 8002660:	4313      	orrs	r3, r2
 8002662:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	699b      	ldr	r3, [r3, #24]
 8002668:	693a      	ldr	r2, [r7, #16]
 800266a:	4313      	orrs	r3, r2
 800266c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	693a      	ldr	r2, [r7, #16]
 8002672:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	68fa      	ldr	r2, [r7, #12]
 8002678:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	685a      	ldr	r2, [r3, #4]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	697a      	ldr	r2, [r7, #20]
 8002686:	621a      	str	r2, [r3, #32]
}
 8002688:	bf00      	nop
 800268a:	371c      	adds	r7, #28
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr
 8002694:	40010000 	.word	0x40010000
 8002698:	40010400 	.word	0x40010400

0800269c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800269c:	b480      	push	{r7}
 800269e:	b087      	sub	sp, #28
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a1b      	ldr	r3, [r3, #32]
 80026aa:	f023 0210 	bic.w	r2, r3, #16
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6a1b      	ldr	r3, [r3, #32]
 80026b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	699b      	ldr	r3, [r3, #24]
 80026c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	021b      	lsls	r3, r3, #8
 80026da:	68fa      	ldr	r2, [r7, #12]
 80026dc:	4313      	orrs	r3, r2
 80026de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	f023 0320 	bic.w	r3, r3, #32
 80026e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	011b      	lsls	r3, r3, #4
 80026ee:	697a      	ldr	r2, [r7, #20]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	4a22      	ldr	r2, [pc, #136]	; (8002780 <TIM_OC2_SetConfig+0xe4>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d003      	beq.n	8002704 <TIM_OC2_SetConfig+0x68>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	4a21      	ldr	r2, [pc, #132]	; (8002784 <TIM_OC2_SetConfig+0xe8>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d10d      	bne.n	8002720 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800270a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	011b      	lsls	r3, r3, #4
 8002712:	697a      	ldr	r2, [r7, #20]
 8002714:	4313      	orrs	r3, r2
 8002716:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800271e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	4a17      	ldr	r2, [pc, #92]	; (8002780 <TIM_OC2_SetConfig+0xe4>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d003      	beq.n	8002730 <TIM_OC2_SetConfig+0x94>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	4a16      	ldr	r2, [pc, #88]	; (8002784 <TIM_OC2_SetConfig+0xe8>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d113      	bne.n	8002758 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002736:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800273e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	695b      	ldr	r3, [r3, #20]
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	693a      	ldr	r2, [r7, #16]
 8002748:	4313      	orrs	r3, r2
 800274a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	699b      	ldr	r3, [r3, #24]
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	693a      	ldr	r2, [r7, #16]
 8002754:	4313      	orrs	r3, r2
 8002756:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	693a      	ldr	r2, [r7, #16]
 800275c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	68fa      	ldr	r2, [r7, #12]
 8002762:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	685a      	ldr	r2, [r3, #4]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	697a      	ldr	r2, [r7, #20]
 8002770:	621a      	str	r2, [r3, #32]
}
 8002772:	bf00      	nop
 8002774:	371c      	adds	r7, #28
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop
 8002780:	40010000 	.word	0x40010000
 8002784:	40010400 	.word	0x40010400

08002788 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002788:	b480      	push	{r7}
 800278a:	b087      	sub	sp, #28
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6a1b      	ldr	r3, [r3, #32]
 8002796:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6a1b      	ldr	r3, [r3, #32]
 80027a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	69db      	ldr	r3, [r3, #28]
 80027ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f023 0303 	bic.w	r3, r3, #3
 80027be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	68fa      	ldr	r2, [r7, #12]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80027d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	021b      	lsls	r3, r3, #8
 80027d8:	697a      	ldr	r2, [r7, #20]
 80027da:	4313      	orrs	r3, r2
 80027dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a21      	ldr	r2, [pc, #132]	; (8002868 <TIM_OC3_SetConfig+0xe0>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d003      	beq.n	80027ee <TIM_OC3_SetConfig+0x66>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a20      	ldr	r2, [pc, #128]	; (800286c <TIM_OC3_SetConfig+0xe4>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d10d      	bne.n	800280a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80027f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	021b      	lsls	r3, r3, #8
 80027fc:	697a      	ldr	r2, [r7, #20]
 80027fe:	4313      	orrs	r3, r2
 8002800:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002808:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a16      	ldr	r2, [pc, #88]	; (8002868 <TIM_OC3_SetConfig+0xe0>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d003      	beq.n	800281a <TIM_OC3_SetConfig+0x92>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4a15      	ldr	r2, [pc, #84]	; (800286c <TIM_OC3_SetConfig+0xe4>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d113      	bne.n	8002842 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002820:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002828:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	695b      	ldr	r3, [r3, #20]
 800282e:	011b      	lsls	r3, r3, #4
 8002830:	693a      	ldr	r2, [r7, #16]
 8002832:	4313      	orrs	r3, r2
 8002834:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	699b      	ldr	r3, [r3, #24]
 800283a:	011b      	lsls	r3, r3, #4
 800283c:	693a      	ldr	r2, [r7, #16]
 800283e:	4313      	orrs	r3, r2
 8002840:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	693a      	ldr	r2, [r7, #16]
 8002846:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	68fa      	ldr	r2, [r7, #12]
 800284c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	685a      	ldr	r2, [r3, #4]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	697a      	ldr	r2, [r7, #20]
 800285a:	621a      	str	r2, [r3, #32]
}
 800285c:	bf00      	nop
 800285e:	371c      	adds	r7, #28
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr
 8002868:	40010000 	.word	0x40010000
 800286c:	40010400 	.word	0x40010400

08002870 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002870:	b480      	push	{r7}
 8002872:	b087      	sub	sp, #28
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6a1b      	ldr	r3, [r3, #32]
 800287e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a1b      	ldr	r3, [r3, #32]
 800288a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	69db      	ldr	r3, [r3, #28]
 8002896:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800289e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	021b      	lsls	r3, r3, #8
 80028ae:	68fa      	ldr	r2, [r7, #12]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80028ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	031b      	lsls	r3, r3, #12
 80028c2:	693a      	ldr	r2, [r7, #16]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	4a12      	ldr	r2, [pc, #72]	; (8002914 <TIM_OC4_SetConfig+0xa4>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d003      	beq.n	80028d8 <TIM_OC4_SetConfig+0x68>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	4a11      	ldr	r2, [pc, #68]	; (8002918 <TIM_OC4_SetConfig+0xa8>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d109      	bne.n	80028ec <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80028de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	695b      	ldr	r3, [r3, #20]
 80028e4:	019b      	lsls	r3, r3, #6
 80028e6:	697a      	ldr	r2, [r7, #20]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	697a      	ldr	r2, [r7, #20]
 80028f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	68fa      	ldr	r2, [r7, #12]
 80028f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	685a      	ldr	r2, [r3, #4]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	693a      	ldr	r2, [r7, #16]
 8002904:	621a      	str	r2, [r3, #32]
}
 8002906:	bf00      	nop
 8002908:	371c      	adds	r7, #28
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	40010000 	.word	0x40010000
 8002918:	40010400 	.word	0x40010400

0800291c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800291c:	b480      	push	{r7}
 800291e:	b087      	sub	sp, #28
 8002920:	af00      	add	r7, sp, #0
 8002922:	60f8      	str	r0, [r7, #12]
 8002924:	60b9      	str	r1, [r7, #8]
 8002926:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6a1b      	ldr	r3, [r3, #32]
 800292c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6a1b      	ldr	r3, [r3, #32]
 8002932:	f023 0201 	bic.w	r2, r3, #1
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	699b      	ldr	r3, [r3, #24]
 800293e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002946:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	011b      	lsls	r3, r3, #4
 800294c:	693a      	ldr	r2, [r7, #16]
 800294e:	4313      	orrs	r3, r2
 8002950:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	f023 030a 	bic.w	r3, r3, #10
 8002958:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800295a:	697a      	ldr	r2, [r7, #20]
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	4313      	orrs	r3, r2
 8002960:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	693a      	ldr	r2, [r7, #16]
 8002966:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	697a      	ldr	r2, [r7, #20]
 800296c:	621a      	str	r2, [r3, #32]
}
 800296e:	bf00      	nop
 8002970:	371c      	adds	r7, #28
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr

0800297a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800297a:	b480      	push	{r7}
 800297c:	b087      	sub	sp, #28
 800297e:	af00      	add	r7, sp, #0
 8002980:	60f8      	str	r0, [r7, #12]
 8002982:	60b9      	str	r1, [r7, #8]
 8002984:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	6a1b      	ldr	r3, [r3, #32]
 800298a:	f023 0210 	bic.w	r2, r3, #16
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	699b      	ldr	r3, [r3, #24]
 8002996:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6a1b      	ldr	r3, [r3, #32]
 800299c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80029a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	031b      	lsls	r3, r3, #12
 80029aa:	697a      	ldr	r2, [r7, #20]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80029b6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	011b      	lsls	r3, r3, #4
 80029bc:	693a      	ldr	r2, [r7, #16]
 80029be:	4313      	orrs	r3, r2
 80029c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	697a      	ldr	r2, [r7, #20]
 80029c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	693a      	ldr	r2, [r7, #16]
 80029cc:	621a      	str	r2, [r3, #32]
}
 80029ce:	bf00      	nop
 80029d0:	371c      	adds	r7, #28
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr

080029da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80029da:	b480      	push	{r7}
 80029dc:	b085      	sub	sp, #20
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]
 80029e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80029f2:	683a      	ldr	r2, [r7, #0]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	f043 0307 	orr.w	r3, r3, #7
 80029fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	68fa      	ldr	r2, [r7, #12]
 8002a02:	609a      	str	r2, [r3, #8]
}
 8002a04:	bf00      	nop
 8002a06:	3714      	adds	r7, #20
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr

08002a10 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b087      	sub	sp, #28
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	60b9      	str	r1, [r7, #8]
 8002a1a:	607a      	str	r2, [r7, #4]
 8002a1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a2a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	021a      	lsls	r2, r3, #8
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	431a      	orrs	r2, r3
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	697a      	ldr	r2, [r7, #20]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	697a      	ldr	r2, [r7, #20]
 8002a42:	609a      	str	r2, [r3, #8]
}
 8002a44:	bf00      	nop
 8002a46:	371c      	adds	r7, #28
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b087      	sub	sp, #28
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	f003 031f 	and.w	r3, r3, #31
 8002a62:	2201      	movs	r2, #1
 8002a64:	fa02 f303 	lsl.w	r3, r2, r3
 8002a68:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	6a1a      	ldr	r2, [r3, #32]
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	43db      	mvns	r3, r3
 8002a72:	401a      	ands	r2, r3
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6a1a      	ldr	r2, [r3, #32]
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	f003 031f 	and.w	r3, r3, #31
 8002a82:	6879      	ldr	r1, [r7, #4]
 8002a84:	fa01 f303 	lsl.w	r3, r1, r3
 8002a88:	431a      	orrs	r2, r3
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	621a      	str	r2, [r3, #32]
}
 8002a8e:	bf00      	nop
 8002a90:	371c      	adds	r7, #28
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
	...

08002a9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b085      	sub	sp, #20
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d101      	bne.n	8002ab4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ab0:	2302      	movs	r3, #2
 8002ab2:	e05a      	b.n	8002b6a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2202      	movs	r2, #2
 8002ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ada:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	68fa      	ldr	r2, [r7, #12]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	68fa      	ldr	r2, [r7, #12]
 8002aec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a21      	ldr	r2, [pc, #132]	; (8002b78 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d022      	beq.n	8002b3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b00:	d01d      	beq.n	8002b3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a1d      	ldr	r2, [pc, #116]	; (8002b7c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d018      	beq.n	8002b3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a1b      	ldr	r2, [pc, #108]	; (8002b80 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d013      	beq.n	8002b3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a1a      	ldr	r2, [pc, #104]	; (8002b84 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d00e      	beq.n	8002b3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a18      	ldr	r2, [pc, #96]	; (8002b88 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d009      	beq.n	8002b3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a17      	ldr	r2, [pc, #92]	; (8002b8c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d004      	beq.n	8002b3e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a15      	ldr	r2, [pc, #84]	; (8002b90 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d10c      	bne.n	8002b58 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b44:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	68ba      	ldr	r2, [r7, #8]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	68ba      	ldr	r2, [r7, #8]
 8002b56:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3714      	adds	r7, #20
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr
 8002b76:	bf00      	nop
 8002b78:	40010000 	.word	0x40010000
 8002b7c:	40000400 	.word	0x40000400
 8002b80:	40000800 	.word	0x40000800
 8002b84:	40000c00 	.word	0x40000c00
 8002b88:	40010400 	.word	0x40010400
 8002b8c:	40014000 	.word	0x40014000
 8002b90:	40001800 	.word	0x40001800

08002b94 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b085      	sub	sp, #20
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d101      	bne.n	8002bb0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002bac:	2302      	movs	r3, #2
 8002bae:	e03d      	b.n	8002c2c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	689b      	ldr	r3, [r3, #8]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	695b      	ldr	r3, [r3, #20]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	69db      	ldr	r3, [r3, #28]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	68fa      	ldr	r2, [r7, #12]
 8002c20:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c2a:	2300      	movs	r3, #0
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3714      	adds	r7, #20
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr

08002c38 <__NVIC_SetPriority>:
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	4603      	mov	r3, r0
 8002c40:	6039      	str	r1, [r7, #0]
 8002c42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	db0a      	blt.n	8002c62 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	b2da      	uxtb	r2, r3
 8002c50:	490c      	ldr	r1, [pc, #48]	; (8002c84 <__NVIC_SetPriority+0x4c>)
 8002c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c56:	0112      	lsls	r2, r2, #4
 8002c58:	b2d2      	uxtb	r2, r2
 8002c5a:	440b      	add	r3, r1
 8002c5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002c60:	e00a      	b.n	8002c78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	b2da      	uxtb	r2, r3
 8002c66:	4908      	ldr	r1, [pc, #32]	; (8002c88 <__NVIC_SetPriority+0x50>)
 8002c68:	79fb      	ldrb	r3, [r7, #7]
 8002c6a:	f003 030f 	and.w	r3, r3, #15
 8002c6e:	3b04      	subs	r3, #4
 8002c70:	0112      	lsls	r2, r2, #4
 8002c72:	b2d2      	uxtb	r2, r2
 8002c74:	440b      	add	r3, r1
 8002c76:	761a      	strb	r2, [r3, #24]
}
 8002c78:	bf00      	nop
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr
 8002c84:	e000e100 	.word	0xe000e100
 8002c88:	e000ed00 	.word	0xe000ed00

08002c8c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002c90:	2100      	movs	r1, #0
 8002c92:	f06f 0004 	mvn.w	r0, #4
 8002c96:	f7ff ffcf 	bl	8002c38 <__NVIC_SetPriority>
#endif
}
 8002c9a:	bf00      	nop
 8002c9c:	bd80      	pop	{r7, pc}
	...

08002ca0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002ca6:	f3ef 8305 	mrs	r3, IPSR
 8002caa:	603b      	str	r3, [r7, #0]
  return(result);
 8002cac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d003      	beq.n	8002cba <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002cb2:	f06f 0305 	mvn.w	r3, #5
 8002cb6:	607b      	str	r3, [r7, #4]
 8002cb8:	e00c      	b.n	8002cd4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002cba:	4b0a      	ldr	r3, [pc, #40]	; (8002ce4 <osKernelInitialize+0x44>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d105      	bne.n	8002cce <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002cc2:	4b08      	ldr	r3, [pc, #32]	; (8002ce4 <osKernelInitialize+0x44>)
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	607b      	str	r3, [r7, #4]
 8002ccc:	e002      	b.n	8002cd4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002cce:	f04f 33ff 	mov.w	r3, #4294967295
 8002cd2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002cd4:	687b      	ldr	r3, [r7, #4]
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	370c      	adds	r7, #12
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr
 8002ce2:	bf00      	nop
 8002ce4:	2000002c 	.word	0x2000002c

08002ce8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002cee:	f3ef 8305 	mrs	r3, IPSR
 8002cf2:	603b      	str	r3, [r7, #0]
  return(result);
 8002cf4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d003      	beq.n	8002d02 <osKernelStart+0x1a>
    stat = osErrorISR;
 8002cfa:	f06f 0305 	mvn.w	r3, #5
 8002cfe:	607b      	str	r3, [r7, #4]
 8002d00:	e010      	b.n	8002d24 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002d02:	4b0b      	ldr	r3, [pc, #44]	; (8002d30 <osKernelStart+0x48>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d109      	bne.n	8002d1e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002d0a:	f7ff ffbf 	bl	8002c8c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002d0e:	4b08      	ldr	r3, [pc, #32]	; (8002d30 <osKernelStart+0x48>)
 8002d10:	2202      	movs	r2, #2
 8002d12:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002d14:	f001 fca2 	bl	800465c <vTaskStartScheduler>
      stat = osOK;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	607b      	str	r3, [r7, #4]
 8002d1c:	e002      	b.n	8002d24 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002d1e:	f04f 33ff 	mov.w	r3, #4294967295
 8002d22:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002d24:	687b      	ldr	r3, [r7, #4]
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3708      	adds	r7, #8
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	2000002c 	.word	0x2000002c

08002d34 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b08e      	sub	sp, #56	; 0x38
 8002d38:	af04      	add	r7, sp, #16
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	60b9      	str	r1, [r7, #8]
 8002d3e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002d40:	2300      	movs	r3, #0
 8002d42:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002d44:	f3ef 8305 	mrs	r3, IPSR
 8002d48:	617b      	str	r3, [r7, #20]
  return(result);
 8002d4a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d17e      	bne.n	8002e4e <osThreadNew+0x11a>
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d07b      	beq.n	8002e4e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002d56:	2380      	movs	r3, #128	; 0x80
 8002d58:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002d5a:	2318      	movs	r3, #24
 8002d5c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8002d62:	f04f 33ff 	mov.w	r3, #4294967295
 8002d66:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d045      	beq.n	8002dfa <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d002      	beq.n	8002d7c <osThreadNew+0x48>
        name = attr->name;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	699b      	ldr	r3, [r3, #24]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d002      	beq.n	8002d8a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	699b      	ldr	r3, [r3, #24]
 8002d88:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d008      	beq.n	8002da2 <osThreadNew+0x6e>
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	2b38      	cmp	r3, #56	; 0x38
 8002d94:	d805      	bhi.n	8002da2 <osThreadNew+0x6e>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f003 0301 	and.w	r3, r3, #1
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d001      	beq.n	8002da6 <osThreadNew+0x72>
        return (NULL);
 8002da2:	2300      	movs	r3, #0
 8002da4:	e054      	b.n	8002e50 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	695b      	ldr	r3, [r3, #20]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d003      	beq.n	8002db6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	695b      	ldr	r3, [r3, #20]
 8002db2:	089b      	lsrs	r3, r3, #2
 8002db4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d00e      	beq.n	8002ddc <osThreadNew+0xa8>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	2b5b      	cmp	r3, #91	; 0x5b
 8002dc4:	d90a      	bls.n	8002ddc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d006      	beq.n	8002ddc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	695b      	ldr	r3, [r3, #20]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d002      	beq.n	8002ddc <osThreadNew+0xa8>
        mem = 1;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	61bb      	str	r3, [r7, #24]
 8002dda:	e010      	b.n	8002dfe <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d10c      	bne.n	8002dfe <osThreadNew+0xca>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d108      	bne.n	8002dfe <osThreadNew+0xca>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	691b      	ldr	r3, [r3, #16]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d104      	bne.n	8002dfe <osThreadNew+0xca>
          mem = 0;
 8002df4:	2300      	movs	r3, #0
 8002df6:	61bb      	str	r3, [r7, #24]
 8002df8:	e001      	b.n	8002dfe <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d110      	bne.n	8002e26 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002e08:	687a      	ldr	r2, [r7, #4]
 8002e0a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002e0c:	9202      	str	r2, [sp, #8]
 8002e0e:	9301      	str	r3, [sp, #4]
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	9300      	str	r3, [sp, #0]
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	6a3a      	ldr	r2, [r7, #32]
 8002e18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e1a:	68f8      	ldr	r0, [r7, #12]
 8002e1c:	f001 fa48 	bl	80042b0 <xTaskCreateStatic>
 8002e20:	4603      	mov	r3, r0
 8002e22:	613b      	str	r3, [r7, #16]
 8002e24:	e013      	b.n	8002e4e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002e26:	69bb      	ldr	r3, [r7, #24]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d110      	bne.n	8002e4e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002e2c:	6a3b      	ldr	r3, [r7, #32]
 8002e2e:	b29a      	uxth	r2, r3
 8002e30:	f107 0310 	add.w	r3, r7, #16
 8002e34:	9301      	str	r3, [sp, #4]
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	9300      	str	r3, [sp, #0]
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e3e:	68f8      	ldr	r0, [r7, #12]
 8002e40:	f001 fa93 	bl	800436a <xTaskCreate>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d001      	beq.n	8002e4e <osThreadNew+0x11a>
            hTask = NULL;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002e4e:	693b      	ldr	r3, [r7, #16]
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3728      	adds	r7, #40	; 0x28
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}

08002e58 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002e60:	f3ef 8305 	mrs	r3, IPSR
 8002e64:	60bb      	str	r3, [r7, #8]
  return(result);
 8002e66:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d003      	beq.n	8002e74 <osDelay+0x1c>
    stat = osErrorISR;
 8002e6c:	f06f 0305 	mvn.w	r3, #5
 8002e70:	60fb      	str	r3, [r7, #12]
 8002e72:	e007      	b.n	8002e84 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002e74:	2300      	movs	r3, #0
 8002e76:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d002      	beq.n	8002e84 <osDelay+0x2c>
      vTaskDelay(ticks);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f001 fbb8 	bl	80045f4 <vTaskDelay>
    }
  }

  return (stat);
 8002e84:	68fb      	ldr	r3, [r7, #12]
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3710      	adds	r7, #16
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
	...

08002e90 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002e90:	b480      	push	{r7}
 8002e92:	b085      	sub	sp, #20
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	60b9      	str	r1, [r7, #8]
 8002e9a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	4a07      	ldr	r2, [pc, #28]	; (8002ebc <vApplicationGetIdleTaskMemory+0x2c>)
 8002ea0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	4a06      	ldr	r2, [pc, #24]	; (8002ec0 <vApplicationGetIdleTaskMemory+0x30>)
 8002ea6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2280      	movs	r2, #128	; 0x80
 8002eac:	601a      	str	r2, [r3, #0]
}
 8002eae:	bf00      	nop
 8002eb0:	3714      	adds	r7, #20
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr
 8002eba:	bf00      	nop
 8002ebc:	20000030 	.word	0x20000030
 8002ec0:	2000008c 	.word	0x2000008c

08002ec4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002ec4:	b480      	push	{r7}
 8002ec6:	b085      	sub	sp, #20
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	60b9      	str	r1, [r7, #8]
 8002ece:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	4a07      	ldr	r2, [pc, #28]	; (8002ef0 <vApplicationGetTimerTaskMemory+0x2c>)
 8002ed4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	4a06      	ldr	r2, [pc, #24]	; (8002ef4 <vApplicationGetTimerTaskMemory+0x30>)
 8002eda:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ee2:	601a      	str	r2, [r3, #0]
}
 8002ee4:	bf00      	nop
 8002ee6:	3714      	adds	r7, #20
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr
 8002ef0:	2000028c 	.word	0x2000028c
 8002ef4:	200002e8 	.word	0x200002e8

08002ef8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b08a      	sub	sp, #40	; 0x28
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002f00:	2300      	movs	r3, #0
 8002f02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002f04:	f001 fc10 	bl	8004728 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002f08:	4b5b      	ldr	r3, [pc, #364]	; (8003078 <pvPortMalloc+0x180>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d101      	bne.n	8002f14 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002f10:	f000 f920 	bl	8003154 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002f14:	4b59      	ldr	r3, [pc, #356]	; (800307c <pvPortMalloc+0x184>)
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	f040 8093 	bne.w	8003048 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d01d      	beq.n	8002f64 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8002f28:	2208      	movs	r2, #8
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4413      	add	r3, r2
 8002f2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f003 0307 	and.w	r3, r3, #7
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d014      	beq.n	8002f64 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	f023 0307 	bic.w	r3, r3, #7
 8002f40:	3308      	adds	r3, #8
 8002f42:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f003 0307 	and.w	r3, r3, #7
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d00a      	beq.n	8002f64 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f52:	f383 8811 	msr	BASEPRI, r3
 8002f56:	f3bf 8f6f 	isb	sy
 8002f5a:	f3bf 8f4f 	dsb	sy
 8002f5e:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002f60:	bf00      	nop
 8002f62:	e7fe      	b.n	8002f62 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d06e      	beq.n	8003048 <pvPortMalloc+0x150>
 8002f6a:	4b45      	ldr	r3, [pc, #276]	; (8003080 <pvPortMalloc+0x188>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d869      	bhi.n	8003048 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8002f74:	4b43      	ldr	r3, [pc, #268]	; (8003084 <pvPortMalloc+0x18c>)
 8002f76:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8002f78:	4b42      	ldr	r3, [pc, #264]	; (8003084 <pvPortMalloc+0x18c>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002f7e:	e004      	b.n	8002f8a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8002f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f82:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d903      	bls.n	8002f9c <pvPortMalloc+0xa4>
 8002f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d1f1      	bne.n	8002f80 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002f9c:	4b36      	ldr	r3, [pc, #216]	; (8003078 <pvPortMalloc+0x180>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d050      	beq.n	8003048 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002fa6:	6a3b      	ldr	r3, [r7, #32]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	2208      	movs	r2, #8
 8002fac:	4413      	add	r3, r2
 8002fae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	6a3b      	ldr	r3, [r7, #32]
 8002fb6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fba:	685a      	ldr	r2, [r3, #4]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	1ad2      	subs	r2, r2, r3
 8002fc0:	2308      	movs	r3, #8
 8002fc2:	005b      	lsls	r3, r3, #1
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d91f      	bls.n	8003008 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002fc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4413      	add	r3, r2
 8002fce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	f003 0307 	and.w	r3, r3, #7
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d00a      	beq.n	8002ff0 <pvPortMalloc+0xf8>
	__asm volatile
 8002fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fde:	f383 8811 	msr	BASEPRI, r3
 8002fe2:	f3bf 8f6f 	isb	sy
 8002fe6:	f3bf 8f4f 	dsb	sy
 8002fea:	613b      	str	r3, [r7, #16]
}
 8002fec:	bf00      	nop
 8002fee:	e7fe      	b.n	8002fee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff2:	685a      	ldr	r2, [r3, #4]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	1ad2      	subs	r2, r2, r3
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003002:	69b8      	ldr	r0, [r7, #24]
 8003004:	f000 f908 	bl	8003218 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003008:	4b1d      	ldr	r3, [pc, #116]	; (8003080 <pvPortMalloc+0x188>)
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	4a1b      	ldr	r2, [pc, #108]	; (8003080 <pvPortMalloc+0x188>)
 8003014:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003016:	4b1a      	ldr	r3, [pc, #104]	; (8003080 <pvPortMalloc+0x188>)
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	4b1b      	ldr	r3, [pc, #108]	; (8003088 <pvPortMalloc+0x190>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	429a      	cmp	r2, r3
 8003020:	d203      	bcs.n	800302a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003022:	4b17      	ldr	r3, [pc, #92]	; (8003080 <pvPortMalloc+0x188>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a18      	ldr	r2, [pc, #96]	; (8003088 <pvPortMalloc+0x190>)
 8003028:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800302a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302c:	685a      	ldr	r2, [r3, #4]
 800302e:	4b13      	ldr	r3, [pc, #76]	; (800307c <pvPortMalloc+0x184>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	431a      	orrs	r2, r3
 8003034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003036:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303a:	2200      	movs	r2, #0
 800303c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800303e:	4b13      	ldr	r3, [pc, #76]	; (800308c <pvPortMalloc+0x194>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	3301      	adds	r3, #1
 8003044:	4a11      	ldr	r2, [pc, #68]	; (800308c <pvPortMalloc+0x194>)
 8003046:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003048:	f001 fb7c 	bl	8004744 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	f003 0307 	and.w	r3, r3, #7
 8003052:	2b00      	cmp	r3, #0
 8003054:	d00a      	beq.n	800306c <pvPortMalloc+0x174>
	__asm volatile
 8003056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800305a:	f383 8811 	msr	BASEPRI, r3
 800305e:	f3bf 8f6f 	isb	sy
 8003062:	f3bf 8f4f 	dsb	sy
 8003066:	60fb      	str	r3, [r7, #12]
}
 8003068:	bf00      	nop
 800306a:	e7fe      	b.n	800306a <pvPortMalloc+0x172>
	return pvReturn;
 800306c:	69fb      	ldr	r3, [r7, #28]
}
 800306e:	4618      	mov	r0, r3
 8003070:	3728      	adds	r7, #40	; 0x28
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	200042f0 	.word	0x200042f0
 800307c:	20004304 	.word	0x20004304
 8003080:	200042f4 	.word	0x200042f4
 8003084:	200042e8 	.word	0x200042e8
 8003088:	200042f8 	.word	0x200042f8
 800308c:	200042fc 	.word	0x200042fc

08003090 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b086      	sub	sp, #24
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d04d      	beq.n	800313e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80030a2:	2308      	movs	r3, #8
 80030a4:	425b      	negs	r3, r3
 80030a6:	697a      	ldr	r2, [r7, #20]
 80030a8:	4413      	add	r3, r2
 80030aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	685a      	ldr	r2, [r3, #4]
 80030b4:	4b24      	ldr	r3, [pc, #144]	; (8003148 <vPortFree+0xb8>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4013      	ands	r3, r2
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d10a      	bne.n	80030d4 <vPortFree+0x44>
	__asm volatile
 80030be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030c2:	f383 8811 	msr	BASEPRI, r3
 80030c6:	f3bf 8f6f 	isb	sy
 80030ca:	f3bf 8f4f 	dsb	sy
 80030ce:	60fb      	str	r3, [r7, #12]
}
 80030d0:	bf00      	nop
 80030d2:	e7fe      	b.n	80030d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d00a      	beq.n	80030f2 <vPortFree+0x62>
	__asm volatile
 80030dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030e0:	f383 8811 	msr	BASEPRI, r3
 80030e4:	f3bf 8f6f 	isb	sy
 80030e8:	f3bf 8f4f 	dsb	sy
 80030ec:	60bb      	str	r3, [r7, #8]
}
 80030ee:	bf00      	nop
 80030f0:	e7fe      	b.n	80030f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	685a      	ldr	r2, [r3, #4]
 80030f6:	4b14      	ldr	r3, [pc, #80]	; (8003148 <vPortFree+0xb8>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4013      	ands	r3, r2
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d01e      	beq.n	800313e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d11a      	bne.n	800313e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	685a      	ldr	r2, [r3, #4]
 800310c:	4b0e      	ldr	r3, [pc, #56]	; (8003148 <vPortFree+0xb8>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	43db      	mvns	r3, r3
 8003112:	401a      	ands	r2, r3
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003118:	f001 fb06 	bl	8004728 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	685a      	ldr	r2, [r3, #4]
 8003120:	4b0a      	ldr	r3, [pc, #40]	; (800314c <vPortFree+0xbc>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4413      	add	r3, r2
 8003126:	4a09      	ldr	r2, [pc, #36]	; (800314c <vPortFree+0xbc>)
 8003128:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800312a:	6938      	ldr	r0, [r7, #16]
 800312c:	f000 f874 	bl	8003218 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003130:	4b07      	ldr	r3, [pc, #28]	; (8003150 <vPortFree+0xc0>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	3301      	adds	r3, #1
 8003136:	4a06      	ldr	r2, [pc, #24]	; (8003150 <vPortFree+0xc0>)
 8003138:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800313a:	f001 fb03 	bl	8004744 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800313e:	bf00      	nop
 8003140:	3718      	adds	r7, #24
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	20004304 	.word	0x20004304
 800314c:	200042f4 	.word	0x200042f4
 8003150:	20004300 	.word	0x20004300

08003154 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003154:	b480      	push	{r7}
 8003156:	b085      	sub	sp, #20
 8003158:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800315a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800315e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003160:	4b27      	ldr	r3, [pc, #156]	; (8003200 <prvHeapInit+0xac>)
 8003162:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f003 0307 	and.w	r3, r3, #7
 800316a:	2b00      	cmp	r3, #0
 800316c:	d00c      	beq.n	8003188 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	3307      	adds	r3, #7
 8003172:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f023 0307 	bic.w	r3, r3, #7
 800317a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800317c:	68ba      	ldr	r2, [r7, #8]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	4a1f      	ldr	r2, [pc, #124]	; (8003200 <prvHeapInit+0xac>)
 8003184:	4413      	add	r3, r2
 8003186:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800318c:	4a1d      	ldr	r2, [pc, #116]	; (8003204 <prvHeapInit+0xb0>)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003192:	4b1c      	ldr	r3, [pc, #112]	; (8003204 <prvHeapInit+0xb0>)
 8003194:	2200      	movs	r2, #0
 8003196:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	68ba      	ldr	r2, [r7, #8]
 800319c:	4413      	add	r3, r2
 800319e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80031a0:	2208      	movs	r2, #8
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	1a9b      	subs	r3, r3, r2
 80031a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f023 0307 	bic.w	r3, r3, #7
 80031ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	4a15      	ldr	r2, [pc, #84]	; (8003208 <prvHeapInit+0xb4>)
 80031b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80031b6:	4b14      	ldr	r3, [pc, #80]	; (8003208 <prvHeapInit+0xb4>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2200      	movs	r2, #0
 80031bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80031be:	4b12      	ldr	r3, [pc, #72]	; (8003208 <prvHeapInit+0xb4>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	2200      	movs	r2, #0
 80031c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	68fa      	ldr	r2, [r7, #12]
 80031ce:	1ad2      	subs	r2, r2, r3
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80031d4:	4b0c      	ldr	r3, [pc, #48]	; (8003208 <prvHeapInit+0xb4>)
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	4a0a      	ldr	r2, [pc, #40]	; (800320c <prvHeapInit+0xb8>)
 80031e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	4a09      	ldr	r2, [pc, #36]	; (8003210 <prvHeapInit+0xbc>)
 80031ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80031ec:	4b09      	ldr	r3, [pc, #36]	; (8003214 <prvHeapInit+0xc0>)
 80031ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80031f2:	601a      	str	r2, [r3, #0]
}
 80031f4:	bf00      	nop
 80031f6:	3714      	adds	r7, #20
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr
 8003200:	200006e8 	.word	0x200006e8
 8003204:	200042e8 	.word	0x200042e8
 8003208:	200042f0 	.word	0x200042f0
 800320c:	200042f8 	.word	0x200042f8
 8003210:	200042f4 	.word	0x200042f4
 8003214:	20004304 	.word	0x20004304

08003218 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003218:	b480      	push	{r7}
 800321a:	b085      	sub	sp, #20
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003220:	4b28      	ldr	r3, [pc, #160]	; (80032c4 <prvInsertBlockIntoFreeList+0xac>)
 8003222:	60fb      	str	r3, [r7, #12]
 8003224:	e002      	b.n	800322c <prvInsertBlockIntoFreeList+0x14>
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	60fb      	str	r3, [r7, #12]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	429a      	cmp	r2, r3
 8003234:	d8f7      	bhi.n	8003226 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	68ba      	ldr	r2, [r7, #8]
 8003240:	4413      	add	r3, r2
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	429a      	cmp	r2, r3
 8003246:	d108      	bne.n	800325a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	685a      	ldr	r2, [r3, #4]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	441a      	add	r2, r3
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	68ba      	ldr	r2, [r7, #8]
 8003264:	441a      	add	r2, r3
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	429a      	cmp	r2, r3
 800326c:	d118      	bne.n	80032a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	4b15      	ldr	r3, [pc, #84]	; (80032c8 <prvInsertBlockIntoFreeList+0xb0>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	429a      	cmp	r2, r3
 8003278:	d00d      	beq.n	8003296 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	685a      	ldr	r2, [r3, #4]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	441a      	add	r2, r3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	601a      	str	r2, [r3, #0]
 8003294:	e008      	b.n	80032a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003296:	4b0c      	ldr	r3, [pc, #48]	; (80032c8 <prvInsertBlockIntoFreeList+0xb0>)
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	601a      	str	r2, [r3, #0]
 800329e:	e003      	b.n	80032a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80032a8:	68fa      	ldr	r2, [r7, #12]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d002      	beq.n	80032b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80032b6:	bf00      	nop
 80032b8:	3714      	adds	r7, #20
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr
 80032c2:	bf00      	nop
 80032c4:	200042e8 	.word	0x200042e8
 80032c8:	200042f0 	.word	0x200042f0

080032cc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f103 0208 	add.w	r2, r3, #8
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f04f 32ff 	mov.w	r2, #4294967295
 80032e4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f103 0208 	add.w	r2, r3, #8
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f103 0208 	add.w	r2, r3, #8
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003300:	bf00      	nop
 8003302:	370c      	adds	r7, #12
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr

0800330c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800331a:	bf00      	nop
 800331c:	370c      	adds	r7, #12
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr

08003326 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003326:	b480      	push	{r7}
 8003328:	b085      	sub	sp, #20
 800332a:	af00      	add	r7, sp, #0
 800332c:	6078      	str	r0, [r7, #4]
 800332e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	68fa      	ldr	r2, [r7, #12]
 800333a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	689a      	ldr	r2, [r3, #8]
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	683a      	ldr	r2, [r7, #0]
 800334a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	683a      	ldr	r2, [r7, #0]
 8003350:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	1c5a      	adds	r2, r3, #1
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	601a      	str	r2, [r3, #0]
}
 8003362:	bf00      	nop
 8003364:	3714      	adds	r7, #20
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr

0800336e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800336e:	b480      	push	{r7}
 8003370:	b085      	sub	sp, #20
 8003372:	af00      	add	r7, sp, #0
 8003374:	6078      	str	r0, [r7, #4]
 8003376:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003384:	d103      	bne.n	800338e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	60fb      	str	r3, [r7, #12]
 800338c:	e00c      	b.n	80033a8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	3308      	adds	r3, #8
 8003392:	60fb      	str	r3, [r7, #12]
 8003394:	e002      	b.n	800339c <vListInsert+0x2e>
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	60fb      	str	r3, [r7, #12]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	68ba      	ldr	r2, [r7, #8]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d2f6      	bcs.n	8003396 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	685a      	ldr	r2, [r3, #4]
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	683a      	ldr	r2, [r7, #0]
 80033b6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	68fa      	ldr	r2, [r7, #12]
 80033bc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	683a      	ldr	r2, [r7, #0]
 80033c2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	1c5a      	adds	r2, r3, #1
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	601a      	str	r2, [r3, #0]
}
 80033d4:	bf00      	nop
 80033d6:	3714      	adds	r7, #20
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr

080033e0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80033e0:	b480      	push	{r7}
 80033e2:	b085      	sub	sp, #20
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	691b      	ldr	r3, [r3, #16]
 80033ec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	6892      	ldr	r2, [r2, #8]
 80033f6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	6852      	ldr	r2, [r2, #4]
 8003400:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	429a      	cmp	r2, r3
 800340a:	d103      	bne.n	8003414 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	689a      	ldr	r2, [r3, #8]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	1e5a      	subs	r2, r3, #1
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
}
 8003428:	4618      	mov	r0, r3
 800342a:	3714      	adds	r7, #20
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr

08003434 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003434:	b480      	push	{r7}
 8003436:	b085      	sub	sp, #20
 8003438:	af00      	add	r7, sp, #0
 800343a:	60f8      	str	r0, [r7, #12]
 800343c:	60b9      	str	r1, [r7, #8]
 800343e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	3b04      	subs	r3, #4
 8003444:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800344c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	3b04      	subs	r3, #4
 8003452:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	f023 0201 	bic.w	r2, r3, #1
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	3b04      	subs	r3, #4
 8003462:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003464:	4a0c      	ldr	r2, [pc, #48]	; (8003498 <pxPortInitialiseStack+0x64>)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	3b14      	subs	r3, #20
 800346e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	3b04      	subs	r3, #4
 800347a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f06f 0202 	mvn.w	r2, #2
 8003482:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	3b20      	subs	r3, #32
 8003488:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800348a:	68fb      	ldr	r3, [r7, #12]
}
 800348c:	4618      	mov	r0, r3
 800348e:	3714      	adds	r7, #20
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr
 8003498:	0800349d 	.word	0x0800349d

0800349c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800349c:	b480      	push	{r7}
 800349e:	b085      	sub	sp, #20
 80034a0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80034a2:	2300      	movs	r3, #0
 80034a4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80034a6:	4b12      	ldr	r3, [pc, #72]	; (80034f0 <prvTaskExitError+0x54>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ae:	d00a      	beq.n	80034c6 <prvTaskExitError+0x2a>
	__asm volatile
 80034b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034b4:	f383 8811 	msr	BASEPRI, r3
 80034b8:	f3bf 8f6f 	isb	sy
 80034bc:	f3bf 8f4f 	dsb	sy
 80034c0:	60fb      	str	r3, [r7, #12]
}
 80034c2:	bf00      	nop
 80034c4:	e7fe      	b.n	80034c4 <prvTaskExitError+0x28>
	__asm volatile
 80034c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ca:	f383 8811 	msr	BASEPRI, r3
 80034ce:	f3bf 8f6f 	isb	sy
 80034d2:	f3bf 8f4f 	dsb	sy
 80034d6:	60bb      	str	r3, [r7, #8]
}
 80034d8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80034da:	bf00      	nop
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d0fc      	beq.n	80034dc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80034e2:	bf00      	nop
 80034e4:	bf00      	nop
 80034e6:	3714      	adds	r7, #20
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr
 80034f0:	2000000c 	.word	0x2000000c
	...

08003500 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003500:	4b07      	ldr	r3, [pc, #28]	; (8003520 <pxCurrentTCBConst2>)
 8003502:	6819      	ldr	r1, [r3, #0]
 8003504:	6808      	ldr	r0, [r1, #0]
 8003506:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800350a:	f380 8809 	msr	PSP, r0
 800350e:	f3bf 8f6f 	isb	sy
 8003512:	f04f 0000 	mov.w	r0, #0
 8003516:	f380 8811 	msr	BASEPRI, r0
 800351a:	4770      	bx	lr
 800351c:	f3af 8000 	nop.w

08003520 <pxCurrentTCBConst2>:
 8003520:	20004310 	.word	0x20004310
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003524:	bf00      	nop
 8003526:	bf00      	nop

08003528 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003528:	4808      	ldr	r0, [pc, #32]	; (800354c <prvPortStartFirstTask+0x24>)
 800352a:	6800      	ldr	r0, [r0, #0]
 800352c:	6800      	ldr	r0, [r0, #0]
 800352e:	f380 8808 	msr	MSP, r0
 8003532:	f04f 0000 	mov.w	r0, #0
 8003536:	f380 8814 	msr	CONTROL, r0
 800353a:	b662      	cpsie	i
 800353c:	b661      	cpsie	f
 800353e:	f3bf 8f4f 	dsb	sy
 8003542:	f3bf 8f6f 	isb	sy
 8003546:	df00      	svc	0
 8003548:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800354a:	bf00      	nop
 800354c:	e000ed08 	.word	0xe000ed08

08003550 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b086      	sub	sp, #24
 8003554:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003556:	4b46      	ldr	r3, [pc, #280]	; (8003670 <xPortStartScheduler+0x120>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a46      	ldr	r2, [pc, #280]	; (8003674 <xPortStartScheduler+0x124>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d10a      	bne.n	8003576 <xPortStartScheduler+0x26>
	__asm volatile
 8003560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003564:	f383 8811 	msr	BASEPRI, r3
 8003568:	f3bf 8f6f 	isb	sy
 800356c:	f3bf 8f4f 	dsb	sy
 8003570:	613b      	str	r3, [r7, #16]
}
 8003572:	bf00      	nop
 8003574:	e7fe      	b.n	8003574 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003576:	4b3e      	ldr	r3, [pc, #248]	; (8003670 <xPortStartScheduler+0x120>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a3f      	ldr	r2, [pc, #252]	; (8003678 <xPortStartScheduler+0x128>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d10a      	bne.n	8003596 <xPortStartScheduler+0x46>
	__asm volatile
 8003580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003584:	f383 8811 	msr	BASEPRI, r3
 8003588:	f3bf 8f6f 	isb	sy
 800358c:	f3bf 8f4f 	dsb	sy
 8003590:	60fb      	str	r3, [r7, #12]
}
 8003592:	bf00      	nop
 8003594:	e7fe      	b.n	8003594 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003596:	4b39      	ldr	r3, [pc, #228]	; (800367c <xPortStartScheduler+0x12c>)
 8003598:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	22ff      	movs	r2, #255	; 0xff
 80035a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80035b0:	78fb      	ldrb	r3, [r7, #3]
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80035b8:	b2da      	uxtb	r2, r3
 80035ba:	4b31      	ldr	r3, [pc, #196]	; (8003680 <xPortStartScheduler+0x130>)
 80035bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80035be:	4b31      	ldr	r3, [pc, #196]	; (8003684 <xPortStartScheduler+0x134>)
 80035c0:	2207      	movs	r2, #7
 80035c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80035c4:	e009      	b.n	80035da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80035c6:	4b2f      	ldr	r3, [pc, #188]	; (8003684 <xPortStartScheduler+0x134>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	3b01      	subs	r3, #1
 80035cc:	4a2d      	ldr	r2, [pc, #180]	; (8003684 <xPortStartScheduler+0x134>)
 80035ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80035d0:	78fb      	ldrb	r3, [r7, #3]
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	005b      	lsls	r3, r3, #1
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80035da:	78fb      	ldrb	r3, [r7, #3]
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035e2:	2b80      	cmp	r3, #128	; 0x80
 80035e4:	d0ef      	beq.n	80035c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80035e6:	4b27      	ldr	r3, [pc, #156]	; (8003684 <xPortStartScheduler+0x134>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f1c3 0307 	rsb	r3, r3, #7
 80035ee:	2b04      	cmp	r3, #4
 80035f0:	d00a      	beq.n	8003608 <xPortStartScheduler+0xb8>
	__asm volatile
 80035f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035f6:	f383 8811 	msr	BASEPRI, r3
 80035fa:	f3bf 8f6f 	isb	sy
 80035fe:	f3bf 8f4f 	dsb	sy
 8003602:	60bb      	str	r3, [r7, #8]
}
 8003604:	bf00      	nop
 8003606:	e7fe      	b.n	8003606 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003608:	4b1e      	ldr	r3, [pc, #120]	; (8003684 <xPortStartScheduler+0x134>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	021b      	lsls	r3, r3, #8
 800360e:	4a1d      	ldr	r2, [pc, #116]	; (8003684 <xPortStartScheduler+0x134>)
 8003610:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003612:	4b1c      	ldr	r3, [pc, #112]	; (8003684 <xPortStartScheduler+0x134>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800361a:	4a1a      	ldr	r2, [pc, #104]	; (8003684 <xPortStartScheduler+0x134>)
 800361c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	b2da      	uxtb	r2, r3
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003626:	4b18      	ldr	r3, [pc, #96]	; (8003688 <xPortStartScheduler+0x138>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a17      	ldr	r2, [pc, #92]	; (8003688 <xPortStartScheduler+0x138>)
 800362c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003630:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003632:	4b15      	ldr	r3, [pc, #84]	; (8003688 <xPortStartScheduler+0x138>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a14      	ldr	r2, [pc, #80]	; (8003688 <xPortStartScheduler+0x138>)
 8003638:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800363c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800363e:	f000 f8dd 	bl	80037fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003642:	4b12      	ldr	r3, [pc, #72]	; (800368c <xPortStartScheduler+0x13c>)
 8003644:	2200      	movs	r2, #0
 8003646:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003648:	f000 f8fc 	bl	8003844 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800364c:	4b10      	ldr	r3, [pc, #64]	; (8003690 <xPortStartScheduler+0x140>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a0f      	ldr	r2, [pc, #60]	; (8003690 <xPortStartScheduler+0x140>)
 8003652:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003656:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003658:	f7ff ff66 	bl	8003528 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800365c:	f001 f9da 	bl	8004a14 <vTaskSwitchContext>
	prvTaskExitError();
 8003660:	f7ff ff1c 	bl	800349c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	3718      	adds	r7, #24
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	e000ed00 	.word	0xe000ed00
 8003674:	410fc271 	.word	0x410fc271
 8003678:	410fc270 	.word	0x410fc270
 800367c:	e000e400 	.word	0xe000e400
 8003680:	20004308 	.word	0x20004308
 8003684:	2000430c 	.word	0x2000430c
 8003688:	e000ed20 	.word	0xe000ed20
 800368c:	2000000c 	.word	0x2000000c
 8003690:	e000ef34 	.word	0xe000ef34

08003694 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
	__asm volatile
 800369a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800369e:	f383 8811 	msr	BASEPRI, r3
 80036a2:	f3bf 8f6f 	isb	sy
 80036a6:	f3bf 8f4f 	dsb	sy
 80036aa:	607b      	str	r3, [r7, #4]
}
 80036ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80036ae:	4b0f      	ldr	r3, [pc, #60]	; (80036ec <vPortEnterCritical+0x58>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	3301      	adds	r3, #1
 80036b4:	4a0d      	ldr	r2, [pc, #52]	; (80036ec <vPortEnterCritical+0x58>)
 80036b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80036b8:	4b0c      	ldr	r3, [pc, #48]	; (80036ec <vPortEnterCritical+0x58>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d10f      	bne.n	80036e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80036c0:	4b0b      	ldr	r3, [pc, #44]	; (80036f0 <vPortEnterCritical+0x5c>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d00a      	beq.n	80036e0 <vPortEnterCritical+0x4c>
	__asm volatile
 80036ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ce:	f383 8811 	msr	BASEPRI, r3
 80036d2:	f3bf 8f6f 	isb	sy
 80036d6:	f3bf 8f4f 	dsb	sy
 80036da:	603b      	str	r3, [r7, #0]
}
 80036dc:	bf00      	nop
 80036de:	e7fe      	b.n	80036de <vPortEnterCritical+0x4a>
	}
}
 80036e0:	bf00      	nop
 80036e2:	370c      	adds	r7, #12
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr
 80036ec:	2000000c 	.word	0x2000000c
 80036f0:	e000ed04 	.word	0xe000ed04

080036f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80036fa:	4b12      	ldr	r3, [pc, #72]	; (8003744 <vPortExitCritical+0x50>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d10a      	bne.n	8003718 <vPortExitCritical+0x24>
	__asm volatile
 8003702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003706:	f383 8811 	msr	BASEPRI, r3
 800370a:	f3bf 8f6f 	isb	sy
 800370e:	f3bf 8f4f 	dsb	sy
 8003712:	607b      	str	r3, [r7, #4]
}
 8003714:	bf00      	nop
 8003716:	e7fe      	b.n	8003716 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003718:	4b0a      	ldr	r3, [pc, #40]	; (8003744 <vPortExitCritical+0x50>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	3b01      	subs	r3, #1
 800371e:	4a09      	ldr	r2, [pc, #36]	; (8003744 <vPortExitCritical+0x50>)
 8003720:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003722:	4b08      	ldr	r3, [pc, #32]	; (8003744 <vPortExitCritical+0x50>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d105      	bne.n	8003736 <vPortExitCritical+0x42>
 800372a:	2300      	movs	r3, #0
 800372c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003734:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003736:	bf00      	nop
 8003738:	370c      	adds	r7, #12
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr
 8003742:	bf00      	nop
 8003744:	2000000c 	.word	0x2000000c
	...

08003750 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003750:	f3ef 8009 	mrs	r0, PSP
 8003754:	f3bf 8f6f 	isb	sy
 8003758:	4b15      	ldr	r3, [pc, #84]	; (80037b0 <pxCurrentTCBConst>)
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	f01e 0f10 	tst.w	lr, #16
 8003760:	bf08      	it	eq
 8003762:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003766:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800376a:	6010      	str	r0, [r2, #0]
 800376c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003770:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003774:	f380 8811 	msr	BASEPRI, r0
 8003778:	f3bf 8f4f 	dsb	sy
 800377c:	f3bf 8f6f 	isb	sy
 8003780:	f001 f948 	bl	8004a14 <vTaskSwitchContext>
 8003784:	f04f 0000 	mov.w	r0, #0
 8003788:	f380 8811 	msr	BASEPRI, r0
 800378c:	bc09      	pop	{r0, r3}
 800378e:	6819      	ldr	r1, [r3, #0]
 8003790:	6808      	ldr	r0, [r1, #0]
 8003792:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003796:	f01e 0f10 	tst.w	lr, #16
 800379a:	bf08      	it	eq
 800379c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80037a0:	f380 8809 	msr	PSP, r0
 80037a4:	f3bf 8f6f 	isb	sy
 80037a8:	4770      	bx	lr
 80037aa:	bf00      	nop
 80037ac:	f3af 8000 	nop.w

080037b0 <pxCurrentTCBConst>:
 80037b0:	20004310 	.word	0x20004310
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80037b4:	bf00      	nop
 80037b6:	bf00      	nop

080037b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b082      	sub	sp, #8
 80037bc:	af00      	add	r7, sp, #0
	__asm volatile
 80037be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037c2:	f383 8811 	msr	BASEPRI, r3
 80037c6:	f3bf 8f6f 	isb	sy
 80037ca:	f3bf 8f4f 	dsb	sy
 80037ce:	607b      	str	r3, [r7, #4]
}
 80037d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80037d2:	f001 f865 	bl	80048a0 <xTaskIncrementTick>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d003      	beq.n	80037e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80037dc:	4b06      	ldr	r3, [pc, #24]	; (80037f8 <xPortSysTickHandler+0x40>)
 80037de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037e2:	601a      	str	r2, [r3, #0]
 80037e4:	2300      	movs	r3, #0
 80037e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	f383 8811 	msr	BASEPRI, r3
}
 80037ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80037f0:	bf00      	nop
 80037f2:	3708      	adds	r7, #8
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}
 80037f8:	e000ed04 	.word	0xe000ed04

080037fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80037fc:	b480      	push	{r7}
 80037fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003800:	4b0b      	ldr	r3, [pc, #44]	; (8003830 <vPortSetupTimerInterrupt+0x34>)
 8003802:	2200      	movs	r2, #0
 8003804:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003806:	4b0b      	ldr	r3, [pc, #44]	; (8003834 <vPortSetupTimerInterrupt+0x38>)
 8003808:	2200      	movs	r2, #0
 800380a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800380c:	4b0a      	ldr	r3, [pc, #40]	; (8003838 <vPortSetupTimerInterrupt+0x3c>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a0a      	ldr	r2, [pc, #40]	; (800383c <vPortSetupTimerInterrupt+0x40>)
 8003812:	fba2 2303 	umull	r2, r3, r2, r3
 8003816:	099b      	lsrs	r3, r3, #6
 8003818:	4a09      	ldr	r2, [pc, #36]	; (8003840 <vPortSetupTimerInterrupt+0x44>)
 800381a:	3b01      	subs	r3, #1
 800381c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800381e:	4b04      	ldr	r3, [pc, #16]	; (8003830 <vPortSetupTimerInterrupt+0x34>)
 8003820:	2207      	movs	r2, #7
 8003822:	601a      	str	r2, [r3, #0]
}
 8003824:	bf00      	nop
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr
 800382e:	bf00      	nop
 8003830:	e000e010 	.word	0xe000e010
 8003834:	e000e018 	.word	0xe000e018
 8003838:	20000000 	.word	0x20000000
 800383c:	10624dd3 	.word	0x10624dd3
 8003840:	e000e014 	.word	0xe000e014

08003844 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003844:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003854 <vPortEnableVFP+0x10>
 8003848:	6801      	ldr	r1, [r0, #0]
 800384a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800384e:	6001      	str	r1, [r0, #0]
 8003850:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003852:	bf00      	nop
 8003854:	e000ed88 	.word	0xe000ed88

08003858 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003858:	b480      	push	{r7}
 800385a:	b085      	sub	sp, #20
 800385c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800385e:	f3ef 8305 	mrs	r3, IPSR
 8003862:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2b0f      	cmp	r3, #15
 8003868:	d914      	bls.n	8003894 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800386a:	4a17      	ldr	r2, [pc, #92]	; (80038c8 <vPortValidateInterruptPriority+0x70>)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	4413      	add	r3, r2
 8003870:	781b      	ldrb	r3, [r3, #0]
 8003872:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003874:	4b15      	ldr	r3, [pc, #84]	; (80038cc <vPortValidateInterruptPriority+0x74>)
 8003876:	781b      	ldrb	r3, [r3, #0]
 8003878:	7afa      	ldrb	r2, [r7, #11]
 800387a:	429a      	cmp	r2, r3
 800387c:	d20a      	bcs.n	8003894 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800387e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003882:	f383 8811 	msr	BASEPRI, r3
 8003886:	f3bf 8f6f 	isb	sy
 800388a:	f3bf 8f4f 	dsb	sy
 800388e:	607b      	str	r3, [r7, #4]
}
 8003890:	bf00      	nop
 8003892:	e7fe      	b.n	8003892 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003894:	4b0e      	ldr	r3, [pc, #56]	; (80038d0 <vPortValidateInterruptPriority+0x78>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800389c:	4b0d      	ldr	r3, [pc, #52]	; (80038d4 <vPortValidateInterruptPriority+0x7c>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d90a      	bls.n	80038ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80038a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038a8:	f383 8811 	msr	BASEPRI, r3
 80038ac:	f3bf 8f6f 	isb	sy
 80038b0:	f3bf 8f4f 	dsb	sy
 80038b4:	603b      	str	r3, [r7, #0]
}
 80038b6:	bf00      	nop
 80038b8:	e7fe      	b.n	80038b8 <vPortValidateInterruptPriority+0x60>
	}
 80038ba:	bf00      	nop
 80038bc:	3714      	adds	r7, #20
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
 80038c6:	bf00      	nop
 80038c8:	e000e3f0 	.word	0xe000e3f0
 80038cc:	20004308 	.word	0x20004308
 80038d0:	e000ed0c 	.word	0xe000ed0c
 80038d4:	2000430c 	.word	0x2000430c

080038d8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b084      	sub	sp, #16
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d10a      	bne.n	8003902 <xQueueGenericReset+0x2a>
	__asm volatile
 80038ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038f0:	f383 8811 	msr	BASEPRI, r3
 80038f4:	f3bf 8f6f 	isb	sy
 80038f8:	f3bf 8f4f 	dsb	sy
 80038fc:	60bb      	str	r3, [r7, #8]
}
 80038fe:	bf00      	nop
 8003900:	e7fe      	b.n	8003900 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003902:	f7ff fec7 	bl	8003694 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800390e:	68f9      	ldr	r1, [r7, #12]
 8003910:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003912:	fb01 f303 	mul.w	r3, r1, r3
 8003916:	441a      	add	r2, r3
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2200      	movs	r2, #0
 8003920:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003932:	3b01      	subs	r3, #1
 8003934:	68f9      	ldr	r1, [r7, #12]
 8003936:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003938:	fb01 f303 	mul.w	r3, r1, r3
 800393c:	441a      	add	r2, r3
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	22ff      	movs	r2, #255	; 0xff
 8003946:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	22ff      	movs	r2, #255	; 0xff
 800394e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d114      	bne.n	8003982 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	691b      	ldr	r3, [r3, #16]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d01a      	beq.n	8003996 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	3310      	adds	r3, #16
 8003964:	4618      	mov	r0, r3
 8003966:	f001 f903 	bl	8004b70 <xTaskRemoveFromEventList>
 800396a:	4603      	mov	r3, r0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d012      	beq.n	8003996 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003970:	4b0c      	ldr	r3, [pc, #48]	; (80039a4 <xQueueGenericReset+0xcc>)
 8003972:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003976:	601a      	str	r2, [r3, #0]
 8003978:	f3bf 8f4f 	dsb	sy
 800397c:	f3bf 8f6f 	isb	sy
 8003980:	e009      	b.n	8003996 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	3310      	adds	r3, #16
 8003986:	4618      	mov	r0, r3
 8003988:	f7ff fca0 	bl	80032cc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	3324      	adds	r3, #36	; 0x24
 8003990:	4618      	mov	r0, r3
 8003992:	f7ff fc9b 	bl	80032cc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003996:	f7ff fead 	bl	80036f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800399a:	2301      	movs	r3, #1
}
 800399c:	4618      	mov	r0, r3
 800399e:	3710      	adds	r7, #16
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	e000ed04 	.word	0xe000ed04

080039a8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b08e      	sub	sp, #56	; 0x38
 80039ac:	af02      	add	r7, sp, #8
 80039ae:	60f8      	str	r0, [r7, #12]
 80039b0:	60b9      	str	r1, [r7, #8]
 80039b2:	607a      	str	r2, [r7, #4]
 80039b4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d10a      	bne.n	80039d2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80039bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039c0:	f383 8811 	msr	BASEPRI, r3
 80039c4:	f3bf 8f6f 	isb	sy
 80039c8:	f3bf 8f4f 	dsb	sy
 80039cc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80039ce:	bf00      	nop
 80039d0:	e7fe      	b.n	80039d0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d10a      	bne.n	80039ee <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80039d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039dc:	f383 8811 	msr	BASEPRI, r3
 80039e0:	f3bf 8f6f 	isb	sy
 80039e4:	f3bf 8f4f 	dsb	sy
 80039e8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80039ea:	bf00      	nop
 80039ec:	e7fe      	b.n	80039ec <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d002      	beq.n	80039fa <xQueueGenericCreateStatic+0x52>
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d001      	beq.n	80039fe <xQueueGenericCreateStatic+0x56>
 80039fa:	2301      	movs	r3, #1
 80039fc:	e000      	b.n	8003a00 <xQueueGenericCreateStatic+0x58>
 80039fe:	2300      	movs	r3, #0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d10a      	bne.n	8003a1a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a08:	f383 8811 	msr	BASEPRI, r3
 8003a0c:	f3bf 8f6f 	isb	sy
 8003a10:	f3bf 8f4f 	dsb	sy
 8003a14:	623b      	str	r3, [r7, #32]
}
 8003a16:	bf00      	nop
 8003a18:	e7fe      	b.n	8003a18 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d102      	bne.n	8003a26 <xQueueGenericCreateStatic+0x7e>
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d101      	bne.n	8003a2a <xQueueGenericCreateStatic+0x82>
 8003a26:	2301      	movs	r3, #1
 8003a28:	e000      	b.n	8003a2c <xQueueGenericCreateStatic+0x84>
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d10a      	bne.n	8003a46 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a34:	f383 8811 	msr	BASEPRI, r3
 8003a38:	f3bf 8f6f 	isb	sy
 8003a3c:	f3bf 8f4f 	dsb	sy
 8003a40:	61fb      	str	r3, [r7, #28]
}
 8003a42:	bf00      	nop
 8003a44:	e7fe      	b.n	8003a44 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003a46:	2350      	movs	r3, #80	; 0x50
 8003a48:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	2b50      	cmp	r3, #80	; 0x50
 8003a4e:	d00a      	beq.n	8003a66 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a54:	f383 8811 	msr	BASEPRI, r3
 8003a58:	f3bf 8f6f 	isb	sy
 8003a5c:	f3bf 8f4f 	dsb	sy
 8003a60:	61bb      	str	r3, [r7, #24]
}
 8003a62:	bf00      	nop
 8003a64:	e7fe      	b.n	8003a64 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003a66:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d00d      	beq.n	8003a8e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a74:	2201      	movs	r2, #1
 8003a76:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003a7a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a80:	9300      	str	r3, [sp, #0]
 8003a82:	4613      	mov	r3, r2
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	68b9      	ldr	r1, [r7, #8]
 8003a88:	68f8      	ldr	r0, [r7, #12]
 8003a8a:	f000 f805 	bl	8003a98 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3730      	adds	r7, #48	; 0x30
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	60b9      	str	r1, [r7, #8]
 8003aa2:	607a      	str	r2, [r7, #4]
 8003aa4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d103      	bne.n	8003ab4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	69ba      	ldr	r2, [r7, #24]
 8003ab0:	601a      	str	r2, [r3, #0]
 8003ab2:	e002      	b.n	8003aba <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003ab4:	69bb      	ldr	r3, [r7, #24]
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003aba:	69bb      	ldr	r3, [r7, #24]
 8003abc:	68fa      	ldr	r2, [r7, #12]
 8003abe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003ac0:	69bb      	ldr	r3, [r7, #24]
 8003ac2:	68ba      	ldr	r2, [r7, #8]
 8003ac4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003ac6:	2101      	movs	r1, #1
 8003ac8:	69b8      	ldr	r0, [r7, #24]
 8003aca:	f7ff ff05 	bl	80038d8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003ace:	69bb      	ldr	r3, [r7, #24]
 8003ad0:	78fa      	ldrb	r2, [r7, #3]
 8003ad2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003ad6:	bf00      	nop
 8003ad8:	3710      	adds	r7, #16
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}
	...

08003ae0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b08e      	sub	sp, #56	; 0x38
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	60b9      	str	r1, [r7, #8]
 8003aea:	607a      	str	r2, [r7, #4]
 8003aec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003aee:	2300      	movs	r3, #0
 8003af0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d10a      	bne.n	8003b12 <xQueueGenericSend+0x32>
	__asm volatile
 8003afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b00:	f383 8811 	msr	BASEPRI, r3
 8003b04:	f3bf 8f6f 	isb	sy
 8003b08:	f3bf 8f4f 	dsb	sy
 8003b0c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003b0e:	bf00      	nop
 8003b10:	e7fe      	b.n	8003b10 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d103      	bne.n	8003b20 <xQueueGenericSend+0x40>
 8003b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d101      	bne.n	8003b24 <xQueueGenericSend+0x44>
 8003b20:	2301      	movs	r3, #1
 8003b22:	e000      	b.n	8003b26 <xQueueGenericSend+0x46>
 8003b24:	2300      	movs	r3, #0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d10a      	bne.n	8003b40 <xQueueGenericSend+0x60>
	__asm volatile
 8003b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b2e:	f383 8811 	msr	BASEPRI, r3
 8003b32:	f3bf 8f6f 	isb	sy
 8003b36:	f3bf 8f4f 	dsb	sy
 8003b3a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003b3c:	bf00      	nop
 8003b3e:	e7fe      	b.n	8003b3e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	2b02      	cmp	r3, #2
 8003b44:	d103      	bne.n	8003b4e <xQueueGenericSend+0x6e>
 8003b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d101      	bne.n	8003b52 <xQueueGenericSend+0x72>
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e000      	b.n	8003b54 <xQueueGenericSend+0x74>
 8003b52:	2300      	movs	r3, #0
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d10a      	bne.n	8003b6e <xQueueGenericSend+0x8e>
	__asm volatile
 8003b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b5c:	f383 8811 	msr	BASEPRI, r3
 8003b60:	f3bf 8f6f 	isb	sy
 8003b64:	f3bf 8f4f 	dsb	sy
 8003b68:	623b      	str	r3, [r7, #32]
}
 8003b6a:	bf00      	nop
 8003b6c:	e7fe      	b.n	8003b6c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003b6e:	f001 f9bd 	bl	8004eec <xTaskGetSchedulerState>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d102      	bne.n	8003b7e <xQueueGenericSend+0x9e>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d101      	bne.n	8003b82 <xQueueGenericSend+0xa2>
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e000      	b.n	8003b84 <xQueueGenericSend+0xa4>
 8003b82:	2300      	movs	r3, #0
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d10a      	bne.n	8003b9e <xQueueGenericSend+0xbe>
	__asm volatile
 8003b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b8c:	f383 8811 	msr	BASEPRI, r3
 8003b90:	f3bf 8f6f 	isb	sy
 8003b94:	f3bf 8f4f 	dsb	sy
 8003b98:	61fb      	str	r3, [r7, #28]
}
 8003b9a:	bf00      	nop
 8003b9c:	e7fe      	b.n	8003b9c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003b9e:	f7ff fd79 	bl	8003694 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d302      	bcc.n	8003bb4 <xQueueGenericSend+0xd4>
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	2b02      	cmp	r3, #2
 8003bb2:	d129      	bne.n	8003c08 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003bb4:	683a      	ldr	r2, [r7, #0]
 8003bb6:	68b9      	ldr	r1, [r7, #8]
 8003bb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003bba:	f000 fa0b 	bl	8003fd4 <prvCopyDataToQueue>
 8003bbe:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d010      	beq.n	8003bea <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bca:	3324      	adds	r3, #36	; 0x24
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f000 ffcf 	bl	8004b70 <xTaskRemoveFromEventList>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d013      	beq.n	8003c00 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003bd8:	4b3f      	ldr	r3, [pc, #252]	; (8003cd8 <xQueueGenericSend+0x1f8>)
 8003bda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bde:	601a      	str	r2, [r3, #0]
 8003be0:	f3bf 8f4f 	dsb	sy
 8003be4:	f3bf 8f6f 	isb	sy
 8003be8:	e00a      	b.n	8003c00 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d007      	beq.n	8003c00 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003bf0:	4b39      	ldr	r3, [pc, #228]	; (8003cd8 <xQueueGenericSend+0x1f8>)
 8003bf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bf6:	601a      	str	r2, [r3, #0]
 8003bf8:	f3bf 8f4f 	dsb	sy
 8003bfc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003c00:	f7ff fd78 	bl	80036f4 <vPortExitCritical>
				return pdPASS;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e063      	b.n	8003cd0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d103      	bne.n	8003c16 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003c0e:	f7ff fd71 	bl	80036f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003c12:	2300      	movs	r3, #0
 8003c14:	e05c      	b.n	8003cd0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003c16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d106      	bne.n	8003c2a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003c1c:	f107 0314 	add.w	r3, r7, #20
 8003c20:	4618      	mov	r0, r3
 8003c22:	f001 f809 	bl	8004c38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003c26:	2301      	movs	r3, #1
 8003c28:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003c2a:	f7ff fd63 	bl	80036f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003c2e:	f000 fd7b 	bl	8004728 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003c32:	f7ff fd2f 	bl	8003694 <vPortEnterCritical>
 8003c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c3c:	b25b      	sxtb	r3, r3
 8003c3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c42:	d103      	bne.n	8003c4c <xQueueGenericSend+0x16c>
 8003c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c46:	2200      	movs	r2, #0
 8003c48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c4e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c52:	b25b      	sxtb	r3, r3
 8003c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c58:	d103      	bne.n	8003c62 <xQueueGenericSend+0x182>
 8003c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c62:	f7ff fd47 	bl	80036f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003c66:	1d3a      	adds	r2, r7, #4
 8003c68:	f107 0314 	add.w	r3, r7, #20
 8003c6c:	4611      	mov	r1, r2
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f000 fff8 	bl	8004c64 <xTaskCheckForTimeOut>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d124      	bne.n	8003cc4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003c7a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c7c:	f000 faa2 	bl	80041c4 <prvIsQueueFull>
 8003c80:	4603      	mov	r3, r0
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d018      	beq.n	8003cb8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003c86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c88:	3310      	adds	r3, #16
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	4611      	mov	r1, r2
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f000 ff1e 	bl	8004ad0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003c94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c96:	f000 fa2d 	bl	80040f4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003c9a:	f000 fd53 	bl	8004744 <xTaskResumeAll>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	f47f af7c 	bne.w	8003b9e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003ca6:	4b0c      	ldr	r3, [pc, #48]	; (8003cd8 <xQueueGenericSend+0x1f8>)
 8003ca8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cac:	601a      	str	r2, [r3, #0]
 8003cae:	f3bf 8f4f 	dsb	sy
 8003cb2:	f3bf 8f6f 	isb	sy
 8003cb6:	e772      	b.n	8003b9e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003cb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003cba:	f000 fa1b 	bl	80040f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003cbe:	f000 fd41 	bl	8004744 <xTaskResumeAll>
 8003cc2:	e76c      	b.n	8003b9e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003cc4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003cc6:	f000 fa15 	bl	80040f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003cca:	f000 fd3b 	bl	8004744 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003cce:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3738      	adds	r7, #56	; 0x38
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	e000ed04 	.word	0xe000ed04

08003cdc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b090      	sub	sp, #64	; 0x40
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	60f8      	str	r0, [r7, #12]
 8003ce4:	60b9      	str	r1, [r7, #8]
 8003ce6:	607a      	str	r2, [r7, #4]
 8003ce8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d10a      	bne.n	8003d0a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cf8:	f383 8811 	msr	BASEPRI, r3
 8003cfc:	f3bf 8f6f 	isb	sy
 8003d00:	f3bf 8f4f 	dsb	sy
 8003d04:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003d06:	bf00      	nop
 8003d08:	e7fe      	b.n	8003d08 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d103      	bne.n	8003d18 <xQueueGenericSendFromISR+0x3c>
 8003d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d101      	bne.n	8003d1c <xQueueGenericSendFromISR+0x40>
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e000      	b.n	8003d1e <xQueueGenericSendFromISR+0x42>
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d10a      	bne.n	8003d38 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d26:	f383 8811 	msr	BASEPRI, r3
 8003d2a:	f3bf 8f6f 	isb	sy
 8003d2e:	f3bf 8f4f 	dsb	sy
 8003d32:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003d34:	bf00      	nop
 8003d36:	e7fe      	b.n	8003d36 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d103      	bne.n	8003d46 <xQueueGenericSendFromISR+0x6a>
 8003d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d101      	bne.n	8003d4a <xQueueGenericSendFromISR+0x6e>
 8003d46:	2301      	movs	r3, #1
 8003d48:	e000      	b.n	8003d4c <xQueueGenericSendFromISR+0x70>
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d10a      	bne.n	8003d66 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d54:	f383 8811 	msr	BASEPRI, r3
 8003d58:	f3bf 8f6f 	isb	sy
 8003d5c:	f3bf 8f4f 	dsb	sy
 8003d60:	623b      	str	r3, [r7, #32]
}
 8003d62:	bf00      	nop
 8003d64:	e7fe      	b.n	8003d64 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003d66:	f7ff fd77 	bl	8003858 <vPortValidateInterruptPriority>
	__asm volatile
 8003d6a:	f3ef 8211 	mrs	r2, BASEPRI
 8003d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d72:	f383 8811 	msr	BASEPRI, r3
 8003d76:	f3bf 8f6f 	isb	sy
 8003d7a:	f3bf 8f4f 	dsb	sy
 8003d7e:	61fa      	str	r2, [r7, #28]
 8003d80:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8003d82:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003d84:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	d302      	bcc.n	8003d98 <xQueueGenericSendFromISR+0xbc>
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	2b02      	cmp	r3, #2
 8003d96:	d12f      	bne.n	8003df8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d9a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003da8:	683a      	ldr	r2, [r7, #0]
 8003daa:	68b9      	ldr	r1, [r7, #8]
 8003dac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003dae:	f000 f911 	bl	8003fd4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003db2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dba:	d112      	bne.n	8003de2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d016      	beq.n	8003df2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dc6:	3324      	adds	r3, #36	; 0x24
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f000 fed1 	bl	8004b70 <xTaskRemoveFromEventList>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d00e      	beq.n	8003df2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d00b      	beq.n	8003df2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2201      	movs	r2, #1
 8003dde:	601a      	str	r2, [r3, #0]
 8003de0:	e007      	b.n	8003df2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003de2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003de6:	3301      	adds	r3, #1
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	b25a      	sxtb	r2, r3
 8003dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003df2:	2301      	movs	r3, #1
 8003df4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003df6:	e001      	b.n	8003dfc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dfe:	617b      	str	r3, [r7, #20]
	__asm volatile
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	f383 8811 	msr	BASEPRI, r3
}
 8003e06:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003e08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3740      	adds	r7, #64	; 0x40
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}
	...

08003e14 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b08c      	sub	sp, #48	; 0x30
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	60f8      	str	r0, [r7, #12]
 8003e1c:	60b9      	str	r1, [r7, #8]
 8003e1e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003e20:	2300      	movs	r3, #0
 8003e22:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d10a      	bne.n	8003e44 <xQueueReceive+0x30>
	__asm volatile
 8003e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e32:	f383 8811 	msr	BASEPRI, r3
 8003e36:	f3bf 8f6f 	isb	sy
 8003e3a:	f3bf 8f4f 	dsb	sy
 8003e3e:	623b      	str	r3, [r7, #32]
}
 8003e40:	bf00      	nop
 8003e42:	e7fe      	b.n	8003e42 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d103      	bne.n	8003e52 <xQueueReceive+0x3e>
 8003e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d101      	bne.n	8003e56 <xQueueReceive+0x42>
 8003e52:	2301      	movs	r3, #1
 8003e54:	e000      	b.n	8003e58 <xQueueReceive+0x44>
 8003e56:	2300      	movs	r3, #0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d10a      	bne.n	8003e72 <xQueueReceive+0x5e>
	__asm volatile
 8003e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e60:	f383 8811 	msr	BASEPRI, r3
 8003e64:	f3bf 8f6f 	isb	sy
 8003e68:	f3bf 8f4f 	dsb	sy
 8003e6c:	61fb      	str	r3, [r7, #28]
}
 8003e6e:	bf00      	nop
 8003e70:	e7fe      	b.n	8003e70 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003e72:	f001 f83b 	bl	8004eec <xTaskGetSchedulerState>
 8003e76:	4603      	mov	r3, r0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d102      	bne.n	8003e82 <xQueueReceive+0x6e>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d101      	bne.n	8003e86 <xQueueReceive+0x72>
 8003e82:	2301      	movs	r3, #1
 8003e84:	e000      	b.n	8003e88 <xQueueReceive+0x74>
 8003e86:	2300      	movs	r3, #0
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d10a      	bne.n	8003ea2 <xQueueReceive+0x8e>
	__asm volatile
 8003e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e90:	f383 8811 	msr	BASEPRI, r3
 8003e94:	f3bf 8f6f 	isb	sy
 8003e98:	f3bf 8f4f 	dsb	sy
 8003e9c:	61bb      	str	r3, [r7, #24]
}
 8003e9e:	bf00      	nop
 8003ea0:	e7fe      	b.n	8003ea0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003ea2:	f7ff fbf7 	bl	8003694 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eaa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d01f      	beq.n	8003ef2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003eb2:	68b9      	ldr	r1, [r7, #8]
 8003eb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003eb6:	f000 f8f7 	bl	80040a8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ebc:	1e5a      	subs	r2, r3, #1
 8003ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ec0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d00f      	beq.n	8003eea <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ecc:	3310      	adds	r3, #16
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f000 fe4e 	bl	8004b70 <xTaskRemoveFromEventList>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d007      	beq.n	8003eea <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003eda:	4b3d      	ldr	r3, [pc, #244]	; (8003fd0 <xQueueReceive+0x1bc>)
 8003edc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ee0:	601a      	str	r2, [r3, #0]
 8003ee2:	f3bf 8f4f 	dsb	sy
 8003ee6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003eea:	f7ff fc03 	bl	80036f4 <vPortExitCritical>
				return pdPASS;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e069      	b.n	8003fc6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d103      	bne.n	8003f00 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003ef8:	f7ff fbfc 	bl	80036f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003efc:	2300      	movs	r3, #0
 8003efe:	e062      	b.n	8003fc6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d106      	bne.n	8003f14 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003f06:	f107 0310 	add.w	r3, r7, #16
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f000 fe94 	bl	8004c38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003f10:	2301      	movs	r3, #1
 8003f12:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003f14:	f7ff fbee 	bl	80036f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003f18:	f000 fc06 	bl	8004728 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003f1c:	f7ff fbba 	bl	8003694 <vPortEnterCritical>
 8003f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f22:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f26:	b25b      	sxtb	r3, r3
 8003f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f2c:	d103      	bne.n	8003f36 <xQueueReceive+0x122>
 8003f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f30:	2200      	movs	r2, #0
 8003f32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f3c:	b25b      	sxtb	r3, r3
 8003f3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f42:	d103      	bne.n	8003f4c <xQueueReceive+0x138>
 8003f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f46:	2200      	movs	r2, #0
 8003f48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f4c:	f7ff fbd2 	bl	80036f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003f50:	1d3a      	adds	r2, r7, #4
 8003f52:	f107 0310 	add.w	r3, r7, #16
 8003f56:	4611      	mov	r1, r2
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f000 fe83 	bl	8004c64 <xTaskCheckForTimeOut>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d123      	bne.n	8003fac <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003f64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f66:	f000 f917 	bl	8004198 <prvIsQueueEmpty>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d017      	beq.n	8003fa0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f72:	3324      	adds	r3, #36	; 0x24
 8003f74:	687a      	ldr	r2, [r7, #4]
 8003f76:	4611      	mov	r1, r2
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f000 fda9 	bl	8004ad0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003f7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f80:	f000 f8b8 	bl	80040f4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003f84:	f000 fbde 	bl	8004744 <xTaskResumeAll>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d189      	bne.n	8003ea2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003f8e:	4b10      	ldr	r3, [pc, #64]	; (8003fd0 <xQueueReceive+0x1bc>)
 8003f90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f94:	601a      	str	r2, [r3, #0]
 8003f96:	f3bf 8f4f 	dsb	sy
 8003f9a:	f3bf 8f6f 	isb	sy
 8003f9e:	e780      	b.n	8003ea2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003fa0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003fa2:	f000 f8a7 	bl	80040f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003fa6:	f000 fbcd 	bl	8004744 <xTaskResumeAll>
 8003faa:	e77a      	b.n	8003ea2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003fac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003fae:	f000 f8a1 	bl	80040f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003fb2:	f000 fbc7 	bl	8004744 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003fb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003fb8:	f000 f8ee 	bl	8004198 <prvIsQueueEmpty>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	f43f af6f 	beq.w	8003ea2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003fc4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	3730      	adds	r7, #48	; 0x30
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	bf00      	nop
 8003fd0:	e000ed04 	.word	0xe000ed04

08003fd4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b086      	sub	sp, #24
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	60f8      	str	r0, [r7, #12]
 8003fdc:	60b9      	str	r1, [r7, #8]
 8003fde:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fe8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d10d      	bne.n	800400e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d14d      	bne.n	8004096 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	4618      	mov	r0, r3
 8004000:	f000 ff92 	bl	8004f28 <xTaskPriorityDisinherit>
 8004004:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2200      	movs	r2, #0
 800400a:	609a      	str	r2, [r3, #8]
 800400c:	e043      	b.n	8004096 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d119      	bne.n	8004048 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6858      	ldr	r0, [r3, #4]
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401c:	461a      	mov	r2, r3
 800401e:	68b9      	ldr	r1, [r7, #8]
 8004020:	f001 fde8 	bl	8005bf4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	685a      	ldr	r2, [r3, #4]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402c:	441a      	add	r2, r3
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	685a      	ldr	r2, [r3, #4]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	429a      	cmp	r2, r3
 800403c:	d32b      	bcc.n	8004096 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	605a      	str	r2, [r3, #4]
 8004046:	e026      	b.n	8004096 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	68d8      	ldr	r0, [r3, #12]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004050:	461a      	mov	r2, r3
 8004052:	68b9      	ldr	r1, [r7, #8]
 8004054:	f001 fdce 	bl	8005bf4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	68da      	ldr	r2, [r3, #12]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004060:	425b      	negs	r3, r3
 8004062:	441a      	add	r2, r3
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	68da      	ldr	r2, [r3, #12]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	429a      	cmp	r2, r3
 8004072:	d207      	bcs.n	8004084 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	689a      	ldr	r2, [r3, #8]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407c:	425b      	negs	r3, r3
 800407e:	441a      	add	r2, r3
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2b02      	cmp	r3, #2
 8004088:	d105      	bne.n	8004096 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d002      	beq.n	8004096 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	3b01      	subs	r3, #1
 8004094:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	1c5a      	adds	r2, r3, #1
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800409e:	697b      	ldr	r3, [r7, #20]
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3718      	adds	r7, #24
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}

080040a8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b082      	sub	sp, #8
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d018      	beq.n	80040ec <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	68da      	ldr	r2, [r3, #12]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c2:	441a      	add	r2, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	68da      	ldr	r2, [r3, #12]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d303      	bcc.n	80040dc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	68d9      	ldr	r1, [r3, #12]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e4:	461a      	mov	r2, r3
 80040e6:	6838      	ldr	r0, [r7, #0]
 80040e8:	f001 fd84 	bl	8005bf4 <memcpy>
	}
}
 80040ec:	bf00      	nop
 80040ee:	3708      	adds	r7, #8
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80040fc:	f7ff faca 	bl	8003694 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004106:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004108:	e011      	b.n	800412e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410e:	2b00      	cmp	r3, #0
 8004110:	d012      	beq.n	8004138 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	3324      	adds	r3, #36	; 0x24
 8004116:	4618      	mov	r0, r3
 8004118:	f000 fd2a 	bl	8004b70 <xTaskRemoveFromEventList>
 800411c:	4603      	mov	r3, r0
 800411e:	2b00      	cmp	r3, #0
 8004120:	d001      	beq.n	8004126 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004122:	f000 fe01 	bl	8004d28 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004126:	7bfb      	ldrb	r3, [r7, #15]
 8004128:	3b01      	subs	r3, #1
 800412a:	b2db      	uxtb	r3, r3
 800412c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800412e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004132:	2b00      	cmp	r3, #0
 8004134:	dce9      	bgt.n	800410a <prvUnlockQueue+0x16>
 8004136:	e000      	b.n	800413a <prvUnlockQueue+0x46>
					break;
 8004138:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	22ff      	movs	r2, #255	; 0xff
 800413e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004142:	f7ff fad7 	bl	80036f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004146:	f7ff faa5 	bl	8003694 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004150:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004152:	e011      	b.n	8004178 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	691b      	ldr	r3, [r3, #16]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d012      	beq.n	8004182 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	3310      	adds	r3, #16
 8004160:	4618      	mov	r0, r3
 8004162:	f000 fd05 	bl	8004b70 <xTaskRemoveFromEventList>
 8004166:	4603      	mov	r3, r0
 8004168:	2b00      	cmp	r3, #0
 800416a:	d001      	beq.n	8004170 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800416c:	f000 fddc 	bl	8004d28 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004170:	7bbb      	ldrb	r3, [r7, #14]
 8004172:	3b01      	subs	r3, #1
 8004174:	b2db      	uxtb	r3, r3
 8004176:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004178:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800417c:	2b00      	cmp	r3, #0
 800417e:	dce9      	bgt.n	8004154 <prvUnlockQueue+0x60>
 8004180:	e000      	b.n	8004184 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004182:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	22ff      	movs	r2, #255	; 0xff
 8004188:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800418c:	f7ff fab2 	bl	80036f4 <vPortExitCritical>
}
 8004190:	bf00      	nop
 8004192:	3710      	adds	r7, #16
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}

08004198 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b084      	sub	sp, #16
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80041a0:	f7ff fa78 	bl	8003694 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d102      	bne.n	80041b2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80041ac:	2301      	movs	r3, #1
 80041ae:	60fb      	str	r3, [r7, #12]
 80041b0:	e001      	b.n	80041b6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80041b2:	2300      	movs	r3, #0
 80041b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80041b6:	f7ff fa9d 	bl	80036f4 <vPortExitCritical>

	return xReturn;
 80041ba:	68fb      	ldr	r3, [r7, #12]
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3710      	adds	r7, #16
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80041cc:	f7ff fa62 	bl	8003694 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041d8:	429a      	cmp	r2, r3
 80041da:	d102      	bne.n	80041e2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80041dc:	2301      	movs	r3, #1
 80041de:	60fb      	str	r3, [r7, #12]
 80041e0:	e001      	b.n	80041e6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80041e2:	2300      	movs	r3, #0
 80041e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80041e6:	f7ff fa85 	bl	80036f4 <vPortExitCritical>

	return xReturn;
 80041ea:	68fb      	ldr	r3, [r7, #12]
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3710      	adds	r7, #16
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}

080041f4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80041f4:	b480      	push	{r7}
 80041f6:	b085      	sub	sp, #20
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80041fe:	2300      	movs	r3, #0
 8004200:	60fb      	str	r3, [r7, #12]
 8004202:	e014      	b.n	800422e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004204:	4a0f      	ldr	r2, [pc, #60]	; (8004244 <vQueueAddToRegistry+0x50>)
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d10b      	bne.n	8004228 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004210:	490c      	ldr	r1, [pc, #48]	; (8004244 <vQueueAddToRegistry+0x50>)
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	683a      	ldr	r2, [r7, #0]
 8004216:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800421a:	4a0a      	ldr	r2, [pc, #40]	; (8004244 <vQueueAddToRegistry+0x50>)
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	00db      	lsls	r3, r3, #3
 8004220:	4413      	add	r3, r2
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004226:	e006      	b.n	8004236 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	3301      	adds	r3, #1
 800422c:	60fb      	str	r3, [r7, #12]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2b07      	cmp	r3, #7
 8004232:	d9e7      	bls.n	8004204 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004234:	bf00      	nop
 8004236:	bf00      	nop
 8004238:	3714      	adds	r7, #20
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr
 8004242:	bf00      	nop
 8004244:	20004a28 	.word	0x20004a28

08004248 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004248:	b580      	push	{r7, lr}
 800424a:	b086      	sub	sp, #24
 800424c:	af00      	add	r7, sp, #0
 800424e:	60f8      	str	r0, [r7, #12]
 8004250:	60b9      	str	r1, [r7, #8]
 8004252:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004258:	f7ff fa1c 	bl	8003694 <vPortEnterCritical>
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004262:	b25b      	sxtb	r3, r3
 8004264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004268:	d103      	bne.n	8004272 <vQueueWaitForMessageRestricted+0x2a>
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	2200      	movs	r2, #0
 800426e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004278:	b25b      	sxtb	r3, r3
 800427a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800427e:	d103      	bne.n	8004288 <vQueueWaitForMessageRestricted+0x40>
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	2200      	movs	r2, #0
 8004284:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004288:	f7ff fa34 	bl	80036f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004290:	2b00      	cmp	r3, #0
 8004292:	d106      	bne.n	80042a2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	3324      	adds	r3, #36	; 0x24
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	68b9      	ldr	r1, [r7, #8]
 800429c:	4618      	mov	r0, r3
 800429e:	f000 fc3b 	bl	8004b18 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80042a2:	6978      	ldr	r0, [r7, #20]
 80042a4:	f7ff ff26 	bl	80040f4 <prvUnlockQueue>
	}
 80042a8:	bf00      	nop
 80042aa:	3718      	adds	r7, #24
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b08e      	sub	sp, #56	; 0x38
 80042b4:	af04      	add	r7, sp, #16
 80042b6:	60f8      	str	r0, [r7, #12]
 80042b8:	60b9      	str	r1, [r7, #8]
 80042ba:	607a      	str	r2, [r7, #4]
 80042bc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80042be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d10a      	bne.n	80042da <xTaskCreateStatic+0x2a>
	__asm volatile
 80042c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c8:	f383 8811 	msr	BASEPRI, r3
 80042cc:	f3bf 8f6f 	isb	sy
 80042d0:	f3bf 8f4f 	dsb	sy
 80042d4:	623b      	str	r3, [r7, #32]
}
 80042d6:	bf00      	nop
 80042d8:	e7fe      	b.n	80042d8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80042da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d10a      	bne.n	80042f6 <xTaskCreateStatic+0x46>
	__asm volatile
 80042e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042e4:	f383 8811 	msr	BASEPRI, r3
 80042e8:	f3bf 8f6f 	isb	sy
 80042ec:	f3bf 8f4f 	dsb	sy
 80042f0:	61fb      	str	r3, [r7, #28]
}
 80042f2:	bf00      	nop
 80042f4:	e7fe      	b.n	80042f4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80042f6:	235c      	movs	r3, #92	; 0x5c
 80042f8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	2b5c      	cmp	r3, #92	; 0x5c
 80042fe:	d00a      	beq.n	8004316 <xTaskCreateStatic+0x66>
	__asm volatile
 8004300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004304:	f383 8811 	msr	BASEPRI, r3
 8004308:	f3bf 8f6f 	isb	sy
 800430c:	f3bf 8f4f 	dsb	sy
 8004310:	61bb      	str	r3, [r7, #24]
}
 8004312:	bf00      	nop
 8004314:	e7fe      	b.n	8004314 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004316:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800431a:	2b00      	cmp	r3, #0
 800431c:	d01e      	beq.n	800435c <xTaskCreateStatic+0xac>
 800431e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004320:	2b00      	cmp	r3, #0
 8004322:	d01b      	beq.n	800435c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004326:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800432c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800432e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004330:	2202      	movs	r2, #2
 8004332:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004336:	2300      	movs	r3, #0
 8004338:	9303      	str	r3, [sp, #12]
 800433a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433c:	9302      	str	r3, [sp, #8]
 800433e:	f107 0314 	add.w	r3, r7, #20
 8004342:	9301      	str	r3, [sp, #4]
 8004344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004346:	9300      	str	r3, [sp, #0]
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	68b9      	ldr	r1, [r7, #8]
 800434e:	68f8      	ldr	r0, [r7, #12]
 8004350:	f000 f850 	bl	80043f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004354:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004356:	f000 f8dd 	bl	8004514 <prvAddNewTaskToReadyList>
 800435a:	e001      	b.n	8004360 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800435c:	2300      	movs	r3, #0
 800435e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004360:	697b      	ldr	r3, [r7, #20]
	}
 8004362:	4618      	mov	r0, r3
 8004364:	3728      	adds	r7, #40	; 0x28
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}

0800436a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800436a:	b580      	push	{r7, lr}
 800436c:	b08c      	sub	sp, #48	; 0x30
 800436e:	af04      	add	r7, sp, #16
 8004370:	60f8      	str	r0, [r7, #12]
 8004372:	60b9      	str	r1, [r7, #8]
 8004374:	603b      	str	r3, [r7, #0]
 8004376:	4613      	mov	r3, r2
 8004378:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800437a:	88fb      	ldrh	r3, [r7, #6]
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	4618      	mov	r0, r3
 8004380:	f7fe fdba 	bl	8002ef8 <pvPortMalloc>
 8004384:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d00e      	beq.n	80043aa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800438c:	205c      	movs	r0, #92	; 0x5c
 800438e:	f7fe fdb3 	bl	8002ef8 <pvPortMalloc>
 8004392:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004394:	69fb      	ldr	r3, [r7, #28]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d003      	beq.n	80043a2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	697a      	ldr	r2, [r7, #20]
 800439e:	631a      	str	r2, [r3, #48]	; 0x30
 80043a0:	e005      	b.n	80043ae <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80043a2:	6978      	ldr	r0, [r7, #20]
 80043a4:	f7fe fe74 	bl	8003090 <vPortFree>
 80043a8:	e001      	b.n	80043ae <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80043aa:	2300      	movs	r3, #0
 80043ac:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d017      	beq.n	80043e4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80043b4:	69fb      	ldr	r3, [r7, #28]
 80043b6:	2200      	movs	r2, #0
 80043b8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80043bc:	88fa      	ldrh	r2, [r7, #6]
 80043be:	2300      	movs	r3, #0
 80043c0:	9303      	str	r3, [sp, #12]
 80043c2:	69fb      	ldr	r3, [r7, #28]
 80043c4:	9302      	str	r3, [sp, #8]
 80043c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043c8:	9301      	str	r3, [sp, #4]
 80043ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043cc:	9300      	str	r3, [sp, #0]
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	68b9      	ldr	r1, [r7, #8]
 80043d2:	68f8      	ldr	r0, [r7, #12]
 80043d4:	f000 f80e 	bl	80043f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80043d8:	69f8      	ldr	r0, [r7, #28]
 80043da:	f000 f89b 	bl	8004514 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80043de:	2301      	movs	r3, #1
 80043e0:	61bb      	str	r3, [r7, #24]
 80043e2:	e002      	b.n	80043ea <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80043e4:	f04f 33ff 	mov.w	r3, #4294967295
 80043e8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80043ea:	69bb      	ldr	r3, [r7, #24]
	}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3720      	adds	r7, #32
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}

080043f4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b088      	sub	sp, #32
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	60f8      	str	r0, [r7, #12]
 80043fc:	60b9      	str	r1, [r7, #8]
 80043fe:	607a      	str	r2, [r7, #4]
 8004400:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004404:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	009b      	lsls	r3, r3, #2
 800440a:	461a      	mov	r2, r3
 800440c:	21a5      	movs	r1, #165	; 0xa5
 800440e:	f001 fbff 	bl	8005c10 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004414:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800441c:	3b01      	subs	r3, #1
 800441e:	009b      	lsls	r3, r3, #2
 8004420:	4413      	add	r3, r2
 8004422:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004424:	69bb      	ldr	r3, [r7, #24]
 8004426:	f023 0307 	bic.w	r3, r3, #7
 800442a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800442c:	69bb      	ldr	r3, [r7, #24]
 800442e:	f003 0307 	and.w	r3, r3, #7
 8004432:	2b00      	cmp	r3, #0
 8004434:	d00a      	beq.n	800444c <prvInitialiseNewTask+0x58>
	__asm volatile
 8004436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800443a:	f383 8811 	msr	BASEPRI, r3
 800443e:	f3bf 8f6f 	isb	sy
 8004442:	f3bf 8f4f 	dsb	sy
 8004446:	617b      	str	r3, [r7, #20]
}
 8004448:	bf00      	nop
 800444a:	e7fe      	b.n	800444a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d01f      	beq.n	8004492 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004452:	2300      	movs	r3, #0
 8004454:	61fb      	str	r3, [r7, #28]
 8004456:	e012      	b.n	800447e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004458:	68ba      	ldr	r2, [r7, #8]
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	4413      	add	r3, r2
 800445e:	7819      	ldrb	r1, [r3, #0]
 8004460:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004462:	69fb      	ldr	r3, [r7, #28]
 8004464:	4413      	add	r3, r2
 8004466:	3334      	adds	r3, #52	; 0x34
 8004468:	460a      	mov	r2, r1
 800446a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800446c:	68ba      	ldr	r2, [r7, #8]
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	4413      	add	r3, r2
 8004472:	781b      	ldrb	r3, [r3, #0]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d006      	beq.n	8004486 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004478:	69fb      	ldr	r3, [r7, #28]
 800447a:	3301      	adds	r3, #1
 800447c:	61fb      	str	r3, [r7, #28]
 800447e:	69fb      	ldr	r3, [r7, #28]
 8004480:	2b0f      	cmp	r3, #15
 8004482:	d9e9      	bls.n	8004458 <prvInitialiseNewTask+0x64>
 8004484:	e000      	b.n	8004488 <prvInitialiseNewTask+0x94>
			{
				break;
 8004486:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800448a:	2200      	movs	r2, #0
 800448c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004490:	e003      	b.n	800449a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004494:	2200      	movs	r2, #0
 8004496:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800449a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800449c:	2b37      	cmp	r3, #55	; 0x37
 800449e:	d901      	bls.n	80044a4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80044a0:	2337      	movs	r3, #55	; 0x37
 80044a2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80044a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044a8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80044aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044ae:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80044b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b2:	2200      	movs	r2, #0
 80044b4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80044b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b8:	3304      	adds	r3, #4
 80044ba:	4618      	mov	r0, r3
 80044bc:	f7fe ff26 	bl	800330c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80044c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c2:	3318      	adds	r3, #24
 80044c4:	4618      	mov	r0, r3
 80044c6:	f7fe ff21 	bl	800330c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80044ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044ce:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044d2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80044d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80044da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044de:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80044e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e2:	2200      	movs	r2, #0
 80044e4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80044e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e8:	2200      	movs	r2, #0
 80044ea:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80044ee:	683a      	ldr	r2, [r7, #0]
 80044f0:	68f9      	ldr	r1, [r7, #12]
 80044f2:	69b8      	ldr	r0, [r7, #24]
 80044f4:	f7fe ff9e 	bl	8003434 <pxPortInitialiseStack>
 80044f8:	4602      	mov	r2, r0
 80044fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044fc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80044fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004500:	2b00      	cmp	r3, #0
 8004502:	d002      	beq.n	800450a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004506:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004508:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800450a:	bf00      	nop
 800450c:	3720      	adds	r7, #32
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
	...

08004514 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b082      	sub	sp, #8
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800451c:	f7ff f8ba 	bl	8003694 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004520:	4b2d      	ldr	r3, [pc, #180]	; (80045d8 <prvAddNewTaskToReadyList+0xc4>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	3301      	adds	r3, #1
 8004526:	4a2c      	ldr	r2, [pc, #176]	; (80045d8 <prvAddNewTaskToReadyList+0xc4>)
 8004528:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800452a:	4b2c      	ldr	r3, [pc, #176]	; (80045dc <prvAddNewTaskToReadyList+0xc8>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d109      	bne.n	8004546 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004532:	4a2a      	ldr	r2, [pc, #168]	; (80045dc <prvAddNewTaskToReadyList+0xc8>)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004538:	4b27      	ldr	r3, [pc, #156]	; (80045d8 <prvAddNewTaskToReadyList+0xc4>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	2b01      	cmp	r3, #1
 800453e:	d110      	bne.n	8004562 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004540:	f000 fc16 	bl	8004d70 <prvInitialiseTaskLists>
 8004544:	e00d      	b.n	8004562 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004546:	4b26      	ldr	r3, [pc, #152]	; (80045e0 <prvAddNewTaskToReadyList+0xcc>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d109      	bne.n	8004562 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800454e:	4b23      	ldr	r3, [pc, #140]	; (80045dc <prvAddNewTaskToReadyList+0xc8>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004558:	429a      	cmp	r2, r3
 800455a:	d802      	bhi.n	8004562 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800455c:	4a1f      	ldr	r2, [pc, #124]	; (80045dc <prvAddNewTaskToReadyList+0xc8>)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004562:	4b20      	ldr	r3, [pc, #128]	; (80045e4 <prvAddNewTaskToReadyList+0xd0>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	3301      	adds	r3, #1
 8004568:	4a1e      	ldr	r2, [pc, #120]	; (80045e4 <prvAddNewTaskToReadyList+0xd0>)
 800456a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800456c:	4b1d      	ldr	r3, [pc, #116]	; (80045e4 <prvAddNewTaskToReadyList+0xd0>)
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004578:	4b1b      	ldr	r3, [pc, #108]	; (80045e8 <prvAddNewTaskToReadyList+0xd4>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	429a      	cmp	r2, r3
 800457e:	d903      	bls.n	8004588 <prvAddNewTaskToReadyList+0x74>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004584:	4a18      	ldr	r2, [pc, #96]	; (80045e8 <prvAddNewTaskToReadyList+0xd4>)
 8004586:	6013      	str	r3, [r2, #0]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800458c:	4613      	mov	r3, r2
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	4413      	add	r3, r2
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	4a15      	ldr	r2, [pc, #84]	; (80045ec <prvAddNewTaskToReadyList+0xd8>)
 8004596:	441a      	add	r2, r3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	3304      	adds	r3, #4
 800459c:	4619      	mov	r1, r3
 800459e:	4610      	mov	r0, r2
 80045a0:	f7fe fec1 	bl	8003326 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80045a4:	f7ff f8a6 	bl	80036f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80045a8:	4b0d      	ldr	r3, [pc, #52]	; (80045e0 <prvAddNewTaskToReadyList+0xcc>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d00e      	beq.n	80045ce <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80045b0:	4b0a      	ldr	r3, [pc, #40]	; (80045dc <prvAddNewTaskToReadyList+0xc8>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d207      	bcs.n	80045ce <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80045be:	4b0c      	ldr	r3, [pc, #48]	; (80045f0 <prvAddNewTaskToReadyList+0xdc>)
 80045c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045c4:	601a      	str	r2, [r3, #0]
 80045c6:	f3bf 8f4f 	dsb	sy
 80045ca:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80045ce:	bf00      	nop
 80045d0:	3708      	adds	r7, #8
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	bf00      	nop
 80045d8:	200047e4 	.word	0x200047e4
 80045dc:	20004310 	.word	0x20004310
 80045e0:	200047f0 	.word	0x200047f0
 80045e4:	20004800 	.word	0x20004800
 80045e8:	200047ec 	.word	0x200047ec
 80045ec:	20004314 	.word	0x20004314
 80045f0:	e000ed04 	.word	0xe000ed04

080045f4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b084      	sub	sp, #16
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80045fc:	2300      	movs	r3, #0
 80045fe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d017      	beq.n	8004636 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004606:	4b13      	ldr	r3, [pc, #76]	; (8004654 <vTaskDelay+0x60>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d00a      	beq.n	8004624 <vTaskDelay+0x30>
	__asm volatile
 800460e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004612:	f383 8811 	msr	BASEPRI, r3
 8004616:	f3bf 8f6f 	isb	sy
 800461a:	f3bf 8f4f 	dsb	sy
 800461e:	60bb      	str	r3, [r7, #8]
}
 8004620:	bf00      	nop
 8004622:	e7fe      	b.n	8004622 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004624:	f000 f880 	bl	8004728 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004628:	2100      	movs	r1, #0
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f000 fcea 	bl	8005004 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004630:	f000 f888 	bl	8004744 <xTaskResumeAll>
 8004634:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d107      	bne.n	800464c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800463c:	4b06      	ldr	r3, [pc, #24]	; (8004658 <vTaskDelay+0x64>)
 800463e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004642:	601a      	str	r2, [r3, #0]
 8004644:	f3bf 8f4f 	dsb	sy
 8004648:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800464c:	bf00      	nop
 800464e:	3710      	adds	r7, #16
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}
 8004654:	2000480c 	.word	0x2000480c
 8004658:	e000ed04 	.word	0xe000ed04

0800465c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b08a      	sub	sp, #40	; 0x28
 8004660:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004662:	2300      	movs	r3, #0
 8004664:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004666:	2300      	movs	r3, #0
 8004668:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800466a:	463a      	mov	r2, r7
 800466c:	1d39      	adds	r1, r7, #4
 800466e:	f107 0308 	add.w	r3, r7, #8
 8004672:	4618      	mov	r0, r3
 8004674:	f7fe fc0c 	bl	8002e90 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004678:	6839      	ldr	r1, [r7, #0]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	68ba      	ldr	r2, [r7, #8]
 800467e:	9202      	str	r2, [sp, #8]
 8004680:	9301      	str	r3, [sp, #4]
 8004682:	2300      	movs	r3, #0
 8004684:	9300      	str	r3, [sp, #0]
 8004686:	2300      	movs	r3, #0
 8004688:	460a      	mov	r2, r1
 800468a:	4921      	ldr	r1, [pc, #132]	; (8004710 <vTaskStartScheduler+0xb4>)
 800468c:	4821      	ldr	r0, [pc, #132]	; (8004714 <vTaskStartScheduler+0xb8>)
 800468e:	f7ff fe0f 	bl	80042b0 <xTaskCreateStatic>
 8004692:	4603      	mov	r3, r0
 8004694:	4a20      	ldr	r2, [pc, #128]	; (8004718 <vTaskStartScheduler+0xbc>)
 8004696:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004698:	4b1f      	ldr	r3, [pc, #124]	; (8004718 <vTaskStartScheduler+0xbc>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d002      	beq.n	80046a6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80046a0:	2301      	movs	r3, #1
 80046a2:	617b      	str	r3, [r7, #20]
 80046a4:	e001      	b.n	80046aa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80046a6:	2300      	movs	r3, #0
 80046a8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d102      	bne.n	80046b6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80046b0:	f000 fcfc 	bl	80050ac <xTimerCreateTimerTask>
 80046b4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d116      	bne.n	80046ea <vTaskStartScheduler+0x8e>
	__asm volatile
 80046bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c0:	f383 8811 	msr	BASEPRI, r3
 80046c4:	f3bf 8f6f 	isb	sy
 80046c8:	f3bf 8f4f 	dsb	sy
 80046cc:	613b      	str	r3, [r7, #16]
}
 80046ce:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80046d0:	4b12      	ldr	r3, [pc, #72]	; (800471c <vTaskStartScheduler+0xc0>)
 80046d2:	f04f 32ff 	mov.w	r2, #4294967295
 80046d6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80046d8:	4b11      	ldr	r3, [pc, #68]	; (8004720 <vTaskStartScheduler+0xc4>)
 80046da:	2201      	movs	r2, #1
 80046dc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80046de:	4b11      	ldr	r3, [pc, #68]	; (8004724 <vTaskStartScheduler+0xc8>)
 80046e0:	2200      	movs	r2, #0
 80046e2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80046e4:	f7fe ff34 	bl	8003550 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80046e8:	e00e      	b.n	8004708 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046f0:	d10a      	bne.n	8004708 <vTaskStartScheduler+0xac>
	__asm volatile
 80046f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046f6:	f383 8811 	msr	BASEPRI, r3
 80046fa:	f3bf 8f6f 	isb	sy
 80046fe:	f3bf 8f4f 	dsb	sy
 8004702:	60fb      	str	r3, [r7, #12]
}
 8004704:	bf00      	nop
 8004706:	e7fe      	b.n	8004706 <vTaskStartScheduler+0xaa>
}
 8004708:	bf00      	nop
 800470a:	3718      	adds	r7, #24
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}
 8004710:	08005c7c 	.word	0x08005c7c
 8004714:	08004d41 	.word	0x08004d41
 8004718:	20004808 	.word	0x20004808
 800471c:	20004804 	.word	0x20004804
 8004720:	200047f0 	.word	0x200047f0
 8004724:	200047e8 	.word	0x200047e8

08004728 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004728:	b480      	push	{r7}
 800472a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800472c:	4b04      	ldr	r3, [pc, #16]	; (8004740 <vTaskSuspendAll+0x18>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	3301      	adds	r3, #1
 8004732:	4a03      	ldr	r2, [pc, #12]	; (8004740 <vTaskSuspendAll+0x18>)
 8004734:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004736:	bf00      	nop
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr
 8004740:	2000480c 	.word	0x2000480c

08004744 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b084      	sub	sp, #16
 8004748:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800474a:	2300      	movs	r3, #0
 800474c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800474e:	2300      	movs	r3, #0
 8004750:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004752:	4b42      	ldr	r3, [pc, #264]	; (800485c <xTaskResumeAll+0x118>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d10a      	bne.n	8004770 <xTaskResumeAll+0x2c>
	__asm volatile
 800475a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800475e:	f383 8811 	msr	BASEPRI, r3
 8004762:	f3bf 8f6f 	isb	sy
 8004766:	f3bf 8f4f 	dsb	sy
 800476a:	603b      	str	r3, [r7, #0]
}
 800476c:	bf00      	nop
 800476e:	e7fe      	b.n	800476e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004770:	f7fe ff90 	bl	8003694 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004774:	4b39      	ldr	r3, [pc, #228]	; (800485c <xTaskResumeAll+0x118>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	3b01      	subs	r3, #1
 800477a:	4a38      	ldr	r2, [pc, #224]	; (800485c <xTaskResumeAll+0x118>)
 800477c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800477e:	4b37      	ldr	r3, [pc, #220]	; (800485c <xTaskResumeAll+0x118>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d162      	bne.n	800484c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004786:	4b36      	ldr	r3, [pc, #216]	; (8004860 <xTaskResumeAll+0x11c>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d05e      	beq.n	800484c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800478e:	e02f      	b.n	80047f0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004790:	4b34      	ldr	r3, [pc, #208]	; (8004864 <xTaskResumeAll+0x120>)
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	3318      	adds	r3, #24
 800479c:	4618      	mov	r0, r3
 800479e:	f7fe fe1f 	bl	80033e0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	3304      	adds	r3, #4
 80047a6:	4618      	mov	r0, r3
 80047a8:	f7fe fe1a 	bl	80033e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047b0:	4b2d      	ldr	r3, [pc, #180]	; (8004868 <xTaskResumeAll+0x124>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d903      	bls.n	80047c0 <xTaskResumeAll+0x7c>
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047bc:	4a2a      	ldr	r2, [pc, #168]	; (8004868 <xTaskResumeAll+0x124>)
 80047be:	6013      	str	r3, [r2, #0]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047c4:	4613      	mov	r3, r2
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	4413      	add	r3, r2
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	4a27      	ldr	r2, [pc, #156]	; (800486c <xTaskResumeAll+0x128>)
 80047ce:	441a      	add	r2, r3
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	3304      	adds	r3, #4
 80047d4:	4619      	mov	r1, r3
 80047d6:	4610      	mov	r0, r2
 80047d8:	f7fe fda5 	bl	8003326 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047e0:	4b23      	ldr	r3, [pc, #140]	; (8004870 <xTaskResumeAll+0x12c>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d302      	bcc.n	80047f0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80047ea:	4b22      	ldr	r3, [pc, #136]	; (8004874 <xTaskResumeAll+0x130>)
 80047ec:	2201      	movs	r2, #1
 80047ee:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80047f0:	4b1c      	ldr	r3, [pc, #112]	; (8004864 <xTaskResumeAll+0x120>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d1cb      	bne.n	8004790 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d001      	beq.n	8004802 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80047fe:	f000 fb55 	bl	8004eac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004802:	4b1d      	ldr	r3, [pc, #116]	; (8004878 <xTaskResumeAll+0x134>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d010      	beq.n	8004830 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800480e:	f000 f847 	bl	80048a0 <xTaskIncrementTick>
 8004812:	4603      	mov	r3, r0
 8004814:	2b00      	cmp	r3, #0
 8004816:	d002      	beq.n	800481e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004818:	4b16      	ldr	r3, [pc, #88]	; (8004874 <xTaskResumeAll+0x130>)
 800481a:	2201      	movs	r2, #1
 800481c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	3b01      	subs	r3, #1
 8004822:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d1f1      	bne.n	800480e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800482a:	4b13      	ldr	r3, [pc, #76]	; (8004878 <xTaskResumeAll+0x134>)
 800482c:	2200      	movs	r2, #0
 800482e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004830:	4b10      	ldr	r3, [pc, #64]	; (8004874 <xTaskResumeAll+0x130>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d009      	beq.n	800484c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004838:	2301      	movs	r3, #1
 800483a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800483c:	4b0f      	ldr	r3, [pc, #60]	; (800487c <xTaskResumeAll+0x138>)
 800483e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004842:	601a      	str	r2, [r3, #0]
 8004844:	f3bf 8f4f 	dsb	sy
 8004848:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800484c:	f7fe ff52 	bl	80036f4 <vPortExitCritical>

	return xAlreadyYielded;
 8004850:	68bb      	ldr	r3, [r7, #8]
}
 8004852:	4618      	mov	r0, r3
 8004854:	3710      	adds	r7, #16
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
 800485a:	bf00      	nop
 800485c:	2000480c 	.word	0x2000480c
 8004860:	200047e4 	.word	0x200047e4
 8004864:	200047a4 	.word	0x200047a4
 8004868:	200047ec 	.word	0x200047ec
 800486c:	20004314 	.word	0x20004314
 8004870:	20004310 	.word	0x20004310
 8004874:	200047f8 	.word	0x200047f8
 8004878:	200047f4 	.word	0x200047f4
 800487c:	e000ed04 	.word	0xe000ed04

08004880 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004886:	4b05      	ldr	r3, [pc, #20]	; (800489c <xTaskGetTickCount+0x1c>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800488c:	687b      	ldr	r3, [r7, #4]
}
 800488e:	4618      	mov	r0, r3
 8004890:	370c      	adds	r7, #12
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr
 800489a:	bf00      	nop
 800489c:	200047e8 	.word	0x200047e8

080048a0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b086      	sub	sp, #24
 80048a4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80048a6:	2300      	movs	r3, #0
 80048a8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048aa:	4b4f      	ldr	r3, [pc, #316]	; (80049e8 <xTaskIncrementTick+0x148>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	f040 808f 	bne.w	80049d2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80048b4:	4b4d      	ldr	r3, [pc, #308]	; (80049ec <xTaskIncrementTick+0x14c>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	3301      	adds	r3, #1
 80048ba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80048bc:	4a4b      	ldr	r2, [pc, #300]	; (80049ec <xTaskIncrementTick+0x14c>)
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d120      	bne.n	800490a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80048c8:	4b49      	ldr	r3, [pc, #292]	; (80049f0 <xTaskIncrementTick+0x150>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d00a      	beq.n	80048e8 <xTaskIncrementTick+0x48>
	__asm volatile
 80048d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d6:	f383 8811 	msr	BASEPRI, r3
 80048da:	f3bf 8f6f 	isb	sy
 80048de:	f3bf 8f4f 	dsb	sy
 80048e2:	603b      	str	r3, [r7, #0]
}
 80048e4:	bf00      	nop
 80048e6:	e7fe      	b.n	80048e6 <xTaskIncrementTick+0x46>
 80048e8:	4b41      	ldr	r3, [pc, #260]	; (80049f0 <xTaskIncrementTick+0x150>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	60fb      	str	r3, [r7, #12]
 80048ee:	4b41      	ldr	r3, [pc, #260]	; (80049f4 <xTaskIncrementTick+0x154>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a3f      	ldr	r2, [pc, #252]	; (80049f0 <xTaskIncrementTick+0x150>)
 80048f4:	6013      	str	r3, [r2, #0]
 80048f6:	4a3f      	ldr	r2, [pc, #252]	; (80049f4 <xTaskIncrementTick+0x154>)
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6013      	str	r3, [r2, #0]
 80048fc:	4b3e      	ldr	r3, [pc, #248]	; (80049f8 <xTaskIncrementTick+0x158>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	3301      	adds	r3, #1
 8004902:	4a3d      	ldr	r2, [pc, #244]	; (80049f8 <xTaskIncrementTick+0x158>)
 8004904:	6013      	str	r3, [r2, #0]
 8004906:	f000 fad1 	bl	8004eac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800490a:	4b3c      	ldr	r3, [pc, #240]	; (80049fc <xTaskIncrementTick+0x15c>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	693a      	ldr	r2, [r7, #16]
 8004910:	429a      	cmp	r2, r3
 8004912:	d349      	bcc.n	80049a8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004914:	4b36      	ldr	r3, [pc, #216]	; (80049f0 <xTaskIncrementTick+0x150>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d104      	bne.n	8004928 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800491e:	4b37      	ldr	r3, [pc, #220]	; (80049fc <xTaskIncrementTick+0x15c>)
 8004920:	f04f 32ff 	mov.w	r2, #4294967295
 8004924:	601a      	str	r2, [r3, #0]
					break;
 8004926:	e03f      	b.n	80049a8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004928:	4b31      	ldr	r3, [pc, #196]	; (80049f0 <xTaskIncrementTick+0x150>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004938:	693a      	ldr	r2, [r7, #16]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	429a      	cmp	r2, r3
 800493e:	d203      	bcs.n	8004948 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004940:	4a2e      	ldr	r2, [pc, #184]	; (80049fc <xTaskIncrementTick+0x15c>)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004946:	e02f      	b.n	80049a8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	3304      	adds	r3, #4
 800494c:	4618      	mov	r0, r3
 800494e:	f7fe fd47 	bl	80033e0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004956:	2b00      	cmp	r3, #0
 8004958:	d004      	beq.n	8004964 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	3318      	adds	r3, #24
 800495e:	4618      	mov	r0, r3
 8004960:	f7fe fd3e 	bl	80033e0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004968:	4b25      	ldr	r3, [pc, #148]	; (8004a00 <xTaskIncrementTick+0x160>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	429a      	cmp	r2, r3
 800496e:	d903      	bls.n	8004978 <xTaskIncrementTick+0xd8>
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004974:	4a22      	ldr	r2, [pc, #136]	; (8004a00 <xTaskIncrementTick+0x160>)
 8004976:	6013      	str	r3, [r2, #0]
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800497c:	4613      	mov	r3, r2
 800497e:	009b      	lsls	r3, r3, #2
 8004980:	4413      	add	r3, r2
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	4a1f      	ldr	r2, [pc, #124]	; (8004a04 <xTaskIncrementTick+0x164>)
 8004986:	441a      	add	r2, r3
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	3304      	adds	r3, #4
 800498c:	4619      	mov	r1, r3
 800498e:	4610      	mov	r0, r2
 8004990:	f7fe fcc9 	bl	8003326 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004998:	4b1b      	ldr	r3, [pc, #108]	; (8004a08 <xTaskIncrementTick+0x168>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800499e:	429a      	cmp	r2, r3
 80049a0:	d3b8      	bcc.n	8004914 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80049a2:	2301      	movs	r3, #1
 80049a4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80049a6:	e7b5      	b.n	8004914 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80049a8:	4b17      	ldr	r3, [pc, #92]	; (8004a08 <xTaskIncrementTick+0x168>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049ae:	4915      	ldr	r1, [pc, #84]	; (8004a04 <xTaskIncrementTick+0x164>)
 80049b0:	4613      	mov	r3, r2
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	4413      	add	r3, r2
 80049b6:	009b      	lsls	r3, r3, #2
 80049b8:	440b      	add	r3, r1
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d901      	bls.n	80049c4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80049c0:	2301      	movs	r3, #1
 80049c2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80049c4:	4b11      	ldr	r3, [pc, #68]	; (8004a0c <xTaskIncrementTick+0x16c>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d007      	beq.n	80049dc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80049cc:	2301      	movs	r3, #1
 80049ce:	617b      	str	r3, [r7, #20]
 80049d0:	e004      	b.n	80049dc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80049d2:	4b0f      	ldr	r3, [pc, #60]	; (8004a10 <xTaskIncrementTick+0x170>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	3301      	adds	r3, #1
 80049d8:	4a0d      	ldr	r2, [pc, #52]	; (8004a10 <xTaskIncrementTick+0x170>)
 80049da:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80049dc:	697b      	ldr	r3, [r7, #20]
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3718      	adds	r7, #24
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	bf00      	nop
 80049e8:	2000480c 	.word	0x2000480c
 80049ec:	200047e8 	.word	0x200047e8
 80049f0:	2000479c 	.word	0x2000479c
 80049f4:	200047a0 	.word	0x200047a0
 80049f8:	200047fc 	.word	0x200047fc
 80049fc:	20004804 	.word	0x20004804
 8004a00:	200047ec 	.word	0x200047ec
 8004a04:	20004314 	.word	0x20004314
 8004a08:	20004310 	.word	0x20004310
 8004a0c:	200047f8 	.word	0x200047f8
 8004a10:	200047f4 	.word	0x200047f4

08004a14 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004a14:	b480      	push	{r7}
 8004a16:	b085      	sub	sp, #20
 8004a18:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004a1a:	4b28      	ldr	r3, [pc, #160]	; (8004abc <vTaskSwitchContext+0xa8>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d003      	beq.n	8004a2a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004a22:	4b27      	ldr	r3, [pc, #156]	; (8004ac0 <vTaskSwitchContext+0xac>)
 8004a24:	2201      	movs	r2, #1
 8004a26:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004a28:	e041      	b.n	8004aae <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8004a2a:	4b25      	ldr	r3, [pc, #148]	; (8004ac0 <vTaskSwitchContext+0xac>)
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a30:	4b24      	ldr	r3, [pc, #144]	; (8004ac4 <vTaskSwitchContext+0xb0>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	60fb      	str	r3, [r7, #12]
 8004a36:	e010      	b.n	8004a5a <vTaskSwitchContext+0x46>
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d10a      	bne.n	8004a54 <vTaskSwitchContext+0x40>
	__asm volatile
 8004a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a42:	f383 8811 	msr	BASEPRI, r3
 8004a46:	f3bf 8f6f 	isb	sy
 8004a4a:	f3bf 8f4f 	dsb	sy
 8004a4e:	607b      	str	r3, [r7, #4]
}
 8004a50:	bf00      	nop
 8004a52:	e7fe      	b.n	8004a52 <vTaskSwitchContext+0x3e>
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	3b01      	subs	r3, #1
 8004a58:	60fb      	str	r3, [r7, #12]
 8004a5a:	491b      	ldr	r1, [pc, #108]	; (8004ac8 <vTaskSwitchContext+0xb4>)
 8004a5c:	68fa      	ldr	r2, [r7, #12]
 8004a5e:	4613      	mov	r3, r2
 8004a60:	009b      	lsls	r3, r3, #2
 8004a62:	4413      	add	r3, r2
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	440b      	add	r3, r1
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d0e4      	beq.n	8004a38 <vTaskSwitchContext+0x24>
 8004a6e:	68fa      	ldr	r2, [r7, #12]
 8004a70:	4613      	mov	r3, r2
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	4413      	add	r3, r2
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	4a13      	ldr	r2, [pc, #76]	; (8004ac8 <vTaskSwitchContext+0xb4>)
 8004a7a:	4413      	add	r3, r2
 8004a7c:	60bb      	str	r3, [r7, #8]
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	685a      	ldr	r2, [r3, #4]
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	605a      	str	r2, [r3, #4]
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	685a      	ldr	r2, [r3, #4]
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	3308      	adds	r3, #8
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d104      	bne.n	8004a9e <vTaskSwitchContext+0x8a>
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	685a      	ldr	r2, [r3, #4]
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	605a      	str	r2, [r3, #4]
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	4a09      	ldr	r2, [pc, #36]	; (8004acc <vTaskSwitchContext+0xb8>)
 8004aa6:	6013      	str	r3, [r2, #0]
 8004aa8:	4a06      	ldr	r2, [pc, #24]	; (8004ac4 <vTaskSwitchContext+0xb0>)
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	6013      	str	r3, [r2, #0]
}
 8004aae:	bf00      	nop
 8004ab0:	3714      	adds	r7, #20
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr
 8004aba:	bf00      	nop
 8004abc:	2000480c 	.word	0x2000480c
 8004ac0:	200047f8 	.word	0x200047f8
 8004ac4:	200047ec 	.word	0x200047ec
 8004ac8:	20004314 	.word	0x20004314
 8004acc:	20004310 	.word	0x20004310

08004ad0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b084      	sub	sp, #16
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d10a      	bne.n	8004af6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae4:	f383 8811 	msr	BASEPRI, r3
 8004ae8:	f3bf 8f6f 	isb	sy
 8004aec:	f3bf 8f4f 	dsb	sy
 8004af0:	60fb      	str	r3, [r7, #12]
}
 8004af2:	bf00      	nop
 8004af4:	e7fe      	b.n	8004af4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004af6:	4b07      	ldr	r3, [pc, #28]	; (8004b14 <vTaskPlaceOnEventList+0x44>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	3318      	adds	r3, #24
 8004afc:	4619      	mov	r1, r3
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f7fe fc35 	bl	800336e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004b04:	2101      	movs	r1, #1
 8004b06:	6838      	ldr	r0, [r7, #0]
 8004b08:	f000 fa7c 	bl	8005004 <prvAddCurrentTaskToDelayedList>
}
 8004b0c:	bf00      	nop
 8004b0e:	3710      	adds	r7, #16
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}
 8004b14:	20004310 	.word	0x20004310

08004b18 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b086      	sub	sp, #24
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	60b9      	str	r1, [r7, #8]
 8004b22:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d10a      	bne.n	8004b40 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b2e:	f383 8811 	msr	BASEPRI, r3
 8004b32:	f3bf 8f6f 	isb	sy
 8004b36:	f3bf 8f4f 	dsb	sy
 8004b3a:	617b      	str	r3, [r7, #20]
}
 8004b3c:	bf00      	nop
 8004b3e:	e7fe      	b.n	8004b3e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004b40:	4b0a      	ldr	r3, [pc, #40]	; (8004b6c <vTaskPlaceOnEventListRestricted+0x54>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	3318      	adds	r3, #24
 8004b46:	4619      	mov	r1, r3
 8004b48:	68f8      	ldr	r0, [r7, #12]
 8004b4a:	f7fe fbec 	bl	8003326 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d002      	beq.n	8004b5a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004b54:	f04f 33ff 	mov.w	r3, #4294967295
 8004b58:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004b5a:	6879      	ldr	r1, [r7, #4]
 8004b5c:	68b8      	ldr	r0, [r7, #8]
 8004b5e:	f000 fa51 	bl	8005004 <prvAddCurrentTaskToDelayedList>
	}
 8004b62:	bf00      	nop
 8004b64:	3718      	adds	r7, #24
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}
 8004b6a:	bf00      	nop
 8004b6c:	20004310 	.word	0x20004310

08004b70 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b086      	sub	sp, #24
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	68db      	ldr	r3, [r3, #12]
 8004b7e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d10a      	bne.n	8004b9c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b8a:	f383 8811 	msr	BASEPRI, r3
 8004b8e:	f3bf 8f6f 	isb	sy
 8004b92:	f3bf 8f4f 	dsb	sy
 8004b96:	60fb      	str	r3, [r7, #12]
}
 8004b98:	bf00      	nop
 8004b9a:	e7fe      	b.n	8004b9a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	3318      	adds	r3, #24
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f7fe fc1d 	bl	80033e0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ba6:	4b1e      	ldr	r3, [pc, #120]	; (8004c20 <xTaskRemoveFromEventList+0xb0>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d11d      	bne.n	8004bea <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	3304      	adds	r3, #4
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f7fe fc14 	bl	80033e0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bbc:	4b19      	ldr	r3, [pc, #100]	; (8004c24 <xTaskRemoveFromEventList+0xb4>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d903      	bls.n	8004bcc <xTaskRemoveFromEventList+0x5c>
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc8:	4a16      	ldr	r2, [pc, #88]	; (8004c24 <xTaskRemoveFromEventList+0xb4>)
 8004bca:	6013      	str	r3, [r2, #0]
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bd0:	4613      	mov	r3, r2
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	4413      	add	r3, r2
 8004bd6:	009b      	lsls	r3, r3, #2
 8004bd8:	4a13      	ldr	r2, [pc, #76]	; (8004c28 <xTaskRemoveFromEventList+0xb8>)
 8004bda:	441a      	add	r2, r3
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	3304      	adds	r3, #4
 8004be0:	4619      	mov	r1, r3
 8004be2:	4610      	mov	r0, r2
 8004be4:	f7fe fb9f 	bl	8003326 <vListInsertEnd>
 8004be8:	e005      	b.n	8004bf6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	3318      	adds	r3, #24
 8004bee:	4619      	mov	r1, r3
 8004bf0:	480e      	ldr	r0, [pc, #56]	; (8004c2c <xTaskRemoveFromEventList+0xbc>)
 8004bf2:	f7fe fb98 	bl	8003326 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bfa:	4b0d      	ldr	r3, [pc, #52]	; (8004c30 <xTaskRemoveFromEventList+0xc0>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d905      	bls.n	8004c10 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004c04:	2301      	movs	r3, #1
 8004c06:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004c08:	4b0a      	ldr	r3, [pc, #40]	; (8004c34 <xTaskRemoveFromEventList+0xc4>)
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	601a      	str	r2, [r3, #0]
 8004c0e:	e001      	b.n	8004c14 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004c10:	2300      	movs	r3, #0
 8004c12:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004c14:	697b      	ldr	r3, [r7, #20]
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3718      	adds	r7, #24
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	bf00      	nop
 8004c20:	2000480c 	.word	0x2000480c
 8004c24:	200047ec 	.word	0x200047ec
 8004c28:	20004314 	.word	0x20004314
 8004c2c:	200047a4 	.word	0x200047a4
 8004c30:	20004310 	.word	0x20004310
 8004c34:	200047f8 	.word	0x200047f8

08004c38 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b083      	sub	sp, #12
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004c40:	4b06      	ldr	r3, [pc, #24]	; (8004c5c <vTaskInternalSetTimeOutState+0x24>)
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004c48:	4b05      	ldr	r3, [pc, #20]	; (8004c60 <vTaskInternalSetTimeOutState+0x28>)
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	605a      	str	r2, [r3, #4]
}
 8004c50:	bf00      	nop
 8004c52:	370c      	adds	r7, #12
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr
 8004c5c:	200047fc 	.word	0x200047fc
 8004c60:	200047e8 	.word	0x200047e8

08004c64 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b088      	sub	sp, #32
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d10a      	bne.n	8004c8a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c78:	f383 8811 	msr	BASEPRI, r3
 8004c7c:	f3bf 8f6f 	isb	sy
 8004c80:	f3bf 8f4f 	dsb	sy
 8004c84:	613b      	str	r3, [r7, #16]
}
 8004c86:	bf00      	nop
 8004c88:	e7fe      	b.n	8004c88 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d10a      	bne.n	8004ca6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c94:	f383 8811 	msr	BASEPRI, r3
 8004c98:	f3bf 8f6f 	isb	sy
 8004c9c:	f3bf 8f4f 	dsb	sy
 8004ca0:	60fb      	str	r3, [r7, #12]
}
 8004ca2:	bf00      	nop
 8004ca4:	e7fe      	b.n	8004ca4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004ca6:	f7fe fcf5 	bl	8003694 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004caa:	4b1d      	ldr	r3, [pc, #116]	; (8004d20 <xTaskCheckForTimeOut+0xbc>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	69ba      	ldr	r2, [r7, #24]
 8004cb6:	1ad3      	subs	r3, r2, r3
 8004cb8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cc2:	d102      	bne.n	8004cca <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	61fb      	str	r3, [r7, #28]
 8004cc8:	e023      	b.n	8004d12 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	4b15      	ldr	r3, [pc, #84]	; (8004d24 <xTaskCheckForTimeOut+0xc0>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d007      	beq.n	8004ce6 <xTaskCheckForTimeOut+0x82>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	69ba      	ldr	r2, [r7, #24]
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d302      	bcc.n	8004ce6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	61fb      	str	r3, [r7, #28]
 8004ce4:	e015      	b.n	8004d12 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	697a      	ldr	r2, [r7, #20]
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d20b      	bcs.n	8004d08 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	1ad2      	subs	r2, r2, r3
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f7ff ff9b 	bl	8004c38 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004d02:	2300      	movs	r3, #0
 8004d04:	61fb      	str	r3, [r7, #28]
 8004d06:	e004      	b.n	8004d12 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004d12:	f7fe fcef 	bl	80036f4 <vPortExitCritical>

	return xReturn;
 8004d16:	69fb      	ldr	r3, [r7, #28]
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	3720      	adds	r7, #32
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}
 8004d20:	200047e8 	.word	0x200047e8
 8004d24:	200047fc 	.word	0x200047fc

08004d28 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004d28:	b480      	push	{r7}
 8004d2a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004d2c:	4b03      	ldr	r3, [pc, #12]	; (8004d3c <vTaskMissedYield+0x14>)
 8004d2e:	2201      	movs	r2, #1
 8004d30:	601a      	str	r2, [r3, #0]
}
 8004d32:	bf00      	nop
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr
 8004d3c:	200047f8 	.word	0x200047f8

08004d40 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b082      	sub	sp, #8
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004d48:	f000 f852 	bl	8004df0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004d4c:	4b06      	ldr	r3, [pc, #24]	; (8004d68 <prvIdleTask+0x28>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d9f9      	bls.n	8004d48 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004d54:	4b05      	ldr	r3, [pc, #20]	; (8004d6c <prvIdleTask+0x2c>)
 8004d56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d5a:	601a      	str	r2, [r3, #0]
 8004d5c:	f3bf 8f4f 	dsb	sy
 8004d60:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004d64:	e7f0      	b.n	8004d48 <prvIdleTask+0x8>
 8004d66:	bf00      	nop
 8004d68:	20004314 	.word	0x20004314
 8004d6c:	e000ed04 	.word	0xe000ed04

08004d70 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b082      	sub	sp, #8
 8004d74:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004d76:	2300      	movs	r3, #0
 8004d78:	607b      	str	r3, [r7, #4]
 8004d7a:	e00c      	b.n	8004d96 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	4613      	mov	r3, r2
 8004d80:	009b      	lsls	r3, r3, #2
 8004d82:	4413      	add	r3, r2
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	4a12      	ldr	r2, [pc, #72]	; (8004dd0 <prvInitialiseTaskLists+0x60>)
 8004d88:	4413      	add	r3, r2
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f7fe fa9e 	bl	80032cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	3301      	adds	r3, #1
 8004d94:	607b      	str	r3, [r7, #4]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2b37      	cmp	r3, #55	; 0x37
 8004d9a:	d9ef      	bls.n	8004d7c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004d9c:	480d      	ldr	r0, [pc, #52]	; (8004dd4 <prvInitialiseTaskLists+0x64>)
 8004d9e:	f7fe fa95 	bl	80032cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004da2:	480d      	ldr	r0, [pc, #52]	; (8004dd8 <prvInitialiseTaskLists+0x68>)
 8004da4:	f7fe fa92 	bl	80032cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004da8:	480c      	ldr	r0, [pc, #48]	; (8004ddc <prvInitialiseTaskLists+0x6c>)
 8004daa:	f7fe fa8f 	bl	80032cc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004dae:	480c      	ldr	r0, [pc, #48]	; (8004de0 <prvInitialiseTaskLists+0x70>)
 8004db0:	f7fe fa8c 	bl	80032cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004db4:	480b      	ldr	r0, [pc, #44]	; (8004de4 <prvInitialiseTaskLists+0x74>)
 8004db6:	f7fe fa89 	bl	80032cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004dba:	4b0b      	ldr	r3, [pc, #44]	; (8004de8 <prvInitialiseTaskLists+0x78>)
 8004dbc:	4a05      	ldr	r2, [pc, #20]	; (8004dd4 <prvInitialiseTaskLists+0x64>)
 8004dbe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004dc0:	4b0a      	ldr	r3, [pc, #40]	; (8004dec <prvInitialiseTaskLists+0x7c>)
 8004dc2:	4a05      	ldr	r2, [pc, #20]	; (8004dd8 <prvInitialiseTaskLists+0x68>)
 8004dc4:	601a      	str	r2, [r3, #0]
}
 8004dc6:	bf00      	nop
 8004dc8:	3708      	adds	r7, #8
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}
 8004dce:	bf00      	nop
 8004dd0:	20004314 	.word	0x20004314
 8004dd4:	20004774 	.word	0x20004774
 8004dd8:	20004788 	.word	0x20004788
 8004ddc:	200047a4 	.word	0x200047a4
 8004de0:	200047b8 	.word	0x200047b8
 8004de4:	200047d0 	.word	0x200047d0
 8004de8:	2000479c 	.word	0x2000479c
 8004dec:	200047a0 	.word	0x200047a0

08004df0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b082      	sub	sp, #8
 8004df4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004df6:	e019      	b.n	8004e2c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004df8:	f7fe fc4c 	bl	8003694 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004dfc:	4b10      	ldr	r3, [pc, #64]	; (8004e40 <prvCheckTasksWaitingTermination+0x50>)
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	68db      	ldr	r3, [r3, #12]
 8004e02:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	3304      	adds	r3, #4
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f7fe fae9 	bl	80033e0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004e0e:	4b0d      	ldr	r3, [pc, #52]	; (8004e44 <prvCheckTasksWaitingTermination+0x54>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	3b01      	subs	r3, #1
 8004e14:	4a0b      	ldr	r2, [pc, #44]	; (8004e44 <prvCheckTasksWaitingTermination+0x54>)
 8004e16:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004e18:	4b0b      	ldr	r3, [pc, #44]	; (8004e48 <prvCheckTasksWaitingTermination+0x58>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	3b01      	subs	r3, #1
 8004e1e:	4a0a      	ldr	r2, [pc, #40]	; (8004e48 <prvCheckTasksWaitingTermination+0x58>)
 8004e20:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004e22:	f7fe fc67 	bl	80036f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f000 f810 	bl	8004e4c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004e2c:	4b06      	ldr	r3, [pc, #24]	; (8004e48 <prvCheckTasksWaitingTermination+0x58>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d1e1      	bne.n	8004df8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004e34:	bf00      	nop
 8004e36:	bf00      	nop
 8004e38:	3708      	adds	r7, #8
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}
 8004e3e:	bf00      	nop
 8004e40:	200047b8 	.word	0x200047b8
 8004e44:	200047e4 	.word	0x200047e4
 8004e48:	200047cc 	.word	0x200047cc

08004e4c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b084      	sub	sp, #16
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d108      	bne.n	8004e70 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e62:	4618      	mov	r0, r3
 8004e64:	f7fe f914 	bl	8003090 <vPortFree>
				vPortFree( pxTCB );
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f7fe f911 	bl	8003090 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004e6e:	e018      	b.n	8004ea2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d103      	bne.n	8004e82 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f7fe f908 	bl	8003090 <vPortFree>
	}
 8004e80:	e00f      	b.n	8004ea2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004e88:	2b02      	cmp	r3, #2
 8004e8a:	d00a      	beq.n	8004ea2 <prvDeleteTCB+0x56>
	__asm volatile
 8004e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e90:	f383 8811 	msr	BASEPRI, r3
 8004e94:	f3bf 8f6f 	isb	sy
 8004e98:	f3bf 8f4f 	dsb	sy
 8004e9c:	60fb      	str	r3, [r7, #12]
}
 8004e9e:	bf00      	nop
 8004ea0:	e7fe      	b.n	8004ea0 <prvDeleteTCB+0x54>
	}
 8004ea2:	bf00      	nop
 8004ea4:	3710      	adds	r7, #16
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}
	...

08004eac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004eac:	b480      	push	{r7}
 8004eae:	b083      	sub	sp, #12
 8004eb0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004eb2:	4b0c      	ldr	r3, [pc, #48]	; (8004ee4 <prvResetNextTaskUnblockTime+0x38>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d104      	bne.n	8004ec6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004ebc:	4b0a      	ldr	r3, [pc, #40]	; (8004ee8 <prvResetNextTaskUnblockTime+0x3c>)
 8004ebe:	f04f 32ff 	mov.w	r2, #4294967295
 8004ec2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004ec4:	e008      	b.n	8004ed8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ec6:	4b07      	ldr	r3, [pc, #28]	; (8004ee4 <prvResetNextTaskUnblockTime+0x38>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	68db      	ldr	r3, [r3, #12]
 8004ece:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	4a04      	ldr	r2, [pc, #16]	; (8004ee8 <prvResetNextTaskUnblockTime+0x3c>)
 8004ed6:	6013      	str	r3, [r2, #0]
}
 8004ed8:	bf00      	nop
 8004eda:	370c      	adds	r7, #12
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr
 8004ee4:	2000479c 	.word	0x2000479c
 8004ee8:	20004804 	.word	0x20004804

08004eec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004eec:	b480      	push	{r7}
 8004eee:	b083      	sub	sp, #12
 8004ef0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004ef2:	4b0b      	ldr	r3, [pc, #44]	; (8004f20 <xTaskGetSchedulerState+0x34>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d102      	bne.n	8004f00 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004efa:	2301      	movs	r3, #1
 8004efc:	607b      	str	r3, [r7, #4]
 8004efe:	e008      	b.n	8004f12 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f00:	4b08      	ldr	r3, [pc, #32]	; (8004f24 <xTaskGetSchedulerState+0x38>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d102      	bne.n	8004f0e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004f08:	2302      	movs	r3, #2
 8004f0a:	607b      	str	r3, [r7, #4]
 8004f0c:	e001      	b.n	8004f12 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004f12:	687b      	ldr	r3, [r7, #4]
	}
 8004f14:	4618      	mov	r0, r3
 8004f16:	370c      	adds	r7, #12
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr
 8004f20:	200047f0 	.word	0x200047f0
 8004f24:	2000480c 	.word	0x2000480c

08004f28 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b086      	sub	sp, #24
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004f34:	2300      	movs	r3, #0
 8004f36:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d056      	beq.n	8004fec <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004f3e:	4b2e      	ldr	r3, [pc, #184]	; (8004ff8 <xTaskPriorityDisinherit+0xd0>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	693a      	ldr	r2, [r7, #16]
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d00a      	beq.n	8004f5e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f4c:	f383 8811 	msr	BASEPRI, r3
 8004f50:	f3bf 8f6f 	isb	sy
 8004f54:	f3bf 8f4f 	dsb	sy
 8004f58:	60fb      	str	r3, [r7, #12]
}
 8004f5a:	bf00      	nop
 8004f5c:	e7fe      	b.n	8004f5c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d10a      	bne.n	8004f7c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f6a:	f383 8811 	msr	BASEPRI, r3
 8004f6e:	f3bf 8f6f 	isb	sy
 8004f72:	f3bf 8f4f 	dsb	sy
 8004f76:	60bb      	str	r3, [r7, #8]
}
 8004f78:	bf00      	nop
 8004f7a:	e7fe      	b.n	8004f7a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f80:	1e5a      	subs	r2, r3, #1
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	d02c      	beq.n	8004fec <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d128      	bne.n	8004fec <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	3304      	adds	r3, #4
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f7fe fa1e 	bl	80033e0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fbc:	4b0f      	ldr	r3, [pc, #60]	; (8004ffc <xTaskPriorityDisinherit+0xd4>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d903      	bls.n	8004fcc <xTaskPriorityDisinherit+0xa4>
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc8:	4a0c      	ldr	r2, [pc, #48]	; (8004ffc <xTaskPriorityDisinherit+0xd4>)
 8004fca:	6013      	str	r3, [r2, #0]
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fd0:	4613      	mov	r3, r2
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	4413      	add	r3, r2
 8004fd6:	009b      	lsls	r3, r3, #2
 8004fd8:	4a09      	ldr	r2, [pc, #36]	; (8005000 <xTaskPriorityDisinherit+0xd8>)
 8004fda:	441a      	add	r2, r3
 8004fdc:	693b      	ldr	r3, [r7, #16]
 8004fde:	3304      	adds	r3, #4
 8004fe0:	4619      	mov	r1, r3
 8004fe2:	4610      	mov	r0, r2
 8004fe4:	f7fe f99f 	bl	8003326 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004fec:	697b      	ldr	r3, [r7, #20]
	}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3718      	adds	r7, #24
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}
 8004ff6:	bf00      	nop
 8004ff8:	20004310 	.word	0x20004310
 8004ffc:	200047ec 	.word	0x200047ec
 8005000:	20004314 	.word	0x20004314

08005004 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b084      	sub	sp, #16
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800500e:	4b21      	ldr	r3, [pc, #132]	; (8005094 <prvAddCurrentTaskToDelayedList+0x90>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005014:	4b20      	ldr	r3, [pc, #128]	; (8005098 <prvAddCurrentTaskToDelayedList+0x94>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	3304      	adds	r3, #4
 800501a:	4618      	mov	r0, r3
 800501c:	f7fe f9e0 	bl	80033e0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005026:	d10a      	bne.n	800503e <prvAddCurrentTaskToDelayedList+0x3a>
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d007      	beq.n	800503e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800502e:	4b1a      	ldr	r3, [pc, #104]	; (8005098 <prvAddCurrentTaskToDelayedList+0x94>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	3304      	adds	r3, #4
 8005034:	4619      	mov	r1, r3
 8005036:	4819      	ldr	r0, [pc, #100]	; (800509c <prvAddCurrentTaskToDelayedList+0x98>)
 8005038:	f7fe f975 	bl	8003326 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800503c:	e026      	b.n	800508c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800503e:	68fa      	ldr	r2, [r7, #12]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	4413      	add	r3, r2
 8005044:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005046:	4b14      	ldr	r3, [pc, #80]	; (8005098 <prvAddCurrentTaskToDelayedList+0x94>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	68ba      	ldr	r2, [r7, #8]
 800504c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800504e:	68ba      	ldr	r2, [r7, #8]
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	429a      	cmp	r2, r3
 8005054:	d209      	bcs.n	800506a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005056:	4b12      	ldr	r3, [pc, #72]	; (80050a0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	4b0f      	ldr	r3, [pc, #60]	; (8005098 <prvAddCurrentTaskToDelayedList+0x94>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	3304      	adds	r3, #4
 8005060:	4619      	mov	r1, r3
 8005062:	4610      	mov	r0, r2
 8005064:	f7fe f983 	bl	800336e <vListInsert>
}
 8005068:	e010      	b.n	800508c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800506a:	4b0e      	ldr	r3, [pc, #56]	; (80050a4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	4b0a      	ldr	r3, [pc, #40]	; (8005098 <prvAddCurrentTaskToDelayedList+0x94>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	3304      	adds	r3, #4
 8005074:	4619      	mov	r1, r3
 8005076:	4610      	mov	r0, r2
 8005078:	f7fe f979 	bl	800336e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800507c:	4b0a      	ldr	r3, [pc, #40]	; (80050a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	68ba      	ldr	r2, [r7, #8]
 8005082:	429a      	cmp	r2, r3
 8005084:	d202      	bcs.n	800508c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005086:	4a08      	ldr	r2, [pc, #32]	; (80050a8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	6013      	str	r3, [r2, #0]
}
 800508c:	bf00      	nop
 800508e:	3710      	adds	r7, #16
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}
 8005094:	200047e8 	.word	0x200047e8
 8005098:	20004310 	.word	0x20004310
 800509c:	200047d0 	.word	0x200047d0
 80050a0:	200047a0 	.word	0x200047a0
 80050a4:	2000479c 	.word	0x2000479c
 80050a8:	20004804 	.word	0x20004804

080050ac <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b08a      	sub	sp, #40	; 0x28
 80050b0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80050b2:	2300      	movs	r3, #0
 80050b4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80050b6:	f000 fb07 	bl	80056c8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80050ba:	4b1c      	ldr	r3, [pc, #112]	; (800512c <xTimerCreateTimerTask+0x80>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d021      	beq.n	8005106 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80050c2:	2300      	movs	r3, #0
 80050c4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80050c6:	2300      	movs	r3, #0
 80050c8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80050ca:	1d3a      	adds	r2, r7, #4
 80050cc:	f107 0108 	add.w	r1, r7, #8
 80050d0:	f107 030c 	add.w	r3, r7, #12
 80050d4:	4618      	mov	r0, r3
 80050d6:	f7fd fef5 	bl	8002ec4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80050da:	6879      	ldr	r1, [r7, #4]
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	68fa      	ldr	r2, [r7, #12]
 80050e0:	9202      	str	r2, [sp, #8]
 80050e2:	9301      	str	r3, [sp, #4]
 80050e4:	2302      	movs	r3, #2
 80050e6:	9300      	str	r3, [sp, #0]
 80050e8:	2300      	movs	r3, #0
 80050ea:	460a      	mov	r2, r1
 80050ec:	4910      	ldr	r1, [pc, #64]	; (8005130 <xTimerCreateTimerTask+0x84>)
 80050ee:	4811      	ldr	r0, [pc, #68]	; (8005134 <xTimerCreateTimerTask+0x88>)
 80050f0:	f7ff f8de 	bl	80042b0 <xTaskCreateStatic>
 80050f4:	4603      	mov	r3, r0
 80050f6:	4a10      	ldr	r2, [pc, #64]	; (8005138 <xTimerCreateTimerTask+0x8c>)
 80050f8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80050fa:	4b0f      	ldr	r3, [pc, #60]	; (8005138 <xTimerCreateTimerTask+0x8c>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d001      	beq.n	8005106 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005102:	2301      	movs	r3, #1
 8005104:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d10a      	bne.n	8005122 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800510c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005110:	f383 8811 	msr	BASEPRI, r3
 8005114:	f3bf 8f6f 	isb	sy
 8005118:	f3bf 8f4f 	dsb	sy
 800511c:	613b      	str	r3, [r7, #16]
}
 800511e:	bf00      	nop
 8005120:	e7fe      	b.n	8005120 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005122:	697b      	ldr	r3, [r7, #20]
}
 8005124:	4618      	mov	r0, r3
 8005126:	3718      	adds	r7, #24
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}
 800512c:	20004840 	.word	0x20004840
 8005130:	08005c84 	.word	0x08005c84
 8005134:	08005271 	.word	0x08005271
 8005138:	20004844 	.word	0x20004844

0800513c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b08a      	sub	sp, #40	; 0x28
 8005140:	af00      	add	r7, sp, #0
 8005142:	60f8      	str	r0, [r7, #12]
 8005144:	60b9      	str	r1, [r7, #8]
 8005146:	607a      	str	r2, [r7, #4]
 8005148:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800514a:	2300      	movs	r3, #0
 800514c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d10a      	bne.n	800516a <xTimerGenericCommand+0x2e>
	__asm volatile
 8005154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005158:	f383 8811 	msr	BASEPRI, r3
 800515c:	f3bf 8f6f 	isb	sy
 8005160:	f3bf 8f4f 	dsb	sy
 8005164:	623b      	str	r3, [r7, #32]
}
 8005166:	bf00      	nop
 8005168:	e7fe      	b.n	8005168 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800516a:	4b1a      	ldr	r3, [pc, #104]	; (80051d4 <xTimerGenericCommand+0x98>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d02a      	beq.n	80051c8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	2b05      	cmp	r3, #5
 8005182:	dc18      	bgt.n	80051b6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005184:	f7ff feb2 	bl	8004eec <xTaskGetSchedulerState>
 8005188:	4603      	mov	r3, r0
 800518a:	2b02      	cmp	r3, #2
 800518c:	d109      	bne.n	80051a2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800518e:	4b11      	ldr	r3, [pc, #68]	; (80051d4 <xTimerGenericCommand+0x98>)
 8005190:	6818      	ldr	r0, [r3, #0]
 8005192:	f107 0110 	add.w	r1, r7, #16
 8005196:	2300      	movs	r3, #0
 8005198:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800519a:	f7fe fca1 	bl	8003ae0 <xQueueGenericSend>
 800519e:	6278      	str	r0, [r7, #36]	; 0x24
 80051a0:	e012      	b.n	80051c8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80051a2:	4b0c      	ldr	r3, [pc, #48]	; (80051d4 <xTimerGenericCommand+0x98>)
 80051a4:	6818      	ldr	r0, [r3, #0]
 80051a6:	f107 0110 	add.w	r1, r7, #16
 80051aa:	2300      	movs	r3, #0
 80051ac:	2200      	movs	r2, #0
 80051ae:	f7fe fc97 	bl	8003ae0 <xQueueGenericSend>
 80051b2:	6278      	str	r0, [r7, #36]	; 0x24
 80051b4:	e008      	b.n	80051c8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80051b6:	4b07      	ldr	r3, [pc, #28]	; (80051d4 <xTimerGenericCommand+0x98>)
 80051b8:	6818      	ldr	r0, [r3, #0]
 80051ba:	f107 0110 	add.w	r1, r7, #16
 80051be:	2300      	movs	r3, #0
 80051c0:	683a      	ldr	r2, [r7, #0]
 80051c2:	f7fe fd8b 	bl	8003cdc <xQueueGenericSendFromISR>
 80051c6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80051c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3728      	adds	r7, #40	; 0x28
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}
 80051d2:	bf00      	nop
 80051d4:	20004840 	.word	0x20004840

080051d8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b088      	sub	sp, #32
 80051dc:	af02      	add	r7, sp, #8
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051e2:	4b22      	ldr	r3, [pc, #136]	; (800526c <prvProcessExpiredTimer+0x94>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	68db      	ldr	r3, [r3, #12]
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	3304      	adds	r3, #4
 80051f0:	4618      	mov	r0, r3
 80051f2:	f7fe f8f5 	bl	80033e0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80051fc:	f003 0304 	and.w	r3, r3, #4
 8005200:	2b00      	cmp	r3, #0
 8005202:	d022      	beq.n	800524a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	699a      	ldr	r2, [r3, #24]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	18d1      	adds	r1, r2, r3
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	683a      	ldr	r2, [r7, #0]
 8005210:	6978      	ldr	r0, [r7, #20]
 8005212:	f000 f8d1 	bl	80053b8 <prvInsertTimerInActiveList>
 8005216:	4603      	mov	r3, r0
 8005218:	2b00      	cmp	r3, #0
 800521a:	d01f      	beq.n	800525c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800521c:	2300      	movs	r3, #0
 800521e:	9300      	str	r3, [sp, #0]
 8005220:	2300      	movs	r3, #0
 8005222:	687a      	ldr	r2, [r7, #4]
 8005224:	2100      	movs	r1, #0
 8005226:	6978      	ldr	r0, [r7, #20]
 8005228:	f7ff ff88 	bl	800513c <xTimerGenericCommand>
 800522c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d113      	bne.n	800525c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005238:	f383 8811 	msr	BASEPRI, r3
 800523c:	f3bf 8f6f 	isb	sy
 8005240:	f3bf 8f4f 	dsb	sy
 8005244:	60fb      	str	r3, [r7, #12]
}
 8005246:	bf00      	nop
 8005248:	e7fe      	b.n	8005248 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005250:	f023 0301 	bic.w	r3, r3, #1
 8005254:	b2da      	uxtb	r2, r3
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	6a1b      	ldr	r3, [r3, #32]
 8005260:	6978      	ldr	r0, [r7, #20]
 8005262:	4798      	blx	r3
}
 8005264:	bf00      	nop
 8005266:	3718      	adds	r7, #24
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}
 800526c:	20004838 	.word	0x20004838

08005270 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b084      	sub	sp, #16
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005278:	f107 0308 	add.w	r3, r7, #8
 800527c:	4618      	mov	r0, r3
 800527e:	f000 f857 	bl	8005330 <prvGetNextExpireTime>
 8005282:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	4619      	mov	r1, r3
 8005288:	68f8      	ldr	r0, [r7, #12]
 800528a:	f000 f803 	bl	8005294 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800528e:	f000 f8d5 	bl	800543c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005292:	e7f1      	b.n	8005278 <prvTimerTask+0x8>

08005294 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b084      	sub	sp, #16
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800529e:	f7ff fa43 	bl	8004728 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80052a2:	f107 0308 	add.w	r3, r7, #8
 80052a6:	4618      	mov	r0, r3
 80052a8:	f000 f866 	bl	8005378 <prvSampleTimeNow>
 80052ac:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d130      	bne.n	8005316 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d10a      	bne.n	80052d0 <prvProcessTimerOrBlockTask+0x3c>
 80052ba:	687a      	ldr	r2, [r7, #4]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	429a      	cmp	r2, r3
 80052c0:	d806      	bhi.n	80052d0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80052c2:	f7ff fa3f 	bl	8004744 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80052c6:	68f9      	ldr	r1, [r7, #12]
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f7ff ff85 	bl	80051d8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80052ce:	e024      	b.n	800531a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d008      	beq.n	80052e8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80052d6:	4b13      	ldr	r3, [pc, #76]	; (8005324 <prvProcessTimerOrBlockTask+0x90>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d101      	bne.n	80052e4 <prvProcessTimerOrBlockTask+0x50>
 80052e0:	2301      	movs	r3, #1
 80052e2:	e000      	b.n	80052e6 <prvProcessTimerOrBlockTask+0x52>
 80052e4:	2300      	movs	r3, #0
 80052e6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80052e8:	4b0f      	ldr	r3, [pc, #60]	; (8005328 <prvProcessTimerOrBlockTask+0x94>)
 80052ea:	6818      	ldr	r0, [r3, #0]
 80052ec:	687a      	ldr	r2, [r7, #4]
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	1ad3      	subs	r3, r2, r3
 80052f2:	683a      	ldr	r2, [r7, #0]
 80052f4:	4619      	mov	r1, r3
 80052f6:	f7fe ffa7 	bl	8004248 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80052fa:	f7ff fa23 	bl	8004744 <xTaskResumeAll>
 80052fe:	4603      	mov	r3, r0
 8005300:	2b00      	cmp	r3, #0
 8005302:	d10a      	bne.n	800531a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005304:	4b09      	ldr	r3, [pc, #36]	; (800532c <prvProcessTimerOrBlockTask+0x98>)
 8005306:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800530a:	601a      	str	r2, [r3, #0]
 800530c:	f3bf 8f4f 	dsb	sy
 8005310:	f3bf 8f6f 	isb	sy
}
 8005314:	e001      	b.n	800531a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005316:	f7ff fa15 	bl	8004744 <xTaskResumeAll>
}
 800531a:	bf00      	nop
 800531c:	3710      	adds	r7, #16
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}
 8005322:	bf00      	nop
 8005324:	2000483c 	.word	0x2000483c
 8005328:	20004840 	.word	0x20004840
 800532c:	e000ed04 	.word	0xe000ed04

08005330 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005330:	b480      	push	{r7}
 8005332:	b085      	sub	sp, #20
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005338:	4b0e      	ldr	r3, [pc, #56]	; (8005374 <prvGetNextExpireTime+0x44>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d101      	bne.n	8005346 <prvGetNextExpireTime+0x16>
 8005342:	2201      	movs	r2, #1
 8005344:	e000      	b.n	8005348 <prvGetNextExpireTime+0x18>
 8005346:	2200      	movs	r2, #0
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d105      	bne.n	8005360 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005354:	4b07      	ldr	r3, [pc, #28]	; (8005374 <prvGetNextExpireTime+0x44>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	68db      	ldr	r3, [r3, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	60fb      	str	r3, [r7, #12]
 800535e:	e001      	b.n	8005364 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005360:	2300      	movs	r3, #0
 8005362:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005364:	68fb      	ldr	r3, [r7, #12]
}
 8005366:	4618      	mov	r0, r3
 8005368:	3714      	adds	r7, #20
 800536a:	46bd      	mov	sp, r7
 800536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005370:	4770      	bx	lr
 8005372:	bf00      	nop
 8005374:	20004838 	.word	0x20004838

08005378 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b084      	sub	sp, #16
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005380:	f7ff fa7e 	bl	8004880 <xTaskGetTickCount>
 8005384:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005386:	4b0b      	ldr	r3, [pc, #44]	; (80053b4 <prvSampleTimeNow+0x3c>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	68fa      	ldr	r2, [r7, #12]
 800538c:	429a      	cmp	r2, r3
 800538e:	d205      	bcs.n	800539c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005390:	f000 f936 	bl	8005600 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2201      	movs	r2, #1
 8005398:	601a      	str	r2, [r3, #0]
 800539a:	e002      	b.n	80053a2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2200      	movs	r2, #0
 80053a0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80053a2:	4a04      	ldr	r2, [pc, #16]	; (80053b4 <prvSampleTimeNow+0x3c>)
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80053a8:	68fb      	ldr	r3, [r7, #12]
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3710      	adds	r7, #16
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
 80053b2:	bf00      	nop
 80053b4:	20004848 	.word	0x20004848

080053b8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b086      	sub	sp, #24
 80053bc:	af00      	add	r7, sp, #0
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	60b9      	str	r1, [r7, #8]
 80053c2:	607a      	str	r2, [r7, #4]
 80053c4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80053c6:	2300      	movs	r3, #0
 80053c8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	68ba      	ldr	r2, [r7, #8]
 80053ce:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	68fa      	ldr	r2, [r7, #12]
 80053d4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80053d6:	68ba      	ldr	r2, [r7, #8]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	429a      	cmp	r2, r3
 80053dc:	d812      	bhi.n	8005404 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053de:	687a      	ldr	r2, [r7, #4]
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	1ad2      	subs	r2, r2, r3
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	699b      	ldr	r3, [r3, #24]
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d302      	bcc.n	80053f2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80053ec:	2301      	movs	r3, #1
 80053ee:	617b      	str	r3, [r7, #20]
 80053f0:	e01b      	b.n	800542a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80053f2:	4b10      	ldr	r3, [pc, #64]	; (8005434 <prvInsertTimerInActiveList+0x7c>)
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	3304      	adds	r3, #4
 80053fa:	4619      	mov	r1, r3
 80053fc:	4610      	mov	r0, r2
 80053fe:	f7fd ffb6 	bl	800336e <vListInsert>
 8005402:	e012      	b.n	800542a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	429a      	cmp	r2, r3
 800540a:	d206      	bcs.n	800541a <prvInsertTimerInActiveList+0x62>
 800540c:	68ba      	ldr	r2, [r7, #8]
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	429a      	cmp	r2, r3
 8005412:	d302      	bcc.n	800541a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005414:	2301      	movs	r3, #1
 8005416:	617b      	str	r3, [r7, #20]
 8005418:	e007      	b.n	800542a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800541a:	4b07      	ldr	r3, [pc, #28]	; (8005438 <prvInsertTimerInActiveList+0x80>)
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	3304      	adds	r3, #4
 8005422:	4619      	mov	r1, r3
 8005424:	4610      	mov	r0, r2
 8005426:	f7fd ffa2 	bl	800336e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800542a:	697b      	ldr	r3, [r7, #20]
}
 800542c:	4618      	mov	r0, r3
 800542e:	3718      	adds	r7, #24
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}
 8005434:	2000483c 	.word	0x2000483c
 8005438:	20004838 	.word	0x20004838

0800543c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b08e      	sub	sp, #56	; 0x38
 8005440:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005442:	e0ca      	b.n	80055da <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2b00      	cmp	r3, #0
 8005448:	da18      	bge.n	800547c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800544a:	1d3b      	adds	r3, r7, #4
 800544c:	3304      	adds	r3, #4
 800544e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005452:	2b00      	cmp	r3, #0
 8005454:	d10a      	bne.n	800546c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800545a:	f383 8811 	msr	BASEPRI, r3
 800545e:	f3bf 8f6f 	isb	sy
 8005462:	f3bf 8f4f 	dsb	sy
 8005466:	61fb      	str	r3, [r7, #28]
}
 8005468:	bf00      	nop
 800546a:	e7fe      	b.n	800546a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800546c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005472:	6850      	ldr	r0, [r2, #4]
 8005474:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005476:	6892      	ldr	r2, [r2, #8]
 8005478:	4611      	mov	r1, r2
 800547a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2b00      	cmp	r3, #0
 8005480:	f2c0 80aa 	blt.w	80055d8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800548a:	695b      	ldr	r3, [r3, #20]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d004      	beq.n	800549a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005492:	3304      	adds	r3, #4
 8005494:	4618      	mov	r0, r3
 8005496:	f7fd ffa3 	bl	80033e0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800549a:	463b      	mov	r3, r7
 800549c:	4618      	mov	r0, r3
 800549e:	f7ff ff6b 	bl	8005378 <prvSampleTimeNow>
 80054a2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2b09      	cmp	r3, #9
 80054a8:	f200 8097 	bhi.w	80055da <prvProcessReceivedCommands+0x19e>
 80054ac:	a201      	add	r2, pc, #4	; (adr r2, 80054b4 <prvProcessReceivedCommands+0x78>)
 80054ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054b2:	bf00      	nop
 80054b4:	080054dd 	.word	0x080054dd
 80054b8:	080054dd 	.word	0x080054dd
 80054bc:	080054dd 	.word	0x080054dd
 80054c0:	08005551 	.word	0x08005551
 80054c4:	08005565 	.word	0x08005565
 80054c8:	080055af 	.word	0x080055af
 80054cc:	080054dd 	.word	0x080054dd
 80054d0:	080054dd 	.word	0x080054dd
 80054d4:	08005551 	.word	0x08005551
 80054d8:	08005565 	.word	0x08005565
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80054dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80054e2:	f043 0301 	orr.w	r3, r3, #1
 80054e6:	b2da      	uxtb	r2, r3
 80054e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80054ee:	68ba      	ldr	r2, [r7, #8]
 80054f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054f2:	699b      	ldr	r3, [r3, #24]
 80054f4:	18d1      	adds	r1, r2, r3
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054fc:	f7ff ff5c 	bl	80053b8 <prvInsertTimerInActiveList>
 8005500:	4603      	mov	r3, r0
 8005502:	2b00      	cmp	r3, #0
 8005504:	d069      	beq.n	80055da <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005508:	6a1b      	ldr	r3, [r3, #32]
 800550a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800550c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800550e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005510:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005514:	f003 0304 	and.w	r3, r3, #4
 8005518:	2b00      	cmp	r3, #0
 800551a:	d05e      	beq.n	80055da <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800551c:	68ba      	ldr	r2, [r7, #8]
 800551e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005520:	699b      	ldr	r3, [r3, #24]
 8005522:	441a      	add	r2, r3
 8005524:	2300      	movs	r3, #0
 8005526:	9300      	str	r3, [sp, #0]
 8005528:	2300      	movs	r3, #0
 800552a:	2100      	movs	r1, #0
 800552c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800552e:	f7ff fe05 	bl	800513c <xTimerGenericCommand>
 8005532:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005534:	6a3b      	ldr	r3, [r7, #32]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d14f      	bne.n	80055da <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800553a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800553e:	f383 8811 	msr	BASEPRI, r3
 8005542:	f3bf 8f6f 	isb	sy
 8005546:	f3bf 8f4f 	dsb	sy
 800554a:	61bb      	str	r3, [r7, #24]
}
 800554c:	bf00      	nop
 800554e:	e7fe      	b.n	800554e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005552:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005556:	f023 0301 	bic.w	r3, r3, #1
 800555a:	b2da      	uxtb	r2, r3
 800555c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800555e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005562:	e03a      	b.n	80055da <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005566:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800556a:	f043 0301 	orr.w	r3, r3, #1
 800556e:	b2da      	uxtb	r2, r3
 8005570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005572:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005576:	68ba      	ldr	r2, [r7, #8]
 8005578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800557a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800557c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800557e:	699b      	ldr	r3, [r3, #24]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d10a      	bne.n	800559a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005588:	f383 8811 	msr	BASEPRI, r3
 800558c:	f3bf 8f6f 	isb	sy
 8005590:	f3bf 8f4f 	dsb	sy
 8005594:	617b      	str	r3, [r7, #20]
}
 8005596:	bf00      	nop
 8005598:	e7fe      	b.n	8005598 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800559a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800559c:	699a      	ldr	r2, [r3, #24]
 800559e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a0:	18d1      	adds	r1, r2, r3
 80055a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80055a8:	f7ff ff06 	bl	80053b8 <prvInsertTimerInActiveList>
					break;
 80055ac:	e015      	b.n	80055da <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80055ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80055b4:	f003 0302 	and.w	r3, r3, #2
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d103      	bne.n	80055c4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80055bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80055be:	f7fd fd67 	bl	8003090 <vPortFree>
 80055c2:	e00a      	b.n	80055da <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80055c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80055ca:	f023 0301 	bic.w	r3, r3, #1
 80055ce:	b2da      	uxtb	r2, r3
 80055d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80055d6:	e000      	b.n	80055da <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80055d8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80055da:	4b08      	ldr	r3, [pc, #32]	; (80055fc <prvProcessReceivedCommands+0x1c0>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	1d39      	adds	r1, r7, #4
 80055e0:	2200      	movs	r2, #0
 80055e2:	4618      	mov	r0, r3
 80055e4:	f7fe fc16 	bl	8003e14 <xQueueReceive>
 80055e8:	4603      	mov	r3, r0
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	f47f af2a 	bne.w	8005444 <prvProcessReceivedCommands+0x8>
	}
}
 80055f0:	bf00      	nop
 80055f2:	bf00      	nop
 80055f4:	3730      	adds	r7, #48	; 0x30
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}
 80055fa:	bf00      	nop
 80055fc:	20004840 	.word	0x20004840

08005600 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b088      	sub	sp, #32
 8005604:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005606:	e048      	b.n	800569a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005608:	4b2d      	ldr	r3, [pc, #180]	; (80056c0 <prvSwitchTimerLists+0xc0>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	68db      	ldr	r3, [r3, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005612:	4b2b      	ldr	r3, [pc, #172]	; (80056c0 <prvSwitchTimerLists+0xc0>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	68db      	ldr	r3, [r3, #12]
 8005618:	68db      	ldr	r3, [r3, #12]
 800561a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	3304      	adds	r3, #4
 8005620:	4618      	mov	r0, r3
 8005622:	f7fd fedd 	bl	80033e0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	6a1b      	ldr	r3, [r3, #32]
 800562a:	68f8      	ldr	r0, [r7, #12]
 800562c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005634:	f003 0304 	and.w	r3, r3, #4
 8005638:	2b00      	cmp	r3, #0
 800563a:	d02e      	beq.n	800569a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	699b      	ldr	r3, [r3, #24]
 8005640:	693a      	ldr	r2, [r7, #16]
 8005642:	4413      	add	r3, r2
 8005644:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005646:	68ba      	ldr	r2, [r7, #8]
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	429a      	cmp	r2, r3
 800564c:	d90e      	bls.n	800566c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	68ba      	ldr	r2, [r7, #8]
 8005652:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	68fa      	ldr	r2, [r7, #12]
 8005658:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800565a:	4b19      	ldr	r3, [pc, #100]	; (80056c0 <prvSwitchTimerLists+0xc0>)
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	3304      	adds	r3, #4
 8005662:	4619      	mov	r1, r3
 8005664:	4610      	mov	r0, r2
 8005666:	f7fd fe82 	bl	800336e <vListInsert>
 800566a:	e016      	b.n	800569a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800566c:	2300      	movs	r3, #0
 800566e:	9300      	str	r3, [sp, #0]
 8005670:	2300      	movs	r3, #0
 8005672:	693a      	ldr	r2, [r7, #16]
 8005674:	2100      	movs	r1, #0
 8005676:	68f8      	ldr	r0, [r7, #12]
 8005678:	f7ff fd60 	bl	800513c <xTimerGenericCommand>
 800567c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d10a      	bne.n	800569a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005688:	f383 8811 	msr	BASEPRI, r3
 800568c:	f3bf 8f6f 	isb	sy
 8005690:	f3bf 8f4f 	dsb	sy
 8005694:	603b      	str	r3, [r7, #0]
}
 8005696:	bf00      	nop
 8005698:	e7fe      	b.n	8005698 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800569a:	4b09      	ldr	r3, [pc, #36]	; (80056c0 <prvSwitchTimerLists+0xc0>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d1b1      	bne.n	8005608 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80056a4:	4b06      	ldr	r3, [pc, #24]	; (80056c0 <prvSwitchTimerLists+0xc0>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80056aa:	4b06      	ldr	r3, [pc, #24]	; (80056c4 <prvSwitchTimerLists+0xc4>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	4a04      	ldr	r2, [pc, #16]	; (80056c0 <prvSwitchTimerLists+0xc0>)
 80056b0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80056b2:	4a04      	ldr	r2, [pc, #16]	; (80056c4 <prvSwitchTimerLists+0xc4>)
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	6013      	str	r3, [r2, #0]
}
 80056b8:	bf00      	nop
 80056ba:	3718      	adds	r7, #24
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}
 80056c0:	20004838 	.word	0x20004838
 80056c4:	2000483c 	.word	0x2000483c

080056c8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b082      	sub	sp, #8
 80056cc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80056ce:	f7fd ffe1 	bl	8003694 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80056d2:	4b15      	ldr	r3, [pc, #84]	; (8005728 <prvCheckForValidListAndQueue+0x60>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d120      	bne.n	800571c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80056da:	4814      	ldr	r0, [pc, #80]	; (800572c <prvCheckForValidListAndQueue+0x64>)
 80056dc:	f7fd fdf6 	bl	80032cc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80056e0:	4813      	ldr	r0, [pc, #76]	; (8005730 <prvCheckForValidListAndQueue+0x68>)
 80056e2:	f7fd fdf3 	bl	80032cc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80056e6:	4b13      	ldr	r3, [pc, #76]	; (8005734 <prvCheckForValidListAndQueue+0x6c>)
 80056e8:	4a10      	ldr	r2, [pc, #64]	; (800572c <prvCheckForValidListAndQueue+0x64>)
 80056ea:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80056ec:	4b12      	ldr	r3, [pc, #72]	; (8005738 <prvCheckForValidListAndQueue+0x70>)
 80056ee:	4a10      	ldr	r2, [pc, #64]	; (8005730 <prvCheckForValidListAndQueue+0x68>)
 80056f0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80056f2:	2300      	movs	r3, #0
 80056f4:	9300      	str	r3, [sp, #0]
 80056f6:	4b11      	ldr	r3, [pc, #68]	; (800573c <prvCheckForValidListAndQueue+0x74>)
 80056f8:	4a11      	ldr	r2, [pc, #68]	; (8005740 <prvCheckForValidListAndQueue+0x78>)
 80056fa:	2110      	movs	r1, #16
 80056fc:	200a      	movs	r0, #10
 80056fe:	f7fe f953 	bl	80039a8 <xQueueGenericCreateStatic>
 8005702:	4603      	mov	r3, r0
 8005704:	4a08      	ldr	r2, [pc, #32]	; (8005728 <prvCheckForValidListAndQueue+0x60>)
 8005706:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005708:	4b07      	ldr	r3, [pc, #28]	; (8005728 <prvCheckForValidListAndQueue+0x60>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d005      	beq.n	800571c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005710:	4b05      	ldr	r3, [pc, #20]	; (8005728 <prvCheckForValidListAndQueue+0x60>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	490b      	ldr	r1, [pc, #44]	; (8005744 <prvCheckForValidListAndQueue+0x7c>)
 8005716:	4618      	mov	r0, r3
 8005718:	f7fe fd6c 	bl	80041f4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800571c:	f7fd ffea 	bl	80036f4 <vPortExitCritical>
}
 8005720:	bf00      	nop
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}
 8005726:	bf00      	nop
 8005728:	20004840 	.word	0x20004840
 800572c:	20004810 	.word	0x20004810
 8005730:	20004824 	.word	0x20004824
 8005734:	20004838 	.word	0x20004838
 8005738:	2000483c 	.word	0x2000483c
 800573c:	200048ec 	.word	0x200048ec
 8005740:	2000484c 	.word	0x2000484c
 8005744:	08005c8c 	.word	0x08005c8c

08005748 <OLED_Refresh_Gram>:

#include "../../PeripheralDriver/Inc/oledfont.h"

uint8_t OLED_GRAM[128][8];	 
void OLED_Refresh_Gram(void)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b082      	sub	sp, #8
 800574c:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 800574e:	2300      	movs	r3, #0
 8005750:	71fb      	strb	r3, [r7, #7]
 8005752:	e026      	b.n	80057a2 <OLED_Refresh_Gram+0x5a>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    
 8005754:	79fb      	ldrb	r3, [r7, #7]
 8005756:	3b50      	subs	r3, #80	; 0x50
 8005758:	b2db      	uxtb	r3, r3
 800575a:	2100      	movs	r1, #0
 800575c:	4618      	mov	r0, r3
 800575e:	f000 f82b 	bl	80057b8 <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      
 8005762:	2100      	movs	r1, #0
 8005764:	2000      	movs	r0, #0
 8005766:	f000 f827 	bl	80057b8 <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);        
 800576a:	2100      	movs	r1, #0
 800576c:	2010      	movs	r0, #16
 800576e:	f000 f823 	bl	80057b8 <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA); 
 8005772:	2300      	movs	r3, #0
 8005774:	71bb      	strb	r3, [r7, #6]
 8005776:	e00d      	b.n	8005794 <OLED_Refresh_Gram+0x4c>
 8005778:	79ba      	ldrb	r2, [r7, #6]
 800577a:	79fb      	ldrb	r3, [r7, #7]
 800577c:	490d      	ldr	r1, [pc, #52]	; (80057b4 <OLED_Refresh_Gram+0x6c>)
 800577e:	00d2      	lsls	r2, r2, #3
 8005780:	440a      	add	r2, r1
 8005782:	4413      	add	r3, r2
 8005784:	781b      	ldrb	r3, [r3, #0]
 8005786:	2101      	movs	r1, #1
 8005788:	4618      	mov	r0, r3
 800578a:	f000 f815 	bl	80057b8 <OLED_WR_Byte>
 800578e:	79bb      	ldrb	r3, [r7, #6]
 8005790:	3301      	adds	r3, #1
 8005792:	71bb      	strb	r3, [r7, #6]
 8005794:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005798:	2b00      	cmp	r3, #0
 800579a:	daed      	bge.n	8005778 <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)  
 800579c:	79fb      	ldrb	r3, [r7, #7]
 800579e:	3301      	adds	r3, #1
 80057a0:	71fb      	strb	r3, [r7, #7]
 80057a2:	79fb      	ldrb	r3, [r7, #7]
 80057a4:	2b07      	cmp	r3, #7
 80057a6:	d9d5      	bls.n	8005754 <OLED_Refresh_Gram+0xc>
	}   
}
 80057a8:	bf00      	nop
 80057aa:	bf00      	nop
 80057ac:	3708      	adds	r7, #8
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}
 80057b2:	bf00      	nop
 80057b4:	20004a68 	.word	0x20004a68

080057b8 <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{	
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b084      	sub	sp, #16
 80057bc:	af00      	add	r7, sp, #0
 80057be:	4603      	mov	r3, r0
 80057c0:	460a      	mov	r2, r1
 80057c2:	71fb      	strb	r3, [r7, #7]
 80057c4:	4613      	mov	r3, r2
 80057c6:	71bb      	strb	r3, [r7, #6]
	uint8_t i;			  
	if(cmd)
 80057c8:	79bb      	ldrb	r3, [r7, #6]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d006      	beq.n	80057dc <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 80057ce:	2201      	movs	r2, #1
 80057d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80057d4:	481c      	ldr	r0, [pc, #112]	; (8005848 <OLED_WR_Byte+0x90>)
 80057d6:	f7fb fe5b 	bl	8001490 <HAL_GPIO_WritePin>
 80057da:	e005      	b.n	80057e8 <OLED_WR_Byte+0x30>
	else 
	  OLED_RS_Clr();		  
 80057dc:	2200      	movs	r2, #0
 80057de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80057e2:	4819      	ldr	r0, [pc, #100]	; (8005848 <OLED_WR_Byte+0x90>)
 80057e4:	f7fb fe54 	bl	8001490 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 80057e8:	2300      	movs	r3, #0
 80057ea:	73fb      	strb	r3, [r7, #15]
 80057ec:	e01e      	b.n	800582c <OLED_WR_Byte+0x74>
	{			  
		OLED_SCLK_Clr();
 80057ee:	2200      	movs	r2, #0
 80057f0:	2120      	movs	r1, #32
 80057f2:	4815      	ldr	r0, [pc, #84]	; (8005848 <OLED_WR_Byte+0x90>)
 80057f4:	f7fb fe4c 	bl	8001490 <HAL_GPIO_WritePin>
		if(dat&0x80)
 80057f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	da05      	bge.n	800580c <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 8005800:	2201      	movs	r2, #1
 8005802:	2140      	movs	r1, #64	; 0x40
 8005804:	4810      	ldr	r0, [pc, #64]	; (8005848 <OLED_WR_Byte+0x90>)
 8005806:	f7fb fe43 	bl	8001490 <HAL_GPIO_WritePin>
 800580a:	e004      	b.n	8005816 <OLED_WR_Byte+0x5e>
		else 
		   OLED_SDIN_Clr();
 800580c:	2200      	movs	r2, #0
 800580e:	2140      	movs	r1, #64	; 0x40
 8005810:	480d      	ldr	r0, [pc, #52]	; (8005848 <OLED_WR_Byte+0x90>)
 8005812:	f7fb fe3d 	bl	8001490 <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 8005816:	2201      	movs	r2, #1
 8005818:	2120      	movs	r1, #32
 800581a:	480b      	ldr	r0, [pc, #44]	; (8005848 <OLED_WR_Byte+0x90>)
 800581c:	f7fb fe38 	bl	8001490 <HAL_GPIO_WritePin>
		dat<<=1;   
 8005820:	79fb      	ldrb	r3, [r7, #7]
 8005822:	005b      	lsls	r3, r3, #1
 8005824:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 8005826:	7bfb      	ldrb	r3, [r7, #15]
 8005828:	3301      	adds	r3, #1
 800582a:	73fb      	strb	r3, [r7, #15]
 800582c:	7bfb      	ldrb	r3, [r7, #15]
 800582e:	2b07      	cmp	r3, #7
 8005830:	d9dd      	bls.n	80057ee <OLED_WR_Byte+0x36>
	}				 		  
	OLED_RS_Set();   	  
 8005832:	2201      	movs	r2, #1
 8005834:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005838:	4803      	ldr	r0, [pc, #12]	; (8005848 <OLED_WR_Byte+0x90>)
 800583a:	f7fb fe29 	bl	8001490 <HAL_GPIO_WritePin>
} 
 800583e:	bf00      	nop
 8005840:	3710      	adds	r7, #16
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}
 8005846:	bf00      	nop
 8005848:	40021000 	.word	0x40021000

0800584c <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 800584c:	b580      	push	{r7, lr}
 800584e:	b082      	sub	sp, #8
 8005850:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 8005852:	2300      	movs	r3, #0
 8005854:	71fb      	strb	r3, [r7, #7]
 8005856:	e014      	b.n	8005882 <OLED_Clear+0x36>
 8005858:	2300      	movs	r3, #0
 800585a:	71bb      	strb	r3, [r7, #6]
 800585c:	e00a      	b.n	8005874 <OLED_Clear+0x28>
 800585e:	79ba      	ldrb	r2, [r7, #6]
 8005860:	79fb      	ldrb	r3, [r7, #7]
 8005862:	490c      	ldr	r1, [pc, #48]	; (8005894 <OLED_Clear+0x48>)
 8005864:	00d2      	lsls	r2, r2, #3
 8005866:	440a      	add	r2, r1
 8005868:	4413      	add	r3, r2
 800586a:	2200      	movs	r2, #0
 800586c:	701a      	strb	r2, [r3, #0]
 800586e:	79bb      	ldrb	r3, [r7, #6]
 8005870:	3301      	adds	r3, #1
 8005872:	71bb      	strb	r3, [r7, #6]
 8005874:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005878:	2b00      	cmp	r3, #0
 800587a:	daf0      	bge.n	800585e <OLED_Clear+0x12>
 800587c:	79fb      	ldrb	r3, [r7, #7]
 800587e:	3301      	adds	r3, #1
 8005880:	71fb      	strb	r3, [r7, #7]
 8005882:	79fb      	ldrb	r3, [r7, #7]
 8005884:	2b07      	cmp	r3, #7
 8005886:	d9e7      	bls.n	8005858 <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 8005888:	f7ff ff5e 	bl	8005748 <OLED_Refresh_Gram>
}
 800588c:	bf00      	nop
 800588e:	3708      	adds	r7, #8
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}
 8005894:	20004a68 	.word	0x20004a68

08005898 <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 8005898:	b480      	push	{r7}
 800589a:	b085      	sub	sp, #20
 800589c:	af00      	add	r7, sp, #0
 800589e:	4603      	mov	r3, r0
 80058a0:	71fb      	strb	r3, [r7, #7]
 80058a2:	460b      	mov	r3, r1
 80058a4:	71bb      	strb	r3, [r7, #6]
 80058a6:	4613      	mov	r3, r2
 80058a8:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 80058aa:	2300      	movs	r3, #0
 80058ac:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 80058ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	db41      	blt.n	800593a <OLED_DrawPoint+0xa2>
 80058b6:	79bb      	ldrb	r3, [r7, #6]
 80058b8:	2b3f      	cmp	r3, #63	; 0x3f
 80058ba:	d83e      	bhi.n	800593a <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 80058bc:	79bb      	ldrb	r3, [r7, #6]
 80058be:	08db      	lsrs	r3, r3, #3
 80058c0:	b2db      	uxtb	r3, r3
 80058c2:	f1c3 0307 	rsb	r3, r3, #7
 80058c6:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 80058c8:	79bb      	ldrb	r3, [r7, #6]
 80058ca:	f003 0307 	and.w	r3, r3, #7
 80058ce:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 80058d0:	7b7b      	ldrb	r3, [r7, #13]
 80058d2:	f1c3 0307 	rsb	r3, r3, #7
 80058d6:	2201      	movs	r2, #1
 80058d8:	fa02 f303 	lsl.w	r3, r2, r3
 80058dc:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 80058de:	797b      	ldrb	r3, [r7, #5]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d012      	beq.n	800590a <OLED_DrawPoint+0x72>
 80058e4:	79fa      	ldrb	r2, [r7, #7]
 80058e6:	7bbb      	ldrb	r3, [r7, #14]
 80058e8:	4917      	ldr	r1, [pc, #92]	; (8005948 <OLED_DrawPoint+0xb0>)
 80058ea:	00d2      	lsls	r2, r2, #3
 80058ec:	440a      	add	r2, r1
 80058ee:	4413      	add	r3, r2
 80058f0:	7818      	ldrb	r0, [r3, #0]
 80058f2:	79fa      	ldrb	r2, [r7, #7]
 80058f4:	7bbb      	ldrb	r3, [r7, #14]
 80058f6:	7bf9      	ldrb	r1, [r7, #15]
 80058f8:	4301      	orrs	r1, r0
 80058fa:	b2c8      	uxtb	r0, r1
 80058fc:	4912      	ldr	r1, [pc, #72]	; (8005948 <OLED_DrawPoint+0xb0>)
 80058fe:	00d2      	lsls	r2, r2, #3
 8005900:	440a      	add	r2, r1
 8005902:	4413      	add	r3, r2
 8005904:	4602      	mov	r2, r0
 8005906:	701a      	strb	r2, [r3, #0]
 8005908:	e018      	b.n	800593c <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 800590a:	79fa      	ldrb	r2, [r7, #7]
 800590c:	7bbb      	ldrb	r3, [r7, #14]
 800590e:	490e      	ldr	r1, [pc, #56]	; (8005948 <OLED_DrawPoint+0xb0>)
 8005910:	00d2      	lsls	r2, r2, #3
 8005912:	440a      	add	r2, r1
 8005914:	4413      	add	r3, r2
 8005916:	781b      	ldrb	r3, [r3, #0]
 8005918:	b25a      	sxtb	r2, r3
 800591a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800591e:	43db      	mvns	r3, r3
 8005920:	b25b      	sxtb	r3, r3
 8005922:	4013      	ands	r3, r2
 8005924:	b259      	sxtb	r1, r3
 8005926:	79fa      	ldrb	r2, [r7, #7]
 8005928:	7bbb      	ldrb	r3, [r7, #14]
 800592a:	b2c8      	uxtb	r0, r1
 800592c:	4906      	ldr	r1, [pc, #24]	; (8005948 <OLED_DrawPoint+0xb0>)
 800592e:	00d2      	lsls	r2, r2, #3
 8005930:	440a      	add	r2, r1
 8005932:	4413      	add	r3, r2
 8005934:	4602      	mov	r2, r0
 8005936:	701a      	strb	r2, [r3, #0]
 8005938:	e000      	b.n	800593c <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 800593a:	bf00      	nop
}
 800593c:	3714      	adds	r7, #20
 800593e:	46bd      	mov	sp, r7
 8005940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005944:	4770      	bx	lr
 8005946:	bf00      	nop
 8005948:	20004a68 	.word	0x20004a68

0800594c <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 800594c:	b590      	push	{r4, r7, lr}
 800594e:	b085      	sub	sp, #20
 8005950:	af00      	add	r7, sp, #0
 8005952:	4604      	mov	r4, r0
 8005954:	4608      	mov	r0, r1
 8005956:	4611      	mov	r1, r2
 8005958:	461a      	mov	r2, r3
 800595a:	4623      	mov	r3, r4
 800595c:	71fb      	strb	r3, [r7, #7]
 800595e:	4603      	mov	r3, r0
 8005960:	71bb      	strb	r3, [r7, #6]
 8005962:	460b      	mov	r3, r1
 8005964:	717b      	strb	r3, [r7, #5]
 8005966:	4613      	mov	r3, r2
 8005968:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 800596a:	79bb      	ldrb	r3, [r7, #6]
 800596c:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 800596e:	797b      	ldrb	r3, [r7, #5]
 8005970:	3b20      	subs	r3, #32
 8005972:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 8005974:	2300      	movs	r3, #0
 8005976:	73bb      	strb	r3, [r7, #14]
 8005978:	e04d      	b.n	8005a16 <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 800597a:	793b      	ldrb	r3, [r7, #4]
 800597c:	2b0c      	cmp	r3, #12
 800597e:	d10b      	bne.n	8005998 <OLED_ShowChar+0x4c>
 8005980:	797a      	ldrb	r2, [r7, #5]
 8005982:	7bb9      	ldrb	r1, [r7, #14]
 8005984:	4828      	ldr	r0, [pc, #160]	; (8005a28 <OLED_ShowChar+0xdc>)
 8005986:	4613      	mov	r3, r2
 8005988:	005b      	lsls	r3, r3, #1
 800598a:	4413      	add	r3, r2
 800598c:	009b      	lsls	r3, r3, #2
 800598e:	4403      	add	r3, r0
 8005990:	440b      	add	r3, r1
 8005992:	781b      	ldrb	r3, [r3, #0]
 8005994:	73fb      	strb	r3, [r7, #15]
 8005996:	e007      	b.n	80059a8 <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 8005998:	797a      	ldrb	r2, [r7, #5]
 800599a:	7bbb      	ldrb	r3, [r7, #14]
 800599c:	4923      	ldr	r1, [pc, #140]	; (8005a2c <OLED_ShowChar+0xe0>)
 800599e:	0112      	lsls	r2, r2, #4
 80059a0:	440a      	add	r2, r1
 80059a2:	4413      	add	r3, r2
 80059a4:	781b      	ldrb	r3, [r3, #0]
 80059a6:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 80059a8:	2300      	movs	r3, #0
 80059aa:	737b      	strb	r3, [r7, #13]
 80059ac:	e02d      	b.n	8005a0a <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 80059ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	da07      	bge.n	80059c6 <OLED_ShowChar+0x7a>
 80059b6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80059ba:	79b9      	ldrb	r1, [r7, #6]
 80059bc:	79fb      	ldrb	r3, [r7, #7]
 80059be:	4618      	mov	r0, r3
 80059c0:	f7ff ff6a 	bl	8005898 <OLED_DrawPoint>
 80059c4:	e00c      	b.n	80059e0 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 80059c6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	bf0c      	ite	eq
 80059ce:	2301      	moveq	r3, #1
 80059d0:	2300      	movne	r3, #0
 80059d2:	b2db      	uxtb	r3, r3
 80059d4:	461a      	mov	r2, r3
 80059d6:	79b9      	ldrb	r1, [r7, #6]
 80059d8:	79fb      	ldrb	r3, [r7, #7]
 80059da:	4618      	mov	r0, r3
 80059dc:	f7ff ff5c 	bl	8005898 <OLED_DrawPoint>
			temp<<=1;
 80059e0:	7bfb      	ldrb	r3, [r7, #15]
 80059e2:	005b      	lsls	r3, r3, #1
 80059e4:	73fb      	strb	r3, [r7, #15]
			y++;
 80059e6:	79bb      	ldrb	r3, [r7, #6]
 80059e8:	3301      	adds	r3, #1
 80059ea:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 80059ec:	79ba      	ldrb	r2, [r7, #6]
 80059ee:	7b3b      	ldrb	r3, [r7, #12]
 80059f0:	1ad2      	subs	r2, r2, r3
 80059f2:	793b      	ldrb	r3, [r7, #4]
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d105      	bne.n	8005a04 <OLED_ShowChar+0xb8>
			{
				y=y0;
 80059f8:	7b3b      	ldrb	r3, [r7, #12]
 80059fa:	71bb      	strb	r3, [r7, #6]
				x++;
 80059fc:	79fb      	ldrb	r3, [r7, #7]
 80059fe:	3301      	adds	r3, #1
 8005a00:	71fb      	strb	r3, [r7, #7]
				break;
 8005a02:	e005      	b.n	8005a10 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 8005a04:	7b7b      	ldrb	r3, [r7, #13]
 8005a06:	3301      	adds	r3, #1
 8005a08:	737b      	strb	r3, [r7, #13]
 8005a0a:	7b7b      	ldrb	r3, [r7, #13]
 8005a0c:	2b07      	cmp	r3, #7
 8005a0e:	d9ce      	bls.n	80059ae <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 8005a10:	7bbb      	ldrb	r3, [r7, #14]
 8005a12:	3301      	adds	r3, #1
 8005a14:	73bb      	strb	r3, [r7, #14]
 8005a16:	7bba      	ldrb	r2, [r7, #14]
 8005a18:	793b      	ldrb	r3, [r7, #4]
 8005a1a:	429a      	cmp	r2, r3
 8005a1c:	d3ad      	bcc.n	800597a <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 8005a1e:	bf00      	nop
 8005a20:	bf00      	nop
 8005a22:	3714      	adds	r7, #20
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd90      	pop	{r4, r7, pc}
 8005a28:	08005d34 	.word	0x08005d34
 8005a2c:	080061a8 	.word	0x080061a8

08005a30 <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b084      	sub	sp, #16
 8005a34:	af02      	add	r7, sp, #8
 8005a36:	4603      	mov	r3, r0
 8005a38:	603a      	str	r2, [r7, #0]
 8005a3a:	71fb      	strb	r3, [r7, #7]
 8005a3c:	460b      	mov	r3, r1
 8005a3e:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 8005a40:	e01f      	b.n	8005a82 <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 8005a42:	79fb      	ldrb	r3, [r7, #7]
 8005a44:	2b7a      	cmp	r3, #122	; 0x7a
 8005a46:	d904      	bls.n	8005a52 <OLED_ShowString+0x22>
 8005a48:	2300      	movs	r3, #0
 8005a4a:	71fb      	strb	r3, [r7, #7]
 8005a4c:	79bb      	ldrb	r3, [r7, #6]
 8005a4e:	3310      	adds	r3, #16
 8005a50:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 8005a52:	79bb      	ldrb	r3, [r7, #6]
 8005a54:	2b3a      	cmp	r3, #58	; 0x3a
 8005a56:	d905      	bls.n	8005a64 <OLED_ShowString+0x34>
 8005a58:	2300      	movs	r3, #0
 8005a5a:	71fb      	strb	r3, [r7, #7]
 8005a5c:	79fb      	ldrb	r3, [r7, #7]
 8005a5e:	71bb      	strb	r3, [r7, #6]
 8005a60:	f7ff fef4 	bl	800584c <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	781a      	ldrb	r2, [r3, #0]
 8005a68:	79b9      	ldrb	r1, [r7, #6]
 8005a6a:	79f8      	ldrb	r0, [r7, #7]
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	9300      	str	r3, [sp, #0]
 8005a70:	230c      	movs	r3, #12
 8005a72:	f7ff ff6b 	bl	800594c <OLED_ShowChar>
        x+=8;
 8005a76:	79fb      	ldrb	r3, [r7, #7]
 8005a78:	3308      	adds	r3, #8
 8005a7a:	71fb      	strb	r3, [r7, #7]
        p++;
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	3301      	adds	r3, #1
 8005a80:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	781b      	ldrb	r3, [r3, #0]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d1db      	bne.n	8005a42 <OLED_ShowString+0x12>
    }  
}	 
 8005a8a:	bf00      	nop
 8005a8c:	bf00      	nop
 8005a8e:	3708      	adds	r7, #8
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}

08005a94 <OLED_Init>:

void OLED_Init(void)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 8005a98:	f7fb fd14 	bl	80014c4 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 8005a9c:	4b41      	ldr	r3, [pc, #260]	; (8005ba4 <OLED_Init+0x110>)
 8005a9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aa0:	4a40      	ldr	r2, [pc, #256]	; (8005ba4 <OLED_Init+0x110>)
 8005aa2:	f023 0301 	bic.w	r3, r3, #1
 8005aa6:	6713      	str	r3, [r2, #112]	; 0x70
 8005aa8:	4b3e      	ldr	r3, [pc, #248]	; (8005ba4 <OLED_Init+0x110>)
 8005aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aac:	4a3d      	ldr	r2, [pc, #244]	; (8005ba4 <OLED_Init+0x110>)
 8005aae:	f023 0304 	bic.w	r3, r3, #4
 8005ab2:	6713      	str	r3, [r2, #112]	; 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 8005ab4:	f7fb fd1a 	bl	80014ec <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 8005ab8:	2200      	movs	r2, #0
 8005aba:	2180      	movs	r1, #128	; 0x80
 8005abc:	483a      	ldr	r0, [pc, #232]	; (8005ba8 <OLED_Init+0x114>)
 8005abe:	f7fb fce7 	bl	8001490 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8005ac2:	2064      	movs	r0, #100	; 0x64
 8005ac4:	f7fb fa3e 	bl	8000f44 <HAL_Delay>
	OLED_RST_Set();
 8005ac8:	2201      	movs	r2, #1
 8005aca:	2180      	movs	r1, #128	; 0x80
 8005acc:	4836      	ldr	r0, [pc, #216]	; (8005ba8 <OLED_Init+0x114>)
 8005ace:	f7fb fcdf 	bl	8001490 <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 8005ad2:	2100      	movs	r1, #0
 8005ad4:	20ae      	movs	r0, #174	; 0xae
 8005ad6:	f7ff fe6f 	bl	80057b8 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 8005ada:	2100      	movs	r1, #0
 8005adc:	20d5      	movs	r0, #213	; 0xd5
 8005ade:	f7ff fe6b 	bl	80057b8 <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 8005ae2:	2100      	movs	r1, #0
 8005ae4:	2050      	movs	r0, #80	; 0x50
 8005ae6:	f7ff fe67 	bl	80057b8 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 8005aea:	2100      	movs	r1, #0
 8005aec:	20a8      	movs	r0, #168	; 0xa8
 8005aee:	f7ff fe63 	bl	80057b8 <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 8005af2:	2100      	movs	r1, #0
 8005af4:	203f      	movs	r0, #63	; 0x3f
 8005af6:	f7ff fe5f 	bl	80057b8 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 8005afa:	2100      	movs	r1, #0
 8005afc:	20d3      	movs	r0, #211	; 0xd3
 8005afe:	f7ff fe5b 	bl	80057b8 <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 8005b02:	2100      	movs	r1, #0
 8005b04:	2000      	movs	r0, #0
 8005b06:	f7ff fe57 	bl	80057b8 <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 8005b0a:	2100      	movs	r1, #0
 8005b0c:	2040      	movs	r0, #64	; 0x40
 8005b0e:	f7ff fe53 	bl	80057b8 <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 8005b12:	2100      	movs	r1, #0
 8005b14:	208d      	movs	r0, #141	; 0x8d
 8005b16:	f7ff fe4f 	bl	80057b8 <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 8005b1a:	2100      	movs	r1, #0
 8005b1c:	2014      	movs	r0, #20
 8005b1e:	f7ff fe4b 	bl	80057b8 <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 8005b22:	2100      	movs	r1, #0
 8005b24:	2020      	movs	r0, #32
 8005b26:	f7ff fe47 	bl	80057b8 <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 8005b2a:	2100      	movs	r1, #0
 8005b2c:	2002      	movs	r0, #2
 8005b2e:	f7ff fe43 	bl	80057b8 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 8005b32:	2100      	movs	r1, #0
 8005b34:	20a1      	movs	r0, #161	; 0xa1
 8005b36:	f7ff fe3f 	bl	80057b8 <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 8005b3a:	2100      	movs	r1, #0
 8005b3c:	20c0      	movs	r0, #192	; 0xc0
 8005b3e:	f7ff fe3b 	bl	80057b8 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 8005b42:	2100      	movs	r1, #0
 8005b44:	20da      	movs	r0, #218	; 0xda
 8005b46:	f7ff fe37 	bl	80057b8 <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 8005b4a:	2100      	movs	r1, #0
 8005b4c:	2012      	movs	r0, #18
 8005b4e:	f7ff fe33 	bl	80057b8 <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 8005b52:	2100      	movs	r1, #0
 8005b54:	2081      	movs	r0, #129	; 0x81
 8005b56:	f7ff fe2f 	bl	80057b8 <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 8005b5a:	2100      	movs	r1, #0
 8005b5c:	20ef      	movs	r0, #239	; 0xef
 8005b5e:	f7ff fe2b 	bl	80057b8 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 8005b62:	2100      	movs	r1, #0
 8005b64:	20d9      	movs	r0, #217	; 0xd9
 8005b66:	f7ff fe27 	bl	80057b8 <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 8005b6a:	2100      	movs	r1, #0
 8005b6c:	20f1      	movs	r0, #241	; 0xf1
 8005b6e:	f7ff fe23 	bl	80057b8 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 8005b72:	2100      	movs	r1, #0
 8005b74:	20db      	movs	r0, #219	; 0xdb
 8005b76:	f7ff fe1f 	bl	80057b8 <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 8005b7a:	2100      	movs	r1, #0
 8005b7c:	2030      	movs	r0, #48	; 0x30
 8005b7e:	f7ff fe1b 	bl	80057b8 <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 8005b82:	2100      	movs	r1, #0
 8005b84:	20a4      	movs	r0, #164	; 0xa4
 8005b86:	f7ff fe17 	bl	80057b8 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 8005b8a:	2100      	movs	r1, #0
 8005b8c:	20a6      	movs	r0, #166	; 0xa6
 8005b8e:	f7ff fe13 	bl	80057b8 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 8005b92:	2100      	movs	r1, #0
 8005b94:	20af      	movs	r0, #175	; 0xaf
 8005b96:	f7ff fe0f 	bl	80057b8 <OLED_WR_Byte>
	OLED_Clear(); 
 8005b9a:	f7ff fe57 	bl	800584c <OLED_Clear>
 8005b9e:	bf00      	nop
 8005ba0:	bd80      	pop	{r7, pc}
 8005ba2:	bf00      	nop
 8005ba4:	40023800 	.word	0x40023800
 8005ba8:	40021000 	.word	0x40021000

08005bac <__libc_init_array>:
 8005bac:	b570      	push	{r4, r5, r6, lr}
 8005bae:	4d0d      	ldr	r5, [pc, #52]	; (8005be4 <__libc_init_array+0x38>)
 8005bb0:	4c0d      	ldr	r4, [pc, #52]	; (8005be8 <__libc_init_array+0x3c>)
 8005bb2:	1b64      	subs	r4, r4, r5
 8005bb4:	10a4      	asrs	r4, r4, #2
 8005bb6:	2600      	movs	r6, #0
 8005bb8:	42a6      	cmp	r6, r4
 8005bba:	d109      	bne.n	8005bd0 <__libc_init_array+0x24>
 8005bbc:	4d0b      	ldr	r5, [pc, #44]	; (8005bec <__libc_init_array+0x40>)
 8005bbe:	4c0c      	ldr	r4, [pc, #48]	; (8005bf0 <__libc_init_array+0x44>)
 8005bc0:	f000 f82e 	bl	8005c20 <_init>
 8005bc4:	1b64      	subs	r4, r4, r5
 8005bc6:	10a4      	asrs	r4, r4, #2
 8005bc8:	2600      	movs	r6, #0
 8005bca:	42a6      	cmp	r6, r4
 8005bcc:	d105      	bne.n	8005bda <__libc_init_array+0x2e>
 8005bce:	bd70      	pop	{r4, r5, r6, pc}
 8005bd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bd4:	4798      	blx	r3
 8005bd6:	3601      	adds	r6, #1
 8005bd8:	e7ee      	b.n	8005bb8 <__libc_init_array+0xc>
 8005bda:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bde:	4798      	blx	r3
 8005be0:	3601      	adds	r6, #1
 8005be2:	e7f2      	b.n	8005bca <__libc_init_array+0x1e>
 8005be4:	080067a0 	.word	0x080067a0
 8005be8:	080067a0 	.word	0x080067a0
 8005bec:	080067a0 	.word	0x080067a0
 8005bf0:	080067a4 	.word	0x080067a4

08005bf4 <memcpy>:
 8005bf4:	440a      	add	r2, r1
 8005bf6:	4291      	cmp	r1, r2
 8005bf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8005bfc:	d100      	bne.n	8005c00 <memcpy+0xc>
 8005bfe:	4770      	bx	lr
 8005c00:	b510      	push	{r4, lr}
 8005c02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c06:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c0a:	4291      	cmp	r1, r2
 8005c0c:	d1f9      	bne.n	8005c02 <memcpy+0xe>
 8005c0e:	bd10      	pop	{r4, pc}

08005c10 <memset>:
 8005c10:	4402      	add	r2, r0
 8005c12:	4603      	mov	r3, r0
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d100      	bne.n	8005c1a <memset+0xa>
 8005c18:	4770      	bx	lr
 8005c1a:	f803 1b01 	strb.w	r1, [r3], #1
 8005c1e:	e7f9      	b.n	8005c14 <memset+0x4>

08005c20 <_init>:
 8005c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c22:	bf00      	nop
 8005c24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c26:	bc08      	pop	{r3}
 8005c28:	469e      	mov	lr, r3
 8005c2a:	4770      	bx	lr

08005c2c <_fini>:
 8005c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c2e:	bf00      	nop
 8005c30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c32:	bc08      	pop	{r3}
 8005c34:	469e      	mov	lr, r3
 8005c36:	4770      	bx	lr
