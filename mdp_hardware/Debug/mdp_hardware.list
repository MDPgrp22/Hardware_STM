
mdp_hardware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000066a4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bb8  08006834  08006834  00016834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080073ec  080073ec  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080073ec  080073ec  000173ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080073f4  080073f4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080073f4  080073f4  000173f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080073f8  080073f8  000173f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080073fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00004ebc  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004f30  20004f30  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017fa9  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000030f2  00000000  00000000  0003804d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012c0  00000000  00000000  0003b140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001178  00000000  00000000  0003c400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000035ef  00000000  00000000  0003d578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014b0f  00000000  00000000  00040b67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2dfc  00000000  00000000  00055676  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00128472  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005200  00000000  00000000  001284c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800681c 	.word	0x0800681c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	0800681c 	.word	0x0800681c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056c:	f000 fe54 	bl	8001218 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000570:	f000 f84a 	bl	8000608 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000574:	f000 fa96 	bl	8000aa4 <MX_GPIO_Init>
  MX_TIM8_Init();
 8000578:	f000 f9ea 	bl	8000950 <MX_TIM8_Init>
  MX_TIM2_Init();
 800057c:	f000 f940 	bl	8000800 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000580:	f000 f992 	bl	80008a8 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000584:	f000 f89e 	bl	80006c4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  OLED_Init();
 8000588:	f005 fc5c 	bl	8005e44 <OLED_Init>
//  show();	// To print on the OLED
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800058c:	f002 fd64 	bl	8003058 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000590:	4a11      	ldr	r2, [pc, #68]	; (80005d8 <main+0x70>)
 8000592:	2100      	movs	r1, #0
 8000594:	4811      	ldr	r0, [pc, #68]	; (80005dc <main+0x74>)
 8000596:	f002 fda9 	bl	80030ec <osThreadNew>
 800059a:	4603      	mov	r3, r0
 800059c:	4a10      	ldr	r2, [pc, #64]	; (80005e0 <main+0x78>)
 800059e:	6013      	str	r3, [r2, #0]

  /* creation of MotorTask */
  MotorTaskHandle = osThreadNew(motor, NULL, &MotorTask_attributes);
 80005a0:	4a10      	ldr	r2, [pc, #64]	; (80005e4 <main+0x7c>)
 80005a2:	2100      	movs	r1, #0
 80005a4:	4810      	ldr	r0, [pc, #64]	; (80005e8 <main+0x80>)
 80005a6:	f002 fda1 	bl	80030ec <osThreadNew>
 80005aa:	4603      	mov	r3, r0
 80005ac:	4a0f      	ldr	r2, [pc, #60]	; (80005ec <main+0x84>)
 80005ae:	6013      	str	r3, [r2, #0]

  /* creation of showOLED */
  showOLEDHandle = osThreadNew(showoled, NULL, &showOLED_attributes);
 80005b0:	4a0f      	ldr	r2, [pc, #60]	; (80005f0 <main+0x88>)
 80005b2:	2100      	movs	r1, #0
 80005b4:	480f      	ldr	r0, [pc, #60]	; (80005f4 <main+0x8c>)
 80005b6:	f002 fd99 	bl	80030ec <osThreadNew>
 80005ba:	4603      	mov	r3, r0
 80005bc:	4a0e      	ldr	r2, [pc, #56]	; (80005f8 <main+0x90>)
 80005be:	6013      	str	r3, [r2, #0]

  /* creation of EncoderTask */
  EncoderTaskHandle = osThreadNew(encoder_task, NULL, &EncoderTask_attributes);
 80005c0:	4a0e      	ldr	r2, [pc, #56]	; (80005fc <main+0x94>)
 80005c2:	2100      	movs	r1, #0
 80005c4:	480e      	ldr	r0, [pc, #56]	; (8000600 <main+0x98>)
 80005c6:	f002 fd91 	bl	80030ec <osThreadNew>
 80005ca:	4603      	mov	r3, r0
 80005cc:	4a0d      	ldr	r2, [pc, #52]	; (8000604 <main+0x9c>)
 80005ce:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005d0:	f002 fd66 	bl	80030a0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005d4:	e7fe      	b.n	80005d4 <main+0x6c>
 80005d6:	bf00      	nop
 80005d8:	080068b4 	.word	0x080068b4
 80005dc:	08000b91 	.word	0x08000b91
 80005e0:	200049ac 	.word	0x200049ac
 80005e4:	080068d8 	.word	0x080068d8
 80005e8:	08000ba1 	.word	0x08000ba1
 80005ec:	200049f8 	.word	0x200049f8
 80005f0:	080068fc 	.word	0x080068fc
 80005f4:	08000d35 	.word	0x08000d35
 80005f8:	20004ad8 	.word	0x20004ad8
 80005fc:	08006920 	.word	0x08006920
 8000600:	08000d75 	.word	0x08000d75
 8000604:	200049fc 	.word	0x200049fc

08000608 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b094      	sub	sp, #80	; 0x50
 800060c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060e:	f107 0320 	add.w	r3, r7, #32
 8000612:	2230      	movs	r2, #48	; 0x30
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f005 fcd8 	bl	8005fcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800061c:	f107 030c 	add.w	r3, r7, #12
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
 800062a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800062c:	2300      	movs	r3, #0
 800062e:	60bb      	str	r3, [r7, #8]
 8000630:	4b22      	ldr	r3, [pc, #136]	; (80006bc <SystemClock_Config+0xb4>)
 8000632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000634:	4a21      	ldr	r2, [pc, #132]	; (80006bc <SystemClock_Config+0xb4>)
 8000636:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800063a:	6413      	str	r3, [r2, #64]	; 0x40
 800063c:	4b1f      	ldr	r3, [pc, #124]	; (80006bc <SystemClock_Config+0xb4>)
 800063e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000640:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000644:	60bb      	str	r3, [r7, #8]
 8000646:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000648:	2300      	movs	r3, #0
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	4b1c      	ldr	r3, [pc, #112]	; (80006c0 <SystemClock_Config+0xb8>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a1b      	ldr	r2, [pc, #108]	; (80006c0 <SystemClock_Config+0xb8>)
 8000652:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000656:	6013      	str	r3, [r2, #0]
 8000658:	4b19      	ldr	r3, [pc, #100]	; (80006c0 <SystemClock_Config+0xb8>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000660:	607b      	str	r3, [r7, #4]
 8000662:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000664:	2302      	movs	r3, #2
 8000666:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000668:	2301      	movs	r3, #1
 800066a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800066c:	2310      	movs	r3, #16
 800066e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000670:	2300      	movs	r3, #0
 8000672:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000674:	f107 0320 	add.w	r3, r7, #32
 8000678:	4618      	mov	r0, r3
 800067a:	f001 f927 	bl	80018cc <HAL_RCC_OscConfig>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000684:	f000 fbce 	bl	8000e24 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000688:	230f      	movs	r3, #15
 800068a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800068c:	2300      	movs	r3, #0
 800068e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000690:	2300      	movs	r3, #0
 8000692:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000694:	2300      	movs	r3, #0
 8000696:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000698:	2300      	movs	r3, #0
 800069a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800069c:	f107 030c 	add.w	r3, r7, #12
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f001 fb8a 	bl	8001dbc <HAL_RCC_ClockConfig>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80006ae:	f000 fbb9 	bl	8000e24 <Error_Handler>
  }
}
 80006b2:	bf00      	nop
 80006b4:	3750      	adds	r7, #80	; 0x50
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	40023800 	.word	0x40023800
 80006c0:	40007000 	.word	0x40007000

080006c4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b096      	sub	sp, #88	; 0x58
 80006c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006ca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80006ce:	2200      	movs	r2, #0
 80006d0:	601a      	str	r2, [r3, #0]
 80006d2:	605a      	str	r2, [r3, #4]
 80006d4:	609a      	str	r2, [r3, #8]
 80006d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006d8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	605a      	str	r2, [r3, #4]
 80006ec:	609a      	str	r2, [r3, #8]
 80006ee:	60da      	str	r2, [r3, #12]
 80006f0:	611a      	str	r2, [r3, #16]
 80006f2:	615a      	str	r2, [r3, #20]
 80006f4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80006f6:	1d3b      	adds	r3, r7, #4
 80006f8:	2220      	movs	r2, #32
 80006fa:	2100      	movs	r1, #0
 80006fc:	4618      	mov	r0, r3
 80006fe:	f005 fc65 	bl	8005fcc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000702:	4b3d      	ldr	r3, [pc, #244]	; (80007f8 <MX_TIM1_Init+0x134>)
 8000704:	4a3d      	ldr	r2, [pc, #244]	; (80007fc <MX_TIM1_Init+0x138>)
 8000706:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160;
 8000708:	4b3b      	ldr	r3, [pc, #236]	; (80007f8 <MX_TIM1_Init+0x134>)
 800070a:	22a0      	movs	r2, #160	; 0xa0
 800070c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800070e:	4b3a      	ldr	r3, [pc, #232]	; (80007f8 <MX_TIM1_Init+0x134>)
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8000714:	4b38      	ldr	r3, [pc, #224]	; (80007f8 <MX_TIM1_Init+0x134>)
 8000716:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800071a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800071c:	4b36      	ldr	r3, [pc, #216]	; (80007f8 <MX_TIM1_Init+0x134>)
 800071e:	2200      	movs	r2, #0
 8000720:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000722:	4b35      	ldr	r3, [pc, #212]	; (80007f8 <MX_TIM1_Init+0x134>)
 8000724:	2200      	movs	r2, #0
 8000726:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000728:	4b33      	ldr	r3, [pc, #204]	; (80007f8 <MX_TIM1_Init+0x134>)
 800072a:	2280      	movs	r2, #128	; 0x80
 800072c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800072e:	4832      	ldr	r0, [pc, #200]	; (80007f8 <MX_TIM1_Init+0x134>)
 8000730:	f001 fce0 	bl	80020f4 <HAL_TIM_Base_Init>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800073a:	f000 fb73 	bl	8000e24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800073e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000742:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000744:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000748:	4619      	mov	r1, r3
 800074a:	482b      	ldr	r0, [pc, #172]	; (80007f8 <MX_TIM1_Init+0x134>)
 800074c:	f001 ffaa 	bl	80026a4 <HAL_TIM_ConfigClockSource>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000756:	f000 fb65 	bl	8000e24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800075a:	4827      	ldr	r0, [pc, #156]	; (80007f8 <MX_TIM1_Init+0x134>)
 800075c:	f001 fd19 	bl	8002192 <HAL_TIM_PWM_Init>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000766:	f000 fb5d 	bl	8000e24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800076a:	2300      	movs	r3, #0
 800076c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800076e:	2300      	movs	r3, #0
 8000770:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000772:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000776:	4619      	mov	r1, r3
 8000778:	481f      	ldr	r0, [pc, #124]	; (80007f8 <MX_TIM1_Init+0x134>)
 800077a:	f002 fb6b 	bl	8002e54 <HAL_TIMEx_MasterConfigSynchronization>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000784:	f000 fb4e 	bl	8000e24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000788:	2360      	movs	r3, #96	; 0x60
 800078a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800078c:	2300      	movs	r3, #0
 800078e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000790:	2300      	movs	r3, #0
 8000792:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000794:	2300      	movs	r3, #0
 8000796:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000798:	2300      	movs	r3, #0
 800079a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800079c:	2300      	movs	r3, #0
 800079e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80007a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007a4:	220c      	movs	r2, #12
 80007a6:	4619      	mov	r1, r3
 80007a8:	4813      	ldr	r0, [pc, #76]	; (80007f8 <MX_TIM1_Init+0x134>)
 80007aa:	f001 feb9 	bl	8002520 <HAL_TIM_PWM_ConfigChannel>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 80007b4:	f000 fb36 	bl	8000e24 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007b8:	2300      	movs	r3, #0
 80007ba:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007bc:	2300      	movs	r3, #0
 80007be:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007c0:	2300      	movs	r3, #0
 80007c2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80007c4:	2300      	movs	r3, #0
 80007c6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007c8:	2300      	movs	r3, #0
 80007ca:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007d0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007d2:	2300      	movs	r3, #0
 80007d4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80007d6:	1d3b      	adds	r3, r7, #4
 80007d8:	4619      	mov	r1, r3
 80007da:	4807      	ldr	r0, [pc, #28]	; (80007f8 <MX_TIM1_Init+0x134>)
 80007dc:	f002 fbb6 	bl	8002f4c <HAL_TIMEx_ConfigBreakDeadTime>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 80007e6:	f000 fb1d 	bl	8000e24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80007ea:	4803      	ldr	r0, [pc, #12]	; (80007f8 <MX_TIM1_Init+0x134>)
 80007ec:	f000 fc44 	bl	8001078 <HAL_TIM_MspPostInit>

}
 80007f0:	bf00      	nop
 80007f2:	3758      	adds	r7, #88	; 0x58
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	20004a48 	.word	0x20004a48
 80007fc:	40010000 	.word	0x40010000

08000800 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b08c      	sub	sp, #48	; 0x30
 8000804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000806:	f107 030c 	add.w	r3, r7, #12
 800080a:	2224      	movs	r2, #36	; 0x24
 800080c:	2100      	movs	r1, #0
 800080e:	4618      	mov	r0, r3
 8000810:	f005 fbdc 	bl	8005fcc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000814:	1d3b      	adds	r3, r7, #4
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800081c:	4b21      	ldr	r3, [pc, #132]	; (80008a4 <MX_TIM2_Init+0xa4>)
 800081e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000822:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000824:	4b1f      	ldr	r3, [pc, #124]	; (80008a4 <MX_TIM2_Init+0xa4>)
 8000826:	2200      	movs	r2, #0
 8000828:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800082a:	4b1e      	ldr	r3, [pc, #120]	; (80008a4 <MX_TIM2_Init+0xa4>)
 800082c:	2200      	movs	r2, #0
 800082e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000830:	4b1c      	ldr	r3, [pc, #112]	; (80008a4 <MX_TIM2_Init+0xa4>)
 8000832:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000836:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000838:	4b1a      	ldr	r3, [pc, #104]	; (80008a4 <MX_TIM2_Init+0xa4>)
 800083a:	2200      	movs	r2, #0
 800083c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800083e:	4b19      	ldr	r3, [pc, #100]	; (80008a4 <MX_TIM2_Init+0xa4>)
 8000840:	2200      	movs	r2, #0
 8000842:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000844:	2303      	movs	r3, #3
 8000846:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000848:	2300      	movs	r3, #0
 800084a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800084c:	2301      	movs	r3, #1
 800084e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000850:	2300      	movs	r3, #0
 8000852:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8000854:	230a      	movs	r3, #10
 8000856:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000858:	2300      	movs	r3, #0
 800085a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800085c:	2301      	movs	r3, #1
 800085e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000860:	2300      	movs	r3, #0
 8000862:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8000864:	230a      	movs	r3, #10
 8000866:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000868:	f107 030c 	add.w	r3, r7, #12
 800086c:	4619      	mov	r1, r3
 800086e:	480d      	ldr	r0, [pc, #52]	; (80008a4 <MX_TIM2_Init+0xa4>)
 8000870:	f001 fdb0 	bl	80023d4 <HAL_TIM_Encoder_Init>
 8000874:	4603      	mov	r3, r0
 8000876:	2b00      	cmp	r3, #0
 8000878:	d001      	beq.n	800087e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800087a:	f000 fad3 	bl	8000e24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800087e:	2300      	movs	r3, #0
 8000880:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000882:	2300      	movs	r3, #0
 8000884:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000886:	1d3b      	adds	r3, r7, #4
 8000888:	4619      	mov	r1, r3
 800088a:	4806      	ldr	r0, [pc, #24]	; (80008a4 <MX_TIM2_Init+0xa4>)
 800088c:	f002 fae2 	bl	8002e54 <HAL_TIMEx_MasterConfigSynchronization>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000896:	f000 fac5 	bl	8000e24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800089a:	bf00      	nop
 800089c:	3730      	adds	r7, #48	; 0x30
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	20004a90 	.word	0x20004a90

080008a8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b08c      	sub	sp, #48	; 0x30
 80008ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80008ae:	f107 030c 	add.w	r3, r7, #12
 80008b2:	2224      	movs	r2, #36	; 0x24
 80008b4:	2100      	movs	r1, #0
 80008b6:	4618      	mov	r0, r3
 80008b8:	f005 fb88 	bl	8005fcc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008bc:	1d3b      	adds	r3, r7, #4
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008c4:	4b20      	ldr	r3, [pc, #128]	; (8000948 <MX_TIM3_Init+0xa0>)
 80008c6:	4a21      	ldr	r2, [pc, #132]	; (800094c <MX_TIM3_Init+0xa4>)
 80008c8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80008ca:	4b1f      	ldr	r3, [pc, #124]	; (8000948 <MX_TIM3_Init+0xa0>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008d0:	4b1d      	ldr	r3, [pc, #116]	; (8000948 <MX_TIM3_Init+0xa0>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80008d6:	4b1c      	ldr	r3, [pc, #112]	; (8000948 <MX_TIM3_Init+0xa0>)
 80008d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008dc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008de:	4b1a      	ldr	r3, [pc, #104]	; (8000948 <MX_TIM3_Init+0xa0>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008e4:	4b18      	ldr	r3, [pc, #96]	; (8000948 <MX_TIM3_Init+0xa0>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80008ea:	2303      	movs	r3, #3
 80008ec:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80008ee:	2300      	movs	r3, #0
 80008f0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80008f2:	2301      	movs	r3, #1
 80008f4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80008f6:	2300      	movs	r3, #0
 80008f8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80008fa:	230a      	movs	r3, #10
 80008fc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80008fe:	2300      	movs	r3, #0
 8000900:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000902:	2301      	movs	r3, #1
 8000904:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000906:	2300      	movs	r3, #0
 8000908:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 800090a:	230a      	movs	r3, #10
 800090c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800090e:	f107 030c 	add.w	r3, r7, #12
 8000912:	4619      	mov	r1, r3
 8000914:	480c      	ldr	r0, [pc, #48]	; (8000948 <MX_TIM3_Init+0xa0>)
 8000916:	f001 fd5d 	bl	80023d4 <HAL_TIM_Encoder_Init>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000920:	f000 fa80 	bl	8000e24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000924:	2300      	movs	r3, #0
 8000926:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000928:	2300      	movs	r3, #0
 800092a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800092c:	1d3b      	adds	r3, r7, #4
 800092e:	4619      	mov	r1, r3
 8000930:	4805      	ldr	r0, [pc, #20]	; (8000948 <MX_TIM3_Init+0xa0>)
 8000932:	f002 fa8f 	bl	8002e54 <HAL_TIMEx_MasterConfigSynchronization>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800093c:	f000 fa72 	bl	8000e24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000940:	bf00      	nop
 8000942:	3730      	adds	r7, #48	; 0x30
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	20004a00 	.word	0x20004a00
 800094c:	40000400 	.word	0x40000400

08000950 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b096      	sub	sp, #88	; 0x58
 8000954:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000956:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800095a:	2200      	movs	r2, #0
 800095c:	601a      	str	r2, [r3, #0]
 800095e:	605a      	str	r2, [r3, #4]
 8000960:	609a      	str	r2, [r3, #8]
 8000962:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000964:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
 800096c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800096e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000972:	2200      	movs	r2, #0
 8000974:	601a      	str	r2, [r3, #0]
 8000976:	605a      	str	r2, [r3, #4]
 8000978:	609a      	str	r2, [r3, #8]
 800097a:	60da      	str	r2, [r3, #12]
 800097c:	611a      	str	r2, [r3, #16]
 800097e:	615a      	str	r2, [r3, #20]
 8000980:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000982:	1d3b      	adds	r3, r7, #4
 8000984:	2220      	movs	r2, #32
 8000986:	2100      	movs	r1, #0
 8000988:	4618      	mov	r0, r3
 800098a:	f005 fb1f 	bl	8005fcc <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800098e:	4b43      	ldr	r3, [pc, #268]	; (8000a9c <MX_TIM8_Init+0x14c>)
 8000990:	4a43      	ldr	r2, [pc, #268]	; (8000aa0 <MX_TIM8_Init+0x150>)
 8000992:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000994:	4b41      	ldr	r3, [pc, #260]	; (8000a9c <MX_TIM8_Init+0x14c>)
 8000996:	2200      	movs	r2, #0
 8000998:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800099a:	4b40      	ldr	r3, [pc, #256]	; (8000a9c <MX_TIM8_Init+0x14c>)
 800099c:	2200      	movs	r2, #0
 800099e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 80009a0:	4b3e      	ldr	r3, [pc, #248]	; (8000a9c <MX_TIM8_Init+0x14c>)
 80009a2:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80009a6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009a8:	4b3c      	ldr	r3, [pc, #240]	; (8000a9c <MX_TIM8_Init+0x14c>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80009ae:	4b3b      	ldr	r3, [pc, #236]	; (8000a9c <MX_TIM8_Init+0x14c>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009b4:	4b39      	ldr	r3, [pc, #228]	; (8000a9c <MX_TIM8_Init+0x14c>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80009ba:	4838      	ldr	r0, [pc, #224]	; (8000a9c <MX_TIM8_Init+0x14c>)
 80009bc:	f001 fb9a 	bl	80020f4 <HAL_TIM_Base_Init>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80009c6:	f000 fa2d 	bl	8000e24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009ce:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80009d0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80009d4:	4619      	mov	r1, r3
 80009d6:	4831      	ldr	r0, [pc, #196]	; (8000a9c <MX_TIM8_Init+0x14c>)
 80009d8:	f001 fe64 	bl	80026a4 <HAL_TIM_ConfigClockSource>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d001      	beq.n	80009e6 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80009e2:	f000 fa1f 	bl	8000e24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80009e6:	482d      	ldr	r0, [pc, #180]	; (8000a9c <MX_TIM8_Init+0x14c>)
 80009e8:	f001 fbd3 	bl	8002192 <HAL_TIM_PWM_Init>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80009f2:	f000 fa17 	bl	8000e24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009f6:	2300      	movs	r3, #0
 80009f8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009fa:	2300      	movs	r3, #0
 80009fc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80009fe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a02:	4619      	mov	r1, r3
 8000a04:	4825      	ldr	r0, [pc, #148]	; (8000a9c <MX_TIM8_Init+0x14c>)
 8000a06:	f002 fa25 	bl	8002e54 <HAL_TIMEx_MasterConfigSynchronization>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8000a10:	f000 fa08 	bl	8000e24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a14:	2360      	movs	r3, #96	; 0x60
 8000a16:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a20:	2300      	movs	r3, #0
 8000a22:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a24:	2300      	movs	r3, #0
 8000a26:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a34:	2200      	movs	r2, #0
 8000a36:	4619      	mov	r1, r3
 8000a38:	4818      	ldr	r0, [pc, #96]	; (8000a9c <MX_TIM8_Init+0x14c>)
 8000a3a:	f001 fd71 	bl	8002520 <HAL_TIM_PWM_ConfigChannel>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8000a44:	f000 f9ee 	bl	8000e24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a4c:	2204      	movs	r2, #4
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4812      	ldr	r0, [pc, #72]	; (8000a9c <MX_TIM8_Init+0x14c>)
 8000a52:	f001 fd65 	bl	8002520 <HAL_TIM_PWM_ConfigChannel>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8000a5c:	f000 f9e2 	bl	8000e24 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a60:	2300      	movs	r3, #0
 8000a62:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a64:	2300      	movs	r3, #0
 8000a66:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a70:	2300      	movs	r3, #0
 8000a72:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a78:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000a7e:	1d3b      	adds	r3, r7, #4
 8000a80:	4619      	mov	r1, r3
 8000a82:	4806      	ldr	r0, [pc, #24]	; (8000a9c <MX_TIM8_Init+0x14c>)
 8000a84:	f002 fa62 	bl	8002f4c <HAL_TIMEx_ConfigBreakDeadTime>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8000a8e:	f000 f9c9 	bl	8000e24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000a92:	bf00      	nop
 8000a94:	3758      	adds	r7, #88	; 0x58
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	200049b0 	.word	0x200049b0
 8000aa0:	40010400 	.word	0x40010400

08000aa4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b08a      	sub	sp, #40	; 0x28
 8000aa8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aaa:	f107 0314 	add.w	r3, r7, #20
 8000aae:	2200      	movs	r2, #0
 8000ab0:	601a      	str	r2, [r3, #0]
 8000ab2:	605a      	str	r2, [r3, #4]
 8000ab4:	609a      	str	r2, [r3, #8]
 8000ab6:	60da      	str	r2, [r3, #12]
 8000ab8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	613b      	str	r3, [r7, #16]
 8000abe:	4b31      	ldr	r3, [pc, #196]	; (8000b84 <MX_GPIO_Init+0xe0>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	4a30      	ldr	r2, [pc, #192]	; (8000b84 <MX_GPIO_Init+0xe0>)
 8000ac4:	f043 0310 	orr.w	r3, r3, #16
 8000ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aca:	4b2e      	ldr	r3, [pc, #184]	; (8000b84 <MX_GPIO_Init+0xe0>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ace:	f003 0310 	and.w	r3, r3, #16
 8000ad2:	613b      	str	r3, [r7, #16]
 8000ad4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	60fb      	str	r3, [r7, #12]
 8000ada:	4b2a      	ldr	r3, [pc, #168]	; (8000b84 <MX_GPIO_Init+0xe0>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	4a29      	ldr	r2, [pc, #164]	; (8000b84 <MX_GPIO_Init+0xe0>)
 8000ae0:	f043 0301 	orr.w	r3, r3, #1
 8000ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae6:	4b27      	ldr	r3, [pc, #156]	; (8000b84 <MX_GPIO_Init+0xe0>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	f003 0301 	and.w	r3, r3, #1
 8000aee:	60fb      	str	r3, [r7, #12]
 8000af0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	60bb      	str	r3, [r7, #8]
 8000af6:	4b23      	ldr	r3, [pc, #140]	; (8000b84 <MX_GPIO_Init+0xe0>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	4a22      	ldr	r2, [pc, #136]	; (8000b84 <MX_GPIO_Init+0xe0>)
 8000afc:	f043 0304 	orr.w	r3, r3, #4
 8000b00:	6313      	str	r3, [r2, #48]	; 0x30
 8000b02:	4b20      	ldr	r3, [pc, #128]	; (8000b84 <MX_GPIO_Init+0xe0>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	f003 0304 	and.w	r3, r3, #4
 8000b0a:	60bb      	str	r3, [r7, #8]
 8000b0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	607b      	str	r3, [r7, #4]
 8000b12:	4b1c      	ldr	r3, [pc, #112]	; (8000b84 <MX_GPIO_Init+0xe0>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	4a1b      	ldr	r2, [pc, #108]	; (8000b84 <MX_GPIO_Init+0xe0>)
 8000b18:	f043 0302 	orr.w	r3, r3, #2
 8000b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1e:	4b19      	ldr	r3, [pc, #100]	; (8000b84 <MX_GPIO_Init+0xe0>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	f003 0302 	and.w	r3, r3, #2
 8000b26:	607b      	str	r3, [r7, #4]
 8000b28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	f44f 61bc 	mov.w	r1, #1504	; 0x5e0
 8000b30:	4815      	ldr	r0, [pc, #84]	; (8000b88 <MX_GPIO_Init+0xe4>)
 8000b32:	f000 fe89 	bl	8001848 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin, GPIO_PIN_RESET);
 8000b36:	2200      	movs	r2, #0
 8000b38:	213c      	movs	r1, #60	; 0x3c
 8000b3a:	4814      	ldr	r0, [pc, #80]	; (8000b8c <MX_GPIO_Init+0xe8>)
 8000b3c:	f000 fe84 	bl	8001848 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin
                           LED3_Pin */
  GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 8000b40:	f44f 63bc 	mov.w	r3, #1504	; 0x5e0
 8000b44:	617b      	str	r3, [r7, #20]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b46:	2301      	movs	r3, #1
 8000b48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b52:	f107 0314 	add.w	r3, r7, #20
 8000b56:	4619      	mov	r1, r3
 8000b58:	480b      	ldr	r0, [pc, #44]	; (8000b88 <MX_GPIO_Init+0xe4>)
 8000b5a:	f000 fcd9 	bl	8001510 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin BIN1_Pin BIN2_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin;
 8000b5e:	233c      	movs	r3, #60	; 0x3c
 8000b60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b62:	2301      	movs	r3, #1
 8000b64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6e:	f107 0314 	add.w	r3, r7, #20
 8000b72:	4619      	mov	r1, r3
 8000b74:	4805      	ldr	r0, [pc, #20]	; (8000b8c <MX_GPIO_Init+0xe8>)
 8000b76:	f000 fccb 	bl	8001510 <HAL_GPIO_Init>

}
 8000b7a:	bf00      	nop
 8000b7c:	3728      	adds	r7, #40	; 0x28
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40023800 	.word	0x40023800
 8000b88:	40021000 	.word	0x40021000
 8000b8c:	40020000 	.word	0x40020000

08000b90 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000b98:	2001      	movs	r0, #1
 8000b9a:	f002 fb39 	bl	8003210 <osDelay>
 8000b9e:	e7fb      	b.n	8000b98 <StartDefaultTask+0x8>

08000ba0 <motor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_motor */
void motor(void *argument)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b08a      	sub	sp, #40	; 0x28
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN motor */
	uint16_t servo_min = 148;
 8000ba8:	2394      	movs	r3, #148	; 0x94
 8000baa:	843b      	strh	r3, [r7, #32]
	uint16_t servo_max = 155;
 8000bac:	239b      	movs	r3, #155	; 0x9b
 8000bae:	83fb      	strh	r3, [r7, #30]

	uint16_t pwmVal_servo = servo_min;
 8000bb0:	8c3b      	ldrh	r3, [r7, #32]
 8000bb2:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t pwmVal = 1000;
 8000bb4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bb8:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t offset = 1;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	847b      	strh	r3, [r7, #34]	; 0x22
	uint8_t msg [20];

	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	4856      	ldr	r0, [pc, #344]	; (8000d1c <motor+0x17c>)
 8000bc2:	f001 fb3f 	bl	8002244 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8000bc6:	2104      	movs	r1, #4
 8000bc8:	4854      	ldr	r0, [pc, #336]	; (8000d1c <motor+0x17c>)
 8000bca:	f001 fb3b 	bl	8002244 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000bce:	210c      	movs	r1, #12
 8000bd0:	4853      	ldr	r0, [pc, #332]	; (8000d20 <motor+0x180>)
 8000bd2:	f001 fb37 	bl	8002244 <HAL_TIM_PWM_Start>


	htim1.Instance->CCR4 = pwmVal_servo; //Centre
 8000bd6:	4b52      	ldr	r3, [pc, #328]	; (8000d20 <motor+0x180>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000bdc:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(5000);
 8000bde:	f241 3088 	movw	r0, #5000	; 0x1388
 8000be2:	f002 fb15 	bl	8003210 <osDelay>
//	  osDelay(5000);



	  // Forward
	  pwmVal = 1000;
 8000be6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bea:	84bb      	strh	r3, [r7, #36]	; 0x24
	  sprintf(msg, "forwards\0");
 8000bec:	f107 0308 	add.w	r3, r7, #8
 8000bf0:	494c      	ldr	r1, [pc, #304]	; (8000d24 <motor+0x184>)
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f005 f9f2 	bl	8005fdc <siprintf>
	  OLED_ShowString(10, 20, msg);
 8000bf8:	f107 0308 	add.w	r3, r7, #8
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	2114      	movs	r1, #20
 8000c00:	200a      	movs	r0, #10
 8000c02:	f005 f8ed 	bl	8005de0 <OLED_ShowString>

	  sprintf(msg, "servo %d\0", pwmVal_servo);
 8000c06:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000c08:	f107 0308 	add.w	r3, r7, #8
 8000c0c:	4946      	ldr	r1, [pc, #280]	; (8000d28 <motor+0x188>)
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f005 f9e4 	bl	8005fdc <siprintf>
	  OLED_ShowString(10, 30, msg);
 8000c14:	f107 0308 	add.w	r3, r7, #8
 8000c18:	461a      	mov	r2, r3
 8000c1a:	211e      	movs	r1, #30
 8000c1c:	200a      	movs	r0, #10
 8000c1e:	f005 f8df 	bl	8005de0 <OLED_ShowString>
	  while(pwmVal< 2000)
 8000c22:	e021      	b.n	8000c68 <motor+0xc8>
	  {
		  // H-Bridge Circuit for AINx; 1 turn on, the other turns off
		  // MOTOR A
		  HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8000c24:	2201      	movs	r2, #1
 8000c26:	2104      	movs	r1, #4
 8000c28:	4840      	ldr	r0, [pc, #256]	; (8000d2c <motor+0x18c>)
 8000c2a:	f000 fe0d 	bl	8001848 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2108      	movs	r1, #8
 8000c32:	483e      	ldr	r0, [pc, #248]	; (8000d2c <motor+0x18c>)
 8000c34:	f000 fe08 	bl	8001848 <HAL_GPIO_WritePin>

		  // MOTOR B
		  HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 8000c38:	2201      	movs	r2, #1
 8000c3a:	2120      	movs	r1, #32
 8000c3c:	483b      	ldr	r0, [pc, #236]	; (8000d2c <motor+0x18c>)
 8000c3e:	f000 fe03 	bl	8001848 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 8000c42:	2200      	movs	r2, #0
 8000c44:	2110      	movs	r1, #16
 8000c46:	4839      	ldr	r0, [pc, #228]	; (8000d2c <motor+0x18c>)
 8000c48:	f000 fdfe 	bl	8001848 <HAL_GPIO_WritePin>

		  pwmVal++;
 8000c4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000c4e:	3301      	adds	r3, #1
 8000c50:	84bb      	strh	r3, [r7, #36]	; 0x24
		  // Modify comparison value for duty cycle
		  __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmVal);
 8000c52:	4b32      	ldr	r3, [pc, #200]	; (8000d1c <motor+0x17c>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000c58:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, pwmVal);
 8000c5a:	4b30      	ldr	r3, [pc, #192]	; (8000d1c <motor+0x17c>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000c60:	639a      	str	r2, [r3, #56]	; 0x38
		  osDelay(10);
 8000c62:	200a      	movs	r0, #10
 8000c64:	f002 fad4 	bl	8003210 <osDelay>
	  while(pwmVal< 2000)
 8000c68:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000c6a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000c6e:	d3d9      	bcc.n	8000c24 <motor+0x84>
	  }

	  // Anti clock wise
	  sprintf(msg, "backward\0");
 8000c70:	f107 0308 	add.w	r3, r7, #8
 8000c74:	492e      	ldr	r1, [pc, #184]	; (8000d30 <motor+0x190>)
 8000c76:	4618      	mov	r0, r3
 8000c78:	f005 f9b0 	bl	8005fdc <siprintf>
	  OLED_ShowString(10, 20, msg);
 8000c7c:	f107 0308 	add.w	r3, r7, #8
 8000c80:	461a      	mov	r2, r3
 8000c82:	2114      	movs	r1, #20
 8000c84:	200a      	movs	r0, #10
 8000c86:	f005 f8ab 	bl	8005de0 <OLED_ShowString>
	  while(pwmVal>999)
 8000c8a:	e028      	b.n	8000cde <motor+0x13e>
	  {
		  // MOTOR A
		  HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	2104      	movs	r1, #4
 8000c90:	4826      	ldr	r0, [pc, #152]	; (8000d2c <motor+0x18c>)
 8000c92:	f000 fdd9 	bl	8001848 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8000c96:	2201      	movs	r2, #1
 8000c98:	2108      	movs	r1, #8
 8000c9a:	4824      	ldr	r0, [pc, #144]	; (8000d2c <motor+0x18c>)
 8000c9c:	f000 fdd4 	bl	8001848 <HAL_GPIO_WritePin>

		  // MOTOR B
		  HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	2120      	movs	r1, #32
 8000ca4:	4821      	ldr	r0, [pc, #132]	; (8000d2c <motor+0x18c>)
 8000ca6:	f000 fdcf 	bl	8001848 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET);
 8000caa:	2201      	movs	r2, #1
 8000cac:	2110      	movs	r1, #16
 8000cae:	481f      	ldr	r0, [pc, #124]	; (8000d2c <motor+0x18c>)
 8000cb0:	f000 fdca 	bl	8001848 <HAL_GPIO_WritePin>
		  if(pwmVal == 1000)
 8000cb4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000cb6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000cba:	d102      	bne.n	8000cc2 <motor+0x122>
				  pwmVal = 0;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000cc0:	e002      	b.n	8000cc8 <motor+0x128>
		  else
			  pwmVal--;
 8000cc2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000cc4:	3b01      	subs	r3, #1
 8000cc6:	84bb      	strh	r3, [r7, #36]	; 0x24
		  __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmVal);
 8000cc8:	4b14      	ldr	r3, [pc, #80]	; (8000d1c <motor+0x17c>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000cce:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, pwmVal);
 8000cd0:	4b12      	ldr	r3, [pc, #72]	; (8000d1c <motor+0x17c>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8000cd6:	639a      	str	r2, [r3, #56]	; 0x38
		  osDelay(10);
 8000cd8:	200a      	movs	r0, #10
 8000cda:	f002 fa99 	bl	8003210 <osDelay>
	  while(pwmVal>999)
 8000cde:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000ce0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000ce4:	d2d2      	bcs.n	8000c8c <motor+0xec>
	  }

	  osDelay(1);
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	f002 fa92 	bl	8003210 <osDelay>
	  if((pwmVal_servo > servo_max)||(pwmVal_servo < servo_min))
 8000cec:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000cee:	8bfb      	ldrh	r3, [r7, #30]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	d803      	bhi.n	8000cfc <motor+0x15c>
 8000cf4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000cf6:	8c3b      	ldrh	r3, [r7, #32]
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	d202      	bcs.n	8000d02 <motor+0x162>
		  offset = -offset;
 8000cfc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000cfe:	425b      	negs	r3, r3
 8000d00:	847b      	strh	r3, [r7, #34]	; 0x22
	  pwmVal_servo += offset;
 8000d02:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000d04:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000d06:	4413      	add	r3, r2
 8000d08:	84fb      	strh	r3, [r7, #38]	; 0x26
	  htim1.Instance->CCR4 = pwmVal_servo;
 8000d0a:	4b05      	ldr	r3, [pc, #20]	; (8000d20 <motor+0x180>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000d10:	641a      	str	r2, [r3, #64]	; 0x40
	  osDelay(5000);
 8000d12:	f241 3088 	movw	r0, #5000	; 0x1388
 8000d16:	f002 fa7b 	bl	8003210 <osDelay>
  {
 8000d1a:	e764      	b.n	8000be6 <motor+0x46>
 8000d1c:	200049b0 	.word	0x200049b0
 8000d20:	20004a48 	.word	0x20004a48
 8000d24:	08006864 	.word	0x08006864
 8000d28:	08006870 	.word	0x08006870
 8000d2c:	40020000 	.word	0x40020000
 8000d30:	0800687c 	.word	0x0800687c

08000d34 <showoled>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_showoled */
void showoled(void *argument)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b088      	sub	sp, #32
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN showoled */
  /* Infinite loop */
	uint8_t hello [20] = "pwm test\0";
 8000d3c:	4a0c      	ldr	r2, [pc, #48]	; (8000d70 <showoled+0x3c>)
 8000d3e:	f107 030c 	add.w	r3, r7, #12
 8000d42:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d44:	c303      	stmia	r3!, {r0, r1}
 8000d46:	801a      	strh	r2, [r3, #0]
 8000d48:	f107 0316 	add.w	r3, r7, #22
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	605a      	str	r2, [r3, #4]
 8000d52:	811a      	strh	r2, [r3, #8]
	for(;;)
	{
		OLED_ShowString(10, 10, hello);
 8000d54:	f107 030c 	add.w	r3, r7, #12
 8000d58:	461a      	mov	r2, r3
 8000d5a:	210a      	movs	r1, #10
 8000d5c:	200a      	movs	r0, #10
 8000d5e:	f005 f83f 	bl	8005de0 <OLED_ShowString>
		OLED_Refresh_Gram();
 8000d62:	f004 fec9 	bl	8005af8 <OLED_Refresh_Gram>
		osDelay(1000);
 8000d66:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d6a:	f002 fa51 	bl	8003210 <osDelay>
		OLED_ShowString(10, 10, hello);
 8000d6e:	e7f1      	b.n	8000d54 <showoled+0x20>
 8000d70:	08006888 	.word	0x08006888

08000d74 <encoder_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_encoder_task */
void encoder_task(void *argument)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b08c      	sub	sp, #48	; 0x30
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN encoder_task */
  /* Infinite loop */
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_ALL);
 8000d7c:	213c      	movs	r1, #60	; 0x3c
 8000d7e:	4828      	ldr	r0, [pc, #160]	; (8000e20 <encoder_task+0xac>)
 8000d80:	f001 fa60 	bl	8002244 <HAL_TIM_PWM_Start>

	int cnt1, cnt2, diff;
	uint32_t tick;

	cnt1 = __HAL_TIM_GET_COUNTER(&htim2);
 8000d84:	4b26      	ldr	r3, [pc, #152]	; (8000e20 <encoder_task+0xac>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
	tick = HAL_GetTick();
 8000d8c:	f000 faaa 	bl	80012e4 <HAL_GetTick>
 8000d90:	62b8      	str	r0, [r7, #40]	; 0x28
	uint8_t msg[20];
	uint16_t dir;

	for(;;)
	{
		if(HAL_GetTick()-tick > 1000L){
 8000d92:	f000 faa7 	bl	80012e4 <HAL_GetTick>
 8000d96:	4602      	mov	r2, r0
 8000d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d9a:	1ad3      	subs	r3, r2, r3
 8000d9c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000da0:	d9f7      	bls.n	8000d92 <encoder_task+0x1e>
			cnt2 = __HAL_TIM_GET_COUNTER(&htim2);
 8000da2:	4b1f      	ldr	r3, [pc, #124]	; (8000e20 <encoder_task+0xac>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000da8:	627b      	str	r3, [r7, #36]	; 0x24
			if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)){
 8000daa:	4b1d      	ldr	r3, [pc, #116]	; (8000e20 <encoder_task+0xac>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f003 0310 	and.w	r3, r3, #16
 8000db4:	2b10      	cmp	r3, #16
 8000db6:	d110      	bne.n	8000dda <encoder_task+0x66>
				if(cnt2<cnt1)
 8000db8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	da04      	bge.n	8000dca <encoder_task+0x56>
					diff = cnt1 - cnt2;
 8000dc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dc4:	1ad3      	subs	r3, r2, r3
 8000dc6:	623b      	str	r3, [r7, #32]
 8000dc8:	e017      	b.n	8000dfa <encoder_task+0x86>
				else //overflow
					diff = (65535 - cnt2) + cnt1;
 8000dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dcc:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8000dd0:	33ff      	adds	r3, #255	; 0xff
 8000dd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000dd4:	4413      	add	r3, r2
 8000dd6:	623b      	str	r3, [r7, #32]
 8000dd8:	e00f      	b.n	8000dfa <encoder_task+0x86>
			}
			else{
				if(cnt2 > cnt1)
 8000dda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dde:	429a      	cmp	r2, r3
 8000de0:	dd04      	ble.n	8000dec <encoder_task+0x78>
					diff = cnt2 - cnt1;
 8000de2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000de6:	1ad3      	subs	r3, r2, r3
 8000de8:	623b      	str	r3, [r7, #32]
 8000dea:	e006      	b.n	8000dfa <encoder_task+0x86>
				else
					diff = (65535 - cnt1) + cnt2;
 8000dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dee:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8000df2:	33ff      	adds	r3, #255	; 0xff
 8000df4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000df6:	4413      	add	r3, r2
 8000df8:	623b      	str	r3, [r7, #32]
			}

			dir = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2);
 8000dfa:	4b09      	ldr	r3, [pc, #36]	; (8000e20 <encoder_task+0xac>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f003 0310 	and.w	r3, r3, #16
 8000e04:	2b10      	cmp	r3, #16
 8000e06:	bf0c      	ite	eq
 8000e08:	2301      	moveq	r3, #1
 8000e0a:	2300      	movne	r3, #0
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	83fb      	strh	r3, [r7, #30]
//			// Display direction
//			sprintf(msg, "dir:%5d\0",dir);
//			OLED_ShowString(10,30,msg);

			// Reset base tick
			cnt1 = __HAL_TIM_GET_COUNTER(&htim2);
 8000e10:	4b03      	ldr	r3, [pc, #12]	; (8000e20 <encoder_task+0xac>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e16:	62fb      	str	r3, [r7, #44]	; 0x2c
			tick = HAL_GetTick();
 8000e18:	f000 fa64 	bl	80012e4 <HAL_GetTick>
 8000e1c:	62b8      	str	r0, [r7, #40]	; 0x28
		if(HAL_GetTick()-tick > 1000L){
 8000e1e:	e7b8      	b.n	8000d92 <encoder_task+0x1e>
 8000e20:	20004a90 	.word	0x20004a90

08000e24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e28:	b672      	cpsid	i
}
 8000e2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e2c:	e7fe      	b.n	8000e2c <Error_Handler+0x8>
	...

08000e30 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e36:	2300      	movs	r3, #0
 8000e38:	607b      	str	r3, [r7, #4]
 8000e3a:	4b12      	ldr	r3, [pc, #72]	; (8000e84 <HAL_MspInit+0x54>)
 8000e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e3e:	4a11      	ldr	r2, [pc, #68]	; (8000e84 <HAL_MspInit+0x54>)
 8000e40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e44:	6453      	str	r3, [r2, #68]	; 0x44
 8000e46:	4b0f      	ldr	r3, [pc, #60]	; (8000e84 <HAL_MspInit+0x54>)
 8000e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e4e:	607b      	str	r3, [r7, #4]
 8000e50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e52:	2300      	movs	r3, #0
 8000e54:	603b      	str	r3, [r7, #0]
 8000e56:	4b0b      	ldr	r3, [pc, #44]	; (8000e84 <HAL_MspInit+0x54>)
 8000e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5a:	4a0a      	ldr	r2, [pc, #40]	; (8000e84 <HAL_MspInit+0x54>)
 8000e5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e60:	6413      	str	r3, [r2, #64]	; 0x40
 8000e62:	4b08      	ldr	r3, [pc, #32]	; (8000e84 <HAL_MspInit+0x54>)
 8000e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e6a:	603b      	str	r3, [r7, #0]
 8000e6c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e6e:	2200      	movs	r2, #0
 8000e70:	210f      	movs	r1, #15
 8000e72:	f06f 0001 	mvn.w	r0, #1
 8000e76:	f000 fb22 	bl	80014be <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e7a:	bf00      	nop
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	40023800 	.word	0x40023800

08000e88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b08a      	sub	sp, #40	; 0x28
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e90:	f107 0314 	add.w	r3, r7, #20
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	609a      	str	r2, [r3, #8]
 8000e9c:	60da      	str	r2, [r3, #12]
 8000e9e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a23      	ldr	r2, [pc, #140]	; (8000f34 <HAL_TIM_Base_MspInit+0xac>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d10e      	bne.n	8000ec8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	613b      	str	r3, [r7, #16]
 8000eae:	4b22      	ldr	r3, [pc, #136]	; (8000f38 <HAL_TIM_Base_MspInit+0xb0>)
 8000eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eb2:	4a21      	ldr	r2, [pc, #132]	; (8000f38 <HAL_TIM_Base_MspInit+0xb0>)
 8000eb4:	f043 0301 	orr.w	r3, r3, #1
 8000eb8:	6453      	str	r3, [r2, #68]	; 0x44
 8000eba:	4b1f      	ldr	r3, [pc, #124]	; (8000f38 <HAL_TIM_Base_MspInit+0xb0>)
 8000ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ebe:	f003 0301 	and.w	r3, r3, #1
 8000ec2:	613b      	str	r3, [r7, #16]
 8000ec4:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8000ec6:	e030      	b.n	8000f2a <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM8)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a1b      	ldr	r2, [pc, #108]	; (8000f3c <HAL_TIM_Base_MspInit+0xb4>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d12b      	bne.n	8000f2a <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	60fb      	str	r3, [r7, #12]
 8000ed6:	4b18      	ldr	r3, [pc, #96]	; (8000f38 <HAL_TIM_Base_MspInit+0xb0>)
 8000ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eda:	4a17      	ldr	r2, [pc, #92]	; (8000f38 <HAL_TIM_Base_MspInit+0xb0>)
 8000edc:	f043 0302 	orr.w	r3, r3, #2
 8000ee0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ee2:	4b15      	ldr	r3, [pc, #84]	; (8000f38 <HAL_TIM_Base_MspInit+0xb0>)
 8000ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee6:	f003 0302 	and.w	r3, r3, #2
 8000eea:	60fb      	str	r3, [r7, #12]
 8000eec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60bb      	str	r3, [r7, #8]
 8000ef2:	4b11      	ldr	r3, [pc, #68]	; (8000f38 <HAL_TIM_Base_MspInit+0xb0>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	4a10      	ldr	r2, [pc, #64]	; (8000f38 <HAL_TIM_Base_MspInit+0xb0>)
 8000ef8:	f043 0304 	orr.w	r3, r3, #4
 8000efc:	6313      	str	r3, [r2, #48]	; 0x30
 8000efe:	4b0e      	ldr	r3, [pc, #56]	; (8000f38 <HAL_TIM_Base_MspInit+0xb0>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	f003 0304 	and.w	r3, r3, #4
 8000f06:	60bb      	str	r3, [r7, #8]
 8000f08:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 8000f0a:	23c0      	movs	r3, #192	; 0xc0
 8000f0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f12:	2300      	movs	r3, #0
 8000f14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f16:	2300      	movs	r3, #0
 8000f18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8000f1a:	2303      	movs	r3, #3
 8000f1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f1e:	f107 0314 	add.w	r3, r7, #20
 8000f22:	4619      	mov	r1, r3
 8000f24:	4806      	ldr	r0, [pc, #24]	; (8000f40 <HAL_TIM_Base_MspInit+0xb8>)
 8000f26:	f000 faf3 	bl	8001510 <HAL_GPIO_Init>
}
 8000f2a:	bf00      	nop
 8000f2c:	3728      	adds	r7, #40	; 0x28
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	40010000 	.word	0x40010000
 8000f38:	40023800 	.word	0x40023800
 8000f3c:	40010400 	.word	0x40010400
 8000f40:	40020800 	.word	0x40020800

08000f44 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b08c      	sub	sp, #48	; 0x30
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f4c:	f107 031c 	add.w	r3, r7, #28
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	605a      	str	r2, [r3, #4]
 8000f56:	609a      	str	r2, [r3, #8]
 8000f58:	60da      	str	r2, [r3, #12]
 8000f5a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f64:	d14b      	bne.n	8000ffe <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f66:	2300      	movs	r3, #0
 8000f68:	61bb      	str	r3, [r7, #24]
 8000f6a:	4b3f      	ldr	r3, [pc, #252]	; (8001068 <HAL_TIM_Encoder_MspInit+0x124>)
 8000f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6e:	4a3e      	ldr	r2, [pc, #248]	; (8001068 <HAL_TIM_Encoder_MspInit+0x124>)
 8000f70:	f043 0301 	orr.w	r3, r3, #1
 8000f74:	6413      	str	r3, [r2, #64]	; 0x40
 8000f76:	4b3c      	ldr	r3, [pc, #240]	; (8001068 <HAL_TIM_Encoder_MspInit+0x124>)
 8000f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7a:	f003 0301 	and.w	r3, r3, #1
 8000f7e:	61bb      	str	r3, [r7, #24]
 8000f80:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f82:	2300      	movs	r3, #0
 8000f84:	617b      	str	r3, [r7, #20]
 8000f86:	4b38      	ldr	r3, [pc, #224]	; (8001068 <HAL_TIM_Encoder_MspInit+0x124>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8a:	4a37      	ldr	r2, [pc, #220]	; (8001068 <HAL_TIM_Encoder_MspInit+0x124>)
 8000f8c:	f043 0301 	orr.w	r3, r3, #1
 8000f90:	6313      	str	r3, [r2, #48]	; 0x30
 8000f92:	4b35      	ldr	r3, [pc, #212]	; (8001068 <HAL_TIM_Encoder_MspInit+0x124>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	f003 0301 	and.w	r3, r3, #1
 8000f9a:	617b      	str	r3, [r7, #20]
 8000f9c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	613b      	str	r3, [r7, #16]
 8000fa2:	4b31      	ldr	r3, [pc, #196]	; (8001068 <HAL_TIM_Encoder_MspInit+0x124>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	4a30      	ldr	r2, [pc, #192]	; (8001068 <HAL_TIM_Encoder_MspInit+0x124>)
 8000fa8:	f043 0302 	orr.w	r3, r3, #2
 8000fac:	6313      	str	r3, [r2, #48]	; 0x30
 8000fae:	4b2e      	ldr	r3, [pc, #184]	; (8001068 <HAL_TIM_Encoder_MspInit+0x124>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	f003 0302 	and.w	r3, r3, #2
 8000fb6:	613b      	str	r3, [r7, #16]
 8000fb8:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000fba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000fbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd0:	f107 031c 	add.w	r3, r7, #28
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	4825      	ldr	r0, [pc, #148]	; (800106c <HAL_TIM_Encoder_MspInit+0x128>)
 8000fd8:	f000 fa9a 	bl	8001510 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000fdc:	2308      	movs	r3, #8
 8000fde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000fec:	2301      	movs	r3, #1
 8000fee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff0:	f107 031c 	add.w	r3, r7, #28
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	481e      	ldr	r0, [pc, #120]	; (8001070 <HAL_TIM_Encoder_MspInit+0x12c>)
 8000ff8:	f000 fa8a 	bl	8001510 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000ffc:	e030      	b.n	8001060 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM3)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	4a1c      	ldr	r2, [pc, #112]	; (8001074 <HAL_TIM_Encoder_MspInit+0x130>)
 8001004:	4293      	cmp	r3, r2
 8001006:	d12b      	bne.n	8001060 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001008:	2300      	movs	r3, #0
 800100a:	60fb      	str	r3, [r7, #12]
 800100c:	4b16      	ldr	r3, [pc, #88]	; (8001068 <HAL_TIM_Encoder_MspInit+0x124>)
 800100e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001010:	4a15      	ldr	r2, [pc, #84]	; (8001068 <HAL_TIM_Encoder_MspInit+0x124>)
 8001012:	f043 0302 	orr.w	r3, r3, #2
 8001016:	6413      	str	r3, [r2, #64]	; 0x40
 8001018:	4b13      	ldr	r3, [pc, #76]	; (8001068 <HAL_TIM_Encoder_MspInit+0x124>)
 800101a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101c:	f003 0302 	and.w	r3, r3, #2
 8001020:	60fb      	str	r3, [r7, #12]
 8001022:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001024:	2300      	movs	r3, #0
 8001026:	60bb      	str	r3, [r7, #8]
 8001028:	4b0f      	ldr	r3, [pc, #60]	; (8001068 <HAL_TIM_Encoder_MspInit+0x124>)
 800102a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102c:	4a0e      	ldr	r2, [pc, #56]	; (8001068 <HAL_TIM_Encoder_MspInit+0x124>)
 800102e:	f043 0301 	orr.w	r3, r3, #1
 8001032:	6313      	str	r3, [r2, #48]	; 0x30
 8001034:	4b0c      	ldr	r3, [pc, #48]	; (8001068 <HAL_TIM_Encoder_MspInit+0x124>)
 8001036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001038:	f003 0301 	and.w	r3, r3, #1
 800103c:	60bb      	str	r3, [r7, #8]
 800103e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001040:	23c0      	movs	r3, #192	; 0xc0
 8001042:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001044:	2302      	movs	r3, #2
 8001046:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	2300      	movs	r3, #0
 800104a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104c:	2300      	movs	r3, #0
 800104e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001050:	2302      	movs	r3, #2
 8001052:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001054:	f107 031c 	add.w	r3, r7, #28
 8001058:	4619      	mov	r1, r3
 800105a:	4804      	ldr	r0, [pc, #16]	; (800106c <HAL_TIM_Encoder_MspInit+0x128>)
 800105c:	f000 fa58 	bl	8001510 <HAL_GPIO_Init>
}
 8001060:	bf00      	nop
 8001062:	3730      	adds	r7, #48	; 0x30
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	40023800 	.word	0x40023800
 800106c:	40020000 	.word	0x40020000
 8001070:	40020400 	.word	0x40020400
 8001074:	40000400 	.word	0x40000400

08001078 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b088      	sub	sp, #32
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001080:	f107 030c 	add.w	r3, r7, #12
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
 800108c:	60da      	str	r2, [r3, #12]
 800108e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a12      	ldr	r2, [pc, #72]	; (80010e0 <HAL_TIM_MspPostInit+0x68>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d11e      	bne.n	80010d8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	60bb      	str	r3, [r7, #8]
 800109e:	4b11      	ldr	r3, [pc, #68]	; (80010e4 <HAL_TIM_MspPostInit+0x6c>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	4a10      	ldr	r2, [pc, #64]	; (80010e4 <HAL_TIM_MspPostInit+0x6c>)
 80010a4:	f043 0310 	orr.w	r3, r3, #16
 80010a8:	6313      	str	r3, [r2, #48]	; 0x30
 80010aa:	4b0e      	ldr	r3, [pc, #56]	; (80010e4 <HAL_TIM_MspPostInit+0x6c>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	f003 0310 	and.w	r3, r3, #16
 80010b2:	60bb      	str	r3, [r7, #8]
 80010b4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80010b6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80010ba:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010bc:	2302      	movs	r3, #2
 80010be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	2300      	movs	r3, #0
 80010c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c4:	2300      	movs	r3, #0
 80010c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80010c8:	2301      	movs	r3, #1
 80010ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010cc:	f107 030c 	add.w	r3, r7, #12
 80010d0:	4619      	mov	r1, r3
 80010d2:	4805      	ldr	r0, [pc, #20]	; (80010e8 <HAL_TIM_MspPostInit+0x70>)
 80010d4:	f000 fa1c 	bl	8001510 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80010d8:	bf00      	nop
 80010da:	3720      	adds	r7, #32
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	40010000 	.word	0x40010000
 80010e4:	40023800 	.word	0x40023800
 80010e8:	40021000 	.word	0x40021000

080010ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010f0:	e7fe      	b.n	80010f0 <NMI_Handler+0x4>

080010f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010f2:	b480      	push	{r7}
 80010f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010f6:	e7fe      	b.n	80010f6 <HardFault_Handler+0x4>

080010f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010fc:	e7fe      	b.n	80010fc <MemManage_Handler+0x4>

080010fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010fe:	b480      	push	{r7}
 8001100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001102:	e7fe      	b.n	8001102 <BusFault_Handler+0x4>

08001104 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001108:	e7fe      	b.n	8001108 <UsageFault_Handler+0x4>

0800110a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800110a:	b480      	push	{r7}
 800110c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800110e:	bf00      	nop
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr

08001118 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800111c:	f000 f8ce 	bl	80012bc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001120:	f004 f8bc 	bl	800529c <xTaskGetSchedulerState>
 8001124:	4603      	mov	r3, r0
 8001126:	2b01      	cmp	r3, #1
 8001128:	d001      	beq.n	800112e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800112a:	f002 fd1d 	bl	8003b68 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
	...

08001134 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b086      	sub	sp, #24
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800113c:	4a14      	ldr	r2, [pc, #80]	; (8001190 <_sbrk+0x5c>)
 800113e:	4b15      	ldr	r3, [pc, #84]	; (8001194 <_sbrk+0x60>)
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001148:	4b13      	ldr	r3, [pc, #76]	; (8001198 <_sbrk+0x64>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d102      	bne.n	8001156 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001150:	4b11      	ldr	r3, [pc, #68]	; (8001198 <_sbrk+0x64>)
 8001152:	4a12      	ldr	r2, [pc, #72]	; (800119c <_sbrk+0x68>)
 8001154:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001156:	4b10      	ldr	r3, [pc, #64]	; (8001198 <_sbrk+0x64>)
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4413      	add	r3, r2
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	429a      	cmp	r2, r3
 8001162:	d207      	bcs.n	8001174 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001164:	f004 fefa 	bl	8005f5c <__errno>
 8001168:	4603      	mov	r3, r0
 800116a:	220c      	movs	r2, #12
 800116c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800116e:	f04f 33ff 	mov.w	r3, #4294967295
 8001172:	e009      	b.n	8001188 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001174:	4b08      	ldr	r3, [pc, #32]	; (8001198 <_sbrk+0x64>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800117a:	4b07      	ldr	r3, [pc, #28]	; (8001198 <_sbrk+0x64>)
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4413      	add	r3, r2
 8001182:	4a05      	ldr	r2, [pc, #20]	; (8001198 <_sbrk+0x64>)
 8001184:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001186:	68fb      	ldr	r3, [r7, #12]
}
 8001188:	4618      	mov	r0, r3
 800118a:	3718      	adds	r7, #24
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	20020000 	.word	0x20020000
 8001194:	00000400 	.word	0x00000400
 8001198:	20000090 	.word	0x20000090
 800119c:	20004f30 	.word	0x20004f30

080011a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011a4:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <SystemInit+0x20>)
 80011a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011aa:	4a05      	ldr	r2, [pc, #20]	; (80011c0 <SystemInit+0x20>)
 80011ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011b4:	bf00      	nop
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	e000ed00 	.word	0xe000ed00

080011c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80011c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011c8:	480d      	ldr	r0, [pc, #52]	; (8001200 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011ca:	490e      	ldr	r1, [pc, #56]	; (8001204 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011cc:	4a0e      	ldr	r2, [pc, #56]	; (8001208 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011d0:	e002      	b.n	80011d8 <LoopCopyDataInit>

080011d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011d6:	3304      	adds	r3, #4

080011d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011dc:	d3f9      	bcc.n	80011d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011de:	4a0b      	ldr	r2, [pc, #44]	; (800120c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011e0:	4c0b      	ldr	r4, [pc, #44]	; (8001210 <LoopFillZerobss+0x26>)
  movs r3, #0
 80011e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011e4:	e001      	b.n	80011ea <LoopFillZerobss>

080011e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011e8:	3204      	adds	r2, #4

080011ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011ec:	d3fb      	bcc.n	80011e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80011ee:	f7ff ffd7 	bl	80011a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011f2:	f004 feb9 	bl	8005f68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011f6:	f7ff f9b7 	bl	8000568 <main>
  bx  lr    
 80011fa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80011fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001200:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001204:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001208:	080073fc 	.word	0x080073fc
  ldr r2, =_sbss
 800120c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001210:	20004f30 	.word	0x20004f30

08001214 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001214:	e7fe      	b.n	8001214 <ADC_IRQHandler>
	...

08001218 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800121c:	4b0e      	ldr	r3, [pc, #56]	; (8001258 <HAL_Init+0x40>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a0d      	ldr	r2, [pc, #52]	; (8001258 <HAL_Init+0x40>)
 8001222:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001226:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001228:	4b0b      	ldr	r3, [pc, #44]	; (8001258 <HAL_Init+0x40>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a0a      	ldr	r2, [pc, #40]	; (8001258 <HAL_Init+0x40>)
 800122e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001232:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001234:	4b08      	ldr	r3, [pc, #32]	; (8001258 <HAL_Init+0x40>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a07      	ldr	r2, [pc, #28]	; (8001258 <HAL_Init+0x40>)
 800123a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800123e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001240:	2003      	movs	r0, #3
 8001242:	f000 f931 	bl	80014a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001246:	200f      	movs	r0, #15
 8001248:	f000 f808 	bl	800125c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800124c:	f7ff fdf0 	bl	8000e30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001250:	2300      	movs	r3, #0
}
 8001252:	4618      	mov	r0, r3
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	40023c00 	.word	0x40023c00

0800125c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001264:	4b12      	ldr	r3, [pc, #72]	; (80012b0 <HAL_InitTick+0x54>)
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	4b12      	ldr	r3, [pc, #72]	; (80012b4 <HAL_InitTick+0x58>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	4619      	mov	r1, r3
 800126e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001272:	fbb3 f3f1 	udiv	r3, r3, r1
 8001276:	fbb2 f3f3 	udiv	r3, r2, r3
 800127a:	4618      	mov	r0, r3
 800127c:	f000 f93b 	bl	80014f6 <HAL_SYSTICK_Config>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	e00e      	b.n	80012a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2b0f      	cmp	r3, #15
 800128e:	d80a      	bhi.n	80012a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001290:	2200      	movs	r2, #0
 8001292:	6879      	ldr	r1, [r7, #4]
 8001294:	f04f 30ff 	mov.w	r0, #4294967295
 8001298:	f000 f911 	bl	80014be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800129c:	4a06      	ldr	r2, [pc, #24]	; (80012b8 <HAL_InitTick+0x5c>)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012a2:	2300      	movs	r3, #0
 80012a4:	e000      	b.n	80012a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	3708      	adds	r7, #8
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	20000000 	.word	0x20000000
 80012b4:	20000008 	.word	0x20000008
 80012b8:	20000004 	.word	0x20000004

080012bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012c0:	4b06      	ldr	r3, [pc, #24]	; (80012dc <HAL_IncTick+0x20>)
 80012c2:	781b      	ldrb	r3, [r3, #0]
 80012c4:	461a      	mov	r2, r3
 80012c6:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <HAL_IncTick+0x24>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4413      	add	r3, r2
 80012cc:	4a04      	ldr	r2, [pc, #16]	; (80012e0 <HAL_IncTick+0x24>)
 80012ce:	6013      	str	r3, [r2, #0]
}
 80012d0:	bf00      	nop
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	20000008 	.word	0x20000008
 80012e0:	20004adc 	.word	0x20004adc

080012e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  return uwTick;
 80012e8:	4b03      	ldr	r3, [pc, #12]	; (80012f8 <HAL_GetTick+0x14>)
 80012ea:	681b      	ldr	r3, [r3, #0]
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	20004adc 	.word	0x20004adc

080012fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001304:	f7ff ffee 	bl	80012e4 <HAL_GetTick>
 8001308:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001314:	d005      	beq.n	8001322 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001316:	4b0a      	ldr	r3, [pc, #40]	; (8001340 <HAL_Delay+0x44>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	461a      	mov	r2, r3
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	4413      	add	r3, r2
 8001320:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001322:	bf00      	nop
 8001324:	f7ff ffde 	bl	80012e4 <HAL_GetTick>
 8001328:	4602      	mov	r2, r0
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	68fa      	ldr	r2, [r7, #12]
 8001330:	429a      	cmp	r2, r3
 8001332:	d8f7      	bhi.n	8001324 <HAL_Delay+0x28>
  {
  }
}
 8001334:	bf00      	nop
 8001336:	bf00      	nop
 8001338:	3710      	adds	r7, #16
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	20000008 	.word	0x20000008

08001344 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001344:	b480      	push	{r7}
 8001346:	b085      	sub	sp, #20
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f003 0307 	and.w	r3, r3, #7
 8001352:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001354:	4b0c      	ldr	r3, [pc, #48]	; (8001388 <__NVIC_SetPriorityGrouping+0x44>)
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800135a:	68ba      	ldr	r2, [r7, #8]
 800135c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001360:	4013      	ands	r3, r2
 8001362:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800136c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001370:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001374:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001376:	4a04      	ldr	r2, [pc, #16]	; (8001388 <__NVIC_SetPriorityGrouping+0x44>)
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	60d3      	str	r3, [r2, #12]
}
 800137c:	bf00      	nop
 800137e:	3714      	adds	r7, #20
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr
 8001388:	e000ed00 	.word	0xe000ed00

0800138c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001390:	4b04      	ldr	r3, [pc, #16]	; (80013a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	0a1b      	lsrs	r3, r3, #8
 8001396:	f003 0307 	and.w	r3, r3, #7
}
 800139a:	4618      	mov	r0, r3
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr
 80013a4:	e000ed00 	.word	0xe000ed00

080013a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	6039      	str	r1, [r7, #0]
 80013b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	db0a      	blt.n	80013d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	b2da      	uxtb	r2, r3
 80013c0:	490c      	ldr	r1, [pc, #48]	; (80013f4 <__NVIC_SetPriority+0x4c>)
 80013c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c6:	0112      	lsls	r2, r2, #4
 80013c8:	b2d2      	uxtb	r2, r2
 80013ca:	440b      	add	r3, r1
 80013cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013d0:	e00a      	b.n	80013e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	b2da      	uxtb	r2, r3
 80013d6:	4908      	ldr	r1, [pc, #32]	; (80013f8 <__NVIC_SetPriority+0x50>)
 80013d8:	79fb      	ldrb	r3, [r7, #7]
 80013da:	f003 030f 	and.w	r3, r3, #15
 80013de:	3b04      	subs	r3, #4
 80013e0:	0112      	lsls	r2, r2, #4
 80013e2:	b2d2      	uxtb	r2, r2
 80013e4:	440b      	add	r3, r1
 80013e6:	761a      	strb	r2, [r3, #24]
}
 80013e8:	bf00      	nop
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr
 80013f4:	e000e100 	.word	0xe000e100
 80013f8:	e000ed00 	.word	0xe000ed00

080013fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b089      	sub	sp, #36	; 0x24
 8001400:	af00      	add	r7, sp, #0
 8001402:	60f8      	str	r0, [r7, #12]
 8001404:	60b9      	str	r1, [r7, #8]
 8001406:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	f003 0307 	and.w	r3, r3, #7
 800140e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	f1c3 0307 	rsb	r3, r3, #7
 8001416:	2b04      	cmp	r3, #4
 8001418:	bf28      	it	cs
 800141a:	2304      	movcs	r3, #4
 800141c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	3304      	adds	r3, #4
 8001422:	2b06      	cmp	r3, #6
 8001424:	d902      	bls.n	800142c <NVIC_EncodePriority+0x30>
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	3b03      	subs	r3, #3
 800142a:	e000      	b.n	800142e <NVIC_EncodePriority+0x32>
 800142c:	2300      	movs	r3, #0
 800142e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001430:	f04f 32ff 	mov.w	r2, #4294967295
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	fa02 f303 	lsl.w	r3, r2, r3
 800143a:	43da      	mvns	r2, r3
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	401a      	ands	r2, r3
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001444:	f04f 31ff 	mov.w	r1, #4294967295
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	fa01 f303 	lsl.w	r3, r1, r3
 800144e:	43d9      	mvns	r1, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001454:	4313      	orrs	r3, r2
         );
}
 8001456:	4618      	mov	r0, r3
 8001458:	3724      	adds	r7, #36	; 0x24
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
	...

08001464 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	3b01      	subs	r3, #1
 8001470:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001474:	d301      	bcc.n	800147a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001476:	2301      	movs	r3, #1
 8001478:	e00f      	b.n	800149a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800147a:	4a0a      	ldr	r2, [pc, #40]	; (80014a4 <SysTick_Config+0x40>)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	3b01      	subs	r3, #1
 8001480:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001482:	210f      	movs	r1, #15
 8001484:	f04f 30ff 	mov.w	r0, #4294967295
 8001488:	f7ff ff8e 	bl	80013a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800148c:	4b05      	ldr	r3, [pc, #20]	; (80014a4 <SysTick_Config+0x40>)
 800148e:	2200      	movs	r2, #0
 8001490:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001492:	4b04      	ldr	r3, [pc, #16]	; (80014a4 <SysTick_Config+0x40>)
 8001494:	2207      	movs	r2, #7
 8001496:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001498:	2300      	movs	r3, #0
}
 800149a:	4618      	mov	r0, r3
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	e000e010 	.word	0xe000e010

080014a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	f7ff ff47 	bl	8001344 <__NVIC_SetPriorityGrouping>
}
 80014b6:	bf00      	nop
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}

080014be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014be:	b580      	push	{r7, lr}
 80014c0:	b086      	sub	sp, #24
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	4603      	mov	r3, r0
 80014c6:	60b9      	str	r1, [r7, #8]
 80014c8:	607a      	str	r2, [r7, #4]
 80014ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014cc:	2300      	movs	r3, #0
 80014ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014d0:	f7ff ff5c 	bl	800138c <__NVIC_GetPriorityGrouping>
 80014d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014d6:	687a      	ldr	r2, [r7, #4]
 80014d8:	68b9      	ldr	r1, [r7, #8]
 80014da:	6978      	ldr	r0, [r7, #20]
 80014dc:	f7ff ff8e 	bl	80013fc <NVIC_EncodePriority>
 80014e0:	4602      	mov	r2, r0
 80014e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014e6:	4611      	mov	r1, r2
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff ff5d 	bl	80013a8 <__NVIC_SetPriority>
}
 80014ee:	bf00      	nop
 80014f0:	3718      	adds	r7, #24
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b082      	sub	sp, #8
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f7ff ffb0 	bl	8001464 <SysTick_Config>
 8001504:	4603      	mov	r3, r0
}
 8001506:	4618      	mov	r0, r3
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
	...

08001510 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001510:	b480      	push	{r7}
 8001512:	b089      	sub	sp, #36	; 0x24
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800151a:	2300      	movs	r3, #0
 800151c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800151e:	2300      	movs	r3, #0
 8001520:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001522:	2300      	movs	r3, #0
 8001524:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001526:	2300      	movs	r3, #0
 8001528:	61fb      	str	r3, [r7, #28]
 800152a:	e16b      	b.n	8001804 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800152c:	2201      	movs	r2, #1
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	fa02 f303 	lsl.w	r3, r2, r3
 8001534:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	697a      	ldr	r2, [r7, #20]
 800153c:	4013      	ands	r3, r2
 800153e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001540:	693a      	ldr	r2, [r7, #16]
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	429a      	cmp	r2, r3
 8001546:	f040 815a 	bne.w	80017fe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	f003 0303 	and.w	r3, r3, #3
 8001552:	2b01      	cmp	r3, #1
 8001554:	d005      	beq.n	8001562 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800155e:	2b02      	cmp	r3, #2
 8001560:	d130      	bne.n	80015c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	005b      	lsls	r3, r3, #1
 800156c:	2203      	movs	r2, #3
 800156e:	fa02 f303 	lsl.w	r3, r2, r3
 8001572:	43db      	mvns	r3, r3
 8001574:	69ba      	ldr	r2, [r7, #24]
 8001576:	4013      	ands	r3, r2
 8001578:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	68da      	ldr	r2, [r3, #12]
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	005b      	lsls	r3, r3, #1
 8001582:	fa02 f303 	lsl.w	r3, r2, r3
 8001586:	69ba      	ldr	r2, [r7, #24]
 8001588:	4313      	orrs	r3, r2
 800158a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	69ba      	ldr	r2, [r7, #24]
 8001590:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001598:	2201      	movs	r2, #1
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	fa02 f303 	lsl.w	r3, r2, r3
 80015a0:	43db      	mvns	r3, r3
 80015a2:	69ba      	ldr	r2, [r7, #24]
 80015a4:	4013      	ands	r3, r2
 80015a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	091b      	lsrs	r3, r3, #4
 80015ae:	f003 0201 	and.w	r2, r3, #1
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	fa02 f303 	lsl.w	r3, r2, r3
 80015b8:	69ba      	ldr	r2, [r7, #24]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	69ba      	ldr	r2, [r7, #24]
 80015c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f003 0303 	and.w	r3, r3, #3
 80015cc:	2b03      	cmp	r3, #3
 80015ce:	d017      	beq.n	8001600 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	2203      	movs	r2, #3
 80015dc:	fa02 f303 	lsl.w	r3, r2, r3
 80015e0:	43db      	mvns	r3, r3
 80015e2:	69ba      	ldr	r2, [r7, #24]
 80015e4:	4013      	ands	r3, r2
 80015e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	689a      	ldr	r2, [r3, #8]
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	fa02 f303 	lsl.w	r3, r2, r3
 80015f4:	69ba      	ldr	r2, [r7, #24]
 80015f6:	4313      	orrs	r3, r2
 80015f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	69ba      	ldr	r2, [r7, #24]
 80015fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f003 0303 	and.w	r3, r3, #3
 8001608:	2b02      	cmp	r3, #2
 800160a:	d123      	bne.n	8001654 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800160c:	69fb      	ldr	r3, [r7, #28]
 800160e:	08da      	lsrs	r2, r3, #3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	3208      	adds	r2, #8
 8001614:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001618:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	f003 0307 	and.w	r3, r3, #7
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	220f      	movs	r2, #15
 8001624:	fa02 f303 	lsl.w	r3, r2, r3
 8001628:	43db      	mvns	r3, r3
 800162a:	69ba      	ldr	r2, [r7, #24]
 800162c:	4013      	ands	r3, r2
 800162e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	691a      	ldr	r2, [r3, #16]
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	f003 0307 	and.w	r3, r3, #7
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	fa02 f303 	lsl.w	r3, r2, r3
 8001640:	69ba      	ldr	r2, [r7, #24]
 8001642:	4313      	orrs	r3, r2
 8001644:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	08da      	lsrs	r2, r3, #3
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	3208      	adds	r2, #8
 800164e:	69b9      	ldr	r1, [r7, #24]
 8001650:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	2203      	movs	r2, #3
 8001660:	fa02 f303 	lsl.w	r3, r2, r3
 8001664:	43db      	mvns	r3, r3
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	4013      	ands	r3, r2
 800166a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f003 0203 	and.w	r2, r3, #3
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	005b      	lsls	r3, r3, #1
 8001678:	fa02 f303 	lsl.w	r3, r2, r3
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	4313      	orrs	r3, r2
 8001680:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	69ba      	ldr	r2, [r7, #24]
 8001686:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001690:	2b00      	cmp	r3, #0
 8001692:	f000 80b4 	beq.w	80017fe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001696:	2300      	movs	r3, #0
 8001698:	60fb      	str	r3, [r7, #12]
 800169a:	4b60      	ldr	r3, [pc, #384]	; (800181c <HAL_GPIO_Init+0x30c>)
 800169c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169e:	4a5f      	ldr	r2, [pc, #380]	; (800181c <HAL_GPIO_Init+0x30c>)
 80016a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016a4:	6453      	str	r3, [r2, #68]	; 0x44
 80016a6:	4b5d      	ldr	r3, [pc, #372]	; (800181c <HAL_GPIO_Init+0x30c>)
 80016a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016ae:	60fb      	str	r3, [r7, #12]
 80016b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016b2:	4a5b      	ldr	r2, [pc, #364]	; (8001820 <HAL_GPIO_Init+0x310>)
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	089b      	lsrs	r3, r3, #2
 80016b8:	3302      	adds	r3, #2
 80016ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	f003 0303 	and.w	r3, r3, #3
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	220f      	movs	r2, #15
 80016ca:	fa02 f303 	lsl.w	r3, r2, r3
 80016ce:	43db      	mvns	r3, r3
 80016d0:	69ba      	ldr	r2, [r7, #24]
 80016d2:	4013      	ands	r3, r2
 80016d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4a52      	ldr	r2, [pc, #328]	; (8001824 <HAL_GPIO_Init+0x314>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d02b      	beq.n	8001736 <HAL_GPIO_Init+0x226>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4a51      	ldr	r2, [pc, #324]	; (8001828 <HAL_GPIO_Init+0x318>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d025      	beq.n	8001732 <HAL_GPIO_Init+0x222>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	4a50      	ldr	r2, [pc, #320]	; (800182c <HAL_GPIO_Init+0x31c>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d01f      	beq.n	800172e <HAL_GPIO_Init+0x21e>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4a4f      	ldr	r2, [pc, #316]	; (8001830 <HAL_GPIO_Init+0x320>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d019      	beq.n	800172a <HAL_GPIO_Init+0x21a>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4a4e      	ldr	r2, [pc, #312]	; (8001834 <HAL_GPIO_Init+0x324>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d013      	beq.n	8001726 <HAL_GPIO_Init+0x216>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4a4d      	ldr	r2, [pc, #308]	; (8001838 <HAL_GPIO_Init+0x328>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d00d      	beq.n	8001722 <HAL_GPIO_Init+0x212>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4a4c      	ldr	r2, [pc, #304]	; (800183c <HAL_GPIO_Init+0x32c>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d007      	beq.n	800171e <HAL_GPIO_Init+0x20e>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4a4b      	ldr	r2, [pc, #300]	; (8001840 <HAL_GPIO_Init+0x330>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d101      	bne.n	800171a <HAL_GPIO_Init+0x20a>
 8001716:	2307      	movs	r3, #7
 8001718:	e00e      	b.n	8001738 <HAL_GPIO_Init+0x228>
 800171a:	2308      	movs	r3, #8
 800171c:	e00c      	b.n	8001738 <HAL_GPIO_Init+0x228>
 800171e:	2306      	movs	r3, #6
 8001720:	e00a      	b.n	8001738 <HAL_GPIO_Init+0x228>
 8001722:	2305      	movs	r3, #5
 8001724:	e008      	b.n	8001738 <HAL_GPIO_Init+0x228>
 8001726:	2304      	movs	r3, #4
 8001728:	e006      	b.n	8001738 <HAL_GPIO_Init+0x228>
 800172a:	2303      	movs	r3, #3
 800172c:	e004      	b.n	8001738 <HAL_GPIO_Init+0x228>
 800172e:	2302      	movs	r3, #2
 8001730:	e002      	b.n	8001738 <HAL_GPIO_Init+0x228>
 8001732:	2301      	movs	r3, #1
 8001734:	e000      	b.n	8001738 <HAL_GPIO_Init+0x228>
 8001736:	2300      	movs	r3, #0
 8001738:	69fa      	ldr	r2, [r7, #28]
 800173a:	f002 0203 	and.w	r2, r2, #3
 800173e:	0092      	lsls	r2, r2, #2
 8001740:	4093      	lsls	r3, r2
 8001742:	69ba      	ldr	r2, [r7, #24]
 8001744:	4313      	orrs	r3, r2
 8001746:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001748:	4935      	ldr	r1, [pc, #212]	; (8001820 <HAL_GPIO_Init+0x310>)
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	089b      	lsrs	r3, r3, #2
 800174e:	3302      	adds	r3, #2
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001756:	4b3b      	ldr	r3, [pc, #236]	; (8001844 <HAL_GPIO_Init+0x334>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	43db      	mvns	r3, r3
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	4013      	ands	r3, r2
 8001764:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d003      	beq.n	800177a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001772:	69ba      	ldr	r2, [r7, #24]
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	4313      	orrs	r3, r2
 8001778:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800177a:	4a32      	ldr	r2, [pc, #200]	; (8001844 <HAL_GPIO_Init+0x334>)
 800177c:	69bb      	ldr	r3, [r7, #24]
 800177e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001780:	4b30      	ldr	r3, [pc, #192]	; (8001844 <HAL_GPIO_Init+0x334>)
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	43db      	mvns	r3, r3
 800178a:	69ba      	ldr	r2, [r7, #24]
 800178c:	4013      	ands	r3, r2
 800178e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001798:	2b00      	cmp	r3, #0
 800179a:	d003      	beq.n	80017a4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800179c:	69ba      	ldr	r2, [r7, #24]
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017a4:	4a27      	ldr	r2, [pc, #156]	; (8001844 <HAL_GPIO_Init+0x334>)
 80017a6:	69bb      	ldr	r3, [r7, #24]
 80017a8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017aa:	4b26      	ldr	r3, [pc, #152]	; (8001844 <HAL_GPIO_Init+0x334>)
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	43db      	mvns	r3, r3
 80017b4:	69ba      	ldr	r2, [r7, #24]
 80017b6:	4013      	ands	r3, r2
 80017b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d003      	beq.n	80017ce <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80017c6:	69ba      	ldr	r2, [r7, #24]
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	4313      	orrs	r3, r2
 80017cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017ce:	4a1d      	ldr	r2, [pc, #116]	; (8001844 <HAL_GPIO_Init+0x334>)
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017d4:	4b1b      	ldr	r3, [pc, #108]	; (8001844 <HAL_GPIO_Init+0x334>)
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	43db      	mvns	r3, r3
 80017de:	69ba      	ldr	r2, [r7, #24]
 80017e0:	4013      	ands	r3, r2
 80017e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d003      	beq.n	80017f8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80017f0:	69ba      	ldr	r2, [r7, #24]
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017f8:	4a12      	ldr	r2, [pc, #72]	; (8001844 <HAL_GPIO_Init+0x334>)
 80017fa:	69bb      	ldr	r3, [r7, #24]
 80017fc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	3301      	adds	r3, #1
 8001802:	61fb      	str	r3, [r7, #28]
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	2b0f      	cmp	r3, #15
 8001808:	f67f ae90 	bls.w	800152c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800180c:	bf00      	nop
 800180e:	bf00      	nop
 8001810:	3724      	adds	r7, #36	; 0x24
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	40023800 	.word	0x40023800
 8001820:	40013800 	.word	0x40013800
 8001824:	40020000 	.word	0x40020000
 8001828:	40020400 	.word	0x40020400
 800182c:	40020800 	.word	0x40020800
 8001830:	40020c00 	.word	0x40020c00
 8001834:	40021000 	.word	0x40021000
 8001838:	40021400 	.word	0x40021400
 800183c:	40021800 	.word	0x40021800
 8001840:	40021c00 	.word	0x40021c00
 8001844:	40013c00 	.word	0x40013c00

08001848 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	460b      	mov	r3, r1
 8001852:	807b      	strh	r3, [r7, #2]
 8001854:	4613      	mov	r3, r2
 8001856:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001858:	787b      	ldrb	r3, [r7, #1]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d003      	beq.n	8001866 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800185e:	887a      	ldrh	r2, [r7, #2]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001864:	e003      	b.n	800186e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001866:	887b      	ldrh	r3, [r7, #2]
 8001868:	041a      	lsls	r2, r3, #16
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	619a      	str	r2, [r3, #24]
}
 800186e:	bf00      	nop
 8001870:	370c      	adds	r7, #12
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
	...

0800187c <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8001882:	4b06      	ldr	r3, [pc, #24]	; (800189c <HAL_PWR_EnableBkUpAccess+0x20>)
 8001884:	2201      	movs	r2, #1
 8001886:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8001888:	4b05      	ldr	r3, [pc, #20]	; (80018a0 <HAL_PWR_EnableBkUpAccess+0x24>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 800188e:	687b      	ldr	r3, [r7, #4]
}
 8001890:	bf00      	nop
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr
 800189c:	420e0020 	.word	0x420e0020
 80018a0:	40007000 	.word	0x40007000

080018a4 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 80018aa:	4b06      	ldr	r3, [pc, #24]	; (80018c4 <HAL_PWR_DisableBkUpAccess+0x20>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 80018b0:	4b05      	ldr	r3, [pc, #20]	; (80018c8 <HAL_PWR_DisableBkUpAccess+0x24>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 80018b6:	687b      	ldr	r3, [r7, #4]
}
 80018b8:	bf00      	nop
 80018ba:	370c      	adds	r7, #12
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr
 80018c4:	420e0020 	.word	0x420e0020
 80018c8:	40007000 	.word	0x40007000

080018cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b086      	sub	sp, #24
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d101      	bne.n	80018de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e264      	b.n	8001da8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0301 	and.w	r3, r3, #1
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d075      	beq.n	80019d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018ea:	4ba3      	ldr	r3, [pc, #652]	; (8001b78 <HAL_RCC_OscConfig+0x2ac>)
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	f003 030c 	and.w	r3, r3, #12
 80018f2:	2b04      	cmp	r3, #4
 80018f4:	d00c      	beq.n	8001910 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018f6:	4ba0      	ldr	r3, [pc, #640]	; (8001b78 <HAL_RCC_OscConfig+0x2ac>)
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018fe:	2b08      	cmp	r3, #8
 8001900:	d112      	bne.n	8001928 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001902:	4b9d      	ldr	r3, [pc, #628]	; (8001b78 <HAL_RCC_OscConfig+0x2ac>)
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800190a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800190e:	d10b      	bne.n	8001928 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001910:	4b99      	ldr	r3, [pc, #612]	; (8001b78 <HAL_RCC_OscConfig+0x2ac>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001918:	2b00      	cmp	r3, #0
 800191a:	d05b      	beq.n	80019d4 <HAL_RCC_OscConfig+0x108>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d157      	bne.n	80019d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	e23f      	b.n	8001da8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001930:	d106      	bne.n	8001940 <HAL_RCC_OscConfig+0x74>
 8001932:	4b91      	ldr	r3, [pc, #580]	; (8001b78 <HAL_RCC_OscConfig+0x2ac>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a90      	ldr	r2, [pc, #576]	; (8001b78 <HAL_RCC_OscConfig+0x2ac>)
 8001938:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800193c:	6013      	str	r3, [r2, #0]
 800193e:	e01d      	b.n	800197c <HAL_RCC_OscConfig+0xb0>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001948:	d10c      	bne.n	8001964 <HAL_RCC_OscConfig+0x98>
 800194a:	4b8b      	ldr	r3, [pc, #556]	; (8001b78 <HAL_RCC_OscConfig+0x2ac>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a8a      	ldr	r2, [pc, #552]	; (8001b78 <HAL_RCC_OscConfig+0x2ac>)
 8001950:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001954:	6013      	str	r3, [r2, #0]
 8001956:	4b88      	ldr	r3, [pc, #544]	; (8001b78 <HAL_RCC_OscConfig+0x2ac>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a87      	ldr	r2, [pc, #540]	; (8001b78 <HAL_RCC_OscConfig+0x2ac>)
 800195c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001960:	6013      	str	r3, [r2, #0]
 8001962:	e00b      	b.n	800197c <HAL_RCC_OscConfig+0xb0>
 8001964:	4b84      	ldr	r3, [pc, #528]	; (8001b78 <HAL_RCC_OscConfig+0x2ac>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a83      	ldr	r2, [pc, #524]	; (8001b78 <HAL_RCC_OscConfig+0x2ac>)
 800196a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800196e:	6013      	str	r3, [r2, #0]
 8001970:	4b81      	ldr	r3, [pc, #516]	; (8001b78 <HAL_RCC_OscConfig+0x2ac>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a80      	ldr	r2, [pc, #512]	; (8001b78 <HAL_RCC_OscConfig+0x2ac>)
 8001976:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800197a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d013      	beq.n	80019ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001984:	f7ff fcae 	bl	80012e4 <HAL_GetTick>
 8001988:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800198a:	e008      	b.n	800199e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800198c:	f7ff fcaa 	bl	80012e4 <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	2b64      	cmp	r3, #100	; 0x64
 8001998:	d901      	bls.n	800199e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e204      	b.n	8001da8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800199e:	4b76      	ldr	r3, [pc, #472]	; (8001b78 <HAL_RCC_OscConfig+0x2ac>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d0f0      	beq.n	800198c <HAL_RCC_OscConfig+0xc0>
 80019aa:	e014      	b.n	80019d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ac:	f7ff fc9a 	bl	80012e4 <HAL_GetTick>
 80019b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019b2:	e008      	b.n	80019c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019b4:	f7ff fc96 	bl	80012e4 <HAL_GetTick>
 80019b8:	4602      	mov	r2, r0
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	2b64      	cmp	r3, #100	; 0x64
 80019c0:	d901      	bls.n	80019c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	e1f0      	b.n	8001da8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019c6:	4b6c      	ldr	r3, [pc, #432]	; (8001b78 <HAL_RCC_OscConfig+0x2ac>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d1f0      	bne.n	80019b4 <HAL_RCC_OscConfig+0xe8>
 80019d2:	e000      	b.n	80019d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0302 	and.w	r3, r3, #2
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d063      	beq.n	8001aaa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019e2:	4b65      	ldr	r3, [pc, #404]	; (8001b78 <HAL_RCC_OscConfig+0x2ac>)
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	f003 030c 	and.w	r3, r3, #12
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d00b      	beq.n	8001a06 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019ee:	4b62      	ldr	r3, [pc, #392]	; (8001b78 <HAL_RCC_OscConfig+0x2ac>)
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019f6:	2b08      	cmp	r3, #8
 80019f8:	d11c      	bne.n	8001a34 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019fa:	4b5f      	ldr	r3, [pc, #380]	; (8001b78 <HAL_RCC_OscConfig+0x2ac>)
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d116      	bne.n	8001a34 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a06:	4b5c      	ldr	r3, [pc, #368]	; (8001b78 <HAL_RCC_OscConfig+0x2ac>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0302 	and.w	r3, r3, #2
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d005      	beq.n	8001a1e <HAL_RCC_OscConfig+0x152>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	68db      	ldr	r3, [r3, #12]
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d001      	beq.n	8001a1e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e1c4      	b.n	8001da8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a1e:	4b56      	ldr	r3, [pc, #344]	; (8001b78 <HAL_RCC_OscConfig+0x2ac>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	691b      	ldr	r3, [r3, #16]
 8001a2a:	00db      	lsls	r3, r3, #3
 8001a2c:	4952      	ldr	r1, [pc, #328]	; (8001b78 <HAL_RCC_OscConfig+0x2ac>)
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a32:	e03a      	b.n	8001aaa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d020      	beq.n	8001a7e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a3c:	4b4f      	ldr	r3, [pc, #316]	; (8001b7c <HAL_RCC_OscConfig+0x2b0>)
 8001a3e:	2201      	movs	r2, #1
 8001a40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a42:	f7ff fc4f 	bl	80012e4 <HAL_GetTick>
 8001a46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a48:	e008      	b.n	8001a5c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a4a:	f7ff fc4b 	bl	80012e4 <HAL_GetTick>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d901      	bls.n	8001a5c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	e1a5      	b.n	8001da8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a5c:	4b46      	ldr	r3, [pc, #280]	; (8001b78 <HAL_RCC_OscConfig+0x2ac>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0302 	and.w	r3, r3, #2
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d0f0      	beq.n	8001a4a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a68:	4b43      	ldr	r3, [pc, #268]	; (8001b78 <HAL_RCC_OscConfig+0x2ac>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	691b      	ldr	r3, [r3, #16]
 8001a74:	00db      	lsls	r3, r3, #3
 8001a76:	4940      	ldr	r1, [pc, #256]	; (8001b78 <HAL_RCC_OscConfig+0x2ac>)
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	600b      	str	r3, [r1, #0]
 8001a7c:	e015      	b.n	8001aaa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a7e:	4b3f      	ldr	r3, [pc, #252]	; (8001b7c <HAL_RCC_OscConfig+0x2b0>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a84:	f7ff fc2e 	bl	80012e4 <HAL_GetTick>
 8001a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a8a:	e008      	b.n	8001a9e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a8c:	f7ff fc2a 	bl	80012e4 <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	d901      	bls.n	8001a9e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e184      	b.n	8001da8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a9e:	4b36      	ldr	r3, [pc, #216]	; (8001b78 <HAL_RCC_OscConfig+0x2ac>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0302 	and.w	r3, r3, #2
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d1f0      	bne.n	8001a8c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0308 	and.w	r3, r3, #8
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d030      	beq.n	8001b18 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	695b      	ldr	r3, [r3, #20]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d016      	beq.n	8001aec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001abe:	4b30      	ldr	r3, [pc, #192]	; (8001b80 <HAL_RCC_OscConfig+0x2b4>)
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ac4:	f7ff fc0e 	bl	80012e4 <HAL_GetTick>
 8001ac8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aca:	e008      	b.n	8001ade <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001acc:	f7ff fc0a 	bl	80012e4 <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d901      	bls.n	8001ade <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e164      	b.n	8001da8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ade:	4b26      	ldr	r3, [pc, #152]	; (8001b78 <HAL_RCC_OscConfig+0x2ac>)
 8001ae0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d0f0      	beq.n	8001acc <HAL_RCC_OscConfig+0x200>
 8001aea:	e015      	b.n	8001b18 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001aec:	4b24      	ldr	r3, [pc, #144]	; (8001b80 <HAL_RCC_OscConfig+0x2b4>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001af2:	f7ff fbf7 	bl	80012e4 <HAL_GetTick>
 8001af6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001af8:	e008      	b.n	8001b0c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001afa:	f7ff fbf3 	bl	80012e4 <HAL_GetTick>
 8001afe:	4602      	mov	r2, r0
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	2b02      	cmp	r3, #2
 8001b06:	d901      	bls.n	8001b0c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	e14d      	b.n	8001da8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b0c:	4b1a      	ldr	r3, [pc, #104]	; (8001b78 <HAL_RCC_OscConfig+0x2ac>)
 8001b0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b10:	f003 0302 	and.w	r3, r3, #2
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d1f0      	bne.n	8001afa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 0304 	and.w	r3, r3, #4
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	f000 80a0 	beq.w	8001c66 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b26:	2300      	movs	r3, #0
 8001b28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b2a:	4b13      	ldr	r3, [pc, #76]	; (8001b78 <HAL_RCC_OscConfig+0x2ac>)
 8001b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d10f      	bne.n	8001b56 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b36:	2300      	movs	r3, #0
 8001b38:	60bb      	str	r3, [r7, #8]
 8001b3a:	4b0f      	ldr	r3, [pc, #60]	; (8001b78 <HAL_RCC_OscConfig+0x2ac>)
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3e:	4a0e      	ldr	r2, [pc, #56]	; (8001b78 <HAL_RCC_OscConfig+0x2ac>)
 8001b40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b44:	6413      	str	r3, [r2, #64]	; 0x40
 8001b46:	4b0c      	ldr	r3, [pc, #48]	; (8001b78 <HAL_RCC_OscConfig+0x2ac>)
 8001b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b4e:	60bb      	str	r3, [r7, #8]
 8001b50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b52:	2301      	movs	r3, #1
 8001b54:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b56:	4b0b      	ldr	r3, [pc, #44]	; (8001b84 <HAL_RCC_OscConfig+0x2b8>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d121      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b62:	4b08      	ldr	r3, [pc, #32]	; (8001b84 <HAL_RCC_OscConfig+0x2b8>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a07      	ldr	r2, [pc, #28]	; (8001b84 <HAL_RCC_OscConfig+0x2b8>)
 8001b68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b6e:	f7ff fbb9 	bl	80012e4 <HAL_GetTick>
 8001b72:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b74:	e011      	b.n	8001b9a <HAL_RCC_OscConfig+0x2ce>
 8001b76:	bf00      	nop
 8001b78:	40023800 	.word	0x40023800
 8001b7c:	42470000 	.word	0x42470000
 8001b80:	42470e80 	.word	0x42470e80
 8001b84:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b88:	f7ff fbac 	bl	80012e4 <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e106      	b.n	8001da8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b9a:	4b85      	ldr	r3, [pc, #532]	; (8001db0 <HAL_RCC_OscConfig+0x4e4>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d0f0      	beq.n	8001b88 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d106      	bne.n	8001bbc <HAL_RCC_OscConfig+0x2f0>
 8001bae:	4b81      	ldr	r3, [pc, #516]	; (8001db4 <HAL_RCC_OscConfig+0x4e8>)
 8001bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bb2:	4a80      	ldr	r2, [pc, #512]	; (8001db4 <HAL_RCC_OscConfig+0x4e8>)
 8001bb4:	f043 0301 	orr.w	r3, r3, #1
 8001bb8:	6713      	str	r3, [r2, #112]	; 0x70
 8001bba:	e01c      	b.n	8001bf6 <HAL_RCC_OscConfig+0x32a>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	2b05      	cmp	r3, #5
 8001bc2:	d10c      	bne.n	8001bde <HAL_RCC_OscConfig+0x312>
 8001bc4:	4b7b      	ldr	r3, [pc, #492]	; (8001db4 <HAL_RCC_OscConfig+0x4e8>)
 8001bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bc8:	4a7a      	ldr	r2, [pc, #488]	; (8001db4 <HAL_RCC_OscConfig+0x4e8>)
 8001bca:	f043 0304 	orr.w	r3, r3, #4
 8001bce:	6713      	str	r3, [r2, #112]	; 0x70
 8001bd0:	4b78      	ldr	r3, [pc, #480]	; (8001db4 <HAL_RCC_OscConfig+0x4e8>)
 8001bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bd4:	4a77      	ldr	r2, [pc, #476]	; (8001db4 <HAL_RCC_OscConfig+0x4e8>)
 8001bd6:	f043 0301 	orr.w	r3, r3, #1
 8001bda:	6713      	str	r3, [r2, #112]	; 0x70
 8001bdc:	e00b      	b.n	8001bf6 <HAL_RCC_OscConfig+0x32a>
 8001bde:	4b75      	ldr	r3, [pc, #468]	; (8001db4 <HAL_RCC_OscConfig+0x4e8>)
 8001be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001be2:	4a74      	ldr	r2, [pc, #464]	; (8001db4 <HAL_RCC_OscConfig+0x4e8>)
 8001be4:	f023 0301 	bic.w	r3, r3, #1
 8001be8:	6713      	str	r3, [r2, #112]	; 0x70
 8001bea:	4b72      	ldr	r3, [pc, #456]	; (8001db4 <HAL_RCC_OscConfig+0x4e8>)
 8001bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bee:	4a71      	ldr	r2, [pc, #452]	; (8001db4 <HAL_RCC_OscConfig+0x4e8>)
 8001bf0:	f023 0304 	bic.w	r3, r3, #4
 8001bf4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d015      	beq.n	8001c2a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bfe:	f7ff fb71 	bl	80012e4 <HAL_GetTick>
 8001c02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c04:	e00a      	b.n	8001c1c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c06:	f7ff fb6d 	bl	80012e4 <HAL_GetTick>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d901      	bls.n	8001c1c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	e0c5      	b.n	8001da8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c1c:	4b65      	ldr	r3, [pc, #404]	; (8001db4 <HAL_RCC_OscConfig+0x4e8>)
 8001c1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c20:	f003 0302 	and.w	r3, r3, #2
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d0ee      	beq.n	8001c06 <HAL_RCC_OscConfig+0x33a>
 8001c28:	e014      	b.n	8001c54 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c2a:	f7ff fb5b 	bl	80012e4 <HAL_GetTick>
 8001c2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c30:	e00a      	b.n	8001c48 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c32:	f7ff fb57 	bl	80012e4 <HAL_GetTick>
 8001c36:	4602      	mov	r2, r0
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d901      	bls.n	8001c48 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001c44:	2303      	movs	r3, #3
 8001c46:	e0af      	b.n	8001da8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c48:	4b5a      	ldr	r3, [pc, #360]	; (8001db4 <HAL_RCC_OscConfig+0x4e8>)
 8001c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c4c:	f003 0302 	and.w	r3, r3, #2
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d1ee      	bne.n	8001c32 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c54:	7dfb      	ldrb	r3, [r7, #23]
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d105      	bne.n	8001c66 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c5a:	4b56      	ldr	r3, [pc, #344]	; (8001db4 <HAL_RCC_OscConfig+0x4e8>)
 8001c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5e:	4a55      	ldr	r2, [pc, #340]	; (8001db4 <HAL_RCC_OscConfig+0x4e8>)
 8001c60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c64:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	699b      	ldr	r3, [r3, #24]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	f000 809b 	beq.w	8001da6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c70:	4b50      	ldr	r3, [pc, #320]	; (8001db4 <HAL_RCC_OscConfig+0x4e8>)
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	f003 030c 	and.w	r3, r3, #12
 8001c78:	2b08      	cmp	r3, #8
 8001c7a:	d05c      	beq.n	8001d36 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	699b      	ldr	r3, [r3, #24]
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d141      	bne.n	8001d08 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c84:	4b4c      	ldr	r3, [pc, #304]	; (8001db8 <HAL_RCC_OscConfig+0x4ec>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c8a:	f7ff fb2b 	bl	80012e4 <HAL_GetTick>
 8001c8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c90:	e008      	b.n	8001ca4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c92:	f7ff fb27 	bl	80012e4 <HAL_GetTick>
 8001c96:	4602      	mov	r2, r0
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d901      	bls.n	8001ca4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	e081      	b.n	8001da8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ca4:	4b43      	ldr	r3, [pc, #268]	; (8001db4 <HAL_RCC_OscConfig+0x4e8>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d1f0      	bne.n	8001c92 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	69da      	ldr	r2, [r3, #28]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6a1b      	ldr	r3, [r3, #32]
 8001cb8:	431a      	orrs	r2, r3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cbe:	019b      	lsls	r3, r3, #6
 8001cc0:	431a      	orrs	r2, r3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cc6:	085b      	lsrs	r3, r3, #1
 8001cc8:	3b01      	subs	r3, #1
 8001cca:	041b      	lsls	r3, r3, #16
 8001ccc:	431a      	orrs	r2, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd2:	061b      	lsls	r3, r3, #24
 8001cd4:	4937      	ldr	r1, [pc, #220]	; (8001db4 <HAL_RCC_OscConfig+0x4e8>)
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cda:	4b37      	ldr	r3, [pc, #220]	; (8001db8 <HAL_RCC_OscConfig+0x4ec>)
 8001cdc:	2201      	movs	r2, #1
 8001cde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce0:	f7ff fb00 	bl	80012e4 <HAL_GetTick>
 8001ce4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ce6:	e008      	b.n	8001cfa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ce8:	f7ff fafc 	bl	80012e4 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e056      	b.n	8001da8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cfa:	4b2e      	ldr	r3, [pc, #184]	; (8001db4 <HAL_RCC_OscConfig+0x4e8>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d0f0      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x41c>
 8001d06:	e04e      	b.n	8001da6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d08:	4b2b      	ldr	r3, [pc, #172]	; (8001db8 <HAL_RCC_OscConfig+0x4ec>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d0e:	f7ff fae9 	bl	80012e4 <HAL_GetTick>
 8001d12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d14:	e008      	b.n	8001d28 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d16:	f7ff fae5 	bl	80012e4 <HAL_GetTick>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d901      	bls.n	8001d28 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001d24:	2303      	movs	r3, #3
 8001d26:	e03f      	b.n	8001da8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d28:	4b22      	ldr	r3, [pc, #136]	; (8001db4 <HAL_RCC_OscConfig+0x4e8>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d1f0      	bne.n	8001d16 <HAL_RCC_OscConfig+0x44a>
 8001d34:	e037      	b.n	8001da6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	699b      	ldr	r3, [r3, #24]
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d101      	bne.n	8001d42 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e032      	b.n	8001da8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d42:	4b1c      	ldr	r3, [pc, #112]	; (8001db4 <HAL_RCC_OscConfig+0x4e8>)
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	699b      	ldr	r3, [r3, #24]
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d028      	beq.n	8001da2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d121      	bne.n	8001da2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d11a      	bne.n	8001da2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d6c:	68fa      	ldr	r2, [r7, #12]
 8001d6e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d72:	4013      	ands	r3, r2
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d78:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d111      	bne.n	8001da2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d88:	085b      	lsrs	r3, r3, #1
 8001d8a:	3b01      	subs	r3, #1
 8001d8c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d107      	bne.n	8001da2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d9c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d001      	beq.n	8001da6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e000      	b.n	8001da8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001da6:	2300      	movs	r3, #0
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3718      	adds	r7, #24
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	40007000 	.word	0x40007000
 8001db4:	40023800 	.word	0x40023800
 8001db8:	42470060 	.word	0x42470060

08001dbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d101      	bne.n	8001dd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e0cc      	b.n	8001f6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001dd0:	4b68      	ldr	r3, [pc, #416]	; (8001f74 <HAL_RCC_ClockConfig+0x1b8>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0307 	and.w	r3, r3, #7
 8001dd8:	683a      	ldr	r2, [r7, #0]
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d90c      	bls.n	8001df8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dde:	4b65      	ldr	r3, [pc, #404]	; (8001f74 <HAL_RCC_ClockConfig+0x1b8>)
 8001de0:	683a      	ldr	r2, [r7, #0]
 8001de2:	b2d2      	uxtb	r2, r2
 8001de4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001de6:	4b63      	ldr	r3, [pc, #396]	; (8001f74 <HAL_RCC_ClockConfig+0x1b8>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0307 	and.w	r3, r3, #7
 8001dee:	683a      	ldr	r2, [r7, #0]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d001      	beq.n	8001df8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e0b8      	b.n	8001f6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0302 	and.w	r3, r3, #2
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d020      	beq.n	8001e46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0304 	and.w	r3, r3, #4
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d005      	beq.n	8001e1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e10:	4b59      	ldr	r3, [pc, #356]	; (8001f78 <HAL_RCC_ClockConfig+0x1bc>)
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	4a58      	ldr	r2, [pc, #352]	; (8001f78 <HAL_RCC_ClockConfig+0x1bc>)
 8001e16:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001e1a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0308 	and.w	r3, r3, #8
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d005      	beq.n	8001e34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e28:	4b53      	ldr	r3, [pc, #332]	; (8001f78 <HAL_RCC_ClockConfig+0x1bc>)
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	4a52      	ldr	r2, [pc, #328]	; (8001f78 <HAL_RCC_ClockConfig+0x1bc>)
 8001e2e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001e32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e34:	4b50      	ldr	r3, [pc, #320]	; (8001f78 <HAL_RCC_ClockConfig+0x1bc>)
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	494d      	ldr	r1, [pc, #308]	; (8001f78 <HAL_RCC_ClockConfig+0x1bc>)
 8001e42:	4313      	orrs	r3, r2
 8001e44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0301 	and.w	r3, r3, #1
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d044      	beq.n	8001edc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d107      	bne.n	8001e6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e5a:	4b47      	ldr	r3, [pc, #284]	; (8001f78 <HAL_RCC_ClockConfig+0x1bc>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d119      	bne.n	8001e9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e07f      	b.n	8001f6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d003      	beq.n	8001e7a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e76:	2b03      	cmp	r3, #3
 8001e78:	d107      	bne.n	8001e8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e7a:	4b3f      	ldr	r3, [pc, #252]	; (8001f78 <HAL_RCC_ClockConfig+0x1bc>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d109      	bne.n	8001e9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e06f      	b.n	8001f6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e8a:	4b3b      	ldr	r3, [pc, #236]	; (8001f78 <HAL_RCC_ClockConfig+0x1bc>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0302 	and.w	r3, r3, #2
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d101      	bne.n	8001e9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e067      	b.n	8001f6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e9a:	4b37      	ldr	r3, [pc, #220]	; (8001f78 <HAL_RCC_ClockConfig+0x1bc>)
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	f023 0203 	bic.w	r2, r3, #3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	4934      	ldr	r1, [pc, #208]	; (8001f78 <HAL_RCC_ClockConfig+0x1bc>)
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001eac:	f7ff fa1a 	bl	80012e4 <HAL_GetTick>
 8001eb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eb2:	e00a      	b.n	8001eca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001eb4:	f7ff fa16 	bl	80012e4 <HAL_GetTick>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d901      	bls.n	8001eca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e04f      	b.n	8001f6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eca:	4b2b      	ldr	r3, [pc, #172]	; (8001f78 <HAL_RCC_ClockConfig+0x1bc>)
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	f003 020c 	and.w	r2, r3, #12
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d1eb      	bne.n	8001eb4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001edc:	4b25      	ldr	r3, [pc, #148]	; (8001f74 <HAL_RCC_ClockConfig+0x1b8>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0307 	and.w	r3, r3, #7
 8001ee4:	683a      	ldr	r2, [r7, #0]
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d20c      	bcs.n	8001f04 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eea:	4b22      	ldr	r3, [pc, #136]	; (8001f74 <HAL_RCC_ClockConfig+0x1b8>)
 8001eec:	683a      	ldr	r2, [r7, #0]
 8001eee:	b2d2      	uxtb	r2, r2
 8001ef0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ef2:	4b20      	ldr	r3, [pc, #128]	; (8001f74 <HAL_RCC_ClockConfig+0x1b8>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0307 	and.w	r3, r3, #7
 8001efa:	683a      	ldr	r2, [r7, #0]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d001      	beq.n	8001f04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e032      	b.n	8001f6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0304 	and.w	r3, r3, #4
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d008      	beq.n	8001f22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f10:	4b19      	ldr	r3, [pc, #100]	; (8001f78 <HAL_RCC_ClockConfig+0x1bc>)
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	4916      	ldr	r1, [pc, #88]	; (8001f78 <HAL_RCC_ClockConfig+0x1bc>)
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0308 	and.w	r3, r3, #8
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d009      	beq.n	8001f42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f2e:	4b12      	ldr	r3, [pc, #72]	; (8001f78 <HAL_RCC_ClockConfig+0x1bc>)
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	691b      	ldr	r3, [r3, #16]
 8001f3a:	00db      	lsls	r3, r3, #3
 8001f3c:	490e      	ldr	r1, [pc, #56]	; (8001f78 <HAL_RCC_ClockConfig+0x1bc>)
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f42:	f000 f821 	bl	8001f88 <HAL_RCC_GetSysClockFreq>
 8001f46:	4602      	mov	r2, r0
 8001f48:	4b0b      	ldr	r3, [pc, #44]	; (8001f78 <HAL_RCC_ClockConfig+0x1bc>)
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	091b      	lsrs	r3, r3, #4
 8001f4e:	f003 030f 	and.w	r3, r3, #15
 8001f52:	490a      	ldr	r1, [pc, #40]	; (8001f7c <HAL_RCC_ClockConfig+0x1c0>)
 8001f54:	5ccb      	ldrb	r3, [r1, r3]
 8001f56:	fa22 f303 	lsr.w	r3, r2, r3
 8001f5a:	4a09      	ldr	r2, [pc, #36]	; (8001f80 <HAL_RCC_ClockConfig+0x1c4>)
 8001f5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001f5e:	4b09      	ldr	r3, [pc, #36]	; (8001f84 <HAL_RCC_ClockConfig+0x1c8>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7ff f97a 	bl	800125c <HAL_InitTick>

  return HAL_OK;
 8001f68:	2300      	movs	r3, #0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3710      	adds	r7, #16
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	40023c00 	.word	0x40023c00
 8001f78:	40023800 	.word	0x40023800
 8001f7c:	08006944 	.word	0x08006944
 8001f80:	20000000 	.word	0x20000000
 8001f84:	20000004 	.word	0x20000004

08001f88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f88:	b5b0      	push	{r4, r5, r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001f8e:	2100      	movs	r1, #0
 8001f90:	6079      	str	r1, [r7, #4]
 8001f92:	2100      	movs	r1, #0
 8001f94:	60f9      	str	r1, [r7, #12]
 8001f96:	2100      	movs	r1, #0
 8001f98:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001f9a:	2100      	movs	r1, #0
 8001f9c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f9e:	4952      	ldr	r1, [pc, #328]	; (80020e8 <HAL_RCC_GetSysClockFreq+0x160>)
 8001fa0:	6889      	ldr	r1, [r1, #8]
 8001fa2:	f001 010c 	and.w	r1, r1, #12
 8001fa6:	2908      	cmp	r1, #8
 8001fa8:	d00d      	beq.n	8001fc6 <HAL_RCC_GetSysClockFreq+0x3e>
 8001faa:	2908      	cmp	r1, #8
 8001fac:	f200 8094 	bhi.w	80020d8 <HAL_RCC_GetSysClockFreq+0x150>
 8001fb0:	2900      	cmp	r1, #0
 8001fb2:	d002      	beq.n	8001fba <HAL_RCC_GetSysClockFreq+0x32>
 8001fb4:	2904      	cmp	r1, #4
 8001fb6:	d003      	beq.n	8001fc0 <HAL_RCC_GetSysClockFreq+0x38>
 8001fb8:	e08e      	b.n	80020d8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001fba:	4b4c      	ldr	r3, [pc, #304]	; (80020ec <HAL_RCC_GetSysClockFreq+0x164>)
 8001fbc:	60bb      	str	r3, [r7, #8]
       break;
 8001fbe:	e08e      	b.n	80020de <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001fc0:	4b4b      	ldr	r3, [pc, #300]	; (80020f0 <HAL_RCC_GetSysClockFreq+0x168>)
 8001fc2:	60bb      	str	r3, [r7, #8]
      break;
 8001fc4:	e08b      	b.n	80020de <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001fc6:	4948      	ldr	r1, [pc, #288]	; (80020e8 <HAL_RCC_GetSysClockFreq+0x160>)
 8001fc8:	6849      	ldr	r1, [r1, #4]
 8001fca:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8001fce:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001fd0:	4945      	ldr	r1, [pc, #276]	; (80020e8 <HAL_RCC_GetSysClockFreq+0x160>)
 8001fd2:	6849      	ldr	r1, [r1, #4]
 8001fd4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001fd8:	2900      	cmp	r1, #0
 8001fda:	d024      	beq.n	8002026 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fdc:	4942      	ldr	r1, [pc, #264]	; (80020e8 <HAL_RCC_GetSysClockFreq+0x160>)
 8001fde:	6849      	ldr	r1, [r1, #4]
 8001fe0:	0989      	lsrs	r1, r1, #6
 8001fe2:	4608      	mov	r0, r1
 8001fe4:	f04f 0100 	mov.w	r1, #0
 8001fe8:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001fec:	f04f 0500 	mov.w	r5, #0
 8001ff0:	ea00 0204 	and.w	r2, r0, r4
 8001ff4:	ea01 0305 	and.w	r3, r1, r5
 8001ff8:	493d      	ldr	r1, [pc, #244]	; (80020f0 <HAL_RCC_GetSysClockFreq+0x168>)
 8001ffa:	fb01 f003 	mul.w	r0, r1, r3
 8001ffe:	2100      	movs	r1, #0
 8002000:	fb01 f102 	mul.w	r1, r1, r2
 8002004:	1844      	adds	r4, r0, r1
 8002006:	493a      	ldr	r1, [pc, #232]	; (80020f0 <HAL_RCC_GetSysClockFreq+0x168>)
 8002008:	fba2 0101 	umull	r0, r1, r2, r1
 800200c:	1863      	adds	r3, r4, r1
 800200e:	4619      	mov	r1, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	461a      	mov	r2, r3
 8002014:	f04f 0300 	mov.w	r3, #0
 8002018:	f7fe f92a 	bl	8000270 <__aeabi_uldivmod>
 800201c:	4602      	mov	r2, r0
 800201e:	460b      	mov	r3, r1
 8002020:	4613      	mov	r3, r2
 8002022:	60fb      	str	r3, [r7, #12]
 8002024:	e04a      	b.n	80020bc <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002026:	4b30      	ldr	r3, [pc, #192]	; (80020e8 <HAL_RCC_GetSysClockFreq+0x160>)
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	099b      	lsrs	r3, r3, #6
 800202c:	461a      	mov	r2, r3
 800202e:	f04f 0300 	mov.w	r3, #0
 8002032:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002036:	f04f 0100 	mov.w	r1, #0
 800203a:	ea02 0400 	and.w	r4, r2, r0
 800203e:	ea03 0501 	and.w	r5, r3, r1
 8002042:	4620      	mov	r0, r4
 8002044:	4629      	mov	r1, r5
 8002046:	f04f 0200 	mov.w	r2, #0
 800204a:	f04f 0300 	mov.w	r3, #0
 800204e:	014b      	lsls	r3, r1, #5
 8002050:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002054:	0142      	lsls	r2, r0, #5
 8002056:	4610      	mov	r0, r2
 8002058:	4619      	mov	r1, r3
 800205a:	1b00      	subs	r0, r0, r4
 800205c:	eb61 0105 	sbc.w	r1, r1, r5
 8002060:	f04f 0200 	mov.w	r2, #0
 8002064:	f04f 0300 	mov.w	r3, #0
 8002068:	018b      	lsls	r3, r1, #6
 800206a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800206e:	0182      	lsls	r2, r0, #6
 8002070:	1a12      	subs	r2, r2, r0
 8002072:	eb63 0301 	sbc.w	r3, r3, r1
 8002076:	f04f 0000 	mov.w	r0, #0
 800207a:	f04f 0100 	mov.w	r1, #0
 800207e:	00d9      	lsls	r1, r3, #3
 8002080:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002084:	00d0      	lsls	r0, r2, #3
 8002086:	4602      	mov	r2, r0
 8002088:	460b      	mov	r3, r1
 800208a:	1912      	adds	r2, r2, r4
 800208c:	eb45 0303 	adc.w	r3, r5, r3
 8002090:	f04f 0000 	mov.w	r0, #0
 8002094:	f04f 0100 	mov.w	r1, #0
 8002098:	0299      	lsls	r1, r3, #10
 800209a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800209e:	0290      	lsls	r0, r2, #10
 80020a0:	4602      	mov	r2, r0
 80020a2:	460b      	mov	r3, r1
 80020a4:	4610      	mov	r0, r2
 80020a6:	4619      	mov	r1, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	461a      	mov	r2, r3
 80020ac:	f04f 0300 	mov.w	r3, #0
 80020b0:	f7fe f8de 	bl	8000270 <__aeabi_uldivmod>
 80020b4:	4602      	mov	r2, r0
 80020b6:	460b      	mov	r3, r1
 80020b8:	4613      	mov	r3, r2
 80020ba:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80020bc:	4b0a      	ldr	r3, [pc, #40]	; (80020e8 <HAL_RCC_GetSysClockFreq+0x160>)
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	0c1b      	lsrs	r3, r3, #16
 80020c2:	f003 0303 	and.w	r3, r3, #3
 80020c6:	3301      	adds	r3, #1
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80020cc:	68fa      	ldr	r2, [r7, #12]
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80020d4:	60bb      	str	r3, [r7, #8]
      break;
 80020d6:	e002      	b.n	80020de <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80020d8:	4b04      	ldr	r3, [pc, #16]	; (80020ec <HAL_RCC_GetSysClockFreq+0x164>)
 80020da:	60bb      	str	r3, [r7, #8]
      break;
 80020dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020de:	68bb      	ldr	r3, [r7, #8]
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3710      	adds	r7, #16
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bdb0      	pop	{r4, r5, r7, pc}
 80020e8:	40023800 	.word	0x40023800
 80020ec:	00f42400 	.word	0x00f42400
 80020f0:	017d7840 	.word	0x017d7840

080020f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d101      	bne.n	8002106 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e041      	b.n	800218a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800210c:	b2db      	uxtb	r3, r3
 800210e:	2b00      	cmp	r3, #0
 8002110:	d106      	bne.n	8002120 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f7fe feb4 	bl	8000e88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2202      	movs	r2, #2
 8002124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	3304      	adds	r3, #4
 8002130:	4619      	mov	r1, r3
 8002132:	4610      	mov	r0, r2
 8002134:	f000 fb7e 	bl	8002834 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2201      	movs	r2, #1
 800213c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2201      	movs	r2, #1
 8002144:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2201      	movs	r2, #1
 800214c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2201      	movs	r2, #1
 8002154:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2201      	movs	r2, #1
 800215c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2201      	movs	r2, #1
 8002164:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2201      	movs	r2, #1
 800216c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2201      	movs	r2, #1
 8002174:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2201      	movs	r2, #1
 800217c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2201      	movs	r2, #1
 8002184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002188:	2300      	movs	r3, #0
}
 800218a:	4618      	mov	r0, r3
 800218c:	3708      	adds	r7, #8
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}

08002192 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002192:	b580      	push	{r7, lr}
 8002194:	b082      	sub	sp, #8
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d101      	bne.n	80021a4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e041      	b.n	8002228 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d106      	bne.n	80021be <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2200      	movs	r2, #0
 80021b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f000 f839 	bl	8002230 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2202      	movs	r2, #2
 80021c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	3304      	adds	r3, #4
 80021ce:	4619      	mov	r1, r3
 80021d0:	4610      	mov	r0, r2
 80021d2:	f000 fb2f 	bl	8002834 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2201      	movs	r2, #1
 80021da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2201      	movs	r2, #1
 80021e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2201      	movs	r2, #1
 80021ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2201      	movs	r2, #1
 80021f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2201      	movs	r2, #1
 80021fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2201      	movs	r2, #1
 8002202:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2201      	movs	r2, #1
 800220a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2201      	movs	r2, #1
 8002212:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2201      	movs	r2, #1
 800221a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2201      	movs	r2, #1
 8002222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002226:	2300      	movs	r3, #0
}
 8002228:	4618      	mov	r0, r3
 800222a:	3708      	adds	r7, #8
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}

08002230 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002238:	bf00      	nop
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d109      	bne.n	8002268 <HAL_TIM_PWM_Start+0x24>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800225a:	b2db      	uxtb	r3, r3
 800225c:	2b01      	cmp	r3, #1
 800225e:	bf14      	ite	ne
 8002260:	2301      	movne	r3, #1
 8002262:	2300      	moveq	r3, #0
 8002264:	b2db      	uxtb	r3, r3
 8002266:	e022      	b.n	80022ae <HAL_TIM_PWM_Start+0x6a>
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	2b04      	cmp	r3, #4
 800226c:	d109      	bne.n	8002282 <HAL_TIM_PWM_Start+0x3e>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002274:	b2db      	uxtb	r3, r3
 8002276:	2b01      	cmp	r3, #1
 8002278:	bf14      	ite	ne
 800227a:	2301      	movne	r3, #1
 800227c:	2300      	moveq	r3, #0
 800227e:	b2db      	uxtb	r3, r3
 8002280:	e015      	b.n	80022ae <HAL_TIM_PWM_Start+0x6a>
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	2b08      	cmp	r3, #8
 8002286:	d109      	bne.n	800229c <HAL_TIM_PWM_Start+0x58>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800228e:	b2db      	uxtb	r3, r3
 8002290:	2b01      	cmp	r3, #1
 8002292:	bf14      	ite	ne
 8002294:	2301      	movne	r3, #1
 8002296:	2300      	moveq	r3, #0
 8002298:	b2db      	uxtb	r3, r3
 800229a:	e008      	b.n	80022ae <HAL_TIM_PWM_Start+0x6a>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	bf14      	ite	ne
 80022a8:	2301      	movne	r3, #1
 80022aa:	2300      	moveq	r3, #0
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e07c      	b.n	80023b0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d104      	bne.n	80022c6 <HAL_TIM_PWM_Start+0x82>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2202      	movs	r2, #2
 80022c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022c4:	e013      	b.n	80022ee <HAL_TIM_PWM_Start+0xaa>
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	2b04      	cmp	r3, #4
 80022ca:	d104      	bne.n	80022d6 <HAL_TIM_PWM_Start+0x92>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2202      	movs	r2, #2
 80022d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80022d4:	e00b      	b.n	80022ee <HAL_TIM_PWM_Start+0xaa>
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	2b08      	cmp	r3, #8
 80022da:	d104      	bne.n	80022e6 <HAL_TIM_PWM_Start+0xa2>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2202      	movs	r2, #2
 80022e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80022e4:	e003      	b.n	80022ee <HAL_TIM_PWM_Start+0xaa>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2202      	movs	r2, #2
 80022ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	2201      	movs	r2, #1
 80022f4:	6839      	ldr	r1, [r7, #0]
 80022f6:	4618      	mov	r0, r3
 80022f8:	f000 fd86 	bl	8002e08 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a2d      	ldr	r2, [pc, #180]	; (80023b8 <HAL_TIM_PWM_Start+0x174>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d004      	beq.n	8002310 <HAL_TIM_PWM_Start+0xcc>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a2c      	ldr	r2, [pc, #176]	; (80023bc <HAL_TIM_PWM_Start+0x178>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d101      	bne.n	8002314 <HAL_TIM_PWM_Start+0xd0>
 8002310:	2301      	movs	r3, #1
 8002312:	e000      	b.n	8002316 <HAL_TIM_PWM_Start+0xd2>
 8002314:	2300      	movs	r3, #0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d007      	beq.n	800232a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002328:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a22      	ldr	r2, [pc, #136]	; (80023b8 <HAL_TIM_PWM_Start+0x174>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d022      	beq.n	800237a <HAL_TIM_PWM_Start+0x136>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800233c:	d01d      	beq.n	800237a <HAL_TIM_PWM_Start+0x136>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a1f      	ldr	r2, [pc, #124]	; (80023c0 <HAL_TIM_PWM_Start+0x17c>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d018      	beq.n	800237a <HAL_TIM_PWM_Start+0x136>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a1d      	ldr	r2, [pc, #116]	; (80023c4 <HAL_TIM_PWM_Start+0x180>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d013      	beq.n	800237a <HAL_TIM_PWM_Start+0x136>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a1c      	ldr	r2, [pc, #112]	; (80023c8 <HAL_TIM_PWM_Start+0x184>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d00e      	beq.n	800237a <HAL_TIM_PWM_Start+0x136>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a16      	ldr	r2, [pc, #88]	; (80023bc <HAL_TIM_PWM_Start+0x178>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d009      	beq.n	800237a <HAL_TIM_PWM_Start+0x136>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a18      	ldr	r2, [pc, #96]	; (80023cc <HAL_TIM_PWM_Start+0x188>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d004      	beq.n	800237a <HAL_TIM_PWM_Start+0x136>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a16      	ldr	r2, [pc, #88]	; (80023d0 <HAL_TIM_PWM_Start+0x18c>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d111      	bne.n	800239e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	f003 0307 	and.w	r3, r3, #7
 8002384:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2b06      	cmp	r3, #6
 800238a:	d010      	beq.n	80023ae <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f042 0201 	orr.w	r2, r2, #1
 800239a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800239c:	e007      	b.n	80023ae <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f042 0201 	orr.w	r2, r2, #1
 80023ac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80023ae:	2300      	movs	r3, #0
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3710      	adds	r7, #16
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	40010000 	.word	0x40010000
 80023bc:	40010400 	.word	0x40010400
 80023c0:	40000400 	.word	0x40000400
 80023c4:	40000800 	.word	0x40000800
 80023c8:	40000c00 	.word	0x40000c00
 80023cc:	40014000 	.word	0x40014000
 80023d0:	40001800 	.word	0x40001800

080023d4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b086      	sub	sp, #24
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d101      	bne.n	80023e8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e097      	b.n	8002518 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d106      	bne.n	8002402 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2200      	movs	r2, #0
 80023f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f7fe fda1 	bl	8000f44 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2202      	movs	r2, #2
 8002406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	6812      	ldr	r2, [r2, #0]
 8002414:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002418:	f023 0307 	bic.w	r3, r3, #7
 800241c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	3304      	adds	r3, #4
 8002426:	4619      	mov	r1, r3
 8002428:	4610      	mov	r0, r2
 800242a:	f000 fa03 	bl	8002834 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	699b      	ldr	r3, [r3, #24]
 800243c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	6a1b      	ldr	r3, [r3, #32]
 8002444:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	697a      	ldr	r2, [r7, #20]
 800244c:	4313      	orrs	r3, r2
 800244e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002456:	f023 0303 	bic.w	r3, r3, #3
 800245a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	689a      	ldr	r2, [r3, #8]
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	699b      	ldr	r3, [r3, #24]
 8002464:	021b      	lsls	r3, r3, #8
 8002466:	4313      	orrs	r3, r2
 8002468:	693a      	ldr	r2, [r7, #16]
 800246a:	4313      	orrs	r3, r2
 800246c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002474:	f023 030c 	bic.w	r3, r3, #12
 8002478:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002480:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002484:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	68da      	ldr	r2, [r3, #12]
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	69db      	ldr	r3, [r3, #28]
 800248e:	021b      	lsls	r3, r3, #8
 8002490:	4313      	orrs	r3, r2
 8002492:	693a      	ldr	r2, [r7, #16]
 8002494:	4313      	orrs	r3, r2
 8002496:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	691b      	ldr	r3, [r3, #16]
 800249c:	011a      	lsls	r2, r3, #4
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	6a1b      	ldr	r3, [r3, #32]
 80024a2:	031b      	lsls	r3, r3, #12
 80024a4:	4313      	orrs	r3, r2
 80024a6:	693a      	ldr	r2, [r7, #16]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80024b2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80024ba:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	685a      	ldr	r2, [r3, #4]
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	695b      	ldr	r3, [r3, #20]
 80024c4:	011b      	lsls	r3, r3, #4
 80024c6:	4313      	orrs	r3, r2
 80024c8:	68fa      	ldr	r2, [r7, #12]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	697a      	ldr	r2, [r7, #20]
 80024d4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	693a      	ldr	r2, [r7, #16]
 80024dc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	68fa      	ldr	r2, [r7, #12]
 80024e4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2201      	movs	r2, #1
 80024ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2201      	movs	r2, #1
 80024f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2201      	movs	r2, #1
 80024fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2201      	movs	r2, #1
 8002502:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2201      	movs	r2, #1
 800250a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2201      	movs	r2, #1
 8002512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002516:	2300      	movs	r3, #0
}
 8002518:	4618      	mov	r0, r3
 800251a:	3718      	adds	r7, #24
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}

08002520 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b086      	sub	sp, #24
 8002524:	af00      	add	r7, sp, #0
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	60b9      	str	r1, [r7, #8]
 800252a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800252c:	2300      	movs	r3, #0
 800252e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002536:	2b01      	cmp	r3, #1
 8002538:	d101      	bne.n	800253e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800253a:	2302      	movs	r3, #2
 800253c:	e0ae      	b.n	800269c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2201      	movs	r2, #1
 8002542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2b0c      	cmp	r3, #12
 800254a:	f200 809f 	bhi.w	800268c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800254e:	a201      	add	r2, pc, #4	; (adr r2, 8002554 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002554:	08002589 	.word	0x08002589
 8002558:	0800268d 	.word	0x0800268d
 800255c:	0800268d 	.word	0x0800268d
 8002560:	0800268d 	.word	0x0800268d
 8002564:	080025c9 	.word	0x080025c9
 8002568:	0800268d 	.word	0x0800268d
 800256c:	0800268d 	.word	0x0800268d
 8002570:	0800268d 	.word	0x0800268d
 8002574:	0800260b 	.word	0x0800260b
 8002578:	0800268d 	.word	0x0800268d
 800257c:	0800268d 	.word	0x0800268d
 8002580:	0800268d 	.word	0x0800268d
 8002584:	0800264b 	.word	0x0800264b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	68b9      	ldr	r1, [r7, #8]
 800258e:	4618      	mov	r0, r3
 8002590:	f000 f9f0 	bl	8002974 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	699a      	ldr	r2, [r3, #24]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f042 0208 	orr.w	r2, r2, #8
 80025a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	699a      	ldr	r2, [r3, #24]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f022 0204 	bic.w	r2, r2, #4
 80025b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	6999      	ldr	r1, [r3, #24]
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	691a      	ldr	r2, [r3, #16]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	430a      	orrs	r2, r1
 80025c4:	619a      	str	r2, [r3, #24]
      break;
 80025c6:	e064      	b.n	8002692 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	68b9      	ldr	r1, [r7, #8]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f000 fa40 	bl	8002a54 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	699a      	ldr	r2, [r3, #24]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	699a      	ldr	r2, [r3, #24]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	6999      	ldr	r1, [r3, #24]
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	691b      	ldr	r3, [r3, #16]
 80025fe:	021a      	lsls	r2, r3, #8
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	430a      	orrs	r2, r1
 8002606:	619a      	str	r2, [r3, #24]
      break;
 8002608:	e043      	b.n	8002692 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	68b9      	ldr	r1, [r7, #8]
 8002610:	4618      	mov	r0, r3
 8002612:	f000 fa95 	bl	8002b40 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	69da      	ldr	r2, [r3, #28]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f042 0208 	orr.w	r2, r2, #8
 8002624:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	69da      	ldr	r2, [r3, #28]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f022 0204 	bic.w	r2, r2, #4
 8002634:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	69d9      	ldr	r1, [r3, #28]
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	691a      	ldr	r2, [r3, #16]
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	430a      	orrs	r2, r1
 8002646:	61da      	str	r2, [r3, #28]
      break;
 8002648:	e023      	b.n	8002692 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	68b9      	ldr	r1, [r7, #8]
 8002650:	4618      	mov	r0, r3
 8002652:	f000 fae9 	bl	8002c28 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	69da      	ldr	r2, [r3, #28]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002664:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	69da      	ldr	r2, [r3, #28]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002674:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	69d9      	ldr	r1, [r3, #28]
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	691b      	ldr	r3, [r3, #16]
 8002680:	021a      	lsls	r2, r3, #8
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	430a      	orrs	r2, r1
 8002688:	61da      	str	r2, [r3, #28]
      break;
 800268a:	e002      	b.n	8002692 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	75fb      	strb	r3, [r7, #23]
      break;
 8002690:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2200      	movs	r2, #0
 8002696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800269a:	7dfb      	ldrb	r3, [r7, #23]
}
 800269c:	4618      	mov	r0, r3
 800269e:	3718      	adds	r7, #24
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b084      	sub	sp, #16
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80026ae:	2300      	movs	r3, #0
 80026b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d101      	bne.n	80026c0 <HAL_TIM_ConfigClockSource+0x1c>
 80026bc:	2302      	movs	r3, #2
 80026be:	e0b4      	b.n	800282a <HAL_TIM_ConfigClockSource+0x186>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2201      	movs	r2, #1
 80026c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2202      	movs	r2, #2
 80026cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80026de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80026e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	68ba      	ldr	r2, [r7, #8]
 80026ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026f8:	d03e      	beq.n	8002778 <HAL_TIM_ConfigClockSource+0xd4>
 80026fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026fe:	f200 8087 	bhi.w	8002810 <HAL_TIM_ConfigClockSource+0x16c>
 8002702:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002706:	f000 8086 	beq.w	8002816 <HAL_TIM_ConfigClockSource+0x172>
 800270a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800270e:	d87f      	bhi.n	8002810 <HAL_TIM_ConfigClockSource+0x16c>
 8002710:	2b70      	cmp	r3, #112	; 0x70
 8002712:	d01a      	beq.n	800274a <HAL_TIM_ConfigClockSource+0xa6>
 8002714:	2b70      	cmp	r3, #112	; 0x70
 8002716:	d87b      	bhi.n	8002810 <HAL_TIM_ConfigClockSource+0x16c>
 8002718:	2b60      	cmp	r3, #96	; 0x60
 800271a:	d050      	beq.n	80027be <HAL_TIM_ConfigClockSource+0x11a>
 800271c:	2b60      	cmp	r3, #96	; 0x60
 800271e:	d877      	bhi.n	8002810 <HAL_TIM_ConfigClockSource+0x16c>
 8002720:	2b50      	cmp	r3, #80	; 0x50
 8002722:	d03c      	beq.n	800279e <HAL_TIM_ConfigClockSource+0xfa>
 8002724:	2b50      	cmp	r3, #80	; 0x50
 8002726:	d873      	bhi.n	8002810 <HAL_TIM_ConfigClockSource+0x16c>
 8002728:	2b40      	cmp	r3, #64	; 0x40
 800272a:	d058      	beq.n	80027de <HAL_TIM_ConfigClockSource+0x13a>
 800272c:	2b40      	cmp	r3, #64	; 0x40
 800272e:	d86f      	bhi.n	8002810 <HAL_TIM_ConfigClockSource+0x16c>
 8002730:	2b30      	cmp	r3, #48	; 0x30
 8002732:	d064      	beq.n	80027fe <HAL_TIM_ConfigClockSource+0x15a>
 8002734:	2b30      	cmp	r3, #48	; 0x30
 8002736:	d86b      	bhi.n	8002810 <HAL_TIM_ConfigClockSource+0x16c>
 8002738:	2b20      	cmp	r3, #32
 800273a:	d060      	beq.n	80027fe <HAL_TIM_ConfigClockSource+0x15a>
 800273c:	2b20      	cmp	r3, #32
 800273e:	d867      	bhi.n	8002810 <HAL_TIM_ConfigClockSource+0x16c>
 8002740:	2b00      	cmp	r3, #0
 8002742:	d05c      	beq.n	80027fe <HAL_TIM_ConfigClockSource+0x15a>
 8002744:	2b10      	cmp	r3, #16
 8002746:	d05a      	beq.n	80027fe <HAL_TIM_ConfigClockSource+0x15a>
 8002748:	e062      	b.n	8002810 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6818      	ldr	r0, [r3, #0]
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	6899      	ldr	r1, [r3, #8]
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	685a      	ldr	r2, [r3, #4]
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	f000 fb35 	bl	8002dc8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800276c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	68ba      	ldr	r2, [r7, #8]
 8002774:	609a      	str	r2, [r3, #8]
      break;
 8002776:	e04f      	b.n	8002818 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6818      	ldr	r0, [r3, #0]
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	6899      	ldr	r1, [r3, #8]
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	685a      	ldr	r2, [r3, #4]
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	f000 fb1e 	bl	8002dc8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	689a      	ldr	r2, [r3, #8]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800279a:	609a      	str	r2, [r3, #8]
      break;
 800279c:	e03c      	b.n	8002818 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6818      	ldr	r0, [r3, #0]
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	6859      	ldr	r1, [r3, #4]
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	461a      	mov	r2, r3
 80027ac:	f000 fa92 	bl	8002cd4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2150      	movs	r1, #80	; 0x50
 80027b6:	4618      	mov	r0, r3
 80027b8:	f000 faeb 	bl	8002d92 <TIM_ITRx_SetConfig>
      break;
 80027bc:	e02c      	b.n	8002818 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6818      	ldr	r0, [r3, #0]
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	6859      	ldr	r1, [r3, #4]
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	461a      	mov	r2, r3
 80027cc:	f000 fab1 	bl	8002d32 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	2160      	movs	r1, #96	; 0x60
 80027d6:	4618      	mov	r0, r3
 80027d8:	f000 fadb 	bl	8002d92 <TIM_ITRx_SetConfig>
      break;
 80027dc:	e01c      	b.n	8002818 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6818      	ldr	r0, [r3, #0]
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	6859      	ldr	r1, [r3, #4]
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	461a      	mov	r2, r3
 80027ec:	f000 fa72 	bl	8002cd4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2140      	movs	r1, #64	; 0x40
 80027f6:	4618      	mov	r0, r3
 80027f8:	f000 facb 	bl	8002d92 <TIM_ITRx_SetConfig>
      break;
 80027fc:	e00c      	b.n	8002818 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4619      	mov	r1, r3
 8002808:	4610      	mov	r0, r2
 800280a:	f000 fac2 	bl	8002d92 <TIM_ITRx_SetConfig>
      break;
 800280e:	e003      	b.n	8002818 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	73fb      	strb	r3, [r7, #15]
      break;
 8002814:	e000      	b.n	8002818 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002816:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2201      	movs	r2, #1
 800281c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002828:	7bfb      	ldrb	r3, [r7, #15]
}
 800282a:	4618      	mov	r0, r3
 800282c:	3710      	adds	r7, #16
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
	...

08002834 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002834:	b480      	push	{r7}
 8002836:	b085      	sub	sp, #20
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	4a40      	ldr	r2, [pc, #256]	; (8002948 <TIM_Base_SetConfig+0x114>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d013      	beq.n	8002874 <TIM_Base_SetConfig+0x40>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002852:	d00f      	beq.n	8002874 <TIM_Base_SetConfig+0x40>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	4a3d      	ldr	r2, [pc, #244]	; (800294c <TIM_Base_SetConfig+0x118>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d00b      	beq.n	8002874 <TIM_Base_SetConfig+0x40>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	4a3c      	ldr	r2, [pc, #240]	; (8002950 <TIM_Base_SetConfig+0x11c>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d007      	beq.n	8002874 <TIM_Base_SetConfig+0x40>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	4a3b      	ldr	r2, [pc, #236]	; (8002954 <TIM_Base_SetConfig+0x120>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d003      	beq.n	8002874 <TIM_Base_SetConfig+0x40>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	4a3a      	ldr	r2, [pc, #232]	; (8002958 <TIM_Base_SetConfig+0x124>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d108      	bne.n	8002886 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800287a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	68fa      	ldr	r2, [r7, #12]
 8002882:	4313      	orrs	r3, r2
 8002884:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4a2f      	ldr	r2, [pc, #188]	; (8002948 <TIM_Base_SetConfig+0x114>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d02b      	beq.n	80028e6 <TIM_Base_SetConfig+0xb2>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002894:	d027      	beq.n	80028e6 <TIM_Base_SetConfig+0xb2>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4a2c      	ldr	r2, [pc, #176]	; (800294c <TIM_Base_SetConfig+0x118>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d023      	beq.n	80028e6 <TIM_Base_SetConfig+0xb2>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4a2b      	ldr	r2, [pc, #172]	; (8002950 <TIM_Base_SetConfig+0x11c>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d01f      	beq.n	80028e6 <TIM_Base_SetConfig+0xb2>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	4a2a      	ldr	r2, [pc, #168]	; (8002954 <TIM_Base_SetConfig+0x120>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d01b      	beq.n	80028e6 <TIM_Base_SetConfig+0xb2>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a29      	ldr	r2, [pc, #164]	; (8002958 <TIM_Base_SetConfig+0x124>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d017      	beq.n	80028e6 <TIM_Base_SetConfig+0xb2>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a28      	ldr	r2, [pc, #160]	; (800295c <TIM_Base_SetConfig+0x128>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d013      	beq.n	80028e6 <TIM_Base_SetConfig+0xb2>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4a27      	ldr	r2, [pc, #156]	; (8002960 <TIM_Base_SetConfig+0x12c>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d00f      	beq.n	80028e6 <TIM_Base_SetConfig+0xb2>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4a26      	ldr	r2, [pc, #152]	; (8002964 <TIM_Base_SetConfig+0x130>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d00b      	beq.n	80028e6 <TIM_Base_SetConfig+0xb2>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4a25      	ldr	r2, [pc, #148]	; (8002968 <TIM_Base_SetConfig+0x134>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d007      	beq.n	80028e6 <TIM_Base_SetConfig+0xb2>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a24      	ldr	r2, [pc, #144]	; (800296c <TIM_Base_SetConfig+0x138>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d003      	beq.n	80028e6 <TIM_Base_SetConfig+0xb2>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a23      	ldr	r2, [pc, #140]	; (8002970 <TIM_Base_SetConfig+0x13c>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d108      	bne.n	80028f8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	68fa      	ldr	r2, [r7, #12]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	695b      	ldr	r3, [r3, #20]
 8002902:	4313      	orrs	r3, r2
 8002904:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	68fa      	ldr	r2, [r7, #12]
 800290a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	689a      	ldr	r2, [r3, #8]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	4a0a      	ldr	r2, [pc, #40]	; (8002948 <TIM_Base_SetConfig+0x114>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d003      	beq.n	800292c <TIM_Base_SetConfig+0xf8>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	4a0c      	ldr	r2, [pc, #48]	; (8002958 <TIM_Base_SetConfig+0x124>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d103      	bne.n	8002934 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	691a      	ldr	r2, [r3, #16]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	615a      	str	r2, [r3, #20]
}
 800293a:	bf00      	nop
 800293c:	3714      	adds	r7, #20
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop
 8002948:	40010000 	.word	0x40010000
 800294c:	40000400 	.word	0x40000400
 8002950:	40000800 	.word	0x40000800
 8002954:	40000c00 	.word	0x40000c00
 8002958:	40010400 	.word	0x40010400
 800295c:	40014000 	.word	0x40014000
 8002960:	40014400 	.word	0x40014400
 8002964:	40014800 	.word	0x40014800
 8002968:	40001800 	.word	0x40001800
 800296c:	40001c00 	.word	0x40001c00
 8002970:	40002000 	.word	0x40002000

08002974 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002974:	b480      	push	{r7}
 8002976:	b087      	sub	sp, #28
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a1b      	ldr	r3, [r3, #32]
 8002982:	f023 0201 	bic.w	r2, r3, #1
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6a1b      	ldr	r3, [r3, #32]
 800298e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	699b      	ldr	r3, [r3, #24]
 800299a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f023 0303 	bic.w	r3, r3, #3
 80029aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	68fa      	ldr	r2, [r7, #12]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	f023 0302 	bic.w	r3, r3, #2
 80029bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	697a      	ldr	r2, [r7, #20]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	4a20      	ldr	r2, [pc, #128]	; (8002a4c <TIM_OC1_SetConfig+0xd8>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d003      	beq.n	80029d8 <TIM_OC1_SetConfig+0x64>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	4a1f      	ldr	r2, [pc, #124]	; (8002a50 <TIM_OC1_SetConfig+0xdc>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d10c      	bne.n	80029f2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	f023 0308 	bic.w	r3, r3, #8
 80029de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	697a      	ldr	r2, [r7, #20]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	f023 0304 	bic.w	r3, r3, #4
 80029f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a15      	ldr	r2, [pc, #84]	; (8002a4c <TIM_OC1_SetConfig+0xd8>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d003      	beq.n	8002a02 <TIM_OC1_SetConfig+0x8e>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a14      	ldr	r2, [pc, #80]	; (8002a50 <TIM_OC1_SetConfig+0xdc>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d111      	bne.n	8002a26 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002a10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	695b      	ldr	r3, [r3, #20]
 8002a16:	693a      	ldr	r2, [r7, #16]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	699b      	ldr	r3, [r3, #24]
 8002a20:	693a      	ldr	r2, [r7, #16]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	693a      	ldr	r2, [r7, #16]
 8002a2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	68fa      	ldr	r2, [r7, #12]
 8002a30:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	685a      	ldr	r2, [r3, #4]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	697a      	ldr	r2, [r7, #20]
 8002a3e:	621a      	str	r2, [r3, #32]
}
 8002a40:	bf00      	nop
 8002a42:	371c      	adds	r7, #28
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr
 8002a4c:	40010000 	.word	0x40010000
 8002a50:	40010400 	.word	0x40010400

08002a54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b087      	sub	sp, #28
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a1b      	ldr	r3, [r3, #32]
 8002a62:	f023 0210 	bic.w	r2, r3, #16
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a1b      	ldr	r3, [r3, #32]
 8002a6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	699b      	ldr	r3, [r3, #24]
 8002a7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	021b      	lsls	r3, r3, #8
 8002a92:	68fa      	ldr	r2, [r7, #12]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	f023 0320 	bic.w	r3, r3, #32
 8002a9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	011b      	lsls	r3, r3, #4
 8002aa6:	697a      	ldr	r2, [r7, #20]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	4a22      	ldr	r2, [pc, #136]	; (8002b38 <TIM_OC2_SetConfig+0xe4>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d003      	beq.n	8002abc <TIM_OC2_SetConfig+0x68>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	4a21      	ldr	r2, [pc, #132]	; (8002b3c <TIM_OC2_SetConfig+0xe8>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d10d      	bne.n	8002ad8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ac2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	011b      	lsls	r3, r3, #4
 8002aca:	697a      	ldr	r2, [r7, #20]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ad6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	4a17      	ldr	r2, [pc, #92]	; (8002b38 <TIM_OC2_SetConfig+0xe4>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d003      	beq.n	8002ae8 <TIM_OC2_SetConfig+0x94>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	4a16      	ldr	r2, [pc, #88]	; (8002b3c <TIM_OC2_SetConfig+0xe8>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d113      	bne.n	8002b10 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002aee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002af6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	695b      	ldr	r3, [r3, #20]
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	693a      	ldr	r2, [r7, #16]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	699b      	ldr	r3, [r3, #24]
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	693a      	ldr	r2, [r7, #16]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	693a      	ldr	r2, [r7, #16]
 8002b14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	68fa      	ldr	r2, [r7, #12]
 8002b1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	685a      	ldr	r2, [r3, #4]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	697a      	ldr	r2, [r7, #20]
 8002b28:	621a      	str	r2, [r3, #32]
}
 8002b2a:	bf00      	nop
 8002b2c:	371c      	adds	r7, #28
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop
 8002b38:	40010000 	.word	0x40010000
 8002b3c:	40010400 	.word	0x40010400

08002b40 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b087      	sub	sp, #28
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a1b      	ldr	r3, [r3, #32]
 8002b4e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6a1b      	ldr	r3, [r3, #32]
 8002b5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	69db      	ldr	r3, [r3, #28]
 8002b66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f023 0303 	bic.w	r3, r3, #3
 8002b76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	68fa      	ldr	r2, [r7, #12]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002b88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	021b      	lsls	r3, r3, #8
 8002b90:	697a      	ldr	r2, [r7, #20]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a21      	ldr	r2, [pc, #132]	; (8002c20 <TIM_OC3_SetConfig+0xe0>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d003      	beq.n	8002ba6 <TIM_OC3_SetConfig+0x66>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a20      	ldr	r2, [pc, #128]	; (8002c24 <TIM_OC3_SetConfig+0xe4>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d10d      	bne.n	8002bc2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002bac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	021b      	lsls	r3, r3, #8
 8002bb4:	697a      	ldr	r2, [r7, #20]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002bc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a16      	ldr	r2, [pc, #88]	; (8002c20 <TIM_OC3_SetConfig+0xe0>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d003      	beq.n	8002bd2 <TIM_OC3_SetConfig+0x92>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a15      	ldr	r2, [pc, #84]	; (8002c24 <TIM_OC3_SetConfig+0xe4>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d113      	bne.n	8002bfa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002bd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002be0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	695b      	ldr	r3, [r3, #20]
 8002be6:	011b      	lsls	r3, r3, #4
 8002be8:	693a      	ldr	r2, [r7, #16]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	699b      	ldr	r3, [r3, #24]
 8002bf2:	011b      	lsls	r3, r3, #4
 8002bf4:	693a      	ldr	r2, [r7, #16]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	693a      	ldr	r2, [r7, #16]
 8002bfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	68fa      	ldr	r2, [r7, #12]
 8002c04:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	685a      	ldr	r2, [r3, #4]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	697a      	ldr	r2, [r7, #20]
 8002c12:	621a      	str	r2, [r3, #32]
}
 8002c14:	bf00      	nop
 8002c16:	371c      	adds	r7, #28
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr
 8002c20:	40010000 	.word	0x40010000
 8002c24:	40010400 	.word	0x40010400

08002c28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b087      	sub	sp, #28
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6a1b      	ldr	r3, [r3, #32]
 8002c36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a1b      	ldr	r3, [r3, #32]
 8002c42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	69db      	ldr	r3, [r3, #28]
 8002c4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	021b      	lsls	r3, r3, #8
 8002c66:	68fa      	ldr	r2, [r7, #12]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	031b      	lsls	r3, r3, #12
 8002c7a:	693a      	ldr	r2, [r7, #16]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	4a12      	ldr	r2, [pc, #72]	; (8002ccc <TIM_OC4_SetConfig+0xa4>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d003      	beq.n	8002c90 <TIM_OC4_SetConfig+0x68>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	4a11      	ldr	r2, [pc, #68]	; (8002cd0 <TIM_OC4_SetConfig+0xa8>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d109      	bne.n	8002ca4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c96:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	695b      	ldr	r3, [r3, #20]
 8002c9c:	019b      	lsls	r3, r3, #6
 8002c9e:	697a      	ldr	r2, [r7, #20]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	697a      	ldr	r2, [r7, #20]
 8002ca8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	68fa      	ldr	r2, [r7, #12]
 8002cae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	685a      	ldr	r2, [r3, #4]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	693a      	ldr	r2, [r7, #16]
 8002cbc:	621a      	str	r2, [r3, #32]
}
 8002cbe:	bf00      	nop
 8002cc0:	371c      	adds	r7, #28
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr
 8002cca:	bf00      	nop
 8002ccc:	40010000 	.word	0x40010000
 8002cd0:	40010400 	.word	0x40010400

08002cd4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b087      	sub	sp, #28
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	60b9      	str	r1, [r7, #8]
 8002cde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6a1b      	ldr	r3, [r3, #32]
 8002ce4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	6a1b      	ldr	r3, [r3, #32]
 8002cea:	f023 0201 	bic.w	r2, r3, #1
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	699b      	ldr	r3, [r3, #24]
 8002cf6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002cfe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	011b      	lsls	r3, r3, #4
 8002d04:	693a      	ldr	r2, [r7, #16]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	f023 030a 	bic.w	r3, r3, #10
 8002d10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d12:	697a      	ldr	r2, [r7, #20]
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	693a      	ldr	r2, [r7, #16]
 8002d1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	697a      	ldr	r2, [r7, #20]
 8002d24:	621a      	str	r2, [r3, #32]
}
 8002d26:	bf00      	nop
 8002d28:	371c      	adds	r7, #28
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr

08002d32 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d32:	b480      	push	{r7}
 8002d34:	b087      	sub	sp, #28
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	60f8      	str	r0, [r7, #12]
 8002d3a:	60b9      	str	r1, [r7, #8]
 8002d3c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	6a1b      	ldr	r3, [r3, #32]
 8002d42:	f023 0210 	bic.w	r2, r3, #16
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	699b      	ldr	r3, [r3, #24]
 8002d4e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6a1b      	ldr	r3, [r3, #32]
 8002d54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d5c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	031b      	lsls	r3, r3, #12
 8002d62:	697a      	ldr	r2, [r7, #20]
 8002d64:	4313      	orrs	r3, r2
 8002d66:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002d6e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	011b      	lsls	r3, r3, #4
 8002d74:	693a      	ldr	r2, [r7, #16]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	697a      	ldr	r2, [r7, #20]
 8002d7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	693a      	ldr	r2, [r7, #16]
 8002d84:	621a      	str	r2, [r3, #32]
}
 8002d86:	bf00      	nop
 8002d88:	371c      	adds	r7, #28
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr

08002d92 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d92:	b480      	push	{r7}
 8002d94:	b085      	sub	sp, #20
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	6078      	str	r0, [r7, #4]
 8002d9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002da8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002daa:	683a      	ldr	r2, [r7, #0]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	f043 0307 	orr.w	r3, r3, #7
 8002db4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	68fa      	ldr	r2, [r7, #12]
 8002dba:	609a      	str	r2, [r3, #8]
}
 8002dbc:	bf00      	nop
 8002dbe:	3714      	adds	r7, #20
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr

08002dc8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b087      	sub	sp, #28
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	60b9      	str	r1, [r7, #8]
 8002dd2:	607a      	str	r2, [r7, #4]
 8002dd4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002de2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	021a      	lsls	r2, r3, #8
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	431a      	orrs	r2, r3
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	697a      	ldr	r2, [r7, #20]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	697a      	ldr	r2, [r7, #20]
 8002dfa:	609a      	str	r2, [r3, #8]
}
 8002dfc:	bf00      	nop
 8002dfe:	371c      	adds	r7, #28
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr

08002e08 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b087      	sub	sp, #28
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	60f8      	str	r0, [r7, #12]
 8002e10:	60b9      	str	r1, [r7, #8]
 8002e12:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	f003 031f 	and.w	r3, r3, #31
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e20:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	6a1a      	ldr	r2, [r3, #32]
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	43db      	mvns	r3, r3
 8002e2a:	401a      	ands	r2, r3
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6a1a      	ldr	r2, [r3, #32]
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	f003 031f 	and.w	r3, r3, #31
 8002e3a:	6879      	ldr	r1, [r7, #4]
 8002e3c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e40:	431a      	orrs	r2, r3
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	621a      	str	r2, [r3, #32]
}
 8002e46:	bf00      	nop
 8002e48:	371c      	adds	r7, #28
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
	...

08002e54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b085      	sub	sp, #20
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d101      	bne.n	8002e6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e68:	2302      	movs	r3, #2
 8002e6a:	e05a      	b.n	8002f22 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2202      	movs	r2, #2
 8002e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	68fa      	ldr	r2, [r7, #12]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	68fa      	ldr	r2, [r7, #12]
 8002ea4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a21      	ldr	r2, [pc, #132]	; (8002f30 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d022      	beq.n	8002ef6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eb8:	d01d      	beq.n	8002ef6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a1d      	ldr	r2, [pc, #116]	; (8002f34 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d018      	beq.n	8002ef6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a1b      	ldr	r2, [pc, #108]	; (8002f38 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d013      	beq.n	8002ef6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a1a      	ldr	r2, [pc, #104]	; (8002f3c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d00e      	beq.n	8002ef6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a18      	ldr	r2, [pc, #96]	; (8002f40 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d009      	beq.n	8002ef6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a17      	ldr	r2, [pc, #92]	; (8002f44 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d004      	beq.n	8002ef6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a15      	ldr	r2, [pc, #84]	; (8002f48 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d10c      	bne.n	8002f10 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002efc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	68ba      	ldr	r2, [r7, #8]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	68ba      	ldr	r2, [r7, #8]
 8002f0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3714      	adds	r7, #20
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop
 8002f30:	40010000 	.word	0x40010000
 8002f34:	40000400 	.word	0x40000400
 8002f38:	40000800 	.word	0x40000800
 8002f3c:	40000c00 	.word	0x40000c00
 8002f40:	40010400 	.word	0x40010400
 8002f44:	40014000 	.word	0x40014000
 8002f48:	40001800 	.word	0x40001800

08002f4c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b085      	sub	sp, #20
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002f56:	2300      	movs	r3, #0
 8002f58:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d101      	bne.n	8002f68 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002f64:	2302      	movs	r3, #2
 8002f66:	e03d      	b.n	8002fe4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	695b      	ldr	r3, [r3, #20]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	69db      	ldr	r3, [r3, #28]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	68fa      	ldr	r2, [r7, #12]
 8002fd8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002fe2:	2300      	movs	r3, #0
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3714      	adds	r7, #20
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr

08002ff0 <__NVIC_SetPriority>:
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	6039      	str	r1, [r7, #0]
 8002ffa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ffc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003000:	2b00      	cmp	r3, #0
 8003002:	db0a      	blt.n	800301a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	b2da      	uxtb	r2, r3
 8003008:	490c      	ldr	r1, [pc, #48]	; (800303c <__NVIC_SetPriority+0x4c>)
 800300a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800300e:	0112      	lsls	r2, r2, #4
 8003010:	b2d2      	uxtb	r2, r2
 8003012:	440b      	add	r3, r1
 8003014:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003018:	e00a      	b.n	8003030 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	b2da      	uxtb	r2, r3
 800301e:	4908      	ldr	r1, [pc, #32]	; (8003040 <__NVIC_SetPriority+0x50>)
 8003020:	79fb      	ldrb	r3, [r7, #7]
 8003022:	f003 030f 	and.w	r3, r3, #15
 8003026:	3b04      	subs	r3, #4
 8003028:	0112      	lsls	r2, r2, #4
 800302a:	b2d2      	uxtb	r2, r2
 800302c:	440b      	add	r3, r1
 800302e:	761a      	strb	r2, [r3, #24]
}
 8003030:	bf00      	nop
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr
 800303c:	e000e100 	.word	0xe000e100
 8003040:	e000ed00 	.word	0xe000ed00

08003044 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003044:	b580      	push	{r7, lr}
 8003046:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003048:	2100      	movs	r1, #0
 800304a:	f06f 0004 	mvn.w	r0, #4
 800304e:	f7ff ffcf 	bl	8002ff0 <__NVIC_SetPriority>
#endif
}
 8003052:	bf00      	nop
 8003054:	bd80      	pop	{r7, pc}
	...

08003058 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003058:	b480      	push	{r7}
 800305a:	b083      	sub	sp, #12
 800305c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800305e:	f3ef 8305 	mrs	r3, IPSR
 8003062:	603b      	str	r3, [r7, #0]
  return(result);
 8003064:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003066:	2b00      	cmp	r3, #0
 8003068:	d003      	beq.n	8003072 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800306a:	f06f 0305 	mvn.w	r3, #5
 800306e:	607b      	str	r3, [r7, #4]
 8003070:	e00c      	b.n	800308c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003072:	4b0a      	ldr	r3, [pc, #40]	; (800309c <osKernelInitialize+0x44>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d105      	bne.n	8003086 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800307a:	4b08      	ldr	r3, [pc, #32]	; (800309c <osKernelInitialize+0x44>)
 800307c:	2201      	movs	r2, #1
 800307e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003080:	2300      	movs	r3, #0
 8003082:	607b      	str	r3, [r7, #4]
 8003084:	e002      	b.n	800308c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003086:	f04f 33ff 	mov.w	r3, #4294967295
 800308a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800308c:	687b      	ldr	r3, [r7, #4]
}
 800308e:	4618      	mov	r0, r3
 8003090:	370c      	adds	r7, #12
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr
 800309a:	bf00      	nop
 800309c:	20000094 	.word	0x20000094

080030a0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80030a6:	f3ef 8305 	mrs	r3, IPSR
 80030aa:	603b      	str	r3, [r7, #0]
  return(result);
 80030ac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d003      	beq.n	80030ba <osKernelStart+0x1a>
    stat = osErrorISR;
 80030b2:	f06f 0305 	mvn.w	r3, #5
 80030b6:	607b      	str	r3, [r7, #4]
 80030b8:	e010      	b.n	80030dc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80030ba:	4b0b      	ldr	r3, [pc, #44]	; (80030e8 <osKernelStart+0x48>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d109      	bne.n	80030d6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80030c2:	f7ff ffbf 	bl	8003044 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80030c6:	4b08      	ldr	r3, [pc, #32]	; (80030e8 <osKernelStart+0x48>)
 80030c8:	2202      	movs	r2, #2
 80030ca:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80030cc:	f001 fc9e 	bl	8004a0c <vTaskStartScheduler>
      stat = osOK;
 80030d0:	2300      	movs	r3, #0
 80030d2:	607b      	str	r3, [r7, #4]
 80030d4:	e002      	b.n	80030dc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80030d6:	f04f 33ff 	mov.w	r3, #4294967295
 80030da:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80030dc:	687b      	ldr	r3, [r7, #4]
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3708      	adds	r7, #8
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	20000094 	.word	0x20000094

080030ec <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b08e      	sub	sp, #56	; 0x38
 80030f0:	af04      	add	r7, sp, #16
 80030f2:	60f8      	str	r0, [r7, #12]
 80030f4:	60b9      	str	r1, [r7, #8]
 80030f6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80030f8:	2300      	movs	r3, #0
 80030fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80030fc:	f3ef 8305 	mrs	r3, IPSR
 8003100:	617b      	str	r3, [r7, #20]
  return(result);
 8003102:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003104:	2b00      	cmp	r3, #0
 8003106:	d17e      	bne.n	8003206 <osThreadNew+0x11a>
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d07b      	beq.n	8003206 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800310e:	2380      	movs	r3, #128	; 0x80
 8003110:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003112:	2318      	movs	r3, #24
 8003114:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003116:	2300      	movs	r3, #0
 8003118:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800311a:	f04f 33ff 	mov.w	r3, #4294967295
 800311e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d045      	beq.n	80031b2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d002      	beq.n	8003134 <osThreadNew+0x48>
        name = attr->name;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	699b      	ldr	r3, [r3, #24]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d002      	beq.n	8003142 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	699b      	ldr	r3, [r3, #24]
 8003140:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d008      	beq.n	800315a <osThreadNew+0x6e>
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	2b38      	cmp	r3, #56	; 0x38
 800314c:	d805      	bhi.n	800315a <osThreadNew+0x6e>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	f003 0301 	and.w	r3, r3, #1
 8003156:	2b00      	cmp	r3, #0
 8003158:	d001      	beq.n	800315e <osThreadNew+0x72>
        return (NULL);
 800315a:	2300      	movs	r3, #0
 800315c:	e054      	b.n	8003208 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	695b      	ldr	r3, [r3, #20]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d003      	beq.n	800316e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	695b      	ldr	r3, [r3, #20]
 800316a:	089b      	lsrs	r3, r3, #2
 800316c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d00e      	beq.n	8003194 <osThreadNew+0xa8>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	68db      	ldr	r3, [r3, #12]
 800317a:	2b5b      	cmp	r3, #91	; 0x5b
 800317c:	d90a      	bls.n	8003194 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003182:	2b00      	cmp	r3, #0
 8003184:	d006      	beq.n	8003194 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	695b      	ldr	r3, [r3, #20]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d002      	beq.n	8003194 <osThreadNew+0xa8>
        mem = 1;
 800318e:	2301      	movs	r3, #1
 8003190:	61bb      	str	r3, [r7, #24]
 8003192:	e010      	b.n	80031b6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d10c      	bne.n	80031b6 <osThreadNew+0xca>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d108      	bne.n	80031b6 <osThreadNew+0xca>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	691b      	ldr	r3, [r3, #16]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d104      	bne.n	80031b6 <osThreadNew+0xca>
          mem = 0;
 80031ac:	2300      	movs	r3, #0
 80031ae:	61bb      	str	r3, [r7, #24]
 80031b0:	e001      	b.n	80031b6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80031b2:	2300      	movs	r3, #0
 80031b4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80031b6:	69bb      	ldr	r3, [r7, #24]
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d110      	bne.n	80031de <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80031c4:	9202      	str	r2, [sp, #8]
 80031c6:	9301      	str	r3, [sp, #4]
 80031c8:	69fb      	ldr	r3, [r7, #28]
 80031ca:	9300      	str	r3, [sp, #0]
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	6a3a      	ldr	r2, [r7, #32]
 80031d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031d2:	68f8      	ldr	r0, [r7, #12]
 80031d4:	f001 fa44 	bl	8004660 <xTaskCreateStatic>
 80031d8:	4603      	mov	r3, r0
 80031da:	613b      	str	r3, [r7, #16]
 80031dc:	e013      	b.n	8003206 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80031de:	69bb      	ldr	r3, [r7, #24]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d110      	bne.n	8003206 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80031e4:	6a3b      	ldr	r3, [r7, #32]
 80031e6:	b29a      	uxth	r2, r3
 80031e8:	f107 0310 	add.w	r3, r7, #16
 80031ec:	9301      	str	r3, [sp, #4]
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	9300      	str	r3, [sp, #0]
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031f6:	68f8      	ldr	r0, [r7, #12]
 80031f8:	f001 fa8f 	bl	800471a <xTaskCreate>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d001      	beq.n	8003206 <osThreadNew+0x11a>
            hTask = NULL;
 8003202:	2300      	movs	r3, #0
 8003204:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003206:	693b      	ldr	r3, [r7, #16]
}
 8003208:	4618      	mov	r0, r3
 800320a:	3728      	adds	r7, #40	; 0x28
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}

08003210 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003218:	f3ef 8305 	mrs	r3, IPSR
 800321c:	60bb      	str	r3, [r7, #8]
  return(result);
 800321e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003220:	2b00      	cmp	r3, #0
 8003222:	d003      	beq.n	800322c <osDelay+0x1c>
    stat = osErrorISR;
 8003224:	f06f 0305 	mvn.w	r3, #5
 8003228:	60fb      	str	r3, [r7, #12]
 800322a:	e007      	b.n	800323c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800322c:	2300      	movs	r3, #0
 800322e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d002      	beq.n	800323c <osDelay+0x2c>
      vTaskDelay(ticks);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f001 fbb4 	bl	80049a4 <vTaskDelay>
    }
  }

  return (stat);
 800323c:	68fb      	ldr	r3, [r7, #12]
}
 800323e:	4618      	mov	r0, r3
 8003240:	3710      	adds	r7, #16
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
	...

08003248 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003248:	b480      	push	{r7}
 800324a:	b085      	sub	sp, #20
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	4a07      	ldr	r2, [pc, #28]	; (8003274 <vApplicationGetIdleTaskMemory+0x2c>)
 8003258:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	4a06      	ldr	r2, [pc, #24]	; (8003278 <vApplicationGetIdleTaskMemory+0x30>)
 800325e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2280      	movs	r2, #128	; 0x80
 8003264:	601a      	str	r2, [r3, #0]
}
 8003266:	bf00      	nop
 8003268:	3714      	adds	r7, #20
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr
 8003272:	bf00      	nop
 8003274:	20000098 	.word	0x20000098
 8003278:	200000f4 	.word	0x200000f4

0800327c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800327c:	b480      	push	{r7}
 800327e:	b085      	sub	sp, #20
 8003280:	af00      	add	r7, sp, #0
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	60b9      	str	r1, [r7, #8]
 8003286:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	4a07      	ldr	r2, [pc, #28]	; (80032a8 <vApplicationGetTimerTaskMemory+0x2c>)
 800328c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	4a06      	ldr	r2, [pc, #24]	; (80032ac <vApplicationGetTimerTaskMemory+0x30>)
 8003292:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	f44f 7280 	mov.w	r2, #256	; 0x100
 800329a:	601a      	str	r2, [r3, #0]
}
 800329c:	bf00      	nop
 800329e:	3714      	adds	r7, #20
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr
 80032a8:	200002f4 	.word	0x200002f4
 80032ac:	20000350 	.word	0x20000350

080032b0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b08a      	sub	sp, #40	; 0x28
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80032b8:	2300      	movs	r3, #0
 80032ba:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80032bc:	f001 fc0c 	bl	8004ad8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80032c0:	4b5b      	ldr	r3, [pc, #364]	; (8003430 <pvPortMalloc+0x180>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d101      	bne.n	80032cc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80032c8:	f000 f920 	bl	800350c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80032cc:	4b59      	ldr	r3, [pc, #356]	; (8003434 <pvPortMalloc+0x184>)
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	4013      	ands	r3, r2
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	f040 8093 	bne.w	8003400 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d01d      	beq.n	800331c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80032e0:	2208      	movs	r2, #8
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4413      	add	r3, r2
 80032e6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f003 0307 	and.w	r3, r3, #7
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d014      	beq.n	800331c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f023 0307 	bic.w	r3, r3, #7
 80032f8:	3308      	adds	r3, #8
 80032fa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f003 0307 	and.w	r3, r3, #7
 8003302:	2b00      	cmp	r3, #0
 8003304:	d00a      	beq.n	800331c <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800330a:	f383 8811 	msr	BASEPRI, r3
 800330e:	f3bf 8f6f 	isb	sy
 8003312:	f3bf 8f4f 	dsb	sy
 8003316:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003318:	bf00      	nop
 800331a:	e7fe      	b.n	800331a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d06e      	beq.n	8003400 <pvPortMalloc+0x150>
 8003322:	4b45      	ldr	r3, [pc, #276]	; (8003438 <pvPortMalloc+0x188>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	429a      	cmp	r2, r3
 800332a:	d869      	bhi.n	8003400 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800332c:	4b43      	ldr	r3, [pc, #268]	; (800343c <pvPortMalloc+0x18c>)
 800332e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003330:	4b42      	ldr	r3, [pc, #264]	; (800343c <pvPortMalloc+0x18c>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003336:	e004      	b.n	8003342 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8003338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800333c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	429a      	cmp	r2, r3
 800334a:	d903      	bls.n	8003354 <pvPortMalloc+0xa4>
 800334c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d1f1      	bne.n	8003338 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003354:	4b36      	ldr	r3, [pc, #216]	; (8003430 <pvPortMalloc+0x180>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800335a:	429a      	cmp	r2, r3
 800335c:	d050      	beq.n	8003400 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800335e:	6a3b      	ldr	r3, [r7, #32]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2208      	movs	r2, #8
 8003364:	4413      	add	r3, r2
 8003366:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	6a3b      	ldr	r3, [r7, #32]
 800336e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003372:	685a      	ldr	r2, [r3, #4]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	1ad2      	subs	r2, r2, r3
 8003378:	2308      	movs	r3, #8
 800337a:	005b      	lsls	r3, r3, #1
 800337c:	429a      	cmp	r2, r3
 800337e:	d91f      	bls.n	80033c0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003380:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4413      	add	r3, r2
 8003386:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003388:	69bb      	ldr	r3, [r7, #24]
 800338a:	f003 0307 	and.w	r3, r3, #7
 800338e:	2b00      	cmp	r3, #0
 8003390:	d00a      	beq.n	80033a8 <pvPortMalloc+0xf8>
	__asm volatile
 8003392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003396:	f383 8811 	msr	BASEPRI, r3
 800339a:	f3bf 8f6f 	isb	sy
 800339e:	f3bf 8f4f 	dsb	sy
 80033a2:	613b      	str	r3, [r7, #16]
}
 80033a4:	bf00      	nop
 80033a6:	e7fe      	b.n	80033a6 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80033a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033aa:	685a      	ldr	r2, [r3, #4]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	1ad2      	subs	r2, r2, r3
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80033b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80033ba:	69b8      	ldr	r0, [r7, #24]
 80033bc:	f000 f908 	bl	80035d0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80033c0:	4b1d      	ldr	r3, [pc, #116]	; (8003438 <pvPortMalloc+0x188>)
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	4a1b      	ldr	r2, [pc, #108]	; (8003438 <pvPortMalloc+0x188>)
 80033cc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80033ce:	4b1a      	ldr	r3, [pc, #104]	; (8003438 <pvPortMalloc+0x188>)
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	4b1b      	ldr	r3, [pc, #108]	; (8003440 <pvPortMalloc+0x190>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d203      	bcs.n	80033e2 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80033da:	4b17      	ldr	r3, [pc, #92]	; (8003438 <pvPortMalloc+0x188>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a18      	ldr	r2, [pc, #96]	; (8003440 <pvPortMalloc+0x190>)
 80033e0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80033e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e4:	685a      	ldr	r2, [r3, #4]
 80033e6:	4b13      	ldr	r3, [pc, #76]	; (8003434 <pvPortMalloc+0x184>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	431a      	orrs	r2, r3
 80033ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80033f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f2:	2200      	movs	r2, #0
 80033f4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80033f6:	4b13      	ldr	r3, [pc, #76]	; (8003444 <pvPortMalloc+0x194>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	3301      	adds	r3, #1
 80033fc:	4a11      	ldr	r2, [pc, #68]	; (8003444 <pvPortMalloc+0x194>)
 80033fe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003400:	f001 fb78 	bl	8004af4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	f003 0307 	and.w	r3, r3, #7
 800340a:	2b00      	cmp	r3, #0
 800340c:	d00a      	beq.n	8003424 <pvPortMalloc+0x174>
	__asm volatile
 800340e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003412:	f383 8811 	msr	BASEPRI, r3
 8003416:	f3bf 8f6f 	isb	sy
 800341a:	f3bf 8f4f 	dsb	sy
 800341e:	60fb      	str	r3, [r7, #12]
}
 8003420:	bf00      	nop
 8003422:	e7fe      	b.n	8003422 <pvPortMalloc+0x172>
	return pvReturn;
 8003424:	69fb      	ldr	r3, [r7, #28]
}
 8003426:	4618      	mov	r0, r3
 8003428:	3728      	adds	r7, #40	; 0x28
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	20004358 	.word	0x20004358
 8003434:	2000436c 	.word	0x2000436c
 8003438:	2000435c 	.word	0x2000435c
 800343c:	20004350 	.word	0x20004350
 8003440:	20004360 	.word	0x20004360
 8003444:	20004364 	.word	0x20004364

08003448 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b086      	sub	sp, #24
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d04d      	beq.n	80034f6 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800345a:	2308      	movs	r3, #8
 800345c:	425b      	negs	r3, r3
 800345e:	697a      	ldr	r2, [r7, #20]
 8003460:	4413      	add	r3, r2
 8003462:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	685a      	ldr	r2, [r3, #4]
 800346c:	4b24      	ldr	r3, [pc, #144]	; (8003500 <vPortFree+0xb8>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4013      	ands	r3, r2
 8003472:	2b00      	cmp	r3, #0
 8003474:	d10a      	bne.n	800348c <vPortFree+0x44>
	__asm volatile
 8003476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800347a:	f383 8811 	msr	BASEPRI, r3
 800347e:	f3bf 8f6f 	isb	sy
 8003482:	f3bf 8f4f 	dsb	sy
 8003486:	60fb      	str	r3, [r7, #12]
}
 8003488:	bf00      	nop
 800348a:	e7fe      	b.n	800348a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d00a      	beq.n	80034aa <vPortFree+0x62>
	__asm volatile
 8003494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003498:	f383 8811 	msr	BASEPRI, r3
 800349c:	f3bf 8f6f 	isb	sy
 80034a0:	f3bf 8f4f 	dsb	sy
 80034a4:	60bb      	str	r3, [r7, #8]
}
 80034a6:	bf00      	nop
 80034a8:	e7fe      	b.n	80034a8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	685a      	ldr	r2, [r3, #4]
 80034ae:	4b14      	ldr	r3, [pc, #80]	; (8003500 <vPortFree+0xb8>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4013      	ands	r3, r2
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d01e      	beq.n	80034f6 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d11a      	bne.n	80034f6 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	685a      	ldr	r2, [r3, #4]
 80034c4:	4b0e      	ldr	r3, [pc, #56]	; (8003500 <vPortFree+0xb8>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	43db      	mvns	r3, r3
 80034ca:	401a      	ands	r2, r3
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80034d0:	f001 fb02 	bl	8004ad8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	685a      	ldr	r2, [r3, #4]
 80034d8:	4b0a      	ldr	r3, [pc, #40]	; (8003504 <vPortFree+0xbc>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4413      	add	r3, r2
 80034de:	4a09      	ldr	r2, [pc, #36]	; (8003504 <vPortFree+0xbc>)
 80034e0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80034e2:	6938      	ldr	r0, [r7, #16]
 80034e4:	f000 f874 	bl	80035d0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80034e8:	4b07      	ldr	r3, [pc, #28]	; (8003508 <vPortFree+0xc0>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	3301      	adds	r3, #1
 80034ee:	4a06      	ldr	r2, [pc, #24]	; (8003508 <vPortFree+0xc0>)
 80034f0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80034f2:	f001 faff 	bl	8004af4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80034f6:	bf00      	nop
 80034f8:	3718      	adds	r7, #24
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	2000436c 	.word	0x2000436c
 8003504:	2000435c 	.word	0x2000435c
 8003508:	20004368 	.word	0x20004368

0800350c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800350c:	b480      	push	{r7}
 800350e:	b085      	sub	sp, #20
 8003510:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003512:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8003516:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003518:	4b27      	ldr	r3, [pc, #156]	; (80035b8 <prvHeapInit+0xac>)
 800351a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f003 0307 	and.w	r3, r3, #7
 8003522:	2b00      	cmp	r3, #0
 8003524:	d00c      	beq.n	8003540 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	3307      	adds	r3, #7
 800352a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f023 0307 	bic.w	r3, r3, #7
 8003532:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003534:	68ba      	ldr	r2, [r7, #8]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	4a1f      	ldr	r2, [pc, #124]	; (80035b8 <prvHeapInit+0xac>)
 800353c:	4413      	add	r3, r2
 800353e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003544:	4a1d      	ldr	r2, [pc, #116]	; (80035bc <prvHeapInit+0xb0>)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800354a:	4b1c      	ldr	r3, [pc, #112]	; (80035bc <prvHeapInit+0xb0>)
 800354c:	2200      	movs	r2, #0
 800354e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	68ba      	ldr	r2, [r7, #8]
 8003554:	4413      	add	r3, r2
 8003556:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003558:	2208      	movs	r2, #8
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	1a9b      	subs	r3, r3, r2
 800355e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f023 0307 	bic.w	r3, r3, #7
 8003566:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	4a15      	ldr	r2, [pc, #84]	; (80035c0 <prvHeapInit+0xb4>)
 800356c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800356e:	4b14      	ldr	r3, [pc, #80]	; (80035c0 <prvHeapInit+0xb4>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	2200      	movs	r2, #0
 8003574:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003576:	4b12      	ldr	r3, [pc, #72]	; (80035c0 <prvHeapInit+0xb4>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	2200      	movs	r2, #0
 800357c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	68fa      	ldr	r2, [r7, #12]
 8003586:	1ad2      	subs	r2, r2, r3
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800358c:	4b0c      	ldr	r3, [pc, #48]	; (80035c0 <prvHeapInit+0xb4>)
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	4a0a      	ldr	r2, [pc, #40]	; (80035c4 <prvHeapInit+0xb8>)
 800359a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	4a09      	ldr	r2, [pc, #36]	; (80035c8 <prvHeapInit+0xbc>)
 80035a2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80035a4:	4b09      	ldr	r3, [pc, #36]	; (80035cc <prvHeapInit+0xc0>)
 80035a6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80035aa:	601a      	str	r2, [r3, #0]
}
 80035ac:	bf00      	nop
 80035ae:	3714      	adds	r7, #20
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr
 80035b8:	20000750 	.word	0x20000750
 80035bc:	20004350 	.word	0x20004350
 80035c0:	20004358 	.word	0x20004358
 80035c4:	20004360 	.word	0x20004360
 80035c8:	2000435c 	.word	0x2000435c
 80035cc:	2000436c 	.word	0x2000436c

080035d0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80035d0:	b480      	push	{r7}
 80035d2:	b085      	sub	sp, #20
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80035d8:	4b28      	ldr	r3, [pc, #160]	; (800367c <prvInsertBlockIntoFreeList+0xac>)
 80035da:	60fb      	str	r3, [r7, #12]
 80035dc:	e002      	b.n	80035e4 <prvInsertBlockIntoFreeList+0x14>
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	60fb      	str	r3, [r7, #12]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d8f7      	bhi.n	80035de <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	68ba      	ldr	r2, [r7, #8]
 80035f8:	4413      	add	r3, r2
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d108      	bne.n	8003612 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	685a      	ldr	r2, [r3, #4]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	441a      	add	r2, r3
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	68ba      	ldr	r2, [r7, #8]
 800361c:	441a      	add	r2, r3
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	429a      	cmp	r2, r3
 8003624:	d118      	bne.n	8003658 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	4b15      	ldr	r3, [pc, #84]	; (8003680 <prvInsertBlockIntoFreeList+0xb0>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	429a      	cmp	r2, r3
 8003630:	d00d      	beq.n	800364e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	685a      	ldr	r2, [r3, #4]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	441a      	add	r2, r3
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	601a      	str	r2, [r3, #0]
 800364c:	e008      	b.n	8003660 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800364e:	4b0c      	ldr	r3, [pc, #48]	; (8003680 <prvInsertBlockIntoFreeList+0xb0>)
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	601a      	str	r2, [r3, #0]
 8003656:	e003      	b.n	8003660 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003660:	68fa      	ldr	r2, [r7, #12]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	429a      	cmp	r2, r3
 8003666:	d002      	beq.n	800366e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800366e:	bf00      	nop
 8003670:	3714      	adds	r7, #20
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr
 800367a:	bf00      	nop
 800367c:	20004350 	.word	0x20004350
 8003680:	20004358 	.word	0x20004358

08003684 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f103 0208 	add.w	r2, r3, #8
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f04f 32ff 	mov.w	r2, #4294967295
 800369c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f103 0208 	add.w	r2, r3, #8
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f103 0208 	add.w	r2, r3, #8
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80036b8:	bf00      	nop
 80036ba:	370c      	adds	r7, #12
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr

080036c4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80036c4:	b480      	push	{r7}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80036d2:	bf00      	nop
 80036d4:	370c      	adds	r7, #12
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr

080036de <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80036de:	b480      	push	{r7}
 80036e0:	b085      	sub	sp, #20
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	6078      	str	r0, [r7, #4]
 80036e6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	68fa      	ldr	r2, [r7, #12]
 80036f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	689a      	ldr	r2, [r3, #8]
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	683a      	ldr	r2, [r7, #0]
 8003702:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	683a      	ldr	r2, [r7, #0]
 8003708:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	1c5a      	adds	r2, r3, #1
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	601a      	str	r2, [r3, #0]
}
 800371a:	bf00      	nop
 800371c:	3714      	adds	r7, #20
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr

08003726 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003726:	b480      	push	{r7}
 8003728:	b085      	sub	sp, #20
 800372a:	af00      	add	r7, sp, #0
 800372c:	6078      	str	r0, [r7, #4]
 800372e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800373c:	d103      	bne.n	8003746 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	691b      	ldr	r3, [r3, #16]
 8003742:	60fb      	str	r3, [r7, #12]
 8003744:	e00c      	b.n	8003760 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	3308      	adds	r3, #8
 800374a:	60fb      	str	r3, [r7, #12]
 800374c:	e002      	b.n	8003754 <vListInsert+0x2e>
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	60fb      	str	r3, [r7, #12]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	68ba      	ldr	r2, [r7, #8]
 800375c:	429a      	cmp	r2, r3
 800375e:	d2f6      	bcs.n	800374e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	685a      	ldr	r2, [r3, #4]
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	683a      	ldr	r2, [r7, #0]
 800376e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	68fa      	ldr	r2, [r7, #12]
 8003774:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	683a      	ldr	r2, [r7, #0]
 800377a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	1c5a      	adds	r2, r3, #1
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	601a      	str	r2, [r3, #0]
}
 800378c:	bf00      	nop
 800378e:	3714      	adds	r7, #20
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003798:	b480      	push	{r7}
 800379a:	b085      	sub	sp, #20
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	691b      	ldr	r3, [r3, #16]
 80037a4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	687a      	ldr	r2, [r7, #4]
 80037ac:	6892      	ldr	r2, [r2, #8]
 80037ae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	6852      	ldr	r2, [r2, #4]
 80037b8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d103      	bne.n	80037cc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	689a      	ldr	r2, [r3, #8]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	1e5a      	subs	r2, r3, #1
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3714      	adds	r7, #20
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr

080037ec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80037ec:	b480      	push	{r7}
 80037ee:	b085      	sub	sp, #20
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	60f8      	str	r0, [r7, #12]
 80037f4:	60b9      	str	r1, [r7, #8]
 80037f6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	3b04      	subs	r3, #4
 80037fc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003804:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	3b04      	subs	r3, #4
 800380a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	f023 0201 	bic.w	r2, r3, #1
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	3b04      	subs	r3, #4
 800381a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800381c:	4a0c      	ldr	r2, [pc, #48]	; (8003850 <pxPortInitialiseStack+0x64>)
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	3b14      	subs	r3, #20
 8003826:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	3b04      	subs	r3, #4
 8003832:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f06f 0202 	mvn.w	r2, #2
 800383a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	3b20      	subs	r3, #32
 8003840:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003842:	68fb      	ldr	r3, [r7, #12]
}
 8003844:	4618      	mov	r0, r3
 8003846:	3714      	adds	r7, #20
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr
 8003850:	08003855 	.word	0x08003855

08003854 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003854:	b480      	push	{r7}
 8003856:	b085      	sub	sp, #20
 8003858:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800385a:	2300      	movs	r3, #0
 800385c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800385e:	4b12      	ldr	r3, [pc, #72]	; (80038a8 <prvTaskExitError+0x54>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003866:	d00a      	beq.n	800387e <prvTaskExitError+0x2a>
	__asm volatile
 8003868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800386c:	f383 8811 	msr	BASEPRI, r3
 8003870:	f3bf 8f6f 	isb	sy
 8003874:	f3bf 8f4f 	dsb	sy
 8003878:	60fb      	str	r3, [r7, #12]
}
 800387a:	bf00      	nop
 800387c:	e7fe      	b.n	800387c <prvTaskExitError+0x28>
	__asm volatile
 800387e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003882:	f383 8811 	msr	BASEPRI, r3
 8003886:	f3bf 8f6f 	isb	sy
 800388a:	f3bf 8f4f 	dsb	sy
 800388e:	60bb      	str	r3, [r7, #8]
}
 8003890:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003892:	bf00      	nop
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d0fc      	beq.n	8003894 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800389a:	bf00      	nop
 800389c:	bf00      	nop
 800389e:	3714      	adds	r7, #20
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr
 80038a8:	2000000c 	.word	0x2000000c
 80038ac:	00000000 	.word	0x00000000

080038b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80038b0:	4b07      	ldr	r3, [pc, #28]	; (80038d0 <pxCurrentTCBConst2>)
 80038b2:	6819      	ldr	r1, [r3, #0]
 80038b4:	6808      	ldr	r0, [r1, #0]
 80038b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038ba:	f380 8809 	msr	PSP, r0
 80038be:	f3bf 8f6f 	isb	sy
 80038c2:	f04f 0000 	mov.w	r0, #0
 80038c6:	f380 8811 	msr	BASEPRI, r0
 80038ca:	4770      	bx	lr
 80038cc:	f3af 8000 	nop.w

080038d0 <pxCurrentTCBConst2>:
 80038d0:	20004378 	.word	0x20004378
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80038d4:	bf00      	nop
 80038d6:	bf00      	nop

080038d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80038d8:	4808      	ldr	r0, [pc, #32]	; (80038fc <prvPortStartFirstTask+0x24>)
 80038da:	6800      	ldr	r0, [r0, #0]
 80038dc:	6800      	ldr	r0, [r0, #0]
 80038de:	f380 8808 	msr	MSP, r0
 80038e2:	f04f 0000 	mov.w	r0, #0
 80038e6:	f380 8814 	msr	CONTROL, r0
 80038ea:	b662      	cpsie	i
 80038ec:	b661      	cpsie	f
 80038ee:	f3bf 8f4f 	dsb	sy
 80038f2:	f3bf 8f6f 	isb	sy
 80038f6:	df00      	svc	0
 80038f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80038fa:	bf00      	nop
 80038fc:	e000ed08 	.word	0xe000ed08

08003900 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b086      	sub	sp, #24
 8003904:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003906:	4b46      	ldr	r3, [pc, #280]	; (8003a20 <xPortStartScheduler+0x120>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a46      	ldr	r2, [pc, #280]	; (8003a24 <xPortStartScheduler+0x124>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d10a      	bne.n	8003926 <xPortStartScheduler+0x26>
	__asm volatile
 8003910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003914:	f383 8811 	msr	BASEPRI, r3
 8003918:	f3bf 8f6f 	isb	sy
 800391c:	f3bf 8f4f 	dsb	sy
 8003920:	613b      	str	r3, [r7, #16]
}
 8003922:	bf00      	nop
 8003924:	e7fe      	b.n	8003924 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003926:	4b3e      	ldr	r3, [pc, #248]	; (8003a20 <xPortStartScheduler+0x120>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a3f      	ldr	r2, [pc, #252]	; (8003a28 <xPortStartScheduler+0x128>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d10a      	bne.n	8003946 <xPortStartScheduler+0x46>
	__asm volatile
 8003930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003934:	f383 8811 	msr	BASEPRI, r3
 8003938:	f3bf 8f6f 	isb	sy
 800393c:	f3bf 8f4f 	dsb	sy
 8003940:	60fb      	str	r3, [r7, #12]
}
 8003942:	bf00      	nop
 8003944:	e7fe      	b.n	8003944 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003946:	4b39      	ldr	r3, [pc, #228]	; (8003a2c <xPortStartScheduler+0x12c>)
 8003948:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	781b      	ldrb	r3, [r3, #0]
 800394e:	b2db      	uxtb	r3, r3
 8003950:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	22ff      	movs	r2, #255	; 0xff
 8003956:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	b2db      	uxtb	r3, r3
 800395e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003960:	78fb      	ldrb	r3, [r7, #3]
 8003962:	b2db      	uxtb	r3, r3
 8003964:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003968:	b2da      	uxtb	r2, r3
 800396a:	4b31      	ldr	r3, [pc, #196]	; (8003a30 <xPortStartScheduler+0x130>)
 800396c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800396e:	4b31      	ldr	r3, [pc, #196]	; (8003a34 <xPortStartScheduler+0x134>)
 8003970:	2207      	movs	r2, #7
 8003972:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003974:	e009      	b.n	800398a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8003976:	4b2f      	ldr	r3, [pc, #188]	; (8003a34 <xPortStartScheduler+0x134>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	3b01      	subs	r3, #1
 800397c:	4a2d      	ldr	r2, [pc, #180]	; (8003a34 <xPortStartScheduler+0x134>)
 800397e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003980:	78fb      	ldrb	r3, [r7, #3]
 8003982:	b2db      	uxtb	r3, r3
 8003984:	005b      	lsls	r3, r3, #1
 8003986:	b2db      	uxtb	r3, r3
 8003988:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800398a:	78fb      	ldrb	r3, [r7, #3]
 800398c:	b2db      	uxtb	r3, r3
 800398e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003992:	2b80      	cmp	r3, #128	; 0x80
 8003994:	d0ef      	beq.n	8003976 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003996:	4b27      	ldr	r3, [pc, #156]	; (8003a34 <xPortStartScheduler+0x134>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f1c3 0307 	rsb	r3, r3, #7
 800399e:	2b04      	cmp	r3, #4
 80039a0:	d00a      	beq.n	80039b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80039a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039a6:	f383 8811 	msr	BASEPRI, r3
 80039aa:	f3bf 8f6f 	isb	sy
 80039ae:	f3bf 8f4f 	dsb	sy
 80039b2:	60bb      	str	r3, [r7, #8]
}
 80039b4:	bf00      	nop
 80039b6:	e7fe      	b.n	80039b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80039b8:	4b1e      	ldr	r3, [pc, #120]	; (8003a34 <xPortStartScheduler+0x134>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	021b      	lsls	r3, r3, #8
 80039be:	4a1d      	ldr	r2, [pc, #116]	; (8003a34 <xPortStartScheduler+0x134>)
 80039c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80039c2:	4b1c      	ldr	r3, [pc, #112]	; (8003a34 <xPortStartScheduler+0x134>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80039ca:	4a1a      	ldr	r2, [pc, #104]	; (8003a34 <xPortStartScheduler+0x134>)
 80039cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	b2da      	uxtb	r2, r3
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80039d6:	4b18      	ldr	r3, [pc, #96]	; (8003a38 <xPortStartScheduler+0x138>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a17      	ldr	r2, [pc, #92]	; (8003a38 <xPortStartScheduler+0x138>)
 80039dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80039e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80039e2:	4b15      	ldr	r3, [pc, #84]	; (8003a38 <xPortStartScheduler+0x138>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a14      	ldr	r2, [pc, #80]	; (8003a38 <xPortStartScheduler+0x138>)
 80039e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80039ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80039ee:	f000 f8dd 	bl	8003bac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80039f2:	4b12      	ldr	r3, [pc, #72]	; (8003a3c <xPortStartScheduler+0x13c>)
 80039f4:	2200      	movs	r2, #0
 80039f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80039f8:	f000 f8fc 	bl	8003bf4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80039fc:	4b10      	ldr	r3, [pc, #64]	; (8003a40 <xPortStartScheduler+0x140>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a0f      	ldr	r2, [pc, #60]	; (8003a40 <xPortStartScheduler+0x140>)
 8003a02:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003a06:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003a08:	f7ff ff66 	bl	80038d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003a0c:	f001 f9da 	bl	8004dc4 <vTaskSwitchContext>
	prvTaskExitError();
 8003a10:	f7ff ff20 	bl	8003854 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3718      	adds	r7, #24
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	e000ed00 	.word	0xe000ed00
 8003a24:	410fc271 	.word	0x410fc271
 8003a28:	410fc270 	.word	0x410fc270
 8003a2c:	e000e400 	.word	0xe000e400
 8003a30:	20004370 	.word	0x20004370
 8003a34:	20004374 	.word	0x20004374
 8003a38:	e000ed20 	.word	0xe000ed20
 8003a3c:	2000000c 	.word	0x2000000c
 8003a40:	e000ef34 	.word	0xe000ef34

08003a44 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
	__asm volatile
 8003a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a4e:	f383 8811 	msr	BASEPRI, r3
 8003a52:	f3bf 8f6f 	isb	sy
 8003a56:	f3bf 8f4f 	dsb	sy
 8003a5a:	607b      	str	r3, [r7, #4]
}
 8003a5c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003a5e:	4b0f      	ldr	r3, [pc, #60]	; (8003a9c <vPortEnterCritical+0x58>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	3301      	adds	r3, #1
 8003a64:	4a0d      	ldr	r2, [pc, #52]	; (8003a9c <vPortEnterCritical+0x58>)
 8003a66:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003a68:	4b0c      	ldr	r3, [pc, #48]	; (8003a9c <vPortEnterCritical+0x58>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d10f      	bne.n	8003a90 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003a70:	4b0b      	ldr	r3, [pc, #44]	; (8003aa0 <vPortEnterCritical+0x5c>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d00a      	beq.n	8003a90 <vPortEnterCritical+0x4c>
	__asm volatile
 8003a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a7e:	f383 8811 	msr	BASEPRI, r3
 8003a82:	f3bf 8f6f 	isb	sy
 8003a86:	f3bf 8f4f 	dsb	sy
 8003a8a:	603b      	str	r3, [r7, #0]
}
 8003a8c:	bf00      	nop
 8003a8e:	e7fe      	b.n	8003a8e <vPortEnterCritical+0x4a>
	}
}
 8003a90:	bf00      	nop
 8003a92:	370c      	adds	r7, #12
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr
 8003a9c:	2000000c 	.word	0x2000000c
 8003aa0:	e000ed04 	.word	0xe000ed04

08003aa4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003aaa:	4b12      	ldr	r3, [pc, #72]	; (8003af4 <vPortExitCritical+0x50>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d10a      	bne.n	8003ac8 <vPortExitCritical+0x24>
	__asm volatile
 8003ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ab6:	f383 8811 	msr	BASEPRI, r3
 8003aba:	f3bf 8f6f 	isb	sy
 8003abe:	f3bf 8f4f 	dsb	sy
 8003ac2:	607b      	str	r3, [r7, #4]
}
 8003ac4:	bf00      	nop
 8003ac6:	e7fe      	b.n	8003ac6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003ac8:	4b0a      	ldr	r3, [pc, #40]	; (8003af4 <vPortExitCritical+0x50>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	3b01      	subs	r3, #1
 8003ace:	4a09      	ldr	r2, [pc, #36]	; (8003af4 <vPortExitCritical+0x50>)
 8003ad0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003ad2:	4b08      	ldr	r3, [pc, #32]	; (8003af4 <vPortExitCritical+0x50>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d105      	bne.n	8003ae6 <vPortExitCritical+0x42>
 8003ada:	2300      	movs	r3, #0
 8003adc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003ae4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003ae6:	bf00      	nop
 8003ae8:	370c      	adds	r7, #12
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr
 8003af2:	bf00      	nop
 8003af4:	2000000c 	.word	0x2000000c
	...

08003b00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003b00:	f3ef 8009 	mrs	r0, PSP
 8003b04:	f3bf 8f6f 	isb	sy
 8003b08:	4b15      	ldr	r3, [pc, #84]	; (8003b60 <pxCurrentTCBConst>)
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	f01e 0f10 	tst.w	lr, #16
 8003b10:	bf08      	it	eq
 8003b12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003b16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b1a:	6010      	str	r0, [r2, #0]
 8003b1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003b20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003b24:	f380 8811 	msr	BASEPRI, r0
 8003b28:	f3bf 8f4f 	dsb	sy
 8003b2c:	f3bf 8f6f 	isb	sy
 8003b30:	f001 f948 	bl	8004dc4 <vTaskSwitchContext>
 8003b34:	f04f 0000 	mov.w	r0, #0
 8003b38:	f380 8811 	msr	BASEPRI, r0
 8003b3c:	bc09      	pop	{r0, r3}
 8003b3e:	6819      	ldr	r1, [r3, #0]
 8003b40:	6808      	ldr	r0, [r1, #0]
 8003b42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b46:	f01e 0f10 	tst.w	lr, #16
 8003b4a:	bf08      	it	eq
 8003b4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003b50:	f380 8809 	msr	PSP, r0
 8003b54:	f3bf 8f6f 	isb	sy
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop
 8003b5c:	f3af 8000 	nop.w

08003b60 <pxCurrentTCBConst>:
 8003b60:	20004378 	.word	0x20004378
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003b64:	bf00      	nop
 8003b66:	bf00      	nop

08003b68 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b082      	sub	sp, #8
 8003b6c:	af00      	add	r7, sp, #0
	__asm volatile
 8003b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b72:	f383 8811 	msr	BASEPRI, r3
 8003b76:	f3bf 8f6f 	isb	sy
 8003b7a:	f3bf 8f4f 	dsb	sy
 8003b7e:	607b      	str	r3, [r7, #4]
}
 8003b80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003b82:	f001 f865 	bl	8004c50 <xTaskIncrementTick>
 8003b86:	4603      	mov	r3, r0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d003      	beq.n	8003b94 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003b8c:	4b06      	ldr	r3, [pc, #24]	; (8003ba8 <xPortSysTickHandler+0x40>)
 8003b8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b92:	601a      	str	r2, [r3, #0]
 8003b94:	2300      	movs	r3, #0
 8003b96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	f383 8811 	msr	BASEPRI, r3
}
 8003b9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003ba0:	bf00      	nop
 8003ba2:	3708      	adds	r7, #8
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	e000ed04 	.word	0xe000ed04

08003bac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003bac:	b480      	push	{r7}
 8003bae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003bb0:	4b0b      	ldr	r3, [pc, #44]	; (8003be0 <vPortSetupTimerInterrupt+0x34>)
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003bb6:	4b0b      	ldr	r3, [pc, #44]	; (8003be4 <vPortSetupTimerInterrupt+0x38>)
 8003bb8:	2200      	movs	r2, #0
 8003bba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003bbc:	4b0a      	ldr	r3, [pc, #40]	; (8003be8 <vPortSetupTimerInterrupt+0x3c>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a0a      	ldr	r2, [pc, #40]	; (8003bec <vPortSetupTimerInterrupt+0x40>)
 8003bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8003bc6:	099b      	lsrs	r3, r3, #6
 8003bc8:	4a09      	ldr	r2, [pc, #36]	; (8003bf0 <vPortSetupTimerInterrupt+0x44>)
 8003bca:	3b01      	subs	r3, #1
 8003bcc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003bce:	4b04      	ldr	r3, [pc, #16]	; (8003be0 <vPortSetupTimerInterrupt+0x34>)
 8003bd0:	2207      	movs	r2, #7
 8003bd2:	601a      	str	r2, [r3, #0]
}
 8003bd4:	bf00      	nop
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr
 8003bde:	bf00      	nop
 8003be0:	e000e010 	.word	0xe000e010
 8003be4:	e000e018 	.word	0xe000e018
 8003be8:	20000000 	.word	0x20000000
 8003bec:	10624dd3 	.word	0x10624dd3
 8003bf0:	e000e014 	.word	0xe000e014

08003bf4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003bf4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003c04 <vPortEnableVFP+0x10>
 8003bf8:	6801      	ldr	r1, [r0, #0]
 8003bfa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003bfe:	6001      	str	r1, [r0, #0]
 8003c00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003c02:	bf00      	nop
 8003c04:	e000ed88 	.word	0xe000ed88

08003c08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003c08:	b480      	push	{r7}
 8003c0a:	b085      	sub	sp, #20
 8003c0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003c0e:	f3ef 8305 	mrs	r3, IPSR
 8003c12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2b0f      	cmp	r3, #15
 8003c18:	d914      	bls.n	8003c44 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003c1a:	4a17      	ldr	r2, [pc, #92]	; (8003c78 <vPortValidateInterruptPriority+0x70>)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	4413      	add	r3, r2
 8003c20:	781b      	ldrb	r3, [r3, #0]
 8003c22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003c24:	4b15      	ldr	r3, [pc, #84]	; (8003c7c <vPortValidateInterruptPriority+0x74>)
 8003c26:	781b      	ldrb	r3, [r3, #0]
 8003c28:	7afa      	ldrb	r2, [r7, #11]
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d20a      	bcs.n	8003c44 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8003c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c32:	f383 8811 	msr	BASEPRI, r3
 8003c36:	f3bf 8f6f 	isb	sy
 8003c3a:	f3bf 8f4f 	dsb	sy
 8003c3e:	607b      	str	r3, [r7, #4]
}
 8003c40:	bf00      	nop
 8003c42:	e7fe      	b.n	8003c42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003c44:	4b0e      	ldr	r3, [pc, #56]	; (8003c80 <vPortValidateInterruptPriority+0x78>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003c4c:	4b0d      	ldr	r3, [pc, #52]	; (8003c84 <vPortValidateInterruptPriority+0x7c>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d90a      	bls.n	8003c6a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8003c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c58:	f383 8811 	msr	BASEPRI, r3
 8003c5c:	f3bf 8f6f 	isb	sy
 8003c60:	f3bf 8f4f 	dsb	sy
 8003c64:	603b      	str	r3, [r7, #0]
}
 8003c66:	bf00      	nop
 8003c68:	e7fe      	b.n	8003c68 <vPortValidateInterruptPriority+0x60>
	}
 8003c6a:	bf00      	nop
 8003c6c:	3714      	adds	r7, #20
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr
 8003c76:	bf00      	nop
 8003c78:	e000e3f0 	.word	0xe000e3f0
 8003c7c:	20004370 	.word	0x20004370
 8003c80:	e000ed0c 	.word	0xe000ed0c
 8003c84:	20004374 	.word	0x20004374

08003c88 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
 8003c90:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d10a      	bne.n	8003cb2 <xQueueGenericReset+0x2a>
	__asm volatile
 8003c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ca0:	f383 8811 	msr	BASEPRI, r3
 8003ca4:	f3bf 8f6f 	isb	sy
 8003ca8:	f3bf 8f4f 	dsb	sy
 8003cac:	60bb      	str	r3, [r7, #8]
}
 8003cae:	bf00      	nop
 8003cb0:	e7fe      	b.n	8003cb0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003cb2:	f7ff fec7 	bl	8003a44 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cbe:	68f9      	ldr	r1, [r7, #12]
 8003cc0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003cc2:	fb01 f303 	mul.w	r3, r1, r3
 8003cc6:	441a      	add	r2, r3
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ce2:	3b01      	subs	r3, #1
 8003ce4:	68f9      	ldr	r1, [r7, #12]
 8003ce6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003ce8:	fb01 f303 	mul.w	r3, r1, r3
 8003cec:	441a      	add	r2, r3
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	22ff      	movs	r2, #255	; 0xff
 8003cf6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	22ff      	movs	r2, #255	; 0xff
 8003cfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d114      	bne.n	8003d32 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	691b      	ldr	r3, [r3, #16]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d01a      	beq.n	8003d46 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	3310      	adds	r3, #16
 8003d14:	4618      	mov	r0, r3
 8003d16:	f001 f903 	bl	8004f20 <xTaskRemoveFromEventList>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d012      	beq.n	8003d46 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003d20:	4b0c      	ldr	r3, [pc, #48]	; (8003d54 <xQueueGenericReset+0xcc>)
 8003d22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d26:	601a      	str	r2, [r3, #0]
 8003d28:	f3bf 8f4f 	dsb	sy
 8003d2c:	f3bf 8f6f 	isb	sy
 8003d30:	e009      	b.n	8003d46 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	3310      	adds	r3, #16
 8003d36:	4618      	mov	r0, r3
 8003d38:	f7ff fca4 	bl	8003684 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	3324      	adds	r3, #36	; 0x24
 8003d40:	4618      	mov	r0, r3
 8003d42:	f7ff fc9f 	bl	8003684 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003d46:	f7ff fead 	bl	8003aa4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003d4a:	2301      	movs	r3, #1
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3710      	adds	r7, #16
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	e000ed04 	.word	0xe000ed04

08003d58 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b08e      	sub	sp, #56	; 0x38
 8003d5c:	af02      	add	r7, sp, #8
 8003d5e:	60f8      	str	r0, [r7, #12]
 8003d60:	60b9      	str	r1, [r7, #8]
 8003d62:	607a      	str	r2, [r7, #4]
 8003d64:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d10a      	bne.n	8003d82 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d70:	f383 8811 	msr	BASEPRI, r3
 8003d74:	f3bf 8f6f 	isb	sy
 8003d78:	f3bf 8f4f 	dsb	sy
 8003d7c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003d7e:	bf00      	nop
 8003d80:	e7fe      	b.n	8003d80 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d10a      	bne.n	8003d9e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d8c:	f383 8811 	msr	BASEPRI, r3
 8003d90:	f3bf 8f6f 	isb	sy
 8003d94:	f3bf 8f4f 	dsb	sy
 8003d98:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003d9a:	bf00      	nop
 8003d9c:	e7fe      	b.n	8003d9c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d002      	beq.n	8003daa <xQueueGenericCreateStatic+0x52>
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d001      	beq.n	8003dae <xQueueGenericCreateStatic+0x56>
 8003daa:	2301      	movs	r3, #1
 8003dac:	e000      	b.n	8003db0 <xQueueGenericCreateStatic+0x58>
 8003dae:	2300      	movs	r3, #0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d10a      	bne.n	8003dca <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003db8:	f383 8811 	msr	BASEPRI, r3
 8003dbc:	f3bf 8f6f 	isb	sy
 8003dc0:	f3bf 8f4f 	dsb	sy
 8003dc4:	623b      	str	r3, [r7, #32]
}
 8003dc6:	bf00      	nop
 8003dc8:	e7fe      	b.n	8003dc8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d102      	bne.n	8003dd6 <xQueueGenericCreateStatic+0x7e>
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d101      	bne.n	8003dda <xQueueGenericCreateStatic+0x82>
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e000      	b.n	8003ddc <xQueueGenericCreateStatic+0x84>
 8003dda:	2300      	movs	r3, #0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d10a      	bne.n	8003df6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de4:	f383 8811 	msr	BASEPRI, r3
 8003de8:	f3bf 8f6f 	isb	sy
 8003dec:	f3bf 8f4f 	dsb	sy
 8003df0:	61fb      	str	r3, [r7, #28]
}
 8003df2:	bf00      	nop
 8003df4:	e7fe      	b.n	8003df4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003df6:	2350      	movs	r3, #80	; 0x50
 8003df8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	2b50      	cmp	r3, #80	; 0x50
 8003dfe:	d00a      	beq.n	8003e16 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e04:	f383 8811 	msr	BASEPRI, r3
 8003e08:	f3bf 8f6f 	isb	sy
 8003e0c:	f3bf 8f4f 	dsb	sy
 8003e10:	61bb      	str	r3, [r7, #24]
}
 8003e12:	bf00      	nop
 8003e14:	e7fe      	b.n	8003e14 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003e16:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d00d      	beq.n	8003e3e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e24:	2201      	movs	r2, #1
 8003e26:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003e2a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e30:	9300      	str	r3, [sp, #0]
 8003e32:	4613      	mov	r3, r2
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	68b9      	ldr	r1, [r7, #8]
 8003e38:	68f8      	ldr	r0, [r7, #12]
 8003e3a:	f000 f805 	bl	8003e48 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3730      	adds	r7, #48	; 0x30
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}

08003e48 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b084      	sub	sp, #16
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	60f8      	str	r0, [r7, #12]
 8003e50:	60b9      	str	r1, [r7, #8]
 8003e52:	607a      	str	r2, [r7, #4]
 8003e54:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d103      	bne.n	8003e64 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003e5c:	69bb      	ldr	r3, [r7, #24]
 8003e5e:	69ba      	ldr	r2, [r7, #24]
 8003e60:	601a      	str	r2, [r3, #0]
 8003e62:	e002      	b.n	8003e6a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003e64:	69bb      	ldr	r3, [r7, #24]
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003e6a:	69bb      	ldr	r3, [r7, #24]
 8003e6c:	68fa      	ldr	r2, [r7, #12]
 8003e6e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003e70:	69bb      	ldr	r3, [r7, #24]
 8003e72:	68ba      	ldr	r2, [r7, #8]
 8003e74:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003e76:	2101      	movs	r1, #1
 8003e78:	69b8      	ldr	r0, [r7, #24]
 8003e7a:	f7ff ff05 	bl	8003c88 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003e7e:	69bb      	ldr	r3, [r7, #24]
 8003e80:	78fa      	ldrb	r2, [r7, #3]
 8003e82:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003e86:	bf00      	nop
 8003e88:	3710      	adds	r7, #16
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}
	...

08003e90 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b08e      	sub	sp, #56	; 0x38
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	60f8      	str	r0, [r7, #12]
 8003e98:	60b9      	str	r1, [r7, #8]
 8003e9a:	607a      	str	r2, [r7, #4]
 8003e9c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d10a      	bne.n	8003ec2 <xQueueGenericSend+0x32>
	__asm volatile
 8003eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eb0:	f383 8811 	msr	BASEPRI, r3
 8003eb4:	f3bf 8f6f 	isb	sy
 8003eb8:	f3bf 8f4f 	dsb	sy
 8003ebc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003ebe:	bf00      	nop
 8003ec0:	e7fe      	b.n	8003ec0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d103      	bne.n	8003ed0 <xQueueGenericSend+0x40>
 8003ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d101      	bne.n	8003ed4 <xQueueGenericSend+0x44>
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e000      	b.n	8003ed6 <xQueueGenericSend+0x46>
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d10a      	bne.n	8003ef0 <xQueueGenericSend+0x60>
	__asm volatile
 8003eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ede:	f383 8811 	msr	BASEPRI, r3
 8003ee2:	f3bf 8f6f 	isb	sy
 8003ee6:	f3bf 8f4f 	dsb	sy
 8003eea:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003eec:	bf00      	nop
 8003eee:	e7fe      	b.n	8003eee <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	2b02      	cmp	r3, #2
 8003ef4:	d103      	bne.n	8003efe <xQueueGenericSend+0x6e>
 8003ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d101      	bne.n	8003f02 <xQueueGenericSend+0x72>
 8003efe:	2301      	movs	r3, #1
 8003f00:	e000      	b.n	8003f04 <xQueueGenericSend+0x74>
 8003f02:	2300      	movs	r3, #0
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d10a      	bne.n	8003f1e <xQueueGenericSend+0x8e>
	__asm volatile
 8003f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f0c:	f383 8811 	msr	BASEPRI, r3
 8003f10:	f3bf 8f6f 	isb	sy
 8003f14:	f3bf 8f4f 	dsb	sy
 8003f18:	623b      	str	r3, [r7, #32]
}
 8003f1a:	bf00      	nop
 8003f1c:	e7fe      	b.n	8003f1c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003f1e:	f001 f9bd 	bl	800529c <xTaskGetSchedulerState>
 8003f22:	4603      	mov	r3, r0
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d102      	bne.n	8003f2e <xQueueGenericSend+0x9e>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d101      	bne.n	8003f32 <xQueueGenericSend+0xa2>
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e000      	b.n	8003f34 <xQueueGenericSend+0xa4>
 8003f32:	2300      	movs	r3, #0
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d10a      	bne.n	8003f4e <xQueueGenericSend+0xbe>
	__asm volatile
 8003f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f3c:	f383 8811 	msr	BASEPRI, r3
 8003f40:	f3bf 8f6f 	isb	sy
 8003f44:	f3bf 8f4f 	dsb	sy
 8003f48:	61fb      	str	r3, [r7, #28]
}
 8003f4a:	bf00      	nop
 8003f4c:	e7fe      	b.n	8003f4c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003f4e:	f7ff fd79 	bl	8003a44 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d302      	bcc.n	8003f64 <xQueueGenericSend+0xd4>
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	d129      	bne.n	8003fb8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003f64:	683a      	ldr	r2, [r7, #0]
 8003f66:	68b9      	ldr	r1, [r7, #8]
 8003f68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003f6a:	f000 fa0b 	bl	8004384 <prvCopyDataToQueue>
 8003f6e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d010      	beq.n	8003f9a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f7a:	3324      	adds	r3, #36	; 0x24
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f000 ffcf 	bl	8004f20 <xTaskRemoveFromEventList>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d013      	beq.n	8003fb0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003f88:	4b3f      	ldr	r3, [pc, #252]	; (8004088 <xQueueGenericSend+0x1f8>)
 8003f8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f8e:	601a      	str	r2, [r3, #0]
 8003f90:	f3bf 8f4f 	dsb	sy
 8003f94:	f3bf 8f6f 	isb	sy
 8003f98:	e00a      	b.n	8003fb0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d007      	beq.n	8003fb0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003fa0:	4b39      	ldr	r3, [pc, #228]	; (8004088 <xQueueGenericSend+0x1f8>)
 8003fa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fa6:	601a      	str	r2, [r3, #0]
 8003fa8:	f3bf 8f4f 	dsb	sy
 8003fac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003fb0:	f7ff fd78 	bl	8003aa4 <vPortExitCritical>
				return pdPASS;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e063      	b.n	8004080 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d103      	bne.n	8003fc6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003fbe:	f7ff fd71 	bl	8003aa4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	e05c      	b.n	8004080 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003fc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d106      	bne.n	8003fda <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003fcc:	f107 0314 	add.w	r3, r7, #20
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f001 f809 	bl	8004fe8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003fda:	f7ff fd63 	bl	8003aa4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003fde:	f000 fd7b 	bl	8004ad8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003fe2:	f7ff fd2f 	bl	8003a44 <vPortEnterCritical>
 8003fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fe8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003fec:	b25b      	sxtb	r3, r3
 8003fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ff2:	d103      	bne.n	8003ffc <xQueueGenericSend+0x16c>
 8003ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ffe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004002:	b25b      	sxtb	r3, r3
 8004004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004008:	d103      	bne.n	8004012 <xQueueGenericSend+0x182>
 800400a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800400c:	2200      	movs	r2, #0
 800400e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004012:	f7ff fd47 	bl	8003aa4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004016:	1d3a      	adds	r2, r7, #4
 8004018:	f107 0314 	add.w	r3, r7, #20
 800401c:	4611      	mov	r1, r2
 800401e:	4618      	mov	r0, r3
 8004020:	f000 fff8 	bl	8005014 <xTaskCheckForTimeOut>
 8004024:	4603      	mov	r3, r0
 8004026:	2b00      	cmp	r3, #0
 8004028:	d124      	bne.n	8004074 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800402a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800402c:	f000 faa2 	bl	8004574 <prvIsQueueFull>
 8004030:	4603      	mov	r3, r0
 8004032:	2b00      	cmp	r3, #0
 8004034:	d018      	beq.n	8004068 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004038:	3310      	adds	r3, #16
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	4611      	mov	r1, r2
 800403e:	4618      	mov	r0, r3
 8004040:	f000 ff1e 	bl	8004e80 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004044:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004046:	f000 fa2d 	bl	80044a4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800404a:	f000 fd53 	bl	8004af4 <xTaskResumeAll>
 800404e:	4603      	mov	r3, r0
 8004050:	2b00      	cmp	r3, #0
 8004052:	f47f af7c 	bne.w	8003f4e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004056:	4b0c      	ldr	r3, [pc, #48]	; (8004088 <xQueueGenericSend+0x1f8>)
 8004058:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800405c:	601a      	str	r2, [r3, #0]
 800405e:	f3bf 8f4f 	dsb	sy
 8004062:	f3bf 8f6f 	isb	sy
 8004066:	e772      	b.n	8003f4e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004068:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800406a:	f000 fa1b 	bl	80044a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800406e:	f000 fd41 	bl	8004af4 <xTaskResumeAll>
 8004072:	e76c      	b.n	8003f4e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004074:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004076:	f000 fa15 	bl	80044a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800407a:	f000 fd3b 	bl	8004af4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800407e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004080:	4618      	mov	r0, r3
 8004082:	3738      	adds	r7, #56	; 0x38
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}
 8004088:	e000ed04 	.word	0xe000ed04

0800408c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b090      	sub	sp, #64	; 0x40
 8004090:	af00      	add	r7, sp, #0
 8004092:	60f8      	str	r0, [r7, #12]
 8004094:	60b9      	str	r1, [r7, #8]
 8004096:	607a      	str	r2, [r7, #4]
 8004098:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800409e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d10a      	bne.n	80040ba <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80040a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a8:	f383 8811 	msr	BASEPRI, r3
 80040ac:	f3bf 8f6f 	isb	sy
 80040b0:	f3bf 8f4f 	dsb	sy
 80040b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80040b6:	bf00      	nop
 80040b8:	e7fe      	b.n	80040b8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d103      	bne.n	80040c8 <xQueueGenericSendFromISR+0x3c>
 80040c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d101      	bne.n	80040cc <xQueueGenericSendFromISR+0x40>
 80040c8:	2301      	movs	r3, #1
 80040ca:	e000      	b.n	80040ce <xQueueGenericSendFromISR+0x42>
 80040cc:	2300      	movs	r3, #0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d10a      	bne.n	80040e8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80040d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040d6:	f383 8811 	msr	BASEPRI, r3
 80040da:	f3bf 8f6f 	isb	sy
 80040de:	f3bf 8f4f 	dsb	sy
 80040e2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80040e4:	bf00      	nop
 80040e6:	e7fe      	b.n	80040e6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	d103      	bne.n	80040f6 <xQueueGenericSendFromISR+0x6a>
 80040ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d101      	bne.n	80040fa <xQueueGenericSendFromISR+0x6e>
 80040f6:	2301      	movs	r3, #1
 80040f8:	e000      	b.n	80040fc <xQueueGenericSendFromISR+0x70>
 80040fa:	2300      	movs	r3, #0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d10a      	bne.n	8004116 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004104:	f383 8811 	msr	BASEPRI, r3
 8004108:	f3bf 8f6f 	isb	sy
 800410c:	f3bf 8f4f 	dsb	sy
 8004110:	623b      	str	r3, [r7, #32]
}
 8004112:	bf00      	nop
 8004114:	e7fe      	b.n	8004114 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004116:	f7ff fd77 	bl	8003c08 <vPortValidateInterruptPriority>
	__asm volatile
 800411a:	f3ef 8211 	mrs	r2, BASEPRI
 800411e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004122:	f383 8811 	msr	BASEPRI, r3
 8004126:	f3bf 8f6f 	isb	sy
 800412a:	f3bf 8f4f 	dsb	sy
 800412e:	61fa      	str	r2, [r7, #28]
 8004130:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8004132:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004134:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004138:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800413a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800413c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800413e:	429a      	cmp	r2, r3
 8004140:	d302      	bcc.n	8004148 <xQueueGenericSendFromISR+0xbc>
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	2b02      	cmp	r3, #2
 8004146:	d12f      	bne.n	80041a8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800414a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800414e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004156:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004158:	683a      	ldr	r2, [r7, #0]
 800415a:	68b9      	ldr	r1, [r7, #8]
 800415c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800415e:	f000 f911 	bl	8004384 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004162:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800416a:	d112      	bne.n	8004192 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800416c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800416e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004170:	2b00      	cmp	r3, #0
 8004172:	d016      	beq.n	80041a2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004176:	3324      	adds	r3, #36	; 0x24
 8004178:	4618      	mov	r0, r3
 800417a:	f000 fed1 	bl	8004f20 <xTaskRemoveFromEventList>
 800417e:	4603      	mov	r3, r0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d00e      	beq.n	80041a2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d00b      	beq.n	80041a2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2201      	movs	r2, #1
 800418e:	601a      	str	r2, [r3, #0]
 8004190:	e007      	b.n	80041a2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004192:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004196:	3301      	adds	r3, #1
 8004198:	b2db      	uxtb	r3, r3
 800419a:	b25a      	sxtb	r2, r3
 800419c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800419e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80041a2:	2301      	movs	r3, #1
 80041a4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80041a6:	e001      	b.n	80041ac <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80041a8:	2300      	movs	r3, #0
 80041aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041ae:	617b      	str	r3, [r7, #20]
	__asm volatile
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	f383 8811 	msr	BASEPRI, r3
}
 80041b6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80041b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3740      	adds	r7, #64	; 0x40
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
	...

080041c4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b08c      	sub	sp, #48	; 0x30
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	60f8      	str	r0, [r7, #12]
 80041cc:	60b9      	str	r1, [r7, #8]
 80041ce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80041d0:	2300      	movs	r3, #0
 80041d2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80041d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d10a      	bne.n	80041f4 <xQueueReceive+0x30>
	__asm volatile
 80041de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041e2:	f383 8811 	msr	BASEPRI, r3
 80041e6:	f3bf 8f6f 	isb	sy
 80041ea:	f3bf 8f4f 	dsb	sy
 80041ee:	623b      	str	r3, [r7, #32]
}
 80041f0:	bf00      	nop
 80041f2:	e7fe      	b.n	80041f2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d103      	bne.n	8004202 <xQueueReceive+0x3e>
 80041fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d101      	bne.n	8004206 <xQueueReceive+0x42>
 8004202:	2301      	movs	r3, #1
 8004204:	e000      	b.n	8004208 <xQueueReceive+0x44>
 8004206:	2300      	movs	r3, #0
 8004208:	2b00      	cmp	r3, #0
 800420a:	d10a      	bne.n	8004222 <xQueueReceive+0x5e>
	__asm volatile
 800420c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004210:	f383 8811 	msr	BASEPRI, r3
 8004214:	f3bf 8f6f 	isb	sy
 8004218:	f3bf 8f4f 	dsb	sy
 800421c:	61fb      	str	r3, [r7, #28]
}
 800421e:	bf00      	nop
 8004220:	e7fe      	b.n	8004220 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004222:	f001 f83b 	bl	800529c <xTaskGetSchedulerState>
 8004226:	4603      	mov	r3, r0
 8004228:	2b00      	cmp	r3, #0
 800422a:	d102      	bne.n	8004232 <xQueueReceive+0x6e>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d101      	bne.n	8004236 <xQueueReceive+0x72>
 8004232:	2301      	movs	r3, #1
 8004234:	e000      	b.n	8004238 <xQueueReceive+0x74>
 8004236:	2300      	movs	r3, #0
 8004238:	2b00      	cmp	r3, #0
 800423a:	d10a      	bne.n	8004252 <xQueueReceive+0x8e>
	__asm volatile
 800423c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004240:	f383 8811 	msr	BASEPRI, r3
 8004244:	f3bf 8f6f 	isb	sy
 8004248:	f3bf 8f4f 	dsb	sy
 800424c:	61bb      	str	r3, [r7, #24]
}
 800424e:	bf00      	nop
 8004250:	e7fe      	b.n	8004250 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004252:	f7ff fbf7 	bl	8003a44 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800425a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800425c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800425e:	2b00      	cmp	r3, #0
 8004260:	d01f      	beq.n	80042a2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004262:	68b9      	ldr	r1, [r7, #8]
 8004264:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004266:	f000 f8f7 	bl	8004458 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800426a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800426c:	1e5a      	subs	r2, r3, #1
 800426e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004270:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d00f      	beq.n	800429a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800427a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800427c:	3310      	adds	r3, #16
 800427e:	4618      	mov	r0, r3
 8004280:	f000 fe4e 	bl	8004f20 <xTaskRemoveFromEventList>
 8004284:	4603      	mov	r3, r0
 8004286:	2b00      	cmp	r3, #0
 8004288:	d007      	beq.n	800429a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800428a:	4b3d      	ldr	r3, [pc, #244]	; (8004380 <xQueueReceive+0x1bc>)
 800428c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004290:	601a      	str	r2, [r3, #0]
 8004292:	f3bf 8f4f 	dsb	sy
 8004296:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800429a:	f7ff fc03 	bl	8003aa4 <vPortExitCritical>
				return pdPASS;
 800429e:	2301      	movs	r3, #1
 80042a0:	e069      	b.n	8004376 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d103      	bne.n	80042b0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80042a8:	f7ff fbfc 	bl	8003aa4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80042ac:	2300      	movs	r3, #0
 80042ae:	e062      	b.n	8004376 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80042b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d106      	bne.n	80042c4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80042b6:	f107 0310 	add.w	r3, r7, #16
 80042ba:	4618      	mov	r0, r3
 80042bc:	f000 fe94 	bl	8004fe8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80042c0:	2301      	movs	r3, #1
 80042c2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80042c4:	f7ff fbee 	bl	8003aa4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80042c8:	f000 fc06 	bl	8004ad8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80042cc:	f7ff fbba 	bl	8003a44 <vPortEnterCritical>
 80042d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80042d6:	b25b      	sxtb	r3, r3
 80042d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042dc:	d103      	bne.n	80042e6 <xQueueReceive+0x122>
 80042de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80042ec:	b25b      	sxtb	r3, r3
 80042ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042f2:	d103      	bne.n	80042fc <xQueueReceive+0x138>
 80042f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f6:	2200      	movs	r2, #0
 80042f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80042fc:	f7ff fbd2 	bl	8003aa4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004300:	1d3a      	adds	r2, r7, #4
 8004302:	f107 0310 	add.w	r3, r7, #16
 8004306:	4611      	mov	r1, r2
 8004308:	4618      	mov	r0, r3
 800430a:	f000 fe83 	bl	8005014 <xTaskCheckForTimeOut>
 800430e:	4603      	mov	r3, r0
 8004310:	2b00      	cmp	r3, #0
 8004312:	d123      	bne.n	800435c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004314:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004316:	f000 f917 	bl	8004548 <prvIsQueueEmpty>
 800431a:	4603      	mov	r3, r0
 800431c:	2b00      	cmp	r3, #0
 800431e:	d017      	beq.n	8004350 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004322:	3324      	adds	r3, #36	; 0x24
 8004324:	687a      	ldr	r2, [r7, #4]
 8004326:	4611      	mov	r1, r2
 8004328:	4618      	mov	r0, r3
 800432a:	f000 fda9 	bl	8004e80 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800432e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004330:	f000 f8b8 	bl	80044a4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004334:	f000 fbde 	bl	8004af4 <xTaskResumeAll>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d189      	bne.n	8004252 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800433e:	4b10      	ldr	r3, [pc, #64]	; (8004380 <xQueueReceive+0x1bc>)
 8004340:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004344:	601a      	str	r2, [r3, #0]
 8004346:	f3bf 8f4f 	dsb	sy
 800434a:	f3bf 8f6f 	isb	sy
 800434e:	e780      	b.n	8004252 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004350:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004352:	f000 f8a7 	bl	80044a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004356:	f000 fbcd 	bl	8004af4 <xTaskResumeAll>
 800435a:	e77a      	b.n	8004252 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800435c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800435e:	f000 f8a1 	bl	80044a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004362:	f000 fbc7 	bl	8004af4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004366:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004368:	f000 f8ee 	bl	8004548 <prvIsQueueEmpty>
 800436c:	4603      	mov	r3, r0
 800436e:	2b00      	cmp	r3, #0
 8004370:	f43f af6f 	beq.w	8004252 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004374:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004376:	4618      	mov	r0, r3
 8004378:	3730      	adds	r7, #48	; 0x30
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
 800437e:	bf00      	nop
 8004380:	e000ed04 	.word	0xe000ed04

08004384 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b086      	sub	sp, #24
 8004388:	af00      	add	r7, sp, #0
 800438a:	60f8      	str	r0, [r7, #12]
 800438c:	60b9      	str	r1, [r7, #8]
 800438e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004390:	2300      	movs	r3, #0
 8004392:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004398:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d10d      	bne.n	80043be <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d14d      	bne.n	8004446 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	4618      	mov	r0, r3
 80043b0:	f000 ff92 	bl	80052d8 <xTaskPriorityDisinherit>
 80043b4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2200      	movs	r2, #0
 80043ba:	609a      	str	r2, [r3, #8]
 80043bc:	e043      	b.n	8004446 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d119      	bne.n	80043f8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6858      	ldr	r0, [r3, #4]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043cc:	461a      	mov	r2, r3
 80043ce:	68b9      	ldr	r1, [r7, #8]
 80043d0:	f001 fdee 	bl	8005fb0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	685a      	ldr	r2, [r3, #4]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043dc:	441a      	add	r2, r3
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	685a      	ldr	r2, [r3, #4]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d32b      	bcc.n	8004446 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	605a      	str	r2, [r3, #4]
 80043f6:	e026      	b.n	8004446 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	68d8      	ldr	r0, [r3, #12]
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004400:	461a      	mov	r2, r3
 8004402:	68b9      	ldr	r1, [r7, #8]
 8004404:	f001 fdd4 	bl	8005fb0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	68da      	ldr	r2, [r3, #12]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004410:	425b      	negs	r3, r3
 8004412:	441a      	add	r2, r3
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	68da      	ldr	r2, [r3, #12]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	429a      	cmp	r2, r3
 8004422:	d207      	bcs.n	8004434 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	689a      	ldr	r2, [r3, #8]
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442c:	425b      	negs	r3, r3
 800442e:	441a      	add	r2, r3
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2b02      	cmp	r3, #2
 8004438:	d105      	bne.n	8004446 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d002      	beq.n	8004446 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	3b01      	subs	r3, #1
 8004444:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	1c5a      	adds	r2, r3, #1
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800444e:	697b      	ldr	r3, [r7, #20]
}
 8004450:	4618      	mov	r0, r3
 8004452:	3718      	adds	r7, #24
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}

08004458 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b082      	sub	sp, #8
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004466:	2b00      	cmp	r3, #0
 8004468:	d018      	beq.n	800449c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	68da      	ldr	r2, [r3, #12]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004472:	441a      	add	r2, r3
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	68da      	ldr	r2, [r3, #12]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	429a      	cmp	r2, r3
 8004482:	d303      	bcc.n	800448c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	68d9      	ldr	r1, [r3, #12]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004494:	461a      	mov	r2, r3
 8004496:	6838      	ldr	r0, [r7, #0]
 8004498:	f001 fd8a 	bl	8005fb0 <memcpy>
	}
}
 800449c:	bf00      	nop
 800449e:	3708      	adds	r7, #8
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80044ac:	f7ff faca 	bl	8003a44 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80044b6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80044b8:	e011      	b.n	80044de <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d012      	beq.n	80044e8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	3324      	adds	r3, #36	; 0x24
 80044c6:	4618      	mov	r0, r3
 80044c8:	f000 fd2a 	bl	8004f20 <xTaskRemoveFromEventList>
 80044cc:	4603      	mov	r3, r0
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d001      	beq.n	80044d6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80044d2:	f000 fe01 	bl	80050d8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80044d6:	7bfb      	ldrb	r3, [r7, #15]
 80044d8:	3b01      	subs	r3, #1
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80044de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	dce9      	bgt.n	80044ba <prvUnlockQueue+0x16>
 80044e6:	e000      	b.n	80044ea <prvUnlockQueue+0x46>
					break;
 80044e8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	22ff      	movs	r2, #255	; 0xff
 80044ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80044f2:	f7ff fad7 	bl	8003aa4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80044f6:	f7ff faa5 	bl	8003a44 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004500:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004502:	e011      	b.n	8004528 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	691b      	ldr	r3, [r3, #16]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d012      	beq.n	8004532 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	3310      	adds	r3, #16
 8004510:	4618      	mov	r0, r3
 8004512:	f000 fd05 	bl	8004f20 <xTaskRemoveFromEventList>
 8004516:	4603      	mov	r3, r0
 8004518:	2b00      	cmp	r3, #0
 800451a:	d001      	beq.n	8004520 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800451c:	f000 fddc 	bl	80050d8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004520:	7bbb      	ldrb	r3, [r7, #14]
 8004522:	3b01      	subs	r3, #1
 8004524:	b2db      	uxtb	r3, r3
 8004526:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004528:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800452c:	2b00      	cmp	r3, #0
 800452e:	dce9      	bgt.n	8004504 <prvUnlockQueue+0x60>
 8004530:	e000      	b.n	8004534 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004532:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	22ff      	movs	r2, #255	; 0xff
 8004538:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800453c:	f7ff fab2 	bl	8003aa4 <vPortExitCritical>
}
 8004540:	bf00      	nop
 8004542:	3710      	adds	r7, #16
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}

08004548 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b084      	sub	sp, #16
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004550:	f7ff fa78 	bl	8003a44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004558:	2b00      	cmp	r3, #0
 800455a:	d102      	bne.n	8004562 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800455c:	2301      	movs	r3, #1
 800455e:	60fb      	str	r3, [r7, #12]
 8004560:	e001      	b.n	8004566 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004562:	2300      	movs	r3, #0
 8004564:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004566:	f7ff fa9d 	bl	8003aa4 <vPortExitCritical>

	return xReturn;
 800456a:	68fb      	ldr	r3, [r7, #12]
}
 800456c:	4618      	mov	r0, r3
 800456e:	3710      	adds	r7, #16
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}

08004574 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800457c:	f7ff fa62 	bl	8003a44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004588:	429a      	cmp	r2, r3
 800458a:	d102      	bne.n	8004592 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800458c:	2301      	movs	r3, #1
 800458e:	60fb      	str	r3, [r7, #12]
 8004590:	e001      	b.n	8004596 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004592:	2300      	movs	r3, #0
 8004594:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004596:	f7ff fa85 	bl	8003aa4 <vPortExitCritical>

	return xReturn;
 800459a:	68fb      	ldr	r3, [r7, #12]
}
 800459c:	4618      	mov	r0, r3
 800459e:	3710      	adds	r7, #16
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}

080045a4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80045a4:	b480      	push	{r7}
 80045a6:	b085      	sub	sp, #20
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80045ae:	2300      	movs	r3, #0
 80045b0:	60fb      	str	r3, [r7, #12]
 80045b2:	e014      	b.n	80045de <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80045b4:	4a0f      	ldr	r2, [pc, #60]	; (80045f4 <vQueueAddToRegistry+0x50>)
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d10b      	bne.n	80045d8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80045c0:	490c      	ldr	r1, [pc, #48]	; (80045f4 <vQueueAddToRegistry+0x50>)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	683a      	ldr	r2, [r7, #0]
 80045c6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80045ca:	4a0a      	ldr	r2, [pc, #40]	; (80045f4 <vQueueAddToRegistry+0x50>)
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	00db      	lsls	r3, r3, #3
 80045d0:	4413      	add	r3, r2
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80045d6:	e006      	b.n	80045e6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	3301      	adds	r3, #1
 80045dc:	60fb      	str	r3, [r7, #12]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2b07      	cmp	r3, #7
 80045e2:	d9e7      	bls.n	80045b4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80045e4:	bf00      	nop
 80045e6:	bf00      	nop
 80045e8:	3714      	adds	r7, #20
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr
 80045f2:	bf00      	nop
 80045f4:	20004ae0 	.word	0x20004ae0

080045f8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b086      	sub	sp, #24
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	60f8      	str	r0, [r7, #12]
 8004600:	60b9      	str	r1, [r7, #8]
 8004602:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004608:	f7ff fa1c 	bl	8003a44 <vPortEnterCritical>
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004612:	b25b      	sxtb	r3, r3
 8004614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004618:	d103      	bne.n	8004622 <vQueueWaitForMessageRestricted+0x2a>
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	2200      	movs	r2, #0
 800461e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004628:	b25b      	sxtb	r3, r3
 800462a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800462e:	d103      	bne.n	8004638 <vQueueWaitForMessageRestricted+0x40>
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	2200      	movs	r2, #0
 8004634:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004638:	f7ff fa34 	bl	8003aa4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004640:	2b00      	cmp	r3, #0
 8004642:	d106      	bne.n	8004652 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	3324      	adds	r3, #36	; 0x24
 8004648:	687a      	ldr	r2, [r7, #4]
 800464a:	68b9      	ldr	r1, [r7, #8]
 800464c:	4618      	mov	r0, r3
 800464e:	f000 fc3b 	bl	8004ec8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004652:	6978      	ldr	r0, [r7, #20]
 8004654:	f7ff ff26 	bl	80044a4 <prvUnlockQueue>
	}
 8004658:	bf00      	nop
 800465a:	3718      	adds	r7, #24
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}

08004660 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004660:	b580      	push	{r7, lr}
 8004662:	b08e      	sub	sp, #56	; 0x38
 8004664:	af04      	add	r7, sp, #16
 8004666:	60f8      	str	r0, [r7, #12]
 8004668:	60b9      	str	r1, [r7, #8]
 800466a:	607a      	str	r2, [r7, #4]
 800466c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800466e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004670:	2b00      	cmp	r3, #0
 8004672:	d10a      	bne.n	800468a <xTaskCreateStatic+0x2a>
	__asm volatile
 8004674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004678:	f383 8811 	msr	BASEPRI, r3
 800467c:	f3bf 8f6f 	isb	sy
 8004680:	f3bf 8f4f 	dsb	sy
 8004684:	623b      	str	r3, [r7, #32]
}
 8004686:	bf00      	nop
 8004688:	e7fe      	b.n	8004688 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800468a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800468c:	2b00      	cmp	r3, #0
 800468e:	d10a      	bne.n	80046a6 <xTaskCreateStatic+0x46>
	__asm volatile
 8004690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004694:	f383 8811 	msr	BASEPRI, r3
 8004698:	f3bf 8f6f 	isb	sy
 800469c:	f3bf 8f4f 	dsb	sy
 80046a0:	61fb      	str	r3, [r7, #28]
}
 80046a2:	bf00      	nop
 80046a4:	e7fe      	b.n	80046a4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80046a6:	235c      	movs	r3, #92	; 0x5c
 80046a8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	2b5c      	cmp	r3, #92	; 0x5c
 80046ae:	d00a      	beq.n	80046c6 <xTaskCreateStatic+0x66>
	__asm volatile
 80046b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b4:	f383 8811 	msr	BASEPRI, r3
 80046b8:	f3bf 8f6f 	isb	sy
 80046bc:	f3bf 8f4f 	dsb	sy
 80046c0:	61bb      	str	r3, [r7, #24]
}
 80046c2:	bf00      	nop
 80046c4:	e7fe      	b.n	80046c4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80046c6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80046c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d01e      	beq.n	800470c <xTaskCreateStatic+0xac>
 80046ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d01b      	beq.n	800470c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80046d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046d6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80046d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80046dc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80046de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e0:	2202      	movs	r2, #2
 80046e2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80046e6:	2300      	movs	r3, #0
 80046e8:	9303      	str	r3, [sp, #12]
 80046ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ec:	9302      	str	r3, [sp, #8]
 80046ee:	f107 0314 	add.w	r3, r7, #20
 80046f2:	9301      	str	r3, [sp, #4]
 80046f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046f6:	9300      	str	r3, [sp, #0]
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	68b9      	ldr	r1, [r7, #8]
 80046fe:	68f8      	ldr	r0, [r7, #12]
 8004700:	f000 f850 	bl	80047a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004704:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004706:	f000 f8dd 	bl	80048c4 <prvAddNewTaskToReadyList>
 800470a:	e001      	b.n	8004710 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800470c:	2300      	movs	r3, #0
 800470e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004710:	697b      	ldr	r3, [r7, #20]
	}
 8004712:	4618      	mov	r0, r3
 8004714:	3728      	adds	r7, #40	; 0x28
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}

0800471a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800471a:	b580      	push	{r7, lr}
 800471c:	b08c      	sub	sp, #48	; 0x30
 800471e:	af04      	add	r7, sp, #16
 8004720:	60f8      	str	r0, [r7, #12]
 8004722:	60b9      	str	r1, [r7, #8]
 8004724:	603b      	str	r3, [r7, #0]
 8004726:	4613      	mov	r3, r2
 8004728:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800472a:	88fb      	ldrh	r3, [r7, #6]
 800472c:	009b      	lsls	r3, r3, #2
 800472e:	4618      	mov	r0, r3
 8004730:	f7fe fdbe 	bl	80032b0 <pvPortMalloc>
 8004734:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d00e      	beq.n	800475a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800473c:	205c      	movs	r0, #92	; 0x5c
 800473e:	f7fe fdb7 	bl	80032b0 <pvPortMalloc>
 8004742:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004744:	69fb      	ldr	r3, [r7, #28]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d003      	beq.n	8004752 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	697a      	ldr	r2, [r7, #20]
 800474e:	631a      	str	r2, [r3, #48]	; 0x30
 8004750:	e005      	b.n	800475e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004752:	6978      	ldr	r0, [r7, #20]
 8004754:	f7fe fe78 	bl	8003448 <vPortFree>
 8004758:	e001      	b.n	800475e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800475a:	2300      	movs	r3, #0
 800475c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800475e:	69fb      	ldr	r3, [r7, #28]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d017      	beq.n	8004794 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004764:	69fb      	ldr	r3, [r7, #28]
 8004766:	2200      	movs	r2, #0
 8004768:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800476c:	88fa      	ldrh	r2, [r7, #6]
 800476e:	2300      	movs	r3, #0
 8004770:	9303      	str	r3, [sp, #12]
 8004772:	69fb      	ldr	r3, [r7, #28]
 8004774:	9302      	str	r3, [sp, #8]
 8004776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004778:	9301      	str	r3, [sp, #4]
 800477a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800477c:	9300      	str	r3, [sp, #0]
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	68b9      	ldr	r1, [r7, #8]
 8004782:	68f8      	ldr	r0, [r7, #12]
 8004784:	f000 f80e 	bl	80047a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004788:	69f8      	ldr	r0, [r7, #28]
 800478a:	f000 f89b 	bl	80048c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800478e:	2301      	movs	r3, #1
 8004790:	61bb      	str	r3, [r7, #24]
 8004792:	e002      	b.n	800479a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004794:	f04f 33ff 	mov.w	r3, #4294967295
 8004798:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800479a:	69bb      	ldr	r3, [r7, #24]
	}
 800479c:	4618      	mov	r0, r3
 800479e:	3720      	adds	r7, #32
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}

080047a4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b088      	sub	sp, #32
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	60f8      	str	r0, [r7, #12]
 80047ac:	60b9      	str	r1, [r7, #8]
 80047ae:	607a      	str	r2, [r7, #4]
 80047b0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80047b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047b4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	009b      	lsls	r3, r3, #2
 80047ba:	461a      	mov	r2, r3
 80047bc:	21a5      	movs	r1, #165	; 0xa5
 80047be:	f001 fc05 	bl	8005fcc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80047c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80047cc:	3b01      	subs	r3, #1
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	4413      	add	r3, r2
 80047d2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80047d4:	69bb      	ldr	r3, [r7, #24]
 80047d6:	f023 0307 	bic.w	r3, r3, #7
 80047da:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	f003 0307 	and.w	r3, r3, #7
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d00a      	beq.n	80047fc <prvInitialiseNewTask+0x58>
	__asm volatile
 80047e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ea:	f383 8811 	msr	BASEPRI, r3
 80047ee:	f3bf 8f6f 	isb	sy
 80047f2:	f3bf 8f4f 	dsb	sy
 80047f6:	617b      	str	r3, [r7, #20]
}
 80047f8:	bf00      	nop
 80047fa:	e7fe      	b.n	80047fa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d01f      	beq.n	8004842 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004802:	2300      	movs	r3, #0
 8004804:	61fb      	str	r3, [r7, #28]
 8004806:	e012      	b.n	800482e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004808:	68ba      	ldr	r2, [r7, #8]
 800480a:	69fb      	ldr	r3, [r7, #28]
 800480c:	4413      	add	r3, r2
 800480e:	7819      	ldrb	r1, [r3, #0]
 8004810:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004812:	69fb      	ldr	r3, [r7, #28]
 8004814:	4413      	add	r3, r2
 8004816:	3334      	adds	r3, #52	; 0x34
 8004818:	460a      	mov	r2, r1
 800481a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800481c:	68ba      	ldr	r2, [r7, #8]
 800481e:	69fb      	ldr	r3, [r7, #28]
 8004820:	4413      	add	r3, r2
 8004822:	781b      	ldrb	r3, [r3, #0]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d006      	beq.n	8004836 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004828:	69fb      	ldr	r3, [r7, #28]
 800482a:	3301      	adds	r3, #1
 800482c:	61fb      	str	r3, [r7, #28]
 800482e:	69fb      	ldr	r3, [r7, #28]
 8004830:	2b0f      	cmp	r3, #15
 8004832:	d9e9      	bls.n	8004808 <prvInitialiseNewTask+0x64>
 8004834:	e000      	b.n	8004838 <prvInitialiseNewTask+0x94>
			{
				break;
 8004836:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800483a:	2200      	movs	r2, #0
 800483c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004840:	e003      	b.n	800484a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004844:	2200      	movs	r2, #0
 8004846:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800484a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800484c:	2b37      	cmp	r3, #55	; 0x37
 800484e:	d901      	bls.n	8004854 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004850:	2337      	movs	r3, #55	; 0x37
 8004852:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004856:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004858:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800485a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800485c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800485e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004862:	2200      	movs	r2, #0
 8004864:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004868:	3304      	adds	r3, #4
 800486a:	4618      	mov	r0, r3
 800486c:	f7fe ff2a 	bl	80036c4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004872:	3318      	adds	r3, #24
 8004874:	4618      	mov	r0, r3
 8004876:	f7fe ff25 	bl	80036c4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800487a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800487c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800487e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004882:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004888:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800488a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800488c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800488e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004892:	2200      	movs	r2, #0
 8004894:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004898:	2200      	movs	r2, #0
 800489a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800489e:	683a      	ldr	r2, [r7, #0]
 80048a0:	68f9      	ldr	r1, [r7, #12]
 80048a2:	69b8      	ldr	r0, [r7, #24]
 80048a4:	f7fe ffa2 	bl	80037ec <pxPortInitialiseStack>
 80048a8:	4602      	mov	r2, r0
 80048aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ac:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80048ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d002      	beq.n	80048ba <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80048b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80048ba:	bf00      	nop
 80048bc:	3720      	adds	r7, #32
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}
	...

080048c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b082      	sub	sp, #8
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80048cc:	f7ff f8ba 	bl	8003a44 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80048d0:	4b2d      	ldr	r3, [pc, #180]	; (8004988 <prvAddNewTaskToReadyList+0xc4>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	3301      	adds	r3, #1
 80048d6:	4a2c      	ldr	r2, [pc, #176]	; (8004988 <prvAddNewTaskToReadyList+0xc4>)
 80048d8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80048da:	4b2c      	ldr	r3, [pc, #176]	; (800498c <prvAddNewTaskToReadyList+0xc8>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d109      	bne.n	80048f6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80048e2:	4a2a      	ldr	r2, [pc, #168]	; (800498c <prvAddNewTaskToReadyList+0xc8>)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80048e8:	4b27      	ldr	r3, [pc, #156]	; (8004988 <prvAddNewTaskToReadyList+0xc4>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d110      	bne.n	8004912 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80048f0:	f000 fc16 	bl	8005120 <prvInitialiseTaskLists>
 80048f4:	e00d      	b.n	8004912 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80048f6:	4b26      	ldr	r3, [pc, #152]	; (8004990 <prvAddNewTaskToReadyList+0xcc>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d109      	bne.n	8004912 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80048fe:	4b23      	ldr	r3, [pc, #140]	; (800498c <prvAddNewTaskToReadyList+0xc8>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004908:	429a      	cmp	r2, r3
 800490a:	d802      	bhi.n	8004912 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800490c:	4a1f      	ldr	r2, [pc, #124]	; (800498c <prvAddNewTaskToReadyList+0xc8>)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004912:	4b20      	ldr	r3, [pc, #128]	; (8004994 <prvAddNewTaskToReadyList+0xd0>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	3301      	adds	r3, #1
 8004918:	4a1e      	ldr	r2, [pc, #120]	; (8004994 <prvAddNewTaskToReadyList+0xd0>)
 800491a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800491c:	4b1d      	ldr	r3, [pc, #116]	; (8004994 <prvAddNewTaskToReadyList+0xd0>)
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004928:	4b1b      	ldr	r3, [pc, #108]	; (8004998 <prvAddNewTaskToReadyList+0xd4>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	429a      	cmp	r2, r3
 800492e:	d903      	bls.n	8004938 <prvAddNewTaskToReadyList+0x74>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004934:	4a18      	ldr	r2, [pc, #96]	; (8004998 <prvAddNewTaskToReadyList+0xd4>)
 8004936:	6013      	str	r3, [r2, #0]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800493c:	4613      	mov	r3, r2
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	4413      	add	r3, r2
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	4a15      	ldr	r2, [pc, #84]	; (800499c <prvAddNewTaskToReadyList+0xd8>)
 8004946:	441a      	add	r2, r3
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	3304      	adds	r3, #4
 800494c:	4619      	mov	r1, r3
 800494e:	4610      	mov	r0, r2
 8004950:	f7fe fec5 	bl	80036de <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004954:	f7ff f8a6 	bl	8003aa4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004958:	4b0d      	ldr	r3, [pc, #52]	; (8004990 <prvAddNewTaskToReadyList+0xcc>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d00e      	beq.n	800497e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004960:	4b0a      	ldr	r3, [pc, #40]	; (800498c <prvAddNewTaskToReadyList+0xc8>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800496a:	429a      	cmp	r2, r3
 800496c:	d207      	bcs.n	800497e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800496e:	4b0c      	ldr	r3, [pc, #48]	; (80049a0 <prvAddNewTaskToReadyList+0xdc>)
 8004970:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004974:	601a      	str	r2, [r3, #0]
 8004976:	f3bf 8f4f 	dsb	sy
 800497a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800497e:	bf00      	nop
 8004980:	3708      	adds	r7, #8
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
 8004986:	bf00      	nop
 8004988:	2000484c 	.word	0x2000484c
 800498c:	20004378 	.word	0x20004378
 8004990:	20004858 	.word	0x20004858
 8004994:	20004868 	.word	0x20004868
 8004998:	20004854 	.word	0x20004854
 800499c:	2000437c 	.word	0x2000437c
 80049a0:	e000ed04 	.word	0xe000ed04

080049a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b084      	sub	sp, #16
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80049ac:	2300      	movs	r3, #0
 80049ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d017      	beq.n	80049e6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80049b6:	4b13      	ldr	r3, [pc, #76]	; (8004a04 <vTaskDelay+0x60>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d00a      	beq.n	80049d4 <vTaskDelay+0x30>
	__asm volatile
 80049be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c2:	f383 8811 	msr	BASEPRI, r3
 80049c6:	f3bf 8f6f 	isb	sy
 80049ca:	f3bf 8f4f 	dsb	sy
 80049ce:	60bb      	str	r3, [r7, #8]
}
 80049d0:	bf00      	nop
 80049d2:	e7fe      	b.n	80049d2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80049d4:	f000 f880 	bl	8004ad8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80049d8:	2100      	movs	r1, #0
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f000 fcea 	bl	80053b4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80049e0:	f000 f888 	bl	8004af4 <xTaskResumeAll>
 80049e4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d107      	bne.n	80049fc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80049ec:	4b06      	ldr	r3, [pc, #24]	; (8004a08 <vTaskDelay+0x64>)
 80049ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049f2:	601a      	str	r2, [r3, #0]
 80049f4:	f3bf 8f4f 	dsb	sy
 80049f8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80049fc:	bf00      	nop
 80049fe:	3710      	adds	r7, #16
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}
 8004a04:	20004874 	.word	0x20004874
 8004a08:	e000ed04 	.word	0xe000ed04

08004a0c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b08a      	sub	sp, #40	; 0x28
 8004a10:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004a12:	2300      	movs	r3, #0
 8004a14:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004a16:	2300      	movs	r3, #0
 8004a18:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004a1a:	463a      	mov	r2, r7
 8004a1c:	1d39      	adds	r1, r7, #4
 8004a1e:	f107 0308 	add.w	r3, r7, #8
 8004a22:	4618      	mov	r0, r3
 8004a24:	f7fe fc10 	bl	8003248 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004a28:	6839      	ldr	r1, [r7, #0]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	68ba      	ldr	r2, [r7, #8]
 8004a2e:	9202      	str	r2, [sp, #8]
 8004a30:	9301      	str	r3, [sp, #4]
 8004a32:	2300      	movs	r3, #0
 8004a34:	9300      	str	r3, [sp, #0]
 8004a36:	2300      	movs	r3, #0
 8004a38:	460a      	mov	r2, r1
 8004a3a:	4921      	ldr	r1, [pc, #132]	; (8004ac0 <vTaskStartScheduler+0xb4>)
 8004a3c:	4821      	ldr	r0, [pc, #132]	; (8004ac4 <vTaskStartScheduler+0xb8>)
 8004a3e:	f7ff fe0f 	bl	8004660 <xTaskCreateStatic>
 8004a42:	4603      	mov	r3, r0
 8004a44:	4a20      	ldr	r2, [pc, #128]	; (8004ac8 <vTaskStartScheduler+0xbc>)
 8004a46:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004a48:	4b1f      	ldr	r3, [pc, #124]	; (8004ac8 <vTaskStartScheduler+0xbc>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d002      	beq.n	8004a56 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004a50:	2301      	movs	r3, #1
 8004a52:	617b      	str	r3, [r7, #20]
 8004a54:	e001      	b.n	8004a5a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004a56:	2300      	movs	r3, #0
 8004a58:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d102      	bne.n	8004a66 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004a60:	f000 fcfc 	bl	800545c <xTimerCreateTimerTask>
 8004a64:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d116      	bne.n	8004a9a <vTaskStartScheduler+0x8e>
	__asm volatile
 8004a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a70:	f383 8811 	msr	BASEPRI, r3
 8004a74:	f3bf 8f6f 	isb	sy
 8004a78:	f3bf 8f4f 	dsb	sy
 8004a7c:	613b      	str	r3, [r7, #16]
}
 8004a7e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004a80:	4b12      	ldr	r3, [pc, #72]	; (8004acc <vTaskStartScheduler+0xc0>)
 8004a82:	f04f 32ff 	mov.w	r2, #4294967295
 8004a86:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004a88:	4b11      	ldr	r3, [pc, #68]	; (8004ad0 <vTaskStartScheduler+0xc4>)
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004a8e:	4b11      	ldr	r3, [pc, #68]	; (8004ad4 <vTaskStartScheduler+0xc8>)
 8004a90:	2200      	movs	r2, #0
 8004a92:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004a94:	f7fe ff34 	bl	8003900 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004a98:	e00e      	b.n	8004ab8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aa0:	d10a      	bne.n	8004ab8 <vTaskStartScheduler+0xac>
	__asm volatile
 8004aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa6:	f383 8811 	msr	BASEPRI, r3
 8004aaa:	f3bf 8f6f 	isb	sy
 8004aae:	f3bf 8f4f 	dsb	sy
 8004ab2:	60fb      	str	r3, [r7, #12]
}
 8004ab4:	bf00      	nop
 8004ab6:	e7fe      	b.n	8004ab6 <vTaskStartScheduler+0xaa>
}
 8004ab8:	bf00      	nop
 8004aba:	3718      	adds	r7, #24
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}
 8004ac0:	0800689c 	.word	0x0800689c
 8004ac4:	080050f1 	.word	0x080050f1
 8004ac8:	20004870 	.word	0x20004870
 8004acc:	2000486c 	.word	0x2000486c
 8004ad0:	20004858 	.word	0x20004858
 8004ad4:	20004850 	.word	0x20004850

08004ad8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004ad8:	b480      	push	{r7}
 8004ada:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004adc:	4b04      	ldr	r3, [pc, #16]	; (8004af0 <vTaskSuspendAll+0x18>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	3301      	adds	r3, #1
 8004ae2:	4a03      	ldr	r2, [pc, #12]	; (8004af0 <vTaskSuspendAll+0x18>)
 8004ae4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004ae6:	bf00      	nop
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr
 8004af0:	20004874 	.word	0x20004874

08004af4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b084      	sub	sp, #16
 8004af8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004afa:	2300      	movs	r3, #0
 8004afc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004afe:	2300      	movs	r3, #0
 8004b00:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004b02:	4b42      	ldr	r3, [pc, #264]	; (8004c0c <xTaskResumeAll+0x118>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d10a      	bne.n	8004b20 <xTaskResumeAll+0x2c>
	__asm volatile
 8004b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b0e:	f383 8811 	msr	BASEPRI, r3
 8004b12:	f3bf 8f6f 	isb	sy
 8004b16:	f3bf 8f4f 	dsb	sy
 8004b1a:	603b      	str	r3, [r7, #0]
}
 8004b1c:	bf00      	nop
 8004b1e:	e7fe      	b.n	8004b1e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004b20:	f7fe ff90 	bl	8003a44 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004b24:	4b39      	ldr	r3, [pc, #228]	; (8004c0c <xTaskResumeAll+0x118>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	3b01      	subs	r3, #1
 8004b2a:	4a38      	ldr	r2, [pc, #224]	; (8004c0c <xTaskResumeAll+0x118>)
 8004b2c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b2e:	4b37      	ldr	r3, [pc, #220]	; (8004c0c <xTaskResumeAll+0x118>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d162      	bne.n	8004bfc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004b36:	4b36      	ldr	r3, [pc, #216]	; (8004c10 <xTaskResumeAll+0x11c>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d05e      	beq.n	8004bfc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004b3e:	e02f      	b.n	8004ba0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b40:	4b34      	ldr	r3, [pc, #208]	; (8004c14 <xTaskResumeAll+0x120>)
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	68db      	ldr	r3, [r3, #12]
 8004b46:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	3318      	adds	r3, #24
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f7fe fe23 	bl	8003798 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	3304      	adds	r3, #4
 8004b56:	4618      	mov	r0, r3
 8004b58:	f7fe fe1e 	bl	8003798 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b60:	4b2d      	ldr	r3, [pc, #180]	; (8004c18 <xTaskResumeAll+0x124>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d903      	bls.n	8004b70 <xTaskResumeAll+0x7c>
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b6c:	4a2a      	ldr	r2, [pc, #168]	; (8004c18 <xTaskResumeAll+0x124>)
 8004b6e:	6013      	str	r3, [r2, #0]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b74:	4613      	mov	r3, r2
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	4413      	add	r3, r2
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	4a27      	ldr	r2, [pc, #156]	; (8004c1c <xTaskResumeAll+0x128>)
 8004b7e:	441a      	add	r2, r3
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	3304      	adds	r3, #4
 8004b84:	4619      	mov	r1, r3
 8004b86:	4610      	mov	r0, r2
 8004b88:	f7fe fda9 	bl	80036de <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b90:	4b23      	ldr	r3, [pc, #140]	; (8004c20 <xTaskResumeAll+0x12c>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d302      	bcc.n	8004ba0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004b9a:	4b22      	ldr	r3, [pc, #136]	; (8004c24 <xTaskResumeAll+0x130>)
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004ba0:	4b1c      	ldr	r3, [pc, #112]	; (8004c14 <xTaskResumeAll+0x120>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d1cb      	bne.n	8004b40 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d001      	beq.n	8004bb2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004bae:	f000 fb55 	bl	800525c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004bb2:	4b1d      	ldr	r3, [pc, #116]	; (8004c28 <xTaskResumeAll+0x134>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d010      	beq.n	8004be0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004bbe:	f000 f847 	bl	8004c50 <xTaskIncrementTick>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d002      	beq.n	8004bce <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004bc8:	4b16      	ldr	r3, [pc, #88]	; (8004c24 <xTaskResumeAll+0x130>)
 8004bca:	2201      	movs	r2, #1
 8004bcc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	3b01      	subs	r3, #1
 8004bd2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d1f1      	bne.n	8004bbe <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004bda:	4b13      	ldr	r3, [pc, #76]	; (8004c28 <xTaskResumeAll+0x134>)
 8004bdc:	2200      	movs	r2, #0
 8004bde:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004be0:	4b10      	ldr	r3, [pc, #64]	; (8004c24 <xTaskResumeAll+0x130>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d009      	beq.n	8004bfc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004be8:	2301      	movs	r3, #1
 8004bea:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004bec:	4b0f      	ldr	r3, [pc, #60]	; (8004c2c <xTaskResumeAll+0x138>)
 8004bee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bf2:	601a      	str	r2, [r3, #0]
 8004bf4:	f3bf 8f4f 	dsb	sy
 8004bf8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004bfc:	f7fe ff52 	bl	8003aa4 <vPortExitCritical>

	return xAlreadyYielded;
 8004c00:	68bb      	ldr	r3, [r7, #8]
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3710      	adds	r7, #16
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}
 8004c0a:	bf00      	nop
 8004c0c:	20004874 	.word	0x20004874
 8004c10:	2000484c 	.word	0x2000484c
 8004c14:	2000480c 	.word	0x2000480c
 8004c18:	20004854 	.word	0x20004854
 8004c1c:	2000437c 	.word	0x2000437c
 8004c20:	20004378 	.word	0x20004378
 8004c24:	20004860 	.word	0x20004860
 8004c28:	2000485c 	.word	0x2000485c
 8004c2c:	e000ed04 	.word	0xe000ed04

08004c30 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004c30:	b480      	push	{r7}
 8004c32:	b083      	sub	sp, #12
 8004c34:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004c36:	4b05      	ldr	r3, [pc, #20]	; (8004c4c <xTaskGetTickCount+0x1c>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004c3c:	687b      	ldr	r3, [r7, #4]
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	370c      	adds	r7, #12
 8004c42:	46bd      	mov	sp, r7
 8004c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c48:	4770      	bx	lr
 8004c4a:	bf00      	nop
 8004c4c:	20004850 	.word	0x20004850

08004c50 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b086      	sub	sp, #24
 8004c54:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004c56:	2300      	movs	r3, #0
 8004c58:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c5a:	4b4f      	ldr	r3, [pc, #316]	; (8004d98 <xTaskIncrementTick+0x148>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	f040 808f 	bne.w	8004d82 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004c64:	4b4d      	ldr	r3, [pc, #308]	; (8004d9c <xTaskIncrementTick+0x14c>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	3301      	adds	r3, #1
 8004c6a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004c6c:	4a4b      	ldr	r2, [pc, #300]	; (8004d9c <xTaskIncrementTick+0x14c>)
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d120      	bne.n	8004cba <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004c78:	4b49      	ldr	r3, [pc, #292]	; (8004da0 <xTaskIncrementTick+0x150>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d00a      	beq.n	8004c98 <xTaskIncrementTick+0x48>
	__asm volatile
 8004c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c86:	f383 8811 	msr	BASEPRI, r3
 8004c8a:	f3bf 8f6f 	isb	sy
 8004c8e:	f3bf 8f4f 	dsb	sy
 8004c92:	603b      	str	r3, [r7, #0]
}
 8004c94:	bf00      	nop
 8004c96:	e7fe      	b.n	8004c96 <xTaskIncrementTick+0x46>
 8004c98:	4b41      	ldr	r3, [pc, #260]	; (8004da0 <xTaskIncrementTick+0x150>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	60fb      	str	r3, [r7, #12]
 8004c9e:	4b41      	ldr	r3, [pc, #260]	; (8004da4 <xTaskIncrementTick+0x154>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a3f      	ldr	r2, [pc, #252]	; (8004da0 <xTaskIncrementTick+0x150>)
 8004ca4:	6013      	str	r3, [r2, #0]
 8004ca6:	4a3f      	ldr	r2, [pc, #252]	; (8004da4 <xTaskIncrementTick+0x154>)
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	6013      	str	r3, [r2, #0]
 8004cac:	4b3e      	ldr	r3, [pc, #248]	; (8004da8 <xTaskIncrementTick+0x158>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	3301      	adds	r3, #1
 8004cb2:	4a3d      	ldr	r2, [pc, #244]	; (8004da8 <xTaskIncrementTick+0x158>)
 8004cb4:	6013      	str	r3, [r2, #0]
 8004cb6:	f000 fad1 	bl	800525c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004cba:	4b3c      	ldr	r3, [pc, #240]	; (8004dac <xTaskIncrementTick+0x15c>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	693a      	ldr	r2, [r7, #16]
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d349      	bcc.n	8004d58 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004cc4:	4b36      	ldr	r3, [pc, #216]	; (8004da0 <xTaskIncrementTick+0x150>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d104      	bne.n	8004cd8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004cce:	4b37      	ldr	r3, [pc, #220]	; (8004dac <xTaskIncrementTick+0x15c>)
 8004cd0:	f04f 32ff 	mov.w	r2, #4294967295
 8004cd4:	601a      	str	r2, [r3, #0]
					break;
 8004cd6:	e03f      	b.n	8004d58 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cd8:	4b31      	ldr	r3, [pc, #196]	; (8004da0 <xTaskIncrementTick+0x150>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004ce8:	693a      	ldr	r2, [r7, #16]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d203      	bcs.n	8004cf8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004cf0:	4a2e      	ldr	r2, [pc, #184]	; (8004dac <xTaskIncrementTick+0x15c>)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004cf6:	e02f      	b.n	8004d58 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	3304      	adds	r3, #4
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f7fe fd4b 	bl	8003798 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d004      	beq.n	8004d14 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	3318      	adds	r3, #24
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f7fe fd42 	bl	8003798 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d18:	4b25      	ldr	r3, [pc, #148]	; (8004db0 <xTaskIncrementTick+0x160>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d903      	bls.n	8004d28 <xTaskIncrementTick+0xd8>
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d24:	4a22      	ldr	r2, [pc, #136]	; (8004db0 <xTaskIncrementTick+0x160>)
 8004d26:	6013      	str	r3, [r2, #0]
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	4413      	add	r3, r2
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	4a1f      	ldr	r2, [pc, #124]	; (8004db4 <xTaskIncrementTick+0x164>)
 8004d36:	441a      	add	r2, r3
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	3304      	adds	r3, #4
 8004d3c:	4619      	mov	r1, r3
 8004d3e:	4610      	mov	r0, r2
 8004d40:	f7fe fccd 	bl	80036de <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d48:	4b1b      	ldr	r3, [pc, #108]	; (8004db8 <xTaskIncrementTick+0x168>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d3b8      	bcc.n	8004cc4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004d52:	2301      	movs	r3, #1
 8004d54:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d56:	e7b5      	b.n	8004cc4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004d58:	4b17      	ldr	r3, [pc, #92]	; (8004db8 <xTaskIncrementTick+0x168>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d5e:	4915      	ldr	r1, [pc, #84]	; (8004db4 <xTaskIncrementTick+0x164>)
 8004d60:	4613      	mov	r3, r2
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	4413      	add	r3, r2
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	440b      	add	r3, r1
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d901      	bls.n	8004d74 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004d70:	2301      	movs	r3, #1
 8004d72:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004d74:	4b11      	ldr	r3, [pc, #68]	; (8004dbc <xTaskIncrementTick+0x16c>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d007      	beq.n	8004d8c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	617b      	str	r3, [r7, #20]
 8004d80:	e004      	b.n	8004d8c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004d82:	4b0f      	ldr	r3, [pc, #60]	; (8004dc0 <xTaskIncrementTick+0x170>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	3301      	adds	r3, #1
 8004d88:	4a0d      	ldr	r2, [pc, #52]	; (8004dc0 <xTaskIncrementTick+0x170>)
 8004d8a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004d8c:	697b      	ldr	r3, [r7, #20]
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3718      	adds	r7, #24
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	bf00      	nop
 8004d98:	20004874 	.word	0x20004874
 8004d9c:	20004850 	.word	0x20004850
 8004da0:	20004804 	.word	0x20004804
 8004da4:	20004808 	.word	0x20004808
 8004da8:	20004864 	.word	0x20004864
 8004dac:	2000486c 	.word	0x2000486c
 8004db0:	20004854 	.word	0x20004854
 8004db4:	2000437c 	.word	0x2000437c
 8004db8:	20004378 	.word	0x20004378
 8004dbc:	20004860 	.word	0x20004860
 8004dc0:	2000485c 	.word	0x2000485c

08004dc4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b085      	sub	sp, #20
 8004dc8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004dca:	4b28      	ldr	r3, [pc, #160]	; (8004e6c <vTaskSwitchContext+0xa8>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d003      	beq.n	8004dda <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004dd2:	4b27      	ldr	r3, [pc, #156]	; (8004e70 <vTaskSwitchContext+0xac>)
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004dd8:	e041      	b.n	8004e5e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8004dda:	4b25      	ldr	r3, [pc, #148]	; (8004e70 <vTaskSwitchContext+0xac>)
 8004ddc:	2200      	movs	r2, #0
 8004dde:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004de0:	4b24      	ldr	r3, [pc, #144]	; (8004e74 <vTaskSwitchContext+0xb0>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	60fb      	str	r3, [r7, #12]
 8004de6:	e010      	b.n	8004e0a <vTaskSwitchContext+0x46>
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d10a      	bne.n	8004e04 <vTaskSwitchContext+0x40>
	__asm volatile
 8004dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df2:	f383 8811 	msr	BASEPRI, r3
 8004df6:	f3bf 8f6f 	isb	sy
 8004dfa:	f3bf 8f4f 	dsb	sy
 8004dfe:	607b      	str	r3, [r7, #4]
}
 8004e00:	bf00      	nop
 8004e02:	e7fe      	b.n	8004e02 <vTaskSwitchContext+0x3e>
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	3b01      	subs	r3, #1
 8004e08:	60fb      	str	r3, [r7, #12]
 8004e0a:	491b      	ldr	r1, [pc, #108]	; (8004e78 <vTaskSwitchContext+0xb4>)
 8004e0c:	68fa      	ldr	r2, [r7, #12]
 8004e0e:	4613      	mov	r3, r2
 8004e10:	009b      	lsls	r3, r3, #2
 8004e12:	4413      	add	r3, r2
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	440b      	add	r3, r1
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d0e4      	beq.n	8004de8 <vTaskSwitchContext+0x24>
 8004e1e:	68fa      	ldr	r2, [r7, #12]
 8004e20:	4613      	mov	r3, r2
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	4413      	add	r3, r2
 8004e26:	009b      	lsls	r3, r3, #2
 8004e28:	4a13      	ldr	r2, [pc, #76]	; (8004e78 <vTaskSwitchContext+0xb4>)
 8004e2a:	4413      	add	r3, r2
 8004e2c:	60bb      	str	r3, [r7, #8]
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	685a      	ldr	r2, [r3, #4]
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	605a      	str	r2, [r3, #4]
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	685a      	ldr	r2, [r3, #4]
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	3308      	adds	r3, #8
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d104      	bne.n	8004e4e <vTaskSwitchContext+0x8a>
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	685a      	ldr	r2, [r3, #4]
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	605a      	str	r2, [r3, #4]
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	4a09      	ldr	r2, [pc, #36]	; (8004e7c <vTaskSwitchContext+0xb8>)
 8004e56:	6013      	str	r3, [r2, #0]
 8004e58:	4a06      	ldr	r2, [pc, #24]	; (8004e74 <vTaskSwitchContext+0xb0>)
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	6013      	str	r3, [r2, #0]
}
 8004e5e:	bf00      	nop
 8004e60:	3714      	adds	r7, #20
 8004e62:	46bd      	mov	sp, r7
 8004e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e68:	4770      	bx	lr
 8004e6a:	bf00      	nop
 8004e6c:	20004874 	.word	0x20004874
 8004e70:	20004860 	.word	0x20004860
 8004e74:	20004854 	.word	0x20004854
 8004e78:	2000437c 	.word	0x2000437c
 8004e7c:	20004378 	.word	0x20004378

08004e80 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b084      	sub	sp, #16
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
 8004e88:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d10a      	bne.n	8004ea6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e94:	f383 8811 	msr	BASEPRI, r3
 8004e98:	f3bf 8f6f 	isb	sy
 8004e9c:	f3bf 8f4f 	dsb	sy
 8004ea0:	60fb      	str	r3, [r7, #12]
}
 8004ea2:	bf00      	nop
 8004ea4:	e7fe      	b.n	8004ea4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004ea6:	4b07      	ldr	r3, [pc, #28]	; (8004ec4 <vTaskPlaceOnEventList+0x44>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	3318      	adds	r3, #24
 8004eac:	4619      	mov	r1, r3
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f7fe fc39 	bl	8003726 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004eb4:	2101      	movs	r1, #1
 8004eb6:	6838      	ldr	r0, [r7, #0]
 8004eb8:	f000 fa7c 	bl	80053b4 <prvAddCurrentTaskToDelayedList>
}
 8004ebc:	bf00      	nop
 8004ebe:	3710      	adds	r7, #16
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}
 8004ec4:	20004378 	.word	0x20004378

08004ec8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b086      	sub	sp, #24
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	60f8      	str	r0, [r7, #12]
 8004ed0:	60b9      	str	r1, [r7, #8]
 8004ed2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d10a      	bne.n	8004ef0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ede:	f383 8811 	msr	BASEPRI, r3
 8004ee2:	f3bf 8f6f 	isb	sy
 8004ee6:	f3bf 8f4f 	dsb	sy
 8004eea:	617b      	str	r3, [r7, #20]
}
 8004eec:	bf00      	nop
 8004eee:	e7fe      	b.n	8004eee <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004ef0:	4b0a      	ldr	r3, [pc, #40]	; (8004f1c <vTaskPlaceOnEventListRestricted+0x54>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	3318      	adds	r3, #24
 8004ef6:	4619      	mov	r1, r3
 8004ef8:	68f8      	ldr	r0, [r7, #12]
 8004efa:	f7fe fbf0 	bl	80036de <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d002      	beq.n	8004f0a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004f04:	f04f 33ff 	mov.w	r3, #4294967295
 8004f08:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004f0a:	6879      	ldr	r1, [r7, #4]
 8004f0c:	68b8      	ldr	r0, [r7, #8]
 8004f0e:	f000 fa51 	bl	80053b4 <prvAddCurrentTaskToDelayedList>
	}
 8004f12:	bf00      	nop
 8004f14:	3718      	adds	r7, #24
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}
 8004f1a:	bf00      	nop
 8004f1c:	20004378 	.word	0x20004378

08004f20 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b086      	sub	sp, #24
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	68db      	ldr	r3, [r3, #12]
 8004f2e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d10a      	bne.n	8004f4c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f3a:	f383 8811 	msr	BASEPRI, r3
 8004f3e:	f3bf 8f6f 	isb	sy
 8004f42:	f3bf 8f4f 	dsb	sy
 8004f46:	60fb      	str	r3, [r7, #12]
}
 8004f48:	bf00      	nop
 8004f4a:	e7fe      	b.n	8004f4a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	3318      	adds	r3, #24
 8004f50:	4618      	mov	r0, r3
 8004f52:	f7fe fc21 	bl	8003798 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f56:	4b1e      	ldr	r3, [pc, #120]	; (8004fd0 <xTaskRemoveFromEventList+0xb0>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d11d      	bne.n	8004f9a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	3304      	adds	r3, #4
 8004f62:	4618      	mov	r0, r3
 8004f64:	f7fe fc18 	bl	8003798 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f6c:	4b19      	ldr	r3, [pc, #100]	; (8004fd4 <xTaskRemoveFromEventList+0xb4>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d903      	bls.n	8004f7c <xTaskRemoveFromEventList+0x5c>
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f78:	4a16      	ldr	r2, [pc, #88]	; (8004fd4 <xTaskRemoveFromEventList+0xb4>)
 8004f7a:	6013      	str	r3, [r2, #0]
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f80:	4613      	mov	r3, r2
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	4413      	add	r3, r2
 8004f86:	009b      	lsls	r3, r3, #2
 8004f88:	4a13      	ldr	r2, [pc, #76]	; (8004fd8 <xTaskRemoveFromEventList+0xb8>)
 8004f8a:	441a      	add	r2, r3
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	3304      	adds	r3, #4
 8004f90:	4619      	mov	r1, r3
 8004f92:	4610      	mov	r0, r2
 8004f94:	f7fe fba3 	bl	80036de <vListInsertEnd>
 8004f98:	e005      	b.n	8004fa6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	3318      	adds	r3, #24
 8004f9e:	4619      	mov	r1, r3
 8004fa0:	480e      	ldr	r0, [pc, #56]	; (8004fdc <xTaskRemoveFromEventList+0xbc>)
 8004fa2:	f7fe fb9c 	bl	80036de <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004faa:	4b0d      	ldr	r3, [pc, #52]	; (8004fe0 <xTaskRemoveFromEventList+0xc0>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d905      	bls.n	8004fc0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004fb8:	4b0a      	ldr	r3, [pc, #40]	; (8004fe4 <xTaskRemoveFromEventList+0xc4>)
 8004fba:	2201      	movs	r2, #1
 8004fbc:	601a      	str	r2, [r3, #0]
 8004fbe:	e001      	b.n	8004fc4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004fc4:	697b      	ldr	r3, [r7, #20]
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3718      	adds	r7, #24
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	bf00      	nop
 8004fd0:	20004874 	.word	0x20004874
 8004fd4:	20004854 	.word	0x20004854
 8004fd8:	2000437c 	.word	0x2000437c
 8004fdc:	2000480c 	.word	0x2000480c
 8004fe0:	20004378 	.word	0x20004378
 8004fe4:	20004860 	.word	0x20004860

08004fe8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b083      	sub	sp, #12
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004ff0:	4b06      	ldr	r3, [pc, #24]	; (800500c <vTaskInternalSetTimeOutState+0x24>)
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004ff8:	4b05      	ldr	r3, [pc, #20]	; (8005010 <vTaskInternalSetTimeOutState+0x28>)
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	605a      	str	r2, [r3, #4]
}
 8005000:	bf00      	nop
 8005002:	370c      	adds	r7, #12
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr
 800500c:	20004864 	.word	0x20004864
 8005010:	20004850 	.word	0x20004850

08005014 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b088      	sub	sp, #32
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d10a      	bne.n	800503a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005028:	f383 8811 	msr	BASEPRI, r3
 800502c:	f3bf 8f6f 	isb	sy
 8005030:	f3bf 8f4f 	dsb	sy
 8005034:	613b      	str	r3, [r7, #16]
}
 8005036:	bf00      	nop
 8005038:	e7fe      	b.n	8005038 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d10a      	bne.n	8005056 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005044:	f383 8811 	msr	BASEPRI, r3
 8005048:	f3bf 8f6f 	isb	sy
 800504c:	f3bf 8f4f 	dsb	sy
 8005050:	60fb      	str	r3, [r7, #12]
}
 8005052:	bf00      	nop
 8005054:	e7fe      	b.n	8005054 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005056:	f7fe fcf5 	bl	8003a44 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800505a:	4b1d      	ldr	r3, [pc, #116]	; (80050d0 <xTaskCheckForTimeOut+0xbc>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	69ba      	ldr	r2, [r7, #24]
 8005066:	1ad3      	subs	r3, r2, r3
 8005068:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005072:	d102      	bne.n	800507a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005074:	2300      	movs	r3, #0
 8005076:	61fb      	str	r3, [r7, #28]
 8005078:	e023      	b.n	80050c2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	4b15      	ldr	r3, [pc, #84]	; (80050d4 <xTaskCheckForTimeOut+0xc0>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	429a      	cmp	r2, r3
 8005084:	d007      	beq.n	8005096 <xTaskCheckForTimeOut+0x82>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	69ba      	ldr	r2, [r7, #24]
 800508c:	429a      	cmp	r2, r3
 800508e:	d302      	bcc.n	8005096 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005090:	2301      	movs	r3, #1
 8005092:	61fb      	str	r3, [r7, #28]
 8005094:	e015      	b.n	80050c2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	697a      	ldr	r2, [r7, #20]
 800509c:	429a      	cmp	r2, r3
 800509e:	d20b      	bcs.n	80050b8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	1ad2      	subs	r2, r2, r3
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f7ff ff9b 	bl	8004fe8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80050b2:	2300      	movs	r3, #0
 80050b4:	61fb      	str	r3, [r7, #28]
 80050b6:	e004      	b.n	80050c2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	2200      	movs	r2, #0
 80050bc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80050be:	2301      	movs	r3, #1
 80050c0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80050c2:	f7fe fcef 	bl	8003aa4 <vPortExitCritical>

	return xReturn;
 80050c6:	69fb      	ldr	r3, [r7, #28]
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3720      	adds	r7, #32
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}
 80050d0:	20004850 	.word	0x20004850
 80050d4:	20004864 	.word	0x20004864

080050d8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80050d8:	b480      	push	{r7}
 80050da:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80050dc:	4b03      	ldr	r3, [pc, #12]	; (80050ec <vTaskMissedYield+0x14>)
 80050de:	2201      	movs	r2, #1
 80050e0:	601a      	str	r2, [r3, #0]
}
 80050e2:	bf00      	nop
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr
 80050ec:	20004860 	.word	0x20004860

080050f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b082      	sub	sp, #8
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80050f8:	f000 f852 	bl	80051a0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80050fc:	4b06      	ldr	r3, [pc, #24]	; (8005118 <prvIdleTask+0x28>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	2b01      	cmp	r3, #1
 8005102:	d9f9      	bls.n	80050f8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005104:	4b05      	ldr	r3, [pc, #20]	; (800511c <prvIdleTask+0x2c>)
 8005106:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800510a:	601a      	str	r2, [r3, #0]
 800510c:	f3bf 8f4f 	dsb	sy
 8005110:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005114:	e7f0      	b.n	80050f8 <prvIdleTask+0x8>
 8005116:	bf00      	nop
 8005118:	2000437c 	.word	0x2000437c
 800511c:	e000ed04 	.word	0xe000ed04

08005120 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b082      	sub	sp, #8
 8005124:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005126:	2300      	movs	r3, #0
 8005128:	607b      	str	r3, [r7, #4]
 800512a:	e00c      	b.n	8005146 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800512c:	687a      	ldr	r2, [r7, #4]
 800512e:	4613      	mov	r3, r2
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	4413      	add	r3, r2
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	4a12      	ldr	r2, [pc, #72]	; (8005180 <prvInitialiseTaskLists+0x60>)
 8005138:	4413      	add	r3, r2
 800513a:	4618      	mov	r0, r3
 800513c:	f7fe faa2 	bl	8003684 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	3301      	adds	r3, #1
 8005144:	607b      	str	r3, [r7, #4]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2b37      	cmp	r3, #55	; 0x37
 800514a:	d9ef      	bls.n	800512c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800514c:	480d      	ldr	r0, [pc, #52]	; (8005184 <prvInitialiseTaskLists+0x64>)
 800514e:	f7fe fa99 	bl	8003684 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005152:	480d      	ldr	r0, [pc, #52]	; (8005188 <prvInitialiseTaskLists+0x68>)
 8005154:	f7fe fa96 	bl	8003684 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005158:	480c      	ldr	r0, [pc, #48]	; (800518c <prvInitialiseTaskLists+0x6c>)
 800515a:	f7fe fa93 	bl	8003684 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800515e:	480c      	ldr	r0, [pc, #48]	; (8005190 <prvInitialiseTaskLists+0x70>)
 8005160:	f7fe fa90 	bl	8003684 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005164:	480b      	ldr	r0, [pc, #44]	; (8005194 <prvInitialiseTaskLists+0x74>)
 8005166:	f7fe fa8d 	bl	8003684 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800516a:	4b0b      	ldr	r3, [pc, #44]	; (8005198 <prvInitialiseTaskLists+0x78>)
 800516c:	4a05      	ldr	r2, [pc, #20]	; (8005184 <prvInitialiseTaskLists+0x64>)
 800516e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005170:	4b0a      	ldr	r3, [pc, #40]	; (800519c <prvInitialiseTaskLists+0x7c>)
 8005172:	4a05      	ldr	r2, [pc, #20]	; (8005188 <prvInitialiseTaskLists+0x68>)
 8005174:	601a      	str	r2, [r3, #0]
}
 8005176:	bf00      	nop
 8005178:	3708      	adds	r7, #8
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
 800517e:	bf00      	nop
 8005180:	2000437c 	.word	0x2000437c
 8005184:	200047dc 	.word	0x200047dc
 8005188:	200047f0 	.word	0x200047f0
 800518c:	2000480c 	.word	0x2000480c
 8005190:	20004820 	.word	0x20004820
 8005194:	20004838 	.word	0x20004838
 8005198:	20004804 	.word	0x20004804
 800519c:	20004808 	.word	0x20004808

080051a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b082      	sub	sp, #8
 80051a4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80051a6:	e019      	b.n	80051dc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80051a8:	f7fe fc4c 	bl	8003a44 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051ac:	4b10      	ldr	r3, [pc, #64]	; (80051f0 <prvCheckTasksWaitingTermination+0x50>)
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	68db      	ldr	r3, [r3, #12]
 80051b2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	3304      	adds	r3, #4
 80051b8:	4618      	mov	r0, r3
 80051ba:	f7fe faed 	bl	8003798 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80051be:	4b0d      	ldr	r3, [pc, #52]	; (80051f4 <prvCheckTasksWaitingTermination+0x54>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	3b01      	subs	r3, #1
 80051c4:	4a0b      	ldr	r2, [pc, #44]	; (80051f4 <prvCheckTasksWaitingTermination+0x54>)
 80051c6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80051c8:	4b0b      	ldr	r3, [pc, #44]	; (80051f8 <prvCheckTasksWaitingTermination+0x58>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	3b01      	subs	r3, #1
 80051ce:	4a0a      	ldr	r2, [pc, #40]	; (80051f8 <prvCheckTasksWaitingTermination+0x58>)
 80051d0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80051d2:	f7fe fc67 	bl	8003aa4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f000 f810 	bl	80051fc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80051dc:	4b06      	ldr	r3, [pc, #24]	; (80051f8 <prvCheckTasksWaitingTermination+0x58>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d1e1      	bne.n	80051a8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80051e4:	bf00      	nop
 80051e6:	bf00      	nop
 80051e8:	3708      	adds	r7, #8
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
 80051ee:	bf00      	nop
 80051f0:	20004820 	.word	0x20004820
 80051f4:	2000484c 	.word	0x2000484c
 80051f8:	20004834 	.word	0x20004834

080051fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b084      	sub	sp, #16
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800520a:	2b00      	cmp	r3, #0
 800520c:	d108      	bne.n	8005220 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005212:	4618      	mov	r0, r3
 8005214:	f7fe f918 	bl	8003448 <vPortFree>
				vPortFree( pxTCB );
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f7fe f915 	bl	8003448 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800521e:	e018      	b.n	8005252 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005226:	2b01      	cmp	r3, #1
 8005228:	d103      	bne.n	8005232 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f7fe f90c 	bl	8003448 <vPortFree>
	}
 8005230:	e00f      	b.n	8005252 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005238:	2b02      	cmp	r3, #2
 800523a:	d00a      	beq.n	8005252 <prvDeleteTCB+0x56>
	__asm volatile
 800523c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005240:	f383 8811 	msr	BASEPRI, r3
 8005244:	f3bf 8f6f 	isb	sy
 8005248:	f3bf 8f4f 	dsb	sy
 800524c:	60fb      	str	r3, [r7, #12]
}
 800524e:	bf00      	nop
 8005250:	e7fe      	b.n	8005250 <prvDeleteTCB+0x54>
	}
 8005252:	bf00      	nop
 8005254:	3710      	adds	r7, #16
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}
	...

0800525c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800525c:	b480      	push	{r7}
 800525e:	b083      	sub	sp, #12
 8005260:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005262:	4b0c      	ldr	r3, [pc, #48]	; (8005294 <prvResetNextTaskUnblockTime+0x38>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d104      	bne.n	8005276 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800526c:	4b0a      	ldr	r3, [pc, #40]	; (8005298 <prvResetNextTaskUnblockTime+0x3c>)
 800526e:	f04f 32ff 	mov.w	r2, #4294967295
 8005272:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005274:	e008      	b.n	8005288 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005276:	4b07      	ldr	r3, [pc, #28]	; (8005294 <prvResetNextTaskUnblockTime+0x38>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	68db      	ldr	r3, [r3, #12]
 800527e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	4a04      	ldr	r2, [pc, #16]	; (8005298 <prvResetNextTaskUnblockTime+0x3c>)
 8005286:	6013      	str	r3, [r2, #0]
}
 8005288:	bf00      	nop
 800528a:	370c      	adds	r7, #12
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr
 8005294:	20004804 	.word	0x20004804
 8005298:	2000486c 	.word	0x2000486c

0800529c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800529c:	b480      	push	{r7}
 800529e:	b083      	sub	sp, #12
 80052a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80052a2:	4b0b      	ldr	r3, [pc, #44]	; (80052d0 <xTaskGetSchedulerState+0x34>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d102      	bne.n	80052b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80052aa:	2301      	movs	r3, #1
 80052ac:	607b      	str	r3, [r7, #4]
 80052ae:	e008      	b.n	80052c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80052b0:	4b08      	ldr	r3, [pc, #32]	; (80052d4 <xTaskGetSchedulerState+0x38>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d102      	bne.n	80052be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80052b8:	2302      	movs	r3, #2
 80052ba:	607b      	str	r3, [r7, #4]
 80052bc:	e001      	b.n	80052c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80052be:	2300      	movs	r3, #0
 80052c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80052c2:	687b      	ldr	r3, [r7, #4]
	}
 80052c4:	4618      	mov	r0, r3
 80052c6:	370c      	adds	r7, #12
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr
 80052d0:	20004858 	.word	0x20004858
 80052d4:	20004874 	.word	0x20004874

080052d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b086      	sub	sp, #24
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80052e4:	2300      	movs	r3, #0
 80052e6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d056      	beq.n	800539c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80052ee:	4b2e      	ldr	r3, [pc, #184]	; (80053a8 <xTaskPriorityDisinherit+0xd0>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	693a      	ldr	r2, [r7, #16]
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d00a      	beq.n	800530e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80052f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052fc:	f383 8811 	msr	BASEPRI, r3
 8005300:	f3bf 8f6f 	isb	sy
 8005304:	f3bf 8f4f 	dsb	sy
 8005308:	60fb      	str	r3, [r7, #12]
}
 800530a:	bf00      	nop
 800530c:	e7fe      	b.n	800530c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005312:	2b00      	cmp	r3, #0
 8005314:	d10a      	bne.n	800532c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800531a:	f383 8811 	msr	BASEPRI, r3
 800531e:	f3bf 8f6f 	isb	sy
 8005322:	f3bf 8f4f 	dsb	sy
 8005326:	60bb      	str	r3, [r7, #8]
}
 8005328:	bf00      	nop
 800532a:	e7fe      	b.n	800532a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005330:	1e5a      	subs	r2, r3, #1
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800533e:	429a      	cmp	r2, r3
 8005340:	d02c      	beq.n	800539c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005346:	2b00      	cmp	r3, #0
 8005348:	d128      	bne.n	800539c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	3304      	adds	r3, #4
 800534e:	4618      	mov	r0, r3
 8005350:	f7fe fa22 	bl	8003798 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005360:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800536c:	4b0f      	ldr	r3, [pc, #60]	; (80053ac <xTaskPriorityDisinherit+0xd4>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	429a      	cmp	r2, r3
 8005372:	d903      	bls.n	800537c <xTaskPriorityDisinherit+0xa4>
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005378:	4a0c      	ldr	r2, [pc, #48]	; (80053ac <xTaskPriorityDisinherit+0xd4>)
 800537a:	6013      	str	r3, [r2, #0]
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005380:	4613      	mov	r3, r2
 8005382:	009b      	lsls	r3, r3, #2
 8005384:	4413      	add	r3, r2
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	4a09      	ldr	r2, [pc, #36]	; (80053b0 <xTaskPriorityDisinherit+0xd8>)
 800538a:	441a      	add	r2, r3
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	3304      	adds	r3, #4
 8005390:	4619      	mov	r1, r3
 8005392:	4610      	mov	r0, r2
 8005394:	f7fe f9a3 	bl	80036de <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005398:	2301      	movs	r3, #1
 800539a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800539c:	697b      	ldr	r3, [r7, #20]
	}
 800539e:	4618      	mov	r0, r3
 80053a0:	3718      	adds	r7, #24
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}
 80053a6:	bf00      	nop
 80053a8:	20004378 	.word	0x20004378
 80053ac:	20004854 	.word	0x20004854
 80053b0:	2000437c 	.word	0x2000437c

080053b4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b084      	sub	sp, #16
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80053be:	4b21      	ldr	r3, [pc, #132]	; (8005444 <prvAddCurrentTaskToDelayedList+0x90>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80053c4:	4b20      	ldr	r3, [pc, #128]	; (8005448 <prvAddCurrentTaskToDelayedList+0x94>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	3304      	adds	r3, #4
 80053ca:	4618      	mov	r0, r3
 80053cc:	f7fe f9e4 	bl	8003798 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053d6:	d10a      	bne.n	80053ee <prvAddCurrentTaskToDelayedList+0x3a>
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d007      	beq.n	80053ee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80053de:	4b1a      	ldr	r3, [pc, #104]	; (8005448 <prvAddCurrentTaskToDelayedList+0x94>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	3304      	adds	r3, #4
 80053e4:	4619      	mov	r1, r3
 80053e6:	4819      	ldr	r0, [pc, #100]	; (800544c <prvAddCurrentTaskToDelayedList+0x98>)
 80053e8:	f7fe f979 	bl	80036de <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80053ec:	e026      	b.n	800543c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80053ee:	68fa      	ldr	r2, [r7, #12]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	4413      	add	r3, r2
 80053f4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80053f6:	4b14      	ldr	r3, [pc, #80]	; (8005448 <prvAddCurrentTaskToDelayedList+0x94>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	68ba      	ldr	r2, [r7, #8]
 80053fc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80053fe:	68ba      	ldr	r2, [r7, #8]
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	429a      	cmp	r2, r3
 8005404:	d209      	bcs.n	800541a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005406:	4b12      	ldr	r3, [pc, #72]	; (8005450 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	4b0f      	ldr	r3, [pc, #60]	; (8005448 <prvAddCurrentTaskToDelayedList+0x94>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	3304      	adds	r3, #4
 8005410:	4619      	mov	r1, r3
 8005412:	4610      	mov	r0, r2
 8005414:	f7fe f987 	bl	8003726 <vListInsert>
}
 8005418:	e010      	b.n	800543c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800541a:	4b0e      	ldr	r3, [pc, #56]	; (8005454 <prvAddCurrentTaskToDelayedList+0xa0>)
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	4b0a      	ldr	r3, [pc, #40]	; (8005448 <prvAddCurrentTaskToDelayedList+0x94>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	3304      	adds	r3, #4
 8005424:	4619      	mov	r1, r3
 8005426:	4610      	mov	r0, r2
 8005428:	f7fe f97d 	bl	8003726 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800542c:	4b0a      	ldr	r3, [pc, #40]	; (8005458 <prvAddCurrentTaskToDelayedList+0xa4>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	68ba      	ldr	r2, [r7, #8]
 8005432:	429a      	cmp	r2, r3
 8005434:	d202      	bcs.n	800543c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005436:	4a08      	ldr	r2, [pc, #32]	; (8005458 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	6013      	str	r3, [r2, #0]
}
 800543c:	bf00      	nop
 800543e:	3710      	adds	r7, #16
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}
 8005444:	20004850 	.word	0x20004850
 8005448:	20004378 	.word	0x20004378
 800544c:	20004838 	.word	0x20004838
 8005450:	20004808 	.word	0x20004808
 8005454:	20004804 	.word	0x20004804
 8005458:	2000486c 	.word	0x2000486c

0800545c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b08a      	sub	sp, #40	; 0x28
 8005460:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005462:	2300      	movs	r3, #0
 8005464:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005466:	f000 fb07 	bl	8005a78 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800546a:	4b1c      	ldr	r3, [pc, #112]	; (80054dc <xTimerCreateTimerTask+0x80>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d021      	beq.n	80054b6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005472:	2300      	movs	r3, #0
 8005474:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005476:	2300      	movs	r3, #0
 8005478:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800547a:	1d3a      	adds	r2, r7, #4
 800547c:	f107 0108 	add.w	r1, r7, #8
 8005480:	f107 030c 	add.w	r3, r7, #12
 8005484:	4618      	mov	r0, r3
 8005486:	f7fd fef9 	bl	800327c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800548a:	6879      	ldr	r1, [r7, #4]
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	68fa      	ldr	r2, [r7, #12]
 8005490:	9202      	str	r2, [sp, #8]
 8005492:	9301      	str	r3, [sp, #4]
 8005494:	2302      	movs	r3, #2
 8005496:	9300      	str	r3, [sp, #0]
 8005498:	2300      	movs	r3, #0
 800549a:	460a      	mov	r2, r1
 800549c:	4910      	ldr	r1, [pc, #64]	; (80054e0 <xTimerCreateTimerTask+0x84>)
 800549e:	4811      	ldr	r0, [pc, #68]	; (80054e4 <xTimerCreateTimerTask+0x88>)
 80054a0:	f7ff f8de 	bl	8004660 <xTaskCreateStatic>
 80054a4:	4603      	mov	r3, r0
 80054a6:	4a10      	ldr	r2, [pc, #64]	; (80054e8 <xTimerCreateTimerTask+0x8c>)
 80054a8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80054aa:	4b0f      	ldr	r3, [pc, #60]	; (80054e8 <xTimerCreateTimerTask+0x8c>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d001      	beq.n	80054b6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80054b2:	2301      	movs	r3, #1
 80054b4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d10a      	bne.n	80054d2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80054bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c0:	f383 8811 	msr	BASEPRI, r3
 80054c4:	f3bf 8f6f 	isb	sy
 80054c8:	f3bf 8f4f 	dsb	sy
 80054cc:	613b      	str	r3, [r7, #16]
}
 80054ce:	bf00      	nop
 80054d0:	e7fe      	b.n	80054d0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80054d2:	697b      	ldr	r3, [r7, #20]
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	3718      	adds	r7, #24
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}
 80054dc:	200048a8 	.word	0x200048a8
 80054e0:	080068a4 	.word	0x080068a4
 80054e4:	08005621 	.word	0x08005621
 80054e8:	200048ac 	.word	0x200048ac

080054ec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b08a      	sub	sp, #40	; 0x28
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	60f8      	str	r0, [r7, #12]
 80054f4:	60b9      	str	r1, [r7, #8]
 80054f6:	607a      	str	r2, [r7, #4]
 80054f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80054fa:	2300      	movs	r3, #0
 80054fc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d10a      	bne.n	800551a <xTimerGenericCommand+0x2e>
	__asm volatile
 8005504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005508:	f383 8811 	msr	BASEPRI, r3
 800550c:	f3bf 8f6f 	isb	sy
 8005510:	f3bf 8f4f 	dsb	sy
 8005514:	623b      	str	r3, [r7, #32]
}
 8005516:	bf00      	nop
 8005518:	e7fe      	b.n	8005518 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800551a:	4b1a      	ldr	r3, [pc, #104]	; (8005584 <xTimerGenericCommand+0x98>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d02a      	beq.n	8005578 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	2b05      	cmp	r3, #5
 8005532:	dc18      	bgt.n	8005566 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005534:	f7ff feb2 	bl	800529c <xTaskGetSchedulerState>
 8005538:	4603      	mov	r3, r0
 800553a:	2b02      	cmp	r3, #2
 800553c:	d109      	bne.n	8005552 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800553e:	4b11      	ldr	r3, [pc, #68]	; (8005584 <xTimerGenericCommand+0x98>)
 8005540:	6818      	ldr	r0, [r3, #0]
 8005542:	f107 0110 	add.w	r1, r7, #16
 8005546:	2300      	movs	r3, #0
 8005548:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800554a:	f7fe fca1 	bl	8003e90 <xQueueGenericSend>
 800554e:	6278      	str	r0, [r7, #36]	; 0x24
 8005550:	e012      	b.n	8005578 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005552:	4b0c      	ldr	r3, [pc, #48]	; (8005584 <xTimerGenericCommand+0x98>)
 8005554:	6818      	ldr	r0, [r3, #0]
 8005556:	f107 0110 	add.w	r1, r7, #16
 800555a:	2300      	movs	r3, #0
 800555c:	2200      	movs	r2, #0
 800555e:	f7fe fc97 	bl	8003e90 <xQueueGenericSend>
 8005562:	6278      	str	r0, [r7, #36]	; 0x24
 8005564:	e008      	b.n	8005578 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005566:	4b07      	ldr	r3, [pc, #28]	; (8005584 <xTimerGenericCommand+0x98>)
 8005568:	6818      	ldr	r0, [r3, #0]
 800556a:	f107 0110 	add.w	r1, r7, #16
 800556e:	2300      	movs	r3, #0
 8005570:	683a      	ldr	r2, [r7, #0]
 8005572:	f7fe fd8b 	bl	800408c <xQueueGenericSendFromISR>
 8005576:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800557a:	4618      	mov	r0, r3
 800557c:	3728      	adds	r7, #40	; 0x28
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}
 8005582:	bf00      	nop
 8005584:	200048a8 	.word	0x200048a8

08005588 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b088      	sub	sp, #32
 800558c:	af02      	add	r7, sp, #8
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005592:	4b22      	ldr	r3, [pc, #136]	; (800561c <prvProcessExpiredTimer+0x94>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	68db      	ldr	r3, [r3, #12]
 800559a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	3304      	adds	r3, #4
 80055a0:	4618      	mov	r0, r3
 80055a2:	f7fe f8f9 	bl	8003798 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80055ac:	f003 0304 	and.w	r3, r3, #4
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d022      	beq.n	80055fa <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	699a      	ldr	r2, [r3, #24]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	18d1      	adds	r1, r2, r3
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	683a      	ldr	r2, [r7, #0]
 80055c0:	6978      	ldr	r0, [r7, #20]
 80055c2:	f000 f8d1 	bl	8005768 <prvInsertTimerInActiveList>
 80055c6:	4603      	mov	r3, r0
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d01f      	beq.n	800560c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80055cc:	2300      	movs	r3, #0
 80055ce:	9300      	str	r3, [sp, #0]
 80055d0:	2300      	movs	r3, #0
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	2100      	movs	r1, #0
 80055d6:	6978      	ldr	r0, [r7, #20]
 80055d8:	f7ff ff88 	bl	80054ec <xTimerGenericCommand>
 80055dc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d113      	bne.n	800560c <prvProcessExpiredTimer+0x84>
	__asm volatile
 80055e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e8:	f383 8811 	msr	BASEPRI, r3
 80055ec:	f3bf 8f6f 	isb	sy
 80055f0:	f3bf 8f4f 	dsb	sy
 80055f4:	60fb      	str	r3, [r7, #12]
}
 80055f6:	bf00      	nop
 80055f8:	e7fe      	b.n	80055f8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005600:	f023 0301 	bic.w	r3, r3, #1
 8005604:	b2da      	uxtb	r2, r3
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	6a1b      	ldr	r3, [r3, #32]
 8005610:	6978      	ldr	r0, [r7, #20]
 8005612:	4798      	blx	r3
}
 8005614:	bf00      	nop
 8005616:	3718      	adds	r7, #24
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}
 800561c:	200048a0 	.word	0x200048a0

08005620 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b084      	sub	sp, #16
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005628:	f107 0308 	add.w	r3, r7, #8
 800562c:	4618      	mov	r0, r3
 800562e:	f000 f857 	bl	80056e0 <prvGetNextExpireTime>
 8005632:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	4619      	mov	r1, r3
 8005638:	68f8      	ldr	r0, [r7, #12]
 800563a:	f000 f803 	bl	8005644 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800563e:	f000 f8d5 	bl	80057ec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005642:	e7f1      	b.n	8005628 <prvTimerTask+0x8>

08005644 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b084      	sub	sp, #16
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800564e:	f7ff fa43 	bl	8004ad8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005652:	f107 0308 	add.w	r3, r7, #8
 8005656:	4618      	mov	r0, r3
 8005658:	f000 f866 	bl	8005728 <prvSampleTimeNow>
 800565c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d130      	bne.n	80056c6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d10a      	bne.n	8005680 <prvProcessTimerOrBlockTask+0x3c>
 800566a:	687a      	ldr	r2, [r7, #4]
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	429a      	cmp	r2, r3
 8005670:	d806      	bhi.n	8005680 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005672:	f7ff fa3f 	bl	8004af4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005676:	68f9      	ldr	r1, [r7, #12]
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f7ff ff85 	bl	8005588 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800567e:	e024      	b.n	80056ca <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d008      	beq.n	8005698 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005686:	4b13      	ldr	r3, [pc, #76]	; (80056d4 <prvProcessTimerOrBlockTask+0x90>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d101      	bne.n	8005694 <prvProcessTimerOrBlockTask+0x50>
 8005690:	2301      	movs	r3, #1
 8005692:	e000      	b.n	8005696 <prvProcessTimerOrBlockTask+0x52>
 8005694:	2300      	movs	r3, #0
 8005696:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005698:	4b0f      	ldr	r3, [pc, #60]	; (80056d8 <prvProcessTimerOrBlockTask+0x94>)
 800569a:	6818      	ldr	r0, [r3, #0]
 800569c:	687a      	ldr	r2, [r7, #4]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	1ad3      	subs	r3, r2, r3
 80056a2:	683a      	ldr	r2, [r7, #0]
 80056a4:	4619      	mov	r1, r3
 80056a6:	f7fe ffa7 	bl	80045f8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80056aa:	f7ff fa23 	bl	8004af4 <xTaskResumeAll>
 80056ae:	4603      	mov	r3, r0
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d10a      	bne.n	80056ca <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80056b4:	4b09      	ldr	r3, [pc, #36]	; (80056dc <prvProcessTimerOrBlockTask+0x98>)
 80056b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056ba:	601a      	str	r2, [r3, #0]
 80056bc:	f3bf 8f4f 	dsb	sy
 80056c0:	f3bf 8f6f 	isb	sy
}
 80056c4:	e001      	b.n	80056ca <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80056c6:	f7ff fa15 	bl	8004af4 <xTaskResumeAll>
}
 80056ca:	bf00      	nop
 80056cc:	3710      	adds	r7, #16
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}
 80056d2:	bf00      	nop
 80056d4:	200048a4 	.word	0x200048a4
 80056d8:	200048a8 	.word	0x200048a8
 80056dc:	e000ed04 	.word	0xe000ed04

080056e0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80056e0:	b480      	push	{r7}
 80056e2:	b085      	sub	sp, #20
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80056e8:	4b0e      	ldr	r3, [pc, #56]	; (8005724 <prvGetNextExpireTime+0x44>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d101      	bne.n	80056f6 <prvGetNextExpireTime+0x16>
 80056f2:	2201      	movs	r2, #1
 80056f4:	e000      	b.n	80056f8 <prvGetNextExpireTime+0x18>
 80056f6:	2200      	movs	r2, #0
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d105      	bne.n	8005710 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005704:	4b07      	ldr	r3, [pc, #28]	; (8005724 <prvGetNextExpireTime+0x44>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	68db      	ldr	r3, [r3, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	60fb      	str	r3, [r7, #12]
 800570e:	e001      	b.n	8005714 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005710:	2300      	movs	r3, #0
 8005712:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005714:	68fb      	ldr	r3, [r7, #12]
}
 8005716:	4618      	mov	r0, r3
 8005718:	3714      	adds	r7, #20
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr
 8005722:	bf00      	nop
 8005724:	200048a0 	.word	0x200048a0

08005728 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b084      	sub	sp, #16
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005730:	f7ff fa7e 	bl	8004c30 <xTaskGetTickCount>
 8005734:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005736:	4b0b      	ldr	r3, [pc, #44]	; (8005764 <prvSampleTimeNow+0x3c>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	68fa      	ldr	r2, [r7, #12]
 800573c:	429a      	cmp	r2, r3
 800573e:	d205      	bcs.n	800574c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005740:	f000 f936 	bl	80059b0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2201      	movs	r2, #1
 8005748:	601a      	str	r2, [r3, #0]
 800574a:	e002      	b.n	8005752 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2200      	movs	r2, #0
 8005750:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005752:	4a04      	ldr	r2, [pc, #16]	; (8005764 <prvSampleTimeNow+0x3c>)
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005758:	68fb      	ldr	r3, [r7, #12]
}
 800575a:	4618      	mov	r0, r3
 800575c:	3710      	adds	r7, #16
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
 8005762:	bf00      	nop
 8005764:	200048b0 	.word	0x200048b0

08005768 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b086      	sub	sp, #24
 800576c:	af00      	add	r7, sp, #0
 800576e:	60f8      	str	r0, [r7, #12]
 8005770:	60b9      	str	r1, [r7, #8]
 8005772:	607a      	str	r2, [r7, #4]
 8005774:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005776:	2300      	movs	r3, #0
 8005778:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	68ba      	ldr	r2, [r7, #8]
 800577e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	68fa      	ldr	r2, [r7, #12]
 8005784:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005786:	68ba      	ldr	r2, [r7, #8]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	429a      	cmp	r2, r3
 800578c:	d812      	bhi.n	80057b4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800578e:	687a      	ldr	r2, [r7, #4]
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	1ad2      	subs	r2, r2, r3
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	699b      	ldr	r3, [r3, #24]
 8005798:	429a      	cmp	r2, r3
 800579a:	d302      	bcc.n	80057a2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800579c:	2301      	movs	r3, #1
 800579e:	617b      	str	r3, [r7, #20]
 80057a0:	e01b      	b.n	80057da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80057a2:	4b10      	ldr	r3, [pc, #64]	; (80057e4 <prvInsertTimerInActiveList+0x7c>)
 80057a4:	681a      	ldr	r2, [r3, #0]
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	3304      	adds	r3, #4
 80057aa:	4619      	mov	r1, r3
 80057ac:	4610      	mov	r0, r2
 80057ae:	f7fd ffba 	bl	8003726 <vListInsert>
 80057b2:	e012      	b.n	80057da <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80057b4:	687a      	ldr	r2, [r7, #4]
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	429a      	cmp	r2, r3
 80057ba:	d206      	bcs.n	80057ca <prvInsertTimerInActiveList+0x62>
 80057bc:	68ba      	ldr	r2, [r7, #8]
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d302      	bcc.n	80057ca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80057c4:	2301      	movs	r3, #1
 80057c6:	617b      	str	r3, [r7, #20]
 80057c8:	e007      	b.n	80057da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80057ca:	4b07      	ldr	r3, [pc, #28]	; (80057e8 <prvInsertTimerInActiveList+0x80>)
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	3304      	adds	r3, #4
 80057d2:	4619      	mov	r1, r3
 80057d4:	4610      	mov	r0, r2
 80057d6:	f7fd ffa6 	bl	8003726 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80057da:	697b      	ldr	r3, [r7, #20]
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3718      	adds	r7, #24
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}
 80057e4:	200048a4 	.word	0x200048a4
 80057e8:	200048a0 	.word	0x200048a0

080057ec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b08e      	sub	sp, #56	; 0x38
 80057f0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80057f2:	e0ca      	b.n	800598a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	da18      	bge.n	800582c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80057fa:	1d3b      	adds	r3, r7, #4
 80057fc:	3304      	adds	r3, #4
 80057fe:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005802:	2b00      	cmp	r3, #0
 8005804:	d10a      	bne.n	800581c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800580a:	f383 8811 	msr	BASEPRI, r3
 800580e:	f3bf 8f6f 	isb	sy
 8005812:	f3bf 8f4f 	dsb	sy
 8005816:	61fb      	str	r3, [r7, #28]
}
 8005818:	bf00      	nop
 800581a:	e7fe      	b.n	800581a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800581c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005822:	6850      	ldr	r0, [r2, #4]
 8005824:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005826:	6892      	ldr	r2, [r2, #8]
 8005828:	4611      	mov	r1, r2
 800582a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2b00      	cmp	r3, #0
 8005830:	f2c0 80aa 	blt.w	8005988 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800583a:	695b      	ldr	r3, [r3, #20]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d004      	beq.n	800584a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005842:	3304      	adds	r3, #4
 8005844:	4618      	mov	r0, r3
 8005846:	f7fd ffa7 	bl	8003798 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800584a:	463b      	mov	r3, r7
 800584c:	4618      	mov	r0, r3
 800584e:	f7ff ff6b 	bl	8005728 <prvSampleTimeNow>
 8005852:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2b09      	cmp	r3, #9
 8005858:	f200 8097 	bhi.w	800598a <prvProcessReceivedCommands+0x19e>
 800585c:	a201      	add	r2, pc, #4	; (adr r2, 8005864 <prvProcessReceivedCommands+0x78>)
 800585e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005862:	bf00      	nop
 8005864:	0800588d 	.word	0x0800588d
 8005868:	0800588d 	.word	0x0800588d
 800586c:	0800588d 	.word	0x0800588d
 8005870:	08005901 	.word	0x08005901
 8005874:	08005915 	.word	0x08005915
 8005878:	0800595f 	.word	0x0800595f
 800587c:	0800588d 	.word	0x0800588d
 8005880:	0800588d 	.word	0x0800588d
 8005884:	08005901 	.word	0x08005901
 8005888:	08005915 	.word	0x08005915
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800588c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800588e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005892:	f043 0301 	orr.w	r3, r3, #1
 8005896:	b2da      	uxtb	r2, r3
 8005898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800589a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800589e:	68ba      	ldr	r2, [r7, #8]
 80058a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058a2:	699b      	ldr	r3, [r3, #24]
 80058a4:	18d1      	adds	r1, r2, r3
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058ac:	f7ff ff5c 	bl	8005768 <prvInsertTimerInActiveList>
 80058b0:	4603      	mov	r3, r0
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d069      	beq.n	800598a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80058b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058b8:	6a1b      	ldr	r3, [r3, #32]
 80058ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058bc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80058be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80058c4:	f003 0304 	and.w	r3, r3, #4
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d05e      	beq.n	800598a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80058cc:	68ba      	ldr	r2, [r7, #8]
 80058ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058d0:	699b      	ldr	r3, [r3, #24]
 80058d2:	441a      	add	r2, r3
 80058d4:	2300      	movs	r3, #0
 80058d6:	9300      	str	r3, [sp, #0]
 80058d8:	2300      	movs	r3, #0
 80058da:	2100      	movs	r1, #0
 80058dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058de:	f7ff fe05 	bl	80054ec <xTimerGenericCommand>
 80058e2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80058e4:	6a3b      	ldr	r3, [r7, #32]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d14f      	bne.n	800598a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80058ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ee:	f383 8811 	msr	BASEPRI, r3
 80058f2:	f3bf 8f6f 	isb	sy
 80058f6:	f3bf 8f4f 	dsb	sy
 80058fa:	61bb      	str	r3, [r7, #24]
}
 80058fc:	bf00      	nop
 80058fe:	e7fe      	b.n	80058fe <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005902:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005906:	f023 0301 	bic.w	r3, r3, #1
 800590a:	b2da      	uxtb	r2, r3
 800590c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800590e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005912:	e03a      	b.n	800598a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005916:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800591a:	f043 0301 	orr.w	r3, r3, #1
 800591e:	b2da      	uxtb	r2, r3
 8005920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005922:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005926:	68ba      	ldr	r2, [r7, #8]
 8005928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800592a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800592c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800592e:	699b      	ldr	r3, [r3, #24]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d10a      	bne.n	800594a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005938:	f383 8811 	msr	BASEPRI, r3
 800593c:	f3bf 8f6f 	isb	sy
 8005940:	f3bf 8f4f 	dsb	sy
 8005944:	617b      	str	r3, [r7, #20]
}
 8005946:	bf00      	nop
 8005948:	e7fe      	b.n	8005948 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800594a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800594c:	699a      	ldr	r2, [r3, #24]
 800594e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005950:	18d1      	adds	r1, r2, r3
 8005952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005954:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005956:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005958:	f7ff ff06 	bl	8005768 <prvInsertTimerInActiveList>
					break;
 800595c:	e015      	b.n	800598a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800595e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005960:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005964:	f003 0302 	and.w	r3, r3, #2
 8005968:	2b00      	cmp	r3, #0
 800596a:	d103      	bne.n	8005974 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800596c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800596e:	f7fd fd6b 	bl	8003448 <vPortFree>
 8005972:	e00a      	b.n	800598a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005976:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800597a:	f023 0301 	bic.w	r3, r3, #1
 800597e:	b2da      	uxtb	r2, r3
 8005980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005982:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005986:	e000      	b.n	800598a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005988:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800598a:	4b08      	ldr	r3, [pc, #32]	; (80059ac <prvProcessReceivedCommands+0x1c0>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	1d39      	adds	r1, r7, #4
 8005990:	2200      	movs	r2, #0
 8005992:	4618      	mov	r0, r3
 8005994:	f7fe fc16 	bl	80041c4 <xQueueReceive>
 8005998:	4603      	mov	r3, r0
 800599a:	2b00      	cmp	r3, #0
 800599c:	f47f af2a 	bne.w	80057f4 <prvProcessReceivedCommands+0x8>
	}
}
 80059a0:	bf00      	nop
 80059a2:	bf00      	nop
 80059a4:	3730      	adds	r7, #48	; 0x30
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}
 80059aa:	bf00      	nop
 80059ac:	200048a8 	.word	0x200048a8

080059b0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b088      	sub	sp, #32
 80059b4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80059b6:	e048      	b.n	8005a4a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80059b8:	4b2d      	ldr	r3, [pc, #180]	; (8005a70 <prvSwitchTimerLists+0xc0>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	68db      	ldr	r3, [r3, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059c2:	4b2b      	ldr	r3, [pc, #172]	; (8005a70 <prvSwitchTimerLists+0xc0>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	68db      	ldr	r3, [r3, #12]
 80059ca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	3304      	adds	r3, #4
 80059d0:	4618      	mov	r0, r3
 80059d2:	f7fd fee1 	bl	8003798 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	6a1b      	ldr	r3, [r3, #32]
 80059da:	68f8      	ldr	r0, [r7, #12]
 80059dc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80059e4:	f003 0304 	and.w	r3, r3, #4
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d02e      	beq.n	8005a4a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	699b      	ldr	r3, [r3, #24]
 80059f0:	693a      	ldr	r2, [r7, #16]
 80059f2:	4413      	add	r3, r2
 80059f4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80059f6:	68ba      	ldr	r2, [r7, #8]
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d90e      	bls.n	8005a1c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	68ba      	ldr	r2, [r7, #8]
 8005a02:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	68fa      	ldr	r2, [r7, #12]
 8005a08:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005a0a:	4b19      	ldr	r3, [pc, #100]	; (8005a70 <prvSwitchTimerLists+0xc0>)
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	3304      	adds	r3, #4
 8005a12:	4619      	mov	r1, r3
 8005a14:	4610      	mov	r0, r2
 8005a16:	f7fd fe86 	bl	8003726 <vListInsert>
 8005a1a:	e016      	b.n	8005a4a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	9300      	str	r3, [sp, #0]
 8005a20:	2300      	movs	r3, #0
 8005a22:	693a      	ldr	r2, [r7, #16]
 8005a24:	2100      	movs	r1, #0
 8005a26:	68f8      	ldr	r0, [r7, #12]
 8005a28:	f7ff fd60 	bl	80054ec <xTimerGenericCommand>
 8005a2c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d10a      	bne.n	8005a4a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a38:	f383 8811 	msr	BASEPRI, r3
 8005a3c:	f3bf 8f6f 	isb	sy
 8005a40:	f3bf 8f4f 	dsb	sy
 8005a44:	603b      	str	r3, [r7, #0]
}
 8005a46:	bf00      	nop
 8005a48:	e7fe      	b.n	8005a48 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005a4a:	4b09      	ldr	r3, [pc, #36]	; (8005a70 <prvSwitchTimerLists+0xc0>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d1b1      	bne.n	80059b8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005a54:	4b06      	ldr	r3, [pc, #24]	; (8005a70 <prvSwitchTimerLists+0xc0>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005a5a:	4b06      	ldr	r3, [pc, #24]	; (8005a74 <prvSwitchTimerLists+0xc4>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a04      	ldr	r2, [pc, #16]	; (8005a70 <prvSwitchTimerLists+0xc0>)
 8005a60:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005a62:	4a04      	ldr	r2, [pc, #16]	; (8005a74 <prvSwitchTimerLists+0xc4>)
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	6013      	str	r3, [r2, #0]
}
 8005a68:	bf00      	nop
 8005a6a:	3718      	adds	r7, #24
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}
 8005a70:	200048a0 	.word	0x200048a0
 8005a74:	200048a4 	.word	0x200048a4

08005a78 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b082      	sub	sp, #8
 8005a7c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005a7e:	f7fd ffe1 	bl	8003a44 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005a82:	4b15      	ldr	r3, [pc, #84]	; (8005ad8 <prvCheckForValidListAndQueue+0x60>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d120      	bne.n	8005acc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005a8a:	4814      	ldr	r0, [pc, #80]	; (8005adc <prvCheckForValidListAndQueue+0x64>)
 8005a8c:	f7fd fdfa 	bl	8003684 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005a90:	4813      	ldr	r0, [pc, #76]	; (8005ae0 <prvCheckForValidListAndQueue+0x68>)
 8005a92:	f7fd fdf7 	bl	8003684 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005a96:	4b13      	ldr	r3, [pc, #76]	; (8005ae4 <prvCheckForValidListAndQueue+0x6c>)
 8005a98:	4a10      	ldr	r2, [pc, #64]	; (8005adc <prvCheckForValidListAndQueue+0x64>)
 8005a9a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005a9c:	4b12      	ldr	r3, [pc, #72]	; (8005ae8 <prvCheckForValidListAndQueue+0x70>)
 8005a9e:	4a10      	ldr	r2, [pc, #64]	; (8005ae0 <prvCheckForValidListAndQueue+0x68>)
 8005aa0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	9300      	str	r3, [sp, #0]
 8005aa6:	4b11      	ldr	r3, [pc, #68]	; (8005aec <prvCheckForValidListAndQueue+0x74>)
 8005aa8:	4a11      	ldr	r2, [pc, #68]	; (8005af0 <prvCheckForValidListAndQueue+0x78>)
 8005aaa:	2110      	movs	r1, #16
 8005aac:	200a      	movs	r0, #10
 8005aae:	f7fe f953 	bl	8003d58 <xQueueGenericCreateStatic>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	4a08      	ldr	r2, [pc, #32]	; (8005ad8 <prvCheckForValidListAndQueue+0x60>)
 8005ab6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005ab8:	4b07      	ldr	r3, [pc, #28]	; (8005ad8 <prvCheckForValidListAndQueue+0x60>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d005      	beq.n	8005acc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005ac0:	4b05      	ldr	r3, [pc, #20]	; (8005ad8 <prvCheckForValidListAndQueue+0x60>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	490b      	ldr	r1, [pc, #44]	; (8005af4 <prvCheckForValidListAndQueue+0x7c>)
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f7fe fd6c 	bl	80045a4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005acc:	f7fd ffea 	bl	8003aa4 <vPortExitCritical>
}
 8005ad0:	bf00      	nop
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}
 8005ad6:	bf00      	nop
 8005ad8:	200048a8 	.word	0x200048a8
 8005adc:	20004878 	.word	0x20004878
 8005ae0:	2000488c 	.word	0x2000488c
 8005ae4:	200048a0 	.word	0x200048a0
 8005ae8:	200048a4 	.word	0x200048a4
 8005aec:	20004954 	.word	0x20004954
 8005af0:	200048b4 	.word	0x200048b4
 8005af4:	080068ac 	.word	0x080068ac

08005af8 <OLED_Refresh_Gram>:

#include "../../PeripheralDriver/Inc/oledfont.h"

uint8_t OLED_GRAM[128][8];	 
void OLED_Refresh_Gram(void)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b082      	sub	sp, #8
 8005afc:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 8005afe:	2300      	movs	r3, #0
 8005b00:	71fb      	strb	r3, [r7, #7]
 8005b02:	e026      	b.n	8005b52 <OLED_Refresh_Gram+0x5a>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    
 8005b04:	79fb      	ldrb	r3, [r7, #7]
 8005b06:	3b50      	subs	r3, #80	; 0x50
 8005b08:	b2db      	uxtb	r3, r3
 8005b0a:	2100      	movs	r1, #0
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f000 f82b 	bl	8005b68 <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      
 8005b12:	2100      	movs	r1, #0
 8005b14:	2000      	movs	r0, #0
 8005b16:	f000 f827 	bl	8005b68 <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);        
 8005b1a:	2100      	movs	r1, #0
 8005b1c:	2010      	movs	r0, #16
 8005b1e:	f000 f823 	bl	8005b68 <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA); 
 8005b22:	2300      	movs	r3, #0
 8005b24:	71bb      	strb	r3, [r7, #6]
 8005b26:	e00d      	b.n	8005b44 <OLED_Refresh_Gram+0x4c>
 8005b28:	79ba      	ldrb	r2, [r7, #6]
 8005b2a:	79fb      	ldrb	r3, [r7, #7]
 8005b2c:	490d      	ldr	r1, [pc, #52]	; (8005b64 <OLED_Refresh_Gram+0x6c>)
 8005b2e:	00d2      	lsls	r2, r2, #3
 8005b30:	440a      	add	r2, r1
 8005b32:	4413      	add	r3, r2
 8005b34:	781b      	ldrb	r3, [r3, #0]
 8005b36:	2101      	movs	r1, #1
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f000 f815 	bl	8005b68 <OLED_WR_Byte>
 8005b3e:	79bb      	ldrb	r3, [r7, #6]
 8005b40:	3301      	adds	r3, #1
 8005b42:	71bb      	strb	r3, [r7, #6]
 8005b44:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	daed      	bge.n	8005b28 <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)  
 8005b4c:	79fb      	ldrb	r3, [r7, #7]
 8005b4e:	3301      	adds	r3, #1
 8005b50:	71fb      	strb	r3, [r7, #7]
 8005b52:	79fb      	ldrb	r3, [r7, #7]
 8005b54:	2b07      	cmp	r3, #7
 8005b56:	d9d5      	bls.n	8005b04 <OLED_Refresh_Gram+0xc>
	}   
}
 8005b58:	bf00      	nop
 8005b5a:	bf00      	nop
 8005b5c:	3708      	adds	r7, #8
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}
 8005b62:	bf00      	nop
 8005b64:	20004b20 	.word	0x20004b20

08005b68 <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{	
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b084      	sub	sp, #16
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	4603      	mov	r3, r0
 8005b70:	460a      	mov	r2, r1
 8005b72:	71fb      	strb	r3, [r7, #7]
 8005b74:	4613      	mov	r3, r2
 8005b76:	71bb      	strb	r3, [r7, #6]
	uint8_t i;			  
	if(cmd)
 8005b78:	79bb      	ldrb	r3, [r7, #6]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d006      	beq.n	8005b8c <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 8005b7e:	2201      	movs	r2, #1
 8005b80:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005b84:	481c      	ldr	r0, [pc, #112]	; (8005bf8 <OLED_WR_Byte+0x90>)
 8005b86:	f7fb fe5f 	bl	8001848 <HAL_GPIO_WritePin>
 8005b8a:	e005      	b.n	8005b98 <OLED_WR_Byte+0x30>
	else 
	  OLED_RS_Clr();		  
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005b92:	4819      	ldr	r0, [pc, #100]	; (8005bf8 <OLED_WR_Byte+0x90>)
 8005b94:	f7fb fe58 	bl	8001848 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 8005b98:	2300      	movs	r3, #0
 8005b9a:	73fb      	strb	r3, [r7, #15]
 8005b9c:	e01e      	b.n	8005bdc <OLED_WR_Byte+0x74>
	{			  
		OLED_SCLK_Clr();
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	2120      	movs	r1, #32
 8005ba2:	4815      	ldr	r0, [pc, #84]	; (8005bf8 <OLED_WR_Byte+0x90>)
 8005ba4:	f7fb fe50 	bl	8001848 <HAL_GPIO_WritePin>
		if(dat&0x80)
 8005ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	da05      	bge.n	8005bbc <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 8005bb0:	2201      	movs	r2, #1
 8005bb2:	2140      	movs	r1, #64	; 0x40
 8005bb4:	4810      	ldr	r0, [pc, #64]	; (8005bf8 <OLED_WR_Byte+0x90>)
 8005bb6:	f7fb fe47 	bl	8001848 <HAL_GPIO_WritePin>
 8005bba:	e004      	b.n	8005bc6 <OLED_WR_Byte+0x5e>
		else 
		   OLED_SDIN_Clr();
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	2140      	movs	r1, #64	; 0x40
 8005bc0:	480d      	ldr	r0, [pc, #52]	; (8005bf8 <OLED_WR_Byte+0x90>)
 8005bc2:	f7fb fe41 	bl	8001848 <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	2120      	movs	r1, #32
 8005bca:	480b      	ldr	r0, [pc, #44]	; (8005bf8 <OLED_WR_Byte+0x90>)
 8005bcc:	f7fb fe3c 	bl	8001848 <HAL_GPIO_WritePin>
		dat<<=1;   
 8005bd0:	79fb      	ldrb	r3, [r7, #7]
 8005bd2:	005b      	lsls	r3, r3, #1
 8005bd4:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 8005bd6:	7bfb      	ldrb	r3, [r7, #15]
 8005bd8:	3301      	adds	r3, #1
 8005bda:	73fb      	strb	r3, [r7, #15]
 8005bdc:	7bfb      	ldrb	r3, [r7, #15]
 8005bde:	2b07      	cmp	r3, #7
 8005be0:	d9dd      	bls.n	8005b9e <OLED_WR_Byte+0x36>
	}				 		  
	OLED_RS_Set();   	  
 8005be2:	2201      	movs	r2, #1
 8005be4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005be8:	4803      	ldr	r0, [pc, #12]	; (8005bf8 <OLED_WR_Byte+0x90>)
 8005bea:	f7fb fe2d 	bl	8001848 <HAL_GPIO_WritePin>
} 
 8005bee:	bf00      	nop
 8005bf0:	3710      	adds	r7, #16
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}
 8005bf6:	bf00      	nop
 8005bf8:	40021000 	.word	0x40021000

08005bfc <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b082      	sub	sp, #8
 8005c00:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 8005c02:	2300      	movs	r3, #0
 8005c04:	71fb      	strb	r3, [r7, #7]
 8005c06:	e014      	b.n	8005c32 <OLED_Clear+0x36>
 8005c08:	2300      	movs	r3, #0
 8005c0a:	71bb      	strb	r3, [r7, #6]
 8005c0c:	e00a      	b.n	8005c24 <OLED_Clear+0x28>
 8005c0e:	79ba      	ldrb	r2, [r7, #6]
 8005c10:	79fb      	ldrb	r3, [r7, #7]
 8005c12:	490c      	ldr	r1, [pc, #48]	; (8005c44 <OLED_Clear+0x48>)
 8005c14:	00d2      	lsls	r2, r2, #3
 8005c16:	440a      	add	r2, r1
 8005c18:	4413      	add	r3, r2
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	701a      	strb	r2, [r3, #0]
 8005c1e:	79bb      	ldrb	r3, [r7, #6]
 8005c20:	3301      	adds	r3, #1
 8005c22:	71bb      	strb	r3, [r7, #6]
 8005c24:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	daf0      	bge.n	8005c0e <OLED_Clear+0x12>
 8005c2c:	79fb      	ldrb	r3, [r7, #7]
 8005c2e:	3301      	adds	r3, #1
 8005c30:	71fb      	strb	r3, [r7, #7]
 8005c32:	79fb      	ldrb	r3, [r7, #7]
 8005c34:	2b07      	cmp	r3, #7
 8005c36:	d9e7      	bls.n	8005c08 <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 8005c38:	f7ff ff5e 	bl	8005af8 <OLED_Refresh_Gram>
}
 8005c3c:	bf00      	nop
 8005c3e:	3708      	adds	r7, #8
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}
 8005c44:	20004b20 	.word	0x20004b20

08005c48 <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b085      	sub	sp, #20
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	4603      	mov	r3, r0
 8005c50:	71fb      	strb	r3, [r7, #7]
 8005c52:	460b      	mov	r3, r1
 8005c54:	71bb      	strb	r3, [r7, #6]
 8005c56:	4613      	mov	r3, r2
 8005c58:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 8005c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	db41      	blt.n	8005cea <OLED_DrawPoint+0xa2>
 8005c66:	79bb      	ldrb	r3, [r7, #6]
 8005c68:	2b3f      	cmp	r3, #63	; 0x3f
 8005c6a:	d83e      	bhi.n	8005cea <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 8005c6c:	79bb      	ldrb	r3, [r7, #6]
 8005c6e:	08db      	lsrs	r3, r3, #3
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	f1c3 0307 	rsb	r3, r3, #7
 8005c76:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 8005c78:	79bb      	ldrb	r3, [r7, #6]
 8005c7a:	f003 0307 	and.w	r3, r3, #7
 8005c7e:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 8005c80:	7b7b      	ldrb	r3, [r7, #13]
 8005c82:	f1c3 0307 	rsb	r3, r3, #7
 8005c86:	2201      	movs	r2, #1
 8005c88:	fa02 f303 	lsl.w	r3, r2, r3
 8005c8c:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 8005c8e:	797b      	ldrb	r3, [r7, #5]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d012      	beq.n	8005cba <OLED_DrawPoint+0x72>
 8005c94:	79fa      	ldrb	r2, [r7, #7]
 8005c96:	7bbb      	ldrb	r3, [r7, #14]
 8005c98:	4917      	ldr	r1, [pc, #92]	; (8005cf8 <OLED_DrawPoint+0xb0>)
 8005c9a:	00d2      	lsls	r2, r2, #3
 8005c9c:	440a      	add	r2, r1
 8005c9e:	4413      	add	r3, r2
 8005ca0:	7818      	ldrb	r0, [r3, #0]
 8005ca2:	79fa      	ldrb	r2, [r7, #7]
 8005ca4:	7bbb      	ldrb	r3, [r7, #14]
 8005ca6:	7bf9      	ldrb	r1, [r7, #15]
 8005ca8:	4301      	orrs	r1, r0
 8005caa:	b2c8      	uxtb	r0, r1
 8005cac:	4912      	ldr	r1, [pc, #72]	; (8005cf8 <OLED_DrawPoint+0xb0>)
 8005cae:	00d2      	lsls	r2, r2, #3
 8005cb0:	440a      	add	r2, r1
 8005cb2:	4413      	add	r3, r2
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	701a      	strb	r2, [r3, #0]
 8005cb8:	e018      	b.n	8005cec <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 8005cba:	79fa      	ldrb	r2, [r7, #7]
 8005cbc:	7bbb      	ldrb	r3, [r7, #14]
 8005cbe:	490e      	ldr	r1, [pc, #56]	; (8005cf8 <OLED_DrawPoint+0xb0>)
 8005cc0:	00d2      	lsls	r2, r2, #3
 8005cc2:	440a      	add	r2, r1
 8005cc4:	4413      	add	r3, r2
 8005cc6:	781b      	ldrb	r3, [r3, #0]
 8005cc8:	b25a      	sxtb	r2, r3
 8005cca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005cce:	43db      	mvns	r3, r3
 8005cd0:	b25b      	sxtb	r3, r3
 8005cd2:	4013      	ands	r3, r2
 8005cd4:	b259      	sxtb	r1, r3
 8005cd6:	79fa      	ldrb	r2, [r7, #7]
 8005cd8:	7bbb      	ldrb	r3, [r7, #14]
 8005cda:	b2c8      	uxtb	r0, r1
 8005cdc:	4906      	ldr	r1, [pc, #24]	; (8005cf8 <OLED_DrawPoint+0xb0>)
 8005cde:	00d2      	lsls	r2, r2, #3
 8005ce0:	440a      	add	r2, r1
 8005ce2:	4413      	add	r3, r2
 8005ce4:	4602      	mov	r2, r0
 8005ce6:	701a      	strb	r2, [r3, #0]
 8005ce8:	e000      	b.n	8005cec <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 8005cea:	bf00      	nop
}
 8005cec:	3714      	adds	r7, #20
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf4:	4770      	bx	lr
 8005cf6:	bf00      	nop
 8005cf8:	20004b20 	.word	0x20004b20

08005cfc <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 8005cfc:	b590      	push	{r4, r7, lr}
 8005cfe:	b085      	sub	sp, #20
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	4604      	mov	r4, r0
 8005d04:	4608      	mov	r0, r1
 8005d06:	4611      	mov	r1, r2
 8005d08:	461a      	mov	r2, r3
 8005d0a:	4623      	mov	r3, r4
 8005d0c:	71fb      	strb	r3, [r7, #7]
 8005d0e:	4603      	mov	r3, r0
 8005d10:	71bb      	strb	r3, [r7, #6]
 8005d12:	460b      	mov	r3, r1
 8005d14:	717b      	strb	r3, [r7, #5]
 8005d16:	4613      	mov	r3, r2
 8005d18:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 8005d1a:	79bb      	ldrb	r3, [r7, #6]
 8005d1c:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 8005d1e:	797b      	ldrb	r3, [r7, #5]
 8005d20:	3b20      	subs	r3, #32
 8005d22:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 8005d24:	2300      	movs	r3, #0
 8005d26:	73bb      	strb	r3, [r7, #14]
 8005d28:	e04d      	b.n	8005dc6 <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 8005d2a:	793b      	ldrb	r3, [r7, #4]
 8005d2c:	2b0c      	cmp	r3, #12
 8005d2e:	d10b      	bne.n	8005d48 <OLED_ShowChar+0x4c>
 8005d30:	797a      	ldrb	r2, [r7, #5]
 8005d32:	7bb9      	ldrb	r1, [r7, #14]
 8005d34:	4828      	ldr	r0, [pc, #160]	; (8005dd8 <OLED_ShowChar+0xdc>)
 8005d36:	4613      	mov	r3, r2
 8005d38:	005b      	lsls	r3, r3, #1
 8005d3a:	4413      	add	r3, r2
 8005d3c:	009b      	lsls	r3, r3, #2
 8005d3e:	4403      	add	r3, r0
 8005d40:	440b      	add	r3, r1
 8005d42:	781b      	ldrb	r3, [r3, #0]
 8005d44:	73fb      	strb	r3, [r7, #15]
 8005d46:	e007      	b.n	8005d58 <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 8005d48:	797a      	ldrb	r2, [r7, #5]
 8005d4a:	7bbb      	ldrb	r3, [r7, #14]
 8005d4c:	4923      	ldr	r1, [pc, #140]	; (8005ddc <OLED_ShowChar+0xe0>)
 8005d4e:	0112      	lsls	r2, r2, #4
 8005d50:	440a      	add	r2, r1
 8005d52:	4413      	add	r3, r2
 8005d54:	781b      	ldrb	r3, [r3, #0]
 8005d56:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 8005d58:	2300      	movs	r3, #0
 8005d5a:	737b      	strb	r3, [r7, #13]
 8005d5c:	e02d      	b.n	8005dba <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 8005d5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	da07      	bge.n	8005d76 <OLED_ShowChar+0x7a>
 8005d66:	f897 2020 	ldrb.w	r2, [r7, #32]
 8005d6a:	79b9      	ldrb	r1, [r7, #6]
 8005d6c:	79fb      	ldrb	r3, [r7, #7]
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f7ff ff6a 	bl	8005c48 <OLED_DrawPoint>
 8005d74:	e00c      	b.n	8005d90 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 8005d76:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	bf0c      	ite	eq
 8005d7e:	2301      	moveq	r3, #1
 8005d80:	2300      	movne	r3, #0
 8005d82:	b2db      	uxtb	r3, r3
 8005d84:	461a      	mov	r2, r3
 8005d86:	79b9      	ldrb	r1, [r7, #6]
 8005d88:	79fb      	ldrb	r3, [r7, #7]
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f7ff ff5c 	bl	8005c48 <OLED_DrawPoint>
			temp<<=1;
 8005d90:	7bfb      	ldrb	r3, [r7, #15]
 8005d92:	005b      	lsls	r3, r3, #1
 8005d94:	73fb      	strb	r3, [r7, #15]
			y++;
 8005d96:	79bb      	ldrb	r3, [r7, #6]
 8005d98:	3301      	adds	r3, #1
 8005d9a:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 8005d9c:	79ba      	ldrb	r2, [r7, #6]
 8005d9e:	7b3b      	ldrb	r3, [r7, #12]
 8005da0:	1ad2      	subs	r2, r2, r3
 8005da2:	793b      	ldrb	r3, [r7, #4]
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d105      	bne.n	8005db4 <OLED_ShowChar+0xb8>
			{
				y=y0;
 8005da8:	7b3b      	ldrb	r3, [r7, #12]
 8005daa:	71bb      	strb	r3, [r7, #6]
				x++;
 8005dac:	79fb      	ldrb	r3, [r7, #7]
 8005dae:	3301      	adds	r3, #1
 8005db0:	71fb      	strb	r3, [r7, #7]
				break;
 8005db2:	e005      	b.n	8005dc0 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 8005db4:	7b7b      	ldrb	r3, [r7, #13]
 8005db6:	3301      	adds	r3, #1
 8005db8:	737b      	strb	r3, [r7, #13]
 8005dba:	7b7b      	ldrb	r3, [r7, #13]
 8005dbc:	2b07      	cmp	r3, #7
 8005dbe:	d9ce      	bls.n	8005d5e <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 8005dc0:	7bbb      	ldrb	r3, [r7, #14]
 8005dc2:	3301      	adds	r3, #1
 8005dc4:	73bb      	strb	r3, [r7, #14]
 8005dc6:	7bba      	ldrb	r2, [r7, #14]
 8005dc8:	793b      	ldrb	r3, [r7, #4]
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	d3ad      	bcc.n	8005d2a <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 8005dce:	bf00      	nop
 8005dd0:	bf00      	nop
 8005dd2:	3714      	adds	r7, #20
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd90      	pop	{r4, r7, pc}
 8005dd8:	08006954 	.word	0x08006954
 8005ddc:	08006dc8 	.word	0x08006dc8

08005de0 <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 8005de0:	b580      	push	{r7, lr}
 8005de2:	b084      	sub	sp, #16
 8005de4:	af02      	add	r7, sp, #8
 8005de6:	4603      	mov	r3, r0
 8005de8:	603a      	str	r2, [r7, #0]
 8005dea:	71fb      	strb	r3, [r7, #7]
 8005dec:	460b      	mov	r3, r1
 8005dee:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 8005df0:	e01f      	b.n	8005e32 <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 8005df2:	79fb      	ldrb	r3, [r7, #7]
 8005df4:	2b7a      	cmp	r3, #122	; 0x7a
 8005df6:	d904      	bls.n	8005e02 <OLED_ShowString+0x22>
 8005df8:	2300      	movs	r3, #0
 8005dfa:	71fb      	strb	r3, [r7, #7]
 8005dfc:	79bb      	ldrb	r3, [r7, #6]
 8005dfe:	3310      	adds	r3, #16
 8005e00:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 8005e02:	79bb      	ldrb	r3, [r7, #6]
 8005e04:	2b3a      	cmp	r3, #58	; 0x3a
 8005e06:	d905      	bls.n	8005e14 <OLED_ShowString+0x34>
 8005e08:	2300      	movs	r3, #0
 8005e0a:	71fb      	strb	r3, [r7, #7]
 8005e0c:	79fb      	ldrb	r3, [r7, #7]
 8005e0e:	71bb      	strb	r3, [r7, #6]
 8005e10:	f7ff fef4 	bl	8005bfc <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	781a      	ldrb	r2, [r3, #0]
 8005e18:	79b9      	ldrb	r1, [r7, #6]
 8005e1a:	79f8      	ldrb	r0, [r7, #7]
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	9300      	str	r3, [sp, #0]
 8005e20:	230c      	movs	r3, #12
 8005e22:	f7ff ff6b 	bl	8005cfc <OLED_ShowChar>
        x+=8;
 8005e26:	79fb      	ldrb	r3, [r7, #7]
 8005e28:	3308      	adds	r3, #8
 8005e2a:	71fb      	strb	r3, [r7, #7]
        p++;
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	3301      	adds	r3, #1
 8005e30:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	781b      	ldrb	r3, [r3, #0]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d1db      	bne.n	8005df2 <OLED_ShowString+0x12>
    }  
}	 
 8005e3a:	bf00      	nop
 8005e3c:	bf00      	nop
 8005e3e:	3708      	adds	r7, #8
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}

08005e44 <OLED_Init>:

void OLED_Init(void)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 8005e48:	f7fb fd18 	bl	800187c <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 8005e4c:	4b41      	ldr	r3, [pc, #260]	; (8005f54 <OLED_Init+0x110>)
 8005e4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e50:	4a40      	ldr	r2, [pc, #256]	; (8005f54 <OLED_Init+0x110>)
 8005e52:	f023 0301 	bic.w	r3, r3, #1
 8005e56:	6713      	str	r3, [r2, #112]	; 0x70
 8005e58:	4b3e      	ldr	r3, [pc, #248]	; (8005f54 <OLED_Init+0x110>)
 8005e5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e5c:	4a3d      	ldr	r2, [pc, #244]	; (8005f54 <OLED_Init+0x110>)
 8005e5e:	f023 0304 	bic.w	r3, r3, #4
 8005e62:	6713      	str	r3, [r2, #112]	; 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 8005e64:	f7fb fd1e 	bl	80018a4 <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 8005e68:	2200      	movs	r2, #0
 8005e6a:	2180      	movs	r1, #128	; 0x80
 8005e6c:	483a      	ldr	r0, [pc, #232]	; (8005f58 <OLED_Init+0x114>)
 8005e6e:	f7fb fceb 	bl	8001848 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8005e72:	2064      	movs	r0, #100	; 0x64
 8005e74:	f7fb fa42 	bl	80012fc <HAL_Delay>
	OLED_RST_Set();
 8005e78:	2201      	movs	r2, #1
 8005e7a:	2180      	movs	r1, #128	; 0x80
 8005e7c:	4836      	ldr	r0, [pc, #216]	; (8005f58 <OLED_Init+0x114>)
 8005e7e:	f7fb fce3 	bl	8001848 <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 8005e82:	2100      	movs	r1, #0
 8005e84:	20ae      	movs	r0, #174	; 0xae
 8005e86:	f7ff fe6f 	bl	8005b68 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 8005e8a:	2100      	movs	r1, #0
 8005e8c:	20d5      	movs	r0, #213	; 0xd5
 8005e8e:	f7ff fe6b 	bl	8005b68 <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 8005e92:	2100      	movs	r1, #0
 8005e94:	2050      	movs	r0, #80	; 0x50
 8005e96:	f7ff fe67 	bl	8005b68 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 8005e9a:	2100      	movs	r1, #0
 8005e9c:	20a8      	movs	r0, #168	; 0xa8
 8005e9e:	f7ff fe63 	bl	8005b68 <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 8005ea2:	2100      	movs	r1, #0
 8005ea4:	203f      	movs	r0, #63	; 0x3f
 8005ea6:	f7ff fe5f 	bl	8005b68 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 8005eaa:	2100      	movs	r1, #0
 8005eac:	20d3      	movs	r0, #211	; 0xd3
 8005eae:	f7ff fe5b 	bl	8005b68 <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 8005eb2:	2100      	movs	r1, #0
 8005eb4:	2000      	movs	r0, #0
 8005eb6:	f7ff fe57 	bl	8005b68 <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 8005eba:	2100      	movs	r1, #0
 8005ebc:	2040      	movs	r0, #64	; 0x40
 8005ebe:	f7ff fe53 	bl	8005b68 <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 8005ec2:	2100      	movs	r1, #0
 8005ec4:	208d      	movs	r0, #141	; 0x8d
 8005ec6:	f7ff fe4f 	bl	8005b68 <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 8005eca:	2100      	movs	r1, #0
 8005ecc:	2014      	movs	r0, #20
 8005ece:	f7ff fe4b 	bl	8005b68 <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 8005ed2:	2100      	movs	r1, #0
 8005ed4:	2020      	movs	r0, #32
 8005ed6:	f7ff fe47 	bl	8005b68 <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 8005eda:	2100      	movs	r1, #0
 8005edc:	2002      	movs	r0, #2
 8005ede:	f7ff fe43 	bl	8005b68 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 8005ee2:	2100      	movs	r1, #0
 8005ee4:	20a1      	movs	r0, #161	; 0xa1
 8005ee6:	f7ff fe3f 	bl	8005b68 <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 8005eea:	2100      	movs	r1, #0
 8005eec:	20c0      	movs	r0, #192	; 0xc0
 8005eee:	f7ff fe3b 	bl	8005b68 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 8005ef2:	2100      	movs	r1, #0
 8005ef4:	20da      	movs	r0, #218	; 0xda
 8005ef6:	f7ff fe37 	bl	8005b68 <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 8005efa:	2100      	movs	r1, #0
 8005efc:	2012      	movs	r0, #18
 8005efe:	f7ff fe33 	bl	8005b68 <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 8005f02:	2100      	movs	r1, #0
 8005f04:	2081      	movs	r0, #129	; 0x81
 8005f06:	f7ff fe2f 	bl	8005b68 <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 8005f0a:	2100      	movs	r1, #0
 8005f0c:	20ef      	movs	r0, #239	; 0xef
 8005f0e:	f7ff fe2b 	bl	8005b68 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 8005f12:	2100      	movs	r1, #0
 8005f14:	20d9      	movs	r0, #217	; 0xd9
 8005f16:	f7ff fe27 	bl	8005b68 <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 8005f1a:	2100      	movs	r1, #0
 8005f1c:	20f1      	movs	r0, #241	; 0xf1
 8005f1e:	f7ff fe23 	bl	8005b68 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 8005f22:	2100      	movs	r1, #0
 8005f24:	20db      	movs	r0, #219	; 0xdb
 8005f26:	f7ff fe1f 	bl	8005b68 <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 8005f2a:	2100      	movs	r1, #0
 8005f2c:	2030      	movs	r0, #48	; 0x30
 8005f2e:	f7ff fe1b 	bl	8005b68 <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 8005f32:	2100      	movs	r1, #0
 8005f34:	20a4      	movs	r0, #164	; 0xa4
 8005f36:	f7ff fe17 	bl	8005b68 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 8005f3a:	2100      	movs	r1, #0
 8005f3c:	20a6      	movs	r0, #166	; 0xa6
 8005f3e:	f7ff fe13 	bl	8005b68 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 8005f42:	2100      	movs	r1, #0
 8005f44:	20af      	movs	r0, #175	; 0xaf
 8005f46:	f7ff fe0f 	bl	8005b68 <OLED_WR_Byte>
	OLED_Clear(); 
 8005f4a:	f7ff fe57 	bl	8005bfc <OLED_Clear>
 8005f4e:	bf00      	nop
 8005f50:	bd80      	pop	{r7, pc}
 8005f52:	bf00      	nop
 8005f54:	40023800 	.word	0x40023800
 8005f58:	40021000 	.word	0x40021000

08005f5c <__errno>:
 8005f5c:	4b01      	ldr	r3, [pc, #4]	; (8005f64 <__errno+0x8>)
 8005f5e:	6818      	ldr	r0, [r3, #0]
 8005f60:	4770      	bx	lr
 8005f62:	bf00      	nop
 8005f64:	20000010 	.word	0x20000010

08005f68 <__libc_init_array>:
 8005f68:	b570      	push	{r4, r5, r6, lr}
 8005f6a:	4d0d      	ldr	r5, [pc, #52]	; (8005fa0 <__libc_init_array+0x38>)
 8005f6c:	4c0d      	ldr	r4, [pc, #52]	; (8005fa4 <__libc_init_array+0x3c>)
 8005f6e:	1b64      	subs	r4, r4, r5
 8005f70:	10a4      	asrs	r4, r4, #2
 8005f72:	2600      	movs	r6, #0
 8005f74:	42a6      	cmp	r6, r4
 8005f76:	d109      	bne.n	8005f8c <__libc_init_array+0x24>
 8005f78:	4d0b      	ldr	r5, [pc, #44]	; (8005fa8 <__libc_init_array+0x40>)
 8005f7a:	4c0c      	ldr	r4, [pc, #48]	; (8005fac <__libc_init_array+0x44>)
 8005f7c:	f000 fc4e 	bl	800681c <_init>
 8005f80:	1b64      	subs	r4, r4, r5
 8005f82:	10a4      	asrs	r4, r4, #2
 8005f84:	2600      	movs	r6, #0
 8005f86:	42a6      	cmp	r6, r4
 8005f88:	d105      	bne.n	8005f96 <__libc_init_array+0x2e>
 8005f8a:	bd70      	pop	{r4, r5, r6, pc}
 8005f8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f90:	4798      	blx	r3
 8005f92:	3601      	adds	r6, #1
 8005f94:	e7ee      	b.n	8005f74 <__libc_init_array+0xc>
 8005f96:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f9a:	4798      	blx	r3
 8005f9c:	3601      	adds	r6, #1
 8005f9e:	e7f2      	b.n	8005f86 <__libc_init_array+0x1e>
 8005fa0:	080073f4 	.word	0x080073f4
 8005fa4:	080073f4 	.word	0x080073f4
 8005fa8:	080073f4 	.word	0x080073f4
 8005fac:	080073f8 	.word	0x080073f8

08005fb0 <memcpy>:
 8005fb0:	440a      	add	r2, r1
 8005fb2:	4291      	cmp	r1, r2
 8005fb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8005fb8:	d100      	bne.n	8005fbc <memcpy+0xc>
 8005fba:	4770      	bx	lr
 8005fbc:	b510      	push	{r4, lr}
 8005fbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005fc2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005fc6:	4291      	cmp	r1, r2
 8005fc8:	d1f9      	bne.n	8005fbe <memcpy+0xe>
 8005fca:	bd10      	pop	{r4, pc}

08005fcc <memset>:
 8005fcc:	4402      	add	r2, r0
 8005fce:	4603      	mov	r3, r0
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d100      	bne.n	8005fd6 <memset+0xa>
 8005fd4:	4770      	bx	lr
 8005fd6:	f803 1b01 	strb.w	r1, [r3], #1
 8005fda:	e7f9      	b.n	8005fd0 <memset+0x4>

08005fdc <siprintf>:
 8005fdc:	b40e      	push	{r1, r2, r3}
 8005fde:	b500      	push	{lr}
 8005fe0:	b09c      	sub	sp, #112	; 0x70
 8005fe2:	ab1d      	add	r3, sp, #116	; 0x74
 8005fe4:	9002      	str	r0, [sp, #8]
 8005fe6:	9006      	str	r0, [sp, #24]
 8005fe8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005fec:	4809      	ldr	r0, [pc, #36]	; (8006014 <siprintf+0x38>)
 8005fee:	9107      	str	r1, [sp, #28]
 8005ff0:	9104      	str	r1, [sp, #16]
 8005ff2:	4909      	ldr	r1, [pc, #36]	; (8006018 <siprintf+0x3c>)
 8005ff4:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ff8:	9105      	str	r1, [sp, #20]
 8005ffa:	6800      	ldr	r0, [r0, #0]
 8005ffc:	9301      	str	r3, [sp, #4]
 8005ffe:	a902      	add	r1, sp, #8
 8006000:	f000 f868 	bl	80060d4 <_svfiprintf_r>
 8006004:	9b02      	ldr	r3, [sp, #8]
 8006006:	2200      	movs	r2, #0
 8006008:	701a      	strb	r2, [r3, #0]
 800600a:	b01c      	add	sp, #112	; 0x70
 800600c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006010:	b003      	add	sp, #12
 8006012:	4770      	bx	lr
 8006014:	20000010 	.word	0x20000010
 8006018:	ffff0208 	.word	0xffff0208

0800601c <__ssputs_r>:
 800601c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006020:	688e      	ldr	r6, [r1, #8]
 8006022:	429e      	cmp	r6, r3
 8006024:	4682      	mov	sl, r0
 8006026:	460c      	mov	r4, r1
 8006028:	4690      	mov	r8, r2
 800602a:	461f      	mov	r7, r3
 800602c:	d838      	bhi.n	80060a0 <__ssputs_r+0x84>
 800602e:	898a      	ldrh	r2, [r1, #12]
 8006030:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006034:	d032      	beq.n	800609c <__ssputs_r+0x80>
 8006036:	6825      	ldr	r5, [r4, #0]
 8006038:	6909      	ldr	r1, [r1, #16]
 800603a:	eba5 0901 	sub.w	r9, r5, r1
 800603e:	6965      	ldr	r5, [r4, #20]
 8006040:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006044:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006048:	3301      	adds	r3, #1
 800604a:	444b      	add	r3, r9
 800604c:	106d      	asrs	r5, r5, #1
 800604e:	429d      	cmp	r5, r3
 8006050:	bf38      	it	cc
 8006052:	461d      	movcc	r5, r3
 8006054:	0553      	lsls	r3, r2, #21
 8006056:	d531      	bpl.n	80060bc <__ssputs_r+0xa0>
 8006058:	4629      	mov	r1, r5
 800605a:	f000 fb39 	bl	80066d0 <_malloc_r>
 800605e:	4606      	mov	r6, r0
 8006060:	b950      	cbnz	r0, 8006078 <__ssputs_r+0x5c>
 8006062:	230c      	movs	r3, #12
 8006064:	f8ca 3000 	str.w	r3, [sl]
 8006068:	89a3      	ldrh	r3, [r4, #12]
 800606a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800606e:	81a3      	strh	r3, [r4, #12]
 8006070:	f04f 30ff 	mov.w	r0, #4294967295
 8006074:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006078:	6921      	ldr	r1, [r4, #16]
 800607a:	464a      	mov	r2, r9
 800607c:	f7ff ff98 	bl	8005fb0 <memcpy>
 8006080:	89a3      	ldrh	r3, [r4, #12]
 8006082:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006086:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800608a:	81a3      	strh	r3, [r4, #12]
 800608c:	6126      	str	r6, [r4, #16]
 800608e:	6165      	str	r5, [r4, #20]
 8006090:	444e      	add	r6, r9
 8006092:	eba5 0509 	sub.w	r5, r5, r9
 8006096:	6026      	str	r6, [r4, #0]
 8006098:	60a5      	str	r5, [r4, #8]
 800609a:	463e      	mov	r6, r7
 800609c:	42be      	cmp	r6, r7
 800609e:	d900      	bls.n	80060a2 <__ssputs_r+0x86>
 80060a0:	463e      	mov	r6, r7
 80060a2:	4632      	mov	r2, r6
 80060a4:	6820      	ldr	r0, [r4, #0]
 80060a6:	4641      	mov	r1, r8
 80060a8:	f000 faa8 	bl	80065fc <memmove>
 80060ac:	68a3      	ldr	r3, [r4, #8]
 80060ae:	6822      	ldr	r2, [r4, #0]
 80060b0:	1b9b      	subs	r3, r3, r6
 80060b2:	4432      	add	r2, r6
 80060b4:	60a3      	str	r3, [r4, #8]
 80060b6:	6022      	str	r2, [r4, #0]
 80060b8:	2000      	movs	r0, #0
 80060ba:	e7db      	b.n	8006074 <__ssputs_r+0x58>
 80060bc:	462a      	mov	r2, r5
 80060be:	f000 fb61 	bl	8006784 <_realloc_r>
 80060c2:	4606      	mov	r6, r0
 80060c4:	2800      	cmp	r0, #0
 80060c6:	d1e1      	bne.n	800608c <__ssputs_r+0x70>
 80060c8:	6921      	ldr	r1, [r4, #16]
 80060ca:	4650      	mov	r0, sl
 80060cc:	f000 fab0 	bl	8006630 <_free_r>
 80060d0:	e7c7      	b.n	8006062 <__ssputs_r+0x46>
	...

080060d4 <_svfiprintf_r>:
 80060d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060d8:	4698      	mov	r8, r3
 80060da:	898b      	ldrh	r3, [r1, #12]
 80060dc:	061b      	lsls	r3, r3, #24
 80060de:	b09d      	sub	sp, #116	; 0x74
 80060e0:	4607      	mov	r7, r0
 80060e2:	460d      	mov	r5, r1
 80060e4:	4614      	mov	r4, r2
 80060e6:	d50e      	bpl.n	8006106 <_svfiprintf_r+0x32>
 80060e8:	690b      	ldr	r3, [r1, #16]
 80060ea:	b963      	cbnz	r3, 8006106 <_svfiprintf_r+0x32>
 80060ec:	2140      	movs	r1, #64	; 0x40
 80060ee:	f000 faef 	bl	80066d0 <_malloc_r>
 80060f2:	6028      	str	r0, [r5, #0]
 80060f4:	6128      	str	r0, [r5, #16]
 80060f6:	b920      	cbnz	r0, 8006102 <_svfiprintf_r+0x2e>
 80060f8:	230c      	movs	r3, #12
 80060fa:	603b      	str	r3, [r7, #0]
 80060fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006100:	e0d1      	b.n	80062a6 <_svfiprintf_r+0x1d2>
 8006102:	2340      	movs	r3, #64	; 0x40
 8006104:	616b      	str	r3, [r5, #20]
 8006106:	2300      	movs	r3, #0
 8006108:	9309      	str	r3, [sp, #36]	; 0x24
 800610a:	2320      	movs	r3, #32
 800610c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006110:	f8cd 800c 	str.w	r8, [sp, #12]
 8006114:	2330      	movs	r3, #48	; 0x30
 8006116:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80062c0 <_svfiprintf_r+0x1ec>
 800611a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800611e:	f04f 0901 	mov.w	r9, #1
 8006122:	4623      	mov	r3, r4
 8006124:	469a      	mov	sl, r3
 8006126:	f813 2b01 	ldrb.w	r2, [r3], #1
 800612a:	b10a      	cbz	r2, 8006130 <_svfiprintf_r+0x5c>
 800612c:	2a25      	cmp	r2, #37	; 0x25
 800612e:	d1f9      	bne.n	8006124 <_svfiprintf_r+0x50>
 8006130:	ebba 0b04 	subs.w	fp, sl, r4
 8006134:	d00b      	beq.n	800614e <_svfiprintf_r+0x7a>
 8006136:	465b      	mov	r3, fp
 8006138:	4622      	mov	r2, r4
 800613a:	4629      	mov	r1, r5
 800613c:	4638      	mov	r0, r7
 800613e:	f7ff ff6d 	bl	800601c <__ssputs_r>
 8006142:	3001      	adds	r0, #1
 8006144:	f000 80aa 	beq.w	800629c <_svfiprintf_r+0x1c8>
 8006148:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800614a:	445a      	add	r2, fp
 800614c:	9209      	str	r2, [sp, #36]	; 0x24
 800614e:	f89a 3000 	ldrb.w	r3, [sl]
 8006152:	2b00      	cmp	r3, #0
 8006154:	f000 80a2 	beq.w	800629c <_svfiprintf_r+0x1c8>
 8006158:	2300      	movs	r3, #0
 800615a:	f04f 32ff 	mov.w	r2, #4294967295
 800615e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006162:	f10a 0a01 	add.w	sl, sl, #1
 8006166:	9304      	str	r3, [sp, #16]
 8006168:	9307      	str	r3, [sp, #28]
 800616a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800616e:	931a      	str	r3, [sp, #104]	; 0x68
 8006170:	4654      	mov	r4, sl
 8006172:	2205      	movs	r2, #5
 8006174:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006178:	4851      	ldr	r0, [pc, #324]	; (80062c0 <_svfiprintf_r+0x1ec>)
 800617a:	f7fa f829 	bl	80001d0 <memchr>
 800617e:	9a04      	ldr	r2, [sp, #16]
 8006180:	b9d8      	cbnz	r0, 80061ba <_svfiprintf_r+0xe6>
 8006182:	06d0      	lsls	r0, r2, #27
 8006184:	bf44      	itt	mi
 8006186:	2320      	movmi	r3, #32
 8006188:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800618c:	0711      	lsls	r1, r2, #28
 800618e:	bf44      	itt	mi
 8006190:	232b      	movmi	r3, #43	; 0x2b
 8006192:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006196:	f89a 3000 	ldrb.w	r3, [sl]
 800619a:	2b2a      	cmp	r3, #42	; 0x2a
 800619c:	d015      	beq.n	80061ca <_svfiprintf_r+0xf6>
 800619e:	9a07      	ldr	r2, [sp, #28]
 80061a0:	4654      	mov	r4, sl
 80061a2:	2000      	movs	r0, #0
 80061a4:	f04f 0c0a 	mov.w	ip, #10
 80061a8:	4621      	mov	r1, r4
 80061aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80061ae:	3b30      	subs	r3, #48	; 0x30
 80061b0:	2b09      	cmp	r3, #9
 80061b2:	d94e      	bls.n	8006252 <_svfiprintf_r+0x17e>
 80061b4:	b1b0      	cbz	r0, 80061e4 <_svfiprintf_r+0x110>
 80061b6:	9207      	str	r2, [sp, #28]
 80061b8:	e014      	b.n	80061e4 <_svfiprintf_r+0x110>
 80061ba:	eba0 0308 	sub.w	r3, r0, r8
 80061be:	fa09 f303 	lsl.w	r3, r9, r3
 80061c2:	4313      	orrs	r3, r2
 80061c4:	9304      	str	r3, [sp, #16]
 80061c6:	46a2      	mov	sl, r4
 80061c8:	e7d2      	b.n	8006170 <_svfiprintf_r+0x9c>
 80061ca:	9b03      	ldr	r3, [sp, #12]
 80061cc:	1d19      	adds	r1, r3, #4
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	9103      	str	r1, [sp, #12]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	bfbb      	ittet	lt
 80061d6:	425b      	neglt	r3, r3
 80061d8:	f042 0202 	orrlt.w	r2, r2, #2
 80061dc:	9307      	strge	r3, [sp, #28]
 80061de:	9307      	strlt	r3, [sp, #28]
 80061e0:	bfb8      	it	lt
 80061e2:	9204      	strlt	r2, [sp, #16]
 80061e4:	7823      	ldrb	r3, [r4, #0]
 80061e6:	2b2e      	cmp	r3, #46	; 0x2e
 80061e8:	d10c      	bne.n	8006204 <_svfiprintf_r+0x130>
 80061ea:	7863      	ldrb	r3, [r4, #1]
 80061ec:	2b2a      	cmp	r3, #42	; 0x2a
 80061ee:	d135      	bne.n	800625c <_svfiprintf_r+0x188>
 80061f0:	9b03      	ldr	r3, [sp, #12]
 80061f2:	1d1a      	adds	r2, r3, #4
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	9203      	str	r2, [sp, #12]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	bfb8      	it	lt
 80061fc:	f04f 33ff 	movlt.w	r3, #4294967295
 8006200:	3402      	adds	r4, #2
 8006202:	9305      	str	r3, [sp, #20]
 8006204:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80062d0 <_svfiprintf_r+0x1fc>
 8006208:	7821      	ldrb	r1, [r4, #0]
 800620a:	2203      	movs	r2, #3
 800620c:	4650      	mov	r0, sl
 800620e:	f7f9 ffdf 	bl	80001d0 <memchr>
 8006212:	b140      	cbz	r0, 8006226 <_svfiprintf_r+0x152>
 8006214:	2340      	movs	r3, #64	; 0x40
 8006216:	eba0 000a 	sub.w	r0, r0, sl
 800621a:	fa03 f000 	lsl.w	r0, r3, r0
 800621e:	9b04      	ldr	r3, [sp, #16]
 8006220:	4303      	orrs	r3, r0
 8006222:	3401      	adds	r4, #1
 8006224:	9304      	str	r3, [sp, #16]
 8006226:	f814 1b01 	ldrb.w	r1, [r4], #1
 800622a:	4826      	ldr	r0, [pc, #152]	; (80062c4 <_svfiprintf_r+0x1f0>)
 800622c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006230:	2206      	movs	r2, #6
 8006232:	f7f9 ffcd 	bl	80001d0 <memchr>
 8006236:	2800      	cmp	r0, #0
 8006238:	d038      	beq.n	80062ac <_svfiprintf_r+0x1d8>
 800623a:	4b23      	ldr	r3, [pc, #140]	; (80062c8 <_svfiprintf_r+0x1f4>)
 800623c:	bb1b      	cbnz	r3, 8006286 <_svfiprintf_r+0x1b2>
 800623e:	9b03      	ldr	r3, [sp, #12]
 8006240:	3307      	adds	r3, #7
 8006242:	f023 0307 	bic.w	r3, r3, #7
 8006246:	3308      	adds	r3, #8
 8006248:	9303      	str	r3, [sp, #12]
 800624a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800624c:	4433      	add	r3, r6
 800624e:	9309      	str	r3, [sp, #36]	; 0x24
 8006250:	e767      	b.n	8006122 <_svfiprintf_r+0x4e>
 8006252:	fb0c 3202 	mla	r2, ip, r2, r3
 8006256:	460c      	mov	r4, r1
 8006258:	2001      	movs	r0, #1
 800625a:	e7a5      	b.n	80061a8 <_svfiprintf_r+0xd4>
 800625c:	2300      	movs	r3, #0
 800625e:	3401      	adds	r4, #1
 8006260:	9305      	str	r3, [sp, #20]
 8006262:	4619      	mov	r1, r3
 8006264:	f04f 0c0a 	mov.w	ip, #10
 8006268:	4620      	mov	r0, r4
 800626a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800626e:	3a30      	subs	r2, #48	; 0x30
 8006270:	2a09      	cmp	r2, #9
 8006272:	d903      	bls.n	800627c <_svfiprintf_r+0x1a8>
 8006274:	2b00      	cmp	r3, #0
 8006276:	d0c5      	beq.n	8006204 <_svfiprintf_r+0x130>
 8006278:	9105      	str	r1, [sp, #20]
 800627a:	e7c3      	b.n	8006204 <_svfiprintf_r+0x130>
 800627c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006280:	4604      	mov	r4, r0
 8006282:	2301      	movs	r3, #1
 8006284:	e7f0      	b.n	8006268 <_svfiprintf_r+0x194>
 8006286:	ab03      	add	r3, sp, #12
 8006288:	9300      	str	r3, [sp, #0]
 800628a:	462a      	mov	r2, r5
 800628c:	4b0f      	ldr	r3, [pc, #60]	; (80062cc <_svfiprintf_r+0x1f8>)
 800628e:	a904      	add	r1, sp, #16
 8006290:	4638      	mov	r0, r7
 8006292:	f3af 8000 	nop.w
 8006296:	1c42      	adds	r2, r0, #1
 8006298:	4606      	mov	r6, r0
 800629a:	d1d6      	bne.n	800624a <_svfiprintf_r+0x176>
 800629c:	89ab      	ldrh	r3, [r5, #12]
 800629e:	065b      	lsls	r3, r3, #25
 80062a0:	f53f af2c 	bmi.w	80060fc <_svfiprintf_r+0x28>
 80062a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80062a6:	b01d      	add	sp, #116	; 0x74
 80062a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062ac:	ab03      	add	r3, sp, #12
 80062ae:	9300      	str	r3, [sp, #0]
 80062b0:	462a      	mov	r2, r5
 80062b2:	4b06      	ldr	r3, [pc, #24]	; (80062cc <_svfiprintf_r+0x1f8>)
 80062b4:	a904      	add	r1, sp, #16
 80062b6:	4638      	mov	r0, r7
 80062b8:	f000 f87a 	bl	80063b0 <_printf_i>
 80062bc:	e7eb      	b.n	8006296 <_svfiprintf_r+0x1c2>
 80062be:	bf00      	nop
 80062c0:	080073b8 	.word	0x080073b8
 80062c4:	080073c2 	.word	0x080073c2
 80062c8:	00000000 	.word	0x00000000
 80062cc:	0800601d 	.word	0x0800601d
 80062d0:	080073be 	.word	0x080073be

080062d4 <_printf_common>:
 80062d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062d8:	4616      	mov	r6, r2
 80062da:	4699      	mov	r9, r3
 80062dc:	688a      	ldr	r2, [r1, #8]
 80062de:	690b      	ldr	r3, [r1, #16]
 80062e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80062e4:	4293      	cmp	r3, r2
 80062e6:	bfb8      	it	lt
 80062e8:	4613      	movlt	r3, r2
 80062ea:	6033      	str	r3, [r6, #0]
 80062ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80062f0:	4607      	mov	r7, r0
 80062f2:	460c      	mov	r4, r1
 80062f4:	b10a      	cbz	r2, 80062fa <_printf_common+0x26>
 80062f6:	3301      	adds	r3, #1
 80062f8:	6033      	str	r3, [r6, #0]
 80062fa:	6823      	ldr	r3, [r4, #0]
 80062fc:	0699      	lsls	r1, r3, #26
 80062fe:	bf42      	ittt	mi
 8006300:	6833      	ldrmi	r3, [r6, #0]
 8006302:	3302      	addmi	r3, #2
 8006304:	6033      	strmi	r3, [r6, #0]
 8006306:	6825      	ldr	r5, [r4, #0]
 8006308:	f015 0506 	ands.w	r5, r5, #6
 800630c:	d106      	bne.n	800631c <_printf_common+0x48>
 800630e:	f104 0a19 	add.w	sl, r4, #25
 8006312:	68e3      	ldr	r3, [r4, #12]
 8006314:	6832      	ldr	r2, [r6, #0]
 8006316:	1a9b      	subs	r3, r3, r2
 8006318:	42ab      	cmp	r3, r5
 800631a:	dc26      	bgt.n	800636a <_printf_common+0x96>
 800631c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006320:	1e13      	subs	r3, r2, #0
 8006322:	6822      	ldr	r2, [r4, #0]
 8006324:	bf18      	it	ne
 8006326:	2301      	movne	r3, #1
 8006328:	0692      	lsls	r2, r2, #26
 800632a:	d42b      	bmi.n	8006384 <_printf_common+0xb0>
 800632c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006330:	4649      	mov	r1, r9
 8006332:	4638      	mov	r0, r7
 8006334:	47c0      	blx	r8
 8006336:	3001      	adds	r0, #1
 8006338:	d01e      	beq.n	8006378 <_printf_common+0xa4>
 800633a:	6823      	ldr	r3, [r4, #0]
 800633c:	68e5      	ldr	r5, [r4, #12]
 800633e:	6832      	ldr	r2, [r6, #0]
 8006340:	f003 0306 	and.w	r3, r3, #6
 8006344:	2b04      	cmp	r3, #4
 8006346:	bf08      	it	eq
 8006348:	1aad      	subeq	r5, r5, r2
 800634a:	68a3      	ldr	r3, [r4, #8]
 800634c:	6922      	ldr	r2, [r4, #16]
 800634e:	bf0c      	ite	eq
 8006350:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006354:	2500      	movne	r5, #0
 8006356:	4293      	cmp	r3, r2
 8006358:	bfc4      	itt	gt
 800635a:	1a9b      	subgt	r3, r3, r2
 800635c:	18ed      	addgt	r5, r5, r3
 800635e:	2600      	movs	r6, #0
 8006360:	341a      	adds	r4, #26
 8006362:	42b5      	cmp	r5, r6
 8006364:	d11a      	bne.n	800639c <_printf_common+0xc8>
 8006366:	2000      	movs	r0, #0
 8006368:	e008      	b.n	800637c <_printf_common+0xa8>
 800636a:	2301      	movs	r3, #1
 800636c:	4652      	mov	r2, sl
 800636e:	4649      	mov	r1, r9
 8006370:	4638      	mov	r0, r7
 8006372:	47c0      	blx	r8
 8006374:	3001      	adds	r0, #1
 8006376:	d103      	bne.n	8006380 <_printf_common+0xac>
 8006378:	f04f 30ff 	mov.w	r0, #4294967295
 800637c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006380:	3501      	adds	r5, #1
 8006382:	e7c6      	b.n	8006312 <_printf_common+0x3e>
 8006384:	18e1      	adds	r1, r4, r3
 8006386:	1c5a      	adds	r2, r3, #1
 8006388:	2030      	movs	r0, #48	; 0x30
 800638a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800638e:	4422      	add	r2, r4
 8006390:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006394:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006398:	3302      	adds	r3, #2
 800639a:	e7c7      	b.n	800632c <_printf_common+0x58>
 800639c:	2301      	movs	r3, #1
 800639e:	4622      	mov	r2, r4
 80063a0:	4649      	mov	r1, r9
 80063a2:	4638      	mov	r0, r7
 80063a4:	47c0      	blx	r8
 80063a6:	3001      	adds	r0, #1
 80063a8:	d0e6      	beq.n	8006378 <_printf_common+0xa4>
 80063aa:	3601      	adds	r6, #1
 80063ac:	e7d9      	b.n	8006362 <_printf_common+0x8e>
	...

080063b0 <_printf_i>:
 80063b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80063b4:	460c      	mov	r4, r1
 80063b6:	4691      	mov	r9, r2
 80063b8:	7e27      	ldrb	r7, [r4, #24]
 80063ba:	990c      	ldr	r1, [sp, #48]	; 0x30
 80063bc:	2f78      	cmp	r7, #120	; 0x78
 80063be:	4680      	mov	r8, r0
 80063c0:	469a      	mov	sl, r3
 80063c2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80063c6:	d807      	bhi.n	80063d8 <_printf_i+0x28>
 80063c8:	2f62      	cmp	r7, #98	; 0x62
 80063ca:	d80a      	bhi.n	80063e2 <_printf_i+0x32>
 80063cc:	2f00      	cmp	r7, #0
 80063ce:	f000 80d8 	beq.w	8006582 <_printf_i+0x1d2>
 80063d2:	2f58      	cmp	r7, #88	; 0x58
 80063d4:	f000 80a3 	beq.w	800651e <_printf_i+0x16e>
 80063d8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80063dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80063e0:	e03a      	b.n	8006458 <_printf_i+0xa8>
 80063e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80063e6:	2b15      	cmp	r3, #21
 80063e8:	d8f6      	bhi.n	80063d8 <_printf_i+0x28>
 80063ea:	a001      	add	r0, pc, #4	; (adr r0, 80063f0 <_printf_i+0x40>)
 80063ec:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80063f0:	08006449 	.word	0x08006449
 80063f4:	0800645d 	.word	0x0800645d
 80063f8:	080063d9 	.word	0x080063d9
 80063fc:	080063d9 	.word	0x080063d9
 8006400:	080063d9 	.word	0x080063d9
 8006404:	080063d9 	.word	0x080063d9
 8006408:	0800645d 	.word	0x0800645d
 800640c:	080063d9 	.word	0x080063d9
 8006410:	080063d9 	.word	0x080063d9
 8006414:	080063d9 	.word	0x080063d9
 8006418:	080063d9 	.word	0x080063d9
 800641c:	08006569 	.word	0x08006569
 8006420:	0800648d 	.word	0x0800648d
 8006424:	0800654b 	.word	0x0800654b
 8006428:	080063d9 	.word	0x080063d9
 800642c:	080063d9 	.word	0x080063d9
 8006430:	0800658b 	.word	0x0800658b
 8006434:	080063d9 	.word	0x080063d9
 8006438:	0800648d 	.word	0x0800648d
 800643c:	080063d9 	.word	0x080063d9
 8006440:	080063d9 	.word	0x080063d9
 8006444:	08006553 	.word	0x08006553
 8006448:	680b      	ldr	r3, [r1, #0]
 800644a:	1d1a      	adds	r2, r3, #4
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	600a      	str	r2, [r1, #0]
 8006450:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006454:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006458:	2301      	movs	r3, #1
 800645a:	e0a3      	b.n	80065a4 <_printf_i+0x1f4>
 800645c:	6825      	ldr	r5, [r4, #0]
 800645e:	6808      	ldr	r0, [r1, #0]
 8006460:	062e      	lsls	r6, r5, #24
 8006462:	f100 0304 	add.w	r3, r0, #4
 8006466:	d50a      	bpl.n	800647e <_printf_i+0xce>
 8006468:	6805      	ldr	r5, [r0, #0]
 800646a:	600b      	str	r3, [r1, #0]
 800646c:	2d00      	cmp	r5, #0
 800646e:	da03      	bge.n	8006478 <_printf_i+0xc8>
 8006470:	232d      	movs	r3, #45	; 0x2d
 8006472:	426d      	negs	r5, r5
 8006474:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006478:	485e      	ldr	r0, [pc, #376]	; (80065f4 <_printf_i+0x244>)
 800647a:	230a      	movs	r3, #10
 800647c:	e019      	b.n	80064b2 <_printf_i+0x102>
 800647e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006482:	6805      	ldr	r5, [r0, #0]
 8006484:	600b      	str	r3, [r1, #0]
 8006486:	bf18      	it	ne
 8006488:	b22d      	sxthne	r5, r5
 800648a:	e7ef      	b.n	800646c <_printf_i+0xbc>
 800648c:	680b      	ldr	r3, [r1, #0]
 800648e:	6825      	ldr	r5, [r4, #0]
 8006490:	1d18      	adds	r0, r3, #4
 8006492:	6008      	str	r0, [r1, #0]
 8006494:	0628      	lsls	r0, r5, #24
 8006496:	d501      	bpl.n	800649c <_printf_i+0xec>
 8006498:	681d      	ldr	r5, [r3, #0]
 800649a:	e002      	b.n	80064a2 <_printf_i+0xf2>
 800649c:	0669      	lsls	r1, r5, #25
 800649e:	d5fb      	bpl.n	8006498 <_printf_i+0xe8>
 80064a0:	881d      	ldrh	r5, [r3, #0]
 80064a2:	4854      	ldr	r0, [pc, #336]	; (80065f4 <_printf_i+0x244>)
 80064a4:	2f6f      	cmp	r7, #111	; 0x6f
 80064a6:	bf0c      	ite	eq
 80064a8:	2308      	moveq	r3, #8
 80064aa:	230a      	movne	r3, #10
 80064ac:	2100      	movs	r1, #0
 80064ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80064b2:	6866      	ldr	r6, [r4, #4]
 80064b4:	60a6      	str	r6, [r4, #8]
 80064b6:	2e00      	cmp	r6, #0
 80064b8:	bfa2      	ittt	ge
 80064ba:	6821      	ldrge	r1, [r4, #0]
 80064bc:	f021 0104 	bicge.w	r1, r1, #4
 80064c0:	6021      	strge	r1, [r4, #0]
 80064c2:	b90d      	cbnz	r5, 80064c8 <_printf_i+0x118>
 80064c4:	2e00      	cmp	r6, #0
 80064c6:	d04d      	beq.n	8006564 <_printf_i+0x1b4>
 80064c8:	4616      	mov	r6, r2
 80064ca:	fbb5 f1f3 	udiv	r1, r5, r3
 80064ce:	fb03 5711 	mls	r7, r3, r1, r5
 80064d2:	5dc7      	ldrb	r7, [r0, r7]
 80064d4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80064d8:	462f      	mov	r7, r5
 80064da:	42bb      	cmp	r3, r7
 80064dc:	460d      	mov	r5, r1
 80064de:	d9f4      	bls.n	80064ca <_printf_i+0x11a>
 80064e0:	2b08      	cmp	r3, #8
 80064e2:	d10b      	bne.n	80064fc <_printf_i+0x14c>
 80064e4:	6823      	ldr	r3, [r4, #0]
 80064e6:	07df      	lsls	r7, r3, #31
 80064e8:	d508      	bpl.n	80064fc <_printf_i+0x14c>
 80064ea:	6923      	ldr	r3, [r4, #16]
 80064ec:	6861      	ldr	r1, [r4, #4]
 80064ee:	4299      	cmp	r1, r3
 80064f0:	bfde      	ittt	le
 80064f2:	2330      	movle	r3, #48	; 0x30
 80064f4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80064f8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80064fc:	1b92      	subs	r2, r2, r6
 80064fe:	6122      	str	r2, [r4, #16]
 8006500:	f8cd a000 	str.w	sl, [sp]
 8006504:	464b      	mov	r3, r9
 8006506:	aa03      	add	r2, sp, #12
 8006508:	4621      	mov	r1, r4
 800650a:	4640      	mov	r0, r8
 800650c:	f7ff fee2 	bl	80062d4 <_printf_common>
 8006510:	3001      	adds	r0, #1
 8006512:	d14c      	bne.n	80065ae <_printf_i+0x1fe>
 8006514:	f04f 30ff 	mov.w	r0, #4294967295
 8006518:	b004      	add	sp, #16
 800651a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800651e:	4835      	ldr	r0, [pc, #212]	; (80065f4 <_printf_i+0x244>)
 8006520:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006524:	6823      	ldr	r3, [r4, #0]
 8006526:	680e      	ldr	r6, [r1, #0]
 8006528:	061f      	lsls	r7, r3, #24
 800652a:	f856 5b04 	ldr.w	r5, [r6], #4
 800652e:	600e      	str	r6, [r1, #0]
 8006530:	d514      	bpl.n	800655c <_printf_i+0x1ac>
 8006532:	07d9      	lsls	r1, r3, #31
 8006534:	bf44      	itt	mi
 8006536:	f043 0320 	orrmi.w	r3, r3, #32
 800653a:	6023      	strmi	r3, [r4, #0]
 800653c:	b91d      	cbnz	r5, 8006546 <_printf_i+0x196>
 800653e:	6823      	ldr	r3, [r4, #0]
 8006540:	f023 0320 	bic.w	r3, r3, #32
 8006544:	6023      	str	r3, [r4, #0]
 8006546:	2310      	movs	r3, #16
 8006548:	e7b0      	b.n	80064ac <_printf_i+0xfc>
 800654a:	6823      	ldr	r3, [r4, #0]
 800654c:	f043 0320 	orr.w	r3, r3, #32
 8006550:	6023      	str	r3, [r4, #0]
 8006552:	2378      	movs	r3, #120	; 0x78
 8006554:	4828      	ldr	r0, [pc, #160]	; (80065f8 <_printf_i+0x248>)
 8006556:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800655a:	e7e3      	b.n	8006524 <_printf_i+0x174>
 800655c:	065e      	lsls	r6, r3, #25
 800655e:	bf48      	it	mi
 8006560:	b2ad      	uxthmi	r5, r5
 8006562:	e7e6      	b.n	8006532 <_printf_i+0x182>
 8006564:	4616      	mov	r6, r2
 8006566:	e7bb      	b.n	80064e0 <_printf_i+0x130>
 8006568:	680b      	ldr	r3, [r1, #0]
 800656a:	6826      	ldr	r6, [r4, #0]
 800656c:	6960      	ldr	r0, [r4, #20]
 800656e:	1d1d      	adds	r5, r3, #4
 8006570:	600d      	str	r5, [r1, #0]
 8006572:	0635      	lsls	r5, r6, #24
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	d501      	bpl.n	800657c <_printf_i+0x1cc>
 8006578:	6018      	str	r0, [r3, #0]
 800657a:	e002      	b.n	8006582 <_printf_i+0x1d2>
 800657c:	0671      	lsls	r1, r6, #25
 800657e:	d5fb      	bpl.n	8006578 <_printf_i+0x1c8>
 8006580:	8018      	strh	r0, [r3, #0]
 8006582:	2300      	movs	r3, #0
 8006584:	6123      	str	r3, [r4, #16]
 8006586:	4616      	mov	r6, r2
 8006588:	e7ba      	b.n	8006500 <_printf_i+0x150>
 800658a:	680b      	ldr	r3, [r1, #0]
 800658c:	1d1a      	adds	r2, r3, #4
 800658e:	600a      	str	r2, [r1, #0]
 8006590:	681e      	ldr	r6, [r3, #0]
 8006592:	6862      	ldr	r2, [r4, #4]
 8006594:	2100      	movs	r1, #0
 8006596:	4630      	mov	r0, r6
 8006598:	f7f9 fe1a 	bl	80001d0 <memchr>
 800659c:	b108      	cbz	r0, 80065a2 <_printf_i+0x1f2>
 800659e:	1b80      	subs	r0, r0, r6
 80065a0:	6060      	str	r0, [r4, #4]
 80065a2:	6863      	ldr	r3, [r4, #4]
 80065a4:	6123      	str	r3, [r4, #16]
 80065a6:	2300      	movs	r3, #0
 80065a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065ac:	e7a8      	b.n	8006500 <_printf_i+0x150>
 80065ae:	6923      	ldr	r3, [r4, #16]
 80065b0:	4632      	mov	r2, r6
 80065b2:	4649      	mov	r1, r9
 80065b4:	4640      	mov	r0, r8
 80065b6:	47d0      	blx	sl
 80065b8:	3001      	adds	r0, #1
 80065ba:	d0ab      	beq.n	8006514 <_printf_i+0x164>
 80065bc:	6823      	ldr	r3, [r4, #0]
 80065be:	079b      	lsls	r3, r3, #30
 80065c0:	d413      	bmi.n	80065ea <_printf_i+0x23a>
 80065c2:	68e0      	ldr	r0, [r4, #12]
 80065c4:	9b03      	ldr	r3, [sp, #12]
 80065c6:	4298      	cmp	r0, r3
 80065c8:	bfb8      	it	lt
 80065ca:	4618      	movlt	r0, r3
 80065cc:	e7a4      	b.n	8006518 <_printf_i+0x168>
 80065ce:	2301      	movs	r3, #1
 80065d0:	4632      	mov	r2, r6
 80065d2:	4649      	mov	r1, r9
 80065d4:	4640      	mov	r0, r8
 80065d6:	47d0      	blx	sl
 80065d8:	3001      	adds	r0, #1
 80065da:	d09b      	beq.n	8006514 <_printf_i+0x164>
 80065dc:	3501      	adds	r5, #1
 80065de:	68e3      	ldr	r3, [r4, #12]
 80065e0:	9903      	ldr	r1, [sp, #12]
 80065e2:	1a5b      	subs	r3, r3, r1
 80065e4:	42ab      	cmp	r3, r5
 80065e6:	dcf2      	bgt.n	80065ce <_printf_i+0x21e>
 80065e8:	e7eb      	b.n	80065c2 <_printf_i+0x212>
 80065ea:	2500      	movs	r5, #0
 80065ec:	f104 0619 	add.w	r6, r4, #25
 80065f0:	e7f5      	b.n	80065de <_printf_i+0x22e>
 80065f2:	bf00      	nop
 80065f4:	080073c9 	.word	0x080073c9
 80065f8:	080073da 	.word	0x080073da

080065fc <memmove>:
 80065fc:	4288      	cmp	r0, r1
 80065fe:	b510      	push	{r4, lr}
 8006600:	eb01 0402 	add.w	r4, r1, r2
 8006604:	d902      	bls.n	800660c <memmove+0x10>
 8006606:	4284      	cmp	r4, r0
 8006608:	4623      	mov	r3, r4
 800660a:	d807      	bhi.n	800661c <memmove+0x20>
 800660c:	1e43      	subs	r3, r0, #1
 800660e:	42a1      	cmp	r1, r4
 8006610:	d008      	beq.n	8006624 <memmove+0x28>
 8006612:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006616:	f803 2f01 	strb.w	r2, [r3, #1]!
 800661a:	e7f8      	b.n	800660e <memmove+0x12>
 800661c:	4402      	add	r2, r0
 800661e:	4601      	mov	r1, r0
 8006620:	428a      	cmp	r2, r1
 8006622:	d100      	bne.n	8006626 <memmove+0x2a>
 8006624:	bd10      	pop	{r4, pc}
 8006626:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800662a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800662e:	e7f7      	b.n	8006620 <memmove+0x24>

08006630 <_free_r>:
 8006630:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006632:	2900      	cmp	r1, #0
 8006634:	d048      	beq.n	80066c8 <_free_r+0x98>
 8006636:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800663a:	9001      	str	r0, [sp, #4]
 800663c:	2b00      	cmp	r3, #0
 800663e:	f1a1 0404 	sub.w	r4, r1, #4
 8006642:	bfb8      	it	lt
 8006644:	18e4      	addlt	r4, r4, r3
 8006646:	f000 f8d3 	bl	80067f0 <__malloc_lock>
 800664a:	4a20      	ldr	r2, [pc, #128]	; (80066cc <_free_r+0x9c>)
 800664c:	9801      	ldr	r0, [sp, #4]
 800664e:	6813      	ldr	r3, [r2, #0]
 8006650:	4615      	mov	r5, r2
 8006652:	b933      	cbnz	r3, 8006662 <_free_r+0x32>
 8006654:	6063      	str	r3, [r4, #4]
 8006656:	6014      	str	r4, [r2, #0]
 8006658:	b003      	add	sp, #12
 800665a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800665e:	f000 b8cd 	b.w	80067fc <__malloc_unlock>
 8006662:	42a3      	cmp	r3, r4
 8006664:	d90b      	bls.n	800667e <_free_r+0x4e>
 8006666:	6821      	ldr	r1, [r4, #0]
 8006668:	1862      	adds	r2, r4, r1
 800666a:	4293      	cmp	r3, r2
 800666c:	bf04      	itt	eq
 800666e:	681a      	ldreq	r2, [r3, #0]
 8006670:	685b      	ldreq	r3, [r3, #4]
 8006672:	6063      	str	r3, [r4, #4]
 8006674:	bf04      	itt	eq
 8006676:	1852      	addeq	r2, r2, r1
 8006678:	6022      	streq	r2, [r4, #0]
 800667a:	602c      	str	r4, [r5, #0]
 800667c:	e7ec      	b.n	8006658 <_free_r+0x28>
 800667e:	461a      	mov	r2, r3
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	b10b      	cbz	r3, 8006688 <_free_r+0x58>
 8006684:	42a3      	cmp	r3, r4
 8006686:	d9fa      	bls.n	800667e <_free_r+0x4e>
 8006688:	6811      	ldr	r1, [r2, #0]
 800668a:	1855      	adds	r5, r2, r1
 800668c:	42a5      	cmp	r5, r4
 800668e:	d10b      	bne.n	80066a8 <_free_r+0x78>
 8006690:	6824      	ldr	r4, [r4, #0]
 8006692:	4421      	add	r1, r4
 8006694:	1854      	adds	r4, r2, r1
 8006696:	42a3      	cmp	r3, r4
 8006698:	6011      	str	r1, [r2, #0]
 800669a:	d1dd      	bne.n	8006658 <_free_r+0x28>
 800669c:	681c      	ldr	r4, [r3, #0]
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	6053      	str	r3, [r2, #4]
 80066a2:	4421      	add	r1, r4
 80066a4:	6011      	str	r1, [r2, #0]
 80066a6:	e7d7      	b.n	8006658 <_free_r+0x28>
 80066a8:	d902      	bls.n	80066b0 <_free_r+0x80>
 80066aa:	230c      	movs	r3, #12
 80066ac:	6003      	str	r3, [r0, #0]
 80066ae:	e7d3      	b.n	8006658 <_free_r+0x28>
 80066b0:	6825      	ldr	r5, [r4, #0]
 80066b2:	1961      	adds	r1, r4, r5
 80066b4:	428b      	cmp	r3, r1
 80066b6:	bf04      	itt	eq
 80066b8:	6819      	ldreq	r1, [r3, #0]
 80066ba:	685b      	ldreq	r3, [r3, #4]
 80066bc:	6063      	str	r3, [r4, #4]
 80066be:	bf04      	itt	eq
 80066c0:	1949      	addeq	r1, r1, r5
 80066c2:	6021      	streq	r1, [r4, #0]
 80066c4:	6054      	str	r4, [r2, #4]
 80066c6:	e7c7      	b.n	8006658 <_free_r+0x28>
 80066c8:	b003      	add	sp, #12
 80066ca:	bd30      	pop	{r4, r5, pc}
 80066cc:	200049a4 	.word	0x200049a4

080066d0 <_malloc_r>:
 80066d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066d2:	1ccd      	adds	r5, r1, #3
 80066d4:	f025 0503 	bic.w	r5, r5, #3
 80066d8:	3508      	adds	r5, #8
 80066da:	2d0c      	cmp	r5, #12
 80066dc:	bf38      	it	cc
 80066de:	250c      	movcc	r5, #12
 80066e0:	2d00      	cmp	r5, #0
 80066e2:	4606      	mov	r6, r0
 80066e4:	db01      	blt.n	80066ea <_malloc_r+0x1a>
 80066e6:	42a9      	cmp	r1, r5
 80066e8:	d903      	bls.n	80066f2 <_malloc_r+0x22>
 80066ea:	230c      	movs	r3, #12
 80066ec:	6033      	str	r3, [r6, #0]
 80066ee:	2000      	movs	r0, #0
 80066f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066f2:	f000 f87d 	bl	80067f0 <__malloc_lock>
 80066f6:	4921      	ldr	r1, [pc, #132]	; (800677c <_malloc_r+0xac>)
 80066f8:	680a      	ldr	r2, [r1, #0]
 80066fa:	4614      	mov	r4, r2
 80066fc:	b99c      	cbnz	r4, 8006726 <_malloc_r+0x56>
 80066fe:	4f20      	ldr	r7, [pc, #128]	; (8006780 <_malloc_r+0xb0>)
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	b923      	cbnz	r3, 800670e <_malloc_r+0x3e>
 8006704:	4621      	mov	r1, r4
 8006706:	4630      	mov	r0, r6
 8006708:	f000 f862 	bl	80067d0 <_sbrk_r>
 800670c:	6038      	str	r0, [r7, #0]
 800670e:	4629      	mov	r1, r5
 8006710:	4630      	mov	r0, r6
 8006712:	f000 f85d 	bl	80067d0 <_sbrk_r>
 8006716:	1c43      	adds	r3, r0, #1
 8006718:	d123      	bne.n	8006762 <_malloc_r+0x92>
 800671a:	230c      	movs	r3, #12
 800671c:	6033      	str	r3, [r6, #0]
 800671e:	4630      	mov	r0, r6
 8006720:	f000 f86c 	bl	80067fc <__malloc_unlock>
 8006724:	e7e3      	b.n	80066ee <_malloc_r+0x1e>
 8006726:	6823      	ldr	r3, [r4, #0]
 8006728:	1b5b      	subs	r3, r3, r5
 800672a:	d417      	bmi.n	800675c <_malloc_r+0x8c>
 800672c:	2b0b      	cmp	r3, #11
 800672e:	d903      	bls.n	8006738 <_malloc_r+0x68>
 8006730:	6023      	str	r3, [r4, #0]
 8006732:	441c      	add	r4, r3
 8006734:	6025      	str	r5, [r4, #0]
 8006736:	e004      	b.n	8006742 <_malloc_r+0x72>
 8006738:	6863      	ldr	r3, [r4, #4]
 800673a:	42a2      	cmp	r2, r4
 800673c:	bf0c      	ite	eq
 800673e:	600b      	streq	r3, [r1, #0]
 8006740:	6053      	strne	r3, [r2, #4]
 8006742:	4630      	mov	r0, r6
 8006744:	f000 f85a 	bl	80067fc <__malloc_unlock>
 8006748:	f104 000b 	add.w	r0, r4, #11
 800674c:	1d23      	adds	r3, r4, #4
 800674e:	f020 0007 	bic.w	r0, r0, #7
 8006752:	1ac2      	subs	r2, r0, r3
 8006754:	d0cc      	beq.n	80066f0 <_malloc_r+0x20>
 8006756:	1a1b      	subs	r3, r3, r0
 8006758:	50a3      	str	r3, [r4, r2]
 800675a:	e7c9      	b.n	80066f0 <_malloc_r+0x20>
 800675c:	4622      	mov	r2, r4
 800675e:	6864      	ldr	r4, [r4, #4]
 8006760:	e7cc      	b.n	80066fc <_malloc_r+0x2c>
 8006762:	1cc4      	adds	r4, r0, #3
 8006764:	f024 0403 	bic.w	r4, r4, #3
 8006768:	42a0      	cmp	r0, r4
 800676a:	d0e3      	beq.n	8006734 <_malloc_r+0x64>
 800676c:	1a21      	subs	r1, r4, r0
 800676e:	4630      	mov	r0, r6
 8006770:	f000 f82e 	bl	80067d0 <_sbrk_r>
 8006774:	3001      	adds	r0, #1
 8006776:	d1dd      	bne.n	8006734 <_malloc_r+0x64>
 8006778:	e7cf      	b.n	800671a <_malloc_r+0x4a>
 800677a:	bf00      	nop
 800677c:	200049a4 	.word	0x200049a4
 8006780:	200049a8 	.word	0x200049a8

08006784 <_realloc_r>:
 8006784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006786:	4607      	mov	r7, r0
 8006788:	4614      	mov	r4, r2
 800678a:	460e      	mov	r6, r1
 800678c:	b921      	cbnz	r1, 8006798 <_realloc_r+0x14>
 800678e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006792:	4611      	mov	r1, r2
 8006794:	f7ff bf9c 	b.w	80066d0 <_malloc_r>
 8006798:	b922      	cbnz	r2, 80067a4 <_realloc_r+0x20>
 800679a:	f7ff ff49 	bl	8006630 <_free_r>
 800679e:	4625      	mov	r5, r4
 80067a0:	4628      	mov	r0, r5
 80067a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067a4:	f000 f830 	bl	8006808 <_malloc_usable_size_r>
 80067a8:	42a0      	cmp	r0, r4
 80067aa:	d20f      	bcs.n	80067cc <_realloc_r+0x48>
 80067ac:	4621      	mov	r1, r4
 80067ae:	4638      	mov	r0, r7
 80067b0:	f7ff ff8e 	bl	80066d0 <_malloc_r>
 80067b4:	4605      	mov	r5, r0
 80067b6:	2800      	cmp	r0, #0
 80067b8:	d0f2      	beq.n	80067a0 <_realloc_r+0x1c>
 80067ba:	4631      	mov	r1, r6
 80067bc:	4622      	mov	r2, r4
 80067be:	f7ff fbf7 	bl	8005fb0 <memcpy>
 80067c2:	4631      	mov	r1, r6
 80067c4:	4638      	mov	r0, r7
 80067c6:	f7ff ff33 	bl	8006630 <_free_r>
 80067ca:	e7e9      	b.n	80067a0 <_realloc_r+0x1c>
 80067cc:	4635      	mov	r5, r6
 80067ce:	e7e7      	b.n	80067a0 <_realloc_r+0x1c>

080067d0 <_sbrk_r>:
 80067d0:	b538      	push	{r3, r4, r5, lr}
 80067d2:	4d06      	ldr	r5, [pc, #24]	; (80067ec <_sbrk_r+0x1c>)
 80067d4:	2300      	movs	r3, #0
 80067d6:	4604      	mov	r4, r0
 80067d8:	4608      	mov	r0, r1
 80067da:	602b      	str	r3, [r5, #0]
 80067dc:	f7fa fcaa 	bl	8001134 <_sbrk>
 80067e0:	1c43      	adds	r3, r0, #1
 80067e2:	d102      	bne.n	80067ea <_sbrk_r+0x1a>
 80067e4:	682b      	ldr	r3, [r5, #0]
 80067e6:	b103      	cbz	r3, 80067ea <_sbrk_r+0x1a>
 80067e8:	6023      	str	r3, [r4, #0]
 80067ea:	bd38      	pop	{r3, r4, r5, pc}
 80067ec:	20004f20 	.word	0x20004f20

080067f0 <__malloc_lock>:
 80067f0:	4801      	ldr	r0, [pc, #4]	; (80067f8 <__malloc_lock+0x8>)
 80067f2:	f000 b811 	b.w	8006818 <__retarget_lock_acquire_recursive>
 80067f6:	bf00      	nop
 80067f8:	20004f28 	.word	0x20004f28

080067fc <__malloc_unlock>:
 80067fc:	4801      	ldr	r0, [pc, #4]	; (8006804 <__malloc_unlock+0x8>)
 80067fe:	f000 b80c 	b.w	800681a <__retarget_lock_release_recursive>
 8006802:	bf00      	nop
 8006804:	20004f28 	.word	0x20004f28

08006808 <_malloc_usable_size_r>:
 8006808:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800680c:	1f18      	subs	r0, r3, #4
 800680e:	2b00      	cmp	r3, #0
 8006810:	bfbc      	itt	lt
 8006812:	580b      	ldrlt	r3, [r1, r0]
 8006814:	18c0      	addlt	r0, r0, r3
 8006816:	4770      	bx	lr

08006818 <__retarget_lock_acquire_recursive>:
 8006818:	4770      	bx	lr

0800681a <__retarget_lock_release_recursive>:
 800681a:	4770      	bx	lr

0800681c <_init>:
 800681c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800681e:	bf00      	nop
 8006820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006822:	bc08      	pop	{r3}
 8006824:	469e      	mov	lr, r3
 8006826:	4770      	bx	lr

08006828 <_fini>:
 8006828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800682a:	bf00      	nop
 800682c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800682e:	bc08      	pop	{r3}
 8006830:	469e      	mov	lr, r3
 8006832:	4770      	bx	lr
