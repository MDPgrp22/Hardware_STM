
mdp_hardware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062c4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bac  08006454  08006454  00016454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007000  08007000  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007000  08007000  00017000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007008  08007008  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007008  08007008  00017008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800700c  0800700c  0001700c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007010  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00004e2c  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004ea0  20004ea0  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017dff  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000030c5  00000000  00000000  00037ea3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012a8  00000000  00000000  0003af68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001160  00000000  00000000  0003c210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000035ef  00000000  00000000  0003d370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001494e  00000000  00000000  0004095f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2d26  00000000  00000000  000552ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00127fd3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005194  00000000  00000000  00128028  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800643c 	.word	0x0800643c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	0800643c 	.word	0x0800643c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056c:	f000 fc64 	bl	8000e38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000570:	f000 f846 	bl	8000600 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000574:	f000 f994 	bl	80008a0 <MX_GPIO_Init>
  MX_TIM8_Init();
 8000578:	f000 f8f4 	bl	8000764 <MX_TIM8_Init>
  MX_TIM2_Init();
 800057c:	f000 f89e 	bl	80006bc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  OLED_Init();
 8000580:	f005 fa70 	bl	8005a64 <OLED_Init>
//  show();	// To print on the OLED
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000584:	f002 fb78 	bl	8002c78 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000588:	4a11      	ldr	r2, [pc, #68]	; (80005d0 <main+0x68>)
 800058a:	2100      	movs	r1, #0
 800058c:	4811      	ldr	r0, [pc, #68]	; (80005d4 <main+0x6c>)
 800058e:	f002 fbbd 	bl	8002d0c <osThreadNew>
 8000592:	4603      	mov	r3, r0
 8000594:	4a10      	ldr	r2, [pc, #64]	; (80005d8 <main+0x70>)
 8000596:	6013      	str	r3, [r2, #0]

  /* creation of MotorTask */
  MotorTaskHandle = osThreadNew(motor, NULL, &MotorTask_attributes);
 8000598:	4a10      	ldr	r2, [pc, #64]	; (80005dc <main+0x74>)
 800059a:	2100      	movs	r1, #0
 800059c:	4810      	ldr	r0, [pc, #64]	; (80005e0 <main+0x78>)
 800059e:	f002 fbb5 	bl	8002d0c <osThreadNew>
 80005a2:	4603      	mov	r3, r0
 80005a4:	4a0f      	ldr	r2, [pc, #60]	; (80005e4 <main+0x7c>)
 80005a6:	6013      	str	r3, [r2, #0]

  /* creation of showOLED */
  showOLEDHandle = osThreadNew(showoled, NULL, &showOLED_attributes);
 80005a8:	4a0f      	ldr	r2, [pc, #60]	; (80005e8 <main+0x80>)
 80005aa:	2100      	movs	r1, #0
 80005ac:	480f      	ldr	r0, [pc, #60]	; (80005ec <main+0x84>)
 80005ae:	f002 fbad 	bl	8002d0c <osThreadNew>
 80005b2:	4603      	mov	r3, r0
 80005b4:	4a0e      	ldr	r2, [pc, #56]	; (80005f0 <main+0x88>)
 80005b6:	6013      	str	r3, [r2, #0]

  /* creation of EncoderTask */
  EncoderTaskHandle = osThreadNew(encoder_task, NULL, &EncoderTask_attributes);
 80005b8:	4a0e      	ldr	r2, [pc, #56]	; (80005f4 <main+0x8c>)
 80005ba:	2100      	movs	r1, #0
 80005bc:	480e      	ldr	r0, [pc, #56]	; (80005f8 <main+0x90>)
 80005be:	f002 fba5 	bl	8002d0c <osThreadNew>
 80005c2:	4603      	mov	r3, r0
 80005c4:	4a0d      	ldr	r2, [pc, #52]	; (80005fc <main+0x94>)
 80005c6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005c8:	f002 fb7a 	bl	8002cc0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005cc:	e7fe      	b.n	80005cc <main+0x64>
 80005ce:	bf00      	nop
 80005d0:	080064c8 	.word	0x080064c8
 80005d4:	0800098d 	.word	0x0800098d
 80005d8:	200049ac 	.word	0x200049ac
 80005dc:	080064ec 	.word	0x080064ec
 80005e0:	0800099d 	.word	0x0800099d
 80005e4:	200049f8 	.word	0x200049f8
 80005e8:	08006510 	.word	0x08006510
 80005ec:	08000a25 	.word	0x08000a25
 80005f0:	20004a48 	.word	0x20004a48
 80005f4:	08006534 	.word	0x08006534
 80005f8:	08000a65 	.word	0x08000a65
 80005fc:	200049fc 	.word	0x200049fc

08000600 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b094      	sub	sp, #80	; 0x50
 8000604:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000606:	f107 0320 	add.w	r3, r7, #32
 800060a:	2230      	movs	r2, #48	; 0x30
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f005 faec 	bl	8005bec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000614:	f107 030c 	add.w	r3, r7, #12
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]
 8000622:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000624:	2300      	movs	r3, #0
 8000626:	60bb      	str	r3, [r7, #8]
 8000628:	4b22      	ldr	r3, [pc, #136]	; (80006b4 <SystemClock_Config+0xb4>)
 800062a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800062c:	4a21      	ldr	r2, [pc, #132]	; (80006b4 <SystemClock_Config+0xb4>)
 800062e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000632:	6413      	str	r3, [r2, #64]	; 0x40
 8000634:	4b1f      	ldr	r3, [pc, #124]	; (80006b4 <SystemClock_Config+0xb4>)
 8000636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000638:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800063c:	60bb      	str	r3, [r7, #8]
 800063e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000640:	2300      	movs	r3, #0
 8000642:	607b      	str	r3, [r7, #4]
 8000644:	4b1c      	ldr	r3, [pc, #112]	; (80006b8 <SystemClock_Config+0xb8>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a1b      	ldr	r2, [pc, #108]	; (80006b8 <SystemClock_Config+0xb8>)
 800064a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800064e:	6013      	str	r3, [r2, #0]
 8000650:	4b19      	ldr	r3, [pc, #100]	; (80006b8 <SystemClock_Config+0xb8>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000658:	607b      	str	r3, [r7, #4]
 800065a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800065c:	2302      	movs	r3, #2
 800065e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000660:	2301      	movs	r3, #1
 8000662:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000664:	2310      	movs	r3, #16
 8000666:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000668:	2300      	movs	r3, #0
 800066a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066c:	f107 0320 	add.w	r3, r7, #32
 8000670:	4618      	mov	r0, r3
 8000672:	f000 ff3b 	bl	80014ec <HAL_RCC_OscConfig>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800067c:	f000 fa66 	bl	8000b4c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000680:	230f      	movs	r3, #15
 8000682:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000684:	2300      	movs	r3, #0
 8000686:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000688:	2300      	movs	r3, #0
 800068a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000690:	2300      	movs	r3, #0
 8000692:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000694:	f107 030c 	add.w	r3, r7, #12
 8000698:	2100      	movs	r1, #0
 800069a:	4618      	mov	r0, r3
 800069c:	f001 f99e 	bl	80019dc <HAL_RCC_ClockConfig>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80006a6:	f000 fa51 	bl	8000b4c <Error_Handler>
  }
}
 80006aa:	bf00      	nop
 80006ac:	3750      	adds	r7, #80	; 0x50
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	40023800 	.word	0x40023800
 80006b8:	40007000 	.word	0x40007000

080006bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b08c      	sub	sp, #48	; 0x30
 80006c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80006c2:	f107 030c 	add.w	r3, r7, #12
 80006c6:	2224      	movs	r2, #36	; 0x24
 80006c8:	2100      	movs	r1, #0
 80006ca:	4618      	mov	r0, r3
 80006cc:	f005 fa8e 	bl	8005bec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006d0:	1d3b      	adds	r3, r7, #4
 80006d2:	2200      	movs	r2, #0
 80006d4:	601a      	str	r2, [r3, #0]
 80006d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006d8:	4b21      	ldr	r3, [pc, #132]	; (8000760 <MX_TIM2_Init+0xa4>)
 80006da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006de:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80006e0:	4b1f      	ldr	r3, [pc, #124]	; (8000760 <MX_TIM2_Init+0xa4>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006e6:	4b1e      	ldr	r3, [pc, #120]	; (8000760 <MX_TIM2_Init+0xa4>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80006ec:	4b1c      	ldr	r3, [pc, #112]	; (8000760 <MX_TIM2_Init+0xa4>)
 80006ee:	f04f 32ff 	mov.w	r2, #4294967295
 80006f2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006f4:	4b1a      	ldr	r3, [pc, #104]	; (8000760 <MX_TIM2_Init+0xa4>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006fa:	4b19      	ldr	r3, [pc, #100]	; (8000760 <MX_TIM2_Init+0xa4>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000700:	2303      	movs	r3, #3
 8000702:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000704:	2300      	movs	r3, #0
 8000706:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000708:	2301      	movs	r3, #1
 800070a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800070c:	2300      	movs	r3, #0
 800070e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8000710:	230a      	movs	r3, #10
 8000712:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000714:	2300      	movs	r3, #0
 8000716:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000718:	2301      	movs	r3, #1
 800071a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800071c:	2300      	movs	r3, #0
 800071e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8000720:	230a      	movs	r3, #10
 8000722:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000724:	f107 030c 	add.w	r3, r7, #12
 8000728:	4619      	mov	r1, r3
 800072a:	480d      	ldr	r0, [pc, #52]	; (8000760 <MX_TIM2_Init+0xa4>)
 800072c:	f001 fc62 	bl	8001ff4 <HAL_TIM_Encoder_Init>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000736:	f000 fa09 	bl	8000b4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800073a:	2300      	movs	r3, #0
 800073c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800073e:	2300      	movs	r3, #0
 8000740:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000742:	1d3b      	adds	r3, r7, #4
 8000744:	4619      	mov	r1, r3
 8000746:	4806      	ldr	r0, [pc, #24]	; (8000760 <MX_TIM2_Init+0xa4>)
 8000748:	f002 f994 	bl	8002a74 <HAL_TIMEx_MasterConfigSynchronization>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000752:	f000 f9fb 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000756:	bf00      	nop
 8000758:	3730      	adds	r7, #48	; 0x30
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	20004a00 	.word	0x20004a00

08000764 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b096      	sub	sp, #88	; 0x58
 8000768:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800076a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800076e:	2200      	movs	r2, #0
 8000770:	601a      	str	r2, [r3, #0]
 8000772:	605a      	str	r2, [r3, #4]
 8000774:	609a      	str	r2, [r3, #8]
 8000776:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000778:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000782:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	605a      	str	r2, [r3, #4]
 800078c:	609a      	str	r2, [r3, #8]
 800078e:	60da      	str	r2, [r3, #12]
 8000790:	611a      	str	r2, [r3, #16]
 8000792:	615a      	str	r2, [r3, #20]
 8000794:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000796:	1d3b      	adds	r3, r7, #4
 8000798:	2220      	movs	r2, #32
 800079a:	2100      	movs	r1, #0
 800079c:	4618      	mov	r0, r3
 800079e:	f005 fa25 	bl	8005bec <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80007a2:	4b3d      	ldr	r3, [pc, #244]	; (8000898 <MX_TIM8_Init+0x134>)
 80007a4:	4a3d      	ldr	r2, [pc, #244]	; (800089c <MX_TIM8_Init+0x138>)
 80007a6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80007a8:	4b3b      	ldr	r3, [pc, #236]	; (8000898 <MX_TIM8_Init+0x134>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ae:	4b3a      	ldr	r3, [pc, #232]	; (8000898 <MX_TIM8_Init+0x134>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 80007b4:	4b38      	ldr	r3, [pc, #224]	; (8000898 <MX_TIM8_Init+0x134>)
 80007b6:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80007ba:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007bc:	4b36      	ldr	r3, [pc, #216]	; (8000898 <MX_TIM8_Init+0x134>)
 80007be:	2200      	movs	r2, #0
 80007c0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80007c2:	4b35      	ldr	r3, [pc, #212]	; (8000898 <MX_TIM8_Init+0x134>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007c8:	4b33      	ldr	r3, [pc, #204]	; (8000898 <MX_TIM8_Init+0x134>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80007ce:	4832      	ldr	r0, [pc, #200]	; (8000898 <MX_TIM8_Init+0x134>)
 80007d0:	f001 faa0 	bl	8001d14 <HAL_TIM_Base_Init>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80007da:	f000 f9b7 	bl	8000b4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007e2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80007e4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80007e8:	4619      	mov	r1, r3
 80007ea:	482b      	ldr	r0, [pc, #172]	; (8000898 <MX_TIM8_Init+0x134>)
 80007ec:	f001 fd6a 	bl	80022c4 <HAL_TIM_ConfigClockSource>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80007f6:	f000 f9a9 	bl	8000b4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80007fa:	4827      	ldr	r0, [pc, #156]	; (8000898 <MX_TIM8_Init+0x134>)
 80007fc:	f001 fad9 	bl	8001db2 <HAL_TIM_PWM_Init>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8000806:	f000 f9a1 	bl	8000b4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800080a:	2300      	movs	r3, #0
 800080c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800080e:	2300      	movs	r3, #0
 8000810:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000812:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000816:	4619      	mov	r1, r3
 8000818:	481f      	ldr	r0, [pc, #124]	; (8000898 <MX_TIM8_Init+0x134>)
 800081a:	f002 f92b 	bl	8002a74 <HAL_TIMEx_MasterConfigSynchronization>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8000824:	f000 f992 	bl	8000b4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000828:	2360      	movs	r3, #96	; 0x60
 800082a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800082c:	2300      	movs	r3, #0
 800082e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000830:	2300      	movs	r3, #0
 8000832:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000834:	2300      	movs	r3, #0
 8000836:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000838:	2300      	movs	r3, #0
 800083a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800083c:	2300      	movs	r3, #0
 800083e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000840:	2300      	movs	r3, #0
 8000842:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000844:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000848:	2200      	movs	r2, #0
 800084a:	4619      	mov	r1, r3
 800084c:	4812      	ldr	r0, [pc, #72]	; (8000898 <MX_TIM8_Init+0x134>)
 800084e:	f001 fc77 	bl	8002140 <HAL_TIM_PWM_ConfigChannel>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8000858:	f000 f978 	bl	8000b4c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800085c:	2300      	movs	r3, #0
 800085e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000860:	2300      	movs	r3, #0
 8000862:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000864:	2300      	movs	r3, #0
 8000866:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000868:	2300      	movs	r3, #0
 800086a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800086c:	2300      	movs	r3, #0
 800086e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000870:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000874:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000876:	2300      	movs	r3, #0
 8000878:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800087a:	1d3b      	adds	r3, r7, #4
 800087c:	4619      	mov	r1, r3
 800087e:	4806      	ldr	r0, [pc, #24]	; (8000898 <MX_TIM8_Init+0x134>)
 8000880:	f002 f974 	bl	8002b6c <HAL_TIMEx_ConfigBreakDeadTime>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_TIM8_Init+0x12a>
  {
    Error_Handler();
 800088a:	f000 f95f 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800088e:	bf00      	nop
 8000890:	3758      	adds	r7, #88	; 0x58
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	200049b0 	.word	0x200049b0
 800089c:	40010400 	.word	0x40010400

080008a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b08a      	sub	sp, #40	; 0x28
 80008a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a6:	f107 0314 	add.w	r3, r7, #20
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	605a      	str	r2, [r3, #4]
 80008b0:	609a      	str	r2, [r3, #8]
 80008b2:	60da      	str	r2, [r3, #12]
 80008b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	613b      	str	r3, [r7, #16]
 80008ba:	4b31      	ldr	r3, [pc, #196]	; (8000980 <MX_GPIO_Init+0xe0>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a30      	ldr	r2, [pc, #192]	; (8000980 <MX_GPIO_Init+0xe0>)
 80008c0:	f043 0310 	orr.w	r3, r3, #16
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b2e      	ldr	r3, [pc, #184]	; (8000980 <MX_GPIO_Init+0xe0>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0310 	and.w	r3, r3, #16
 80008ce:	613b      	str	r3, [r7, #16]
 80008d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	60fb      	str	r3, [r7, #12]
 80008d6:	4b2a      	ldr	r3, [pc, #168]	; (8000980 <MX_GPIO_Init+0xe0>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a29      	ldr	r2, [pc, #164]	; (8000980 <MX_GPIO_Init+0xe0>)
 80008dc:	f043 0301 	orr.w	r3, r3, #1
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b27      	ldr	r3, [pc, #156]	; (8000980 <MX_GPIO_Init+0xe0>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0301 	and.w	r3, r3, #1
 80008ea:	60fb      	str	r3, [r7, #12]
 80008ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	60bb      	str	r3, [r7, #8]
 80008f2:	4b23      	ldr	r3, [pc, #140]	; (8000980 <MX_GPIO_Init+0xe0>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	4a22      	ldr	r2, [pc, #136]	; (8000980 <MX_GPIO_Init+0xe0>)
 80008f8:	f043 0304 	orr.w	r3, r3, #4
 80008fc:	6313      	str	r3, [r2, #48]	; 0x30
 80008fe:	4b20      	ldr	r3, [pc, #128]	; (8000980 <MX_GPIO_Init+0xe0>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	f003 0304 	and.w	r3, r3, #4
 8000906:	60bb      	str	r3, [r7, #8]
 8000908:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	607b      	str	r3, [r7, #4]
 800090e:	4b1c      	ldr	r3, [pc, #112]	; (8000980 <MX_GPIO_Init+0xe0>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	4a1b      	ldr	r2, [pc, #108]	; (8000980 <MX_GPIO_Init+0xe0>)
 8000914:	f043 0302 	orr.w	r3, r3, #2
 8000918:	6313      	str	r3, [r2, #48]	; 0x30
 800091a:	4b19      	ldr	r3, [pc, #100]	; (8000980 <MX_GPIO_Init+0xe0>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	f003 0302 	and.w	r3, r3, #2
 8000922:	607b      	str	r3, [r7, #4]
 8000924:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 8000926:	2200      	movs	r2, #0
 8000928:	f44f 61bc 	mov.w	r1, #1504	; 0x5e0
 800092c:	4815      	ldr	r0, [pc, #84]	; (8000984 <MX_GPIO_Init+0xe4>)
 800092e:	f000 fd9b 	bl	8001468 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin|AIN1_Pin, GPIO_PIN_RESET);
 8000932:	2200      	movs	r2, #0
 8000934:	210c      	movs	r1, #12
 8000936:	4814      	ldr	r0, [pc, #80]	; (8000988 <MX_GPIO_Init+0xe8>)
 8000938:	f000 fd96 	bl	8001468 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin
                           LED3_Pin */
  GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 800093c:	f44f 63bc 	mov.w	r3, #1504	; 0x5e0
 8000940:	617b      	str	r3, [r7, #20]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000942:	2301      	movs	r3, #1
 8000944:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094a:	2300      	movs	r3, #0
 800094c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800094e:	f107 0314 	add.w	r3, r7, #20
 8000952:	4619      	mov	r1, r3
 8000954:	480b      	ldr	r0, [pc, #44]	; (8000984 <MX_GPIO_Init+0xe4>)
 8000956:	f000 fbeb 	bl	8001130 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin;
 800095a:	230c      	movs	r3, #12
 800095c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095e:	2301      	movs	r3, #1
 8000960:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000966:	2302      	movs	r3, #2
 8000968:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096a:	f107 0314 	add.w	r3, r7, #20
 800096e:	4619      	mov	r1, r3
 8000970:	4805      	ldr	r0, [pc, #20]	; (8000988 <MX_GPIO_Init+0xe8>)
 8000972:	f000 fbdd 	bl	8001130 <HAL_GPIO_Init>

}
 8000976:	bf00      	nop
 8000978:	3728      	adds	r7, #40	; 0x28
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	40023800 	.word	0x40023800
 8000984:	40021000 	.word	0x40021000
 8000988:	40020000 	.word	0x40020000

0800098c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000994:	2001      	movs	r0, #1
 8000996:	f002 fa4b 	bl	8002e30 <osDelay>
 800099a:	e7fb      	b.n	8000994 <StartDefaultTask+0x8>

0800099c <motor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_motor */
void motor(void *argument)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN motor */
	uint16_t pwmVal = 0;
 80009a4:	2300      	movs	r3, #0
 80009a6:	81fb      	strh	r3, [r7, #14]
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80009a8:	2100      	movs	r1, #0
 80009aa:	481c      	ldr	r0, [pc, #112]	; (8000a1c <motor+0x80>)
 80009ac:	f001 fa5a 	bl	8001e64 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  for(;;)
  {
	  // Clock Wise
	  while(pwmVal< 4000)
 80009b0:	e013      	b.n	80009da <motor+0x3e>
	  {
		  // H-Bridge Circuit for AINx; 1 turn on, the other turns off
		  HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 80009b2:	2201      	movs	r2, #1
 80009b4:	2104      	movs	r1, #4
 80009b6:	481a      	ldr	r0, [pc, #104]	; (8000a20 <motor+0x84>)
 80009b8:	f000 fd56 	bl	8001468 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 80009bc:	2200      	movs	r2, #0
 80009be:	2108      	movs	r1, #8
 80009c0:	4817      	ldr	r0, [pc, #92]	; (8000a20 <motor+0x84>)
 80009c2:	f000 fd51 	bl	8001468 <HAL_GPIO_WritePin>
		  pwmVal++;
 80009c6:	89fb      	ldrh	r3, [r7, #14]
 80009c8:	3301      	adds	r3, #1
 80009ca:	81fb      	strh	r3, [r7, #14]
		  // Modify comparison value for duty cycle
		  __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmVal);
 80009cc:	4b13      	ldr	r3, [pc, #76]	; (8000a1c <motor+0x80>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	89fa      	ldrh	r2, [r7, #14]
 80009d2:	635a      	str	r2, [r3, #52]	; 0x34
		  osDelay(10);
 80009d4:	200a      	movs	r0, #10
 80009d6:	f002 fa2b 	bl	8002e30 <osDelay>
	  while(pwmVal< 4000)
 80009da:	89fb      	ldrh	r3, [r7, #14]
 80009dc:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80009e0:	d3e7      	bcc.n	80009b2 <motor+0x16>
	  }
	  // Anti clock wise
	  while(pwmVal>0)
 80009e2:	e013      	b.n	8000a0c <motor+0x70>
	  {
		  // H-Bridge Circuit for AINx; 1 turn on, the other turns off
		  HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 80009e4:	2200      	movs	r2, #0
 80009e6:	2104      	movs	r1, #4
 80009e8:	480d      	ldr	r0, [pc, #52]	; (8000a20 <motor+0x84>)
 80009ea:	f000 fd3d 	bl	8001468 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 80009ee:	2201      	movs	r2, #1
 80009f0:	2108      	movs	r1, #8
 80009f2:	480b      	ldr	r0, [pc, #44]	; (8000a20 <motor+0x84>)
 80009f4:	f000 fd38 	bl	8001468 <HAL_GPIO_WritePin>
		  pwmVal--;
 80009f8:	89fb      	ldrh	r3, [r7, #14]
 80009fa:	3b01      	subs	r3, #1
 80009fc:	81fb      	strh	r3, [r7, #14]
		  __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmVal);
 80009fe:	4b07      	ldr	r3, [pc, #28]	; (8000a1c <motor+0x80>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	89fa      	ldrh	r2, [r7, #14]
 8000a04:	635a      	str	r2, [r3, #52]	; 0x34
		  osDelay(10);
 8000a06:	200a      	movs	r0, #10
 8000a08:	f002 fa12 	bl	8002e30 <osDelay>
	  while(pwmVal>0)
 8000a0c:	89fb      	ldrh	r3, [r7, #14]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d1e8      	bne.n	80009e4 <motor+0x48>
	  }
	  osDelay(1);
 8000a12:	2001      	movs	r0, #1
 8000a14:	f002 fa0c 	bl	8002e30 <osDelay>
	  while(pwmVal< 4000)
 8000a18:	e7df      	b.n	80009da <motor+0x3e>
 8000a1a:	bf00      	nop
 8000a1c:	200049b0 	.word	0x200049b0
 8000a20:	40020000 	.word	0x40020000

08000a24 <showoled>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_showoled */
void showoled(void *argument)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b088      	sub	sp, #32
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN showoled */
  /* Infinite loop */
	uint8_t hello [20] = "motor test\0";
 8000a2c:	4a0c      	ldr	r2, [pc, #48]	; (8000a60 <showoled+0x3c>)
 8000a2e:	f107 030c 	add.w	r3, r7, #12
 8000a32:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a34:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000a38:	f107 0318 	add.w	r3, r7, #24
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
 8000a40:	605a      	str	r2, [r3, #4]
	for(;;)
	{
		OLED_ShowString(10, 10, hello);
 8000a42:	f107 030c 	add.w	r3, r7, #12
 8000a46:	461a      	mov	r2, r3
 8000a48:	210a      	movs	r1, #10
 8000a4a:	200a      	movs	r0, #10
 8000a4c:	f004 ffd8 	bl	8005a00 <OLED_ShowString>
		OLED_Refresh_Gram();
 8000a50:	f004 fe62 	bl	8005718 <OLED_Refresh_Gram>
		osDelay(1000);
 8000a54:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a58:	f002 f9ea 	bl	8002e30 <osDelay>
		OLED_ShowString(10, 10, hello);
 8000a5c:	e7f1      	b.n	8000a42 <showoled+0x1e>
 8000a5e:	bf00      	nop
 8000a60:	08006484 	.word	0x08006484

08000a64 <encoder_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_encoder_task */
void encoder_task(void *argument)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b08c      	sub	sp, #48	; 0x30
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN encoder_task */
  /* Infinite loop */
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_ALL);
 8000a6c:	213c      	movs	r1, #60	; 0x3c
 8000a6e:	4834      	ldr	r0, [pc, #208]	; (8000b40 <encoder_task+0xdc>)
 8000a70:	f001 f9f8 	bl	8001e64 <HAL_TIM_PWM_Start>

	int cnt1, cnt2, diff;
	uint32_t tick;

	cnt1 = __HAL_TIM_GET_COUNTER(&htim2);
 8000a74:	4b32      	ldr	r3, [pc, #200]	; (8000b40 <encoder_task+0xdc>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
	tick = HAL_GetTick();
 8000a7c:	f000 fa42 	bl	8000f04 <HAL_GetTick>
 8000a80:	6278      	str	r0, [r7, #36]	; 0x24
	uint8_t msg[20];
	uint16_t dir;

	for(;;)
	{
		if(HAL_GetTick()-tick > 1000L){
 8000a82:	f000 fa3f 	bl	8000f04 <HAL_GetTick>
 8000a86:	4602      	mov	r2, r0
 8000a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a8a:	1ad3      	subs	r3, r2, r3
 8000a8c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000a90:	d9f7      	bls.n	8000a82 <encoder_task+0x1e>
			cnt2 = __HAL_TIM_GET_COUNTER(&htim2);
 8000a92:	4b2b      	ldr	r3, [pc, #172]	; (8000b40 <encoder_task+0xdc>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a98:	623b      	str	r3, [r7, #32]
			if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)){
 8000a9a:	4b29      	ldr	r3, [pc, #164]	; (8000b40 <encoder_task+0xdc>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	f003 0310 	and.w	r3, r3, #16
 8000aa4:	2b10      	cmp	r3, #16
 8000aa6:	d10e      	bne.n	8000ac6 <encoder_task+0x62>
				if(cnt2<cnt1)
 8000aa8:	6a3a      	ldr	r2, [r7, #32]
 8000aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000aac:	429a      	cmp	r2, r3
 8000aae:	da04      	bge.n	8000aba <encoder_task+0x56>
					diff = cnt1 - cnt2;
 8000ab0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ab2:	6a3b      	ldr	r3, [r7, #32]
 8000ab4:	1ad3      	subs	r3, r2, r3
 8000ab6:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ab8:	e013      	b.n	8000ae2 <encoder_task+0x7e>
				else //overflow
					diff = (4294967295 - cnt2) + cnt1;
 8000aba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000abc:	6a3b      	ldr	r3, [r7, #32]
 8000abe:	1ad3      	subs	r3, r2, r3
 8000ac0:	3b01      	subs	r3, #1
 8000ac2:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ac4:	e00d      	b.n	8000ae2 <encoder_task+0x7e>
			}
			else{
				if(cnt2 > cnt1)
 8000ac6:	6a3a      	ldr	r2, [r7, #32]
 8000ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000aca:	429a      	cmp	r2, r3
 8000acc:	dd04      	ble.n	8000ad8 <encoder_task+0x74>
					diff = cnt2 - cnt1;
 8000ace:	6a3a      	ldr	r2, [r7, #32]
 8000ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ad2:	1ad3      	subs	r3, r2, r3
 8000ad4:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ad6:	e004      	b.n	8000ae2 <encoder_task+0x7e>
				else
					diff = (4294967295 - cnt1) + cnt2;
 8000ad8:	6a3a      	ldr	r2, [r7, #32]
 8000ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000adc:	1ad3      	subs	r3, r2, r3
 8000ade:	3b01      	subs	r3, #1
 8000ae0:	62bb      	str	r3, [r7, #40]	; 0x28
			}

			dir = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2);
 8000ae2:	4b17      	ldr	r3, [pc, #92]	; (8000b40 <encoder_task+0xdc>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	f003 0310 	and.w	r3, r3, #16
 8000aec:	2b10      	cmp	r3, #16
 8000aee:	bf0c      	ite	eq
 8000af0:	2301      	moveq	r3, #1
 8000af2:	2300      	movne	r3, #0
 8000af4:	b2db      	uxtb	r3, r3
 8000af6:	83fb      	strh	r3, [r7, #30]

			// Display difference
			sprintf(msg, "speed:%5d\0",diff);
 8000af8:	f107 0308 	add.w	r3, r7, #8
 8000afc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000afe:	4911      	ldr	r1, [pc, #68]	; (8000b44 <encoder_task+0xe0>)
 8000b00:	4618      	mov	r0, r3
 8000b02:	f005 f87b 	bl	8005bfc <siprintf>
			OLED_ShowString(10,20,msg);
 8000b06:	f107 0308 	add.w	r3, r7, #8
 8000b0a:	461a      	mov	r2, r3
 8000b0c:	2114      	movs	r1, #20
 8000b0e:	200a      	movs	r0, #10
 8000b10:	f004 ff76 	bl	8005a00 <OLED_ShowString>

			// Display direction
			sprintf(msg, "dir:%5d\0",dir);
 8000b14:	8bfa      	ldrh	r2, [r7, #30]
 8000b16:	f107 0308 	add.w	r3, r7, #8
 8000b1a:	490b      	ldr	r1, [pc, #44]	; (8000b48 <encoder_task+0xe4>)
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f005 f86d 	bl	8005bfc <siprintf>
			OLED_ShowString(10,30,msg);
 8000b22:	f107 0308 	add.w	r3, r7, #8
 8000b26:	461a      	mov	r2, r3
 8000b28:	211e      	movs	r1, #30
 8000b2a:	200a      	movs	r0, #10
 8000b2c:	f004 ff68 	bl	8005a00 <OLED_ShowString>

			// Reset base tick
			cnt1 = __HAL_TIM_GET_COUNTER(&htim2);
 8000b30:	4b03      	ldr	r3, [pc, #12]	; (8000b40 <encoder_task+0xdc>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b36:	62fb      	str	r3, [r7, #44]	; 0x2c
			tick = HAL_GetTick();
 8000b38:	f000 f9e4 	bl	8000f04 <HAL_GetTick>
 8000b3c:	6278      	str	r0, [r7, #36]	; 0x24
		if(HAL_GetTick()-tick > 1000L){
 8000b3e:	e7a0      	b.n	8000a82 <encoder_task+0x1e>
 8000b40:	20004a00 	.word	0x20004a00
 8000b44:	08006498 	.word	0x08006498
 8000b48:	080064a4 	.word	0x080064a4

08000b4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b50:	b672      	cpsid	i
}
 8000b52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b54:	e7fe      	b.n	8000b54 <Error_Handler+0x8>
	...

08000b58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	607b      	str	r3, [r7, #4]
 8000b62:	4b12      	ldr	r3, [pc, #72]	; (8000bac <HAL_MspInit+0x54>)
 8000b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b66:	4a11      	ldr	r2, [pc, #68]	; (8000bac <HAL_MspInit+0x54>)
 8000b68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b6e:	4b0f      	ldr	r3, [pc, #60]	; (8000bac <HAL_MspInit+0x54>)
 8000b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b76:	607b      	str	r3, [r7, #4]
 8000b78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	603b      	str	r3, [r7, #0]
 8000b7e:	4b0b      	ldr	r3, [pc, #44]	; (8000bac <HAL_MspInit+0x54>)
 8000b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b82:	4a0a      	ldr	r2, [pc, #40]	; (8000bac <HAL_MspInit+0x54>)
 8000b84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b88:	6413      	str	r3, [r2, #64]	; 0x40
 8000b8a:	4b08      	ldr	r3, [pc, #32]	; (8000bac <HAL_MspInit+0x54>)
 8000b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b92:	603b      	str	r3, [r7, #0]
 8000b94:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b96:	2200      	movs	r2, #0
 8000b98:	210f      	movs	r1, #15
 8000b9a:	f06f 0001 	mvn.w	r0, #1
 8000b9e:	f000 fa9e 	bl	80010de <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	40023800 	.word	0x40023800

08000bb0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b08a      	sub	sp, #40	; 0x28
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb8:	f107 0314 	add.w	r3, r7, #20
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	605a      	str	r2, [r3, #4]
 8000bc2:	609a      	str	r2, [r3, #8]
 8000bc4:	60da      	str	r2, [r3, #12]
 8000bc6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000bd0:	d14a      	bne.n	8000c68 <HAL_TIM_Encoder_MspInit+0xb8>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	613b      	str	r3, [r7, #16]
 8000bd6:	4b26      	ldr	r3, [pc, #152]	; (8000c70 <HAL_TIM_Encoder_MspInit+0xc0>)
 8000bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bda:	4a25      	ldr	r2, [pc, #148]	; (8000c70 <HAL_TIM_Encoder_MspInit+0xc0>)
 8000bdc:	f043 0301 	orr.w	r3, r3, #1
 8000be0:	6413      	str	r3, [r2, #64]	; 0x40
 8000be2:	4b23      	ldr	r3, [pc, #140]	; (8000c70 <HAL_TIM_Encoder_MspInit+0xc0>)
 8000be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be6:	f003 0301 	and.w	r3, r3, #1
 8000bea:	613b      	str	r3, [r7, #16]
 8000bec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	60fb      	str	r3, [r7, #12]
 8000bf2:	4b1f      	ldr	r3, [pc, #124]	; (8000c70 <HAL_TIM_Encoder_MspInit+0xc0>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	4a1e      	ldr	r2, [pc, #120]	; (8000c70 <HAL_TIM_Encoder_MspInit+0xc0>)
 8000bf8:	f043 0301 	orr.w	r3, r3, #1
 8000bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfe:	4b1c      	ldr	r3, [pc, #112]	; (8000c70 <HAL_TIM_Encoder_MspInit+0xc0>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	f003 0301 	and.w	r3, r3, #1
 8000c06:	60fb      	str	r3, [r7, #12]
 8000c08:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	60bb      	str	r3, [r7, #8]
 8000c0e:	4b18      	ldr	r3, [pc, #96]	; (8000c70 <HAL_TIM_Encoder_MspInit+0xc0>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	4a17      	ldr	r2, [pc, #92]	; (8000c70 <HAL_TIM_Encoder_MspInit+0xc0>)
 8000c14:	f043 0302 	orr.w	r3, r3, #2
 8000c18:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1a:	4b15      	ldr	r3, [pc, #84]	; (8000c70 <HAL_TIM_Encoder_MspInit+0xc0>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	f003 0302 	and.w	r3, r3, #2
 8000c22:	60bb      	str	r3, [r7, #8]
 8000c24:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000c26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c30:	2300      	movs	r3, #0
 8000c32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c34:	2300      	movs	r3, #0
 8000c36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c3c:	f107 0314 	add.w	r3, r7, #20
 8000c40:	4619      	mov	r1, r3
 8000c42:	480c      	ldr	r0, [pc, #48]	; (8000c74 <HAL_TIM_Encoder_MspInit+0xc4>)
 8000c44:	f000 fa74 	bl	8001130 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c48:	2308      	movs	r3, #8
 8000c4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c54:	2300      	movs	r3, #0
 8000c56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c5c:	f107 0314 	add.w	r3, r7, #20
 8000c60:	4619      	mov	r1, r3
 8000c62:	4805      	ldr	r0, [pc, #20]	; (8000c78 <HAL_TIM_Encoder_MspInit+0xc8>)
 8000c64:	f000 fa64 	bl	8001130 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000c68:	bf00      	nop
 8000c6a:	3728      	adds	r7, #40	; 0x28
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	40023800 	.word	0x40023800
 8000c74:	40020000 	.word	0x40020000
 8000c78:	40020400 	.word	0x40020400

08000c7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b08a      	sub	sp, #40	; 0x28
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c84:	f107 0314 	add.w	r3, r7, #20
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	605a      	str	r2, [r3, #4]
 8000c8e:	609a      	str	r2, [r3, #8]
 8000c90:	60da      	str	r2, [r3, #12]
 8000c92:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM8)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a19      	ldr	r2, [pc, #100]	; (8000d00 <HAL_TIM_Base_MspInit+0x84>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d12b      	bne.n	8000cf6 <HAL_TIM_Base_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	613b      	str	r3, [r7, #16]
 8000ca2:	4b18      	ldr	r3, [pc, #96]	; (8000d04 <HAL_TIM_Base_MspInit+0x88>)
 8000ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ca6:	4a17      	ldr	r2, [pc, #92]	; (8000d04 <HAL_TIM_Base_MspInit+0x88>)
 8000ca8:	f043 0302 	orr.w	r3, r3, #2
 8000cac:	6453      	str	r3, [r2, #68]	; 0x44
 8000cae:	4b15      	ldr	r3, [pc, #84]	; (8000d04 <HAL_TIM_Base_MspInit+0x88>)
 8000cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb2:	f003 0302 	and.w	r3, r3, #2
 8000cb6:	613b      	str	r3, [r7, #16]
 8000cb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60fb      	str	r3, [r7, #12]
 8000cbe:	4b11      	ldr	r3, [pc, #68]	; (8000d04 <HAL_TIM_Base_MspInit+0x88>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	4a10      	ldr	r2, [pc, #64]	; (8000d04 <HAL_TIM_Base_MspInit+0x88>)
 8000cc4:	f043 0304 	orr.w	r3, r3, #4
 8000cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cca:	4b0e      	ldr	r3, [pc, #56]	; (8000d04 <HAL_TIM_Base_MspInit+0x88>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	f003 0304 	and.w	r3, r3, #4
 8000cd2:	60fb      	str	r3, [r7, #12]
 8000cd4:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    */
    GPIO_InitStruct.Pin = PWMA_Pin;
 8000cd6:	2340      	movs	r3, #64	; 0x40
 8000cd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cda:	2302      	movs	r3, #2
 8000cdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8000ce6:	2303      	movs	r3, #3
 8000ce8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWMA_GPIO_Port, &GPIO_InitStruct);
 8000cea:	f107 0314 	add.w	r3, r7, #20
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4805      	ldr	r0, [pc, #20]	; (8000d08 <HAL_TIM_Base_MspInit+0x8c>)
 8000cf2:	f000 fa1d 	bl	8001130 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8000cf6:	bf00      	nop
 8000cf8:	3728      	adds	r7, #40	; 0x28
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	40010400 	.word	0x40010400
 8000d04:	40023800 	.word	0x40023800
 8000d08:	40020800 	.word	0x40020800

08000d0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d10:	e7fe      	b.n	8000d10 <NMI_Handler+0x4>

08000d12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d12:	b480      	push	{r7}
 8000d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d16:	e7fe      	b.n	8000d16 <HardFault_Handler+0x4>

08000d18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d1c:	e7fe      	b.n	8000d1c <MemManage_Handler+0x4>

08000d1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d22:	e7fe      	b.n	8000d22 <BusFault_Handler+0x4>

08000d24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d28:	e7fe      	b.n	8000d28 <UsageFault_Handler+0x4>

08000d2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr

08000d38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d3c:	f000 f8ce 	bl	8000edc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000d40:	f004 f8bc 	bl	8004ebc <xTaskGetSchedulerState>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b01      	cmp	r3, #1
 8000d48:	d001      	beq.n	8000d4e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000d4a:	f002 fd1d 	bl	8003788 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	bd80      	pop	{r7, pc}
	...

08000d54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b086      	sub	sp, #24
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d5c:	4a14      	ldr	r2, [pc, #80]	; (8000db0 <_sbrk+0x5c>)
 8000d5e:	4b15      	ldr	r3, [pc, #84]	; (8000db4 <_sbrk+0x60>)
 8000d60:	1ad3      	subs	r3, r2, r3
 8000d62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d64:	697b      	ldr	r3, [r7, #20]
 8000d66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d68:	4b13      	ldr	r3, [pc, #76]	; (8000db8 <_sbrk+0x64>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d102      	bne.n	8000d76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d70:	4b11      	ldr	r3, [pc, #68]	; (8000db8 <_sbrk+0x64>)
 8000d72:	4a12      	ldr	r2, [pc, #72]	; (8000dbc <_sbrk+0x68>)
 8000d74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d76:	4b10      	ldr	r3, [pc, #64]	; (8000db8 <_sbrk+0x64>)
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4413      	add	r3, r2
 8000d7e:	693a      	ldr	r2, [r7, #16]
 8000d80:	429a      	cmp	r2, r3
 8000d82:	d207      	bcs.n	8000d94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d84:	f004 fefa 	bl	8005b7c <__errno>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	220c      	movs	r2, #12
 8000d8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d92:	e009      	b.n	8000da8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d94:	4b08      	ldr	r3, [pc, #32]	; (8000db8 <_sbrk+0x64>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d9a:	4b07      	ldr	r3, [pc, #28]	; (8000db8 <_sbrk+0x64>)
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4413      	add	r3, r2
 8000da2:	4a05      	ldr	r2, [pc, #20]	; (8000db8 <_sbrk+0x64>)
 8000da4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000da6:	68fb      	ldr	r3, [r7, #12]
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	3718      	adds	r7, #24
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	20020000 	.word	0x20020000
 8000db4:	00000400 	.word	0x00000400
 8000db8:	20000090 	.word	0x20000090
 8000dbc:	20004ea0 	.word	0x20004ea0

08000dc0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dc4:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <SystemInit+0x20>)
 8000dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dca:	4a05      	ldr	r2, [pc, #20]	; (8000de0 <SystemInit+0x20>)
 8000dcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dd4:	bf00      	nop
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	e000ed00 	.word	0xe000ed00

08000de4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000de4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e1c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000de8:	480d      	ldr	r0, [pc, #52]	; (8000e20 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dea:	490e      	ldr	r1, [pc, #56]	; (8000e24 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000dec:	4a0e      	ldr	r2, [pc, #56]	; (8000e28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000df0:	e002      	b.n	8000df8 <LoopCopyDataInit>

08000df2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000df2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000df4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000df6:	3304      	adds	r3, #4

08000df8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000df8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dfc:	d3f9      	bcc.n	8000df2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dfe:	4a0b      	ldr	r2, [pc, #44]	; (8000e2c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e00:	4c0b      	ldr	r4, [pc, #44]	; (8000e30 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e04:	e001      	b.n	8000e0a <LoopFillZerobss>

08000e06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e08:	3204      	adds	r2, #4

08000e0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e0c:	d3fb      	bcc.n	8000e06 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e0e:	f7ff ffd7 	bl	8000dc0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e12:	f004 feb9 	bl	8005b88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e16:	f7ff fba7 	bl	8000568 <main>
  bx  lr    
 8000e1a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e1c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e24:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000e28:	08007010 	.word	0x08007010
  ldr r2, =_sbss
 8000e2c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000e30:	20004ea0 	.word	0x20004ea0

08000e34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e34:	e7fe      	b.n	8000e34 <ADC_IRQHandler>
	...

08000e38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e3c:	4b0e      	ldr	r3, [pc, #56]	; (8000e78 <HAL_Init+0x40>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a0d      	ldr	r2, [pc, #52]	; (8000e78 <HAL_Init+0x40>)
 8000e42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e48:	4b0b      	ldr	r3, [pc, #44]	; (8000e78 <HAL_Init+0x40>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a0a      	ldr	r2, [pc, #40]	; (8000e78 <HAL_Init+0x40>)
 8000e4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e54:	4b08      	ldr	r3, [pc, #32]	; (8000e78 <HAL_Init+0x40>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a07      	ldr	r2, [pc, #28]	; (8000e78 <HAL_Init+0x40>)
 8000e5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e60:	2003      	movs	r0, #3
 8000e62:	f000 f931 	bl	80010c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e66:	200f      	movs	r0, #15
 8000e68:	f000 f808 	bl	8000e7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e6c:	f7ff fe74 	bl	8000b58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e70:	2300      	movs	r3, #0
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	40023c00 	.word	0x40023c00

08000e7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e84:	4b12      	ldr	r3, [pc, #72]	; (8000ed0 <HAL_InitTick+0x54>)
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	4b12      	ldr	r3, [pc, #72]	; (8000ed4 <HAL_InitTick+0x58>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f000 f93b 	bl	8001116 <HAL_SYSTICK_Config>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	e00e      	b.n	8000ec8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2b0f      	cmp	r3, #15
 8000eae:	d80a      	bhi.n	8000ec6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	6879      	ldr	r1, [r7, #4]
 8000eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb8:	f000 f911 	bl	80010de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ebc:	4a06      	ldr	r2, [pc, #24]	; (8000ed8 <HAL_InitTick+0x5c>)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	e000      	b.n	8000ec8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ec6:	2301      	movs	r3, #1
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	3708      	adds	r7, #8
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	20000000 	.word	0x20000000
 8000ed4:	20000008 	.word	0x20000008
 8000ed8:	20000004 	.word	0x20000004

08000edc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ee0:	4b06      	ldr	r3, [pc, #24]	; (8000efc <HAL_IncTick+0x20>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <HAL_IncTick+0x24>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	4413      	add	r3, r2
 8000eec:	4a04      	ldr	r2, [pc, #16]	; (8000f00 <HAL_IncTick+0x24>)
 8000eee:	6013      	str	r3, [r2, #0]
}
 8000ef0:	bf00      	nop
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	20000008 	.word	0x20000008
 8000f00:	20004a4c 	.word	0x20004a4c

08000f04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  return uwTick;
 8000f08:	4b03      	ldr	r3, [pc, #12]	; (8000f18 <HAL_GetTick+0x14>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	20004a4c 	.word	0x20004a4c

08000f1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f24:	f7ff ffee 	bl	8000f04 <HAL_GetTick>
 8000f28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f34:	d005      	beq.n	8000f42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f36:	4b0a      	ldr	r3, [pc, #40]	; (8000f60 <HAL_Delay+0x44>)
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	4413      	add	r3, r2
 8000f40:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f42:	bf00      	nop
 8000f44:	f7ff ffde 	bl	8000f04 <HAL_GetTick>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	68bb      	ldr	r3, [r7, #8]
 8000f4c:	1ad3      	subs	r3, r2, r3
 8000f4e:	68fa      	ldr	r2, [r7, #12]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	d8f7      	bhi.n	8000f44 <HAL_Delay+0x28>
  {
  }
}
 8000f54:	bf00      	nop
 8000f56:	bf00      	nop
 8000f58:	3710      	adds	r7, #16
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	20000008 	.word	0x20000008

08000f64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b085      	sub	sp, #20
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	f003 0307 	and.w	r3, r3, #7
 8000f72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f74:	4b0c      	ldr	r3, [pc, #48]	; (8000fa8 <__NVIC_SetPriorityGrouping+0x44>)
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f7a:	68ba      	ldr	r2, [r7, #8]
 8000f7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f80:	4013      	ands	r3, r2
 8000f82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f96:	4a04      	ldr	r2, [pc, #16]	; (8000fa8 <__NVIC_SetPriorityGrouping+0x44>)
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	60d3      	str	r3, [r2, #12]
}
 8000f9c:	bf00      	nop
 8000f9e:	3714      	adds	r7, #20
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr
 8000fa8:	e000ed00 	.word	0xe000ed00

08000fac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fb0:	4b04      	ldr	r3, [pc, #16]	; (8000fc4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	0a1b      	lsrs	r3, r3, #8
 8000fb6:	f003 0307 	and.w	r3, r3, #7
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr
 8000fc4:	e000ed00 	.word	0xe000ed00

08000fc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	6039      	str	r1, [r7, #0]
 8000fd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	db0a      	blt.n	8000ff2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	b2da      	uxtb	r2, r3
 8000fe0:	490c      	ldr	r1, [pc, #48]	; (8001014 <__NVIC_SetPriority+0x4c>)
 8000fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe6:	0112      	lsls	r2, r2, #4
 8000fe8:	b2d2      	uxtb	r2, r2
 8000fea:	440b      	add	r3, r1
 8000fec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ff0:	e00a      	b.n	8001008 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	b2da      	uxtb	r2, r3
 8000ff6:	4908      	ldr	r1, [pc, #32]	; (8001018 <__NVIC_SetPriority+0x50>)
 8000ff8:	79fb      	ldrb	r3, [r7, #7]
 8000ffa:	f003 030f 	and.w	r3, r3, #15
 8000ffe:	3b04      	subs	r3, #4
 8001000:	0112      	lsls	r2, r2, #4
 8001002:	b2d2      	uxtb	r2, r2
 8001004:	440b      	add	r3, r1
 8001006:	761a      	strb	r2, [r3, #24]
}
 8001008:	bf00      	nop
 800100a:	370c      	adds	r7, #12
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr
 8001014:	e000e100 	.word	0xe000e100
 8001018:	e000ed00 	.word	0xe000ed00

0800101c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800101c:	b480      	push	{r7}
 800101e:	b089      	sub	sp, #36	; 0x24
 8001020:	af00      	add	r7, sp, #0
 8001022:	60f8      	str	r0, [r7, #12]
 8001024:	60b9      	str	r1, [r7, #8]
 8001026:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	f003 0307 	and.w	r3, r3, #7
 800102e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	f1c3 0307 	rsb	r3, r3, #7
 8001036:	2b04      	cmp	r3, #4
 8001038:	bf28      	it	cs
 800103a:	2304      	movcs	r3, #4
 800103c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	3304      	adds	r3, #4
 8001042:	2b06      	cmp	r3, #6
 8001044:	d902      	bls.n	800104c <NVIC_EncodePriority+0x30>
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	3b03      	subs	r3, #3
 800104a:	e000      	b.n	800104e <NVIC_EncodePriority+0x32>
 800104c:	2300      	movs	r3, #0
 800104e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001050:	f04f 32ff 	mov.w	r2, #4294967295
 8001054:	69bb      	ldr	r3, [r7, #24]
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	43da      	mvns	r2, r3
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	401a      	ands	r2, r3
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001064:	f04f 31ff 	mov.w	r1, #4294967295
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	fa01 f303 	lsl.w	r3, r1, r3
 800106e:	43d9      	mvns	r1, r3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001074:	4313      	orrs	r3, r2
         );
}
 8001076:	4618      	mov	r0, r3
 8001078:	3724      	adds	r7, #36	; 0x24
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
	...

08001084 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	3b01      	subs	r3, #1
 8001090:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001094:	d301      	bcc.n	800109a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001096:	2301      	movs	r3, #1
 8001098:	e00f      	b.n	80010ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800109a:	4a0a      	ldr	r2, [pc, #40]	; (80010c4 <SysTick_Config+0x40>)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	3b01      	subs	r3, #1
 80010a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010a2:	210f      	movs	r1, #15
 80010a4:	f04f 30ff 	mov.w	r0, #4294967295
 80010a8:	f7ff ff8e 	bl	8000fc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010ac:	4b05      	ldr	r3, [pc, #20]	; (80010c4 <SysTick_Config+0x40>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010b2:	4b04      	ldr	r3, [pc, #16]	; (80010c4 <SysTick_Config+0x40>)
 80010b4:	2207      	movs	r2, #7
 80010b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010b8:	2300      	movs	r3, #0
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	e000e010 	.word	0xe000e010

080010c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f7ff ff47 	bl	8000f64 <__NVIC_SetPriorityGrouping>
}
 80010d6:	bf00      	nop
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010de:	b580      	push	{r7, lr}
 80010e0:	b086      	sub	sp, #24
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	4603      	mov	r3, r0
 80010e6:	60b9      	str	r1, [r7, #8]
 80010e8:	607a      	str	r2, [r7, #4]
 80010ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010ec:	2300      	movs	r3, #0
 80010ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010f0:	f7ff ff5c 	bl	8000fac <__NVIC_GetPriorityGrouping>
 80010f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010f6:	687a      	ldr	r2, [r7, #4]
 80010f8:	68b9      	ldr	r1, [r7, #8]
 80010fa:	6978      	ldr	r0, [r7, #20]
 80010fc:	f7ff ff8e 	bl	800101c <NVIC_EncodePriority>
 8001100:	4602      	mov	r2, r0
 8001102:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001106:	4611      	mov	r1, r2
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff ff5d 	bl	8000fc8 <__NVIC_SetPriority>
}
 800110e:	bf00      	nop
 8001110:	3718      	adds	r7, #24
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}

08001116 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001116:	b580      	push	{r7, lr}
 8001118:	b082      	sub	sp, #8
 800111a:	af00      	add	r7, sp, #0
 800111c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f7ff ffb0 	bl	8001084 <SysTick_Config>
 8001124:	4603      	mov	r3, r0
}
 8001126:	4618      	mov	r0, r3
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
	...

08001130 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001130:	b480      	push	{r7}
 8001132:	b089      	sub	sp, #36	; 0x24
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800113a:	2300      	movs	r3, #0
 800113c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800113e:	2300      	movs	r3, #0
 8001140:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001142:	2300      	movs	r3, #0
 8001144:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001146:	2300      	movs	r3, #0
 8001148:	61fb      	str	r3, [r7, #28]
 800114a:	e16b      	b.n	8001424 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800114c:	2201      	movs	r2, #1
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	697a      	ldr	r2, [r7, #20]
 800115c:	4013      	ands	r3, r2
 800115e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001160:	693a      	ldr	r2, [r7, #16]
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	429a      	cmp	r2, r3
 8001166:	f040 815a 	bne.w	800141e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f003 0303 	and.w	r3, r3, #3
 8001172:	2b01      	cmp	r3, #1
 8001174:	d005      	beq.n	8001182 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800117e:	2b02      	cmp	r3, #2
 8001180:	d130      	bne.n	80011e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001188:	69fb      	ldr	r3, [r7, #28]
 800118a:	005b      	lsls	r3, r3, #1
 800118c:	2203      	movs	r2, #3
 800118e:	fa02 f303 	lsl.w	r3, r2, r3
 8001192:	43db      	mvns	r3, r3
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	4013      	ands	r3, r2
 8001198:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	68da      	ldr	r2, [r3, #12]
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	005b      	lsls	r3, r3, #1
 80011a2:	fa02 f303 	lsl.w	r3, r2, r3
 80011a6:	69ba      	ldr	r2, [r7, #24]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011b8:	2201      	movs	r2, #1
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	43db      	mvns	r3, r3
 80011c2:	69ba      	ldr	r2, [r7, #24]
 80011c4:	4013      	ands	r3, r2
 80011c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	091b      	lsrs	r3, r3, #4
 80011ce:	f003 0201 	and.w	r2, r3, #1
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	4313      	orrs	r3, r2
 80011dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f003 0303 	and.w	r3, r3, #3
 80011ec:	2b03      	cmp	r3, #3
 80011ee:	d017      	beq.n	8001220 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	005b      	lsls	r3, r3, #1
 80011fa:	2203      	movs	r2, #3
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	43db      	mvns	r3, r3
 8001202:	69ba      	ldr	r2, [r7, #24]
 8001204:	4013      	ands	r3, r2
 8001206:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	689a      	ldr	r2, [r3, #8]
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	005b      	lsls	r3, r3, #1
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	4313      	orrs	r3, r2
 8001218:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f003 0303 	and.w	r3, r3, #3
 8001228:	2b02      	cmp	r3, #2
 800122a:	d123      	bne.n	8001274 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	08da      	lsrs	r2, r3, #3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	3208      	adds	r2, #8
 8001234:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001238:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	f003 0307 	and.w	r3, r3, #7
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	220f      	movs	r2, #15
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	43db      	mvns	r3, r3
 800124a:	69ba      	ldr	r2, [r7, #24]
 800124c:	4013      	ands	r3, r2
 800124e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	691a      	ldr	r2, [r3, #16]
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	f003 0307 	and.w	r3, r3, #7
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	69ba      	ldr	r2, [r7, #24]
 8001262:	4313      	orrs	r3, r2
 8001264:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	08da      	lsrs	r2, r3, #3
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	3208      	adds	r2, #8
 800126e:	69b9      	ldr	r1, [r7, #24]
 8001270:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	2203      	movs	r2, #3
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	43db      	mvns	r3, r3
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	4013      	ands	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f003 0203 	and.w	r2, r3, #3
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	005b      	lsls	r3, r3, #1
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	4313      	orrs	r3, r2
 80012a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	f000 80b4 	beq.w	800141e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012b6:	2300      	movs	r3, #0
 80012b8:	60fb      	str	r3, [r7, #12]
 80012ba:	4b60      	ldr	r3, [pc, #384]	; (800143c <HAL_GPIO_Init+0x30c>)
 80012bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012be:	4a5f      	ldr	r2, [pc, #380]	; (800143c <HAL_GPIO_Init+0x30c>)
 80012c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012c4:	6453      	str	r3, [r2, #68]	; 0x44
 80012c6:	4b5d      	ldr	r3, [pc, #372]	; (800143c <HAL_GPIO_Init+0x30c>)
 80012c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012d2:	4a5b      	ldr	r2, [pc, #364]	; (8001440 <HAL_GPIO_Init+0x310>)
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	089b      	lsrs	r3, r3, #2
 80012d8:	3302      	adds	r3, #2
 80012da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	f003 0303 	and.w	r3, r3, #3
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	220f      	movs	r2, #15
 80012ea:	fa02 f303 	lsl.w	r3, r2, r3
 80012ee:	43db      	mvns	r3, r3
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	4013      	ands	r3, r2
 80012f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a52      	ldr	r2, [pc, #328]	; (8001444 <HAL_GPIO_Init+0x314>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d02b      	beq.n	8001356 <HAL_GPIO_Init+0x226>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a51      	ldr	r2, [pc, #324]	; (8001448 <HAL_GPIO_Init+0x318>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d025      	beq.n	8001352 <HAL_GPIO_Init+0x222>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a50      	ldr	r2, [pc, #320]	; (800144c <HAL_GPIO_Init+0x31c>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d01f      	beq.n	800134e <HAL_GPIO_Init+0x21e>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a4f      	ldr	r2, [pc, #316]	; (8001450 <HAL_GPIO_Init+0x320>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d019      	beq.n	800134a <HAL_GPIO_Init+0x21a>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a4e      	ldr	r2, [pc, #312]	; (8001454 <HAL_GPIO_Init+0x324>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d013      	beq.n	8001346 <HAL_GPIO_Init+0x216>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a4d      	ldr	r2, [pc, #308]	; (8001458 <HAL_GPIO_Init+0x328>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d00d      	beq.n	8001342 <HAL_GPIO_Init+0x212>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4a4c      	ldr	r2, [pc, #304]	; (800145c <HAL_GPIO_Init+0x32c>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d007      	beq.n	800133e <HAL_GPIO_Init+0x20e>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4a4b      	ldr	r2, [pc, #300]	; (8001460 <HAL_GPIO_Init+0x330>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d101      	bne.n	800133a <HAL_GPIO_Init+0x20a>
 8001336:	2307      	movs	r3, #7
 8001338:	e00e      	b.n	8001358 <HAL_GPIO_Init+0x228>
 800133a:	2308      	movs	r3, #8
 800133c:	e00c      	b.n	8001358 <HAL_GPIO_Init+0x228>
 800133e:	2306      	movs	r3, #6
 8001340:	e00a      	b.n	8001358 <HAL_GPIO_Init+0x228>
 8001342:	2305      	movs	r3, #5
 8001344:	e008      	b.n	8001358 <HAL_GPIO_Init+0x228>
 8001346:	2304      	movs	r3, #4
 8001348:	e006      	b.n	8001358 <HAL_GPIO_Init+0x228>
 800134a:	2303      	movs	r3, #3
 800134c:	e004      	b.n	8001358 <HAL_GPIO_Init+0x228>
 800134e:	2302      	movs	r3, #2
 8001350:	e002      	b.n	8001358 <HAL_GPIO_Init+0x228>
 8001352:	2301      	movs	r3, #1
 8001354:	e000      	b.n	8001358 <HAL_GPIO_Init+0x228>
 8001356:	2300      	movs	r3, #0
 8001358:	69fa      	ldr	r2, [r7, #28]
 800135a:	f002 0203 	and.w	r2, r2, #3
 800135e:	0092      	lsls	r2, r2, #2
 8001360:	4093      	lsls	r3, r2
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	4313      	orrs	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001368:	4935      	ldr	r1, [pc, #212]	; (8001440 <HAL_GPIO_Init+0x310>)
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	089b      	lsrs	r3, r3, #2
 800136e:	3302      	adds	r3, #2
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001376:	4b3b      	ldr	r3, [pc, #236]	; (8001464 <HAL_GPIO_Init+0x334>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	43db      	mvns	r3, r3
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	4013      	ands	r3, r2
 8001384:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d003      	beq.n	800139a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001392:	69ba      	ldr	r2, [r7, #24]
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	4313      	orrs	r3, r2
 8001398:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800139a:	4a32      	ldr	r2, [pc, #200]	; (8001464 <HAL_GPIO_Init+0x334>)
 800139c:	69bb      	ldr	r3, [r7, #24]
 800139e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80013a0:	4b30      	ldr	r3, [pc, #192]	; (8001464 <HAL_GPIO_Init+0x334>)
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	43db      	mvns	r3, r3
 80013aa:	69ba      	ldr	r2, [r7, #24]
 80013ac:	4013      	ands	r3, r2
 80013ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d003      	beq.n	80013c4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	4313      	orrs	r3, r2
 80013c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013c4:	4a27      	ldr	r2, [pc, #156]	; (8001464 <HAL_GPIO_Init+0x334>)
 80013c6:	69bb      	ldr	r3, [r7, #24]
 80013c8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013ca:	4b26      	ldr	r3, [pc, #152]	; (8001464 <HAL_GPIO_Init+0x334>)
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	43db      	mvns	r3, r3
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	4013      	ands	r3, r2
 80013d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d003      	beq.n	80013ee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	4313      	orrs	r3, r2
 80013ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013ee:	4a1d      	ldr	r2, [pc, #116]	; (8001464 <HAL_GPIO_Init+0x334>)
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013f4:	4b1b      	ldr	r3, [pc, #108]	; (8001464 <HAL_GPIO_Init+0x334>)
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	43db      	mvns	r3, r3
 80013fe:	69ba      	ldr	r2, [r7, #24]
 8001400:	4013      	ands	r3, r2
 8001402:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800140c:	2b00      	cmp	r3, #0
 800140e:	d003      	beq.n	8001418 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	4313      	orrs	r3, r2
 8001416:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001418:	4a12      	ldr	r2, [pc, #72]	; (8001464 <HAL_GPIO_Init+0x334>)
 800141a:	69bb      	ldr	r3, [r7, #24]
 800141c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	3301      	adds	r3, #1
 8001422:	61fb      	str	r3, [r7, #28]
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	2b0f      	cmp	r3, #15
 8001428:	f67f ae90 	bls.w	800114c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800142c:	bf00      	nop
 800142e:	bf00      	nop
 8001430:	3724      	adds	r7, #36	; 0x24
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	40023800 	.word	0x40023800
 8001440:	40013800 	.word	0x40013800
 8001444:	40020000 	.word	0x40020000
 8001448:	40020400 	.word	0x40020400
 800144c:	40020800 	.word	0x40020800
 8001450:	40020c00 	.word	0x40020c00
 8001454:	40021000 	.word	0x40021000
 8001458:	40021400 	.word	0x40021400
 800145c:	40021800 	.word	0x40021800
 8001460:	40021c00 	.word	0x40021c00
 8001464:	40013c00 	.word	0x40013c00

08001468 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	460b      	mov	r3, r1
 8001472:	807b      	strh	r3, [r7, #2]
 8001474:	4613      	mov	r3, r2
 8001476:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001478:	787b      	ldrb	r3, [r7, #1]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d003      	beq.n	8001486 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800147e:	887a      	ldrh	r2, [r7, #2]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001484:	e003      	b.n	800148e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001486:	887b      	ldrh	r3, [r7, #2]
 8001488:	041a      	lsls	r2, r3, #16
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	619a      	str	r2, [r3, #24]
}
 800148e:	bf00      	nop
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
	...

0800149c <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80014a2:	4b06      	ldr	r3, [pc, #24]	; (80014bc <HAL_PWR_EnableBkUpAccess+0x20>)
 80014a4:	2201      	movs	r2, #1
 80014a6:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 80014a8:	4b05      	ldr	r3, [pc, #20]	; (80014c0 <HAL_PWR_EnableBkUpAccess+0x24>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 80014ae:	687b      	ldr	r3, [r7, #4]
}
 80014b0:	bf00      	nop
 80014b2:	370c      	adds	r7, #12
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr
 80014bc:	420e0020 	.word	0x420e0020
 80014c0:	40007000 	.word	0x40007000

080014c4 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 80014ca:	4b06      	ldr	r3, [pc, #24]	; (80014e4 <HAL_PWR_DisableBkUpAccess+0x20>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 80014d0:	4b05      	ldr	r3, [pc, #20]	; (80014e8 <HAL_PWR_DisableBkUpAccess+0x24>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 80014d6:	687b      	ldr	r3, [r7, #4]
}
 80014d8:	bf00      	nop
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr
 80014e4:	420e0020 	.word	0x420e0020
 80014e8:	40007000 	.word	0x40007000

080014ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b086      	sub	sp, #24
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d101      	bne.n	80014fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e264      	b.n	80019c8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f003 0301 	and.w	r3, r3, #1
 8001506:	2b00      	cmp	r3, #0
 8001508:	d075      	beq.n	80015f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800150a:	4ba3      	ldr	r3, [pc, #652]	; (8001798 <HAL_RCC_OscConfig+0x2ac>)
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	f003 030c 	and.w	r3, r3, #12
 8001512:	2b04      	cmp	r3, #4
 8001514:	d00c      	beq.n	8001530 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001516:	4ba0      	ldr	r3, [pc, #640]	; (8001798 <HAL_RCC_OscConfig+0x2ac>)
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800151e:	2b08      	cmp	r3, #8
 8001520:	d112      	bne.n	8001548 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001522:	4b9d      	ldr	r3, [pc, #628]	; (8001798 <HAL_RCC_OscConfig+0x2ac>)
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800152a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800152e:	d10b      	bne.n	8001548 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001530:	4b99      	ldr	r3, [pc, #612]	; (8001798 <HAL_RCC_OscConfig+0x2ac>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001538:	2b00      	cmp	r3, #0
 800153a:	d05b      	beq.n	80015f4 <HAL_RCC_OscConfig+0x108>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d157      	bne.n	80015f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001544:	2301      	movs	r3, #1
 8001546:	e23f      	b.n	80019c8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001550:	d106      	bne.n	8001560 <HAL_RCC_OscConfig+0x74>
 8001552:	4b91      	ldr	r3, [pc, #580]	; (8001798 <HAL_RCC_OscConfig+0x2ac>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a90      	ldr	r2, [pc, #576]	; (8001798 <HAL_RCC_OscConfig+0x2ac>)
 8001558:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800155c:	6013      	str	r3, [r2, #0]
 800155e:	e01d      	b.n	800159c <HAL_RCC_OscConfig+0xb0>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001568:	d10c      	bne.n	8001584 <HAL_RCC_OscConfig+0x98>
 800156a:	4b8b      	ldr	r3, [pc, #556]	; (8001798 <HAL_RCC_OscConfig+0x2ac>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a8a      	ldr	r2, [pc, #552]	; (8001798 <HAL_RCC_OscConfig+0x2ac>)
 8001570:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001574:	6013      	str	r3, [r2, #0]
 8001576:	4b88      	ldr	r3, [pc, #544]	; (8001798 <HAL_RCC_OscConfig+0x2ac>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a87      	ldr	r2, [pc, #540]	; (8001798 <HAL_RCC_OscConfig+0x2ac>)
 800157c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001580:	6013      	str	r3, [r2, #0]
 8001582:	e00b      	b.n	800159c <HAL_RCC_OscConfig+0xb0>
 8001584:	4b84      	ldr	r3, [pc, #528]	; (8001798 <HAL_RCC_OscConfig+0x2ac>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a83      	ldr	r2, [pc, #524]	; (8001798 <HAL_RCC_OscConfig+0x2ac>)
 800158a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800158e:	6013      	str	r3, [r2, #0]
 8001590:	4b81      	ldr	r3, [pc, #516]	; (8001798 <HAL_RCC_OscConfig+0x2ac>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a80      	ldr	r2, [pc, #512]	; (8001798 <HAL_RCC_OscConfig+0x2ac>)
 8001596:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800159a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d013      	beq.n	80015cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a4:	f7ff fcae 	bl	8000f04 <HAL_GetTick>
 80015a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015aa:	e008      	b.n	80015be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015ac:	f7ff fcaa 	bl	8000f04 <HAL_GetTick>
 80015b0:	4602      	mov	r2, r0
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	2b64      	cmp	r3, #100	; 0x64
 80015b8:	d901      	bls.n	80015be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80015ba:	2303      	movs	r3, #3
 80015bc:	e204      	b.n	80019c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015be:	4b76      	ldr	r3, [pc, #472]	; (8001798 <HAL_RCC_OscConfig+0x2ac>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d0f0      	beq.n	80015ac <HAL_RCC_OscConfig+0xc0>
 80015ca:	e014      	b.n	80015f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015cc:	f7ff fc9a 	bl	8000f04 <HAL_GetTick>
 80015d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015d2:	e008      	b.n	80015e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015d4:	f7ff fc96 	bl	8000f04 <HAL_GetTick>
 80015d8:	4602      	mov	r2, r0
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	2b64      	cmp	r3, #100	; 0x64
 80015e0:	d901      	bls.n	80015e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015e2:	2303      	movs	r3, #3
 80015e4:	e1f0      	b.n	80019c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015e6:	4b6c      	ldr	r3, [pc, #432]	; (8001798 <HAL_RCC_OscConfig+0x2ac>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d1f0      	bne.n	80015d4 <HAL_RCC_OscConfig+0xe8>
 80015f2:	e000      	b.n	80015f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 0302 	and.w	r3, r3, #2
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d063      	beq.n	80016ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001602:	4b65      	ldr	r3, [pc, #404]	; (8001798 <HAL_RCC_OscConfig+0x2ac>)
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	f003 030c 	and.w	r3, r3, #12
 800160a:	2b00      	cmp	r3, #0
 800160c:	d00b      	beq.n	8001626 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800160e:	4b62      	ldr	r3, [pc, #392]	; (8001798 <HAL_RCC_OscConfig+0x2ac>)
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001616:	2b08      	cmp	r3, #8
 8001618:	d11c      	bne.n	8001654 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800161a:	4b5f      	ldr	r3, [pc, #380]	; (8001798 <HAL_RCC_OscConfig+0x2ac>)
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d116      	bne.n	8001654 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001626:	4b5c      	ldr	r3, [pc, #368]	; (8001798 <HAL_RCC_OscConfig+0x2ac>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 0302 	and.w	r3, r3, #2
 800162e:	2b00      	cmp	r3, #0
 8001630:	d005      	beq.n	800163e <HAL_RCC_OscConfig+0x152>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	68db      	ldr	r3, [r3, #12]
 8001636:	2b01      	cmp	r3, #1
 8001638:	d001      	beq.n	800163e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e1c4      	b.n	80019c8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800163e:	4b56      	ldr	r3, [pc, #344]	; (8001798 <HAL_RCC_OscConfig+0x2ac>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	691b      	ldr	r3, [r3, #16]
 800164a:	00db      	lsls	r3, r3, #3
 800164c:	4952      	ldr	r1, [pc, #328]	; (8001798 <HAL_RCC_OscConfig+0x2ac>)
 800164e:	4313      	orrs	r3, r2
 8001650:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001652:	e03a      	b.n	80016ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	68db      	ldr	r3, [r3, #12]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d020      	beq.n	800169e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800165c:	4b4f      	ldr	r3, [pc, #316]	; (800179c <HAL_RCC_OscConfig+0x2b0>)
 800165e:	2201      	movs	r2, #1
 8001660:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001662:	f7ff fc4f 	bl	8000f04 <HAL_GetTick>
 8001666:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001668:	e008      	b.n	800167c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800166a:	f7ff fc4b 	bl	8000f04 <HAL_GetTick>
 800166e:	4602      	mov	r2, r0
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	2b02      	cmp	r3, #2
 8001676:	d901      	bls.n	800167c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001678:	2303      	movs	r3, #3
 800167a:	e1a5      	b.n	80019c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800167c:	4b46      	ldr	r3, [pc, #280]	; (8001798 <HAL_RCC_OscConfig+0x2ac>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 0302 	and.w	r3, r3, #2
 8001684:	2b00      	cmp	r3, #0
 8001686:	d0f0      	beq.n	800166a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001688:	4b43      	ldr	r3, [pc, #268]	; (8001798 <HAL_RCC_OscConfig+0x2ac>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	691b      	ldr	r3, [r3, #16]
 8001694:	00db      	lsls	r3, r3, #3
 8001696:	4940      	ldr	r1, [pc, #256]	; (8001798 <HAL_RCC_OscConfig+0x2ac>)
 8001698:	4313      	orrs	r3, r2
 800169a:	600b      	str	r3, [r1, #0]
 800169c:	e015      	b.n	80016ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800169e:	4b3f      	ldr	r3, [pc, #252]	; (800179c <HAL_RCC_OscConfig+0x2b0>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016a4:	f7ff fc2e 	bl	8000f04 <HAL_GetTick>
 80016a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016aa:	e008      	b.n	80016be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016ac:	f7ff fc2a 	bl	8000f04 <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d901      	bls.n	80016be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e184      	b.n	80019c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016be:	4b36      	ldr	r3, [pc, #216]	; (8001798 <HAL_RCC_OscConfig+0x2ac>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0302 	and.w	r3, r3, #2
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d1f0      	bne.n	80016ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0308 	and.w	r3, r3, #8
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d030      	beq.n	8001738 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	695b      	ldr	r3, [r3, #20]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d016      	beq.n	800170c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016de:	4b30      	ldr	r3, [pc, #192]	; (80017a0 <HAL_RCC_OscConfig+0x2b4>)
 80016e0:	2201      	movs	r2, #1
 80016e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016e4:	f7ff fc0e 	bl	8000f04 <HAL_GetTick>
 80016e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016ea:	e008      	b.n	80016fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016ec:	f7ff fc0a 	bl	8000f04 <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d901      	bls.n	80016fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80016fa:	2303      	movs	r3, #3
 80016fc:	e164      	b.n	80019c8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016fe:	4b26      	ldr	r3, [pc, #152]	; (8001798 <HAL_RCC_OscConfig+0x2ac>)
 8001700:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	2b00      	cmp	r3, #0
 8001708:	d0f0      	beq.n	80016ec <HAL_RCC_OscConfig+0x200>
 800170a:	e015      	b.n	8001738 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800170c:	4b24      	ldr	r3, [pc, #144]	; (80017a0 <HAL_RCC_OscConfig+0x2b4>)
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001712:	f7ff fbf7 	bl	8000f04 <HAL_GetTick>
 8001716:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001718:	e008      	b.n	800172c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800171a:	f7ff fbf3 	bl	8000f04 <HAL_GetTick>
 800171e:	4602      	mov	r2, r0
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	2b02      	cmp	r3, #2
 8001726:	d901      	bls.n	800172c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001728:	2303      	movs	r3, #3
 800172a:	e14d      	b.n	80019c8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800172c:	4b1a      	ldr	r3, [pc, #104]	; (8001798 <HAL_RCC_OscConfig+0x2ac>)
 800172e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001730:	f003 0302 	and.w	r3, r3, #2
 8001734:	2b00      	cmp	r3, #0
 8001736:	d1f0      	bne.n	800171a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 0304 	and.w	r3, r3, #4
 8001740:	2b00      	cmp	r3, #0
 8001742:	f000 80a0 	beq.w	8001886 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001746:	2300      	movs	r3, #0
 8001748:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800174a:	4b13      	ldr	r3, [pc, #76]	; (8001798 <HAL_RCC_OscConfig+0x2ac>)
 800174c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d10f      	bne.n	8001776 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001756:	2300      	movs	r3, #0
 8001758:	60bb      	str	r3, [r7, #8]
 800175a:	4b0f      	ldr	r3, [pc, #60]	; (8001798 <HAL_RCC_OscConfig+0x2ac>)
 800175c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175e:	4a0e      	ldr	r2, [pc, #56]	; (8001798 <HAL_RCC_OscConfig+0x2ac>)
 8001760:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001764:	6413      	str	r3, [r2, #64]	; 0x40
 8001766:	4b0c      	ldr	r3, [pc, #48]	; (8001798 <HAL_RCC_OscConfig+0x2ac>)
 8001768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800176e:	60bb      	str	r3, [r7, #8]
 8001770:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001772:	2301      	movs	r3, #1
 8001774:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001776:	4b0b      	ldr	r3, [pc, #44]	; (80017a4 <HAL_RCC_OscConfig+0x2b8>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800177e:	2b00      	cmp	r3, #0
 8001780:	d121      	bne.n	80017c6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001782:	4b08      	ldr	r3, [pc, #32]	; (80017a4 <HAL_RCC_OscConfig+0x2b8>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a07      	ldr	r2, [pc, #28]	; (80017a4 <HAL_RCC_OscConfig+0x2b8>)
 8001788:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800178c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800178e:	f7ff fbb9 	bl	8000f04 <HAL_GetTick>
 8001792:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001794:	e011      	b.n	80017ba <HAL_RCC_OscConfig+0x2ce>
 8001796:	bf00      	nop
 8001798:	40023800 	.word	0x40023800
 800179c:	42470000 	.word	0x42470000
 80017a0:	42470e80 	.word	0x42470e80
 80017a4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017a8:	f7ff fbac 	bl	8000f04 <HAL_GetTick>
 80017ac:	4602      	mov	r2, r0
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d901      	bls.n	80017ba <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80017b6:	2303      	movs	r3, #3
 80017b8:	e106      	b.n	80019c8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017ba:	4b85      	ldr	r3, [pc, #532]	; (80019d0 <HAL_RCC_OscConfig+0x4e4>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d0f0      	beq.n	80017a8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d106      	bne.n	80017dc <HAL_RCC_OscConfig+0x2f0>
 80017ce:	4b81      	ldr	r3, [pc, #516]	; (80019d4 <HAL_RCC_OscConfig+0x4e8>)
 80017d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017d2:	4a80      	ldr	r2, [pc, #512]	; (80019d4 <HAL_RCC_OscConfig+0x4e8>)
 80017d4:	f043 0301 	orr.w	r3, r3, #1
 80017d8:	6713      	str	r3, [r2, #112]	; 0x70
 80017da:	e01c      	b.n	8001816 <HAL_RCC_OscConfig+0x32a>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	2b05      	cmp	r3, #5
 80017e2:	d10c      	bne.n	80017fe <HAL_RCC_OscConfig+0x312>
 80017e4:	4b7b      	ldr	r3, [pc, #492]	; (80019d4 <HAL_RCC_OscConfig+0x4e8>)
 80017e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017e8:	4a7a      	ldr	r2, [pc, #488]	; (80019d4 <HAL_RCC_OscConfig+0x4e8>)
 80017ea:	f043 0304 	orr.w	r3, r3, #4
 80017ee:	6713      	str	r3, [r2, #112]	; 0x70
 80017f0:	4b78      	ldr	r3, [pc, #480]	; (80019d4 <HAL_RCC_OscConfig+0x4e8>)
 80017f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017f4:	4a77      	ldr	r2, [pc, #476]	; (80019d4 <HAL_RCC_OscConfig+0x4e8>)
 80017f6:	f043 0301 	orr.w	r3, r3, #1
 80017fa:	6713      	str	r3, [r2, #112]	; 0x70
 80017fc:	e00b      	b.n	8001816 <HAL_RCC_OscConfig+0x32a>
 80017fe:	4b75      	ldr	r3, [pc, #468]	; (80019d4 <HAL_RCC_OscConfig+0x4e8>)
 8001800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001802:	4a74      	ldr	r2, [pc, #464]	; (80019d4 <HAL_RCC_OscConfig+0x4e8>)
 8001804:	f023 0301 	bic.w	r3, r3, #1
 8001808:	6713      	str	r3, [r2, #112]	; 0x70
 800180a:	4b72      	ldr	r3, [pc, #456]	; (80019d4 <HAL_RCC_OscConfig+0x4e8>)
 800180c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800180e:	4a71      	ldr	r2, [pc, #452]	; (80019d4 <HAL_RCC_OscConfig+0x4e8>)
 8001810:	f023 0304 	bic.w	r3, r3, #4
 8001814:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d015      	beq.n	800184a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800181e:	f7ff fb71 	bl	8000f04 <HAL_GetTick>
 8001822:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001824:	e00a      	b.n	800183c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001826:	f7ff fb6d 	bl	8000f04 <HAL_GetTick>
 800182a:	4602      	mov	r2, r0
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	f241 3288 	movw	r2, #5000	; 0x1388
 8001834:	4293      	cmp	r3, r2
 8001836:	d901      	bls.n	800183c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001838:	2303      	movs	r3, #3
 800183a:	e0c5      	b.n	80019c8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800183c:	4b65      	ldr	r3, [pc, #404]	; (80019d4 <HAL_RCC_OscConfig+0x4e8>)
 800183e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001840:	f003 0302 	and.w	r3, r3, #2
 8001844:	2b00      	cmp	r3, #0
 8001846:	d0ee      	beq.n	8001826 <HAL_RCC_OscConfig+0x33a>
 8001848:	e014      	b.n	8001874 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800184a:	f7ff fb5b 	bl	8000f04 <HAL_GetTick>
 800184e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001850:	e00a      	b.n	8001868 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001852:	f7ff fb57 	bl	8000f04 <HAL_GetTick>
 8001856:	4602      	mov	r2, r0
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001860:	4293      	cmp	r3, r2
 8001862:	d901      	bls.n	8001868 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001864:	2303      	movs	r3, #3
 8001866:	e0af      	b.n	80019c8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001868:	4b5a      	ldr	r3, [pc, #360]	; (80019d4 <HAL_RCC_OscConfig+0x4e8>)
 800186a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800186c:	f003 0302 	and.w	r3, r3, #2
 8001870:	2b00      	cmp	r3, #0
 8001872:	d1ee      	bne.n	8001852 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001874:	7dfb      	ldrb	r3, [r7, #23]
 8001876:	2b01      	cmp	r3, #1
 8001878:	d105      	bne.n	8001886 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800187a:	4b56      	ldr	r3, [pc, #344]	; (80019d4 <HAL_RCC_OscConfig+0x4e8>)
 800187c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187e:	4a55      	ldr	r2, [pc, #340]	; (80019d4 <HAL_RCC_OscConfig+0x4e8>)
 8001880:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001884:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	699b      	ldr	r3, [r3, #24]
 800188a:	2b00      	cmp	r3, #0
 800188c:	f000 809b 	beq.w	80019c6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001890:	4b50      	ldr	r3, [pc, #320]	; (80019d4 <HAL_RCC_OscConfig+0x4e8>)
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	f003 030c 	and.w	r3, r3, #12
 8001898:	2b08      	cmp	r3, #8
 800189a:	d05c      	beq.n	8001956 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	699b      	ldr	r3, [r3, #24]
 80018a0:	2b02      	cmp	r3, #2
 80018a2:	d141      	bne.n	8001928 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018a4:	4b4c      	ldr	r3, [pc, #304]	; (80019d8 <HAL_RCC_OscConfig+0x4ec>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018aa:	f7ff fb2b 	bl	8000f04 <HAL_GetTick>
 80018ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018b0:	e008      	b.n	80018c4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018b2:	f7ff fb27 	bl	8000f04 <HAL_GetTick>
 80018b6:	4602      	mov	r2, r0
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	2b02      	cmp	r3, #2
 80018be:	d901      	bls.n	80018c4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80018c0:	2303      	movs	r3, #3
 80018c2:	e081      	b.n	80019c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018c4:	4b43      	ldr	r3, [pc, #268]	; (80019d4 <HAL_RCC_OscConfig+0x4e8>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d1f0      	bne.n	80018b2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	69da      	ldr	r2, [r3, #28]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6a1b      	ldr	r3, [r3, #32]
 80018d8:	431a      	orrs	r2, r3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018de:	019b      	lsls	r3, r3, #6
 80018e0:	431a      	orrs	r2, r3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e6:	085b      	lsrs	r3, r3, #1
 80018e8:	3b01      	subs	r3, #1
 80018ea:	041b      	lsls	r3, r3, #16
 80018ec:	431a      	orrs	r2, r3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f2:	061b      	lsls	r3, r3, #24
 80018f4:	4937      	ldr	r1, [pc, #220]	; (80019d4 <HAL_RCC_OscConfig+0x4e8>)
 80018f6:	4313      	orrs	r3, r2
 80018f8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018fa:	4b37      	ldr	r3, [pc, #220]	; (80019d8 <HAL_RCC_OscConfig+0x4ec>)
 80018fc:	2201      	movs	r2, #1
 80018fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001900:	f7ff fb00 	bl	8000f04 <HAL_GetTick>
 8001904:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001906:	e008      	b.n	800191a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001908:	f7ff fafc 	bl	8000f04 <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	2b02      	cmp	r3, #2
 8001914:	d901      	bls.n	800191a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e056      	b.n	80019c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800191a:	4b2e      	ldr	r3, [pc, #184]	; (80019d4 <HAL_RCC_OscConfig+0x4e8>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d0f0      	beq.n	8001908 <HAL_RCC_OscConfig+0x41c>
 8001926:	e04e      	b.n	80019c6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001928:	4b2b      	ldr	r3, [pc, #172]	; (80019d8 <HAL_RCC_OscConfig+0x4ec>)
 800192a:	2200      	movs	r2, #0
 800192c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800192e:	f7ff fae9 	bl	8000f04 <HAL_GetTick>
 8001932:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001934:	e008      	b.n	8001948 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001936:	f7ff fae5 	bl	8000f04 <HAL_GetTick>
 800193a:	4602      	mov	r2, r0
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	2b02      	cmp	r3, #2
 8001942:	d901      	bls.n	8001948 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001944:	2303      	movs	r3, #3
 8001946:	e03f      	b.n	80019c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001948:	4b22      	ldr	r3, [pc, #136]	; (80019d4 <HAL_RCC_OscConfig+0x4e8>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001950:	2b00      	cmp	r3, #0
 8001952:	d1f0      	bne.n	8001936 <HAL_RCC_OscConfig+0x44a>
 8001954:	e037      	b.n	80019c6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	699b      	ldr	r3, [r3, #24]
 800195a:	2b01      	cmp	r3, #1
 800195c:	d101      	bne.n	8001962 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e032      	b.n	80019c8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001962:	4b1c      	ldr	r3, [pc, #112]	; (80019d4 <HAL_RCC_OscConfig+0x4e8>)
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	699b      	ldr	r3, [r3, #24]
 800196c:	2b01      	cmp	r3, #1
 800196e:	d028      	beq.n	80019c2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800197a:	429a      	cmp	r2, r3
 800197c:	d121      	bne.n	80019c2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001988:	429a      	cmp	r2, r3
 800198a:	d11a      	bne.n	80019c2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800198c:	68fa      	ldr	r2, [r7, #12]
 800198e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001992:	4013      	ands	r3, r2
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001998:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800199a:	4293      	cmp	r3, r2
 800199c:	d111      	bne.n	80019c2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a8:	085b      	lsrs	r3, r3, #1
 80019aa:	3b01      	subs	r3, #1
 80019ac:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019ae:	429a      	cmp	r2, r3
 80019b0:	d107      	bne.n	80019c2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019bc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019be:	429a      	cmp	r2, r3
 80019c0:	d001      	beq.n	80019c6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e000      	b.n	80019c8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80019c6:	2300      	movs	r3, #0
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3718      	adds	r7, #24
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	40007000 	.word	0x40007000
 80019d4:	40023800 	.word	0x40023800
 80019d8:	42470060 	.word	0x42470060

080019dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d101      	bne.n	80019f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e0cc      	b.n	8001b8a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019f0:	4b68      	ldr	r3, [pc, #416]	; (8001b94 <HAL_RCC_ClockConfig+0x1b8>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0307 	and.w	r3, r3, #7
 80019f8:	683a      	ldr	r2, [r7, #0]
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d90c      	bls.n	8001a18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019fe:	4b65      	ldr	r3, [pc, #404]	; (8001b94 <HAL_RCC_ClockConfig+0x1b8>)
 8001a00:	683a      	ldr	r2, [r7, #0]
 8001a02:	b2d2      	uxtb	r2, r2
 8001a04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a06:	4b63      	ldr	r3, [pc, #396]	; (8001b94 <HAL_RCC_ClockConfig+0x1b8>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0307 	and.w	r3, r3, #7
 8001a0e:	683a      	ldr	r2, [r7, #0]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d001      	beq.n	8001a18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e0b8      	b.n	8001b8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0302 	and.w	r3, r3, #2
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d020      	beq.n	8001a66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 0304 	and.w	r3, r3, #4
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d005      	beq.n	8001a3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a30:	4b59      	ldr	r3, [pc, #356]	; (8001b98 <HAL_RCC_ClockConfig+0x1bc>)
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	4a58      	ldr	r2, [pc, #352]	; (8001b98 <HAL_RCC_ClockConfig+0x1bc>)
 8001a36:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a3a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f003 0308 	and.w	r3, r3, #8
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d005      	beq.n	8001a54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a48:	4b53      	ldr	r3, [pc, #332]	; (8001b98 <HAL_RCC_ClockConfig+0x1bc>)
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	4a52      	ldr	r2, [pc, #328]	; (8001b98 <HAL_RCC_ClockConfig+0x1bc>)
 8001a4e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a54:	4b50      	ldr	r3, [pc, #320]	; (8001b98 <HAL_RCC_ClockConfig+0x1bc>)
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	494d      	ldr	r1, [pc, #308]	; (8001b98 <HAL_RCC_ClockConfig+0x1bc>)
 8001a62:	4313      	orrs	r3, r2
 8001a64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d044      	beq.n	8001afc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d107      	bne.n	8001a8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a7a:	4b47      	ldr	r3, [pc, #284]	; (8001b98 <HAL_RCC_ClockConfig+0x1bc>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d119      	bne.n	8001aba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e07f      	b.n	8001b8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d003      	beq.n	8001a9a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a96:	2b03      	cmp	r3, #3
 8001a98:	d107      	bne.n	8001aaa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a9a:	4b3f      	ldr	r3, [pc, #252]	; (8001b98 <HAL_RCC_ClockConfig+0x1bc>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d109      	bne.n	8001aba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e06f      	b.n	8001b8a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aaa:	4b3b      	ldr	r3, [pc, #236]	; (8001b98 <HAL_RCC_ClockConfig+0x1bc>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d101      	bne.n	8001aba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e067      	b.n	8001b8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001aba:	4b37      	ldr	r3, [pc, #220]	; (8001b98 <HAL_RCC_ClockConfig+0x1bc>)
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	f023 0203 	bic.w	r2, r3, #3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	4934      	ldr	r1, [pc, #208]	; (8001b98 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001acc:	f7ff fa1a 	bl	8000f04 <HAL_GetTick>
 8001ad0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ad2:	e00a      	b.n	8001aea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ad4:	f7ff fa16 	bl	8000f04 <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e04f      	b.n	8001b8a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aea:	4b2b      	ldr	r3, [pc, #172]	; (8001b98 <HAL_RCC_ClockConfig+0x1bc>)
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	f003 020c 	and.w	r2, r3, #12
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d1eb      	bne.n	8001ad4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001afc:	4b25      	ldr	r3, [pc, #148]	; (8001b94 <HAL_RCC_ClockConfig+0x1b8>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0307 	and.w	r3, r3, #7
 8001b04:	683a      	ldr	r2, [r7, #0]
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d20c      	bcs.n	8001b24 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b0a:	4b22      	ldr	r3, [pc, #136]	; (8001b94 <HAL_RCC_ClockConfig+0x1b8>)
 8001b0c:	683a      	ldr	r2, [r7, #0]
 8001b0e:	b2d2      	uxtb	r2, r2
 8001b10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b12:	4b20      	ldr	r3, [pc, #128]	; (8001b94 <HAL_RCC_ClockConfig+0x1b8>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0307 	and.w	r3, r3, #7
 8001b1a:	683a      	ldr	r2, [r7, #0]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d001      	beq.n	8001b24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e032      	b.n	8001b8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0304 	and.w	r3, r3, #4
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d008      	beq.n	8001b42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b30:	4b19      	ldr	r3, [pc, #100]	; (8001b98 <HAL_RCC_ClockConfig+0x1bc>)
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	4916      	ldr	r1, [pc, #88]	; (8001b98 <HAL_RCC_ClockConfig+0x1bc>)
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0308 	and.w	r3, r3, #8
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d009      	beq.n	8001b62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b4e:	4b12      	ldr	r3, [pc, #72]	; (8001b98 <HAL_RCC_ClockConfig+0x1bc>)
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	691b      	ldr	r3, [r3, #16]
 8001b5a:	00db      	lsls	r3, r3, #3
 8001b5c:	490e      	ldr	r1, [pc, #56]	; (8001b98 <HAL_RCC_ClockConfig+0x1bc>)
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b62:	f000 f821 	bl	8001ba8 <HAL_RCC_GetSysClockFreq>
 8001b66:	4602      	mov	r2, r0
 8001b68:	4b0b      	ldr	r3, [pc, #44]	; (8001b98 <HAL_RCC_ClockConfig+0x1bc>)
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	091b      	lsrs	r3, r3, #4
 8001b6e:	f003 030f 	and.w	r3, r3, #15
 8001b72:	490a      	ldr	r1, [pc, #40]	; (8001b9c <HAL_RCC_ClockConfig+0x1c0>)
 8001b74:	5ccb      	ldrb	r3, [r1, r3]
 8001b76:	fa22 f303 	lsr.w	r3, r2, r3
 8001b7a:	4a09      	ldr	r2, [pc, #36]	; (8001ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b7e:	4b09      	ldr	r3, [pc, #36]	; (8001ba4 <HAL_RCC_ClockConfig+0x1c8>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7ff f97a 	bl	8000e7c <HAL_InitTick>

  return HAL_OK;
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3710      	adds	r7, #16
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	40023c00 	.word	0x40023c00
 8001b98:	40023800 	.word	0x40023800
 8001b9c:	08006558 	.word	0x08006558
 8001ba0:	20000000 	.word	0x20000000
 8001ba4:	20000004 	.word	0x20000004

08001ba8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ba8:	b5b0      	push	{r4, r5, r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001bae:	2100      	movs	r1, #0
 8001bb0:	6079      	str	r1, [r7, #4]
 8001bb2:	2100      	movs	r1, #0
 8001bb4:	60f9      	str	r1, [r7, #12]
 8001bb6:	2100      	movs	r1, #0
 8001bb8:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001bba:	2100      	movs	r1, #0
 8001bbc:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001bbe:	4952      	ldr	r1, [pc, #328]	; (8001d08 <HAL_RCC_GetSysClockFreq+0x160>)
 8001bc0:	6889      	ldr	r1, [r1, #8]
 8001bc2:	f001 010c 	and.w	r1, r1, #12
 8001bc6:	2908      	cmp	r1, #8
 8001bc8:	d00d      	beq.n	8001be6 <HAL_RCC_GetSysClockFreq+0x3e>
 8001bca:	2908      	cmp	r1, #8
 8001bcc:	f200 8094 	bhi.w	8001cf8 <HAL_RCC_GetSysClockFreq+0x150>
 8001bd0:	2900      	cmp	r1, #0
 8001bd2:	d002      	beq.n	8001bda <HAL_RCC_GetSysClockFreq+0x32>
 8001bd4:	2904      	cmp	r1, #4
 8001bd6:	d003      	beq.n	8001be0 <HAL_RCC_GetSysClockFreq+0x38>
 8001bd8:	e08e      	b.n	8001cf8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001bda:	4b4c      	ldr	r3, [pc, #304]	; (8001d0c <HAL_RCC_GetSysClockFreq+0x164>)
 8001bdc:	60bb      	str	r3, [r7, #8]
       break;
 8001bde:	e08e      	b.n	8001cfe <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001be0:	4b4b      	ldr	r3, [pc, #300]	; (8001d10 <HAL_RCC_GetSysClockFreq+0x168>)
 8001be2:	60bb      	str	r3, [r7, #8]
      break;
 8001be4:	e08b      	b.n	8001cfe <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001be6:	4948      	ldr	r1, [pc, #288]	; (8001d08 <HAL_RCC_GetSysClockFreq+0x160>)
 8001be8:	6849      	ldr	r1, [r1, #4]
 8001bea:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8001bee:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bf0:	4945      	ldr	r1, [pc, #276]	; (8001d08 <HAL_RCC_GetSysClockFreq+0x160>)
 8001bf2:	6849      	ldr	r1, [r1, #4]
 8001bf4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8001bf8:	2900      	cmp	r1, #0
 8001bfa:	d024      	beq.n	8001c46 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bfc:	4942      	ldr	r1, [pc, #264]	; (8001d08 <HAL_RCC_GetSysClockFreq+0x160>)
 8001bfe:	6849      	ldr	r1, [r1, #4]
 8001c00:	0989      	lsrs	r1, r1, #6
 8001c02:	4608      	mov	r0, r1
 8001c04:	f04f 0100 	mov.w	r1, #0
 8001c08:	f240 14ff 	movw	r4, #511	; 0x1ff
 8001c0c:	f04f 0500 	mov.w	r5, #0
 8001c10:	ea00 0204 	and.w	r2, r0, r4
 8001c14:	ea01 0305 	and.w	r3, r1, r5
 8001c18:	493d      	ldr	r1, [pc, #244]	; (8001d10 <HAL_RCC_GetSysClockFreq+0x168>)
 8001c1a:	fb01 f003 	mul.w	r0, r1, r3
 8001c1e:	2100      	movs	r1, #0
 8001c20:	fb01 f102 	mul.w	r1, r1, r2
 8001c24:	1844      	adds	r4, r0, r1
 8001c26:	493a      	ldr	r1, [pc, #232]	; (8001d10 <HAL_RCC_GetSysClockFreq+0x168>)
 8001c28:	fba2 0101 	umull	r0, r1, r2, r1
 8001c2c:	1863      	adds	r3, r4, r1
 8001c2e:	4619      	mov	r1, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	461a      	mov	r2, r3
 8001c34:	f04f 0300 	mov.w	r3, #0
 8001c38:	f7fe fb1a 	bl	8000270 <__aeabi_uldivmod>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	460b      	mov	r3, r1
 8001c40:	4613      	mov	r3, r2
 8001c42:	60fb      	str	r3, [r7, #12]
 8001c44:	e04a      	b.n	8001cdc <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c46:	4b30      	ldr	r3, [pc, #192]	; (8001d08 <HAL_RCC_GetSysClockFreq+0x160>)
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	099b      	lsrs	r3, r3, #6
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	f04f 0300 	mov.w	r3, #0
 8001c52:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001c56:	f04f 0100 	mov.w	r1, #0
 8001c5a:	ea02 0400 	and.w	r4, r2, r0
 8001c5e:	ea03 0501 	and.w	r5, r3, r1
 8001c62:	4620      	mov	r0, r4
 8001c64:	4629      	mov	r1, r5
 8001c66:	f04f 0200 	mov.w	r2, #0
 8001c6a:	f04f 0300 	mov.w	r3, #0
 8001c6e:	014b      	lsls	r3, r1, #5
 8001c70:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001c74:	0142      	lsls	r2, r0, #5
 8001c76:	4610      	mov	r0, r2
 8001c78:	4619      	mov	r1, r3
 8001c7a:	1b00      	subs	r0, r0, r4
 8001c7c:	eb61 0105 	sbc.w	r1, r1, r5
 8001c80:	f04f 0200 	mov.w	r2, #0
 8001c84:	f04f 0300 	mov.w	r3, #0
 8001c88:	018b      	lsls	r3, r1, #6
 8001c8a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001c8e:	0182      	lsls	r2, r0, #6
 8001c90:	1a12      	subs	r2, r2, r0
 8001c92:	eb63 0301 	sbc.w	r3, r3, r1
 8001c96:	f04f 0000 	mov.w	r0, #0
 8001c9a:	f04f 0100 	mov.w	r1, #0
 8001c9e:	00d9      	lsls	r1, r3, #3
 8001ca0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001ca4:	00d0      	lsls	r0, r2, #3
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	460b      	mov	r3, r1
 8001caa:	1912      	adds	r2, r2, r4
 8001cac:	eb45 0303 	adc.w	r3, r5, r3
 8001cb0:	f04f 0000 	mov.w	r0, #0
 8001cb4:	f04f 0100 	mov.w	r1, #0
 8001cb8:	0299      	lsls	r1, r3, #10
 8001cba:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001cbe:	0290      	lsls	r0, r2, #10
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	460b      	mov	r3, r1
 8001cc4:	4610      	mov	r0, r2
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	461a      	mov	r2, r3
 8001ccc:	f04f 0300 	mov.w	r3, #0
 8001cd0:	f7fe face 	bl	8000270 <__aeabi_uldivmod>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	460b      	mov	r3, r1
 8001cd8:	4613      	mov	r3, r2
 8001cda:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001cdc:	4b0a      	ldr	r3, [pc, #40]	; (8001d08 <HAL_RCC_GetSysClockFreq+0x160>)
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	0c1b      	lsrs	r3, r3, #16
 8001ce2:	f003 0303 	and.w	r3, r3, #3
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001cec:	68fa      	ldr	r2, [r7, #12]
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cf4:	60bb      	str	r3, [r7, #8]
      break;
 8001cf6:	e002      	b.n	8001cfe <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cf8:	4b04      	ldr	r3, [pc, #16]	; (8001d0c <HAL_RCC_GetSysClockFreq+0x164>)
 8001cfa:	60bb      	str	r3, [r7, #8]
      break;
 8001cfc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cfe:	68bb      	ldr	r3, [r7, #8]
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3710      	adds	r7, #16
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bdb0      	pop	{r4, r5, r7, pc}
 8001d08:	40023800 	.word	0x40023800
 8001d0c:	00f42400 	.word	0x00f42400
 8001d10:	017d7840 	.word	0x017d7840

08001d14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d101      	bne.n	8001d26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e041      	b.n	8001daa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d106      	bne.n	8001d40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2200      	movs	r2, #0
 8001d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f7fe ff9e 	bl	8000c7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2202      	movs	r2, #2
 8001d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	3304      	adds	r3, #4
 8001d50:	4619      	mov	r1, r3
 8001d52:	4610      	mov	r0, r2
 8001d54:	f000 fb7e 	bl	8002454 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2201      	movs	r2, #1
 8001d64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2201      	movs	r2, #1
 8001d74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2201      	movs	r2, #1
 8001d84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2201      	movs	r2, #1
 8001d94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2201      	movs	r2, #1
 8001da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001da8:	2300      	movs	r3, #0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}

08001db2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001db2:	b580      	push	{r7, lr}
 8001db4:	b082      	sub	sp, #8
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d101      	bne.n	8001dc4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e041      	b.n	8001e48 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d106      	bne.n	8001dde <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f000 f839 	bl	8001e50 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2202      	movs	r2, #2
 8001de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	3304      	adds	r3, #4
 8001dee:	4619      	mov	r1, r3
 8001df0:	4610      	mov	r0, r2
 8001df2:	f000 fb2f 	bl	8002454 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2201      	movs	r2, #1
 8001dfa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2201      	movs	r2, #1
 8001e02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2201      	movs	r2, #1
 8001e0a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2201      	movs	r2, #1
 8001e12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2201      	movs	r2, #1
 8001e1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2201      	movs	r2, #1
 8001e22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2201      	movs	r2, #1
 8001e2a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2201      	movs	r2, #1
 8001e32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2201      	movs	r2, #1
 8001e3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2201      	movs	r2, #1
 8001e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e46:	2300      	movs	r3, #0
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3708      	adds	r7, #8
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b083      	sub	sp, #12
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001e58:	bf00      	nop
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d109      	bne.n	8001e88 <HAL_TIM_PWM_Start+0x24>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	bf14      	ite	ne
 8001e80:	2301      	movne	r3, #1
 8001e82:	2300      	moveq	r3, #0
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	e022      	b.n	8001ece <HAL_TIM_PWM_Start+0x6a>
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	2b04      	cmp	r3, #4
 8001e8c:	d109      	bne.n	8001ea2 <HAL_TIM_PWM_Start+0x3e>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	bf14      	ite	ne
 8001e9a:	2301      	movne	r3, #1
 8001e9c:	2300      	moveq	r3, #0
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	e015      	b.n	8001ece <HAL_TIM_PWM_Start+0x6a>
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	2b08      	cmp	r3, #8
 8001ea6:	d109      	bne.n	8001ebc <HAL_TIM_PWM_Start+0x58>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	bf14      	ite	ne
 8001eb4:	2301      	movne	r3, #1
 8001eb6:	2300      	moveq	r3, #0
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	e008      	b.n	8001ece <HAL_TIM_PWM_Start+0x6a>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	bf14      	ite	ne
 8001ec8:	2301      	movne	r3, #1
 8001eca:	2300      	moveq	r3, #0
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e07c      	b.n	8001fd0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d104      	bne.n	8001ee6 <HAL_TIM_PWM_Start+0x82>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2202      	movs	r2, #2
 8001ee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ee4:	e013      	b.n	8001f0e <HAL_TIM_PWM_Start+0xaa>
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	2b04      	cmp	r3, #4
 8001eea:	d104      	bne.n	8001ef6 <HAL_TIM_PWM_Start+0x92>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2202      	movs	r2, #2
 8001ef0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ef4:	e00b      	b.n	8001f0e <HAL_TIM_PWM_Start+0xaa>
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	2b08      	cmp	r3, #8
 8001efa:	d104      	bne.n	8001f06 <HAL_TIM_PWM_Start+0xa2>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2202      	movs	r2, #2
 8001f00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f04:	e003      	b.n	8001f0e <HAL_TIM_PWM_Start+0xaa>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2202      	movs	r2, #2
 8001f0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	2201      	movs	r2, #1
 8001f14:	6839      	ldr	r1, [r7, #0]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f000 fd86 	bl	8002a28 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a2d      	ldr	r2, [pc, #180]	; (8001fd8 <HAL_TIM_PWM_Start+0x174>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d004      	beq.n	8001f30 <HAL_TIM_PWM_Start+0xcc>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a2c      	ldr	r2, [pc, #176]	; (8001fdc <HAL_TIM_PWM_Start+0x178>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d101      	bne.n	8001f34 <HAL_TIM_PWM_Start+0xd0>
 8001f30:	2301      	movs	r3, #1
 8001f32:	e000      	b.n	8001f36 <HAL_TIM_PWM_Start+0xd2>
 8001f34:	2300      	movs	r3, #0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d007      	beq.n	8001f4a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f48:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a22      	ldr	r2, [pc, #136]	; (8001fd8 <HAL_TIM_PWM_Start+0x174>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d022      	beq.n	8001f9a <HAL_TIM_PWM_Start+0x136>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f5c:	d01d      	beq.n	8001f9a <HAL_TIM_PWM_Start+0x136>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a1f      	ldr	r2, [pc, #124]	; (8001fe0 <HAL_TIM_PWM_Start+0x17c>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d018      	beq.n	8001f9a <HAL_TIM_PWM_Start+0x136>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a1d      	ldr	r2, [pc, #116]	; (8001fe4 <HAL_TIM_PWM_Start+0x180>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d013      	beq.n	8001f9a <HAL_TIM_PWM_Start+0x136>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a1c      	ldr	r2, [pc, #112]	; (8001fe8 <HAL_TIM_PWM_Start+0x184>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d00e      	beq.n	8001f9a <HAL_TIM_PWM_Start+0x136>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a16      	ldr	r2, [pc, #88]	; (8001fdc <HAL_TIM_PWM_Start+0x178>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d009      	beq.n	8001f9a <HAL_TIM_PWM_Start+0x136>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a18      	ldr	r2, [pc, #96]	; (8001fec <HAL_TIM_PWM_Start+0x188>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d004      	beq.n	8001f9a <HAL_TIM_PWM_Start+0x136>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a16      	ldr	r2, [pc, #88]	; (8001ff0 <HAL_TIM_PWM_Start+0x18c>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d111      	bne.n	8001fbe <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	f003 0307 	and.w	r3, r3, #7
 8001fa4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2b06      	cmp	r3, #6
 8001faa:	d010      	beq.n	8001fce <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f042 0201 	orr.w	r2, r2, #1
 8001fba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fbc:	e007      	b.n	8001fce <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f042 0201 	orr.w	r2, r2, #1
 8001fcc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001fce:	2300      	movs	r3, #0
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3710      	adds	r7, #16
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	40010000 	.word	0x40010000
 8001fdc:	40010400 	.word	0x40010400
 8001fe0:	40000400 	.word	0x40000400
 8001fe4:	40000800 	.word	0x40000800
 8001fe8:	40000c00 	.word	0x40000c00
 8001fec:	40014000 	.word	0x40014000
 8001ff0:	40001800 	.word	0x40001800

08001ff4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b086      	sub	sp, #24
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d101      	bne.n	8002008 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e097      	b.n	8002138 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800200e:	b2db      	uxtb	r3, r3
 8002010:	2b00      	cmp	r3, #0
 8002012:	d106      	bne.n	8002022 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2200      	movs	r2, #0
 8002018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f7fe fdc7 	bl	8000bb0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2202      	movs	r2, #2
 8002026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	6812      	ldr	r2, [r2, #0]
 8002034:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002038:	f023 0307 	bic.w	r3, r3, #7
 800203c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	3304      	adds	r3, #4
 8002046:	4619      	mov	r1, r3
 8002048:	4610      	mov	r0, r2
 800204a:	f000 fa03 	bl	8002454 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	699b      	ldr	r3, [r3, #24]
 800205c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	6a1b      	ldr	r3, [r3, #32]
 8002064:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	697a      	ldr	r2, [r7, #20]
 800206c:	4313      	orrs	r3, r2
 800206e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002076:	f023 0303 	bic.w	r3, r3, #3
 800207a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	689a      	ldr	r2, [r3, #8]
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	699b      	ldr	r3, [r3, #24]
 8002084:	021b      	lsls	r3, r3, #8
 8002086:	4313      	orrs	r3, r2
 8002088:	693a      	ldr	r2, [r7, #16]
 800208a:	4313      	orrs	r3, r2
 800208c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002094:	f023 030c 	bic.w	r3, r3, #12
 8002098:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80020a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80020a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	68da      	ldr	r2, [r3, #12]
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	69db      	ldr	r3, [r3, #28]
 80020ae:	021b      	lsls	r3, r3, #8
 80020b0:	4313      	orrs	r3, r2
 80020b2:	693a      	ldr	r2, [r7, #16]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	691b      	ldr	r3, [r3, #16]
 80020bc:	011a      	lsls	r2, r3, #4
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	6a1b      	ldr	r3, [r3, #32]
 80020c2:	031b      	lsls	r3, r3, #12
 80020c4:	4313      	orrs	r3, r2
 80020c6:	693a      	ldr	r2, [r7, #16]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80020d2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80020da:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685a      	ldr	r2, [r3, #4]
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	695b      	ldr	r3, [r3, #20]
 80020e4:	011b      	lsls	r3, r3, #4
 80020e6:	4313      	orrs	r3, r2
 80020e8:	68fa      	ldr	r2, [r7, #12]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	697a      	ldr	r2, [r7, #20]
 80020f4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	693a      	ldr	r2, [r7, #16]
 80020fc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	68fa      	ldr	r2, [r7, #12]
 8002104:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2201      	movs	r2, #1
 800210a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2201      	movs	r2, #1
 8002112:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2201      	movs	r2, #1
 800211a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2201      	movs	r2, #1
 8002122:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2201      	movs	r2, #1
 800212a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2201      	movs	r2, #1
 8002132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002136:	2300      	movs	r3, #0
}
 8002138:	4618      	mov	r0, r3
 800213a:	3718      	adds	r7, #24
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}

08002140 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b086      	sub	sp, #24
 8002144:	af00      	add	r7, sp, #0
 8002146:	60f8      	str	r0, [r7, #12]
 8002148:	60b9      	str	r1, [r7, #8]
 800214a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800214c:	2300      	movs	r3, #0
 800214e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002156:	2b01      	cmp	r3, #1
 8002158:	d101      	bne.n	800215e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800215a:	2302      	movs	r3, #2
 800215c:	e0ae      	b.n	80022bc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2201      	movs	r2, #1
 8002162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2b0c      	cmp	r3, #12
 800216a:	f200 809f 	bhi.w	80022ac <HAL_TIM_PWM_ConfigChannel+0x16c>
 800216e:	a201      	add	r2, pc, #4	; (adr r2, 8002174 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002174:	080021a9 	.word	0x080021a9
 8002178:	080022ad 	.word	0x080022ad
 800217c:	080022ad 	.word	0x080022ad
 8002180:	080022ad 	.word	0x080022ad
 8002184:	080021e9 	.word	0x080021e9
 8002188:	080022ad 	.word	0x080022ad
 800218c:	080022ad 	.word	0x080022ad
 8002190:	080022ad 	.word	0x080022ad
 8002194:	0800222b 	.word	0x0800222b
 8002198:	080022ad 	.word	0x080022ad
 800219c:	080022ad 	.word	0x080022ad
 80021a0:	080022ad 	.word	0x080022ad
 80021a4:	0800226b 	.word	0x0800226b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	68b9      	ldr	r1, [r7, #8]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f000 f9f0 	bl	8002594 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	699a      	ldr	r2, [r3, #24]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f042 0208 	orr.w	r2, r2, #8
 80021c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	699a      	ldr	r2, [r3, #24]
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f022 0204 	bic.w	r2, r2, #4
 80021d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	6999      	ldr	r1, [r3, #24]
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	691a      	ldr	r2, [r3, #16]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	430a      	orrs	r2, r1
 80021e4:	619a      	str	r2, [r3, #24]
      break;
 80021e6:	e064      	b.n	80022b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	68b9      	ldr	r1, [r7, #8]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f000 fa40 	bl	8002674 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	699a      	ldr	r2, [r3, #24]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002202:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	699a      	ldr	r2, [r3, #24]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002212:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	6999      	ldr	r1, [r3, #24]
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	691b      	ldr	r3, [r3, #16]
 800221e:	021a      	lsls	r2, r3, #8
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	430a      	orrs	r2, r1
 8002226:	619a      	str	r2, [r3, #24]
      break;
 8002228:	e043      	b.n	80022b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	68b9      	ldr	r1, [r7, #8]
 8002230:	4618      	mov	r0, r3
 8002232:	f000 fa95 	bl	8002760 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	69da      	ldr	r2, [r3, #28]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f042 0208 	orr.w	r2, r2, #8
 8002244:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	69da      	ldr	r2, [r3, #28]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f022 0204 	bic.w	r2, r2, #4
 8002254:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	69d9      	ldr	r1, [r3, #28]
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	691a      	ldr	r2, [r3, #16]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	430a      	orrs	r2, r1
 8002266:	61da      	str	r2, [r3, #28]
      break;
 8002268:	e023      	b.n	80022b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	68b9      	ldr	r1, [r7, #8]
 8002270:	4618      	mov	r0, r3
 8002272:	f000 fae9 	bl	8002848 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	69da      	ldr	r2, [r3, #28]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002284:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	69da      	ldr	r2, [r3, #28]
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002294:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	69d9      	ldr	r1, [r3, #28]
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	691b      	ldr	r3, [r3, #16]
 80022a0:	021a      	lsls	r2, r3, #8
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	430a      	orrs	r2, r1
 80022a8:	61da      	str	r2, [r3, #28]
      break;
 80022aa:	e002      	b.n	80022b2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	75fb      	strb	r3, [r7, #23]
      break;
 80022b0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2200      	movs	r2, #0
 80022b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80022ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3718      	adds	r7, #24
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022ce:	2300      	movs	r3, #0
 80022d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d101      	bne.n	80022e0 <HAL_TIM_ConfigClockSource+0x1c>
 80022dc:	2302      	movs	r3, #2
 80022de:	e0b4      	b.n	800244a <HAL_TIM_ConfigClockSource+0x186>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2201      	movs	r2, #1
 80022e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2202      	movs	r2, #2
 80022ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80022fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002306:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	68ba      	ldr	r2, [r7, #8]
 800230e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002318:	d03e      	beq.n	8002398 <HAL_TIM_ConfigClockSource+0xd4>
 800231a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800231e:	f200 8087 	bhi.w	8002430 <HAL_TIM_ConfigClockSource+0x16c>
 8002322:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002326:	f000 8086 	beq.w	8002436 <HAL_TIM_ConfigClockSource+0x172>
 800232a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800232e:	d87f      	bhi.n	8002430 <HAL_TIM_ConfigClockSource+0x16c>
 8002330:	2b70      	cmp	r3, #112	; 0x70
 8002332:	d01a      	beq.n	800236a <HAL_TIM_ConfigClockSource+0xa6>
 8002334:	2b70      	cmp	r3, #112	; 0x70
 8002336:	d87b      	bhi.n	8002430 <HAL_TIM_ConfigClockSource+0x16c>
 8002338:	2b60      	cmp	r3, #96	; 0x60
 800233a:	d050      	beq.n	80023de <HAL_TIM_ConfigClockSource+0x11a>
 800233c:	2b60      	cmp	r3, #96	; 0x60
 800233e:	d877      	bhi.n	8002430 <HAL_TIM_ConfigClockSource+0x16c>
 8002340:	2b50      	cmp	r3, #80	; 0x50
 8002342:	d03c      	beq.n	80023be <HAL_TIM_ConfigClockSource+0xfa>
 8002344:	2b50      	cmp	r3, #80	; 0x50
 8002346:	d873      	bhi.n	8002430 <HAL_TIM_ConfigClockSource+0x16c>
 8002348:	2b40      	cmp	r3, #64	; 0x40
 800234a:	d058      	beq.n	80023fe <HAL_TIM_ConfigClockSource+0x13a>
 800234c:	2b40      	cmp	r3, #64	; 0x40
 800234e:	d86f      	bhi.n	8002430 <HAL_TIM_ConfigClockSource+0x16c>
 8002350:	2b30      	cmp	r3, #48	; 0x30
 8002352:	d064      	beq.n	800241e <HAL_TIM_ConfigClockSource+0x15a>
 8002354:	2b30      	cmp	r3, #48	; 0x30
 8002356:	d86b      	bhi.n	8002430 <HAL_TIM_ConfigClockSource+0x16c>
 8002358:	2b20      	cmp	r3, #32
 800235a:	d060      	beq.n	800241e <HAL_TIM_ConfigClockSource+0x15a>
 800235c:	2b20      	cmp	r3, #32
 800235e:	d867      	bhi.n	8002430 <HAL_TIM_ConfigClockSource+0x16c>
 8002360:	2b00      	cmp	r3, #0
 8002362:	d05c      	beq.n	800241e <HAL_TIM_ConfigClockSource+0x15a>
 8002364:	2b10      	cmp	r3, #16
 8002366:	d05a      	beq.n	800241e <HAL_TIM_ConfigClockSource+0x15a>
 8002368:	e062      	b.n	8002430 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6818      	ldr	r0, [r3, #0]
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	6899      	ldr	r1, [r3, #8]
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685a      	ldr	r2, [r3, #4]
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	f000 fb35 	bl	80029e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800238c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	68ba      	ldr	r2, [r7, #8]
 8002394:	609a      	str	r2, [r3, #8]
      break;
 8002396:	e04f      	b.n	8002438 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6818      	ldr	r0, [r3, #0]
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	6899      	ldr	r1, [r3, #8]
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	685a      	ldr	r2, [r3, #4]
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	f000 fb1e 	bl	80029e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	689a      	ldr	r2, [r3, #8]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80023ba:	609a      	str	r2, [r3, #8]
      break;
 80023bc:	e03c      	b.n	8002438 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6818      	ldr	r0, [r3, #0]
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	6859      	ldr	r1, [r3, #4]
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	461a      	mov	r2, r3
 80023cc:	f000 fa92 	bl	80028f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2150      	movs	r1, #80	; 0x50
 80023d6:	4618      	mov	r0, r3
 80023d8:	f000 faeb 	bl	80029b2 <TIM_ITRx_SetConfig>
      break;
 80023dc:	e02c      	b.n	8002438 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6818      	ldr	r0, [r3, #0]
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	6859      	ldr	r1, [r3, #4]
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	461a      	mov	r2, r3
 80023ec:	f000 fab1 	bl	8002952 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2160      	movs	r1, #96	; 0x60
 80023f6:	4618      	mov	r0, r3
 80023f8:	f000 fadb 	bl	80029b2 <TIM_ITRx_SetConfig>
      break;
 80023fc:	e01c      	b.n	8002438 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6818      	ldr	r0, [r3, #0]
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	6859      	ldr	r1, [r3, #4]
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	461a      	mov	r2, r3
 800240c:	f000 fa72 	bl	80028f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2140      	movs	r1, #64	; 0x40
 8002416:	4618      	mov	r0, r3
 8002418:	f000 facb 	bl	80029b2 <TIM_ITRx_SetConfig>
      break;
 800241c:	e00c      	b.n	8002438 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4619      	mov	r1, r3
 8002428:	4610      	mov	r0, r2
 800242a:	f000 fac2 	bl	80029b2 <TIM_ITRx_SetConfig>
      break;
 800242e:	e003      	b.n	8002438 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	73fb      	strb	r3, [r7, #15]
      break;
 8002434:	e000      	b.n	8002438 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002436:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002448:	7bfb      	ldrb	r3, [r7, #15]
}
 800244a:	4618      	mov	r0, r3
 800244c:	3710      	adds	r7, #16
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
	...

08002454 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002454:	b480      	push	{r7}
 8002456:	b085      	sub	sp, #20
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	4a40      	ldr	r2, [pc, #256]	; (8002568 <TIM_Base_SetConfig+0x114>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d013      	beq.n	8002494 <TIM_Base_SetConfig+0x40>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002472:	d00f      	beq.n	8002494 <TIM_Base_SetConfig+0x40>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	4a3d      	ldr	r2, [pc, #244]	; (800256c <TIM_Base_SetConfig+0x118>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d00b      	beq.n	8002494 <TIM_Base_SetConfig+0x40>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	4a3c      	ldr	r2, [pc, #240]	; (8002570 <TIM_Base_SetConfig+0x11c>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d007      	beq.n	8002494 <TIM_Base_SetConfig+0x40>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	4a3b      	ldr	r2, [pc, #236]	; (8002574 <TIM_Base_SetConfig+0x120>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d003      	beq.n	8002494 <TIM_Base_SetConfig+0x40>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	4a3a      	ldr	r2, [pc, #232]	; (8002578 <TIM_Base_SetConfig+0x124>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d108      	bne.n	80024a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800249a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	68fa      	ldr	r2, [r7, #12]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4a2f      	ldr	r2, [pc, #188]	; (8002568 <TIM_Base_SetConfig+0x114>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d02b      	beq.n	8002506 <TIM_Base_SetConfig+0xb2>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024b4:	d027      	beq.n	8002506 <TIM_Base_SetConfig+0xb2>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4a2c      	ldr	r2, [pc, #176]	; (800256c <TIM_Base_SetConfig+0x118>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d023      	beq.n	8002506 <TIM_Base_SetConfig+0xb2>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a2b      	ldr	r2, [pc, #172]	; (8002570 <TIM_Base_SetConfig+0x11c>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d01f      	beq.n	8002506 <TIM_Base_SetConfig+0xb2>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a2a      	ldr	r2, [pc, #168]	; (8002574 <TIM_Base_SetConfig+0x120>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d01b      	beq.n	8002506 <TIM_Base_SetConfig+0xb2>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4a29      	ldr	r2, [pc, #164]	; (8002578 <TIM_Base_SetConfig+0x124>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d017      	beq.n	8002506 <TIM_Base_SetConfig+0xb2>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a28      	ldr	r2, [pc, #160]	; (800257c <TIM_Base_SetConfig+0x128>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d013      	beq.n	8002506 <TIM_Base_SetConfig+0xb2>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a27      	ldr	r2, [pc, #156]	; (8002580 <TIM_Base_SetConfig+0x12c>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d00f      	beq.n	8002506 <TIM_Base_SetConfig+0xb2>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a26      	ldr	r2, [pc, #152]	; (8002584 <TIM_Base_SetConfig+0x130>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d00b      	beq.n	8002506 <TIM_Base_SetConfig+0xb2>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4a25      	ldr	r2, [pc, #148]	; (8002588 <TIM_Base_SetConfig+0x134>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d007      	beq.n	8002506 <TIM_Base_SetConfig+0xb2>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4a24      	ldr	r2, [pc, #144]	; (800258c <TIM_Base_SetConfig+0x138>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d003      	beq.n	8002506 <TIM_Base_SetConfig+0xb2>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4a23      	ldr	r2, [pc, #140]	; (8002590 <TIM_Base_SetConfig+0x13c>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d108      	bne.n	8002518 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800250c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	68db      	ldr	r3, [r3, #12]
 8002512:	68fa      	ldr	r2, [r7, #12]
 8002514:	4313      	orrs	r3, r2
 8002516:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	695b      	ldr	r3, [r3, #20]
 8002522:	4313      	orrs	r3, r2
 8002524:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	68fa      	ldr	r2, [r7, #12]
 800252a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	689a      	ldr	r2, [r3, #8]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	4a0a      	ldr	r2, [pc, #40]	; (8002568 <TIM_Base_SetConfig+0x114>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d003      	beq.n	800254c <TIM_Base_SetConfig+0xf8>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	4a0c      	ldr	r2, [pc, #48]	; (8002578 <TIM_Base_SetConfig+0x124>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d103      	bne.n	8002554 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	691a      	ldr	r2, [r3, #16]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2201      	movs	r2, #1
 8002558:	615a      	str	r2, [r3, #20]
}
 800255a:	bf00      	nop
 800255c:	3714      	adds	r7, #20
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	40010000 	.word	0x40010000
 800256c:	40000400 	.word	0x40000400
 8002570:	40000800 	.word	0x40000800
 8002574:	40000c00 	.word	0x40000c00
 8002578:	40010400 	.word	0x40010400
 800257c:	40014000 	.word	0x40014000
 8002580:	40014400 	.word	0x40014400
 8002584:	40014800 	.word	0x40014800
 8002588:	40001800 	.word	0x40001800
 800258c:	40001c00 	.word	0x40001c00
 8002590:	40002000 	.word	0x40002000

08002594 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002594:	b480      	push	{r7}
 8002596:	b087      	sub	sp, #28
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6a1b      	ldr	r3, [r3, #32]
 80025a2:	f023 0201 	bic.w	r2, r3, #1
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6a1b      	ldr	r3, [r3, #32]
 80025ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	699b      	ldr	r3, [r3, #24]
 80025ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	f023 0303 	bic.w	r3, r3, #3
 80025ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	68fa      	ldr	r2, [r7, #12]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	f023 0302 	bic.w	r3, r3, #2
 80025dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	697a      	ldr	r2, [r7, #20]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	4a20      	ldr	r2, [pc, #128]	; (800266c <TIM_OC1_SetConfig+0xd8>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d003      	beq.n	80025f8 <TIM_OC1_SetConfig+0x64>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	4a1f      	ldr	r2, [pc, #124]	; (8002670 <TIM_OC1_SetConfig+0xdc>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d10c      	bne.n	8002612 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	f023 0308 	bic.w	r3, r3, #8
 80025fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	697a      	ldr	r2, [r7, #20]
 8002606:	4313      	orrs	r3, r2
 8002608:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	f023 0304 	bic.w	r3, r3, #4
 8002610:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a15      	ldr	r2, [pc, #84]	; (800266c <TIM_OC1_SetConfig+0xd8>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d003      	beq.n	8002622 <TIM_OC1_SetConfig+0x8e>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a14      	ldr	r2, [pc, #80]	; (8002670 <TIM_OC1_SetConfig+0xdc>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d111      	bne.n	8002646 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002628:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002630:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	695b      	ldr	r3, [r3, #20]
 8002636:	693a      	ldr	r2, [r7, #16]
 8002638:	4313      	orrs	r3, r2
 800263a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	699b      	ldr	r3, [r3, #24]
 8002640:	693a      	ldr	r2, [r7, #16]
 8002642:	4313      	orrs	r3, r2
 8002644:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	693a      	ldr	r2, [r7, #16]
 800264a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	68fa      	ldr	r2, [r7, #12]
 8002650:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	685a      	ldr	r2, [r3, #4]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	697a      	ldr	r2, [r7, #20]
 800265e:	621a      	str	r2, [r3, #32]
}
 8002660:	bf00      	nop
 8002662:	371c      	adds	r7, #28
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr
 800266c:	40010000 	.word	0x40010000
 8002670:	40010400 	.word	0x40010400

08002674 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002674:	b480      	push	{r7}
 8002676:	b087      	sub	sp, #28
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6a1b      	ldr	r3, [r3, #32]
 8002682:	f023 0210 	bic.w	r2, r3, #16
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a1b      	ldr	r3, [r3, #32]
 800268e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	699b      	ldr	r3, [r3, #24]
 800269a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	021b      	lsls	r3, r3, #8
 80026b2:	68fa      	ldr	r2, [r7, #12]
 80026b4:	4313      	orrs	r3, r2
 80026b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	f023 0320 	bic.w	r3, r3, #32
 80026be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	011b      	lsls	r3, r3, #4
 80026c6:	697a      	ldr	r2, [r7, #20]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	4a22      	ldr	r2, [pc, #136]	; (8002758 <TIM_OC2_SetConfig+0xe4>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d003      	beq.n	80026dc <TIM_OC2_SetConfig+0x68>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	4a21      	ldr	r2, [pc, #132]	; (800275c <TIM_OC2_SetConfig+0xe8>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d10d      	bne.n	80026f8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	011b      	lsls	r3, r3, #4
 80026ea:	697a      	ldr	r2, [r7, #20]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80026f6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	4a17      	ldr	r2, [pc, #92]	; (8002758 <TIM_OC2_SetConfig+0xe4>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d003      	beq.n	8002708 <TIM_OC2_SetConfig+0x94>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	4a16      	ldr	r2, [pc, #88]	; (800275c <TIM_OC2_SetConfig+0xe8>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d113      	bne.n	8002730 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800270e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002716:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	695b      	ldr	r3, [r3, #20]
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	693a      	ldr	r2, [r7, #16]
 8002720:	4313      	orrs	r3, r2
 8002722:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	699b      	ldr	r3, [r3, #24]
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	693a      	ldr	r2, [r7, #16]
 800272c:	4313      	orrs	r3, r2
 800272e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	693a      	ldr	r2, [r7, #16]
 8002734:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	68fa      	ldr	r2, [r7, #12]
 800273a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	685a      	ldr	r2, [r3, #4]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	697a      	ldr	r2, [r7, #20]
 8002748:	621a      	str	r2, [r3, #32]
}
 800274a:	bf00      	nop
 800274c:	371c      	adds	r7, #28
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	40010000 	.word	0x40010000
 800275c:	40010400 	.word	0x40010400

08002760 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002760:	b480      	push	{r7}
 8002762:	b087      	sub	sp, #28
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6a1b      	ldr	r3, [r3, #32]
 800276e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a1b      	ldr	r3, [r3, #32]
 800277a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	69db      	ldr	r3, [r3, #28]
 8002786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800278e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f023 0303 	bic.w	r3, r3, #3
 8002796:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	68fa      	ldr	r2, [r7, #12]
 800279e:	4313      	orrs	r3, r2
 80027a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80027a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	021b      	lsls	r3, r3, #8
 80027b0:	697a      	ldr	r2, [r7, #20]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a21      	ldr	r2, [pc, #132]	; (8002840 <TIM_OC3_SetConfig+0xe0>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d003      	beq.n	80027c6 <TIM_OC3_SetConfig+0x66>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a20      	ldr	r2, [pc, #128]	; (8002844 <TIM_OC3_SetConfig+0xe4>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d10d      	bne.n	80027e2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80027cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	021b      	lsls	r3, r3, #8
 80027d4:	697a      	ldr	r2, [r7, #20]
 80027d6:	4313      	orrs	r3, r2
 80027d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80027e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4a16      	ldr	r2, [pc, #88]	; (8002840 <TIM_OC3_SetConfig+0xe0>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d003      	beq.n	80027f2 <TIM_OC3_SetConfig+0x92>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	4a15      	ldr	r2, [pc, #84]	; (8002844 <TIM_OC3_SetConfig+0xe4>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d113      	bne.n	800281a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80027f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002800:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	695b      	ldr	r3, [r3, #20]
 8002806:	011b      	lsls	r3, r3, #4
 8002808:	693a      	ldr	r2, [r7, #16]
 800280a:	4313      	orrs	r3, r2
 800280c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	699b      	ldr	r3, [r3, #24]
 8002812:	011b      	lsls	r3, r3, #4
 8002814:	693a      	ldr	r2, [r7, #16]
 8002816:	4313      	orrs	r3, r2
 8002818:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	693a      	ldr	r2, [r7, #16]
 800281e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	68fa      	ldr	r2, [r7, #12]
 8002824:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	685a      	ldr	r2, [r3, #4]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	697a      	ldr	r2, [r7, #20]
 8002832:	621a      	str	r2, [r3, #32]
}
 8002834:	bf00      	nop
 8002836:	371c      	adds	r7, #28
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr
 8002840:	40010000 	.word	0x40010000
 8002844:	40010400 	.word	0x40010400

08002848 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002848:	b480      	push	{r7}
 800284a:	b087      	sub	sp, #28
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6a1b      	ldr	r3, [r3, #32]
 8002856:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6a1b      	ldr	r3, [r3, #32]
 8002862:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	69db      	ldr	r3, [r3, #28]
 800286e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002876:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800287e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	021b      	lsls	r3, r3, #8
 8002886:	68fa      	ldr	r2, [r7, #12]
 8002888:	4313      	orrs	r3, r2
 800288a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002892:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	031b      	lsls	r3, r3, #12
 800289a:	693a      	ldr	r2, [r7, #16]
 800289c:	4313      	orrs	r3, r2
 800289e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	4a12      	ldr	r2, [pc, #72]	; (80028ec <TIM_OC4_SetConfig+0xa4>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d003      	beq.n	80028b0 <TIM_OC4_SetConfig+0x68>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	4a11      	ldr	r2, [pc, #68]	; (80028f0 <TIM_OC4_SetConfig+0xa8>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d109      	bne.n	80028c4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80028b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	695b      	ldr	r3, [r3, #20]
 80028bc:	019b      	lsls	r3, r3, #6
 80028be:	697a      	ldr	r2, [r7, #20]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	697a      	ldr	r2, [r7, #20]
 80028c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	68fa      	ldr	r2, [r7, #12]
 80028ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	685a      	ldr	r2, [r3, #4]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	693a      	ldr	r2, [r7, #16]
 80028dc:	621a      	str	r2, [r3, #32]
}
 80028de:	bf00      	nop
 80028e0:	371c      	adds	r7, #28
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
 80028ea:	bf00      	nop
 80028ec:	40010000 	.word	0x40010000
 80028f0:	40010400 	.word	0x40010400

080028f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b087      	sub	sp, #28
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	60b9      	str	r1, [r7, #8]
 80028fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	6a1b      	ldr	r3, [r3, #32]
 8002904:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	6a1b      	ldr	r3, [r3, #32]
 800290a:	f023 0201 	bic.w	r2, r3, #1
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800291e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	011b      	lsls	r3, r3, #4
 8002924:	693a      	ldr	r2, [r7, #16]
 8002926:	4313      	orrs	r3, r2
 8002928:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	f023 030a 	bic.w	r3, r3, #10
 8002930:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002932:	697a      	ldr	r2, [r7, #20]
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	4313      	orrs	r3, r2
 8002938:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	693a      	ldr	r2, [r7, #16]
 800293e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	697a      	ldr	r2, [r7, #20]
 8002944:	621a      	str	r2, [r3, #32]
}
 8002946:	bf00      	nop
 8002948:	371c      	adds	r7, #28
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr

08002952 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002952:	b480      	push	{r7}
 8002954:	b087      	sub	sp, #28
 8002956:	af00      	add	r7, sp, #0
 8002958:	60f8      	str	r0, [r7, #12]
 800295a:	60b9      	str	r1, [r7, #8]
 800295c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	6a1b      	ldr	r3, [r3, #32]
 8002962:	f023 0210 	bic.w	r2, r3, #16
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	699b      	ldr	r3, [r3, #24]
 800296e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6a1b      	ldr	r3, [r3, #32]
 8002974:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800297c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	031b      	lsls	r3, r3, #12
 8002982:	697a      	ldr	r2, [r7, #20]
 8002984:	4313      	orrs	r3, r2
 8002986:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800298e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	011b      	lsls	r3, r3, #4
 8002994:	693a      	ldr	r2, [r7, #16]
 8002996:	4313      	orrs	r3, r2
 8002998:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	697a      	ldr	r2, [r7, #20]
 800299e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	693a      	ldr	r2, [r7, #16]
 80029a4:	621a      	str	r2, [r3, #32]
}
 80029a6:	bf00      	nop
 80029a8:	371c      	adds	r7, #28
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr

080029b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80029b2:	b480      	push	{r7}
 80029b4:	b085      	sub	sp, #20
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
 80029ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80029ca:	683a      	ldr	r2, [r7, #0]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	f043 0307 	orr.w	r3, r3, #7
 80029d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	68fa      	ldr	r2, [r7, #12]
 80029da:	609a      	str	r2, [r3, #8]
}
 80029dc:	bf00      	nop
 80029de:	3714      	adds	r7, #20
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr

080029e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b087      	sub	sp, #28
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	607a      	str	r2, [r7, #4]
 80029f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a02:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	021a      	lsls	r2, r3, #8
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	431a      	orrs	r2, r3
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	697a      	ldr	r2, [r7, #20]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	697a      	ldr	r2, [r7, #20]
 8002a1a:	609a      	str	r2, [r3, #8]
}
 8002a1c:	bf00      	nop
 8002a1e:	371c      	adds	r7, #28
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b087      	sub	sp, #28
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	60b9      	str	r1, [r7, #8]
 8002a32:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	f003 031f 	and.w	r3, r3, #31
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a40:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	6a1a      	ldr	r2, [r3, #32]
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	43db      	mvns	r3, r3
 8002a4a:	401a      	ands	r2, r3
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6a1a      	ldr	r2, [r3, #32]
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	f003 031f 	and.w	r3, r3, #31
 8002a5a:	6879      	ldr	r1, [r7, #4]
 8002a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a60:	431a      	orrs	r2, r3
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	621a      	str	r2, [r3, #32]
}
 8002a66:	bf00      	nop
 8002a68:	371c      	adds	r7, #28
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
	...

08002a74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b085      	sub	sp, #20
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	d101      	bne.n	8002a8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a88:	2302      	movs	r3, #2
 8002a8a:	e05a      	b.n	8002b42 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2202      	movs	r2, #2
 8002a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ab2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	68fa      	ldr	r2, [r7, #12]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	68fa      	ldr	r2, [r7, #12]
 8002ac4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a21      	ldr	r2, [pc, #132]	; (8002b50 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d022      	beq.n	8002b16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ad8:	d01d      	beq.n	8002b16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a1d      	ldr	r2, [pc, #116]	; (8002b54 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d018      	beq.n	8002b16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a1b      	ldr	r2, [pc, #108]	; (8002b58 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d013      	beq.n	8002b16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a1a      	ldr	r2, [pc, #104]	; (8002b5c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d00e      	beq.n	8002b16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a18      	ldr	r2, [pc, #96]	; (8002b60 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d009      	beq.n	8002b16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a17      	ldr	r2, [pc, #92]	; (8002b64 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d004      	beq.n	8002b16 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a15      	ldr	r2, [pc, #84]	; (8002b68 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d10c      	bne.n	8002b30 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b1c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	68ba      	ldr	r2, [r7, #8]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	68ba      	ldr	r2, [r7, #8]
 8002b2e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2201      	movs	r2, #1
 8002b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3714      	adds	r7, #20
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	40010000 	.word	0x40010000
 8002b54:	40000400 	.word	0x40000400
 8002b58:	40000800 	.word	0x40000800
 8002b5c:	40000c00 	.word	0x40000c00
 8002b60:	40010400 	.word	0x40010400
 8002b64:	40014000 	.word	0x40014000
 8002b68:	40001800 	.word	0x40001800

08002b6c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b085      	sub	sp, #20
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002b76:	2300      	movs	r3, #0
 8002b78:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d101      	bne.n	8002b88 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002b84:	2302      	movs	r3, #2
 8002b86:	e03d      	b.n	8002c04 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	691b      	ldr	r3, [r3, #16]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	695b      	ldr	r3, [r3, #20]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	69db      	ldr	r3, [r3, #28]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	68fa      	ldr	r2, [r7, #12]
 8002bf8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c02:	2300      	movs	r3, #0
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3714      	adds	r7, #20
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr

08002c10 <__NVIC_SetPriority>:
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	4603      	mov	r3, r0
 8002c18:	6039      	str	r1, [r7, #0]
 8002c1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	db0a      	blt.n	8002c3a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	b2da      	uxtb	r2, r3
 8002c28:	490c      	ldr	r1, [pc, #48]	; (8002c5c <__NVIC_SetPriority+0x4c>)
 8002c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c2e:	0112      	lsls	r2, r2, #4
 8002c30:	b2d2      	uxtb	r2, r2
 8002c32:	440b      	add	r3, r1
 8002c34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002c38:	e00a      	b.n	8002c50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	b2da      	uxtb	r2, r3
 8002c3e:	4908      	ldr	r1, [pc, #32]	; (8002c60 <__NVIC_SetPriority+0x50>)
 8002c40:	79fb      	ldrb	r3, [r7, #7]
 8002c42:	f003 030f 	and.w	r3, r3, #15
 8002c46:	3b04      	subs	r3, #4
 8002c48:	0112      	lsls	r2, r2, #4
 8002c4a:	b2d2      	uxtb	r2, r2
 8002c4c:	440b      	add	r3, r1
 8002c4e:	761a      	strb	r2, [r3, #24]
}
 8002c50:	bf00      	nop
 8002c52:	370c      	adds	r7, #12
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr
 8002c5c:	e000e100 	.word	0xe000e100
 8002c60:	e000ed00 	.word	0xe000ed00

08002c64 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002c64:	b580      	push	{r7, lr}
 8002c66:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002c68:	2100      	movs	r1, #0
 8002c6a:	f06f 0004 	mvn.w	r0, #4
 8002c6e:	f7ff ffcf 	bl	8002c10 <__NVIC_SetPriority>
#endif
}
 8002c72:	bf00      	nop
 8002c74:	bd80      	pop	{r7, pc}
	...

08002c78 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002c7e:	f3ef 8305 	mrs	r3, IPSR
 8002c82:	603b      	str	r3, [r7, #0]
  return(result);
 8002c84:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d003      	beq.n	8002c92 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002c8a:	f06f 0305 	mvn.w	r3, #5
 8002c8e:	607b      	str	r3, [r7, #4]
 8002c90:	e00c      	b.n	8002cac <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002c92:	4b0a      	ldr	r3, [pc, #40]	; (8002cbc <osKernelInitialize+0x44>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d105      	bne.n	8002ca6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002c9a:	4b08      	ldr	r3, [pc, #32]	; (8002cbc <osKernelInitialize+0x44>)
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	607b      	str	r3, [r7, #4]
 8002ca4:	e002      	b.n	8002cac <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8002caa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002cac:	687b      	ldr	r3, [r7, #4]
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	370c      	adds	r7, #12
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	20000094 	.word	0x20000094

08002cc0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002cc6:	f3ef 8305 	mrs	r3, IPSR
 8002cca:	603b      	str	r3, [r7, #0]
  return(result);
 8002ccc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d003      	beq.n	8002cda <osKernelStart+0x1a>
    stat = osErrorISR;
 8002cd2:	f06f 0305 	mvn.w	r3, #5
 8002cd6:	607b      	str	r3, [r7, #4]
 8002cd8:	e010      	b.n	8002cfc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002cda:	4b0b      	ldr	r3, [pc, #44]	; (8002d08 <osKernelStart+0x48>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d109      	bne.n	8002cf6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002ce2:	f7ff ffbf 	bl	8002c64 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002ce6:	4b08      	ldr	r3, [pc, #32]	; (8002d08 <osKernelStart+0x48>)
 8002ce8:	2202      	movs	r2, #2
 8002cea:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002cec:	f001 fc9e 	bl	800462c <vTaskStartScheduler>
      stat = osOK;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	607b      	str	r3, [r7, #4]
 8002cf4:	e002      	b.n	8002cfc <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8002cfa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002cfc:	687b      	ldr	r3, [r7, #4]
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3708      	adds	r7, #8
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	20000094 	.word	0x20000094

08002d0c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b08e      	sub	sp, #56	; 0x38
 8002d10:	af04      	add	r7, sp, #16
 8002d12:	60f8      	str	r0, [r7, #12]
 8002d14:	60b9      	str	r1, [r7, #8]
 8002d16:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002d1c:	f3ef 8305 	mrs	r3, IPSR
 8002d20:	617b      	str	r3, [r7, #20]
  return(result);
 8002d22:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d17e      	bne.n	8002e26 <osThreadNew+0x11a>
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d07b      	beq.n	8002e26 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002d2e:	2380      	movs	r3, #128	; 0x80
 8002d30:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002d32:	2318      	movs	r3, #24
 8002d34:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002d36:	2300      	movs	r3, #0
 8002d38:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8002d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d3e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d045      	beq.n	8002dd2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d002      	beq.n	8002d54 <osThreadNew+0x48>
        name = attr->name;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	699b      	ldr	r3, [r3, #24]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d002      	beq.n	8002d62 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	699b      	ldr	r3, [r3, #24]
 8002d60:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d008      	beq.n	8002d7a <osThreadNew+0x6e>
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	2b38      	cmp	r3, #56	; 0x38
 8002d6c:	d805      	bhi.n	8002d7a <osThreadNew+0x6e>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	f003 0301 	and.w	r3, r3, #1
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d001      	beq.n	8002d7e <osThreadNew+0x72>
        return (NULL);
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	e054      	b.n	8002e28 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	695b      	ldr	r3, [r3, #20]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d003      	beq.n	8002d8e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	695b      	ldr	r3, [r3, #20]
 8002d8a:	089b      	lsrs	r3, r3, #2
 8002d8c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d00e      	beq.n	8002db4 <osThreadNew+0xa8>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	2b5b      	cmp	r3, #91	; 0x5b
 8002d9c:	d90a      	bls.n	8002db4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d006      	beq.n	8002db4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	695b      	ldr	r3, [r3, #20]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d002      	beq.n	8002db4 <osThreadNew+0xa8>
        mem = 1;
 8002dae:	2301      	movs	r3, #1
 8002db0:	61bb      	str	r3, [r7, #24]
 8002db2:	e010      	b.n	8002dd6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d10c      	bne.n	8002dd6 <osThreadNew+0xca>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d108      	bne.n	8002dd6 <osThreadNew+0xca>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	691b      	ldr	r3, [r3, #16]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d104      	bne.n	8002dd6 <osThreadNew+0xca>
          mem = 0;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	61bb      	str	r3, [r7, #24]
 8002dd0:	e001      	b.n	8002dd6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002dd6:	69bb      	ldr	r3, [r7, #24]
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d110      	bne.n	8002dfe <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002de0:	687a      	ldr	r2, [r7, #4]
 8002de2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002de4:	9202      	str	r2, [sp, #8]
 8002de6:	9301      	str	r3, [sp, #4]
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	9300      	str	r3, [sp, #0]
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	6a3a      	ldr	r2, [r7, #32]
 8002df0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002df2:	68f8      	ldr	r0, [r7, #12]
 8002df4:	f001 fa44 	bl	8004280 <xTaskCreateStatic>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	613b      	str	r3, [r7, #16]
 8002dfc:	e013      	b.n	8002e26 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d110      	bne.n	8002e26 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002e04:	6a3b      	ldr	r3, [r7, #32]
 8002e06:	b29a      	uxth	r2, r3
 8002e08:	f107 0310 	add.w	r3, r7, #16
 8002e0c:	9301      	str	r3, [sp, #4]
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	9300      	str	r3, [sp, #0]
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e16:	68f8      	ldr	r0, [r7, #12]
 8002e18:	f001 fa8f 	bl	800433a <xTaskCreate>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d001      	beq.n	8002e26 <osThreadNew+0x11a>
            hTask = NULL;
 8002e22:	2300      	movs	r3, #0
 8002e24:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002e26:	693b      	ldr	r3, [r7, #16]
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3728      	adds	r7, #40	; 0x28
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002e38:	f3ef 8305 	mrs	r3, IPSR
 8002e3c:	60bb      	str	r3, [r7, #8]
  return(result);
 8002e3e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d003      	beq.n	8002e4c <osDelay+0x1c>
    stat = osErrorISR;
 8002e44:	f06f 0305 	mvn.w	r3, #5
 8002e48:	60fb      	str	r3, [r7, #12]
 8002e4a:	e007      	b.n	8002e5c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d002      	beq.n	8002e5c <osDelay+0x2c>
      vTaskDelay(ticks);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f001 fbb4 	bl	80045c4 <vTaskDelay>
    }
  }

  return (stat);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	3710      	adds	r7, #16
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
	...

08002e68 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002e68:	b480      	push	{r7}
 8002e6a:	b085      	sub	sp, #20
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	60b9      	str	r1, [r7, #8]
 8002e72:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	4a07      	ldr	r2, [pc, #28]	; (8002e94 <vApplicationGetIdleTaskMemory+0x2c>)
 8002e78:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	4a06      	ldr	r2, [pc, #24]	; (8002e98 <vApplicationGetIdleTaskMemory+0x30>)
 8002e7e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2280      	movs	r2, #128	; 0x80
 8002e84:	601a      	str	r2, [r3, #0]
}
 8002e86:	bf00      	nop
 8002e88:	3714      	adds	r7, #20
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop
 8002e94:	20000098 	.word	0x20000098
 8002e98:	200000f4 	.word	0x200000f4

08002e9c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002e9c:	b480      	push	{r7}
 8002e9e:	b085      	sub	sp, #20
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	60f8      	str	r0, [r7, #12]
 8002ea4:	60b9      	str	r1, [r7, #8]
 8002ea6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	4a07      	ldr	r2, [pc, #28]	; (8002ec8 <vApplicationGetTimerTaskMemory+0x2c>)
 8002eac:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	4a06      	ldr	r2, [pc, #24]	; (8002ecc <vApplicationGetTimerTaskMemory+0x30>)
 8002eb2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002eba:	601a      	str	r2, [r3, #0]
}
 8002ebc:	bf00      	nop
 8002ebe:	3714      	adds	r7, #20
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr
 8002ec8:	200002f4 	.word	0x200002f4
 8002ecc:	20000350 	.word	0x20000350

08002ed0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b08a      	sub	sp, #40	; 0x28
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002edc:	f001 fc0c 	bl	80046f8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002ee0:	4b5b      	ldr	r3, [pc, #364]	; (8003050 <pvPortMalloc+0x180>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d101      	bne.n	8002eec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002ee8:	f000 f920 	bl	800312c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002eec:	4b59      	ldr	r3, [pc, #356]	; (8003054 <pvPortMalloc+0x184>)
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	f040 8093 	bne.w	8003020 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d01d      	beq.n	8002f3c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8002f00:	2208      	movs	r2, #8
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4413      	add	r3, r2
 8002f06:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f003 0307 	and.w	r3, r3, #7
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d014      	beq.n	8002f3c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f023 0307 	bic.w	r3, r3, #7
 8002f18:	3308      	adds	r3, #8
 8002f1a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f003 0307 	and.w	r3, r3, #7
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d00a      	beq.n	8002f3c <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f2a:	f383 8811 	msr	BASEPRI, r3
 8002f2e:	f3bf 8f6f 	isb	sy
 8002f32:	f3bf 8f4f 	dsb	sy
 8002f36:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002f38:	bf00      	nop
 8002f3a:	e7fe      	b.n	8002f3a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d06e      	beq.n	8003020 <pvPortMalloc+0x150>
 8002f42:	4b45      	ldr	r3, [pc, #276]	; (8003058 <pvPortMalloc+0x188>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d869      	bhi.n	8003020 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8002f4c:	4b43      	ldr	r3, [pc, #268]	; (800305c <pvPortMalloc+0x18c>)
 8002f4e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8002f50:	4b42      	ldr	r3, [pc, #264]	; (800305c <pvPortMalloc+0x18c>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002f56:	e004      	b.n	8002f62 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8002f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d903      	bls.n	8002f74 <pvPortMalloc+0xa4>
 8002f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d1f1      	bne.n	8002f58 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002f74:	4b36      	ldr	r3, [pc, #216]	; (8003050 <pvPortMalloc+0x180>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d050      	beq.n	8003020 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002f7e:	6a3b      	ldr	r3, [r7, #32]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	2208      	movs	r2, #8
 8002f84:	4413      	add	r3, r2
 8002f86:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	6a3b      	ldr	r3, [r7, #32]
 8002f8e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f92:	685a      	ldr	r2, [r3, #4]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	1ad2      	subs	r2, r2, r3
 8002f98:	2308      	movs	r3, #8
 8002f9a:	005b      	lsls	r3, r3, #1
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d91f      	bls.n	8002fe0 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002fa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4413      	add	r3, r2
 8002fa6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002fa8:	69bb      	ldr	r3, [r7, #24]
 8002faa:	f003 0307 	and.w	r3, r3, #7
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d00a      	beq.n	8002fc8 <pvPortMalloc+0xf8>
	__asm volatile
 8002fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fb6:	f383 8811 	msr	BASEPRI, r3
 8002fba:	f3bf 8f6f 	isb	sy
 8002fbe:	f3bf 8f4f 	dsb	sy
 8002fc2:	613b      	str	r3, [r7, #16]
}
 8002fc4:	bf00      	nop
 8002fc6:	e7fe      	b.n	8002fc6 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fca:	685a      	ldr	r2, [r3, #4]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	1ad2      	subs	r2, r2, r3
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002fda:	69b8      	ldr	r0, [r7, #24]
 8002fdc:	f000 f908 	bl	80031f0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002fe0:	4b1d      	ldr	r3, [pc, #116]	; (8003058 <pvPortMalloc+0x188>)
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	4a1b      	ldr	r2, [pc, #108]	; (8003058 <pvPortMalloc+0x188>)
 8002fec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002fee:	4b1a      	ldr	r3, [pc, #104]	; (8003058 <pvPortMalloc+0x188>)
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	4b1b      	ldr	r3, [pc, #108]	; (8003060 <pvPortMalloc+0x190>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d203      	bcs.n	8003002 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002ffa:	4b17      	ldr	r3, [pc, #92]	; (8003058 <pvPortMalloc+0x188>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a18      	ldr	r2, [pc, #96]	; (8003060 <pvPortMalloc+0x190>)
 8003000:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003004:	685a      	ldr	r2, [r3, #4]
 8003006:	4b13      	ldr	r3, [pc, #76]	; (8003054 <pvPortMalloc+0x184>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	431a      	orrs	r2, r3
 800300c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003012:	2200      	movs	r2, #0
 8003014:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8003016:	4b13      	ldr	r3, [pc, #76]	; (8003064 <pvPortMalloc+0x194>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	3301      	adds	r3, #1
 800301c:	4a11      	ldr	r2, [pc, #68]	; (8003064 <pvPortMalloc+0x194>)
 800301e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003020:	f001 fb78 	bl	8004714 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	f003 0307 	and.w	r3, r3, #7
 800302a:	2b00      	cmp	r3, #0
 800302c:	d00a      	beq.n	8003044 <pvPortMalloc+0x174>
	__asm volatile
 800302e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003032:	f383 8811 	msr	BASEPRI, r3
 8003036:	f3bf 8f6f 	isb	sy
 800303a:	f3bf 8f4f 	dsb	sy
 800303e:	60fb      	str	r3, [r7, #12]
}
 8003040:	bf00      	nop
 8003042:	e7fe      	b.n	8003042 <pvPortMalloc+0x172>
	return pvReturn;
 8003044:	69fb      	ldr	r3, [r7, #28]
}
 8003046:	4618      	mov	r0, r3
 8003048:	3728      	adds	r7, #40	; 0x28
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	20004358 	.word	0x20004358
 8003054:	2000436c 	.word	0x2000436c
 8003058:	2000435c 	.word	0x2000435c
 800305c:	20004350 	.word	0x20004350
 8003060:	20004360 	.word	0x20004360
 8003064:	20004364 	.word	0x20004364

08003068 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b086      	sub	sp, #24
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d04d      	beq.n	8003116 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800307a:	2308      	movs	r3, #8
 800307c:	425b      	negs	r3, r3
 800307e:	697a      	ldr	r2, [r7, #20]
 8003080:	4413      	add	r3, r2
 8003082:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	685a      	ldr	r2, [r3, #4]
 800308c:	4b24      	ldr	r3, [pc, #144]	; (8003120 <vPortFree+0xb8>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4013      	ands	r3, r2
 8003092:	2b00      	cmp	r3, #0
 8003094:	d10a      	bne.n	80030ac <vPortFree+0x44>
	__asm volatile
 8003096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800309a:	f383 8811 	msr	BASEPRI, r3
 800309e:	f3bf 8f6f 	isb	sy
 80030a2:	f3bf 8f4f 	dsb	sy
 80030a6:	60fb      	str	r3, [r7, #12]
}
 80030a8:	bf00      	nop
 80030aa:	e7fe      	b.n	80030aa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d00a      	beq.n	80030ca <vPortFree+0x62>
	__asm volatile
 80030b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030b8:	f383 8811 	msr	BASEPRI, r3
 80030bc:	f3bf 8f6f 	isb	sy
 80030c0:	f3bf 8f4f 	dsb	sy
 80030c4:	60bb      	str	r3, [r7, #8]
}
 80030c6:	bf00      	nop
 80030c8:	e7fe      	b.n	80030c8 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	685a      	ldr	r2, [r3, #4]
 80030ce:	4b14      	ldr	r3, [pc, #80]	; (8003120 <vPortFree+0xb8>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4013      	ands	r3, r2
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d01e      	beq.n	8003116 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d11a      	bne.n	8003116 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	685a      	ldr	r2, [r3, #4]
 80030e4:	4b0e      	ldr	r3, [pc, #56]	; (8003120 <vPortFree+0xb8>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	43db      	mvns	r3, r3
 80030ea:	401a      	ands	r2, r3
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80030f0:	f001 fb02 	bl	80046f8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	685a      	ldr	r2, [r3, #4]
 80030f8:	4b0a      	ldr	r3, [pc, #40]	; (8003124 <vPortFree+0xbc>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4413      	add	r3, r2
 80030fe:	4a09      	ldr	r2, [pc, #36]	; (8003124 <vPortFree+0xbc>)
 8003100:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003102:	6938      	ldr	r0, [r7, #16]
 8003104:	f000 f874 	bl	80031f0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003108:	4b07      	ldr	r3, [pc, #28]	; (8003128 <vPortFree+0xc0>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	3301      	adds	r3, #1
 800310e:	4a06      	ldr	r2, [pc, #24]	; (8003128 <vPortFree+0xc0>)
 8003110:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8003112:	f001 faff 	bl	8004714 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003116:	bf00      	nop
 8003118:	3718      	adds	r7, #24
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	2000436c 	.word	0x2000436c
 8003124:	2000435c 	.word	0x2000435c
 8003128:	20004368 	.word	0x20004368

0800312c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800312c:	b480      	push	{r7}
 800312e:	b085      	sub	sp, #20
 8003130:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003132:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8003136:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003138:	4b27      	ldr	r3, [pc, #156]	; (80031d8 <prvHeapInit+0xac>)
 800313a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f003 0307 	and.w	r3, r3, #7
 8003142:	2b00      	cmp	r3, #0
 8003144:	d00c      	beq.n	8003160 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	3307      	adds	r3, #7
 800314a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	f023 0307 	bic.w	r3, r3, #7
 8003152:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003154:	68ba      	ldr	r2, [r7, #8]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	4a1f      	ldr	r2, [pc, #124]	; (80031d8 <prvHeapInit+0xac>)
 800315c:	4413      	add	r3, r2
 800315e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003164:	4a1d      	ldr	r2, [pc, #116]	; (80031dc <prvHeapInit+0xb0>)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800316a:	4b1c      	ldr	r3, [pc, #112]	; (80031dc <prvHeapInit+0xb0>)
 800316c:	2200      	movs	r2, #0
 800316e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	68ba      	ldr	r2, [r7, #8]
 8003174:	4413      	add	r3, r2
 8003176:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003178:	2208      	movs	r2, #8
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	1a9b      	subs	r3, r3, r2
 800317e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f023 0307 	bic.w	r3, r3, #7
 8003186:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	4a15      	ldr	r2, [pc, #84]	; (80031e0 <prvHeapInit+0xb4>)
 800318c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800318e:	4b14      	ldr	r3, [pc, #80]	; (80031e0 <prvHeapInit+0xb4>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	2200      	movs	r2, #0
 8003194:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003196:	4b12      	ldr	r3, [pc, #72]	; (80031e0 <prvHeapInit+0xb4>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2200      	movs	r2, #0
 800319c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	68fa      	ldr	r2, [r7, #12]
 80031a6:	1ad2      	subs	r2, r2, r3
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80031ac:	4b0c      	ldr	r3, [pc, #48]	; (80031e0 <prvHeapInit+0xb4>)
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	4a0a      	ldr	r2, [pc, #40]	; (80031e4 <prvHeapInit+0xb8>)
 80031ba:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	4a09      	ldr	r2, [pc, #36]	; (80031e8 <prvHeapInit+0xbc>)
 80031c2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80031c4:	4b09      	ldr	r3, [pc, #36]	; (80031ec <prvHeapInit+0xc0>)
 80031c6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80031ca:	601a      	str	r2, [r3, #0]
}
 80031cc:	bf00      	nop
 80031ce:	3714      	adds	r7, #20
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr
 80031d8:	20000750 	.word	0x20000750
 80031dc:	20004350 	.word	0x20004350
 80031e0:	20004358 	.word	0x20004358
 80031e4:	20004360 	.word	0x20004360
 80031e8:	2000435c 	.word	0x2000435c
 80031ec:	2000436c 	.word	0x2000436c

080031f0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80031f0:	b480      	push	{r7}
 80031f2:	b085      	sub	sp, #20
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80031f8:	4b28      	ldr	r3, [pc, #160]	; (800329c <prvInsertBlockIntoFreeList+0xac>)
 80031fa:	60fb      	str	r3, [r7, #12]
 80031fc:	e002      	b.n	8003204 <prvInsertBlockIntoFreeList+0x14>
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	60fb      	str	r3, [r7, #12]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	429a      	cmp	r2, r3
 800320c:	d8f7      	bhi.n	80031fe <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	68ba      	ldr	r2, [r7, #8]
 8003218:	4413      	add	r3, r2
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	429a      	cmp	r2, r3
 800321e:	d108      	bne.n	8003232 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	685a      	ldr	r2, [r3, #4]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	441a      	add	r2, r3
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	68ba      	ldr	r2, [r7, #8]
 800323c:	441a      	add	r2, r3
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	429a      	cmp	r2, r3
 8003244:	d118      	bne.n	8003278 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	4b15      	ldr	r3, [pc, #84]	; (80032a0 <prvInsertBlockIntoFreeList+0xb0>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	429a      	cmp	r2, r3
 8003250:	d00d      	beq.n	800326e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685a      	ldr	r2, [r3, #4]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	441a      	add	r2, r3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	601a      	str	r2, [r3, #0]
 800326c:	e008      	b.n	8003280 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800326e:	4b0c      	ldr	r3, [pc, #48]	; (80032a0 <prvInsertBlockIntoFreeList+0xb0>)
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	601a      	str	r2, [r3, #0]
 8003276:	e003      	b.n	8003280 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003280:	68fa      	ldr	r2, [r7, #12]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	429a      	cmp	r2, r3
 8003286:	d002      	beq.n	800328e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800328e:	bf00      	nop
 8003290:	3714      	adds	r7, #20
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop
 800329c:	20004350 	.word	0x20004350
 80032a0:	20004358 	.word	0x20004358

080032a4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	f103 0208 	add.w	r2, r3, #8
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f04f 32ff 	mov.w	r2, #4294967295
 80032bc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f103 0208 	add.w	r2, r3, #8
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f103 0208 	add.w	r2, r3, #8
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80032d8:	bf00      	nop
 80032da:	370c      	adds	r7, #12
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr

080032e4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80032f2:	bf00      	nop
 80032f4:	370c      	adds	r7, #12
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr

080032fe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80032fe:	b480      	push	{r7}
 8003300:	b085      	sub	sp, #20
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]
 8003306:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	68fa      	ldr	r2, [r7, #12]
 8003312:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	689a      	ldr	r2, [r3, #8]
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	683a      	ldr	r2, [r7, #0]
 8003322:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	683a      	ldr	r2, [r7, #0]
 8003328:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	1c5a      	adds	r2, r3, #1
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	601a      	str	r2, [r3, #0]
}
 800333a:	bf00      	nop
 800333c:	3714      	adds	r7, #20
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr

08003346 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003346:	b480      	push	{r7}
 8003348:	b085      	sub	sp, #20
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
 800334e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800335c:	d103      	bne.n	8003366 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	691b      	ldr	r3, [r3, #16]
 8003362:	60fb      	str	r3, [r7, #12]
 8003364:	e00c      	b.n	8003380 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	3308      	adds	r3, #8
 800336a:	60fb      	str	r3, [r7, #12]
 800336c:	e002      	b.n	8003374 <vListInsert+0x2e>
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	60fb      	str	r3, [r7, #12]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	68ba      	ldr	r2, [r7, #8]
 800337c:	429a      	cmp	r2, r3
 800337e:	d2f6      	bcs.n	800336e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	685a      	ldr	r2, [r3, #4]
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	683a      	ldr	r2, [r7, #0]
 800338e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	68fa      	ldr	r2, [r7, #12]
 8003394:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	683a      	ldr	r2, [r7, #0]
 800339a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	1c5a      	adds	r2, r3, #1
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	601a      	str	r2, [r3, #0]
}
 80033ac:	bf00      	nop
 80033ae:	3714      	adds	r7, #20
 80033b0:	46bd      	mov	sp, r7
 80033b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b6:	4770      	bx	lr

080033b8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80033b8:	b480      	push	{r7}
 80033ba:	b085      	sub	sp, #20
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	691b      	ldr	r3, [r3, #16]
 80033c4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	6892      	ldr	r2, [r2, #8]
 80033ce:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	6852      	ldr	r2, [r2, #4]
 80033d8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	687a      	ldr	r2, [r7, #4]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d103      	bne.n	80033ec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	689a      	ldr	r2, [r3, #8]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	1e5a      	subs	r2, r3, #1
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
}
 8003400:	4618      	mov	r0, r3
 8003402:	3714      	adds	r7, #20
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr

0800340c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800340c:	b480      	push	{r7}
 800340e:	b085      	sub	sp, #20
 8003410:	af00      	add	r7, sp, #0
 8003412:	60f8      	str	r0, [r7, #12]
 8003414:	60b9      	str	r1, [r7, #8]
 8003416:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	3b04      	subs	r3, #4
 800341c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003424:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	3b04      	subs	r3, #4
 800342a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	f023 0201 	bic.w	r2, r3, #1
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	3b04      	subs	r3, #4
 800343a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800343c:	4a0c      	ldr	r2, [pc, #48]	; (8003470 <pxPortInitialiseStack+0x64>)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	3b14      	subs	r3, #20
 8003446:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	3b04      	subs	r3, #4
 8003452:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f06f 0202 	mvn.w	r2, #2
 800345a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	3b20      	subs	r3, #32
 8003460:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003462:	68fb      	ldr	r3, [r7, #12]
}
 8003464:	4618      	mov	r0, r3
 8003466:	3714      	adds	r7, #20
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr
 8003470:	08003475 	.word	0x08003475

08003474 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003474:	b480      	push	{r7}
 8003476:	b085      	sub	sp, #20
 8003478:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800347a:	2300      	movs	r3, #0
 800347c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800347e:	4b12      	ldr	r3, [pc, #72]	; (80034c8 <prvTaskExitError+0x54>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003486:	d00a      	beq.n	800349e <prvTaskExitError+0x2a>
	__asm volatile
 8003488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800348c:	f383 8811 	msr	BASEPRI, r3
 8003490:	f3bf 8f6f 	isb	sy
 8003494:	f3bf 8f4f 	dsb	sy
 8003498:	60fb      	str	r3, [r7, #12]
}
 800349a:	bf00      	nop
 800349c:	e7fe      	b.n	800349c <prvTaskExitError+0x28>
	__asm volatile
 800349e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034a2:	f383 8811 	msr	BASEPRI, r3
 80034a6:	f3bf 8f6f 	isb	sy
 80034aa:	f3bf 8f4f 	dsb	sy
 80034ae:	60bb      	str	r3, [r7, #8]
}
 80034b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80034b2:	bf00      	nop
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d0fc      	beq.n	80034b4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80034ba:	bf00      	nop
 80034bc:	bf00      	nop
 80034be:	3714      	adds	r7, #20
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr
 80034c8:	2000000c 	.word	0x2000000c
 80034cc:	00000000 	.word	0x00000000

080034d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80034d0:	4b07      	ldr	r3, [pc, #28]	; (80034f0 <pxCurrentTCBConst2>)
 80034d2:	6819      	ldr	r1, [r3, #0]
 80034d4:	6808      	ldr	r0, [r1, #0]
 80034d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034da:	f380 8809 	msr	PSP, r0
 80034de:	f3bf 8f6f 	isb	sy
 80034e2:	f04f 0000 	mov.w	r0, #0
 80034e6:	f380 8811 	msr	BASEPRI, r0
 80034ea:	4770      	bx	lr
 80034ec:	f3af 8000 	nop.w

080034f0 <pxCurrentTCBConst2>:
 80034f0:	20004378 	.word	0x20004378
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80034f4:	bf00      	nop
 80034f6:	bf00      	nop

080034f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80034f8:	4808      	ldr	r0, [pc, #32]	; (800351c <prvPortStartFirstTask+0x24>)
 80034fa:	6800      	ldr	r0, [r0, #0]
 80034fc:	6800      	ldr	r0, [r0, #0]
 80034fe:	f380 8808 	msr	MSP, r0
 8003502:	f04f 0000 	mov.w	r0, #0
 8003506:	f380 8814 	msr	CONTROL, r0
 800350a:	b662      	cpsie	i
 800350c:	b661      	cpsie	f
 800350e:	f3bf 8f4f 	dsb	sy
 8003512:	f3bf 8f6f 	isb	sy
 8003516:	df00      	svc	0
 8003518:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800351a:	bf00      	nop
 800351c:	e000ed08 	.word	0xe000ed08

08003520 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b086      	sub	sp, #24
 8003524:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003526:	4b46      	ldr	r3, [pc, #280]	; (8003640 <xPortStartScheduler+0x120>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a46      	ldr	r2, [pc, #280]	; (8003644 <xPortStartScheduler+0x124>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d10a      	bne.n	8003546 <xPortStartScheduler+0x26>
	__asm volatile
 8003530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003534:	f383 8811 	msr	BASEPRI, r3
 8003538:	f3bf 8f6f 	isb	sy
 800353c:	f3bf 8f4f 	dsb	sy
 8003540:	613b      	str	r3, [r7, #16]
}
 8003542:	bf00      	nop
 8003544:	e7fe      	b.n	8003544 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003546:	4b3e      	ldr	r3, [pc, #248]	; (8003640 <xPortStartScheduler+0x120>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a3f      	ldr	r2, [pc, #252]	; (8003648 <xPortStartScheduler+0x128>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d10a      	bne.n	8003566 <xPortStartScheduler+0x46>
	__asm volatile
 8003550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003554:	f383 8811 	msr	BASEPRI, r3
 8003558:	f3bf 8f6f 	isb	sy
 800355c:	f3bf 8f4f 	dsb	sy
 8003560:	60fb      	str	r3, [r7, #12]
}
 8003562:	bf00      	nop
 8003564:	e7fe      	b.n	8003564 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003566:	4b39      	ldr	r3, [pc, #228]	; (800364c <xPortStartScheduler+0x12c>)
 8003568:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	781b      	ldrb	r3, [r3, #0]
 800356e:	b2db      	uxtb	r3, r3
 8003570:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	22ff      	movs	r2, #255	; 0xff
 8003576:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	b2db      	uxtb	r3, r3
 800357e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003580:	78fb      	ldrb	r3, [r7, #3]
 8003582:	b2db      	uxtb	r3, r3
 8003584:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003588:	b2da      	uxtb	r2, r3
 800358a:	4b31      	ldr	r3, [pc, #196]	; (8003650 <xPortStartScheduler+0x130>)
 800358c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800358e:	4b31      	ldr	r3, [pc, #196]	; (8003654 <xPortStartScheduler+0x134>)
 8003590:	2207      	movs	r2, #7
 8003592:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003594:	e009      	b.n	80035aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8003596:	4b2f      	ldr	r3, [pc, #188]	; (8003654 <xPortStartScheduler+0x134>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	3b01      	subs	r3, #1
 800359c:	4a2d      	ldr	r2, [pc, #180]	; (8003654 <xPortStartScheduler+0x134>)
 800359e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80035a0:	78fb      	ldrb	r3, [r7, #3]
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	005b      	lsls	r3, r3, #1
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80035aa:	78fb      	ldrb	r3, [r7, #3]
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035b2:	2b80      	cmp	r3, #128	; 0x80
 80035b4:	d0ef      	beq.n	8003596 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80035b6:	4b27      	ldr	r3, [pc, #156]	; (8003654 <xPortStartScheduler+0x134>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f1c3 0307 	rsb	r3, r3, #7
 80035be:	2b04      	cmp	r3, #4
 80035c0:	d00a      	beq.n	80035d8 <xPortStartScheduler+0xb8>
	__asm volatile
 80035c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035c6:	f383 8811 	msr	BASEPRI, r3
 80035ca:	f3bf 8f6f 	isb	sy
 80035ce:	f3bf 8f4f 	dsb	sy
 80035d2:	60bb      	str	r3, [r7, #8]
}
 80035d4:	bf00      	nop
 80035d6:	e7fe      	b.n	80035d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80035d8:	4b1e      	ldr	r3, [pc, #120]	; (8003654 <xPortStartScheduler+0x134>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	021b      	lsls	r3, r3, #8
 80035de:	4a1d      	ldr	r2, [pc, #116]	; (8003654 <xPortStartScheduler+0x134>)
 80035e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80035e2:	4b1c      	ldr	r3, [pc, #112]	; (8003654 <xPortStartScheduler+0x134>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80035ea:	4a1a      	ldr	r2, [pc, #104]	; (8003654 <xPortStartScheduler+0x134>)
 80035ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	b2da      	uxtb	r2, r3
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80035f6:	4b18      	ldr	r3, [pc, #96]	; (8003658 <xPortStartScheduler+0x138>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a17      	ldr	r2, [pc, #92]	; (8003658 <xPortStartScheduler+0x138>)
 80035fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003600:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003602:	4b15      	ldr	r3, [pc, #84]	; (8003658 <xPortStartScheduler+0x138>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a14      	ldr	r2, [pc, #80]	; (8003658 <xPortStartScheduler+0x138>)
 8003608:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800360c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800360e:	f000 f8dd 	bl	80037cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003612:	4b12      	ldr	r3, [pc, #72]	; (800365c <xPortStartScheduler+0x13c>)
 8003614:	2200      	movs	r2, #0
 8003616:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003618:	f000 f8fc 	bl	8003814 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800361c:	4b10      	ldr	r3, [pc, #64]	; (8003660 <xPortStartScheduler+0x140>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a0f      	ldr	r2, [pc, #60]	; (8003660 <xPortStartScheduler+0x140>)
 8003622:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003626:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003628:	f7ff ff66 	bl	80034f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800362c:	f001 f9da 	bl	80049e4 <vTaskSwitchContext>
	prvTaskExitError();
 8003630:	f7ff ff20 	bl	8003474 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003634:	2300      	movs	r3, #0
}
 8003636:	4618      	mov	r0, r3
 8003638:	3718      	adds	r7, #24
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
 800363e:	bf00      	nop
 8003640:	e000ed00 	.word	0xe000ed00
 8003644:	410fc271 	.word	0x410fc271
 8003648:	410fc270 	.word	0x410fc270
 800364c:	e000e400 	.word	0xe000e400
 8003650:	20004370 	.word	0x20004370
 8003654:	20004374 	.word	0x20004374
 8003658:	e000ed20 	.word	0xe000ed20
 800365c:	2000000c 	.word	0x2000000c
 8003660:	e000ef34 	.word	0xe000ef34

08003664 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003664:	b480      	push	{r7}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
	__asm volatile
 800366a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800366e:	f383 8811 	msr	BASEPRI, r3
 8003672:	f3bf 8f6f 	isb	sy
 8003676:	f3bf 8f4f 	dsb	sy
 800367a:	607b      	str	r3, [r7, #4]
}
 800367c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800367e:	4b0f      	ldr	r3, [pc, #60]	; (80036bc <vPortEnterCritical+0x58>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	3301      	adds	r3, #1
 8003684:	4a0d      	ldr	r2, [pc, #52]	; (80036bc <vPortEnterCritical+0x58>)
 8003686:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003688:	4b0c      	ldr	r3, [pc, #48]	; (80036bc <vPortEnterCritical+0x58>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2b01      	cmp	r3, #1
 800368e:	d10f      	bne.n	80036b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003690:	4b0b      	ldr	r3, [pc, #44]	; (80036c0 <vPortEnterCritical+0x5c>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	b2db      	uxtb	r3, r3
 8003696:	2b00      	cmp	r3, #0
 8003698:	d00a      	beq.n	80036b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800369a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800369e:	f383 8811 	msr	BASEPRI, r3
 80036a2:	f3bf 8f6f 	isb	sy
 80036a6:	f3bf 8f4f 	dsb	sy
 80036aa:	603b      	str	r3, [r7, #0]
}
 80036ac:	bf00      	nop
 80036ae:	e7fe      	b.n	80036ae <vPortEnterCritical+0x4a>
	}
}
 80036b0:	bf00      	nop
 80036b2:	370c      	adds	r7, #12
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr
 80036bc:	2000000c 	.word	0x2000000c
 80036c0:	e000ed04 	.word	0xe000ed04

080036c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80036c4:	b480      	push	{r7}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80036ca:	4b12      	ldr	r3, [pc, #72]	; (8003714 <vPortExitCritical+0x50>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d10a      	bne.n	80036e8 <vPortExitCritical+0x24>
	__asm volatile
 80036d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036d6:	f383 8811 	msr	BASEPRI, r3
 80036da:	f3bf 8f6f 	isb	sy
 80036de:	f3bf 8f4f 	dsb	sy
 80036e2:	607b      	str	r3, [r7, #4]
}
 80036e4:	bf00      	nop
 80036e6:	e7fe      	b.n	80036e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80036e8:	4b0a      	ldr	r3, [pc, #40]	; (8003714 <vPortExitCritical+0x50>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	3b01      	subs	r3, #1
 80036ee:	4a09      	ldr	r2, [pc, #36]	; (8003714 <vPortExitCritical+0x50>)
 80036f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80036f2:	4b08      	ldr	r3, [pc, #32]	; (8003714 <vPortExitCritical+0x50>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d105      	bne.n	8003706 <vPortExitCritical+0x42>
 80036fa:	2300      	movs	r3, #0
 80036fc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003704:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003706:	bf00      	nop
 8003708:	370c      	adds	r7, #12
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr
 8003712:	bf00      	nop
 8003714:	2000000c 	.word	0x2000000c
	...

08003720 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003720:	f3ef 8009 	mrs	r0, PSP
 8003724:	f3bf 8f6f 	isb	sy
 8003728:	4b15      	ldr	r3, [pc, #84]	; (8003780 <pxCurrentTCBConst>)
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	f01e 0f10 	tst.w	lr, #16
 8003730:	bf08      	it	eq
 8003732:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003736:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800373a:	6010      	str	r0, [r2, #0]
 800373c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003740:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003744:	f380 8811 	msr	BASEPRI, r0
 8003748:	f3bf 8f4f 	dsb	sy
 800374c:	f3bf 8f6f 	isb	sy
 8003750:	f001 f948 	bl	80049e4 <vTaskSwitchContext>
 8003754:	f04f 0000 	mov.w	r0, #0
 8003758:	f380 8811 	msr	BASEPRI, r0
 800375c:	bc09      	pop	{r0, r3}
 800375e:	6819      	ldr	r1, [r3, #0]
 8003760:	6808      	ldr	r0, [r1, #0]
 8003762:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003766:	f01e 0f10 	tst.w	lr, #16
 800376a:	bf08      	it	eq
 800376c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003770:	f380 8809 	msr	PSP, r0
 8003774:	f3bf 8f6f 	isb	sy
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop
 800377c:	f3af 8000 	nop.w

08003780 <pxCurrentTCBConst>:
 8003780:	20004378 	.word	0x20004378
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003784:	bf00      	nop
 8003786:	bf00      	nop

08003788 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b082      	sub	sp, #8
 800378c:	af00      	add	r7, sp, #0
	__asm volatile
 800378e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003792:	f383 8811 	msr	BASEPRI, r3
 8003796:	f3bf 8f6f 	isb	sy
 800379a:	f3bf 8f4f 	dsb	sy
 800379e:	607b      	str	r3, [r7, #4]
}
 80037a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80037a2:	f001 f865 	bl	8004870 <xTaskIncrementTick>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d003      	beq.n	80037b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80037ac:	4b06      	ldr	r3, [pc, #24]	; (80037c8 <xPortSysTickHandler+0x40>)
 80037ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037b2:	601a      	str	r2, [r3, #0]
 80037b4:	2300      	movs	r3, #0
 80037b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	f383 8811 	msr	BASEPRI, r3
}
 80037be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80037c0:	bf00      	nop
 80037c2:	3708      	adds	r7, #8
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	e000ed04 	.word	0xe000ed04

080037cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80037cc:	b480      	push	{r7}
 80037ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80037d0:	4b0b      	ldr	r3, [pc, #44]	; (8003800 <vPortSetupTimerInterrupt+0x34>)
 80037d2:	2200      	movs	r2, #0
 80037d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80037d6:	4b0b      	ldr	r3, [pc, #44]	; (8003804 <vPortSetupTimerInterrupt+0x38>)
 80037d8:	2200      	movs	r2, #0
 80037da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80037dc:	4b0a      	ldr	r3, [pc, #40]	; (8003808 <vPortSetupTimerInterrupt+0x3c>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a0a      	ldr	r2, [pc, #40]	; (800380c <vPortSetupTimerInterrupt+0x40>)
 80037e2:	fba2 2303 	umull	r2, r3, r2, r3
 80037e6:	099b      	lsrs	r3, r3, #6
 80037e8:	4a09      	ldr	r2, [pc, #36]	; (8003810 <vPortSetupTimerInterrupt+0x44>)
 80037ea:	3b01      	subs	r3, #1
 80037ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80037ee:	4b04      	ldr	r3, [pc, #16]	; (8003800 <vPortSetupTimerInterrupt+0x34>)
 80037f0:	2207      	movs	r2, #7
 80037f2:	601a      	str	r2, [r3, #0]
}
 80037f4:	bf00      	nop
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	e000e010 	.word	0xe000e010
 8003804:	e000e018 	.word	0xe000e018
 8003808:	20000000 	.word	0x20000000
 800380c:	10624dd3 	.word	0x10624dd3
 8003810:	e000e014 	.word	0xe000e014

08003814 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003814:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003824 <vPortEnableVFP+0x10>
 8003818:	6801      	ldr	r1, [r0, #0]
 800381a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800381e:	6001      	str	r1, [r0, #0]
 8003820:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003822:	bf00      	nop
 8003824:	e000ed88 	.word	0xe000ed88

08003828 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003828:	b480      	push	{r7}
 800382a:	b085      	sub	sp, #20
 800382c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800382e:	f3ef 8305 	mrs	r3, IPSR
 8003832:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2b0f      	cmp	r3, #15
 8003838:	d914      	bls.n	8003864 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800383a:	4a17      	ldr	r2, [pc, #92]	; (8003898 <vPortValidateInterruptPriority+0x70>)
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	4413      	add	r3, r2
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003844:	4b15      	ldr	r3, [pc, #84]	; (800389c <vPortValidateInterruptPriority+0x74>)
 8003846:	781b      	ldrb	r3, [r3, #0]
 8003848:	7afa      	ldrb	r2, [r7, #11]
 800384a:	429a      	cmp	r2, r3
 800384c:	d20a      	bcs.n	8003864 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800384e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003852:	f383 8811 	msr	BASEPRI, r3
 8003856:	f3bf 8f6f 	isb	sy
 800385a:	f3bf 8f4f 	dsb	sy
 800385e:	607b      	str	r3, [r7, #4]
}
 8003860:	bf00      	nop
 8003862:	e7fe      	b.n	8003862 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003864:	4b0e      	ldr	r3, [pc, #56]	; (80038a0 <vPortValidateInterruptPriority+0x78>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800386c:	4b0d      	ldr	r3, [pc, #52]	; (80038a4 <vPortValidateInterruptPriority+0x7c>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	429a      	cmp	r2, r3
 8003872:	d90a      	bls.n	800388a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8003874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003878:	f383 8811 	msr	BASEPRI, r3
 800387c:	f3bf 8f6f 	isb	sy
 8003880:	f3bf 8f4f 	dsb	sy
 8003884:	603b      	str	r3, [r7, #0]
}
 8003886:	bf00      	nop
 8003888:	e7fe      	b.n	8003888 <vPortValidateInterruptPriority+0x60>
	}
 800388a:	bf00      	nop
 800388c:	3714      	adds	r7, #20
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr
 8003896:	bf00      	nop
 8003898:	e000e3f0 	.word	0xe000e3f0
 800389c:	20004370 	.word	0x20004370
 80038a0:	e000ed0c 	.word	0xe000ed0c
 80038a4:	20004374 	.word	0x20004374

080038a8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d10a      	bne.n	80038d2 <xQueueGenericReset+0x2a>
	__asm volatile
 80038bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038c0:	f383 8811 	msr	BASEPRI, r3
 80038c4:	f3bf 8f6f 	isb	sy
 80038c8:	f3bf 8f4f 	dsb	sy
 80038cc:	60bb      	str	r3, [r7, #8]
}
 80038ce:	bf00      	nop
 80038d0:	e7fe      	b.n	80038d0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80038d2:	f7ff fec7 	bl	8003664 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038de:	68f9      	ldr	r1, [r7, #12]
 80038e0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80038e2:	fb01 f303 	mul.w	r3, r1, r3
 80038e6:	441a      	add	r2, r3
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2200      	movs	r2, #0
 80038f0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003902:	3b01      	subs	r3, #1
 8003904:	68f9      	ldr	r1, [r7, #12]
 8003906:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003908:	fb01 f303 	mul.w	r3, r1, r3
 800390c:	441a      	add	r2, r3
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	22ff      	movs	r2, #255	; 0xff
 8003916:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	22ff      	movs	r2, #255	; 0xff
 800391e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d114      	bne.n	8003952 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	691b      	ldr	r3, [r3, #16]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d01a      	beq.n	8003966 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	3310      	adds	r3, #16
 8003934:	4618      	mov	r0, r3
 8003936:	f001 f903 	bl	8004b40 <xTaskRemoveFromEventList>
 800393a:	4603      	mov	r3, r0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d012      	beq.n	8003966 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003940:	4b0c      	ldr	r3, [pc, #48]	; (8003974 <xQueueGenericReset+0xcc>)
 8003942:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003946:	601a      	str	r2, [r3, #0]
 8003948:	f3bf 8f4f 	dsb	sy
 800394c:	f3bf 8f6f 	isb	sy
 8003950:	e009      	b.n	8003966 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	3310      	adds	r3, #16
 8003956:	4618      	mov	r0, r3
 8003958:	f7ff fca4 	bl	80032a4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	3324      	adds	r3, #36	; 0x24
 8003960:	4618      	mov	r0, r3
 8003962:	f7ff fc9f 	bl	80032a4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003966:	f7ff fead 	bl	80036c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800396a:	2301      	movs	r3, #1
}
 800396c:	4618      	mov	r0, r3
 800396e:	3710      	adds	r7, #16
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}
 8003974:	e000ed04 	.word	0xe000ed04

08003978 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003978:	b580      	push	{r7, lr}
 800397a:	b08e      	sub	sp, #56	; 0x38
 800397c:	af02      	add	r7, sp, #8
 800397e:	60f8      	str	r0, [r7, #12]
 8003980:	60b9      	str	r1, [r7, #8]
 8003982:	607a      	str	r2, [r7, #4]
 8003984:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d10a      	bne.n	80039a2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800398c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003990:	f383 8811 	msr	BASEPRI, r3
 8003994:	f3bf 8f6f 	isb	sy
 8003998:	f3bf 8f4f 	dsb	sy
 800399c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800399e:	bf00      	nop
 80039a0:	e7fe      	b.n	80039a0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d10a      	bne.n	80039be <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80039a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ac:	f383 8811 	msr	BASEPRI, r3
 80039b0:	f3bf 8f6f 	isb	sy
 80039b4:	f3bf 8f4f 	dsb	sy
 80039b8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80039ba:	bf00      	nop
 80039bc:	e7fe      	b.n	80039bc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d002      	beq.n	80039ca <xQueueGenericCreateStatic+0x52>
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d001      	beq.n	80039ce <xQueueGenericCreateStatic+0x56>
 80039ca:	2301      	movs	r3, #1
 80039cc:	e000      	b.n	80039d0 <xQueueGenericCreateStatic+0x58>
 80039ce:	2300      	movs	r3, #0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d10a      	bne.n	80039ea <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80039d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039d8:	f383 8811 	msr	BASEPRI, r3
 80039dc:	f3bf 8f6f 	isb	sy
 80039e0:	f3bf 8f4f 	dsb	sy
 80039e4:	623b      	str	r3, [r7, #32]
}
 80039e6:	bf00      	nop
 80039e8:	e7fe      	b.n	80039e8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d102      	bne.n	80039f6 <xQueueGenericCreateStatic+0x7e>
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d101      	bne.n	80039fa <xQueueGenericCreateStatic+0x82>
 80039f6:	2301      	movs	r3, #1
 80039f8:	e000      	b.n	80039fc <xQueueGenericCreateStatic+0x84>
 80039fa:	2300      	movs	r3, #0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d10a      	bne.n	8003a16 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a04:	f383 8811 	msr	BASEPRI, r3
 8003a08:	f3bf 8f6f 	isb	sy
 8003a0c:	f3bf 8f4f 	dsb	sy
 8003a10:	61fb      	str	r3, [r7, #28]
}
 8003a12:	bf00      	nop
 8003a14:	e7fe      	b.n	8003a14 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003a16:	2350      	movs	r3, #80	; 0x50
 8003a18:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	2b50      	cmp	r3, #80	; 0x50
 8003a1e:	d00a      	beq.n	8003a36 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a24:	f383 8811 	msr	BASEPRI, r3
 8003a28:	f3bf 8f6f 	isb	sy
 8003a2c:	f3bf 8f4f 	dsb	sy
 8003a30:	61bb      	str	r3, [r7, #24]
}
 8003a32:	bf00      	nop
 8003a34:	e7fe      	b.n	8003a34 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003a36:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d00d      	beq.n	8003a5e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a44:	2201      	movs	r2, #1
 8003a46:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003a4a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a50:	9300      	str	r3, [sp, #0]
 8003a52:	4613      	mov	r3, r2
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	68b9      	ldr	r1, [r7, #8]
 8003a58:	68f8      	ldr	r0, [r7, #12]
 8003a5a:	f000 f805 	bl	8003a68 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3730      	adds	r7, #48	; 0x30
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b084      	sub	sp, #16
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	60f8      	str	r0, [r7, #12]
 8003a70:	60b9      	str	r1, [r7, #8]
 8003a72:	607a      	str	r2, [r7, #4]
 8003a74:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d103      	bne.n	8003a84 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003a7c:	69bb      	ldr	r3, [r7, #24]
 8003a7e:	69ba      	ldr	r2, [r7, #24]
 8003a80:	601a      	str	r2, [r3, #0]
 8003a82:	e002      	b.n	8003a8a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003a84:	69bb      	ldr	r3, [r7, #24]
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003a8a:	69bb      	ldr	r3, [r7, #24]
 8003a8c:	68fa      	ldr	r2, [r7, #12]
 8003a8e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	68ba      	ldr	r2, [r7, #8]
 8003a94:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003a96:	2101      	movs	r1, #1
 8003a98:	69b8      	ldr	r0, [r7, #24]
 8003a9a:	f7ff ff05 	bl	80038a8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003a9e:	69bb      	ldr	r3, [r7, #24]
 8003aa0:	78fa      	ldrb	r2, [r7, #3]
 8003aa2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003aa6:	bf00      	nop
 8003aa8:	3710      	adds	r7, #16
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
	...

08003ab0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b08e      	sub	sp, #56	; 0x38
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	60b9      	str	r1, [r7, #8]
 8003aba:	607a      	str	r2, [r7, #4]
 8003abc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d10a      	bne.n	8003ae2 <xQueueGenericSend+0x32>
	__asm volatile
 8003acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ad0:	f383 8811 	msr	BASEPRI, r3
 8003ad4:	f3bf 8f6f 	isb	sy
 8003ad8:	f3bf 8f4f 	dsb	sy
 8003adc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003ade:	bf00      	nop
 8003ae0:	e7fe      	b.n	8003ae0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d103      	bne.n	8003af0 <xQueueGenericSend+0x40>
 8003ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d101      	bne.n	8003af4 <xQueueGenericSend+0x44>
 8003af0:	2301      	movs	r3, #1
 8003af2:	e000      	b.n	8003af6 <xQueueGenericSend+0x46>
 8003af4:	2300      	movs	r3, #0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d10a      	bne.n	8003b10 <xQueueGenericSend+0x60>
	__asm volatile
 8003afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003afe:	f383 8811 	msr	BASEPRI, r3
 8003b02:	f3bf 8f6f 	isb	sy
 8003b06:	f3bf 8f4f 	dsb	sy
 8003b0a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003b0c:	bf00      	nop
 8003b0e:	e7fe      	b.n	8003b0e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d103      	bne.n	8003b1e <xQueueGenericSend+0x6e>
 8003b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d101      	bne.n	8003b22 <xQueueGenericSend+0x72>
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e000      	b.n	8003b24 <xQueueGenericSend+0x74>
 8003b22:	2300      	movs	r3, #0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d10a      	bne.n	8003b3e <xQueueGenericSend+0x8e>
	__asm volatile
 8003b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b2c:	f383 8811 	msr	BASEPRI, r3
 8003b30:	f3bf 8f6f 	isb	sy
 8003b34:	f3bf 8f4f 	dsb	sy
 8003b38:	623b      	str	r3, [r7, #32]
}
 8003b3a:	bf00      	nop
 8003b3c:	e7fe      	b.n	8003b3c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003b3e:	f001 f9bd 	bl	8004ebc <xTaskGetSchedulerState>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d102      	bne.n	8003b4e <xQueueGenericSend+0x9e>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d101      	bne.n	8003b52 <xQueueGenericSend+0xa2>
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e000      	b.n	8003b54 <xQueueGenericSend+0xa4>
 8003b52:	2300      	movs	r3, #0
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d10a      	bne.n	8003b6e <xQueueGenericSend+0xbe>
	__asm volatile
 8003b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b5c:	f383 8811 	msr	BASEPRI, r3
 8003b60:	f3bf 8f6f 	isb	sy
 8003b64:	f3bf 8f4f 	dsb	sy
 8003b68:	61fb      	str	r3, [r7, #28]
}
 8003b6a:	bf00      	nop
 8003b6c:	e7fe      	b.n	8003b6c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003b6e:	f7ff fd79 	bl	8003664 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d302      	bcc.n	8003b84 <xQueueGenericSend+0xd4>
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	2b02      	cmp	r3, #2
 8003b82:	d129      	bne.n	8003bd8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003b84:	683a      	ldr	r2, [r7, #0]
 8003b86:	68b9      	ldr	r1, [r7, #8]
 8003b88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b8a:	f000 fa0b 	bl	8003fa4 <prvCopyDataToQueue>
 8003b8e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d010      	beq.n	8003bba <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b9a:	3324      	adds	r3, #36	; 0x24
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f000 ffcf 	bl	8004b40 <xTaskRemoveFromEventList>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d013      	beq.n	8003bd0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003ba8:	4b3f      	ldr	r3, [pc, #252]	; (8003ca8 <xQueueGenericSend+0x1f8>)
 8003baa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bae:	601a      	str	r2, [r3, #0]
 8003bb0:	f3bf 8f4f 	dsb	sy
 8003bb4:	f3bf 8f6f 	isb	sy
 8003bb8:	e00a      	b.n	8003bd0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d007      	beq.n	8003bd0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003bc0:	4b39      	ldr	r3, [pc, #228]	; (8003ca8 <xQueueGenericSend+0x1f8>)
 8003bc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bc6:	601a      	str	r2, [r3, #0]
 8003bc8:	f3bf 8f4f 	dsb	sy
 8003bcc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003bd0:	f7ff fd78 	bl	80036c4 <vPortExitCritical>
				return pdPASS;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e063      	b.n	8003ca0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d103      	bne.n	8003be6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003bde:	f7ff fd71 	bl	80036c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003be2:	2300      	movs	r3, #0
 8003be4:	e05c      	b.n	8003ca0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003be6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d106      	bne.n	8003bfa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003bec:	f107 0314 	add.w	r3, r7, #20
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f001 f809 	bl	8004c08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003bfa:	f7ff fd63 	bl	80036c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003bfe:	f000 fd7b 	bl	80046f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003c02:	f7ff fd2f 	bl	8003664 <vPortEnterCritical>
 8003c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c0c:	b25b      	sxtb	r3, r3
 8003c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c12:	d103      	bne.n	8003c1c <xQueueGenericSend+0x16c>
 8003c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c16:	2200      	movs	r2, #0
 8003c18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c22:	b25b      	sxtb	r3, r3
 8003c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c28:	d103      	bne.n	8003c32 <xQueueGenericSend+0x182>
 8003c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c32:	f7ff fd47 	bl	80036c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003c36:	1d3a      	adds	r2, r7, #4
 8003c38:	f107 0314 	add.w	r3, r7, #20
 8003c3c:	4611      	mov	r1, r2
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f000 fff8 	bl	8004c34 <xTaskCheckForTimeOut>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d124      	bne.n	8003c94 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003c4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c4c:	f000 faa2 	bl	8004194 <prvIsQueueFull>
 8003c50:	4603      	mov	r3, r0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d018      	beq.n	8003c88 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c58:	3310      	adds	r3, #16
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	4611      	mov	r1, r2
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f000 ff1e 	bl	8004aa0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003c64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c66:	f000 fa2d 	bl	80040c4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003c6a:	f000 fd53 	bl	8004714 <xTaskResumeAll>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	f47f af7c 	bne.w	8003b6e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003c76:	4b0c      	ldr	r3, [pc, #48]	; (8003ca8 <xQueueGenericSend+0x1f8>)
 8003c78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c7c:	601a      	str	r2, [r3, #0]
 8003c7e:	f3bf 8f4f 	dsb	sy
 8003c82:	f3bf 8f6f 	isb	sy
 8003c86:	e772      	b.n	8003b6e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003c88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c8a:	f000 fa1b 	bl	80040c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003c8e:	f000 fd41 	bl	8004714 <xTaskResumeAll>
 8003c92:	e76c      	b.n	8003b6e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003c94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c96:	f000 fa15 	bl	80040c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003c9a:	f000 fd3b 	bl	8004714 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003c9e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3738      	adds	r7, #56	; 0x38
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}
 8003ca8:	e000ed04 	.word	0xe000ed04

08003cac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b090      	sub	sp, #64	; 0x40
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	60f8      	str	r0, [r7, #12]
 8003cb4:	60b9      	str	r1, [r7, #8]
 8003cb6:	607a      	str	r2, [r7, #4]
 8003cb8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d10a      	bne.n	8003cda <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cc8:	f383 8811 	msr	BASEPRI, r3
 8003ccc:	f3bf 8f6f 	isb	sy
 8003cd0:	f3bf 8f4f 	dsb	sy
 8003cd4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003cd6:	bf00      	nop
 8003cd8:	e7fe      	b.n	8003cd8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d103      	bne.n	8003ce8 <xQueueGenericSendFromISR+0x3c>
 8003ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d101      	bne.n	8003cec <xQueueGenericSendFromISR+0x40>
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e000      	b.n	8003cee <xQueueGenericSendFromISR+0x42>
 8003cec:	2300      	movs	r3, #0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d10a      	bne.n	8003d08 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cf6:	f383 8811 	msr	BASEPRI, r3
 8003cfa:	f3bf 8f6f 	isb	sy
 8003cfe:	f3bf 8f4f 	dsb	sy
 8003d02:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003d04:	bf00      	nop
 8003d06:	e7fe      	b.n	8003d06 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d103      	bne.n	8003d16 <xQueueGenericSendFromISR+0x6a>
 8003d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d101      	bne.n	8003d1a <xQueueGenericSendFromISR+0x6e>
 8003d16:	2301      	movs	r3, #1
 8003d18:	e000      	b.n	8003d1c <xQueueGenericSendFromISR+0x70>
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d10a      	bne.n	8003d36 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d24:	f383 8811 	msr	BASEPRI, r3
 8003d28:	f3bf 8f6f 	isb	sy
 8003d2c:	f3bf 8f4f 	dsb	sy
 8003d30:	623b      	str	r3, [r7, #32]
}
 8003d32:	bf00      	nop
 8003d34:	e7fe      	b.n	8003d34 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003d36:	f7ff fd77 	bl	8003828 <vPortValidateInterruptPriority>
	__asm volatile
 8003d3a:	f3ef 8211 	mrs	r2, BASEPRI
 8003d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d42:	f383 8811 	msr	BASEPRI, r3
 8003d46:	f3bf 8f6f 	isb	sy
 8003d4a:	f3bf 8f4f 	dsb	sy
 8003d4e:	61fa      	str	r2, [r7, #28]
 8003d50:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8003d52:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003d54:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d302      	bcc.n	8003d68 <xQueueGenericSendFromISR+0xbc>
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	2b02      	cmp	r3, #2
 8003d66:	d12f      	bne.n	8003dc8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d76:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003d78:	683a      	ldr	r2, [r7, #0]
 8003d7a:	68b9      	ldr	r1, [r7, #8]
 8003d7c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003d7e:	f000 f911 	bl	8003fa4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003d82:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d8a:	d112      	bne.n	8003db2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d016      	beq.n	8003dc2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d96:	3324      	adds	r3, #36	; 0x24
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f000 fed1 	bl	8004b40 <xTaskRemoveFromEventList>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d00e      	beq.n	8003dc2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d00b      	beq.n	8003dc2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2201      	movs	r2, #1
 8003dae:	601a      	str	r2, [r3, #0]
 8003db0:	e007      	b.n	8003dc2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003db2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003db6:	3301      	adds	r3, #1
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	b25a      	sxtb	r2, r3
 8003dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003dc6:	e001      	b.n	8003dcc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003dcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dce:	617b      	str	r3, [r7, #20]
	__asm volatile
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	f383 8811 	msr	BASEPRI, r3
}
 8003dd6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003dd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3740      	adds	r7, #64	; 0x40
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
	...

08003de4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b08c      	sub	sp, #48	; 0x30
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	60f8      	str	r0, [r7, #12]
 8003dec:	60b9      	str	r1, [r7, #8]
 8003dee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003df0:	2300      	movs	r3, #0
 8003df2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d10a      	bne.n	8003e14 <xQueueReceive+0x30>
	__asm volatile
 8003dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e02:	f383 8811 	msr	BASEPRI, r3
 8003e06:	f3bf 8f6f 	isb	sy
 8003e0a:	f3bf 8f4f 	dsb	sy
 8003e0e:	623b      	str	r3, [r7, #32]
}
 8003e10:	bf00      	nop
 8003e12:	e7fe      	b.n	8003e12 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d103      	bne.n	8003e22 <xQueueReceive+0x3e>
 8003e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d101      	bne.n	8003e26 <xQueueReceive+0x42>
 8003e22:	2301      	movs	r3, #1
 8003e24:	e000      	b.n	8003e28 <xQueueReceive+0x44>
 8003e26:	2300      	movs	r3, #0
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d10a      	bne.n	8003e42 <xQueueReceive+0x5e>
	__asm volatile
 8003e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e30:	f383 8811 	msr	BASEPRI, r3
 8003e34:	f3bf 8f6f 	isb	sy
 8003e38:	f3bf 8f4f 	dsb	sy
 8003e3c:	61fb      	str	r3, [r7, #28]
}
 8003e3e:	bf00      	nop
 8003e40:	e7fe      	b.n	8003e40 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003e42:	f001 f83b 	bl	8004ebc <xTaskGetSchedulerState>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d102      	bne.n	8003e52 <xQueueReceive+0x6e>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d101      	bne.n	8003e56 <xQueueReceive+0x72>
 8003e52:	2301      	movs	r3, #1
 8003e54:	e000      	b.n	8003e58 <xQueueReceive+0x74>
 8003e56:	2300      	movs	r3, #0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d10a      	bne.n	8003e72 <xQueueReceive+0x8e>
	__asm volatile
 8003e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e60:	f383 8811 	msr	BASEPRI, r3
 8003e64:	f3bf 8f6f 	isb	sy
 8003e68:	f3bf 8f4f 	dsb	sy
 8003e6c:	61bb      	str	r3, [r7, #24]
}
 8003e6e:	bf00      	nop
 8003e70:	e7fe      	b.n	8003e70 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003e72:	f7ff fbf7 	bl	8003664 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e7a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d01f      	beq.n	8003ec2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003e82:	68b9      	ldr	r1, [r7, #8]
 8003e84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e86:	f000 f8f7 	bl	8004078 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8c:	1e5a      	subs	r2, r3, #1
 8003e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e90:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d00f      	beq.n	8003eba <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e9c:	3310      	adds	r3, #16
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f000 fe4e 	bl	8004b40 <xTaskRemoveFromEventList>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d007      	beq.n	8003eba <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003eaa:	4b3d      	ldr	r3, [pc, #244]	; (8003fa0 <xQueueReceive+0x1bc>)
 8003eac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003eb0:	601a      	str	r2, [r3, #0]
 8003eb2:	f3bf 8f4f 	dsb	sy
 8003eb6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003eba:	f7ff fc03 	bl	80036c4 <vPortExitCritical>
				return pdPASS;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e069      	b.n	8003f96 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d103      	bne.n	8003ed0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003ec8:	f7ff fbfc 	bl	80036c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	e062      	b.n	8003f96 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d106      	bne.n	8003ee4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003ed6:	f107 0310 	add.w	r3, r7, #16
 8003eda:	4618      	mov	r0, r3
 8003edc:	f000 fe94 	bl	8004c08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003ee4:	f7ff fbee 	bl	80036c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003ee8:	f000 fc06 	bl	80046f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003eec:	f7ff fbba 	bl	8003664 <vPortEnterCritical>
 8003ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ef2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ef6:	b25b      	sxtb	r3, r3
 8003ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003efc:	d103      	bne.n	8003f06 <xQueueReceive+0x122>
 8003efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f00:	2200      	movs	r2, #0
 8003f02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f0c:	b25b      	sxtb	r3, r3
 8003f0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f12:	d103      	bne.n	8003f1c <xQueueReceive+0x138>
 8003f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f16:	2200      	movs	r2, #0
 8003f18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f1c:	f7ff fbd2 	bl	80036c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003f20:	1d3a      	adds	r2, r7, #4
 8003f22:	f107 0310 	add.w	r3, r7, #16
 8003f26:	4611      	mov	r1, r2
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f000 fe83 	bl	8004c34 <xTaskCheckForTimeOut>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d123      	bne.n	8003f7c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003f34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f36:	f000 f917 	bl	8004168 <prvIsQueueEmpty>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d017      	beq.n	8003f70 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f42:	3324      	adds	r3, #36	; 0x24
 8003f44:	687a      	ldr	r2, [r7, #4]
 8003f46:	4611      	mov	r1, r2
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f000 fda9 	bl	8004aa0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003f4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f50:	f000 f8b8 	bl	80040c4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003f54:	f000 fbde 	bl	8004714 <xTaskResumeAll>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d189      	bne.n	8003e72 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003f5e:	4b10      	ldr	r3, [pc, #64]	; (8003fa0 <xQueueReceive+0x1bc>)
 8003f60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f64:	601a      	str	r2, [r3, #0]
 8003f66:	f3bf 8f4f 	dsb	sy
 8003f6a:	f3bf 8f6f 	isb	sy
 8003f6e:	e780      	b.n	8003e72 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003f70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f72:	f000 f8a7 	bl	80040c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003f76:	f000 fbcd 	bl	8004714 <xTaskResumeAll>
 8003f7a:	e77a      	b.n	8003e72 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003f7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f7e:	f000 f8a1 	bl	80040c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003f82:	f000 fbc7 	bl	8004714 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003f86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f88:	f000 f8ee 	bl	8004168 <prvIsQueueEmpty>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	f43f af6f 	beq.w	8003e72 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003f94:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3730      	adds	r7, #48	; 0x30
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	e000ed04 	.word	0xe000ed04

08003fa4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b086      	sub	sp, #24
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	60b9      	str	r1, [r7, #8]
 8003fae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fb8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d10d      	bne.n	8003fde <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d14d      	bne.n	8004066 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f000 ff92 	bl	8004ef8 <xTaskPriorityDisinherit>
 8003fd4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	609a      	str	r2, [r3, #8]
 8003fdc:	e043      	b.n	8004066 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d119      	bne.n	8004018 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	6858      	ldr	r0, [r3, #4]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fec:	461a      	mov	r2, r3
 8003fee:	68b9      	ldr	r1, [r7, #8]
 8003ff0:	f001 fdee 	bl	8005bd0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	685a      	ldr	r2, [r3, #4]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffc:	441a      	add	r2, r3
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	685a      	ldr	r2, [r3, #4]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	429a      	cmp	r2, r3
 800400c:	d32b      	bcc.n	8004066 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	605a      	str	r2, [r3, #4]
 8004016:	e026      	b.n	8004066 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	68d8      	ldr	r0, [r3, #12]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004020:	461a      	mov	r2, r3
 8004022:	68b9      	ldr	r1, [r7, #8]
 8004024:	f001 fdd4 	bl	8005bd0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	68da      	ldr	r2, [r3, #12]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004030:	425b      	negs	r3, r3
 8004032:	441a      	add	r2, r3
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	68da      	ldr	r2, [r3, #12]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	429a      	cmp	r2, r3
 8004042:	d207      	bcs.n	8004054 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	689a      	ldr	r2, [r3, #8]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404c:	425b      	negs	r3, r3
 800404e:	441a      	add	r2, r3
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2b02      	cmp	r3, #2
 8004058:	d105      	bne.n	8004066 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d002      	beq.n	8004066 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	3b01      	subs	r3, #1
 8004064:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	1c5a      	adds	r2, r3, #1
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800406e:	697b      	ldr	r3, [r7, #20]
}
 8004070:	4618      	mov	r0, r3
 8004072:	3718      	adds	r7, #24
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}

08004078 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b082      	sub	sp, #8
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004086:	2b00      	cmp	r3, #0
 8004088:	d018      	beq.n	80040bc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	68da      	ldr	r2, [r3, #12]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004092:	441a      	add	r2, r3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	68da      	ldr	r2, [r3, #12]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d303      	bcc.n	80040ac <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	68d9      	ldr	r1, [r3, #12]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b4:	461a      	mov	r2, r3
 80040b6:	6838      	ldr	r0, [r7, #0]
 80040b8:	f001 fd8a 	bl	8005bd0 <memcpy>
	}
}
 80040bc:	bf00      	nop
 80040be:	3708      	adds	r7, #8
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}

080040c4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b084      	sub	sp, #16
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80040cc:	f7ff faca 	bl	8003664 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80040d6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80040d8:	e011      	b.n	80040fe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d012      	beq.n	8004108 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	3324      	adds	r3, #36	; 0x24
 80040e6:	4618      	mov	r0, r3
 80040e8:	f000 fd2a 	bl	8004b40 <xTaskRemoveFromEventList>
 80040ec:	4603      	mov	r3, r0
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d001      	beq.n	80040f6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80040f2:	f000 fe01 	bl	8004cf8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80040f6:	7bfb      	ldrb	r3, [r7, #15]
 80040f8:	3b01      	subs	r3, #1
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80040fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004102:	2b00      	cmp	r3, #0
 8004104:	dce9      	bgt.n	80040da <prvUnlockQueue+0x16>
 8004106:	e000      	b.n	800410a <prvUnlockQueue+0x46>
					break;
 8004108:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	22ff      	movs	r2, #255	; 0xff
 800410e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004112:	f7ff fad7 	bl	80036c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004116:	f7ff faa5 	bl	8003664 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004120:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004122:	e011      	b.n	8004148 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	691b      	ldr	r3, [r3, #16]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d012      	beq.n	8004152 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	3310      	adds	r3, #16
 8004130:	4618      	mov	r0, r3
 8004132:	f000 fd05 	bl	8004b40 <xTaskRemoveFromEventList>
 8004136:	4603      	mov	r3, r0
 8004138:	2b00      	cmp	r3, #0
 800413a:	d001      	beq.n	8004140 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800413c:	f000 fddc 	bl	8004cf8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004140:	7bbb      	ldrb	r3, [r7, #14]
 8004142:	3b01      	subs	r3, #1
 8004144:	b2db      	uxtb	r3, r3
 8004146:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004148:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800414c:	2b00      	cmp	r3, #0
 800414e:	dce9      	bgt.n	8004124 <prvUnlockQueue+0x60>
 8004150:	e000      	b.n	8004154 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004152:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	22ff      	movs	r2, #255	; 0xff
 8004158:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800415c:	f7ff fab2 	bl	80036c4 <vPortExitCritical>
}
 8004160:	bf00      	nop
 8004162:	3710      	adds	r7, #16
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}

08004168 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b084      	sub	sp, #16
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004170:	f7ff fa78 	bl	8003664 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004178:	2b00      	cmp	r3, #0
 800417a:	d102      	bne.n	8004182 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800417c:	2301      	movs	r3, #1
 800417e:	60fb      	str	r3, [r7, #12]
 8004180:	e001      	b.n	8004186 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004182:	2300      	movs	r3, #0
 8004184:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004186:	f7ff fa9d 	bl	80036c4 <vPortExitCritical>

	return xReturn;
 800418a:	68fb      	ldr	r3, [r7, #12]
}
 800418c:	4618      	mov	r0, r3
 800418e:	3710      	adds	r7, #16
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}

08004194 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b084      	sub	sp, #16
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800419c:	f7ff fa62 	bl	8003664 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d102      	bne.n	80041b2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80041ac:	2301      	movs	r3, #1
 80041ae:	60fb      	str	r3, [r7, #12]
 80041b0:	e001      	b.n	80041b6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80041b2:	2300      	movs	r3, #0
 80041b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80041b6:	f7ff fa85 	bl	80036c4 <vPortExitCritical>

	return xReturn;
 80041ba:	68fb      	ldr	r3, [r7, #12]
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3710      	adds	r7, #16
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80041c4:	b480      	push	{r7}
 80041c6:	b085      	sub	sp, #20
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80041ce:	2300      	movs	r3, #0
 80041d0:	60fb      	str	r3, [r7, #12]
 80041d2:	e014      	b.n	80041fe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80041d4:	4a0f      	ldr	r2, [pc, #60]	; (8004214 <vQueueAddToRegistry+0x50>)
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d10b      	bne.n	80041f8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80041e0:	490c      	ldr	r1, [pc, #48]	; (8004214 <vQueueAddToRegistry+0x50>)
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	683a      	ldr	r2, [r7, #0]
 80041e6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80041ea:	4a0a      	ldr	r2, [pc, #40]	; (8004214 <vQueueAddToRegistry+0x50>)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	00db      	lsls	r3, r3, #3
 80041f0:	4413      	add	r3, r2
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80041f6:	e006      	b.n	8004206 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	3301      	adds	r3, #1
 80041fc:	60fb      	str	r3, [r7, #12]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2b07      	cmp	r3, #7
 8004202:	d9e7      	bls.n	80041d4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004204:	bf00      	nop
 8004206:	bf00      	nop
 8004208:	3714      	adds	r7, #20
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr
 8004212:	bf00      	nop
 8004214:	20004a50 	.word	0x20004a50

08004218 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004218:	b580      	push	{r7, lr}
 800421a:	b086      	sub	sp, #24
 800421c:	af00      	add	r7, sp, #0
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	60b9      	str	r1, [r7, #8]
 8004222:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004228:	f7ff fa1c 	bl	8003664 <vPortEnterCritical>
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004232:	b25b      	sxtb	r3, r3
 8004234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004238:	d103      	bne.n	8004242 <vQueueWaitForMessageRestricted+0x2a>
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	2200      	movs	r2, #0
 800423e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004248:	b25b      	sxtb	r3, r3
 800424a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800424e:	d103      	bne.n	8004258 <vQueueWaitForMessageRestricted+0x40>
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	2200      	movs	r2, #0
 8004254:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004258:	f7ff fa34 	bl	80036c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004260:	2b00      	cmp	r3, #0
 8004262:	d106      	bne.n	8004272 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	3324      	adds	r3, #36	; 0x24
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	68b9      	ldr	r1, [r7, #8]
 800426c:	4618      	mov	r0, r3
 800426e:	f000 fc3b 	bl	8004ae8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004272:	6978      	ldr	r0, [r7, #20]
 8004274:	f7ff ff26 	bl	80040c4 <prvUnlockQueue>
	}
 8004278:	bf00      	nop
 800427a:	3718      	adds	r7, #24
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}

08004280 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004280:	b580      	push	{r7, lr}
 8004282:	b08e      	sub	sp, #56	; 0x38
 8004284:	af04      	add	r7, sp, #16
 8004286:	60f8      	str	r0, [r7, #12]
 8004288:	60b9      	str	r1, [r7, #8]
 800428a:	607a      	str	r2, [r7, #4]
 800428c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800428e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004290:	2b00      	cmp	r3, #0
 8004292:	d10a      	bne.n	80042aa <xTaskCreateStatic+0x2a>
	__asm volatile
 8004294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004298:	f383 8811 	msr	BASEPRI, r3
 800429c:	f3bf 8f6f 	isb	sy
 80042a0:	f3bf 8f4f 	dsb	sy
 80042a4:	623b      	str	r3, [r7, #32]
}
 80042a6:	bf00      	nop
 80042a8:	e7fe      	b.n	80042a8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80042aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d10a      	bne.n	80042c6 <xTaskCreateStatic+0x46>
	__asm volatile
 80042b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042b4:	f383 8811 	msr	BASEPRI, r3
 80042b8:	f3bf 8f6f 	isb	sy
 80042bc:	f3bf 8f4f 	dsb	sy
 80042c0:	61fb      	str	r3, [r7, #28]
}
 80042c2:	bf00      	nop
 80042c4:	e7fe      	b.n	80042c4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80042c6:	235c      	movs	r3, #92	; 0x5c
 80042c8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	2b5c      	cmp	r3, #92	; 0x5c
 80042ce:	d00a      	beq.n	80042e6 <xTaskCreateStatic+0x66>
	__asm volatile
 80042d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d4:	f383 8811 	msr	BASEPRI, r3
 80042d8:	f3bf 8f6f 	isb	sy
 80042dc:	f3bf 8f4f 	dsb	sy
 80042e0:	61bb      	str	r3, [r7, #24]
}
 80042e2:	bf00      	nop
 80042e4:	e7fe      	b.n	80042e4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80042e6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80042e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d01e      	beq.n	800432c <xTaskCreateStatic+0xac>
 80042ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d01b      	beq.n	800432c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80042f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042f6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80042f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80042fc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80042fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004300:	2202      	movs	r2, #2
 8004302:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004306:	2300      	movs	r3, #0
 8004308:	9303      	str	r3, [sp, #12]
 800430a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430c:	9302      	str	r3, [sp, #8]
 800430e:	f107 0314 	add.w	r3, r7, #20
 8004312:	9301      	str	r3, [sp, #4]
 8004314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004316:	9300      	str	r3, [sp, #0]
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	68b9      	ldr	r1, [r7, #8]
 800431e:	68f8      	ldr	r0, [r7, #12]
 8004320:	f000 f850 	bl	80043c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004324:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004326:	f000 f8dd 	bl	80044e4 <prvAddNewTaskToReadyList>
 800432a:	e001      	b.n	8004330 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800432c:	2300      	movs	r3, #0
 800432e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004330:	697b      	ldr	r3, [r7, #20]
	}
 8004332:	4618      	mov	r0, r3
 8004334:	3728      	adds	r7, #40	; 0x28
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}

0800433a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800433a:	b580      	push	{r7, lr}
 800433c:	b08c      	sub	sp, #48	; 0x30
 800433e:	af04      	add	r7, sp, #16
 8004340:	60f8      	str	r0, [r7, #12]
 8004342:	60b9      	str	r1, [r7, #8]
 8004344:	603b      	str	r3, [r7, #0]
 8004346:	4613      	mov	r3, r2
 8004348:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800434a:	88fb      	ldrh	r3, [r7, #6]
 800434c:	009b      	lsls	r3, r3, #2
 800434e:	4618      	mov	r0, r3
 8004350:	f7fe fdbe 	bl	8002ed0 <pvPortMalloc>
 8004354:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d00e      	beq.n	800437a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800435c:	205c      	movs	r0, #92	; 0x5c
 800435e:	f7fe fdb7 	bl	8002ed0 <pvPortMalloc>
 8004362:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004364:	69fb      	ldr	r3, [r7, #28]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d003      	beq.n	8004372 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800436a:	69fb      	ldr	r3, [r7, #28]
 800436c:	697a      	ldr	r2, [r7, #20]
 800436e:	631a      	str	r2, [r3, #48]	; 0x30
 8004370:	e005      	b.n	800437e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004372:	6978      	ldr	r0, [r7, #20]
 8004374:	f7fe fe78 	bl	8003068 <vPortFree>
 8004378:	e001      	b.n	800437e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800437a:	2300      	movs	r3, #0
 800437c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800437e:	69fb      	ldr	r3, [r7, #28]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d017      	beq.n	80043b4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	2200      	movs	r2, #0
 8004388:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800438c:	88fa      	ldrh	r2, [r7, #6]
 800438e:	2300      	movs	r3, #0
 8004390:	9303      	str	r3, [sp, #12]
 8004392:	69fb      	ldr	r3, [r7, #28]
 8004394:	9302      	str	r3, [sp, #8]
 8004396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004398:	9301      	str	r3, [sp, #4]
 800439a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800439c:	9300      	str	r3, [sp, #0]
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	68b9      	ldr	r1, [r7, #8]
 80043a2:	68f8      	ldr	r0, [r7, #12]
 80043a4:	f000 f80e 	bl	80043c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80043a8:	69f8      	ldr	r0, [r7, #28]
 80043aa:	f000 f89b 	bl	80044e4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80043ae:	2301      	movs	r3, #1
 80043b0:	61bb      	str	r3, [r7, #24]
 80043b2:	e002      	b.n	80043ba <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80043b4:	f04f 33ff 	mov.w	r3, #4294967295
 80043b8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80043ba:	69bb      	ldr	r3, [r7, #24]
	}
 80043bc:	4618      	mov	r0, r3
 80043be:	3720      	adds	r7, #32
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}

080043c4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b088      	sub	sp, #32
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	60f8      	str	r0, [r7, #12]
 80043cc:	60b9      	str	r1, [r7, #8]
 80043ce:	607a      	str	r2, [r7, #4]
 80043d0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80043d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043d4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	009b      	lsls	r3, r3, #2
 80043da:	461a      	mov	r2, r3
 80043dc:	21a5      	movs	r1, #165	; 0xa5
 80043de:	f001 fc05 	bl	8005bec <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80043e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80043ec:	3b01      	subs	r3, #1
 80043ee:	009b      	lsls	r3, r3, #2
 80043f0:	4413      	add	r3, r2
 80043f2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80043f4:	69bb      	ldr	r3, [r7, #24]
 80043f6:	f023 0307 	bic.w	r3, r3, #7
 80043fa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80043fc:	69bb      	ldr	r3, [r7, #24]
 80043fe:	f003 0307 	and.w	r3, r3, #7
 8004402:	2b00      	cmp	r3, #0
 8004404:	d00a      	beq.n	800441c <prvInitialiseNewTask+0x58>
	__asm volatile
 8004406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800440a:	f383 8811 	msr	BASEPRI, r3
 800440e:	f3bf 8f6f 	isb	sy
 8004412:	f3bf 8f4f 	dsb	sy
 8004416:	617b      	str	r3, [r7, #20]
}
 8004418:	bf00      	nop
 800441a:	e7fe      	b.n	800441a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d01f      	beq.n	8004462 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004422:	2300      	movs	r3, #0
 8004424:	61fb      	str	r3, [r7, #28]
 8004426:	e012      	b.n	800444e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004428:	68ba      	ldr	r2, [r7, #8]
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	4413      	add	r3, r2
 800442e:	7819      	ldrb	r1, [r3, #0]
 8004430:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004432:	69fb      	ldr	r3, [r7, #28]
 8004434:	4413      	add	r3, r2
 8004436:	3334      	adds	r3, #52	; 0x34
 8004438:	460a      	mov	r2, r1
 800443a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800443c:	68ba      	ldr	r2, [r7, #8]
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	4413      	add	r3, r2
 8004442:	781b      	ldrb	r3, [r3, #0]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d006      	beq.n	8004456 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	3301      	adds	r3, #1
 800444c:	61fb      	str	r3, [r7, #28]
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	2b0f      	cmp	r3, #15
 8004452:	d9e9      	bls.n	8004428 <prvInitialiseNewTask+0x64>
 8004454:	e000      	b.n	8004458 <prvInitialiseNewTask+0x94>
			{
				break;
 8004456:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800445a:	2200      	movs	r2, #0
 800445c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004460:	e003      	b.n	800446a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004464:	2200      	movs	r2, #0
 8004466:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800446a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800446c:	2b37      	cmp	r3, #55	; 0x37
 800446e:	d901      	bls.n	8004474 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004470:	2337      	movs	r3, #55	; 0x37
 8004472:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004476:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004478:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800447a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800447c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800447e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004482:	2200      	movs	r2, #0
 8004484:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004488:	3304      	adds	r3, #4
 800448a:	4618      	mov	r0, r3
 800448c:	f7fe ff2a 	bl	80032e4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004492:	3318      	adds	r3, #24
 8004494:	4618      	mov	r0, r3
 8004496:	f7fe ff25 	bl	80032e4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800449a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800449c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800449e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044a2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80044a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80044aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044ae:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80044b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b2:	2200      	movs	r2, #0
 80044b4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80044b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b8:	2200      	movs	r2, #0
 80044ba:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80044be:	683a      	ldr	r2, [r7, #0]
 80044c0:	68f9      	ldr	r1, [r7, #12]
 80044c2:	69b8      	ldr	r0, [r7, #24]
 80044c4:	f7fe ffa2 	bl	800340c <pxPortInitialiseStack>
 80044c8:	4602      	mov	r2, r0
 80044ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044cc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80044ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d002      	beq.n	80044da <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80044d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80044da:	bf00      	nop
 80044dc:	3720      	adds	r7, #32
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
	...

080044e4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b082      	sub	sp, #8
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80044ec:	f7ff f8ba 	bl	8003664 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80044f0:	4b2d      	ldr	r3, [pc, #180]	; (80045a8 <prvAddNewTaskToReadyList+0xc4>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	3301      	adds	r3, #1
 80044f6:	4a2c      	ldr	r2, [pc, #176]	; (80045a8 <prvAddNewTaskToReadyList+0xc4>)
 80044f8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80044fa:	4b2c      	ldr	r3, [pc, #176]	; (80045ac <prvAddNewTaskToReadyList+0xc8>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d109      	bne.n	8004516 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004502:	4a2a      	ldr	r2, [pc, #168]	; (80045ac <prvAddNewTaskToReadyList+0xc8>)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004508:	4b27      	ldr	r3, [pc, #156]	; (80045a8 <prvAddNewTaskToReadyList+0xc4>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	2b01      	cmp	r3, #1
 800450e:	d110      	bne.n	8004532 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004510:	f000 fc16 	bl	8004d40 <prvInitialiseTaskLists>
 8004514:	e00d      	b.n	8004532 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004516:	4b26      	ldr	r3, [pc, #152]	; (80045b0 <prvAddNewTaskToReadyList+0xcc>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d109      	bne.n	8004532 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800451e:	4b23      	ldr	r3, [pc, #140]	; (80045ac <prvAddNewTaskToReadyList+0xc8>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004528:	429a      	cmp	r2, r3
 800452a:	d802      	bhi.n	8004532 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800452c:	4a1f      	ldr	r2, [pc, #124]	; (80045ac <prvAddNewTaskToReadyList+0xc8>)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004532:	4b20      	ldr	r3, [pc, #128]	; (80045b4 <prvAddNewTaskToReadyList+0xd0>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	3301      	adds	r3, #1
 8004538:	4a1e      	ldr	r2, [pc, #120]	; (80045b4 <prvAddNewTaskToReadyList+0xd0>)
 800453a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800453c:	4b1d      	ldr	r3, [pc, #116]	; (80045b4 <prvAddNewTaskToReadyList+0xd0>)
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004548:	4b1b      	ldr	r3, [pc, #108]	; (80045b8 <prvAddNewTaskToReadyList+0xd4>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	429a      	cmp	r2, r3
 800454e:	d903      	bls.n	8004558 <prvAddNewTaskToReadyList+0x74>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004554:	4a18      	ldr	r2, [pc, #96]	; (80045b8 <prvAddNewTaskToReadyList+0xd4>)
 8004556:	6013      	str	r3, [r2, #0]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800455c:	4613      	mov	r3, r2
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	4413      	add	r3, r2
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	4a15      	ldr	r2, [pc, #84]	; (80045bc <prvAddNewTaskToReadyList+0xd8>)
 8004566:	441a      	add	r2, r3
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	3304      	adds	r3, #4
 800456c:	4619      	mov	r1, r3
 800456e:	4610      	mov	r0, r2
 8004570:	f7fe fec5 	bl	80032fe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004574:	f7ff f8a6 	bl	80036c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004578:	4b0d      	ldr	r3, [pc, #52]	; (80045b0 <prvAddNewTaskToReadyList+0xcc>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d00e      	beq.n	800459e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004580:	4b0a      	ldr	r3, [pc, #40]	; (80045ac <prvAddNewTaskToReadyList+0xc8>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800458a:	429a      	cmp	r2, r3
 800458c:	d207      	bcs.n	800459e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800458e:	4b0c      	ldr	r3, [pc, #48]	; (80045c0 <prvAddNewTaskToReadyList+0xdc>)
 8004590:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004594:	601a      	str	r2, [r3, #0]
 8004596:	f3bf 8f4f 	dsb	sy
 800459a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800459e:	bf00      	nop
 80045a0:	3708      	adds	r7, #8
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	2000484c 	.word	0x2000484c
 80045ac:	20004378 	.word	0x20004378
 80045b0:	20004858 	.word	0x20004858
 80045b4:	20004868 	.word	0x20004868
 80045b8:	20004854 	.word	0x20004854
 80045bc:	2000437c 	.word	0x2000437c
 80045c0:	e000ed04 	.word	0xe000ed04

080045c4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b084      	sub	sp, #16
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80045cc:	2300      	movs	r3, #0
 80045ce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d017      	beq.n	8004606 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80045d6:	4b13      	ldr	r3, [pc, #76]	; (8004624 <vTaskDelay+0x60>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d00a      	beq.n	80045f4 <vTaskDelay+0x30>
	__asm volatile
 80045de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e2:	f383 8811 	msr	BASEPRI, r3
 80045e6:	f3bf 8f6f 	isb	sy
 80045ea:	f3bf 8f4f 	dsb	sy
 80045ee:	60bb      	str	r3, [r7, #8]
}
 80045f0:	bf00      	nop
 80045f2:	e7fe      	b.n	80045f2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80045f4:	f000 f880 	bl	80046f8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80045f8:	2100      	movs	r1, #0
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f000 fcea 	bl	8004fd4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004600:	f000 f888 	bl	8004714 <xTaskResumeAll>
 8004604:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d107      	bne.n	800461c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800460c:	4b06      	ldr	r3, [pc, #24]	; (8004628 <vTaskDelay+0x64>)
 800460e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004612:	601a      	str	r2, [r3, #0]
 8004614:	f3bf 8f4f 	dsb	sy
 8004618:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800461c:	bf00      	nop
 800461e:	3710      	adds	r7, #16
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}
 8004624:	20004874 	.word	0x20004874
 8004628:	e000ed04 	.word	0xe000ed04

0800462c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b08a      	sub	sp, #40	; 0x28
 8004630:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004632:	2300      	movs	r3, #0
 8004634:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004636:	2300      	movs	r3, #0
 8004638:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800463a:	463a      	mov	r2, r7
 800463c:	1d39      	adds	r1, r7, #4
 800463e:	f107 0308 	add.w	r3, r7, #8
 8004642:	4618      	mov	r0, r3
 8004644:	f7fe fc10 	bl	8002e68 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004648:	6839      	ldr	r1, [r7, #0]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	68ba      	ldr	r2, [r7, #8]
 800464e:	9202      	str	r2, [sp, #8]
 8004650:	9301      	str	r3, [sp, #4]
 8004652:	2300      	movs	r3, #0
 8004654:	9300      	str	r3, [sp, #0]
 8004656:	2300      	movs	r3, #0
 8004658:	460a      	mov	r2, r1
 800465a:	4921      	ldr	r1, [pc, #132]	; (80046e0 <vTaskStartScheduler+0xb4>)
 800465c:	4821      	ldr	r0, [pc, #132]	; (80046e4 <vTaskStartScheduler+0xb8>)
 800465e:	f7ff fe0f 	bl	8004280 <xTaskCreateStatic>
 8004662:	4603      	mov	r3, r0
 8004664:	4a20      	ldr	r2, [pc, #128]	; (80046e8 <vTaskStartScheduler+0xbc>)
 8004666:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004668:	4b1f      	ldr	r3, [pc, #124]	; (80046e8 <vTaskStartScheduler+0xbc>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d002      	beq.n	8004676 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004670:	2301      	movs	r3, #1
 8004672:	617b      	str	r3, [r7, #20]
 8004674:	e001      	b.n	800467a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004676:	2300      	movs	r3, #0
 8004678:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	2b01      	cmp	r3, #1
 800467e:	d102      	bne.n	8004686 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004680:	f000 fcfc 	bl	800507c <xTimerCreateTimerTask>
 8004684:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	2b01      	cmp	r3, #1
 800468a:	d116      	bne.n	80046ba <vTaskStartScheduler+0x8e>
	__asm volatile
 800468c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004690:	f383 8811 	msr	BASEPRI, r3
 8004694:	f3bf 8f6f 	isb	sy
 8004698:	f3bf 8f4f 	dsb	sy
 800469c:	613b      	str	r3, [r7, #16]
}
 800469e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80046a0:	4b12      	ldr	r3, [pc, #72]	; (80046ec <vTaskStartScheduler+0xc0>)
 80046a2:	f04f 32ff 	mov.w	r2, #4294967295
 80046a6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80046a8:	4b11      	ldr	r3, [pc, #68]	; (80046f0 <vTaskStartScheduler+0xc4>)
 80046aa:	2201      	movs	r2, #1
 80046ac:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80046ae:	4b11      	ldr	r3, [pc, #68]	; (80046f4 <vTaskStartScheduler+0xc8>)
 80046b0:	2200      	movs	r2, #0
 80046b2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80046b4:	f7fe ff34 	bl	8003520 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80046b8:	e00e      	b.n	80046d8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046c0:	d10a      	bne.n	80046d8 <vTaskStartScheduler+0xac>
	__asm volatile
 80046c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c6:	f383 8811 	msr	BASEPRI, r3
 80046ca:	f3bf 8f6f 	isb	sy
 80046ce:	f3bf 8f4f 	dsb	sy
 80046d2:	60fb      	str	r3, [r7, #12]
}
 80046d4:	bf00      	nop
 80046d6:	e7fe      	b.n	80046d6 <vTaskStartScheduler+0xaa>
}
 80046d8:	bf00      	nop
 80046da:	3718      	adds	r7, #24
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	080064b0 	.word	0x080064b0
 80046e4:	08004d11 	.word	0x08004d11
 80046e8:	20004870 	.word	0x20004870
 80046ec:	2000486c 	.word	0x2000486c
 80046f0:	20004858 	.word	0x20004858
 80046f4:	20004850 	.word	0x20004850

080046f8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80046f8:	b480      	push	{r7}
 80046fa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80046fc:	4b04      	ldr	r3, [pc, #16]	; (8004710 <vTaskSuspendAll+0x18>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	3301      	adds	r3, #1
 8004702:	4a03      	ldr	r2, [pc, #12]	; (8004710 <vTaskSuspendAll+0x18>)
 8004704:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004706:	bf00      	nop
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr
 8004710:	20004874 	.word	0x20004874

08004714 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b084      	sub	sp, #16
 8004718:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800471a:	2300      	movs	r3, #0
 800471c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800471e:	2300      	movs	r3, #0
 8004720:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004722:	4b42      	ldr	r3, [pc, #264]	; (800482c <xTaskResumeAll+0x118>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d10a      	bne.n	8004740 <xTaskResumeAll+0x2c>
	__asm volatile
 800472a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800472e:	f383 8811 	msr	BASEPRI, r3
 8004732:	f3bf 8f6f 	isb	sy
 8004736:	f3bf 8f4f 	dsb	sy
 800473a:	603b      	str	r3, [r7, #0]
}
 800473c:	bf00      	nop
 800473e:	e7fe      	b.n	800473e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004740:	f7fe ff90 	bl	8003664 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004744:	4b39      	ldr	r3, [pc, #228]	; (800482c <xTaskResumeAll+0x118>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	3b01      	subs	r3, #1
 800474a:	4a38      	ldr	r2, [pc, #224]	; (800482c <xTaskResumeAll+0x118>)
 800474c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800474e:	4b37      	ldr	r3, [pc, #220]	; (800482c <xTaskResumeAll+0x118>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d162      	bne.n	800481c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004756:	4b36      	ldr	r3, [pc, #216]	; (8004830 <xTaskResumeAll+0x11c>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d05e      	beq.n	800481c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800475e:	e02f      	b.n	80047c0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004760:	4b34      	ldr	r3, [pc, #208]	; (8004834 <xTaskResumeAll+0x120>)
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	3318      	adds	r3, #24
 800476c:	4618      	mov	r0, r3
 800476e:	f7fe fe23 	bl	80033b8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	3304      	adds	r3, #4
 8004776:	4618      	mov	r0, r3
 8004778:	f7fe fe1e 	bl	80033b8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004780:	4b2d      	ldr	r3, [pc, #180]	; (8004838 <xTaskResumeAll+0x124>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	429a      	cmp	r2, r3
 8004786:	d903      	bls.n	8004790 <xTaskResumeAll+0x7c>
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800478c:	4a2a      	ldr	r2, [pc, #168]	; (8004838 <xTaskResumeAll+0x124>)
 800478e:	6013      	str	r3, [r2, #0]
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004794:	4613      	mov	r3, r2
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	4413      	add	r3, r2
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	4a27      	ldr	r2, [pc, #156]	; (800483c <xTaskResumeAll+0x128>)
 800479e:	441a      	add	r2, r3
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	3304      	adds	r3, #4
 80047a4:	4619      	mov	r1, r3
 80047a6:	4610      	mov	r0, r2
 80047a8:	f7fe fda9 	bl	80032fe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047b0:	4b23      	ldr	r3, [pc, #140]	; (8004840 <xTaskResumeAll+0x12c>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d302      	bcc.n	80047c0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80047ba:	4b22      	ldr	r3, [pc, #136]	; (8004844 <xTaskResumeAll+0x130>)
 80047bc:	2201      	movs	r2, #1
 80047be:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80047c0:	4b1c      	ldr	r3, [pc, #112]	; (8004834 <xTaskResumeAll+0x120>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d1cb      	bne.n	8004760 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d001      	beq.n	80047d2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80047ce:	f000 fb55 	bl	8004e7c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80047d2:	4b1d      	ldr	r3, [pc, #116]	; (8004848 <xTaskResumeAll+0x134>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d010      	beq.n	8004800 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80047de:	f000 f847 	bl	8004870 <xTaskIncrementTick>
 80047e2:	4603      	mov	r3, r0
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d002      	beq.n	80047ee <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80047e8:	4b16      	ldr	r3, [pc, #88]	; (8004844 <xTaskResumeAll+0x130>)
 80047ea:	2201      	movs	r2, #1
 80047ec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	3b01      	subs	r3, #1
 80047f2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d1f1      	bne.n	80047de <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80047fa:	4b13      	ldr	r3, [pc, #76]	; (8004848 <xTaskResumeAll+0x134>)
 80047fc:	2200      	movs	r2, #0
 80047fe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004800:	4b10      	ldr	r3, [pc, #64]	; (8004844 <xTaskResumeAll+0x130>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d009      	beq.n	800481c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004808:	2301      	movs	r3, #1
 800480a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800480c:	4b0f      	ldr	r3, [pc, #60]	; (800484c <xTaskResumeAll+0x138>)
 800480e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004812:	601a      	str	r2, [r3, #0]
 8004814:	f3bf 8f4f 	dsb	sy
 8004818:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800481c:	f7fe ff52 	bl	80036c4 <vPortExitCritical>

	return xAlreadyYielded;
 8004820:	68bb      	ldr	r3, [r7, #8]
}
 8004822:	4618      	mov	r0, r3
 8004824:	3710      	adds	r7, #16
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
 800482a:	bf00      	nop
 800482c:	20004874 	.word	0x20004874
 8004830:	2000484c 	.word	0x2000484c
 8004834:	2000480c 	.word	0x2000480c
 8004838:	20004854 	.word	0x20004854
 800483c:	2000437c 	.word	0x2000437c
 8004840:	20004378 	.word	0x20004378
 8004844:	20004860 	.word	0x20004860
 8004848:	2000485c 	.word	0x2000485c
 800484c:	e000ed04 	.word	0xe000ed04

08004850 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004850:	b480      	push	{r7}
 8004852:	b083      	sub	sp, #12
 8004854:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004856:	4b05      	ldr	r3, [pc, #20]	; (800486c <xTaskGetTickCount+0x1c>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800485c:	687b      	ldr	r3, [r7, #4]
}
 800485e:	4618      	mov	r0, r3
 8004860:	370c      	adds	r7, #12
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr
 800486a:	bf00      	nop
 800486c:	20004850 	.word	0x20004850

08004870 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b086      	sub	sp, #24
 8004874:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004876:	2300      	movs	r3, #0
 8004878:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800487a:	4b4f      	ldr	r3, [pc, #316]	; (80049b8 <xTaskIncrementTick+0x148>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	2b00      	cmp	r3, #0
 8004880:	f040 808f 	bne.w	80049a2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004884:	4b4d      	ldr	r3, [pc, #308]	; (80049bc <xTaskIncrementTick+0x14c>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	3301      	adds	r3, #1
 800488a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800488c:	4a4b      	ldr	r2, [pc, #300]	; (80049bc <xTaskIncrementTick+0x14c>)
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d120      	bne.n	80048da <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004898:	4b49      	ldr	r3, [pc, #292]	; (80049c0 <xTaskIncrementTick+0x150>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d00a      	beq.n	80048b8 <xTaskIncrementTick+0x48>
	__asm volatile
 80048a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a6:	f383 8811 	msr	BASEPRI, r3
 80048aa:	f3bf 8f6f 	isb	sy
 80048ae:	f3bf 8f4f 	dsb	sy
 80048b2:	603b      	str	r3, [r7, #0]
}
 80048b4:	bf00      	nop
 80048b6:	e7fe      	b.n	80048b6 <xTaskIncrementTick+0x46>
 80048b8:	4b41      	ldr	r3, [pc, #260]	; (80049c0 <xTaskIncrementTick+0x150>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	60fb      	str	r3, [r7, #12]
 80048be:	4b41      	ldr	r3, [pc, #260]	; (80049c4 <xTaskIncrementTick+0x154>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a3f      	ldr	r2, [pc, #252]	; (80049c0 <xTaskIncrementTick+0x150>)
 80048c4:	6013      	str	r3, [r2, #0]
 80048c6:	4a3f      	ldr	r2, [pc, #252]	; (80049c4 <xTaskIncrementTick+0x154>)
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6013      	str	r3, [r2, #0]
 80048cc:	4b3e      	ldr	r3, [pc, #248]	; (80049c8 <xTaskIncrementTick+0x158>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	3301      	adds	r3, #1
 80048d2:	4a3d      	ldr	r2, [pc, #244]	; (80049c8 <xTaskIncrementTick+0x158>)
 80048d4:	6013      	str	r3, [r2, #0]
 80048d6:	f000 fad1 	bl	8004e7c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80048da:	4b3c      	ldr	r3, [pc, #240]	; (80049cc <xTaskIncrementTick+0x15c>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	693a      	ldr	r2, [r7, #16]
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d349      	bcc.n	8004978 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80048e4:	4b36      	ldr	r3, [pc, #216]	; (80049c0 <xTaskIncrementTick+0x150>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d104      	bne.n	80048f8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048ee:	4b37      	ldr	r3, [pc, #220]	; (80049cc <xTaskIncrementTick+0x15c>)
 80048f0:	f04f 32ff 	mov.w	r2, #4294967295
 80048f4:	601a      	str	r2, [r3, #0]
					break;
 80048f6:	e03f      	b.n	8004978 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048f8:	4b31      	ldr	r3, [pc, #196]	; (80049c0 <xTaskIncrementTick+0x150>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	68db      	ldr	r3, [r3, #12]
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004908:	693a      	ldr	r2, [r7, #16]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	429a      	cmp	r2, r3
 800490e:	d203      	bcs.n	8004918 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004910:	4a2e      	ldr	r2, [pc, #184]	; (80049cc <xTaskIncrementTick+0x15c>)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004916:	e02f      	b.n	8004978 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	3304      	adds	r3, #4
 800491c:	4618      	mov	r0, r3
 800491e:	f7fe fd4b 	bl	80033b8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004926:	2b00      	cmp	r3, #0
 8004928:	d004      	beq.n	8004934 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	3318      	adds	r3, #24
 800492e:	4618      	mov	r0, r3
 8004930:	f7fe fd42 	bl	80033b8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004938:	4b25      	ldr	r3, [pc, #148]	; (80049d0 <xTaskIncrementTick+0x160>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	429a      	cmp	r2, r3
 800493e:	d903      	bls.n	8004948 <xTaskIncrementTick+0xd8>
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004944:	4a22      	ldr	r2, [pc, #136]	; (80049d0 <xTaskIncrementTick+0x160>)
 8004946:	6013      	str	r3, [r2, #0]
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800494c:	4613      	mov	r3, r2
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	4413      	add	r3, r2
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	4a1f      	ldr	r2, [pc, #124]	; (80049d4 <xTaskIncrementTick+0x164>)
 8004956:	441a      	add	r2, r3
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	3304      	adds	r3, #4
 800495c:	4619      	mov	r1, r3
 800495e:	4610      	mov	r0, r2
 8004960:	f7fe fccd 	bl	80032fe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004968:	4b1b      	ldr	r3, [pc, #108]	; (80049d8 <xTaskIncrementTick+0x168>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800496e:	429a      	cmp	r2, r3
 8004970:	d3b8      	bcc.n	80048e4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004972:	2301      	movs	r3, #1
 8004974:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004976:	e7b5      	b.n	80048e4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004978:	4b17      	ldr	r3, [pc, #92]	; (80049d8 <xTaskIncrementTick+0x168>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800497e:	4915      	ldr	r1, [pc, #84]	; (80049d4 <xTaskIncrementTick+0x164>)
 8004980:	4613      	mov	r3, r2
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	4413      	add	r3, r2
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	440b      	add	r3, r1
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	2b01      	cmp	r3, #1
 800498e:	d901      	bls.n	8004994 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004990:	2301      	movs	r3, #1
 8004992:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004994:	4b11      	ldr	r3, [pc, #68]	; (80049dc <xTaskIncrementTick+0x16c>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d007      	beq.n	80049ac <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800499c:	2301      	movs	r3, #1
 800499e:	617b      	str	r3, [r7, #20]
 80049a0:	e004      	b.n	80049ac <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80049a2:	4b0f      	ldr	r3, [pc, #60]	; (80049e0 <xTaskIncrementTick+0x170>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	3301      	adds	r3, #1
 80049a8:	4a0d      	ldr	r2, [pc, #52]	; (80049e0 <xTaskIncrementTick+0x170>)
 80049aa:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80049ac:	697b      	ldr	r3, [r7, #20]
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3718      	adds	r7, #24
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	bf00      	nop
 80049b8:	20004874 	.word	0x20004874
 80049bc:	20004850 	.word	0x20004850
 80049c0:	20004804 	.word	0x20004804
 80049c4:	20004808 	.word	0x20004808
 80049c8:	20004864 	.word	0x20004864
 80049cc:	2000486c 	.word	0x2000486c
 80049d0:	20004854 	.word	0x20004854
 80049d4:	2000437c 	.word	0x2000437c
 80049d8:	20004378 	.word	0x20004378
 80049dc:	20004860 	.word	0x20004860
 80049e0:	2000485c 	.word	0x2000485c

080049e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80049e4:	b480      	push	{r7}
 80049e6:	b085      	sub	sp, #20
 80049e8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80049ea:	4b28      	ldr	r3, [pc, #160]	; (8004a8c <vTaskSwitchContext+0xa8>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d003      	beq.n	80049fa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80049f2:	4b27      	ldr	r3, [pc, #156]	; (8004a90 <vTaskSwitchContext+0xac>)
 80049f4:	2201      	movs	r2, #1
 80049f6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80049f8:	e041      	b.n	8004a7e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80049fa:	4b25      	ldr	r3, [pc, #148]	; (8004a90 <vTaskSwitchContext+0xac>)
 80049fc:	2200      	movs	r2, #0
 80049fe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a00:	4b24      	ldr	r3, [pc, #144]	; (8004a94 <vTaskSwitchContext+0xb0>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	60fb      	str	r3, [r7, #12]
 8004a06:	e010      	b.n	8004a2a <vTaskSwitchContext+0x46>
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d10a      	bne.n	8004a24 <vTaskSwitchContext+0x40>
	__asm volatile
 8004a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a12:	f383 8811 	msr	BASEPRI, r3
 8004a16:	f3bf 8f6f 	isb	sy
 8004a1a:	f3bf 8f4f 	dsb	sy
 8004a1e:	607b      	str	r3, [r7, #4]
}
 8004a20:	bf00      	nop
 8004a22:	e7fe      	b.n	8004a22 <vTaskSwitchContext+0x3e>
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	3b01      	subs	r3, #1
 8004a28:	60fb      	str	r3, [r7, #12]
 8004a2a:	491b      	ldr	r1, [pc, #108]	; (8004a98 <vTaskSwitchContext+0xb4>)
 8004a2c:	68fa      	ldr	r2, [r7, #12]
 8004a2e:	4613      	mov	r3, r2
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	4413      	add	r3, r2
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	440b      	add	r3, r1
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d0e4      	beq.n	8004a08 <vTaskSwitchContext+0x24>
 8004a3e:	68fa      	ldr	r2, [r7, #12]
 8004a40:	4613      	mov	r3, r2
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	4413      	add	r3, r2
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	4a13      	ldr	r2, [pc, #76]	; (8004a98 <vTaskSwitchContext+0xb4>)
 8004a4a:	4413      	add	r3, r2
 8004a4c:	60bb      	str	r3, [r7, #8]
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	685a      	ldr	r2, [r3, #4]
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	605a      	str	r2, [r3, #4]
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	685a      	ldr	r2, [r3, #4]
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	3308      	adds	r3, #8
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d104      	bne.n	8004a6e <vTaskSwitchContext+0x8a>
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	685a      	ldr	r2, [r3, #4]
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	605a      	str	r2, [r3, #4]
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	4a09      	ldr	r2, [pc, #36]	; (8004a9c <vTaskSwitchContext+0xb8>)
 8004a76:	6013      	str	r3, [r2, #0]
 8004a78:	4a06      	ldr	r2, [pc, #24]	; (8004a94 <vTaskSwitchContext+0xb0>)
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	6013      	str	r3, [r2, #0]
}
 8004a7e:	bf00      	nop
 8004a80:	3714      	adds	r7, #20
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr
 8004a8a:	bf00      	nop
 8004a8c:	20004874 	.word	0x20004874
 8004a90:	20004860 	.word	0x20004860
 8004a94:	20004854 	.word	0x20004854
 8004a98:	2000437c 	.word	0x2000437c
 8004a9c:	20004378 	.word	0x20004378

08004aa0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b084      	sub	sp, #16
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d10a      	bne.n	8004ac6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab4:	f383 8811 	msr	BASEPRI, r3
 8004ab8:	f3bf 8f6f 	isb	sy
 8004abc:	f3bf 8f4f 	dsb	sy
 8004ac0:	60fb      	str	r3, [r7, #12]
}
 8004ac2:	bf00      	nop
 8004ac4:	e7fe      	b.n	8004ac4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004ac6:	4b07      	ldr	r3, [pc, #28]	; (8004ae4 <vTaskPlaceOnEventList+0x44>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	3318      	adds	r3, #24
 8004acc:	4619      	mov	r1, r3
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f7fe fc39 	bl	8003346 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004ad4:	2101      	movs	r1, #1
 8004ad6:	6838      	ldr	r0, [r7, #0]
 8004ad8:	f000 fa7c 	bl	8004fd4 <prvAddCurrentTaskToDelayedList>
}
 8004adc:	bf00      	nop
 8004ade:	3710      	adds	r7, #16
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}
 8004ae4:	20004378 	.word	0x20004378

08004ae8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b086      	sub	sp, #24
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	60b9      	str	r1, [r7, #8]
 8004af2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d10a      	bne.n	8004b10 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004afe:	f383 8811 	msr	BASEPRI, r3
 8004b02:	f3bf 8f6f 	isb	sy
 8004b06:	f3bf 8f4f 	dsb	sy
 8004b0a:	617b      	str	r3, [r7, #20]
}
 8004b0c:	bf00      	nop
 8004b0e:	e7fe      	b.n	8004b0e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004b10:	4b0a      	ldr	r3, [pc, #40]	; (8004b3c <vTaskPlaceOnEventListRestricted+0x54>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	3318      	adds	r3, #24
 8004b16:	4619      	mov	r1, r3
 8004b18:	68f8      	ldr	r0, [r7, #12]
 8004b1a:	f7fe fbf0 	bl	80032fe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d002      	beq.n	8004b2a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004b24:	f04f 33ff 	mov.w	r3, #4294967295
 8004b28:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004b2a:	6879      	ldr	r1, [r7, #4]
 8004b2c:	68b8      	ldr	r0, [r7, #8]
 8004b2e:	f000 fa51 	bl	8004fd4 <prvAddCurrentTaskToDelayedList>
	}
 8004b32:	bf00      	nop
 8004b34:	3718      	adds	r7, #24
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}
 8004b3a:	bf00      	nop
 8004b3c:	20004378 	.word	0x20004378

08004b40 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b086      	sub	sp, #24
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	68db      	ldr	r3, [r3, #12]
 8004b4c:	68db      	ldr	r3, [r3, #12]
 8004b4e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d10a      	bne.n	8004b6c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004b56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b5a:	f383 8811 	msr	BASEPRI, r3
 8004b5e:	f3bf 8f6f 	isb	sy
 8004b62:	f3bf 8f4f 	dsb	sy
 8004b66:	60fb      	str	r3, [r7, #12]
}
 8004b68:	bf00      	nop
 8004b6a:	e7fe      	b.n	8004b6a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	3318      	adds	r3, #24
 8004b70:	4618      	mov	r0, r3
 8004b72:	f7fe fc21 	bl	80033b8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b76:	4b1e      	ldr	r3, [pc, #120]	; (8004bf0 <xTaskRemoveFromEventList+0xb0>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d11d      	bne.n	8004bba <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	3304      	adds	r3, #4
 8004b82:	4618      	mov	r0, r3
 8004b84:	f7fe fc18 	bl	80033b8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b8c:	4b19      	ldr	r3, [pc, #100]	; (8004bf4 <xTaskRemoveFromEventList+0xb4>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	429a      	cmp	r2, r3
 8004b92:	d903      	bls.n	8004b9c <xTaskRemoveFromEventList+0x5c>
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b98:	4a16      	ldr	r2, [pc, #88]	; (8004bf4 <xTaskRemoveFromEventList+0xb4>)
 8004b9a:	6013      	str	r3, [r2, #0]
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ba0:	4613      	mov	r3, r2
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	4413      	add	r3, r2
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	4a13      	ldr	r2, [pc, #76]	; (8004bf8 <xTaskRemoveFromEventList+0xb8>)
 8004baa:	441a      	add	r2, r3
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	3304      	adds	r3, #4
 8004bb0:	4619      	mov	r1, r3
 8004bb2:	4610      	mov	r0, r2
 8004bb4:	f7fe fba3 	bl	80032fe <vListInsertEnd>
 8004bb8:	e005      	b.n	8004bc6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	3318      	adds	r3, #24
 8004bbe:	4619      	mov	r1, r3
 8004bc0:	480e      	ldr	r0, [pc, #56]	; (8004bfc <xTaskRemoveFromEventList+0xbc>)
 8004bc2:	f7fe fb9c 	bl	80032fe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bca:	4b0d      	ldr	r3, [pc, #52]	; (8004c00 <xTaskRemoveFromEventList+0xc0>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d905      	bls.n	8004be0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004bd8:	4b0a      	ldr	r3, [pc, #40]	; (8004c04 <xTaskRemoveFromEventList+0xc4>)
 8004bda:	2201      	movs	r2, #1
 8004bdc:	601a      	str	r2, [r3, #0]
 8004bde:	e001      	b.n	8004be4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004be0:	2300      	movs	r3, #0
 8004be2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004be4:	697b      	ldr	r3, [r7, #20]
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3718      	adds	r7, #24
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}
 8004bee:	bf00      	nop
 8004bf0:	20004874 	.word	0x20004874
 8004bf4:	20004854 	.word	0x20004854
 8004bf8:	2000437c 	.word	0x2000437c
 8004bfc:	2000480c 	.word	0x2000480c
 8004c00:	20004378 	.word	0x20004378
 8004c04:	20004860 	.word	0x20004860

08004c08 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b083      	sub	sp, #12
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004c10:	4b06      	ldr	r3, [pc, #24]	; (8004c2c <vTaskInternalSetTimeOutState+0x24>)
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004c18:	4b05      	ldr	r3, [pc, #20]	; (8004c30 <vTaskInternalSetTimeOutState+0x28>)
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	605a      	str	r2, [r3, #4]
}
 8004c20:	bf00      	nop
 8004c22:	370c      	adds	r7, #12
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr
 8004c2c:	20004864 	.word	0x20004864
 8004c30:	20004850 	.word	0x20004850

08004c34 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b088      	sub	sp, #32
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
 8004c3c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d10a      	bne.n	8004c5a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c48:	f383 8811 	msr	BASEPRI, r3
 8004c4c:	f3bf 8f6f 	isb	sy
 8004c50:	f3bf 8f4f 	dsb	sy
 8004c54:	613b      	str	r3, [r7, #16]
}
 8004c56:	bf00      	nop
 8004c58:	e7fe      	b.n	8004c58 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d10a      	bne.n	8004c76 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c64:	f383 8811 	msr	BASEPRI, r3
 8004c68:	f3bf 8f6f 	isb	sy
 8004c6c:	f3bf 8f4f 	dsb	sy
 8004c70:	60fb      	str	r3, [r7, #12]
}
 8004c72:	bf00      	nop
 8004c74:	e7fe      	b.n	8004c74 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004c76:	f7fe fcf5 	bl	8003664 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004c7a:	4b1d      	ldr	r3, [pc, #116]	; (8004cf0 <xTaskCheckForTimeOut+0xbc>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	69ba      	ldr	r2, [r7, #24]
 8004c86:	1ad3      	subs	r3, r2, r3
 8004c88:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c92:	d102      	bne.n	8004c9a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004c94:	2300      	movs	r3, #0
 8004c96:	61fb      	str	r3, [r7, #28]
 8004c98:	e023      	b.n	8004ce2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	4b15      	ldr	r3, [pc, #84]	; (8004cf4 <xTaskCheckForTimeOut+0xc0>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d007      	beq.n	8004cb6 <xTaskCheckForTimeOut+0x82>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	69ba      	ldr	r2, [r7, #24]
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d302      	bcc.n	8004cb6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	61fb      	str	r3, [r7, #28]
 8004cb4:	e015      	b.n	8004ce2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	697a      	ldr	r2, [r7, #20]
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d20b      	bcs.n	8004cd8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	1ad2      	subs	r2, r2, r3
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f7ff ff9b 	bl	8004c08 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	61fb      	str	r3, [r7, #28]
 8004cd6:	e004      	b.n	8004ce2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004ce2:	f7fe fcef 	bl	80036c4 <vPortExitCritical>

	return xReturn;
 8004ce6:	69fb      	ldr	r3, [r7, #28]
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3720      	adds	r7, #32
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}
 8004cf0:	20004850 	.word	0x20004850
 8004cf4:	20004864 	.word	0x20004864

08004cf8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004cfc:	4b03      	ldr	r3, [pc, #12]	; (8004d0c <vTaskMissedYield+0x14>)
 8004cfe:	2201      	movs	r2, #1
 8004d00:	601a      	str	r2, [r3, #0]
}
 8004d02:	bf00      	nop
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr
 8004d0c:	20004860 	.word	0x20004860

08004d10 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b082      	sub	sp, #8
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004d18:	f000 f852 	bl	8004dc0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004d1c:	4b06      	ldr	r3, [pc, #24]	; (8004d38 <prvIdleTask+0x28>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d9f9      	bls.n	8004d18 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004d24:	4b05      	ldr	r3, [pc, #20]	; (8004d3c <prvIdleTask+0x2c>)
 8004d26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d2a:	601a      	str	r2, [r3, #0]
 8004d2c:	f3bf 8f4f 	dsb	sy
 8004d30:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004d34:	e7f0      	b.n	8004d18 <prvIdleTask+0x8>
 8004d36:	bf00      	nop
 8004d38:	2000437c 	.word	0x2000437c
 8004d3c:	e000ed04 	.word	0xe000ed04

08004d40 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b082      	sub	sp, #8
 8004d44:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004d46:	2300      	movs	r3, #0
 8004d48:	607b      	str	r3, [r7, #4]
 8004d4a:	e00c      	b.n	8004d66 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004d4c:	687a      	ldr	r2, [r7, #4]
 8004d4e:	4613      	mov	r3, r2
 8004d50:	009b      	lsls	r3, r3, #2
 8004d52:	4413      	add	r3, r2
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	4a12      	ldr	r2, [pc, #72]	; (8004da0 <prvInitialiseTaskLists+0x60>)
 8004d58:	4413      	add	r3, r2
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f7fe faa2 	bl	80032a4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	3301      	adds	r3, #1
 8004d64:	607b      	str	r3, [r7, #4]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2b37      	cmp	r3, #55	; 0x37
 8004d6a:	d9ef      	bls.n	8004d4c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004d6c:	480d      	ldr	r0, [pc, #52]	; (8004da4 <prvInitialiseTaskLists+0x64>)
 8004d6e:	f7fe fa99 	bl	80032a4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004d72:	480d      	ldr	r0, [pc, #52]	; (8004da8 <prvInitialiseTaskLists+0x68>)
 8004d74:	f7fe fa96 	bl	80032a4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004d78:	480c      	ldr	r0, [pc, #48]	; (8004dac <prvInitialiseTaskLists+0x6c>)
 8004d7a:	f7fe fa93 	bl	80032a4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004d7e:	480c      	ldr	r0, [pc, #48]	; (8004db0 <prvInitialiseTaskLists+0x70>)
 8004d80:	f7fe fa90 	bl	80032a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004d84:	480b      	ldr	r0, [pc, #44]	; (8004db4 <prvInitialiseTaskLists+0x74>)
 8004d86:	f7fe fa8d 	bl	80032a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004d8a:	4b0b      	ldr	r3, [pc, #44]	; (8004db8 <prvInitialiseTaskLists+0x78>)
 8004d8c:	4a05      	ldr	r2, [pc, #20]	; (8004da4 <prvInitialiseTaskLists+0x64>)
 8004d8e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004d90:	4b0a      	ldr	r3, [pc, #40]	; (8004dbc <prvInitialiseTaskLists+0x7c>)
 8004d92:	4a05      	ldr	r2, [pc, #20]	; (8004da8 <prvInitialiseTaskLists+0x68>)
 8004d94:	601a      	str	r2, [r3, #0]
}
 8004d96:	bf00      	nop
 8004d98:	3708      	adds	r7, #8
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	bf00      	nop
 8004da0:	2000437c 	.word	0x2000437c
 8004da4:	200047dc 	.word	0x200047dc
 8004da8:	200047f0 	.word	0x200047f0
 8004dac:	2000480c 	.word	0x2000480c
 8004db0:	20004820 	.word	0x20004820
 8004db4:	20004838 	.word	0x20004838
 8004db8:	20004804 	.word	0x20004804
 8004dbc:	20004808 	.word	0x20004808

08004dc0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b082      	sub	sp, #8
 8004dc4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004dc6:	e019      	b.n	8004dfc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004dc8:	f7fe fc4c 	bl	8003664 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004dcc:	4b10      	ldr	r3, [pc, #64]	; (8004e10 <prvCheckTasksWaitingTermination+0x50>)
 8004dce:	68db      	ldr	r3, [r3, #12]
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	3304      	adds	r3, #4
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f7fe faed 	bl	80033b8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004dde:	4b0d      	ldr	r3, [pc, #52]	; (8004e14 <prvCheckTasksWaitingTermination+0x54>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	3b01      	subs	r3, #1
 8004de4:	4a0b      	ldr	r2, [pc, #44]	; (8004e14 <prvCheckTasksWaitingTermination+0x54>)
 8004de6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004de8:	4b0b      	ldr	r3, [pc, #44]	; (8004e18 <prvCheckTasksWaitingTermination+0x58>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	3b01      	subs	r3, #1
 8004dee:	4a0a      	ldr	r2, [pc, #40]	; (8004e18 <prvCheckTasksWaitingTermination+0x58>)
 8004df0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004df2:	f7fe fc67 	bl	80036c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f000 f810 	bl	8004e1c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004dfc:	4b06      	ldr	r3, [pc, #24]	; (8004e18 <prvCheckTasksWaitingTermination+0x58>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d1e1      	bne.n	8004dc8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004e04:	bf00      	nop
 8004e06:	bf00      	nop
 8004e08:	3708      	adds	r7, #8
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	bf00      	nop
 8004e10:	20004820 	.word	0x20004820
 8004e14:	2000484c 	.word	0x2000484c
 8004e18:	20004834 	.word	0x20004834

08004e1c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b084      	sub	sp, #16
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d108      	bne.n	8004e40 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e32:	4618      	mov	r0, r3
 8004e34:	f7fe f918 	bl	8003068 <vPortFree>
				vPortFree( pxTCB );
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f7fe f915 	bl	8003068 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004e3e:	e018      	b.n	8004e72 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d103      	bne.n	8004e52 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f7fe f90c 	bl	8003068 <vPortFree>
	}
 8004e50:	e00f      	b.n	8004e72 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004e58:	2b02      	cmp	r3, #2
 8004e5a:	d00a      	beq.n	8004e72 <prvDeleteTCB+0x56>
	__asm volatile
 8004e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e60:	f383 8811 	msr	BASEPRI, r3
 8004e64:	f3bf 8f6f 	isb	sy
 8004e68:	f3bf 8f4f 	dsb	sy
 8004e6c:	60fb      	str	r3, [r7, #12]
}
 8004e6e:	bf00      	nop
 8004e70:	e7fe      	b.n	8004e70 <prvDeleteTCB+0x54>
	}
 8004e72:	bf00      	nop
 8004e74:	3710      	adds	r7, #16
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
	...

08004e7c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b083      	sub	sp, #12
 8004e80:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e82:	4b0c      	ldr	r3, [pc, #48]	; (8004eb4 <prvResetNextTaskUnblockTime+0x38>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d104      	bne.n	8004e96 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004e8c:	4b0a      	ldr	r3, [pc, #40]	; (8004eb8 <prvResetNextTaskUnblockTime+0x3c>)
 8004e8e:	f04f 32ff 	mov.w	r2, #4294967295
 8004e92:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004e94:	e008      	b.n	8004ea8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e96:	4b07      	ldr	r3, [pc, #28]	; (8004eb4 <prvResetNextTaskUnblockTime+0x38>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	68db      	ldr	r3, [r3, #12]
 8004e9c:	68db      	ldr	r3, [r3, #12]
 8004e9e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	4a04      	ldr	r2, [pc, #16]	; (8004eb8 <prvResetNextTaskUnblockTime+0x3c>)
 8004ea6:	6013      	str	r3, [r2, #0]
}
 8004ea8:	bf00      	nop
 8004eaa:	370c      	adds	r7, #12
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr
 8004eb4:	20004804 	.word	0x20004804
 8004eb8:	2000486c 	.word	0x2000486c

08004ebc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b083      	sub	sp, #12
 8004ec0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004ec2:	4b0b      	ldr	r3, [pc, #44]	; (8004ef0 <xTaskGetSchedulerState+0x34>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d102      	bne.n	8004ed0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	607b      	str	r3, [r7, #4]
 8004ece:	e008      	b.n	8004ee2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ed0:	4b08      	ldr	r3, [pc, #32]	; (8004ef4 <xTaskGetSchedulerState+0x38>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d102      	bne.n	8004ede <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004ed8:	2302      	movs	r3, #2
 8004eda:	607b      	str	r3, [r7, #4]
 8004edc:	e001      	b.n	8004ee2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004ee2:	687b      	ldr	r3, [r7, #4]
	}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	370c      	adds	r7, #12
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	4770      	bx	lr
 8004ef0:	20004858 	.word	0x20004858
 8004ef4:	20004874 	.word	0x20004874

08004ef8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b086      	sub	sp, #24
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004f04:	2300      	movs	r3, #0
 8004f06:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d056      	beq.n	8004fbc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004f0e:	4b2e      	ldr	r3, [pc, #184]	; (8004fc8 <xTaskPriorityDisinherit+0xd0>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	693a      	ldr	r2, [r7, #16]
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d00a      	beq.n	8004f2e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f1c:	f383 8811 	msr	BASEPRI, r3
 8004f20:	f3bf 8f6f 	isb	sy
 8004f24:	f3bf 8f4f 	dsb	sy
 8004f28:	60fb      	str	r3, [r7, #12]
}
 8004f2a:	bf00      	nop
 8004f2c:	e7fe      	b.n	8004f2c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d10a      	bne.n	8004f4c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f3a:	f383 8811 	msr	BASEPRI, r3
 8004f3e:	f3bf 8f6f 	isb	sy
 8004f42:	f3bf 8f4f 	dsb	sy
 8004f46:	60bb      	str	r3, [r7, #8]
}
 8004f48:	bf00      	nop
 8004f4a:	e7fe      	b.n	8004f4a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f50:	1e5a      	subs	r2, r3, #1
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d02c      	beq.n	8004fbc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d128      	bne.n	8004fbc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	3304      	adds	r3, #4
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f7fe fa22 	bl	80033b8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f80:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f8c:	4b0f      	ldr	r3, [pc, #60]	; (8004fcc <xTaskPriorityDisinherit+0xd4>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d903      	bls.n	8004f9c <xTaskPriorityDisinherit+0xa4>
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f98:	4a0c      	ldr	r2, [pc, #48]	; (8004fcc <xTaskPriorityDisinherit+0xd4>)
 8004f9a:	6013      	str	r3, [r2, #0]
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fa0:	4613      	mov	r3, r2
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	4413      	add	r3, r2
 8004fa6:	009b      	lsls	r3, r3, #2
 8004fa8:	4a09      	ldr	r2, [pc, #36]	; (8004fd0 <xTaskPriorityDisinherit+0xd8>)
 8004faa:	441a      	add	r2, r3
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	3304      	adds	r3, #4
 8004fb0:	4619      	mov	r1, r3
 8004fb2:	4610      	mov	r0, r2
 8004fb4:	f7fe f9a3 	bl	80032fe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004fbc:	697b      	ldr	r3, [r7, #20]
	}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3718      	adds	r7, #24
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
 8004fc6:	bf00      	nop
 8004fc8:	20004378 	.word	0x20004378
 8004fcc:	20004854 	.word	0x20004854
 8004fd0:	2000437c 	.word	0x2000437c

08004fd4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b084      	sub	sp, #16
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004fde:	4b21      	ldr	r3, [pc, #132]	; (8005064 <prvAddCurrentTaskToDelayedList+0x90>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004fe4:	4b20      	ldr	r3, [pc, #128]	; (8005068 <prvAddCurrentTaskToDelayedList+0x94>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	3304      	adds	r3, #4
 8004fea:	4618      	mov	r0, r3
 8004fec:	f7fe f9e4 	bl	80033b8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ff6:	d10a      	bne.n	800500e <prvAddCurrentTaskToDelayedList+0x3a>
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d007      	beq.n	800500e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ffe:	4b1a      	ldr	r3, [pc, #104]	; (8005068 <prvAddCurrentTaskToDelayedList+0x94>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	3304      	adds	r3, #4
 8005004:	4619      	mov	r1, r3
 8005006:	4819      	ldr	r0, [pc, #100]	; (800506c <prvAddCurrentTaskToDelayedList+0x98>)
 8005008:	f7fe f979 	bl	80032fe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800500c:	e026      	b.n	800505c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800500e:	68fa      	ldr	r2, [r7, #12]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	4413      	add	r3, r2
 8005014:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005016:	4b14      	ldr	r3, [pc, #80]	; (8005068 <prvAddCurrentTaskToDelayedList+0x94>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	68ba      	ldr	r2, [r7, #8]
 800501c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800501e:	68ba      	ldr	r2, [r7, #8]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	429a      	cmp	r2, r3
 8005024:	d209      	bcs.n	800503a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005026:	4b12      	ldr	r3, [pc, #72]	; (8005070 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	4b0f      	ldr	r3, [pc, #60]	; (8005068 <prvAddCurrentTaskToDelayedList+0x94>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	3304      	adds	r3, #4
 8005030:	4619      	mov	r1, r3
 8005032:	4610      	mov	r0, r2
 8005034:	f7fe f987 	bl	8003346 <vListInsert>
}
 8005038:	e010      	b.n	800505c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800503a:	4b0e      	ldr	r3, [pc, #56]	; (8005074 <prvAddCurrentTaskToDelayedList+0xa0>)
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	4b0a      	ldr	r3, [pc, #40]	; (8005068 <prvAddCurrentTaskToDelayedList+0x94>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	3304      	adds	r3, #4
 8005044:	4619      	mov	r1, r3
 8005046:	4610      	mov	r0, r2
 8005048:	f7fe f97d 	bl	8003346 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800504c:	4b0a      	ldr	r3, [pc, #40]	; (8005078 <prvAddCurrentTaskToDelayedList+0xa4>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	68ba      	ldr	r2, [r7, #8]
 8005052:	429a      	cmp	r2, r3
 8005054:	d202      	bcs.n	800505c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005056:	4a08      	ldr	r2, [pc, #32]	; (8005078 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	6013      	str	r3, [r2, #0]
}
 800505c:	bf00      	nop
 800505e:	3710      	adds	r7, #16
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}
 8005064:	20004850 	.word	0x20004850
 8005068:	20004378 	.word	0x20004378
 800506c:	20004838 	.word	0x20004838
 8005070:	20004808 	.word	0x20004808
 8005074:	20004804 	.word	0x20004804
 8005078:	2000486c 	.word	0x2000486c

0800507c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b08a      	sub	sp, #40	; 0x28
 8005080:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005082:	2300      	movs	r3, #0
 8005084:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005086:	f000 fb07 	bl	8005698 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800508a:	4b1c      	ldr	r3, [pc, #112]	; (80050fc <xTimerCreateTimerTask+0x80>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d021      	beq.n	80050d6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005092:	2300      	movs	r3, #0
 8005094:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005096:	2300      	movs	r3, #0
 8005098:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800509a:	1d3a      	adds	r2, r7, #4
 800509c:	f107 0108 	add.w	r1, r7, #8
 80050a0:	f107 030c 	add.w	r3, r7, #12
 80050a4:	4618      	mov	r0, r3
 80050a6:	f7fd fef9 	bl	8002e9c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80050aa:	6879      	ldr	r1, [r7, #4]
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	68fa      	ldr	r2, [r7, #12]
 80050b0:	9202      	str	r2, [sp, #8]
 80050b2:	9301      	str	r3, [sp, #4]
 80050b4:	2302      	movs	r3, #2
 80050b6:	9300      	str	r3, [sp, #0]
 80050b8:	2300      	movs	r3, #0
 80050ba:	460a      	mov	r2, r1
 80050bc:	4910      	ldr	r1, [pc, #64]	; (8005100 <xTimerCreateTimerTask+0x84>)
 80050be:	4811      	ldr	r0, [pc, #68]	; (8005104 <xTimerCreateTimerTask+0x88>)
 80050c0:	f7ff f8de 	bl	8004280 <xTaskCreateStatic>
 80050c4:	4603      	mov	r3, r0
 80050c6:	4a10      	ldr	r2, [pc, #64]	; (8005108 <xTimerCreateTimerTask+0x8c>)
 80050c8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80050ca:	4b0f      	ldr	r3, [pc, #60]	; (8005108 <xTimerCreateTimerTask+0x8c>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d001      	beq.n	80050d6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80050d2:	2301      	movs	r3, #1
 80050d4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d10a      	bne.n	80050f2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80050dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e0:	f383 8811 	msr	BASEPRI, r3
 80050e4:	f3bf 8f6f 	isb	sy
 80050e8:	f3bf 8f4f 	dsb	sy
 80050ec:	613b      	str	r3, [r7, #16]
}
 80050ee:	bf00      	nop
 80050f0:	e7fe      	b.n	80050f0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80050f2:	697b      	ldr	r3, [r7, #20]
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3718      	adds	r7, #24
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}
 80050fc:	200048a8 	.word	0x200048a8
 8005100:	080064b8 	.word	0x080064b8
 8005104:	08005241 	.word	0x08005241
 8005108:	200048ac 	.word	0x200048ac

0800510c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b08a      	sub	sp, #40	; 0x28
 8005110:	af00      	add	r7, sp, #0
 8005112:	60f8      	str	r0, [r7, #12]
 8005114:	60b9      	str	r1, [r7, #8]
 8005116:	607a      	str	r2, [r7, #4]
 8005118:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800511a:	2300      	movs	r3, #0
 800511c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d10a      	bne.n	800513a <xTimerGenericCommand+0x2e>
	__asm volatile
 8005124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005128:	f383 8811 	msr	BASEPRI, r3
 800512c:	f3bf 8f6f 	isb	sy
 8005130:	f3bf 8f4f 	dsb	sy
 8005134:	623b      	str	r3, [r7, #32]
}
 8005136:	bf00      	nop
 8005138:	e7fe      	b.n	8005138 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800513a:	4b1a      	ldr	r3, [pc, #104]	; (80051a4 <xTimerGenericCommand+0x98>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d02a      	beq.n	8005198 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	2b05      	cmp	r3, #5
 8005152:	dc18      	bgt.n	8005186 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005154:	f7ff feb2 	bl	8004ebc <xTaskGetSchedulerState>
 8005158:	4603      	mov	r3, r0
 800515a:	2b02      	cmp	r3, #2
 800515c:	d109      	bne.n	8005172 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800515e:	4b11      	ldr	r3, [pc, #68]	; (80051a4 <xTimerGenericCommand+0x98>)
 8005160:	6818      	ldr	r0, [r3, #0]
 8005162:	f107 0110 	add.w	r1, r7, #16
 8005166:	2300      	movs	r3, #0
 8005168:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800516a:	f7fe fca1 	bl	8003ab0 <xQueueGenericSend>
 800516e:	6278      	str	r0, [r7, #36]	; 0x24
 8005170:	e012      	b.n	8005198 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005172:	4b0c      	ldr	r3, [pc, #48]	; (80051a4 <xTimerGenericCommand+0x98>)
 8005174:	6818      	ldr	r0, [r3, #0]
 8005176:	f107 0110 	add.w	r1, r7, #16
 800517a:	2300      	movs	r3, #0
 800517c:	2200      	movs	r2, #0
 800517e:	f7fe fc97 	bl	8003ab0 <xQueueGenericSend>
 8005182:	6278      	str	r0, [r7, #36]	; 0x24
 8005184:	e008      	b.n	8005198 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005186:	4b07      	ldr	r3, [pc, #28]	; (80051a4 <xTimerGenericCommand+0x98>)
 8005188:	6818      	ldr	r0, [r3, #0]
 800518a:	f107 0110 	add.w	r1, r7, #16
 800518e:	2300      	movs	r3, #0
 8005190:	683a      	ldr	r2, [r7, #0]
 8005192:	f7fe fd8b 	bl	8003cac <xQueueGenericSendFromISR>
 8005196:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800519a:	4618      	mov	r0, r3
 800519c:	3728      	adds	r7, #40	; 0x28
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}
 80051a2:	bf00      	nop
 80051a4:	200048a8 	.word	0x200048a8

080051a8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b088      	sub	sp, #32
 80051ac:	af02      	add	r7, sp, #8
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051b2:	4b22      	ldr	r3, [pc, #136]	; (800523c <prvProcessExpiredTimer+0x94>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	68db      	ldr	r3, [r3, #12]
 80051b8:	68db      	ldr	r3, [r3, #12]
 80051ba:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	3304      	adds	r3, #4
 80051c0:	4618      	mov	r0, r3
 80051c2:	f7fe f8f9 	bl	80033b8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80051cc:	f003 0304 	and.w	r3, r3, #4
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d022      	beq.n	800521a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	699a      	ldr	r2, [r3, #24]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	18d1      	adds	r1, r2, r3
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	683a      	ldr	r2, [r7, #0]
 80051e0:	6978      	ldr	r0, [r7, #20]
 80051e2:	f000 f8d1 	bl	8005388 <prvInsertTimerInActiveList>
 80051e6:	4603      	mov	r3, r0
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d01f      	beq.n	800522c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80051ec:	2300      	movs	r3, #0
 80051ee:	9300      	str	r3, [sp, #0]
 80051f0:	2300      	movs	r3, #0
 80051f2:	687a      	ldr	r2, [r7, #4]
 80051f4:	2100      	movs	r1, #0
 80051f6:	6978      	ldr	r0, [r7, #20]
 80051f8:	f7ff ff88 	bl	800510c <xTimerGenericCommand>
 80051fc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d113      	bne.n	800522c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005208:	f383 8811 	msr	BASEPRI, r3
 800520c:	f3bf 8f6f 	isb	sy
 8005210:	f3bf 8f4f 	dsb	sy
 8005214:	60fb      	str	r3, [r7, #12]
}
 8005216:	bf00      	nop
 8005218:	e7fe      	b.n	8005218 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005220:	f023 0301 	bic.w	r3, r3, #1
 8005224:	b2da      	uxtb	r2, r3
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	6a1b      	ldr	r3, [r3, #32]
 8005230:	6978      	ldr	r0, [r7, #20]
 8005232:	4798      	blx	r3
}
 8005234:	bf00      	nop
 8005236:	3718      	adds	r7, #24
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}
 800523c:	200048a0 	.word	0x200048a0

08005240 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b084      	sub	sp, #16
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005248:	f107 0308 	add.w	r3, r7, #8
 800524c:	4618      	mov	r0, r3
 800524e:	f000 f857 	bl	8005300 <prvGetNextExpireTime>
 8005252:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	4619      	mov	r1, r3
 8005258:	68f8      	ldr	r0, [r7, #12]
 800525a:	f000 f803 	bl	8005264 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800525e:	f000 f8d5 	bl	800540c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005262:	e7f1      	b.n	8005248 <prvTimerTask+0x8>

08005264 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b084      	sub	sp, #16
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800526e:	f7ff fa43 	bl	80046f8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005272:	f107 0308 	add.w	r3, r7, #8
 8005276:	4618      	mov	r0, r3
 8005278:	f000 f866 	bl	8005348 <prvSampleTimeNow>
 800527c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d130      	bne.n	80052e6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d10a      	bne.n	80052a0 <prvProcessTimerOrBlockTask+0x3c>
 800528a:	687a      	ldr	r2, [r7, #4]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	429a      	cmp	r2, r3
 8005290:	d806      	bhi.n	80052a0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005292:	f7ff fa3f 	bl	8004714 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005296:	68f9      	ldr	r1, [r7, #12]
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	f7ff ff85 	bl	80051a8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800529e:	e024      	b.n	80052ea <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d008      	beq.n	80052b8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80052a6:	4b13      	ldr	r3, [pc, #76]	; (80052f4 <prvProcessTimerOrBlockTask+0x90>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d101      	bne.n	80052b4 <prvProcessTimerOrBlockTask+0x50>
 80052b0:	2301      	movs	r3, #1
 80052b2:	e000      	b.n	80052b6 <prvProcessTimerOrBlockTask+0x52>
 80052b4:	2300      	movs	r3, #0
 80052b6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80052b8:	4b0f      	ldr	r3, [pc, #60]	; (80052f8 <prvProcessTimerOrBlockTask+0x94>)
 80052ba:	6818      	ldr	r0, [r3, #0]
 80052bc:	687a      	ldr	r2, [r7, #4]
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	683a      	ldr	r2, [r7, #0]
 80052c4:	4619      	mov	r1, r3
 80052c6:	f7fe ffa7 	bl	8004218 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80052ca:	f7ff fa23 	bl	8004714 <xTaskResumeAll>
 80052ce:	4603      	mov	r3, r0
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d10a      	bne.n	80052ea <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80052d4:	4b09      	ldr	r3, [pc, #36]	; (80052fc <prvProcessTimerOrBlockTask+0x98>)
 80052d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052da:	601a      	str	r2, [r3, #0]
 80052dc:	f3bf 8f4f 	dsb	sy
 80052e0:	f3bf 8f6f 	isb	sy
}
 80052e4:	e001      	b.n	80052ea <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80052e6:	f7ff fa15 	bl	8004714 <xTaskResumeAll>
}
 80052ea:	bf00      	nop
 80052ec:	3710      	adds	r7, #16
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}
 80052f2:	bf00      	nop
 80052f4:	200048a4 	.word	0x200048a4
 80052f8:	200048a8 	.word	0x200048a8
 80052fc:	e000ed04 	.word	0xe000ed04

08005300 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005300:	b480      	push	{r7}
 8005302:	b085      	sub	sp, #20
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005308:	4b0e      	ldr	r3, [pc, #56]	; (8005344 <prvGetNextExpireTime+0x44>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d101      	bne.n	8005316 <prvGetNextExpireTime+0x16>
 8005312:	2201      	movs	r2, #1
 8005314:	e000      	b.n	8005318 <prvGetNextExpireTime+0x18>
 8005316:	2200      	movs	r2, #0
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d105      	bne.n	8005330 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005324:	4b07      	ldr	r3, [pc, #28]	; (8005344 <prvGetNextExpireTime+0x44>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	60fb      	str	r3, [r7, #12]
 800532e:	e001      	b.n	8005334 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005330:	2300      	movs	r3, #0
 8005332:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005334:	68fb      	ldr	r3, [r7, #12]
}
 8005336:	4618      	mov	r0, r3
 8005338:	3714      	adds	r7, #20
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr
 8005342:	bf00      	nop
 8005344:	200048a0 	.word	0x200048a0

08005348 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b084      	sub	sp, #16
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005350:	f7ff fa7e 	bl	8004850 <xTaskGetTickCount>
 8005354:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005356:	4b0b      	ldr	r3, [pc, #44]	; (8005384 <prvSampleTimeNow+0x3c>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	68fa      	ldr	r2, [r7, #12]
 800535c:	429a      	cmp	r2, r3
 800535e:	d205      	bcs.n	800536c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005360:	f000 f936 	bl	80055d0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2201      	movs	r2, #1
 8005368:	601a      	str	r2, [r3, #0]
 800536a:	e002      	b.n	8005372 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2200      	movs	r2, #0
 8005370:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005372:	4a04      	ldr	r2, [pc, #16]	; (8005384 <prvSampleTimeNow+0x3c>)
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005378:	68fb      	ldr	r3, [r7, #12]
}
 800537a:	4618      	mov	r0, r3
 800537c:	3710      	adds	r7, #16
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}
 8005382:	bf00      	nop
 8005384:	200048b0 	.word	0x200048b0

08005388 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b086      	sub	sp, #24
 800538c:	af00      	add	r7, sp, #0
 800538e:	60f8      	str	r0, [r7, #12]
 8005390:	60b9      	str	r1, [r7, #8]
 8005392:	607a      	str	r2, [r7, #4]
 8005394:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005396:	2300      	movs	r3, #0
 8005398:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	68ba      	ldr	r2, [r7, #8]
 800539e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	68fa      	ldr	r2, [r7, #12]
 80053a4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80053a6:	68ba      	ldr	r2, [r7, #8]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	429a      	cmp	r2, r3
 80053ac:	d812      	bhi.n	80053d4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053ae:	687a      	ldr	r2, [r7, #4]
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	1ad2      	subs	r2, r2, r3
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	699b      	ldr	r3, [r3, #24]
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d302      	bcc.n	80053c2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80053bc:	2301      	movs	r3, #1
 80053be:	617b      	str	r3, [r7, #20]
 80053c0:	e01b      	b.n	80053fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80053c2:	4b10      	ldr	r3, [pc, #64]	; (8005404 <prvInsertTimerInActiveList+0x7c>)
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	3304      	adds	r3, #4
 80053ca:	4619      	mov	r1, r3
 80053cc:	4610      	mov	r0, r2
 80053ce:	f7fd ffba 	bl	8003346 <vListInsert>
 80053d2:	e012      	b.n	80053fa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	429a      	cmp	r2, r3
 80053da:	d206      	bcs.n	80053ea <prvInsertTimerInActiveList+0x62>
 80053dc:	68ba      	ldr	r2, [r7, #8]
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d302      	bcc.n	80053ea <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80053e4:	2301      	movs	r3, #1
 80053e6:	617b      	str	r3, [r7, #20]
 80053e8:	e007      	b.n	80053fa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80053ea:	4b07      	ldr	r3, [pc, #28]	; (8005408 <prvInsertTimerInActiveList+0x80>)
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	3304      	adds	r3, #4
 80053f2:	4619      	mov	r1, r3
 80053f4:	4610      	mov	r0, r2
 80053f6:	f7fd ffa6 	bl	8003346 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80053fa:	697b      	ldr	r3, [r7, #20]
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3718      	adds	r7, #24
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}
 8005404:	200048a4 	.word	0x200048a4
 8005408:	200048a0 	.word	0x200048a0

0800540c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b08e      	sub	sp, #56	; 0x38
 8005410:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005412:	e0ca      	b.n	80055aa <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2b00      	cmp	r3, #0
 8005418:	da18      	bge.n	800544c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800541a:	1d3b      	adds	r3, r7, #4
 800541c:	3304      	adds	r3, #4
 800541e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005422:	2b00      	cmp	r3, #0
 8005424:	d10a      	bne.n	800543c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800542a:	f383 8811 	msr	BASEPRI, r3
 800542e:	f3bf 8f6f 	isb	sy
 8005432:	f3bf 8f4f 	dsb	sy
 8005436:	61fb      	str	r3, [r7, #28]
}
 8005438:	bf00      	nop
 800543a:	e7fe      	b.n	800543a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800543c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005442:	6850      	ldr	r0, [r2, #4]
 8005444:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005446:	6892      	ldr	r2, [r2, #8]
 8005448:	4611      	mov	r1, r2
 800544a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2b00      	cmp	r3, #0
 8005450:	f2c0 80aa 	blt.w	80055a8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800545a:	695b      	ldr	r3, [r3, #20]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d004      	beq.n	800546a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005462:	3304      	adds	r3, #4
 8005464:	4618      	mov	r0, r3
 8005466:	f7fd ffa7 	bl	80033b8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800546a:	463b      	mov	r3, r7
 800546c:	4618      	mov	r0, r3
 800546e:	f7ff ff6b 	bl	8005348 <prvSampleTimeNow>
 8005472:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2b09      	cmp	r3, #9
 8005478:	f200 8097 	bhi.w	80055aa <prvProcessReceivedCommands+0x19e>
 800547c:	a201      	add	r2, pc, #4	; (adr r2, 8005484 <prvProcessReceivedCommands+0x78>)
 800547e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005482:	bf00      	nop
 8005484:	080054ad 	.word	0x080054ad
 8005488:	080054ad 	.word	0x080054ad
 800548c:	080054ad 	.word	0x080054ad
 8005490:	08005521 	.word	0x08005521
 8005494:	08005535 	.word	0x08005535
 8005498:	0800557f 	.word	0x0800557f
 800549c:	080054ad 	.word	0x080054ad
 80054a0:	080054ad 	.word	0x080054ad
 80054a4:	08005521 	.word	0x08005521
 80054a8:	08005535 	.word	0x08005535
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80054ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80054b2:	f043 0301 	orr.w	r3, r3, #1
 80054b6:	b2da      	uxtb	r2, r3
 80054b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80054be:	68ba      	ldr	r2, [r7, #8]
 80054c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054c2:	699b      	ldr	r3, [r3, #24]
 80054c4:	18d1      	adds	r1, r2, r3
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054cc:	f7ff ff5c 	bl	8005388 <prvInsertTimerInActiveList>
 80054d0:	4603      	mov	r3, r0
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d069      	beq.n	80055aa <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80054d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054d8:	6a1b      	ldr	r3, [r3, #32]
 80054da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054dc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80054de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80054e4:	f003 0304 	and.w	r3, r3, #4
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d05e      	beq.n	80055aa <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80054ec:	68ba      	ldr	r2, [r7, #8]
 80054ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054f0:	699b      	ldr	r3, [r3, #24]
 80054f2:	441a      	add	r2, r3
 80054f4:	2300      	movs	r3, #0
 80054f6:	9300      	str	r3, [sp, #0]
 80054f8:	2300      	movs	r3, #0
 80054fa:	2100      	movs	r1, #0
 80054fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054fe:	f7ff fe05 	bl	800510c <xTimerGenericCommand>
 8005502:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005504:	6a3b      	ldr	r3, [r7, #32]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d14f      	bne.n	80055aa <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800550a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800550e:	f383 8811 	msr	BASEPRI, r3
 8005512:	f3bf 8f6f 	isb	sy
 8005516:	f3bf 8f4f 	dsb	sy
 800551a:	61bb      	str	r3, [r7, #24]
}
 800551c:	bf00      	nop
 800551e:	e7fe      	b.n	800551e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005522:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005526:	f023 0301 	bic.w	r3, r3, #1
 800552a:	b2da      	uxtb	r2, r3
 800552c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800552e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005532:	e03a      	b.n	80055aa <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005536:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800553a:	f043 0301 	orr.w	r3, r3, #1
 800553e:	b2da      	uxtb	r2, r3
 8005540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005542:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005546:	68ba      	ldr	r2, [r7, #8]
 8005548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800554a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800554c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800554e:	699b      	ldr	r3, [r3, #24]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d10a      	bne.n	800556a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005558:	f383 8811 	msr	BASEPRI, r3
 800555c:	f3bf 8f6f 	isb	sy
 8005560:	f3bf 8f4f 	dsb	sy
 8005564:	617b      	str	r3, [r7, #20]
}
 8005566:	bf00      	nop
 8005568:	e7fe      	b.n	8005568 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800556a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800556c:	699a      	ldr	r2, [r3, #24]
 800556e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005570:	18d1      	adds	r1, r2, r3
 8005572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005574:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005576:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005578:	f7ff ff06 	bl	8005388 <prvInsertTimerInActiveList>
					break;
 800557c:	e015      	b.n	80055aa <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800557e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005580:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005584:	f003 0302 	and.w	r3, r3, #2
 8005588:	2b00      	cmp	r3, #0
 800558a:	d103      	bne.n	8005594 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800558c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800558e:	f7fd fd6b 	bl	8003068 <vPortFree>
 8005592:	e00a      	b.n	80055aa <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005596:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800559a:	f023 0301 	bic.w	r3, r3, #1
 800559e:	b2da      	uxtb	r2, r3
 80055a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80055a6:	e000      	b.n	80055aa <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80055a8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80055aa:	4b08      	ldr	r3, [pc, #32]	; (80055cc <prvProcessReceivedCommands+0x1c0>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	1d39      	adds	r1, r7, #4
 80055b0:	2200      	movs	r2, #0
 80055b2:	4618      	mov	r0, r3
 80055b4:	f7fe fc16 	bl	8003de4 <xQueueReceive>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	f47f af2a 	bne.w	8005414 <prvProcessReceivedCommands+0x8>
	}
}
 80055c0:	bf00      	nop
 80055c2:	bf00      	nop
 80055c4:	3730      	adds	r7, #48	; 0x30
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}
 80055ca:	bf00      	nop
 80055cc:	200048a8 	.word	0x200048a8

080055d0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b088      	sub	sp, #32
 80055d4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80055d6:	e048      	b.n	800566a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80055d8:	4b2d      	ldr	r3, [pc, #180]	; (8005690 <prvSwitchTimerLists+0xc0>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	68db      	ldr	r3, [r3, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055e2:	4b2b      	ldr	r3, [pc, #172]	; (8005690 <prvSwitchTimerLists+0xc0>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	68db      	ldr	r3, [r3, #12]
 80055e8:	68db      	ldr	r3, [r3, #12]
 80055ea:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	3304      	adds	r3, #4
 80055f0:	4618      	mov	r0, r3
 80055f2:	f7fd fee1 	bl	80033b8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	6a1b      	ldr	r3, [r3, #32]
 80055fa:	68f8      	ldr	r0, [r7, #12]
 80055fc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005604:	f003 0304 	and.w	r3, r3, #4
 8005608:	2b00      	cmp	r3, #0
 800560a:	d02e      	beq.n	800566a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	699b      	ldr	r3, [r3, #24]
 8005610:	693a      	ldr	r2, [r7, #16]
 8005612:	4413      	add	r3, r2
 8005614:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005616:	68ba      	ldr	r2, [r7, #8]
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	429a      	cmp	r2, r3
 800561c:	d90e      	bls.n	800563c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	68ba      	ldr	r2, [r7, #8]
 8005622:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	68fa      	ldr	r2, [r7, #12]
 8005628:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800562a:	4b19      	ldr	r3, [pc, #100]	; (8005690 <prvSwitchTimerLists+0xc0>)
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	3304      	adds	r3, #4
 8005632:	4619      	mov	r1, r3
 8005634:	4610      	mov	r0, r2
 8005636:	f7fd fe86 	bl	8003346 <vListInsert>
 800563a:	e016      	b.n	800566a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800563c:	2300      	movs	r3, #0
 800563e:	9300      	str	r3, [sp, #0]
 8005640:	2300      	movs	r3, #0
 8005642:	693a      	ldr	r2, [r7, #16]
 8005644:	2100      	movs	r1, #0
 8005646:	68f8      	ldr	r0, [r7, #12]
 8005648:	f7ff fd60 	bl	800510c <xTimerGenericCommand>
 800564c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d10a      	bne.n	800566a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005658:	f383 8811 	msr	BASEPRI, r3
 800565c:	f3bf 8f6f 	isb	sy
 8005660:	f3bf 8f4f 	dsb	sy
 8005664:	603b      	str	r3, [r7, #0]
}
 8005666:	bf00      	nop
 8005668:	e7fe      	b.n	8005668 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800566a:	4b09      	ldr	r3, [pc, #36]	; (8005690 <prvSwitchTimerLists+0xc0>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d1b1      	bne.n	80055d8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005674:	4b06      	ldr	r3, [pc, #24]	; (8005690 <prvSwitchTimerLists+0xc0>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800567a:	4b06      	ldr	r3, [pc, #24]	; (8005694 <prvSwitchTimerLists+0xc4>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a04      	ldr	r2, [pc, #16]	; (8005690 <prvSwitchTimerLists+0xc0>)
 8005680:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005682:	4a04      	ldr	r2, [pc, #16]	; (8005694 <prvSwitchTimerLists+0xc4>)
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	6013      	str	r3, [r2, #0]
}
 8005688:	bf00      	nop
 800568a:	3718      	adds	r7, #24
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}
 8005690:	200048a0 	.word	0x200048a0
 8005694:	200048a4 	.word	0x200048a4

08005698 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b082      	sub	sp, #8
 800569c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800569e:	f7fd ffe1 	bl	8003664 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80056a2:	4b15      	ldr	r3, [pc, #84]	; (80056f8 <prvCheckForValidListAndQueue+0x60>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d120      	bne.n	80056ec <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80056aa:	4814      	ldr	r0, [pc, #80]	; (80056fc <prvCheckForValidListAndQueue+0x64>)
 80056ac:	f7fd fdfa 	bl	80032a4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80056b0:	4813      	ldr	r0, [pc, #76]	; (8005700 <prvCheckForValidListAndQueue+0x68>)
 80056b2:	f7fd fdf7 	bl	80032a4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80056b6:	4b13      	ldr	r3, [pc, #76]	; (8005704 <prvCheckForValidListAndQueue+0x6c>)
 80056b8:	4a10      	ldr	r2, [pc, #64]	; (80056fc <prvCheckForValidListAndQueue+0x64>)
 80056ba:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80056bc:	4b12      	ldr	r3, [pc, #72]	; (8005708 <prvCheckForValidListAndQueue+0x70>)
 80056be:	4a10      	ldr	r2, [pc, #64]	; (8005700 <prvCheckForValidListAndQueue+0x68>)
 80056c0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80056c2:	2300      	movs	r3, #0
 80056c4:	9300      	str	r3, [sp, #0]
 80056c6:	4b11      	ldr	r3, [pc, #68]	; (800570c <prvCheckForValidListAndQueue+0x74>)
 80056c8:	4a11      	ldr	r2, [pc, #68]	; (8005710 <prvCheckForValidListAndQueue+0x78>)
 80056ca:	2110      	movs	r1, #16
 80056cc:	200a      	movs	r0, #10
 80056ce:	f7fe f953 	bl	8003978 <xQueueGenericCreateStatic>
 80056d2:	4603      	mov	r3, r0
 80056d4:	4a08      	ldr	r2, [pc, #32]	; (80056f8 <prvCheckForValidListAndQueue+0x60>)
 80056d6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80056d8:	4b07      	ldr	r3, [pc, #28]	; (80056f8 <prvCheckForValidListAndQueue+0x60>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d005      	beq.n	80056ec <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80056e0:	4b05      	ldr	r3, [pc, #20]	; (80056f8 <prvCheckForValidListAndQueue+0x60>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	490b      	ldr	r1, [pc, #44]	; (8005714 <prvCheckForValidListAndQueue+0x7c>)
 80056e6:	4618      	mov	r0, r3
 80056e8:	f7fe fd6c 	bl	80041c4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80056ec:	f7fd ffea 	bl	80036c4 <vPortExitCritical>
}
 80056f0:	bf00      	nop
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}
 80056f6:	bf00      	nop
 80056f8:	200048a8 	.word	0x200048a8
 80056fc:	20004878 	.word	0x20004878
 8005700:	2000488c 	.word	0x2000488c
 8005704:	200048a0 	.word	0x200048a0
 8005708:	200048a4 	.word	0x200048a4
 800570c:	20004954 	.word	0x20004954
 8005710:	200048b4 	.word	0x200048b4
 8005714:	080064c0 	.word	0x080064c0

08005718 <OLED_Refresh_Gram>:

#include "../../PeripheralDriver/Inc/oledfont.h"

uint8_t OLED_GRAM[128][8];	 
void OLED_Refresh_Gram(void)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b082      	sub	sp, #8
 800571c:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 800571e:	2300      	movs	r3, #0
 8005720:	71fb      	strb	r3, [r7, #7]
 8005722:	e026      	b.n	8005772 <OLED_Refresh_Gram+0x5a>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    
 8005724:	79fb      	ldrb	r3, [r7, #7]
 8005726:	3b50      	subs	r3, #80	; 0x50
 8005728:	b2db      	uxtb	r3, r3
 800572a:	2100      	movs	r1, #0
 800572c:	4618      	mov	r0, r3
 800572e:	f000 f82b 	bl	8005788 <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      
 8005732:	2100      	movs	r1, #0
 8005734:	2000      	movs	r0, #0
 8005736:	f000 f827 	bl	8005788 <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);        
 800573a:	2100      	movs	r1, #0
 800573c:	2010      	movs	r0, #16
 800573e:	f000 f823 	bl	8005788 <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA); 
 8005742:	2300      	movs	r3, #0
 8005744:	71bb      	strb	r3, [r7, #6]
 8005746:	e00d      	b.n	8005764 <OLED_Refresh_Gram+0x4c>
 8005748:	79ba      	ldrb	r2, [r7, #6]
 800574a:	79fb      	ldrb	r3, [r7, #7]
 800574c:	490d      	ldr	r1, [pc, #52]	; (8005784 <OLED_Refresh_Gram+0x6c>)
 800574e:	00d2      	lsls	r2, r2, #3
 8005750:	440a      	add	r2, r1
 8005752:	4413      	add	r3, r2
 8005754:	781b      	ldrb	r3, [r3, #0]
 8005756:	2101      	movs	r1, #1
 8005758:	4618      	mov	r0, r3
 800575a:	f000 f815 	bl	8005788 <OLED_WR_Byte>
 800575e:	79bb      	ldrb	r3, [r7, #6]
 8005760:	3301      	adds	r3, #1
 8005762:	71bb      	strb	r3, [r7, #6]
 8005764:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005768:	2b00      	cmp	r3, #0
 800576a:	daed      	bge.n	8005748 <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)  
 800576c:	79fb      	ldrb	r3, [r7, #7]
 800576e:	3301      	adds	r3, #1
 8005770:	71fb      	strb	r3, [r7, #7]
 8005772:	79fb      	ldrb	r3, [r7, #7]
 8005774:	2b07      	cmp	r3, #7
 8005776:	d9d5      	bls.n	8005724 <OLED_Refresh_Gram+0xc>
	}   
}
 8005778:	bf00      	nop
 800577a:	bf00      	nop
 800577c:	3708      	adds	r7, #8
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}
 8005782:	bf00      	nop
 8005784:	20004a90 	.word	0x20004a90

08005788 <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{	
 8005788:	b580      	push	{r7, lr}
 800578a:	b084      	sub	sp, #16
 800578c:	af00      	add	r7, sp, #0
 800578e:	4603      	mov	r3, r0
 8005790:	460a      	mov	r2, r1
 8005792:	71fb      	strb	r3, [r7, #7]
 8005794:	4613      	mov	r3, r2
 8005796:	71bb      	strb	r3, [r7, #6]
	uint8_t i;			  
	if(cmd)
 8005798:	79bb      	ldrb	r3, [r7, #6]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d006      	beq.n	80057ac <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 800579e:	2201      	movs	r2, #1
 80057a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80057a4:	481c      	ldr	r0, [pc, #112]	; (8005818 <OLED_WR_Byte+0x90>)
 80057a6:	f7fb fe5f 	bl	8001468 <HAL_GPIO_WritePin>
 80057aa:	e005      	b.n	80057b8 <OLED_WR_Byte+0x30>
	else 
	  OLED_RS_Clr();		  
 80057ac:	2200      	movs	r2, #0
 80057ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80057b2:	4819      	ldr	r0, [pc, #100]	; (8005818 <OLED_WR_Byte+0x90>)
 80057b4:	f7fb fe58 	bl	8001468 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 80057b8:	2300      	movs	r3, #0
 80057ba:	73fb      	strb	r3, [r7, #15]
 80057bc:	e01e      	b.n	80057fc <OLED_WR_Byte+0x74>
	{			  
		OLED_SCLK_Clr();
 80057be:	2200      	movs	r2, #0
 80057c0:	2120      	movs	r1, #32
 80057c2:	4815      	ldr	r0, [pc, #84]	; (8005818 <OLED_WR_Byte+0x90>)
 80057c4:	f7fb fe50 	bl	8001468 <HAL_GPIO_WritePin>
		if(dat&0x80)
 80057c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	da05      	bge.n	80057dc <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 80057d0:	2201      	movs	r2, #1
 80057d2:	2140      	movs	r1, #64	; 0x40
 80057d4:	4810      	ldr	r0, [pc, #64]	; (8005818 <OLED_WR_Byte+0x90>)
 80057d6:	f7fb fe47 	bl	8001468 <HAL_GPIO_WritePin>
 80057da:	e004      	b.n	80057e6 <OLED_WR_Byte+0x5e>
		else 
		   OLED_SDIN_Clr();
 80057dc:	2200      	movs	r2, #0
 80057de:	2140      	movs	r1, #64	; 0x40
 80057e0:	480d      	ldr	r0, [pc, #52]	; (8005818 <OLED_WR_Byte+0x90>)
 80057e2:	f7fb fe41 	bl	8001468 <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 80057e6:	2201      	movs	r2, #1
 80057e8:	2120      	movs	r1, #32
 80057ea:	480b      	ldr	r0, [pc, #44]	; (8005818 <OLED_WR_Byte+0x90>)
 80057ec:	f7fb fe3c 	bl	8001468 <HAL_GPIO_WritePin>
		dat<<=1;   
 80057f0:	79fb      	ldrb	r3, [r7, #7]
 80057f2:	005b      	lsls	r3, r3, #1
 80057f4:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 80057f6:	7bfb      	ldrb	r3, [r7, #15]
 80057f8:	3301      	adds	r3, #1
 80057fa:	73fb      	strb	r3, [r7, #15]
 80057fc:	7bfb      	ldrb	r3, [r7, #15]
 80057fe:	2b07      	cmp	r3, #7
 8005800:	d9dd      	bls.n	80057be <OLED_WR_Byte+0x36>
	}				 		  
	OLED_RS_Set();   	  
 8005802:	2201      	movs	r2, #1
 8005804:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005808:	4803      	ldr	r0, [pc, #12]	; (8005818 <OLED_WR_Byte+0x90>)
 800580a:	f7fb fe2d 	bl	8001468 <HAL_GPIO_WritePin>
} 
 800580e:	bf00      	nop
 8005810:	3710      	adds	r7, #16
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}
 8005816:	bf00      	nop
 8005818:	40021000 	.word	0x40021000

0800581c <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 800581c:	b580      	push	{r7, lr}
 800581e:	b082      	sub	sp, #8
 8005820:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 8005822:	2300      	movs	r3, #0
 8005824:	71fb      	strb	r3, [r7, #7]
 8005826:	e014      	b.n	8005852 <OLED_Clear+0x36>
 8005828:	2300      	movs	r3, #0
 800582a:	71bb      	strb	r3, [r7, #6]
 800582c:	e00a      	b.n	8005844 <OLED_Clear+0x28>
 800582e:	79ba      	ldrb	r2, [r7, #6]
 8005830:	79fb      	ldrb	r3, [r7, #7]
 8005832:	490c      	ldr	r1, [pc, #48]	; (8005864 <OLED_Clear+0x48>)
 8005834:	00d2      	lsls	r2, r2, #3
 8005836:	440a      	add	r2, r1
 8005838:	4413      	add	r3, r2
 800583a:	2200      	movs	r2, #0
 800583c:	701a      	strb	r2, [r3, #0]
 800583e:	79bb      	ldrb	r3, [r7, #6]
 8005840:	3301      	adds	r3, #1
 8005842:	71bb      	strb	r3, [r7, #6]
 8005844:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005848:	2b00      	cmp	r3, #0
 800584a:	daf0      	bge.n	800582e <OLED_Clear+0x12>
 800584c:	79fb      	ldrb	r3, [r7, #7]
 800584e:	3301      	adds	r3, #1
 8005850:	71fb      	strb	r3, [r7, #7]
 8005852:	79fb      	ldrb	r3, [r7, #7]
 8005854:	2b07      	cmp	r3, #7
 8005856:	d9e7      	bls.n	8005828 <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 8005858:	f7ff ff5e 	bl	8005718 <OLED_Refresh_Gram>
}
 800585c:	bf00      	nop
 800585e:	3708      	adds	r7, #8
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}
 8005864:	20004a90 	.word	0x20004a90

08005868 <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 8005868:	b480      	push	{r7}
 800586a:	b085      	sub	sp, #20
 800586c:	af00      	add	r7, sp, #0
 800586e:	4603      	mov	r3, r0
 8005870:	71fb      	strb	r3, [r7, #7]
 8005872:	460b      	mov	r3, r1
 8005874:	71bb      	strb	r3, [r7, #6]
 8005876:	4613      	mov	r3, r2
 8005878:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 800587a:	2300      	movs	r3, #0
 800587c:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 800587e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005882:	2b00      	cmp	r3, #0
 8005884:	db41      	blt.n	800590a <OLED_DrawPoint+0xa2>
 8005886:	79bb      	ldrb	r3, [r7, #6]
 8005888:	2b3f      	cmp	r3, #63	; 0x3f
 800588a:	d83e      	bhi.n	800590a <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 800588c:	79bb      	ldrb	r3, [r7, #6]
 800588e:	08db      	lsrs	r3, r3, #3
 8005890:	b2db      	uxtb	r3, r3
 8005892:	f1c3 0307 	rsb	r3, r3, #7
 8005896:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 8005898:	79bb      	ldrb	r3, [r7, #6]
 800589a:	f003 0307 	and.w	r3, r3, #7
 800589e:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 80058a0:	7b7b      	ldrb	r3, [r7, #13]
 80058a2:	f1c3 0307 	rsb	r3, r3, #7
 80058a6:	2201      	movs	r2, #1
 80058a8:	fa02 f303 	lsl.w	r3, r2, r3
 80058ac:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 80058ae:	797b      	ldrb	r3, [r7, #5]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d012      	beq.n	80058da <OLED_DrawPoint+0x72>
 80058b4:	79fa      	ldrb	r2, [r7, #7]
 80058b6:	7bbb      	ldrb	r3, [r7, #14]
 80058b8:	4917      	ldr	r1, [pc, #92]	; (8005918 <OLED_DrawPoint+0xb0>)
 80058ba:	00d2      	lsls	r2, r2, #3
 80058bc:	440a      	add	r2, r1
 80058be:	4413      	add	r3, r2
 80058c0:	7818      	ldrb	r0, [r3, #0]
 80058c2:	79fa      	ldrb	r2, [r7, #7]
 80058c4:	7bbb      	ldrb	r3, [r7, #14]
 80058c6:	7bf9      	ldrb	r1, [r7, #15]
 80058c8:	4301      	orrs	r1, r0
 80058ca:	b2c8      	uxtb	r0, r1
 80058cc:	4912      	ldr	r1, [pc, #72]	; (8005918 <OLED_DrawPoint+0xb0>)
 80058ce:	00d2      	lsls	r2, r2, #3
 80058d0:	440a      	add	r2, r1
 80058d2:	4413      	add	r3, r2
 80058d4:	4602      	mov	r2, r0
 80058d6:	701a      	strb	r2, [r3, #0]
 80058d8:	e018      	b.n	800590c <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 80058da:	79fa      	ldrb	r2, [r7, #7]
 80058dc:	7bbb      	ldrb	r3, [r7, #14]
 80058de:	490e      	ldr	r1, [pc, #56]	; (8005918 <OLED_DrawPoint+0xb0>)
 80058e0:	00d2      	lsls	r2, r2, #3
 80058e2:	440a      	add	r2, r1
 80058e4:	4413      	add	r3, r2
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	b25a      	sxtb	r2, r3
 80058ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80058ee:	43db      	mvns	r3, r3
 80058f0:	b25b      	sxtb	r3, r3
 80058f2:	4013      	ands	r3, r2
 80058f4:	b259      	sxtb	r1, r3
 80058f6:	79fa      	ldrb	r2, [r7, #7]
 80058f8:	7bbb      	ldrb	r3, [r7, #14]
 80058fa:	b2c8      	uxtb	r0, r1
 80058fc:	4906      	ldr	r1, [pc, #24]	; (8005918 <OLED_DrawPoint+0xb0>)
 80058fe:	00d2      	lsls	r2, r2, #3
 8005900:	440a      	add	r2, r1
 8005902:	4413      	add	r3, r2
 8005904:	4602      	mov	r2, r0
 8005906:	701a      	strb	r2, [r3, #0]
 8005908:	e000      	b.n	800590c <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 800590a:	bf00      	nop
}
 800590c:	3714      	adds	r7, #20
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr
 8005916:	bf00      	nop
 8005918:	20004a90 	.word	0x20004a90

0800591c <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 800591c:	b590      	push	{r4, r7, lr}
 800591e:	b085      	sub	sp, #20
 8005920:	af00      	add	r7, sp, #0
 8005922:	4604      	mov	r4, r0
 8005924:	4608      	mov	r0, r1
 8005926:	4611      	mov	r1, r2
 8005928:	461a      	mov	r2, r3
 800592a:	4623      	mov	r3, r4
 800592c:	71fb      	strb	r3, [r7, #7]
 800592e:	4603      	mov	r3, r0
 8005930:	71bb      	strb	r3, [r7, #6]
 8005932:	460b      	mov	r3, r1
 8005934:	717b      	strb	r3, [r7, #5]
 8005936:	4613      	mov	r3, r2
 8005938:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 800593a:	79bb      	ldrb	r3, [r7, #6]
 800593c:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 800593e:	797b      	ldrb	r3, [r7, #5]
 8005940:	3b20      	subs	r3, #32
 8005942:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 8005944:	2300      	movs	r3, #0
 8005946:	73bb      	strb	r3, [r7, #14]
 8005948:	e04d      	b.n	80059e6 <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 800594a:	793b      	ldrb	r3, [r7, #4]
 800594c:	2b0c      	cmp	r3, #12
 800594e:	d10b      	bne.n	8005968 <OLED_ShowChar+0x4c>
 8005950:	797a      	ldrb	r2, [r7, #5]
 8005952:	7bb9      	ldrb	r1, [r7, #14]
 8005954:	4828      	ldr	r0, [pc, #160]	; (80059f8 <OLED_ShowChar+0xdc>)
 8005956:	4613      	mov	r3, r2
 8005958:	005b      	lsls	r3, r3, #1
 800595a:	4413      	add	r3, r2
 800595c:	009b      	lsls	r3, r3, #2
 800595e:	4403      	add	r3, r0
 8005960:	440b      	add	r3, r1
 8005962:	781b      	ldrb	r3, [r3, #0]
 8005964:	73fb      	strb	r3, [r7, #15]
 8005966:	e007      	b.n	8005978 <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 8005968:	797a      	ldrb	r2, [r7, #5]
 800596a:	7bbb      	ldrb	r3, [r7, #14]
 800596c:	4923      	ldr	r1, [pc, #140]	; (80059fc <OLED_ShowChar+0xe0>)
 800596e:	0112      	lsls	r2, r2, #4
 8005970:	440a      	add	r2, r1
 8005972:	4413      	add	r3, r2
 8005974:	781b      	ldrb	r3, [r3, #0]
 8005976:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 8005978:	2300      	movs	r3, #0
 800597a:	737b      	strb	r3, [r7, #13]
 800597c:	e02d      	b.n	80059da <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 800597e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005982:	2b00      	cmp	r3, #0
 8005984:	da07      	bge.n	8005996 <OLED_ShowChar+0x7a>
 8005986:	f897 2020 	ldrb.w	r2, [r7, #32]
 800598a:	79b9      	ldrb	r1, [r7, #6]
 800598c:	79fb      	ldrb	r3, [r7, #7]
 800598e:	4618      	mov	r0, r3
 8005990:	f7ff ff6a 	bl	8005868 <OLED_DrawPoint>
 8005994:	e00c      	b.n	80059b0 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 8005996:	f897 3020 	ldrb.w	r3, [r7, #32]
 800599a:	2b00      	cmp	r3, #0
 800599c:	bf0c      	ite	eq
 800599e:	2301      	moveq	r3, #1
 80059a0:	2300      	movne	r3, #0
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	461a      	mov	r2, r3
 80059a6:	79b9      	ldrb	r1, [r7, #6]
 80059a8:	79fb      	ldrb	r3, [r7, #7]
 80059aa:	4618      	mov	r0, r3
 80059ac:	f7ff ff5c 	bl	8005868 <OLED_DrawPoint>
			temp<<=1;
 80059b0:	7bfb      	ldrb	r3, [r7, #15]
 80059b2:	005b      	lsls	r3, r3, #1
 80059b4:	73fb      	strb	r3, [r7, #15]
			y++;
 80059b6:	79bb      	ldrb	r3, [r7, #6]
 80059b8:	3301      	adds	r3, #1
 80059ba:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 80059bc:	79ba      	ldrb	r2, [r7, #6]
 80059be:	7b3b      	ldrb	r3, [r7, #12]
 80059c0:	1ad2      	subs	r2, r2, r3
 80059c2:	793b      	ldrb	r3, [r7, #4]
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d105      	bne.n	80059d4 <OLED_ShowChar+0xb8>
			{
				y=y0;
 80059c8:	7b3b      	ldrb	r3, [r7, #12]
 80059ca:	71bb      	strb	r3, [r7, #6]
				x++;
 80059cc:	79fb      	ldrb	r3, [r7, #7]
 80059ce:	3301      	adds	r3, #1
 80059d0:	71fb      	strb	r3, [r7, #7]
				break;
 80059d2:	e005      	b.n	80059e0 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 80059d4:	7b7b      	ldrb	r3, [r7, #13]
 80059d6:	3301      	adds	r3, #1
 80059d8:	737b      	strb	r3, [r7, #13]
 80059da:	7b7b      	ldrb	r3, [r7, #13]
 80059dc:	2b07      	cmp	r3, #7
 80059de:	d9ce      	bls.n	800597e <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 80059e0:	7bbb      	ldrb	r3, [r7, #14]
 80059e2:	3301      	adds	r3, #1
 80059e4:	73bb      	strb	r3, [r7, #14]
 80059e6:	7bba      	ldrb	r2, [r7, #14]
 80059e8:	793b      	ldrb	r3, [r7, #4]
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d3ad      	bcc.n	800594a <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 80059ee:	bf00      	nop
 80059f0:	bf00      	nop
 80059f2:	3714      	adds	r7, #20
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd90      	pop	{r4, r7, pc}
 80059f8:	08006568 	.word	0x08006568
 80059fc:	080069dc 	.word	0x080069dc

08005a00 <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b084      	sub	sp, #16
 8005a04:	af02      	add	r7, sp, #8
 8005a06:	4603      	mov	r3, r0
 8005a08:	603a      	str	r2, [r7, #0]
 8005a0a:	71fb      	strb	r3, [r7, #7]
 8005a0c:	460b      	mov	r3, r1
 8005a0e:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 8005a10:	e01f      	b.n	8005a52 <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 8005a12:	79fb      	ldrb	r3, [r7, #7]
 8005a14:	2b7a      	cmp	r3, #122	; 0x7a
 8005a16:	d904      	bls.n	8005a22 <OLED_ShowString+0x22>
 8005a18:	2300      	movs	r3, #0
 8005a1a:	71fb      	strb	r3, [r7, #7]
 8005a1c:	79bb      	ldrb	r3, [r7, #6]
 8005a1e:	3310      	adds	r3, #16
 8005a20:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 8005a22:	79bb      	ldrb	r3, [r7, #6]
 8005a24:	2b3a      	cmp	r3, #58	; 0x3a
 8005a26:	d905      	bls.n	8005a34 <OLED_ShowString+0x34>
 8005a28:	2300      	movs	r3, #0
 8005a2a:	71fb      	strb	r3, [r7, #7]
 8005a2c:	79fb      	ldrb	r3, [r7, #7]
 8005a2e:	71bb      	strb	r3, [r7, #6]
 8005a30:	f7ff fef4 	bl	800581c <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	781a      	ldrb	r2, [r3, #0]
 8005a38:	79b9      	ldrb	r1, [r7, #6]
 8005a3a:	79f8      	ldrb	r0, [r7, #7]
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	9300      	str	r3, [sp, #0]
 8005a40:	230c      	movs	r3, #12
 8005a42:	f7ff ff6b 	bl	800591c <OLED_ShowChar>
        x+=8;
 8005a46:	79fb      	ldrb	r3, [r7, #7]
 8005a48:	3308      	adds	r3, #8
 8005a4a:	71fb      	strb	r3, [r7, #7]
        p++;
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	3301      	adds	r3, #1
 8005a50:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	781b      	ldrb	r3, [r3, #0]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d1db      	bne.n	8005a12 <OLED_ShowString+0x12>
    }  
}	 
 8005a5a:	bf00      	nop
 8005a5c:	bf00      	nop
 8005a5e:	3708      	adds	r7, #8
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}

08005a64 <OLED_Init>:

void OLED_Init(void)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 8005a68:	f7fb fd18 	bl	800149c <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 8005a6c:	4b41      	ldr	r3, [pc, #260]	; (8005b74 <OLED_Init+0x110>)
 8005a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a70:	4a40      	ldr	r2, [pc, #256]	; (8005b74 <OLED_Init+0x110>)
 8005a72:	f023 0301 	bic.w	r3, r3, #1
 8005a76:	6713      	str	r3, [r2, #112]	; 0x70
 8005a78:	4b3e      	ldr	r3, [pc, #248]	; (8005b74 <OLED_Init+0x110>)
 8005a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a7c:	4a3d      	ldr	r2, [pc, #244]	; (8005b74 <OLED_Init+0x110>)
 8005a7e:	f023 0304 	bic.w	r3, r3, #4
 8005a82:	6713      	str	r3, [r2, #112]	; 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 8005a84:	f7fb fd1e 	bl	80014c4 <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 8005a88:	2200      	movs	r2, #0
 8005a8a:	2180      	movs	r1, #128	; 0x80
 8005a8c:	483a      	ldr	r0, [pc, #232]	; (8005b78 <OLED_Init+0x114>)
 8005a8e:	f7fb fceb 	bl	8001468 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8005a92:	2064      	movs	r0, #100	; 0x64
 8005a94:	f7fb fa42 	bl	8000f1c <HAL_Delay>
	OLED_RST_Set();
 8005a98:	2201      	movs	r2, #1
 8005a9a:	2180      	movs	r1, #128	; 0x80
 8005a9c:	4836      	ldr	r0, [pc, #216]	; (8005b78 <OLED_Init+0x114>)
 8005a9e:	f7fb fce3 	bl	8001468 <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 8005aa2:	2100      	movs	r1, #0
 8005aa4:	20ae      	movs	r0, #174	; 0xae
 8005aa6:	f7ff fe6f 	bl	8005788 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 8005aaa:	2100      	movs	r1, #0
 8005aac:	20d5      	movs	r0, #213	; 0xd5
 8005aae:	f7ff fe6b 	bl	8005788 <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 8005ab2:	2100      	movs	r1, #0
 8005ab4:	2050      	movs	r0, #80	; 0x50
 8005ab6:	f7ff fe67 	bl	8005788 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 8005aba:	2100      	movs	r1, #0
 8005abc:	20a8      	movs	r0, #168	; 0xa8
 8005abe:	f7ff fe63 	bl	8005788 <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 8005ac2:	2100      	movs	r1, #0
 8005ac4:	203f      	movs	r0, #63	; 0x3f
 8005ac6:	f7ff fe5f 	bl	8005788 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 8005aca:	2100      	movs	r1, #0
 8005acc:	20d3      	movs	r0, #211	; 0xd3
 8005ace:	f7ff fe5b 	bl	8005788 <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 8005ad2:	2100      	movs	r1, #0
 8005ad4:	2000      	movs	r0, #0
 8005ad6:	f7ff fe57 	bl	8005788 <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 8005ada:	2100      	movs	r1, #0
 8005adc:	2040      	movs	r0, #64	; 0x40
 8005ade:	f7ff fe53 	bl	8005788 <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 8005ae2:	2100      	movs	r1, #0
 8005ae4:	208d      	movs	r0, #141	; 0x8d
 8005ae6:	f7ff fe4f 	bl	8005788 <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 8005aea:	2100      	movs	r1, #0
 8005aec:	2014      	movs	r0, #20
 8005aee:	f7ff fe4b 	bl	8005788 <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 8005af2:	2100      	movs	r1, #0
 8005af4:	2020      	movs	r0, #32
 8005af6:	f7ff fe47 	bl	8005788 <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 8005afa:	2100      	movs	r1, #0
 8005afc:	2002      	movs	r0, #2
 8005afe:	f7ff fe43 	bl	8005788 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 8005b02:	2100      	movs	r1, #0
 8005b04:	20a1      	movs	r0, #161	; 0xa1
 8005b06:	f7ff fe3f 	bl	8005788 <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 8005b0a:	2100      	movs	r1, #0
 8005b0c:	20c0      	movs	r0, #192	; 0xc0
 8005b0e:	f7ff fe3b 	bl	8005788 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 8005b12:	2100      	movs	r1, #0
 8005b14:	20da      	movs	r0, #218	; 0xda
 8005b16:	f7ff fe37 	bl	8005788 <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 8005b1a:	2100      	movs	r1, #0
 8005b1c:	2012      	movs	r0, #18
 8005b1e:	f7ff fe33 	bl	8005788 <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 8005b22:	2100      	movs	r1, #0
 8005b24:	2081      	movs	r0, #129	; 0x81
 8005b26:	f7ff fe2f 	bl	8005788 <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 8005b2a:	2100      	movs	r1, #0
 8005b2c:	20ef      	movs	r0, #239	; 0xef
 8005b2e:	f7ff fe2b 	bl	8005788 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 8005b32:	2100      	movs	r1, #0
 8005b34:	20d9      	movs	r0, #217	; 0xd9
 8005b36:	f7ff fe27 	bl	8005788 <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 8005b3a:	2100      	movs	r1, #0
 8005b3c:	20f1      	movs	r0, #241	; 0xf1
 8005b3e:	f7ff fe23 	bl	8005788 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 8005b42:	2100      	movs	r1, #0
 8005b44:	20db      	movs	r0, #219	; 0xdb
 8005b46:	f7ff fe1f 	bl	8005788 <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 8005b4a:	2100      	movs	r1, #0
 8005b4c:	2030      	movs	r0, #48	; 0x30
 8005b4e:	f7ff fe1b 	bl	8005788 <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 8005b52:	2100      	movs	r1, #0
 8005b54:	20a4      	movs	r0, #164	; 0xa4
 8005b56:	f7ff fe17 	bl	8005788 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 8005b5a:	2100      	movs	r1, #0
 8005b5c:	20a6      	movs	r0, #166	; 0xa6
 8005b5e:	f7ff fe13 	bl	8005788 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 8005b62:	2100      	movs	r1, #0
 8005b64:	20af      	movs	r0, #175	; 0xaf
 8005b66:	f7ff fe0f 	bl	8005788 <OLED_WR_Byte>
	OLED_Clear(); 
 8005b6a:	f7ff fe57 	bl	800581c <OLED_Clear>
 8005b6e:	bf00      	nop
 8005b70:	bd80      	pop	{r7, pc}
 8005b72:	bf00      	nop
 8005b74:	40023800 	.word	0x40023800
 8005b78:	40021000 	.word	0x40021000

08005b7c <__errno>:
 8005b7c:	4b01      	ldr	r3, [pc, #4]	; (8005b84 <__errno+0x8>)
 8005b7e:	6818      	ldr	r0, [r3, #0]
 8005b80:	4770      	bx	lr
 8005b82:	bf00      	nop
 8005b84:	20000010 	.word	0x20000010

08005b88 <__libc_init_array>:
 8005b88:	b570      	push	{r4, r5, r6, lr}
 8005b8a:	4d0d      	ldr	r5, [pc, #52]	; (8005bc0 <__libc_init_array+0x38>)
 8005b8c:	4c0d      	ldr	r4, [pc, #52]	; (8005bc4 <__libc_init_array+0x3c>)
 8005b8e:	1b64      	subs	r4, r4, r5
 8005b90:	10a4      	asrs	r4, r4, #2
 8005b92:	2600      	movs	r6, #0
 8005b94:	42a6      	cmp	r6, r4
 8005b96:	d109      	bne.n	8005bac <__libc_init_array+0x24>
 8005b98:	4d0b      	ldr	r5, [pc, #44]	; (8005bc8 <__libc_init_array+0x40>)
 8005b9a:	4c0c      	ldr	r4, [pc, #48]	; (8005bcc <__libc_init_array+0x44>)
 8005b9c:	f000 fc4e 	bl	800643c <_init>
 8005ba0:	1b64      	subs	r4, r4, r5
 8005ba2:	10a4      	asrs	r4, r4, #2
 8005ba4:	2600      	movs	r6, #0
 8005ba6:	42a6      	cmp	r6, r4
 8005ba8:	d105      	bne.n	8005bb6 <__libc_init_array+0x2e>
 8005baa:	bd70      	pop	{r4, r5, r6, pc}
 8005bac:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bb0:	4798      	blx	r3
 8005bb2:	3601      	adds	r6, #1
 8005bb4:	e7ee      	b.n	8005b94 <__libc_init_array+0xc>
 8005bb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bba:	4798      	blx	r3
 8005bbc:	3601      	adds	r6, #1
 8005bbe:	e7f2      	b.n	8005ba6 <__libc_init_array+0x1e>
 8005bc0:	08007008 	.word	0x08007008
 8005bc4:	08007008 	.word	0x08007008
 8005bc8:	08007008 	.word	0x08007008
 8005bcc:	0800700c 	.word	0x0800700c

08005bd0 <memcpy>:
 8005bd0:	440a      	add	r2, r1
 8005bd2:	4291      	cmp	r1, r2
 8005bd4:	f100 33ff 	add.w	r3, r0, #4294967295
 8005bd8:	d100      	bne.n	8005bdc <memcpy+0xc>
 8005bda:	4770      	bx	lr
 8005bdc:	b510      	push	{r4, lr}
 8005bde:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005be2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005be6:	4291      	cmp	r1, r2
 8005be8:	d1f9      	bne.n	8005bde <memcpy+0xe>
 8005bea:	bd10      	pop	{r4, pc}

08005bec <memset>:
 8005bec:	4402      	add	r2, r0
 8005bee:	4603      	mov	r3, r0
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d100      	bne.n	8005bf6 <memset+0xa>
 8005bf4:	4770      	bx	lr
 8005bf6:	f803 1b01 	strb.w	r1, [r3], #1
 8005bfa:	e7f9      	b.n	8005bf0 <memset+0x4>

08005bfc <siprintf>:
 8005bfc:	b40e      	push	{r1, r2, r3}
 8005bfe:	b500      	push	{lr}
 8005c00:	b09c      	sub	sp, #112	; 0x70
 8005c02:	ab1d      	add	r3, sp, #116	; 0x74
 8005c04:	9002      	str	r0, [sp, #8]
 8005c06:	9006      	str	r0, [sp, #24]
 8005c08:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005c0c:	4809      	ldr	r0, [pc, #36]	; (8005c34 <siprintf+0x38>)
 8005c0e:	9107      	str	r1, [sp, #28]
 8005c10:	9104      	str	r1, [sp, #16]
 8005c12:	4909      	ldr	r1, [pc, #36]	; (8005c38 <siprintf+0x3c>)
 8005c14:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c18:	9105      	str	r1, [sp, #20]
 8005c1a:	6800      	ldr	r0, [r0, #0]
 8005c1c:	9301      	str	r3, [sp, #4]
 8005c1e:	a902      	add	r1, sp, #8
 8005c20:	f000 f868 	bl	8005cf4 <_svfiprintf_r>
 8005c24:	9b02      	ldr	r3, [sp, #8]
 8005c26:	2200      	movs	r2, #0
 8005c28:	701a      	strb	r2, [r3, #0]
 8005c2a:	b01c      	add	sp, #112	; 0x70
 8005c2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005c30:	b003      	add	sp, #12
 8005c32:	4770      	bx	lr
 8005c34:	20000010 	.word	0x20000010
 8005c38:	ffff0208 	.word	0xffff0208

08005c3c <__ssputs_r>:
 8005c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c40:	688e      	ldr	r6, [r1, #8]
 8005c42:	429e      	cmp	r6, r3
 8005c44:	4682      	mov	sl, r0
 8005c46:	460c      	mov	r4, r1
 8005c48:	4690      	mov	r8, r2
 8005c4a:	461f      	mov	r7, r3
 8005c4c:	d838      	bhi.n	8005cc0 <__ssputs_r+0x84>
 8005c4e:	898a      	ldrh	r2, [r1, #12]
 8005c50:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005c54:	d032      	beq.n	8005cbc <__ssputs_r+0x80>
 8005c56:	6825      	ldr	r5, [r4, #0]
 8005c58:	6909      	ldr	r1, [r1, #16]
 8005c5a:	eba5 0901 	sub.w	r9, r5, r1
 8005c5e:	6965      	ldr	r5, [r4, #20]
 8005c60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005c64:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005c68:	3301      	adds	r3, #1
 8005c6a:	444b      	add	r3, r9
 8005c6c:	106d      	asrs	r5, r5, #1
 8005c6e:	429d      	cmp	r5, r3
 8005c70:	bf38      	it	cc
 8005c72:	461d      	movcc	r5, r3
 8005c74:	0553      	lsls	r3, r2, #21
 8005c76:	d531      	bpl.n	8005cdc <__ssputs_r+0xa0>
 8005c78:	4629      	mov	r1, r5
 8005c7a:	f000 fb39 	bl	80062f0 <_malloc_r>
 8005c7e:	4606      	mov	r6, r0
 8005c80:	b950      	cbnz	r0, 8005c98 <__ssputs_r+0x5c>
 8005c82:	230c      	movs	r3, #12
 8005c84:	f8ca 3000 	str.w	r3, [sl]
 8005c88:	89a3      	ldrh	r3, [r4, #12]
 8005c8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c8e:	81a3      	strh	r3, [r4, #12]
 8005c90:	f04f 30ff 	mov.w	r0, #4294967295
 8005c94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c98:	6921      	ldr	r1, [r4, #16]
 8005c9a:	464a      	mov	r2, r9
 8005c9c:	f7ff ff98 	bl	8005bd0 <memcpy>
 8005ca0:	89a3      	ldrh	r3, [r4, #12]
 8005ca2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005ca6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005caa:	81a3      	strh	r3, [r4, #12]
 8005cac:	6126      	str	r6, [r4, #16]
 8005cae:	6165      	str	r5, [r4, #20]
 8005cb0:	444e      	add	r6, r9
 8005cb2:	eba5 0509 	sub.w	r5, r5, r9
 8005cb6:	6026      	str	r6, [r4, #0]
 8005cb8:	60a5      	str	r5, [r4, #8]
 8005cba:	463e      	mov	r6, r7
 8005cbc:	42be      	cmp	r6, r7
 8005cbe:	d900      	bls.n	8005cc2 <__ssputs_r+0x86>
 8005cc0:	463e      	mov	r6, r7
 8005cc2:	4632      	mov	r2, r6
 8005cc4:	6820      	ldr	r0, [r4, #0]
 8005cc6:	4641      	mov	r1, r8
 8005cc8:	f000 faa8 	bl	800621c <memmove>
 8005ccc:	68a3      	ldr	r3, [r4, #8]
 8005cce:	6822      	ldr	r2, [r4, #0]
 8005cd0:	1b9b      	subs	r3, r3, r6
 8005cd2:	4432      	add	r2, r6
 8005cd4:	60a3      	str	r3, [r4, #8]
 8005cd6:	6022      	str	r2, [r4, #0]
 8005cd8:	2000      	movs	r0, #0
 8005cda:	e7db      	b.n	8005c94 <__ssputs_r+0x58>
 8005cdc:	462a      	mov	r2, r5
 8005cde:	f000 fb61 	bl	80063a4 <_realloc_r>
 8005ce2:	4606      	mov	r6, r0
 8005ce4:	2800      	cmp	r0, #0
 8005ce6:	d1e1      	bne.n	8005cac <__ssputs_r+0x70>
 8005ce8:	6921      	ldr	r1, [r4, #16]
 8005cea:	4650      	mov	r0, sl
 8005cec:	f000 fab0 	bl	8006250 <_free_r>
 8005cf0:	e7c7      	b.n	8005c82 <__ssputs_r+0x46>
	...

08005cf4 <_svfiprintf_r>:
 8005cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cf8:	4698      	mov	r8, r3
 8005cfa:	898b      	ldrh	r3, [r1, #12]
 8005cfc:	061b      	lsls	r3, r3, #24
 8005cfe:	b09d      	sub	sp, #116	; 0x74
 8005d00:	4607      	mov	r7, r0
 8005d02:	460d      	mov	r5, r1
 8005d04:	4614      	mov	r4, r2
 8005d06:	d50e      	bpl.n	8005d26 <_svfiprintf_r+0x32>
 8005d08:	690b      	ldr	r3, [r1, #16]
 8005d0a:	b963      	cbnz	r3, 8005d26 <_svfiprintf_r+0x32>
 8005d0c:	2140      	movs	r1, #64	; 0x40
 8005d0e:	f000 faef 	bl	80062f0 <_malloc_r>
 8005d12:	6028      	str	r0, [r5, #0]
 8005d14:	6128      	str	r0, [r5, #16]
 8005d16:	b920      	cbnz	r0, 8005d22 <_svfiprintf_r+0x2e>
 8005d18:	230c      	movs	r3, #12
 8005d1a:	603b      	str	r3, [r7, #0]
 8005d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8005d20:	e0d1      	b.n	8005ec6 <_svfiprintf_r+0x1d2>
 8005d22:	2340      	movs	r3, #64	; 0x40
 8005d24:	616b      	str	r3, [r5, #20]
 8005d26:	2300      	movs	r3, #0
 8005d28:	9309      	str	r3, [sp, #36]	; 0x24
 8005d2a:	2320      	movs	r3, #32
 8005d2c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005d30:	f8cd 800c 	str.w	r8, [sp, #12]
 8005d34:	2330      	movs	r3, #48	; 0x30
 8005d36:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005ee0 <_svfiprintf_r+0x1ec>
 8005d3a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005d3e:	f04f 0901 	mov.w	r9, #1
 8005d42:	4623      	mov	r3, r4
 8005d44:	469a      	mov	sl, r3
 8005d46:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005d4a:	b10a      	cbz	r2, 8005d50 <_svfiprintf_r+0x5c>
 8005d4c:	2a25      	cmp	r2, #37	; 0x25
 8005d4e:	d1f9      	bne.n	8005d44 <_svfiprintf_r+0x50>
 8005d50:	ebba 0b04 	subs.w	fp, sl, r4
 8005d54:	d00b      	beq.n	8005d6e <_svfiprintf_r+0x7a>
 8005d56:	465b      	mov	r3, fp
 8005d58:	4622      	mov	r2, r4
 8005d5a:	4629      	mov	r1, r5
 8005d5c:	4638      	mov	r0, r7
 8005d5e:	f7ff ff6d 	bl	8005c3c <__ssputs_r>
 8005d62:	3001      	adds	r0, #1
 8005d64:	f000 80aa 	beq.w	8005ebc <_svfiprintf_r+0x1c8>
 8005d68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d6a:	445a      	add	r2, fp
 8005d6c:	9209      	str	r2, [sp, #36]	; 0x24
 8005d6e:	f89a 3000 	ldrb.w	r3, [sl]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	f000 80a2 	beq.w	8005ebc <_svfiprintf_r+0x1c8>
 8005d78:	2300      	movs	r3, #0
 8005d7a:	f04f 32ff 	mov.w	r2, #4294967295
 8005d7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d82:	f10a 0a01 	add.w	sl, sl, #1
 8005d86:	9304      	str	r3, [sp, #16]
 8005d88:	9307      	str	r3, [sp, #28]
 8005d8a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005d8e:	931a      	str	r3, [sp, #104]	; 0x68
 8005d90:	4654      	mov	r4, sl
 8005d92:	2205      	movs	r2, #5
 8005d94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d98:	4851      	ldr	r0, [pc, #324]	; (8005ee0 <_svfiprintf_r+0x1ec>)
 8005d9a:	f7fa fa19 	bl	80001d0 <memchr>
 8005d9e:	9a04      	ldr	r2, [sp, #16]
 8005da0:	b9d8      	cbnz	r0, 8005dda <_svfiprintf_r+0xe6>
 8005da2:	06d0      	lsls	r0, r2, #27
 8005da4:	bf44      	itt	mi
 8005da6:	2320      	movmi	r3, #32
 8005da8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005dac:	0711      	lsls	r1, r2, #28
 8005dae:	bf44      	itt	mi
 8005db0:	232b      	movmi	r3, #43	; 0x2b
 8005db2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005db6:	f89a 3000 	ldrb.w	r3, [sl]
 8005dba:	2b2a      	cmp	r3, #42	; 0x2a
 8005dbc:	d015      	beq.n	8005dea <_svfiprintf_r+0xf6>
 8005dbe:	9a07      	ldr	r2, [sp, #28]
 8005dc0:	4654      	mov	r4, sl
 8005dc2:	2000      	movs	r0, #0
 8005dc4:	f04f 0c0a 	mov.w	ip, #10
 8005dc8:	4621      	mov	r1, r4
 8005dca:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005dce:	3b30      	subs	r3, #48	; 0x30
 8005dd0:	2b09      	cmp	r3, #9
 8005dd2:	d94e      	bls.n	8005e72 <_svfiprintf_r+0x17e>
 8005dd4:	b1b0      	cbz	r0, 8005e04 <_svfiprintf_r+0x110>
 8005dd6:	9207      	str	r2, [sp, #28]
 8005dd8:	e014      	b.n	8005e04 <_svfiprintf_r+0x110>
 8005dda:	eba0 0308 	sub.w	r3, r0, r8
 8005dde:	fa09 f303 	lsl.w	r3, r9, r3
 8005de2:	4313      	orrs	r3, r2
 8005de4:	9304      	str	r3, [sp, #16]
 8005de6:	46a2      	mov	sl, r4
 8005de8:	e7d2      	b.n	8005d90 <_svfiprintf_r+0x9c>
 8005dea:	9b03      	ldr	r3, [sp, #12]
 8005dec:	1d19      	adds	r1, r3, #4
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	9103      	str	r1, [sp, #12]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	bfbb      	ittet	lt
 8005df6:	425b      	neglt	r3, r3
 8005df8:	f042 0202 	orrlt.w	r2, r2, #2
 8005dfc:	9307      	strge	r3, [sp, #28]
 8005dfe:	9307      	strlt	r3, [sp, #28]
 8005e00:	bfb8      	it	lt
 8005e02:	9204      	strlt	r2, [sp, #16]
 8005e04:	7823      	ldrb	r3, [r4, #0]
 8005e06:	2b2e      	cmp	r3, #46	; 0x2e
 8005e08:	d10c      	bne.n	8005e24 <_svfiprintf_r+0x130>
 8005e0a:	7863      	ldrb	r3, [r4, #1]
 8005e0c:	2b2a      	cmp	r3, #42	; 0x2a
 8005e0e:	d135      	bne.n	8005e7c <_svfiprintf_r+0x188>
 8005e10:	9b03      	ldr	r3, [sp, #12]
 8005e12:	1d1a      	adds	r2, r3, #4
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	9203      	str	r2, [sp, #12]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	bfb8      	it	lt
 8005e1c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005e20:	3402      	adds	r4, #2
 8005e22:	9305      	str	r3, [sp, #20]
 8005e24:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005ef0 <_svfiprintf_r+0x1fc>
 8005e28:	7821      	ldrb	r1, [r4, #0]
 8005e2a:	2203      	movs	r2, #3
 8005e2c:	4650      	mov	r0, sl
 8005e2e:	f7fa f9cf 	bl	80001d0 <memchr>
 8005e32:	b140      	cbz	r0, 8005e46 <_svfiprintf_r+0x152>
 8005e34:	2340      	movs	r3, #64	; 0x40
 8005e36:	eba0 000a 	sub.w	r0, r0, sl
 8005e3a:	fa03 f000 	lsl.w	r0, r3, r0
 8005e3e:	9b04      	ldr	r3, [sp, #16]
 8005e40:	4303      	orrs	r3, r0
 8005e42:	3401      	adds	r4, #1
 8005e44:	9304      	str	r3, [sp, #16]
 8005e46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e4a:	4826      	ldr	r0, [pc, #152]	; (8005ee4 <_svfiprintf_r+0x1f0>)
 8005e4c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005e50:	2206      	movs	r2, #6
 8005e52:	f7fa f9bd 	bl	80001d0 <memchr>
 8005e56:	2800      	cmp	r0, #0
 8005e58:	d038      	beq.n	8005ecc <_svfiprintf_r+0x1d8>
 8005e5a:	4b23      	ldr	r3, [pc, #140]	; (8005ee8 <_svfiprintf_r+0x1f4>)
 8005e5c:	bb1b      	cbnz	r3, 8005ea6 <_svfiprintf_r+0x1b2>
 8005e5e:	9b03      	ldr	r3, [sp, #12]
 8005e60:	3307      	adds	r3, #7
 8005e62:	f023 0307 	bic.w	r3, r3, #7
 8005e66:	3308      	adds	r3, #8
 8005e68:	9303      	str	r3, [sp, #12]
 8005e6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e6c:	4433      	add	r3, r6
 8005e6e:	9309      	str	r3, [sp, #36]	; 0x24
 8005e70:	e767      	b.n	8005d42 <_svfiprintf_r+0x4e>
 8005e72:	fb0c 3202 	mla	r2, ip, r2, r3
 8005e76:	460c      	mov	r4, r1
 8005e78:	2001      	movs	r0, #1
 8005e7a:	e7a5      	b.n	8005dc8 <_svfiprintf_r+0xd4>
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	3401      	adds	r4, #1
 8005e80:	9305      	str	r3, [sp, #20]
 8005e82:	4619      	mov	r1, r3
 8005e84:	f04f 0c0a 	mov.w	ip, #10
 8005e88:	4620      	mov	r0, r4
 8005e8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e8e:	3a30      	subs	r2, #48	; 0x30
 8005e90:	2a09      	cmp	r2, #9
 8005e92:	d903      	bls.n	8005e9c <_svfiprintf_r+0x1a8>
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d0c5      	beq.n	8005e24 <_svfiprintf_r+0x130>
 8005e98:	9105      	str	r1, [sp, #20]
 8005e9a:	e7c3      	b.n	8005e24 <_svfiprintf_r+0x130>
 8005e9c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005ea0:	4604      	mov	r4, r0
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	e7f0      	b.n	8005e88 <_svfiprintf_r+0x194>
 8005ea6:	ab03      	add	r3, sp, #12
 8005ea8:	9300      	str	r3, [sp, #0]
 8005eaa:	462a      	mov	r2, r5
 8005eac:	4b0f      	ldr	r3, [pc, #60]	; (8005eec <_svfiprintf_r+0x1f8>)
 8005eae:	a904      	add	r1, sp, #16
 8005eb0:	4638      	mov	r0, r7
 8005eb2:	f3af 8000 	nop.w
 8005eb6:	1c42      	adds	r2, r0, #1
 8005eb8:	4606      	mov	r6, r0
 8005eba:	d1d6      	bne.n	8005e6a <_svfiprintf_r+0x176>
 8005ebc:	89ab      	ldrh	r3, [r5, #12]
 8005ebe:	065b      	lsls	r3, r3, #25
 8005ec0:	f53f af2c 	bmi.w	8005d1c <_svfiprintf_r+0x28>
 8005ec4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005ec6:	b01d      	add	sp, #116	; 0x74
 8005ec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ecc:	ab03      	add	r3, sp, #12
 8005ece:	9300      	str	r3, [sp, #0]
 8005ed0:	462a      	mov	r2, r5
 8005ed2:	4b06      	ldr	r3, [pc, #24]	; (8005eec <_svfiprintf_r+0x1f8>)
 8005ed4:	a904      	add	r1, sp, #16
 8005ed6:	4638      	mov	r0, r7
 8005ed8:	f000 f87a 	bl	8005fd0 <_printf_i>
 8005edc:	e7eb      	b.n	8005eb6 <_svfiprintf_r+0x1c2>
 8005ede:	bf00      	nop
 8005ee0:	08006fcc 	.word	0x08006fcc
 8005ee4:	08006fd6 	.word	0x08006fd6
 8005ee8:	00000000 	.word	0x00000000
 8005eec:	08005c3d 	.word	0x08005c3d
 8005ef0:	08006fd2 	.word	0x08006fd2

08005ef4 <_printf_common>:
 8005ef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ef8:	4616      	mov	r6, r2
 8005efa:	4699      	mov	r9, r3
 8005efc:	688a      	ldr	r2, [r1, #8]
 8005efe:	690b      	ldr	r3, [r1, #16]
 8005f00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005f04:	4293      	cmp	r3, r2
 8005f06:	bfb8      	it	lt
 8005f08:	4613      	movlt	r3, r2
 8005f0a:	6033      	str	r3, [r6, #0]
 8005f0c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005f10:	4607      	mov	r7, r0
 8005f12:	460c      	mov	r4, r1
 8005f14:	b10a      	cbz	r2, 8005f1a <_printf_common+0x26>
 8005f16:	3301      	adds	r3, #1
 8005f18:	6033      	str	r3, [r6, #0]
 8005f1a:	6823      	ldr	r3, [r4, #0]
 8005f1c:	0699      	lsls	r1, r3, #26
 8005f1e:	bf42      	ittt	mi
 8005f20:	6833      	ldrmi	r3, [r6, #0]
 8005f22:	3302      	addmi	r3, #2
 8005f24:	6033      	strmi	r3, [r6, #0]
 8005f26:	6825      	ldr	r5, [r4, #0]
 8005f28:	f015 0506 	ands.w	r5, r5, #6
 8005f2c:	d106      	bne.n	8005f3c <_printf_common+0x48>
 8005f2e:	f104 0a19 	add.w	sl, r4, #25
 8005f32:	68e3      	ldr	r3, [r4, #12]
 8005f34:	6832      	ldr	r2, [r6, #0]
 8005f36:	1a9b      	subs	r3, r3, r2
 8005f38:	42ab      	cmp	r3, r5
 8005f3a:	dc26      	bgt.n	8005f8a <_printf_common+0x96>
 8005f3c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005f40:	1e13      	subs	r3, r2, #0
 8005f42:	6822      	ldr	r2, [r4, #0]
 8005f44:	bf18      	it	ne
 8005f46:	2301      	movne	r3, #1
 8005f48:	0692      	lsls	r2, r2, #26
 8005f4a:	d42b      	bmi.n	8005fa4 <_printf_common+0xb0>
 8005f4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005f50:	4649      	mov	r1, r9
 8005f52:	4638      	mov	r0, r7
 8005f54:	47c0      	blx	r8
 8005f56:	3001      	adds	r0, #1
 8005f58:	d01e      	beq.n	8005f98 <_printf_common+0xa4>
 8005f5a:	6823      	ldr	r3, [r4, #0]
 8005f5c:	68e5      	ldr	r5, [r4, #12]
 8005f5e:	6832      	ldr	r2, [r6, #0]
 8005f60:	f003 0306 	and.w	r3, r3, #6
 8005f64:	2b04      	cmp	r3, #4
 8005f66:	bf08      	it	eq
 8005f68:	1aad      	subeq	r5, r5, r2
 8005f6a:	68a3      	ldr	r3, [r4, #8]
 8005f6c:	6922      	ldr	r2, [r4, #16]
 8005f6e:	bf0c      	ite	eq
 8005f70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f74:	2500      	movne	r5, #0
 8005f76:	4293      	cmp	r3, r2
 8005f78:	bfc4      	itt	gt
 8005f7a:	1a9b      	subgt	r3, r3, r2
 8005f7c:	18ed      	addgt	r5, r5, r3
 8005f7e:	2600      	movs	r6, #0
 8005f80:	341a      	adds	r4, #26
 8005f82:	42b5      	cmp	r5, r6
 8005f84:	d11a      	bne.n	8005fbc <_printf_common+0xc8>
 8005f86:	2000      	movs	r0, #0
 8005f88:	e008      	b.n	8005f9c <_printf_common+0xa8>
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	4652      	mov	r2, sl
 8005f8e:	4649      	mov	r1, r9
 8005f90:	4638      	mov	r0, r7
 8005f92:	47c0      	blx	r8
 8005f94:	3001      	adds	r0, #1
 8005f96:	d103      	bne.n	8005fa0 <_printf_common+0xac>
 8005f98:	f04f 30ff 	mov.w	r0, #4294967295
 8005f9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fa0:	3501      	adds	r5, #1
 8005fa2:	e7c6      	b.n	8005f32 <_printf_common+0x3e>
 8005fa4:	18e1      	adds	r1, r4, r3
 8005fa6:	1c5a      	adds	r2, r3, #1
 8005fa8:	2030      	movs	r0, #48	; 0x30
 8005faa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005fae:	4422      	add	r2, r4
 8005fb0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005fb4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005fb8:	3302      	adds	r3, #2
 8005fba:	e7c7      	b.n	8005f4c <_printf_common+0x58>
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	4622      	mov	r2, r4
 8005fc0:	4649      	mov	r1, r9
 8005fc2:	4638      	mov	r0, r7
 8005fc4:	47c0      	blx	r8
 8005fc6:	3001      	adds	r0, #1
 8005fc8:	d0e6      	beq.n	8005f98 <_printf_common+0xa4>
 8005fca:	3601      	adds	r6, #1
 8005fcc:	e7d9      	b.n	8005f82 <_printf_common+0x8e>
	...

08005fd0 <_printf_i>:
 8005fd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005fd4:	460c      	mov	r4, r1
 8005fd6:	4691      	mov	r9, r2
 8005fd8:	7e27      	ldrb	r7, [r4, #24]
 8005fda:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005fdc:	2f78      	cmp	r7, #120	; 0x78
 8005fde:	4680      	mov	r8, r0
 8005fe0:	469a      	mov	sl, r3
 8005fe2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005fe6:	d807      	bhi.n	8005ff8 <_printf_i+0x28>
 8005fe8:	2f62      	cmp	r7, #98	; 0x62
 8005fea:	d80a      	bhi.n	8006002 <_printf_i+0x32>
 8005fec:	2f00      	cmp	r7, #0
 8005fee:	f000 80d8 	beq.w	80061a2 <_printf_i+0x1d2>
 8005ff2:	2f58      	cmp	r7, #88	; 0x58
 8005ff4:	f000 80a3 	beq.w	800613e <_printf_i+0x16e>
 8005ff8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005ffc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006000:	e03a      	b.n	8006078 <_printf_i+0xa8>
 8006002:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006006:	2b15      	cmp	r3, #21
 8006008:	d8f6      	bhi.n	8005ff8 <_printf_i+0x28>
 800600a:	a001      	add	r0, pc, #4	; (adr r0, 8006010 <_printf_i+0x40>)
 800600c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006010:	08006069 	.word	0x08006069
 8006014:	0800607d 	.word	0x0800607d
 8006018:	08005ff9 	.word	0x08005ff9
 800601c:	08005ff9 	.word	0x08005ff9
 8006020:	08005ff9 	.word	0x08005ff9
 8006024:	08005ff9 	.word	0x08005ff9
 8006028:	0800607d 	.word	0x0800607d
 800602c:	08005ff9 	.word	0x08005ff9
 8006030:	08005ff9 	.word	0x08005ff9
 8006034:	08005ff9 	.word	0x08005ff9
 8006038:	08005ff9 	.word	0x08005ff9
 800603c:	08006189 	.word	0x08006189
 8006040:	080060ad 	.word	0x080060ad
 8006044:	0800616b 	.word	0x0800616b
 8006048:	08005ff9 	.word	0x08005ff9
 800604c:	08005ff9 	.word	0x08005ff9
 8006050:	080061ab 	.word	0x080061ab
 8006054:	08005ff9 	.word	0x08005ff9
 8006058:	080060ad 	.word	0x080060ad
 800605c:	08005ff9 	.word	0x08005ff9
 8006060:	08005ff9 	.word	0x08005ff9
 8006064:	08006173 	.word	0x08006173
 8006068:	680b      	ldr	r3, [r1, #0]
 800606a:	1d1a      	adds	r2, r3, #4
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	600a      	str	r2, [r1, #0]
 8006070:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006074:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006078:	2301      	movs	r3, #1
 800607a:	e0a3      	b.n	80061c4 <_printf_i+0x1f4>
 800607c:	6825      	ldr	r5, [r4, #0]
 800607e:	6808      	ldr	r0, [r1, #0]
 8006080:	062e      	lsls	r6, r5, #24
 8006082:	f100 0304 	add.w	r3, r0, #4
 8006086:	d50a      	bpl.n	800609e <_printf_i+0xce>
 8006088:	6805      	ldr	r5, [r0, #0]
 800608a:	600b      	str	r3, [r1, #0]
 800608c:	2d00      	cmp	r5, #0
 800608e:	da03      	bge.n	8006098 <_printf_i+0xc8>
 8006090:	232d      	movs	r3, #45	; 0x2d
 8006092:	426d      	negs	r5, r5
 8006094:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006098:	485e      	ldr	r0, [pc, #376]	; (8006214 <_printf_i+0x244>)
 800609a:	230a      	movs	r3, #10
 800609c:	e019      	b.n	80060d2 <_printf_i+0x102>
 800609e:	f015 0f40 	tst.w	r5, #64	; 0x40
 80060a2:	6805      	ldr	r5, [r0, #0]
 80060a4:	600b      	str	r3, [r1, #0]
 80060a6:	bf18      	it	ne
 80060a8:	b22d      	sxthne	r5, r5
 80060aa:	e7ef      	b.n	800608c <_printf_i+0xbc>
 80060ac:	680b      	ldr	r3, [r1, #0]
 80060ae:	6825      	ldr	r5, [r4, #0]
 80060b0:	1d18      	adds	r0, r3, #4
 80060b2:	6008      	str	r0, [r1, #0]
 80060b4:	0628      	lsls	r0, r5, #24
 80060b6:	d501      	bpl.n	80060bc <_printf_i+0xec>
 80060b8:	681d      	ldr	r5, [r3, #0]
 80060ba:	e002      	b.n	80060c2 <_printf_i+0xf2>
 80060bc:	0669      	lsls	r1, r5, #25
 80060be:	d5fb      	bpl.n	80060b8 <_printf_i+0xe8>
 80060c0:	881d      	ldrh	r5, [r3, #0]
 80060c2:	4854      	ldr	r0, [pc, #336]	; (8006214 <_printf_i+0x244>)
 80060c4:	2f6f      	cmp	r7, #111	; 0x6f
 80060c6:	bf0c      	ite	eq
 80060c8:	2308      	moveq	r3, #8
 80060ca:	230a      	movne	r3, #10
 80060cc:	2100      	movs	r1, #0
 80060ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80060d2:	6866      	ldr	r6, [r4, #4]
 80060d4:	60a6      	str	r6, [r4, #8]
 80060d6:	2e00      	cmp	r6, #0
 80060d8:	bfa2      	ittt	ge
 80060da:	6821      	ldrge	r1, [r4, #0]
 80060dc:	f021 0104 	bicge.w	r1, r1, #4
 80060e0:	6021      	strge	r1, [r4, #0]
 80060e2:	b90d      	cbnz	r5, 80060e8 <_printf_i+0x118>
 80060e4:	2e00      	cmp	r6, #0
 80060e6:	d04d      	beq.n	8006184 <_printf_i+0x1b4>
 80060e8:	4616      	mov	r6, r2
 80060ea:	fbb5 f1f3 	udiv	r1, r5, r3
 80060ee:	fb03 5711 	mls	r7, r3, r1, r5
 80060f2:	5dc7      	ldrb	r7, [r0, r7]
 80060f4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80060f8:	462f      	mov	r7, r5
 80060fa:	42bb      	cmp	r3, r7
 80060fc:	460d      	mov	r5, r1
 80060fe:	d9f4      	bls.n	80060ea <_printf_i+0x11a>
 8006100:	2b08      	cmp	r3, #8
 8006102:	d10b      	bne.n	800611c <_printf_i+0x14c>
 8006104:	6823      	ldr	r3, [r4, #0]
 8006106:	07df      	lsls	r7, r3, #31
 8006108:	d508      	bpl.n	800611c <_printf_i+0x14c>
 800610a:	6923      	ldr	r3, [r4, #16]
 800610c:	6861      	ldr	r1, [r4, #4]
 800610e:	4299      	cmp	r1, r3
 8006110:	bfde      	ittt	le
 8006112:	2330      	movle	r3, #48	; 0x30
 8006114:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006118:	f106 36ff 	addle.w	r6, r6, #4294967295
 800611c:	1b92      	subs	r2, r2, r6
 800611e:	6122      	str	r2, [r4, #16]
 8006120:	f8cd a000 	str.w	sl, [sp]
 8006124:	464b      	mov	r3, r9
 8006126:	aa03      	add	r2, sp, #12
 8006128:	4621      	mov	r1, r4
 800612a:	4640      	mov	r0, r8
 800612c:	f7ff fee2 	bl	8005ef4 <_printf_common>
 8006130:	3001      	adds	r0, #1
 8006132:	d14c      	bne.n	80061ce <_printf_i+0x1fe>
 8006134:	f04f 30ff 	mov.w	r0, #4294967295
 8006138:	b004      	add	sp, #16
 800613a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800613e:	4835      	ldr	r0, [pc, #212]	; (8006214 <_printf_i+0x244>)
 8006140:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006144:	6823      	ldr	r3, [r4, #0]
 8006146:	680e      	ldr	r6, [r1, #0]
 8006148:	061f      	lsls	r7, r3, #24
 800614a:	f856 5b04 	ldr.w	r5, [r6], #4
 800614e:	600e      	str	r6, [r1, #0]
 8006150:	d514      	bpl.n	800617c <_printf_i+0x1ac>
 8006152:	07d9      	lsls	r1, r3, #31
 8006154:	bf44      	itt	mi
 8006156:	f043 0320 	orrmi.w	r3, r3, #32
 800615a:	6023      	strmi	r3, [r4, #0]
 800615c:	b91d      	cbnz	r5, 8006166 <_printf_i+0x196>
 800615e:	6823      	ldr	r3, [r4, #0]
 8006160:	f023 0320 	bic.w	r3, r3, #32
 8006164:	6023      	str	r3, [r4, #0]
 8006166:	2310      	movs	r3, #16
 8006168:	e7b0      	b.n	80060cc <_printf_i+0xfc>
 800616a:	6823      	ldr	r3, [r4, #0]
 800616c:	f043 0320 	orr.w	r3, r3, #32
 8006170:	6023      	str	r3, [r4, #0]
 8006172:	2378      	movs	r3, #120	; 0x78
 8006174:	4828      	ldr	r0, [pc, #160]	; (8006218 <_printf_i+0x248>)
 8006176:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800617a:	e7e3      	b.n	8006144 <_printf_i+0x174>
 800617c:	065e      	lsls	r6, r3, #25
 800617e:	bf48      	it	mi
 8006180:	b2ad      	uxthmi	r5, r5
 8006182:	e7e6      	b.n	8006152 <_printf_i+0x182>
 8006184:	4616      	mov	r6, r2
 8006186:	e7bb      	b.n	8006100 <_printf_i+0x130>
 8006188:	680b      	ldr	r3, [r1, #0]
 800618a:	6826      	ldr	r6, [r4, #0]
 800618c:	6960      	ldr	r0, [r4, #20]
 800618e:	1d1d      	adds	r5, r3, #4
 8006190:	600d      	str	r5, [r1, #0]
 8006192:	0635      	lsls	r5, r6, #24
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	d501      	bpl.n	800619c <_printf_i+0x1cc>
 8006198:	6018      	str	r0, [r3, #0]
 800619a:	e002      	b.n	80061a2 <_printf_i+0x1d2>
 800619c:	0671      	lsls	r1, r6, #25
 800619e:	d5fb      	bpl.n	8006198 <_printf_i+0x1c8>
 80061a0:	8018      	strh	r0, [r3, #0]
 80061a2:	2300      	movs	r3, #0
 80061a4:	6123      	str	r3, [r4, #16]
 80061a6:	4616      	mov	r6, r2
 80061a8:	e7ba      	b.n	8006120 <_printf_i+0x150>
 80061aa:	680b      	ldr	r3, [r1, #0]
 80061ac:	1d1a      	adds	r2, r3, #4
 80061ae:	600a      	str	r2, [r1, #0]
 80061b0:	681e      	ldr	r6, [r3, #0]
 80061b2:	6862      	ldr	r2, [r4, #4]
 80061b4:	2100      	movs	r1, #0
 80061b6:	4630      	mov	r0, r6
 80061b8:	f7fa f80a 	bl	80001d0 <memchr>
 80061bc:	b108      	cbz	r0, 80061c2 <_printf_i+0x1f2>
 80061be:	1b80      	subs	r0, r0, r6
 80061c0:	6060      	str	r0, [r4, #4]
 80061c2:	6863      	ldr	r3, [r4, #4]
 80061c4:	6123      	str	r3, [r4, #16]
 80061c6:	2300      	movs	r3, #0
 80061c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061cc:	e7a8      	b.n	8006120 <_printf_i+0x150>
 80061ce:	6923      	ldr	r3, [r4, #16]
 80061d0:	4632      	mov	r2, r6
 80061d2:	4649      	mov	r1, r9
 80061d4:	4640      	mov	r0, r8
 80061d6:	47d0      	blx	sl
 80061d8:	3001      	adds	r0, #1
 80061da:	d0ab      	beq.n	8006134 <_printf_i+0x164>
 80061dc:	6823      	ldr	r3, [r4, #0]
 80061de:	079b      	lsls	r3, r3, #30
 80061e0:	d413      	bmi.n	800620a <_printf_i+0x23a>
 80061e2:	68e0      	ldr	r0, [r4, #12]
 80061e4:	9b03      	ldr	r3, [sp, #12]
 80061e6:	4298      	cmp	r0, r3
 80061e8:	bfb8      	it	lt
 80061ea:	4618      	movlt	r0, r3
 80061ec:	e7a4      	b.n	8006138 <_printf_i+0x168>
 80061ee:	2301      	movs	r3, #1
 80061f0:	4632      	mov	r2, r6
 80061f2:	4649      	mov	r1, r9
 80061f4:	4640      	mov	r0, r8
 80061f6:	47d0      	blx	sl
 80061f8:	3001      	adds	r0, #1
 80061fa:	d09b      	beq.n	8006134 <_printf_i+0x164>
 80061fc:	3501      	adds	r5, #1
 80061fe:	68e3      	ldr	r3, [r4, #12]
 8006200:	9903      	ldr	r1, [sp, #12]
 8006202:	1a5b      	subs	r3, r3, r1
 8006204:	42ab      	cmp	r3, r5
 8006206:	dcf2      	bgt.n	80061ee <_printf_i+0x21e>
 8006208:	e7eb      	b.n	80061e2 <_printf_i+0x212>
 800620a:	2500      	movs	r5, #0
 800620c:	f104 0619 	add.w	r6, r4, #25
 8006210:	e7f5      	b.n	80061fe <_printf_i+0x22e>
 8006212:	bf00      	nop
 8006214:	08006fdd 	.word	0x08006fdd
 8006218:	08006fee 	.word	0x08006fee

0800621c <memmove>:
 800621c:	4288      	cmp	r0, r1
 800621e:	b510      	push	{r4, lr}
 8006220:	eb01 0402 	add.w	r4, r1, r2
 8006224:	d902      	bls.n	800622c <memmove+0x10>
 8006226:	4284      	cmp	r4, r0
 8006228:	4623      	mov	r3, r4
 800622a:	d807      	bhi.n	800623c <memmove+0x20>
 800622c:	1e43      	subs	r3, r0, #1
 800622e:	42a1      	cmp	r1, r4
 8006230:	d008      	beq.n	8006244 <memmove+0x28>
 8006232:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006236:	f803 2f01 	strb.w	r2, [r3, #1]!
 800623a:	e7f8      	b.n	800622e <memmove+0x12>
 800623c:	4402      	add	r2, r0
 800623e:	4601      	mov	r1, r0
 8006240:	428a      	cmp	r2, r1
 8006242:	d100      	bne.n	8006246 <memmove+0x2a>
 8006244:	bd10      	pop	{r4, pc}
 8006246:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800624a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800624e:	e7f7      	b.n	8006240 <memmove+0x24>

08006250 <_free_r>:
 8006250:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006252:	2900      	cmp	r1, #0
 8006254:	d048      	beq.n	80062e8 <_free_r+0x98>
 8006256:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800625a:	9001      	str	r0, [sp, #4]
 800625c:	2b00      	cmp	r3, #0
 800625e:	f1a1 0404 	sub.w	r4, r1, #4
 8006262:	bfb8      	it	lt
 8006264:	18e4      	addlt	r4, r4, r3
 8006266:	f000 f8d3 	bl	8006410 <__malloc_lock>
 800626a:	4a20      	ldr	r2, [pc, #128]	; (80062ec <_free_r+0x9c>)
 800626c:	9801      	ldr	r0, [sp, #4]
 800626e:	6813      	ldr	r3, [r2, #0]
 8006270:	4615      	mov	r5, r2
 8006272:	b933      	cbnz	r3, 8006282 <_free_r+0x32>
 8006274:	6063      	str	r3, [r4, #4]
 8006276:	6014      	str	r4, [r2, #0]
 8006278:	b003      	add	sp, #12
 800627a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800627e:	f000 b8cd 	b.w	800641c <__malloc_unlock>
 8006282:	42a3      	cmp	r3, r4
 8006284:	d90b      	bls.n	800629e <_free_r+0x4e>
 8006286:	6821      	ldr	r1, [r4, #0]
 8006288:	1862      	adds	r2, r4, r1
 800628a:	4293      	cmp	r3, r2
 800628c:	bf04      	itt	eq
 800628e:	681a      	ldreq	r2, [r3, #0]
 8006290:	685b      	ldreq	r3, [r3, #4]
 8006292:	6063      	str	r3, [r4, #4]
 8006294:	bf04      	itt	eq
 8006296:	1852      	addeq	r2, r2, r1
 8006298:	6022      	streq	r2, [r4, #0]
 800629a:	602c      	str	r4, [r5, #0]
 800629c:	e7ec      	b.n	8006278 <_free_r+0x28>
 800629e:	461a      	mov	r2, r3
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	b10b      	cbz	r3, 80062a8 <_free_r+0x58>
 80062a4:	42a3      	cmp	r3, r4
 80062a6:	d9fa      	bls.n	800629e <_free_r+0x4e>
 80062a8:	6811      	ldr	r1, [r2, #0]
 80062aa:	1855      	adds	r5, r2, r1
 80062ac:	42a5      	cmp	r5, r4
 80062ae:	d10b      	bne.n	80062c8 <_free_r+0x78>
 80062b0:	6824      	ldr	r4, [r4, #0]
 80062b2:	4421      	add	r1, r4
 80062b4:	1854      	adds	r4, r2, r1
 80062b6:	42a3      	cmp	r3, r4
 80062b8:	6011      	str	r1, [r2, #0]
 80062ba:	d1dd      	bne.n	8006278 <_free_r+0x28>
 80062bc:	681c      	ldr	r4, [r3, #0]
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	6053      	str	r3, [r2, #4]
 80062c2:	4421      	add	r1, r4
 80062c4:	6011      	str	r1, [r2, #0]
 80062c6:	e7d7      	b.n	8006278 <_free_r+0x28>
 80062c8:	d902      	bls.n	80062d0 <_free_r+0x80>
 80062ca:	230c      	movs	r3, #12
 80062cc:	6003      	str	r3, [r0, #0]
 80062ce:	e7d3      	b.n	8006278 <_free_r+0x28>
 80062d0:	6825      	ldr	r5, [r4, #0]
 80062d2:	1961      	adds	r1, r4, r5
 80062d4:	428b      	cmp	r3, r1
 80062d6:	bf04      	itt	eq
 80062d8:	6819      	ldreq	r1, [r3, #0]
 80062da:	685b      	ldreq	r3, [r3, #4]
 80062dc:	6063      	str	r3, [r4, #4]
 80062de:	bf04      	itt	eq
 80062e0:	1949      	addeq	r1, r1, r5
 80062e2:	6021      	streq	r1, [r4, #0]
 80062e4:	6054      	str	r4, [r2, #4]
 80062e6:	e7c7      	b.n	8006278 <_free_r+0x28>
 80062e8:	b003      	add	sp, #12
 80062ea:	bd30      	pop	{r4, r5, pc}
 80062ec:	200049a4 	.word	0x200049a4

080062f0 <_malloc_r>:
 80062f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062f2:	1ccd      	adds	r5, r1, #3
 80062f4:	f025 0503 	bic.w	r5, r5, #3
 80062f8:	3508      	adds	r5, #8
 80062fa:	2d0c      	cmp	r5, #12
 80062fc:	bf38      	it	cc
 80062fe:	250c      	movcc	r5, #12
 8006300:	2d00      	cmp	r5, #0
 8006302:	4606      	mov	r6, r0
 8006304:	db01      	blt.n	800630a <_malloc_r+0x1a>
 8006306:	42a9      	cmp	r1, r5
 8006308:	d903      	bls.n	8006312 <_malloc_r+0x22>
 800630a:	230c      	movs	r3, #12
 800630c:	6033      	str	r3, [r6, #0]
 800630e:	2000      	movs	r0, #0
 8006310:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006312:	f000 f87d 	bl	8006410 <__malloc_lock>
 8006316:	4921      	ldr	r1, [pc, #132]	; (800639c <_malloc_r+0xac>)
 8006318:	680a      	ldr	r2, [r1, #0]
 800631a:	4614      	mov	r4, r2
 800631c:	b99c      	cbnz	r4, 8006346 <_malloc_r+0x56>
 800631e:	4f20      	ldr	r7, [pc, #128]	; (80063a0 <_malloc_r+0xb0>)
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	b923      	cbnz	r3, 800632e <_malloc_r+0x3e>
 8006324:	4621      	mov	r1, r4
 8006326:	4630      	mov	r0, r6
 8006328:	f000 f862 	bl	80063f0 <_sbrk_r>
 800632c:	6038      	str	r0, [r7, #0]
 800632e:	4629      	mov	r1, r5
 8006330:	4630      	mov	r0, r6
 8006332:	f000 f85d 	bl	80063f0 <_sbrk_r>
 8006336:	1c43      	adds	r3, r0, #1
 8006338:	d123      	bne.n	8006382 <_malloc_r+0x92>
 800633a:	230c      	movs	r3, #12
 800633c:	6033      	str	r3, [r6, #0]
 800633e:	4630      	mov	r0, r6
 8006340:	f000 f86c 	bl	800641c <__malloc_unlock>
 8006344:	e7e3      	b.n	800630e <_malloc_r+0x1e>
 8006346:	6823      	ldr	r3, [r4, #0]
 8006348:	1b5b      	subs	r3, r3, r5
 800634a:	d417      	bmi.n	800637c <_malloc_r+0x8c>
 800634c:	2b0b      	cmp	r3, #11
 800634e:	d903      	bls.n	8006358 <_malloc_r+0x68>
 8006350:	6023      	str	r3, [r4, #0]
 8006352:	441c      	add	r4, r3
 8006354:	6025      	str	r5, [r4, #0]
 8006356:	e004      	b.n	8006362 <_malloc_r+0x72>
 8006358:	6863      	ldr	r3, [r4, #4]
 800635a:	42a2      	cmp	r2, r4
 800635c:	bf0c      	ite	eq
 800635e:	600b      	streq	r3, [r1, #0]
 8006360:	6053      	strne	r3, [r2, #4]
 8006362:	4630      	mov	r0, r6
 8006364:	f000 f85a 	bl	800641c <__malloc_unlock>
 8006368:	f104 000b 	add.w	r0, r4, #11
 800636c:	1d23      	adds	r3, r4, #4
 800636e:	f020 0007 	bic.w	r0, r0, #7
 8006372:	1ac2      	subs	r2, r0, r3
 8006374:	d0cc      	beq.n	8006310 <_malloc_r+0x20>
 8006376:	1a1b      	subs	r3, r3, r0
 8006378:	50a3      	str	r3, [r4, r2]
 800637a:	e7c9      	b.n	8006310 <_malloc_r+0x20>
 800637c:	4622      	mov	r2, r4
 800637e:	6864      	ldr	r4, [r4, #4]
 8006380:	e7cc      	b.n	800631c <_malloc_r+0x2c>
 8006382:	1cc4      	adds	r4, r0, #3
 8006384:	f024 0403 	bic.w	r4, r4, #3
 8006388:	42a0      	cmp	r0, r4
 800638a:	d0e3      	beq.n	8006354 <_malloc_r+0x64>
 800638c:	1a21      	subs	r1, r4, r0
 800638e:	4630      	mov	r0, r6
 8006390:	f000 f82e 	bl	80063f0 <_sbrk_r>
 8006394:	3001      	adds	r0, #1
 8006396:	d1dd      	bne.n	8006354 <_malloc_r+0x64>
 8006398:	e7cf      	b.n	800633a <_malloc_r+0x4a>
 800639a:	bf00      	nop
 800639c:	200049a4 	.word	0x200049a4
 80063a0:	200049a8 	.word	0x200049a8

080063a4 <_realloc_r>:
 80063a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063a6:	4607      	mov	r7, r0
 80063a8:	4614      	mov	r4, r2
 80063aa:	460e      	mov	r6, r1
 80063ac:	b921      	cbnz	r1, 80063b8 <_realloc_r+0x14>
 80063ae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80063b2:	4611      	mov	r1, r2
 80063b4:	f7ff bf9c 	b.w	80062f0 <_malloc_r>
 80063b8:	b922      	cbnz	r2, 80063c4 <_realloc_r+0x20>
 80063ba:	f7ff ff49 	bl	8006250 <_free_r>
 80063be:	4625      	mov	r5, r4
 80063c0:	4628      	mov	r0, r5
 80063c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063c4:	f000 f830 	bl	8006428 <_malloc_usable_size_r>
 80063c8:	42a0      	cmp	r0, r4
 80063ca:	d20f      	bcs.n	80063ec <_realloc_r+0x48>
 80063cc:	4621      	mov	r1, r4
 80063ce:	4638      	mov	r0, r7
 80063d0:	f7ff ff8e 	bl	80062f0 <_malloc_r>
 80063d4:	4605      	mov	r5, r0
 80063d6:	2800      	cmp	r0, #0
 80063d8:	d0f2      	beq.n	80063c0 <_realloc_r+0x1c>
 80063da:	4631      	mov	r1, r6
 80063dc:	4622      	mov	r2, r4
 80063de:	f7ff fbf7 	bl	8005bd0 <memcpy>
 80063e2:	4631      	mov	r1, r6
 80063e4:	4638      	mov	r0, r7
 80063e6:	f7ff ff33 	bl	8006250 <_free_r>
 80063ea:	e7e9      	b.n	80063c0 <_realloc_r+0x1c>
 80063ec:	4635      	mov	r5, r6
 80063ee:	e7e7      	b.n	80063c0 <_realloc_r+0x1c>

080063f0 <_sbrk_r>:
 80063f0:	b538      	push	{r3, r4, r5, lr}
 80063f2:	4d06      	ldr	r5, [pc, #24]	; (800640c <_sbrk_r+0x1c>)
 80063f4:	2300      	movs	r3, #0
 80063f6:	4604      	mov	r4, r0
 80063f8:	4608      	mov	r0, r1
 80063fa:	602b      	str	r3, [r5, #0]
 80063fc:	f7fa fcaa 	bl	8000d54 <_sbrk>
 8006400:	1c43      	adds	r3, r0, #1
 8006402:	d102      	bne.n	800640a <_sbrk_r+0x1a>
 8006404:	682b      	ldr	r3, [r5, #0]
 8006406:	b103      	cbz	r3, 800640a <_sbrk_r+0x1a>
 8006408:	6023      	str	r3, [r4, #0]
 800640a:	bd38      	pop	{r3, r4, r5, pc}
 800640c:	20004e90 	.word	0x20004e90

08006410 <__malloc_lock>:
 8006410:	4801      	ldr	r0, [pc, #4]	; (8006418 <__malloc_lock+0x8>)
 8006412:	f000 b811 	b.w	8006438 <__retarget_lock_acquire_recursive>
 8006416:	bf00      	nop
 8006418:	20004e98 	.word	0x20004e98

0800641c <__malloc_unlock>:
 800641c:	4801      	ldr	r0, [pc, #4]	; (8006424 <__malloc_unlock+0x8>)
 800641e:	f000 b80c 	b.w	800643a <__retarget_lock_release_recursive>
 8006422:	bf00      	nop
 8006424:	20004e98 	.word	0x20004e98

08006428 <_malloc_usable_size_r>:
 8006428:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800642c:	1f18      	subs	r0, r3, #4
 800642e:	2b00      	cmp	r3, #0
 8006430:	bfbc      	itt	lt
 8006432:	580b      	ldrlt	r3, [r1, r0]
 8006434:	18c0      	addlt	r0, r0, r3
 8006436:	4770      	bx	lr

08006438 <__retarget_lock_acquire_recursive>:
 8006438:	4770      	bx	lr

0800643a <__retarget_lock_release_recursive>:
 800643a:	4770      	bx	lr

0800643c <_init>:
 800643c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800643e:	bf00      	nop
 8006440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006442:	bc08      	pop	{r3}
 8006444:	469e      	mov	lr, r3
 8006446:	4770      	bx	lr

08006448 <_fini>:
 8006448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800644a:	bf00      	nop
 800644c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800644e:	bc08      	pop	{r3}
 8006450:	469e      	mov	lr, r3
 8006452:	4770      	bx	lr
