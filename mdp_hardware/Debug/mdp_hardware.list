
mdp_hardware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a34  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bcc  08007bc4  08007bc4  00017bc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008790  08008790  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08008790  08008790  00018790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008798  08008798  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008798  08008798  00018798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800879c  0800879c  0001879c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080087a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00004f14  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004f88  20004f88  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c626  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000036f0  00000000  00000000  0003c6ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001578  00000000  00000000  0003fdc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001440  00000000  00000000  00041338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003a14  00000000  00000000  00042778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000188b0  00000000  00000000  0004618c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d5744  00000000  00000000  0005ea3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00134180  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005e20  00000000  00000000  001341d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007bac 	.word	0x08007bac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08007bac 	.word	0x08007bac

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056c:	f000 ff48 	bl	8001400 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000570:	f000 f854 	bl	800061c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000574:	f000 faca 	bl	8000b0c <MX_GPIO_Init>
  MX_TIM8_Init();
 8000578:	f000 f9f4 	bl	8000964 <MX_TIM8_Init>
  MX_TIM2_Init();
 800057c:	f000 f94a 	bl	8000814 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000580:	f000 f99c 	bl	80008bc <MX_TIM3_Init>
  MX_TIM1_Init();
 8000584:	f000 f8a8 	bl	80006d8 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8000588:	f000 fa96 	bl	8000ab8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  OLED_Init();
 800058c:	f006 fe22 	bl	80071d4 <OLED_Init>

  HAL_UART_Receive_IT(&huart3, (uint8_t*) aRxBuffer, 10);
 8000590:	220a      	movs	r2, #10
 8000592:	4914      	ldr	r1, [pc, #80]	; (80005e4 <main+0x7c>)
 8000594:	4814      	ldr	r0, [pc, #80]	; (80005e8 <main+0x80>)
 8000596:	f003 f80a 	bl	80035ae <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800059a:	f003 ff25 	bl	80043e8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800059e:	4a13      	ldr	r2, [pc, #76]	; (80005ec <main+0x84>)
 80005a0:	2100      	movs	r1, #0
 80005a2:	4813      	ldr	r0, [pc, #76]	; (80005f0 <main+0x88>)
 80005a4:	f003 ff6a 	bl	800447c <osThreadNew>
 80005a8:	4603      	mov	r3, r0
 80005aa:	4a12      	ldr	r2, [pc, #72]	; (80005f4 <main+0x8c>)
 80005ac:	6013      	str	r3, [r2, #0]

  /* creation of MotorTask */
  MotorTaskHandle = osThreadNew(motor, NULL, &MotorTask_attributes);
 80005ae:	4a12      	ldr	r2, [pc, #72]	; (80005f8 <main+0x90>)
 80005b0:	2100      	movs	r1, #0
 80005b2:	4812      	ldr	r0, [pc, #72]	; (80005fc <main+0x94>)
 80005b4:	f003 ff62 	bl	800447c <osThreadNew>
 80005b8:	4603      	mov	r3, r0
 80005ba:	4a11      	ldr	r2, [pc, #68]	; (8000600 <main+0x98>)
 80005bc:	6013      	str	r3, [r2, #0]

  /* creation of showOLED */
  showOLEDHandle = osThreadNew(showoled, NULL, &showOLED_attributes);
 80005be:	4a11      	ldr	r2, [pc, #68]	; (8000604 <main+0x9c>)
 80005c0:	2100      	movs	r1, #0
 80005c2:	4811      	ldr	r0, [pc, #68]	; (8000608 <main+0xa0>)
 80005c4:	f003 ff5a 	bl	800447c <osThreadNew>
 80005c8:	4603      	mov	r3, r0
 80005ca:	4a10      	ldr	r2, [pc, #64]	; (800060c <main+0xa4>)
 80005cc:	6013      	str	r3, [r2, #0]

  /* creation of EncoderTask */
  EncoderTaskHandle = osThreadNew(encoder_task, NULL, &EncoderTask_attributes);
 80005ce:	4a10      	ldr	r2, [pc, #64]	; (8000610 <main+0xa8>)
 80005d0:	2100      	movs	r1, #0
 80005d2:	4810      	ldr	r0, [pc, #64]	; (8000614 <main+0xac>)
 80005d4:	f003 ff52 	bl	800447c <osThreadNew>
 80005d8:	4603      	mov	r3, r0
 80005da:	4a0f      	ldr	r2, [pc, #60]	; (8000618 <main+0xb0>)
 80005dc:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005de:	f003 ff27 	bl	8004430 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005e2:	e7fe      	b.n	80005e2 <main+0x7a>
 80005e4:	20004ad4 	.word	0x20004ad4
 80005e8:	200049f8 	.word	0x200049f8
 80005ec:	08007c50 	.word	0x08007c50
 80005f0:	08000c21 	.word	0x08000c21
 80005f4:	200049ac 	.word	0x200049ac
 80005f8:	08007c74 	.word	0x08007c74
 80005fc:	08000c6d 	.word	0x08000c6d
 8000600:	20004a3c 	.word	0x20004a3c
 8000604:	08007c98 	.word	0x08007c98
 8000608:	08000e51 	.word	0x08000e51
 800060c:	20004b30 	.word	0x20004b30
 8000610:	08007cbc 	.word	0x08007cbc
 8000614:	08000ea9 	.word	0x08000ea9
 8000618:	20004a40 	.word	0x20004a40

0800061c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b094      	sub	sp, #80	; 0x50
 8000620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000622:	f107 0320 	add.w	r3, r7, #32
 8000626:	2230      	movs	r2, #48	; 0x30
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f006 fe96 	bl	800735c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000630:	f107 030c 	add.w	r3, r7, #12
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]
 800063e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000640:	2300      	movs	r3, #0
 8000642:	60bb      	str	r3, [r7, #8]
 8000644:	4b22      	ldr	r3, [pc, #136]	; (80006d0 <SystemClock_Config+0xb4>)
 8000646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000648:	4a21      	ldr	r2, [pc, #132]	; (80006d0 <SystemClock_Config+0xb4>)
 800064a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800064e:	6413      	str	r3, [r2, #64]	; 0x40
 8000650:	4b1f      	ldr	r3, [pc, #124]	; (80006d0 <SystemClock_Config+0xb4>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000658:	60bb      	str	r3, [r7, #8]
 800065a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800065c:	2300      	movs	r3, #0
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	4b1c      	ldr	r3, [pc, #112]	; (80006d4 <SystemClock_Config+0xb8>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a1b      	ldr	r2, [pc, #108]	; (80006d4 <SystemClock_Config+0xb8>)
 8000666:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800066a:	6013      	str	r3, [r2, #0]
 800066c:	4b19      	ldr	r3, [pc, #100]	; (80006d4 <SystemClock_Config+0xb8>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000674:	607b      	str	r3, [r7, #4]
 8000676:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000678:	2302      	movs	r3, #2
 800067a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800067c:	2301      	movs	r3, #1
 800067e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000680:	2310      	movs	r3, #16
 8000682:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000684:	2300      	movs	r3, #0
 8000686:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000688:	f107 0320 	add.w	r3, r7, #32
 800068c:	4618      	mov	r0, r3
 800068e:	f001 fae9 	bl	8001c64 <HAL_RCC_OscConfig>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000698:	f000 fc5e 	bl	8000f58 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069c:	230f      	movs	r3, #15
 800069e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006a0:	2300      	movs	r3, #0
 80006a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a4:	2300      	movs	r3, #0
 80006a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006a8:	2300      	movs	r3, #0
 80006aa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006b0:	f107 030c 	add.w	r3, r7, #12
 80006b4:	2100      	movs	r1, #0
 80006b6:	4618      	mov	r0, r3
 80006b8:	f001 fd4c 	bl	8002154 <HAL_RCC_ClockConfig>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80006c2:	f000 fc49 	bl	8000f58 <Error_Handler>
  }
}
 80006c6:	bf00      	nop
 80006c8:	3750      	adds	r7, #80	; 0x50
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40023800 	.word	0x40023800
 80006d4:	40007000 	.word	0x40007000

080006d8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b096      	sub	sp, #88	; 0x58
 80006dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006de:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80006e2:	2200      	movs	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]
 80006e6:	605a      	str	r2, [r3, #4]
 80006e8:	609a      	str	r2, [r3, #8]
 80006ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006ec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
 80006fe:	605a      	str	r2, [r3, #4]
 8000700:	609a      	str	r2, [r3, #8]
 8000702:	60da      	str	r2, [r3, #12]
 8000704:	611a      	str	r2, [r3, #16]
 8000706:	615a      	str	r2, [r3, #20]
 8000708:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800070a:	1d3b      	adds	r3, r7, #4
 800070c:	2220      	movs	r2, #32
 800070e:	2100      	movs	r1, #0
 8000710:	4618      	mov	r0, r3
 8000712:	f006 fe23 	bl	800735c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000716:	4b3d      	ldr	r3, [pc, #244]	; (800080c <MX_TIM1_Init+0x134>)
 8000718:	4a3d      	ldr	r2, [pc, #244]	; (8000810 <MX_TIM1_Init+0x138>)
 800071a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160;
 800071c:	4b3b      	ldr	r3, [pc, #236]	; (800080c <MX_TIM1_Init+0x134>)
 800071e:	22a0      	movs	r2, #160	; 0xa0
 8000720:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000722:	4b3a      	ldr	r3, [pc, #232]	; (800080c <MX_TIM1_Init+0x134>)
 8000724:	2200      	movs	r2, #0
 8000726:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8000728:	4b38      	ldr	r3, [pc, #224]	; (800080c <MX_TIM1_Init+0x134>)
 800072a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800072e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000730:	4b36      	ldr	r3, [pc, #216]	; (800080c <MX_TIM1_Init+0x134>)
 8000732:	2200      	movs	r2, #0
 8000734:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000736:	4b35      	ldr	r3, [pc, #212]	; (800080c <MX_TIM1_Init+0x134>)
 8000738:	2200      	movs	r2, #0
 800073a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800073c:	4b33      	ldr	r3, [pc, #204]	; (800080c <MX_TIM1_Init+0x134>)
 800073e:	2280      	movs	r2, #128	; 0x80
 8000740:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000742:	4832      	ldr	r0, [pc, #200]	; (800080c <MX_TIM1_Init+0x134>)
 8000744:	f001 fed6 	bl	80024f4 <HAL_TIM_Base_Init>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800074e:	f000 fc03 	bl	8000f58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000752:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000756:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000758:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800075c:	4619      	mov	r1, r3
 800075e:	482b      	ldr	r0, [pc, #172]	; (800080c <MX_TIM1_Init+0x134>)
 8000760:	f002 f9a0 	bl	8002aa4 <HAL_TIM_ConfigClockSource>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800076a:	f000 fbf5 	bl	8000f58 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800076e:	4827      	ldr	r0, [pc, #156]	; (800080c <MX_TIM1_Init+0x134>)
 8000770:	f001 ff0f 	bl	8002592 <HAL_TIM_PWM_Init>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800077a:	f000 fbed 	bl	8000f58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800077e:	2300      	movs	r3, #0
 8000780:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000782:	2300      	movs	r3, #0
 8000784:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000786:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800078a:	4619      	mov	r1, r3
 800078c:	481f      	ldr	r0, [pc, #124]	; (800080c <MX_TIM1_Init+0x134>)
 800078e:	f002 fd61 	bl	8003254 <HAL_TIMEx_MasterConfigSynchronization>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000798:	f000 fbde 	bl	8000f58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800079c:	2360      	movs	r3, #96	; 0x60
 800079e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80007a0:	2300      	movs	r3, #0
 80007a2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007a4:	2300      	movs	r3, #0
 80007a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007a8:	2300      	movs	r3, #0
 80007aa:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007ac:	2300      	movs	r3, #0
 80007ae:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007b0:	2300      	movs	r3, #0
 80007b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80007b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007b8:	220c      	movs	r2, #12
 80007ba:	4619      	mov	r1, r3
 80007bc:	4813      	ldr	r0, [pc, #76]	; (800080c <MX_TIM1_Init+0x134>)
 80007be:	f002 f8af 	bl	8002920 <HAL_TIM_PWM_ConfigChannel>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 80007c8:	f000 fbc6 	bl	8000f58 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007cc:	2300      	movs	r3, #0
 80007ce:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007d0:	2300      	movs	r3, #0
 80007d2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007d4:	2300      	movs	r3, #0
 80007d6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80007d8:	2300      	movs	r3, #0
 80007da:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007dc:	2300      	movs	r3, #0
 80007de:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007e4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007e6:	2300      	movs	r3, #0
 80007e8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80007ea:	1d3b      	adds	r3, r7, #4
 80007ec:	4619      	mov	r1, r3
 80007ee:	4807      	ldr	r0, [pc, #28]	; (800080c <MX_TIM1_Init+0x134>)
 80007f0:	f002 fdac 	bl	800334c <HAL_TIMEx_ConfigBreakDeadTime>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 80007fa:	f000 fbad 	bl	8000f58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80007fe:	4803      	ldr	r0, [pc, #12]	; (800080c <MX_TIM1_Init+0x134>)
 8000800:	f000 fcd4 	bl	80011ac <HAL_TIM_MspPostInit>

}
 8000804:	bf00      	nop
 8000806:	3758      	adds	r7, #88	; 0x58
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	20004a8c 	.word	0x20004a8c
 8000810:	40010000 	.word	0x40010000

08000814 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b08c      	sub	sp, #48	; 0x30
 8000818:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800081a:	f107 030c 	add.w	r3, r7, #12
 800081e:	2224      	movs	r2, #36	; 0x24
 8000820:	2100      	movs	r1, #0
 8000822:	4618      	mov	r0, r3
 8000824:	f006 fd9a 	bl	800735c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000828:	1d3b      	adds	r3, r7, #4
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000830:	4b21      	ldr	r3, [pc, #132]	; (80008b8 <MX_TIM2_Init+0xa4>)
 8000832:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000836:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000838:	4b1f      	ldr	r3, [pc, #124]	; (80008b8 <MX_TIM2_Init+0xa4>)
 800083a:	2200      	movs	r2, #0
 800083c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800083e:	4b1e      	ldr	r3, [pc, #120]	; (80008b8 <MX_TIM2_Init+0xa4>)
 8000840:	2200      	movs	r2, #0
 8000842:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000844:	4b1c      	ldr	r3, [pc, #112]	; (80008b8 <MX_TIM2_Init+0xa4>)
 8000846:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800084a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800084c:	4b1a      	ldr	r3, [pc, #104]	; (80008b8 <MX_TIM2_Init+0xa4>)
 800084e:	2200      	movs	r2, #0
 8000850:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000852:	4b19      	ldr	r3, [pc, #100]	; (80008b8 <MX_TIM2_Init+0xa4>)
 8000854:	2200      	movs	r2, #0
 8000856:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000858:	2303      	movs	r3, #3
 800085a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800085c:	2300      	movs	r3, #0
 800085e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000860:	2301      	movs	r3, #1
 8000862:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000864:	2300      	movs	r3, #0
 8000866:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8000868:	230a      	movs	r3, #10
 800086a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800086c:	2300      	movs	r3, #0
 800086e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000870:	2301      	movs	r3, #1
 8000872:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000874:	2300      	movs	r3, #0
 8000876:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8000878:	230a      	movs	r3, #10
 800087a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800087c:	f107 030c 	add.w	r3, r7, #12
 8000880:	4619      	mov	r1, r3
 8000882:	480d      	ldr	r0, [pc, #52]	; (80008b8 <MX_TIM2_Init+0xa4>)
 8000884:	f001 ffa6 	bl	80027d4 <HAL_TIM_Encoder_Init>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800088e:	f000 fb63 	bl	8000f58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000892:	2300      	movs	r3, #0
 8000894:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000896:	2300      	movs	r3, #0
 8000898:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800089a:	1d3b      	adds	r3, r7, #4
 800089c:	4619      	mov	r1, r3
 800089e:	4806      	ldr	r0, [pc, #24]	; (80008b8 <MX_TIM2_Init+0xa4>)
 80008a0:	f002 fcd8 	bl	8003254 <HAL_TIMEx_MasterConfigSynchronization>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80008aa:	f000 fb55 	bl	8000f58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008ae:	bf00      	nop
 80008b0:	3730      	adds	r7, #48	; 0x30
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	20004ae8 	.word	0x20004ae8

080008bc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b08c      	sub	sp, #48	; 0x30
 80008c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80008c2:	f107 030c 	add.w	r3, r7, #12
 80008c6:	2224      	movs	r2, #36	; 0x24
 80008c8:	2100      	movs	r1, #0
 80008ca:	4618      	mov	r0, r3
 80008cc:	f006 fd46 	bl	800735c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008d0:	1d3b      	adds	r3, r7, #4
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008d8:	4b20      	ldr	r3, [pc, #128]	; (800095c <MX_TIM3_Init+0xa0>)
 80008da:	4a21      	ldr	r2, [pc, #132]	; (8000960 <MX_TIM3_Init+0xa4>)
 80008dc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80008de:	4b1f      	ldr	r3, [pc, #124]	; (800095c <MX_TIM3_Init+0xa0>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008e4:	4b1d      	ldr	r3, [pc, #116]	; (800095c <MX_TIM3_Init+0xa0>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80008ea:	4b1c      	ldr	r3, [pc, #112]	; (800095c <MX_TIM3_Init+0xa0>)
 80008ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008f0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008f2:	4b1a      	ldr	r3, [pc, #104]	; (800095c <MX_TIM3_Init+0xa0>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008f8:	4b18      	ldr	r3, [pc, #96]	; (800095c <MX_TIM3_Init+0xa0>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80008fe:	2303      	movs	r3, #3
 8000900:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000902:	2300      	movs	r3, #0
 8000904:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000906:	2301      	movs	r3, #1
 8000908:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800090a:	2300      	movs	r3, #0
 800090c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 800090e:	230a      	movs	r3, #10
 8000910:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000912:	2300      	movs	r3, #0
 8000914:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000916:	2301      	movs	r3, #1
 8000918:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800091a:	2300      	movs	r3, #0
 800091c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 800091e:	230a      	movs	r3, #10
 8000920:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000922:	f107 030c 	add.w	r3, r7, #12
 8000926:	4619      	mov	r1, r3
 8000928:	480c      	ldr	r0, [pc, #48]	; (800095c <MX_TIM3_Init+0xa0>)
 800092a:	f001 ff53 	bl	80027d4 <HAL_TIM_Encoder_Init>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000934:	f000 fb10 	bl	8000f58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000938:	2300      	movs	r3, #0
 800093a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800093c:	2300      	movs	r3, #0
 800093e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000940:	1d3b      	adds	r3, r7, #4
 8000942:	4619      	mov	r1, r3
 8000944:	4805      	ldr	r0, [pc, #20]	; (800095c <MX_TIM3_Init+0xa0>)
 8000946:	f002 fc85 	bl	8003254 <HAL_TIMEx_MasterConfigSynchronization>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000950:	f000 fb02 	bl	8000f58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000954:	bf00      	nop
 8000956:	3730      	adds	r7, #48	; 0x30
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	20004a44 	.word	0x20004a44
 8000960:	40000400 	.word	0x40000400

08000964 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b096      	sub	sp, #88	; 0x58
 8000968:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800096a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800096e:	2200      	movs	r2, #0
 8000970:	601a      	str	r2, [r3, #0]
 8000972:	605a      	str	r2, [r3, #4]
 8000974:	609a      	str	r2, [r3, #8]
 8000976:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000978:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800097c:	2200      	movs	r2, #0
 800097e:	601a      	str	r2, [r3, #0]
 8000980:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000982:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000986:	2200      	movs	r2, #0
 8000988:	601a      	str	r2, [r3, #0]
 800098a:	605a      	str	r2, [r3, #4]
 800098c:	609a      	str	r2, [r3, #8]
 800098e:	60da      	str	r2, [r3, #12]
 8000990:	611a      	str	r2, [r3, #16]
 8000992:	615a      	str	r2, [r3, #20]
 8000994:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000996:	1d3b      	adds	r3, r7, #4
 8000998:	2220      	movs	r2, #32
 800099a:	2100      	movs	r1, #0
 800099c:	4618      	mov	r0, r3
 800099e:	f006 fcdd 	bl	800735c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80009a2:	4b43      	ldr	r3, [pc, #268]	; (8000ab0 <MX_TIM8_Init+0x14c>)
 80009a4:	4a43      	ldr	r2, [pc, #268]	; (8000ab4 <MX_TIM8_Init+0x150>)
 80009a6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80009a8:	4b41      	ldr	r3, [pc, #260]	; (8000ab0 <MX_TIM8_Init+0x14c>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ae:	4b40      	ldr	r3, [pc, #256]	; (8000ab0 <MX_TIM8_Init+0x14c>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 80009b4:	4b3e      	ldr	r3, [pc, #248]	; (8000ab0 <MX_TIM8_Init+0x14c>)
 80009b6:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80009ba:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009bc:	4b3c      	ldr	r3, [pc, #240]	; (8000ab0 <MX_TIM8_Init+0x14c>)
 80009be:	2200      	movs	r2, #0
 80009c0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80009c2:	4b3b      	ldr	r3, [pc, #236]	; (8000ab0 <MX_TIM8_Init+0x14c>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009c8:	4b39      	ldr	r3, [pc, #228]	; (8000ab0 <MX_TIM8_Init+0x14c>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80009ce:	4838      	ldr	r0, [pc, #224]	; (8000ab0 <MX_TIM8_Init+0x14c>)
 80009d0:	f001 fd90 	bl	80024f4 <HAL_TIM_Base_Init>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80009da:	f000 fabd 	bl	8000f58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009e2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80009e4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80009e8:	4619      	mov	r1, r3
 80009ea:	4831      	ldr	r0, [pc, #196]	; (8000ab0 <MX_TIM8_Init+0x14c>)
 80009ec:	f002 f85a 	bl	8002aa4 <HAL_TIM_ConfigClockSource>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80009f6:	f000 faaf 	bl	8000f58 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80009fa:	482d      	ldr	r0, [pc, #180]	; (8000ab0 <MX_TIM8_Init+0x14c>)
 80009fc:	f001 fdc9 	bl	8002592 <HAL_TIM_PWM_Init>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8000a06:	f000 faa7 	bl	8000f58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000a12:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a16:	4619      	mov	r1, r3
 8000a18:	4825      	ldr	r0, [pc, #148]	; (8000ab0 <MX_TIM8_Init+0x14c>)
 8000a1a:	f002 fc1b 	bl	8003254 <HAL_TIMEx_MasterConfigSynchronization>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8000a24:	f000 fa98 	bl	8000f58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a28:	2360      	movs	r3, #96	; 0x60
 8000a2a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a30:	2300      	movs	r3, #0
 8000a32:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a34:	2300      	movs	r3, #0
 8000a36:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a40:	2300      	movs	r3, #0
 8000a42:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a48:	2200      	movs	r2, #0
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4818      	ldr	r0, [pc, #96]	; (8000ab0 <MX_TIM8_Init+0x14c>)
 8000a4e:	f001 ff67 	bl	8002920 <HAL_TIM_PWM_ConfigChannel>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8000a58:	f000 fa7e 	bl	8000f58 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a60:	2204      	movs	r2, #4
 8000a62:	4619      	mov	r1, r3
 8000a64:	4812      	ldr	r0, [pc, #72]	; (8000ab0 <MX_TIM8_Init+0x14c>)
 8000a66:	f001 ff5b 	bl	8002920 <HAL_TIM_PWM_ConfigChannel>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8000a70:	f000 fa72 	bl	8000f58 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a74:	2300      	movs	r3, #0
 8000a76:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a80:	2300      	movs	r3, #0
 8000a82:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a84:	2300      	movs	r3, #0
 8000a86:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a8c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000a92:	1d3b      	adds	r3, r7, #4
 8000a94:	4619      	mov	r1, r3
 8000a96:	4806      	ldr	r0, [pc, #24]	; (8000ab0 <MX_TIM8_Init+0x14c>)
 8000a98:	f002 fc58 	bl	800334c <HAL_TIMEx_ConfigBreakDeadTime>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8000aa2:	f000 fa59 	bl	8000f58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000aa6:	bf00      	nop
 8000aa8:	3758      	adds	r7, #88	; 0x58
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	200049b0 	.word	0x200049b0
 8000ab4:	40010400 	.word	0x40010400

08000ab8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000abc:	4b11      	ldr	r3, [pc, #68]	; (8000b04 <MX_USART3_UART_Init+0x4c>)
 8000abe:	4a12      	ldr	r2, [pc, #72]	; (8000b08 <MX_USART3_UART_Init+0x50>)
 8000ac0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ac2:	4b10      	ldr	r3, [pc, #64]	; (8000b04 <MX_USART3_UART_Init+0x4c>)
 8000ac4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ac8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000aca:	4b0e      	ldr	r3, [pc, #56]	; (8000b04 <MX_USART3_UART_Init+0x4c>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ad0:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <MX_USART3_UART_Init+0x4c>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ad6:	4b0b      	ldr	r3, [pc, #44]	; (8000b04 <MX_USART3_UART_Init+0x4c>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000adc:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <MX_USART3_UART_Init+0x4c>)
 8000ade:	220c      	movs	r2, #12
 8000ae0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ae2:	4b08      	ldr	r3, [pc, #32]	; (8000b04 <MX_USART3_UART_Init+0x4c>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ae8:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <MX_USART3_UART_Init+0x4c>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000aee:	4805      	ldr	r0, [pc, #20]	; (8000b04 <MX_USART3_UART_Init+0x4c>)
 8000af0:	f002 fc7e 	bl	80033f0 <HAL_UART_Init>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000afa:	f000 fa2d 	bl	8000f58 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000afe:	bf00      	nop
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	200049f8 	.word	0x200049f8
 8000b08:	40004800 	.word	0x40004800

08000b0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b08a      	sub	sp, #40	; 0x28
 8000b10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b12:	f107 0314 	add.w	r3, r7, #20
 8000b16:	2200      	movs	r2, #0
 8000b18:	601a      	str	r2, [r3, #0]
 8000b1a:	605a      	str	r2, [r3, #4]
 8000b1c:	609a      	str	r2, [r3, #8]
 8000b1e:	60da      	str	r2, [r3, #12]
 8000b20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	613b      	str	r3, [r7, #16]
 8000b26:	4b31      	ldr	r3, [pc, #196]	; (8000bec <MX_GPIO_Init+0xe0>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	4a30      	ldr	r2, [pc, #192]	; (8000bec <MX_GPIO_Init+0xe0>)
 8000b2c:	f043 0310 	orr.w	r3, r3, #16
 8000b30:	6313      	str	r3, [r2, #48]	; 0x30
 8000b32:	4b2e      	ldr	r3, [pc, #184]	; (8000bec <MX_GPIO_Init+0xe0>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	f003 0310 	and.w	r3, r3, #16
 8000b3a:	613b      	str	r3, [r7, #16]
 8000b3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	60fb      	str	r3, [r7, #12]
 8000b42:	4b2a      	ldr	r3, [pc, #168]	; (8000bec <MX_GPIO_Init+0xe0>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	4a29      	ldr	r2, [pc, #164]	; (8000bec <MX_GPIO_Init+0xe0>)
 8000b48:	f043 0301 	orr.w	r3, r3, #1
 8000b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4e:	4b27      	ldr	r3, [pc, #156]	; (8000bec <MX_GPIO_Init+0xe0>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	f003 0301 	and.w	r3, r3, #1
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	60bb      	str	r3, [r7, #8]
 8000b5e:	4b23      	ldr	r3, [pc, #140]	; (8000bec <MX_GPIO_Init+0xe0>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	4a22      	ldr	r2, [pc, #136]	; (8000bec <MX_GPIO_Init+0xe0>)
 8000b64:	f043 0304 	orr.w	r3, r3, #4
 8000b68:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6a:	4b20      	ldr	r3, [pc, #128]	; (8000bec <MX_GPIO_Init+0xe0>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	f003 0304 	and.w	r3, r3, #4
 8000b72:	60bb      	str	r3, [r7, #8]
 8000b74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	607b      	str	r3, [r7, #4]
 8000b7a:	4b1c      	ldr	r3, [pc, #112]	; (8000bec <MX_GPIO_Init+0xe0>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	4a1b      	ldr	r2, [pc, #108]	; (8000bec <MX_GPIO_Init+0xe0>)
 8000b80:	f043 0302 	orr.w	r3, r3, #2
 8000b84:	6313      	str	r3, [r2, #48]	; 0x30
 8000b86:	4b19      	ldr	r3, [pc, #100]	; (8000bec <MX_GPIO_Init+0xe0>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	f003 0302 	and.w	r3, r3, #2
 8000b8e:	607b      	str	r3, [r7, #4]
 8000b90:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 8000b92:	2200      	movs	r2, #0
 8000b94:	f44f 61bc 	mov.w	r1, #1504	; 0x5e0
 8000b98:	4815      	ldr	r0, [pc, #84]	; (8000bf0 <MX_GPIO_Init+0xe4>)
 8000b9a:	f001 f807 	bl	8001bac <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin, GPIO_PIN_RESET);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	213c      	movs	r1, #60	; 0x3c
 8000ba2:	4814      	ldr	r0, [pc, #80]	; (8000bf4 <MX_GPIO_Init+0xe8>)
 8000ba4:	f001 f802 	bl	8001bac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin
                           LED3_Pin */
  GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 8000ba8:	f44f 63bc 	mov.w	r3, #1504	; 0x5e0
 8000bac:	617b      	str	r3, [r7, #20]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bba:	f107 0314 	add.w	r3, r7, #20
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	480b      	ldr	r0, [pc, #44]	; (8000bf0 <MX_GPIO_Init+0xe4>)
 8000bc2:	f000 fe57 	bl	8001874 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin BIN1_Pin BIN2_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin;
 8000bc6:	233c      	movs	r3, #60	; 0x3c
 8000bc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd6:	f107 0314 	add.w	r3, r7, #20
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4805      	ldr	r0, [pc, #20]	; (8000bf4 <MX_GPIO_Init+0xe8>)
 8000bde:	f000 fe49 	bl	8001874 <HAL_GPIO_Init>

}
 8000be2:	bf00      	nop
 8000be4:	3728      	adds	r7, #40	; 0x28
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40023800 	.word	0x40023800
 8000bf0:	40021000 	.word	0x40021000
 8000bf4:	40020000 	.word	0x40020000

08000bf8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
	// Prevent unused argument compiled warning
	UNUSED(huart);

	HAL_UART_Transmit(&huart3, (uint8_t *)aRxBuffer, 10, 0xFFFF);
 8000c00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c04:	220a      	movs	r2, #10
 8000c06:	4904      	ldr	r1, [pc, #16]	; (8000c18 <HAL_UART_RxCpltCallback+0x20>)
 8000c08:	4804      	ldr	r0, [pc, #16]	; (8000c1c <HAL_UART_RxCpltCallback+0x24>)
 8000c0a:	f002 fc3e 	bl	800348a <HAL_UART_Transmit>
}
 8000c0e:	bf00      	nop
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	20004ad4 	.word	0x20004ad4
 8000c1c:	200049f8 	.word	0x200049f8

08000c20 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	uint8_t ch = 'A';
 8000c28:	2341      	movs	r3, #65	; 0x41
 8000c2a:	73fb      	strb	r3, [r7, #15]
  for(;;)
  {
	  HAL_UART_Transmit(&huart3, (uint8_t *)&ch,1, 0xFFFF);
 8000c2c:	f107 010f 	add.w	r1, r7, #15
 8000c30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c34:	2201      	movs	r2, #1
 8000c36:	480b      	ldr	r0, [pc, #44]	; (8000c64 <StartDefaultTask+0x44>)
 8000c38:	f002 fc27 	bl	800348a <HAL_UART_Transmit>
	  if(ch<'Z')
 8000c3c:	7bfb      	ldrb	r3, [r7, #15]
 8000c3e:	2b59      	cmp	r3, #89	; 0x59
 8000c40:	d804      	bhi.n	8000c4c <StartDefaultTask+0x2c>
		  ch++;
 8000c42:	7bfb      	ldrb	r3, [r7, #15]
 8000c44:	3301      	adds	r3, #1
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	73fb      	strb	r3, [r7, #15]
 8000c4a:	e001      	b.n	8000c50 <StartDefaultTask+0x30>
	  else ch = 'A';
 8000c4c:	2341      	movs	r3, #65	; 0x41
 8000c4e:	73fb      	strb	r3, [r7, #15]

	  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8000c50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c54:	4804      	ldr	r0, [pc, #16]	; (8000c68 <StartDefaultTask+0x48>)
 8000c56:	f000 ffc2 	bl	8001bde <HAL_GPIO_TogglePin>
	  osDelay(5000);
 8000c5a:	f241 3088 	movw	r0, #5000	; 0x1388
 8000c5e:	f003 fc9f 	bl	80045a0 <osDelay>
	  HAL_UART_Transmit(&huart3, (uint8_t *)&ch,1, 0xFFFF);
 8000c62:	e7e3      	b.n	8000c2c <StartDefaultTask+0xc>
 8000c64:	200049f8 	.word	0x200049f8
 8000c68:	40021000 	.word	0x40021000

08000c6c <motor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_motor */
void motor(void *argument)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b08c      	sub	sp, #48	; 0x30
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN motor */

	uint16_t servo_min = 148;
 8000c74:	2394      	movs	r3, #148	; 0x94
 8000c76:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t servo_max = 155;
 8000c78:	239b      	movs	r3, #155	; 0x9b
 8000c7a:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t pwmVal_servo = servo_min;
 8000c7c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000c7e:	85fb      	strh	r3, [r7, #46]	; 0x2e

	uint16_t pwmVal = 0;
 8000c80:	2300      	movs	r3, #0
 8000c82:	85bb      	strh	r3, [r7, #44]	; 0x2c
	uint16_t offset = 1;
 8000c84:	2301      	movs	r3, #1
 8000c86:	857b      	strh	r3, [r7, #42]	; 0x2a
	uint16_t motor_increment = 10;
 8000c88:	230a      	movs	r3, #10
 8000c8a:	847b      	strh	r3, [r7, #34]	; 0x22
	uint8_t accelerate = 1;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t msg [20];

	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8000c92:	2100      	movs	r1, #0
 8000c94:	4868      	ldr	r0, [pc, #416]	; (8000e38 <motor+0x1cc>)
 8000c96:	f001 fcd5 	bl	8002644 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8000c9a:	2104      	movs	r1, #4
 8000c9c:	4866      	ldr	r0, [pc, #408]	; (8000e38 <motor+0x1cc>)
 8000c9e:	f001 fcd1 	bl	8002644 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000ca2:	210c      	movs	r1, #12
 8000ca4:	4865      	ldr	r0, [pc, #404]	; (8000e3c <motor+0x1d0>)
 8000ca6:	f001 fccd 	bl	8002644 <HAL_TIM_PWM_Start>


	htim1.Instance->CCR4 = pwmVal_servo; //Centre
 8000caa:	4b64      	ldr	r3, [pc, #400]	; (8000e3c <motor+0x1d0>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8000cb0:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(5000);
 8000cb2:	f241 3088 	movw	r0, #5000	; 0x1388
 8000cb6:	f003 fc73 	bl	80045a0 <osDelay>




	  // Forward
	  sprintf(msg, "servo %d\0", pwmVal_servo);
 8000cba:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8000cbc:	f107 030c 	add.w	r3, r7, #12
 8000cc0:	495f      	ldr	r1, [pc, #380]	; (8000e40 <motor+0x1d4>)
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f006 fb52 	bl	800736c <siprintf>
	  OLED_ShowString(10, 30, msg);
 8000cc8:	f107 030c 	add.w	r3, r7, #12
 8000ccc:	461a      	mov	r2, r3
 8000cce:	211e      	movs	r1, #30
 8000cd0:	200a      	movs	r0, #10
 8000cd2:	f006 fa4d 	bl	8007170 <OLED_ShowString>
	  accelerate = 1;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

	  sprintf(msg, "forwards %d\0", pwmVal);
 8000cdc:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000cde:	f107 030c 	add.w	r3, r7, #12
 8000ce2:	4958      	ldr	r1, [pc, #352]	; (8000e44 <motor+0x1d8>)
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f006 fb41 	bl	800736c <siprintf>
	  OLED_ShowString(10, 20, msg);
 8000cea:	f107 030c 	add.w	r3, r7, #12
 8000cee:	461a      	mov	r2, r3
 8000cf0:	2114      	movs	r1, #20
 8000cf2:	200a      	movs	r0, #10
 8000cf4:	f006 fa3c 	bl	8007170 <OLED_ShowString>
	  {


		  // H-Bridge Circuit for AINx; 1 turn on, the other turns off
		  // MOTOR A
		  HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	2104      	movs	r1, #4
 8000cfc:	4852      	ldr	r0, [pc, #328]	; (8000e48 <motor+0x1dc>)
 8000cfe:	f000 ff55 	bl	8001bac <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 8000d02:	2200      	movs	r2, #0
 8000d04:	2108      	movs	r1, #8
 8000d06:	4850      	ldr	r0, [pc, #320]	; (8000e48 <motor+0x1dc>)
 8000d08:	f000 ff50 	bl	8001bac <HAL_GPIO_WritePin>

		  // MOTOR B
		  HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	2120      	movs	r1, #32
 8000d10:	484d      	ldr	r0, [pc, #308]	; (8000e48 <motor+0x1dc>)
 8000d12:	f000 ff4b 	bl	8001bac <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 8000d16:	2200      	movs	r2, #0
 8000d18:	2110      	movs	r1, #16
 8000d1a:	484b      	ldr	r0, [pc, #300]	; (8000e48 <motor+0x1dc>)
 8000d1c:	f000 ff46 	bl	8001bac <HAL_GPIO_WritePin>

		  if(accelerate == 1){
 8000d20:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000d24:	2b01      	cmp	r3, #1
 8000d26:	d10b      	bne.n	8000d40 <motor+0xd4>
			  pwmVal+=motor_increment;
 8000d28:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000d2a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000d2c:	4413      	add	r3, r2
 8000d2e:	85bb      	strh	r3, [r7, #44]	; 0x2c
			  if(pwmVal > 2000)
 8000d30:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000d32:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000d36:	d907      	bls.n	8000d48 <motor+0xdc>
				  accelerate = 0;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8000d3e:	e003      	b.n	8000d48 <motor+0xdc>
		  }

		  else
			  pwmVal-=motor_increment;
 8000d40:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000d42:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000d44:	1ad3      	subs	r3, r2, r3
 8000d46:	85bb      	strh	r3, [r7, #44]	; 0x2c
		  // Modify comparison value for duty cycle
		  __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmVal);
 8000d48:	4b3b      	ldr	r3, [pc, #236]	; (8000e38 <motor+0x1cc>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000d4e:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, pwmVal);
 8000d50:	4b39      	ldr	r3, [pc, #228]	; (8000e38 <motor+0x1cc>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000d56:	639a      	str	r2, [r3, #56]	; 0x38
		  osDelay(10);
 8000d58:	200a      	movs	r0, #10
 8000d5a:	f003 fc21 	bl	80045a0 <osDelay>

	  }while(pwmVal >0);
 8000d5e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d1c9      	bne.n	8000cf8 <motor+0x8c>

	  // just in case pwmVal not 0
	  pwmVal = 0;
 8000d64:	2300      	movs	r3, #0
 8000d66:	85bb      	strh	r3, [r7, #44]	; 0x2c

	  accelerate = 1;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	  osDelay(5000);
 8000d6e:	f241 3088 	movw	r0, #5000	; 0x1388
 8000d72:	f003 fc15 	bl	80045a0 <osDelay>
	  // Anti clock wise
	  sprintf(msg, "backward %d\0", pwmVal);
 8000d76:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000d78:	f107 030c 	add.w	r3, r7, #12
 8000d7c:	4933      	ldr	r1, [pc, #204]	; (8000e4c <motor+0x1e0>)
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f006 faf4 	bl	800736c <siprintf>
	  OLED_ShowString(10, 20, msg);
 8000d84:	f107 030c 	add.w	r3, r7, #12
 8000d88:	461a      	mov	r2, r3
 8000d8a:	2114      	movs	r1, #20
 8000d8c:	200a      	movs	r0, #10
 8000d8e:	f006 f9ef 	bl	8007170 <OLED_ShowString>
	  do
	  {
		  // MOTOR A
		  HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8000d92:	2200      	movs	r2, #0
 8000d94:	2104      	movs	r1, #4
 8000d96:	482c      	ldr	r0, [pc, #176]	; (8000e48 <motor+0x1dc>)
 8000d98:	f000 ff08 	bl	8001bac <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	2108      	movs	r1, #8
 8000da0:	4829      	ldr	r0, [pc, #164]	; (8000e48 <motor+0x1dc>)
 8000da2:	f000 ff03 	bl	8001bac <HAL_GPIO_WritePin>

		  // MOTOR B
		  HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 8000da6:	2200      	movs	r2, #0
 8000da8:	2120      	movs	r1, #32
 8000daa:	4827      	ldr	r0, [pc, #156]	; (8000e48 <motor+0x1dc>)
 8000dac:	f000 fefe 	bl	8001bac <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET);
 8000db0:	2201      	movs	r2, #1
 8000db2:	2110      	movs	r1, #16
 8000db4:	4824      	ldr	r0, [pc, #144]	; (8000e48 <motor+0x1dc>)
 8000db6:	f000 fef9 	bl	8001bac <HAL_GPIO_WritePin>

		  if(accelerate == 1){
 8000dba:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000dbe:	2b01      	cmp	r3, #1
 8000dc0:	d10b      	bne.n	8000dda <motor+0x16e>
			  pwmVal+=motor_increment;
 8000dc2:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000dc4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000dc6:	4413      	add	r3, r2
 8000dc8:	85bb      	strh	r3, [r7, #44]	; 0x2c
			  if(pwmVal > 2000)
 8000dca:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000dcc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000dd0:	d907      	bls.n	8000de2 <motor+0x176>
				  accelerate = 0;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8000dd8:	e003      	b.n	8000de2 <motor+0x176>
		  }

		  else
			  pwmVal-=motor_increment
 8000dda:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000ddc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000dde:	1ad3      	subs	r3, r2, r3
 8000de0:	85bb      	strh	r3, [r7, #44]	; 0x2c
			  ;

		  __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmVal);
 8000de2:	4b15      	ldr	r3, [pc, #84]	; (8000e38 <motor+0x1cc>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000de8:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, pwmVal);
 8000dea:	4b13      	ldr	r3, [pc, #76]	; (8000e38 <motor+0x1cc>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000df0:	639a      	str	r2, [r3, #56]	; 0x38
		  osDelay(10);
 8000df2:	200a      	movs	r0, #10
 8000df4:	f003 fbd4 	bl	80045a0 <osDelay>
	  }while(pwmVal>0);
 8000df8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d1c9      	bne.n	8000d92 <motor+0x126>

	  // just in case pwmVal not 0
	  pwmVal = 0;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	85bb      	strh	r3, [r7, #44]	; 0x2c

	  osDelay(1);
 8000e02:	2001      	movs	r0, #1
 8000e04:	f003 fbcc 	bl	80045a0 <osDelay>
	  if((pwmVal_servo > servo_max)||(pwmVal_servo < servo_min))
 8000e08:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8000e0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	d803      	bhi.n	8000e18 <motor+0x1ac>
 8000e10:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8000e12:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000e14:	429a      	cmp	r2, r3
 8000e16:	d202      	bcs.n	8000e1e <motor+0x1b2>
		  offset = -offset;
 8000e18:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000e1a:	425b      	negs	r3, r3
 8000e1c:	857b      	strh	r3, [r7, #42]	; 0x2a
	  pwmVal_servo += offset;
 8000e1e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8000e20:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000e22:	4413      	add	r3, r2
 8000e24:	85fb      	strh	r3, [r7, #46]	; 0x2e
	  htim1.Instance->CCR4 = pwmVal_servo;
 8000e26:	4b05      	ldr	r3, [pc, #20]	; (8000e3c <motor+0x1d0>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8000e2c:	641a      	str	r2, [r3, #64]	; 0x40
	  osDelay(5000);
 8000e2e:	f241 3088 	movw	r0, #5000	; 0x1388
 8000e32:	f003 fbb5 	bl	80045a0 <osDelay>
  {
 8000e36:	e740      	b.n	8000cba <motor+0x4e>
 8000e38:	200049b0 	.word	0x200049b0
 8000e3c:	20004a8c 	.word	0x20004a8c
 8000e40:	08007bf4 	.word	0x08007bf4
 8000e44:	08007c00 	.word	0x08007c00
 8000e48:	40020000 	.word	0x40020000
 8000e4c:	08007c10 	.word	0x08007c10

08000e50 <showoled>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_showoled */
void showoled(void *argument)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b088      	sub	sp, #32
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN showoled */
  /* Infinite loop */
	uint8_t hello [20] = "pwm test\0";
 8000e58:	4a10      	ldr	r2, [pc, #64]	; (8000e9c <showoled+0x4c>)
 8000e5a:	f107 030c 	add.w	r3, r7, #12
 8000e5e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e60:	c303      	stmia	r3!, {r0, r1}
 8000e62:	801a      	strh	r2, [r3, #0]
 8000e64:	f107 0316 	add.w	r3, r7, #22
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	605a      	str	r2, [r3, #4]
 8000e6e:	811a      	strh	r2, [r3, #8]
	for(;;)
	{
		sprintf(hello, "%s\0", aRxBuffer);
 8000e70:	f107 030c 	add.w	r3, r7, #12
 8000e74:	4a0a      	ldr	r2, [pc, #40]	; (8000ea0 <showoled+0x50>)
 8000e76:	490b      	ldr	r1, [pc, #44]	; (8000ea4 <showoled+0x54>)
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f006 fa77 	bl	800736c <siprintf>
		OLED_ShowString(10, 10, hello);
 8000e7e:	f107 030c 	add.w	r3, r7, #12
 8000e82:	461a      	mov	r2, r3
 8000e84:	210a      	movs	r1, #10
 8000e86:	200a      	movs	r0, #10
 8000e88:	f006 f972 	bl	8007170 <OLED_ShowString>
		OLED_Refresh_Gram();
 8000e8c:	f005 fffc 	bl	8006e88 <OLED_Refresh_Gram>
		osDelay(1000);
 8000e90:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e94:	f003 fb84 	bl	80045a0 <osDelay>
	{
 8000e98:	e7ea      	b.n	8000e70 <showoled+0x20>
 8000e9a:	bf00      	nop
 8000e9c:	08007c24 	.word	0x08007c24
 8000ea0:	20004ad4 	.word	0x20004ad4
 8000ea4:	08007c20 	.word	0x08007c20

08000ea8 <encoder_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_encoder_task */
void encoder_task(void *argument)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b08c      	sub	sp, #48	; 0x30
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN encoder_task */
  /* Infinite loop */
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_ALL);
 8000eb0:	213c      	movs	r1, #60	; 0x3c
 8000eb2:	4828      	ldr	r0, [pc, #160]	; (8000f54 <encoder_task+0xac>)
 8000eb4:	f001 fbc6 	bl	8002644 <HAL_TIM_PWM_Start>

	int cnt1, cnt2, diff;
	uint32_t tick;

	cnt1 = __HAL_TIM_GET_COUNTER(&htim2);
 8000eb8:	4b26      	ldr	r3, [pc, #152]	; (8000f54 <encoder_task+0xac>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
	tick = HAL_GetTick();
 8000ec0:	f000 fb04 	bl	80014cc <HAL_GetTick>
 8000ec4:	62b8      	str	r0, [r7, #40]	; 0x28
	uint8_t msg[20];
	uint16_t dir;

	for(;;)
	{
		if(HAL_GetTick()-tick > 1000L){
 8000ec6:	f000 fb01 	bl	80014cc <HAL_GetTick>
 8000eca:	4602      	mov	r2, r0
 8000ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ece:	1ad3      	subs	r3, r2, r3
 8000ed0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000ed4:	d9f7      	bls.n	8000ec6 <encoder_task+0x1e>
			cnt2 = __HAL_TIM_GET_COUNTER(&htim2);
 8000ed6:	4b1f      	ldr	r3, [pc, #124]	; (8000f54 <encoder_task+0xac>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000edc:	627b      	str	r3, [r7, #36]	; 0x24
			if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)){
 8000ede:	4b1d      	ldr	r3, [pc, #116]	; (8000f54 <encoder_task+0xac>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f003 0310 	and.w	r3, r3, #16
 8000ee8:	2b10      	cmp	r3, #16
 8000eea:	d110      	bne.n	8000f0e <encoder_task+0x66>
				if(cnt2<cnt1)
 8000eec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ef0:	429a      	cmp	r2, r3
 8000ef2:	da04      	bge.n	8000efe <encoder_task+0x56>
					diff = cnt1 - cnt2;
 8000ef4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef8:	1ad3      	subs	r3, r2, r3
 8000efa:	623b      	str	r3, [r7, #32]
 8000efc:	e017      	b.n	8000f2e <encoder_task+0x86>
				else //overflow
					diff = (65535 - cnt2) + cnt1;
 8000efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f00:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8000f04:	33ff      	adds	r3, #255	; 0xff
 8000f06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f08:	4413      	add	r3, r2
 8000f0a:	623b      	str	r3, [r7, #32]
 8000f0c:	e00f      	b.n	8000f2e <encoder_task+0x86>
			}
			else{
				if(cnt2 > cnt1)
 8000f0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f12:	429a      	cmp	r2, r3
 8000f14:	dd04      	ble.n	8000f20 <encoder_task+0x78>
					diff = cnt2 - cnt1;
 8000f16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f1a:	1ad3      	subs	r3, r2, r3
 8000f1c:	623b      	str	r3, [r7, #32]
 8000f1e:	e006      	b.n	8000f2e <encoder_task+0x86>
				else
					diff = (65535 - cnt1) + cnt2;
 8000f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f22:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8000f26:	33ff      	adds	r3, #255	; 0xff
 8000f28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f2a:	4413      	add	r3, r2
 8000f2c:	623b      	str	r3, [r7, #32]
			}

			dir = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2);
 8000f2e:	4b09      	ldr	r3, [pc, #36]	; (8000f54 <encoder_task+0xac>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f003 0310 	and.w	r3, r3, #16
 8000f38:	2b10      	cmp	r3, #16
 8000f3a:	bf0c      	ite	eq
 8000f3c:	2301      	moveq	r3, #1
 8000f3e:	2300      	movne	r3, #0
 8000f40:	b2db      	uxtb	r3, r3
 8000f42:	83fb      	strh	r3, [r7, #30]
//			// Display direction
//			sprintf(msg, "dir:%5d\0",dir);
//			OLED_ShowString(10,30,msg);

			// Reset base tick
			cnt1 = __HAL_TIM_GET_COUNTER(&htim2);
 8000f44:	4b03      	ldr	r3, [pc, #12]	; (8000f54 <encoder_task+0xac>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
			tick = HAL_GetTick();
 8000f4c:	f000 fabe 	bl	80014cc <HAL_GetTick>
 8000f50:	62b8      	str	r0, [r7, #40]	; 0x28
		if(HAL_GetTick()-tick > 1000L){
 8000f52:	e7b8      	b.n	8000ec6 <encoder_task+0x1e>
 8000f54:	20004ae8 	.word	0x20004ae8

08000f58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f5c:	b672      	cpsid	i
}
 8000f5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f60:	e7fe      	b.n	8000f60 <Error_Handler+0x8>
	...

08000f64 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	607b      	str	r3, [r7, #4]
 8000f6e:	4b12      	ldr	r3, [pc, #72]	; (8000fb8 <HAL_MspInit+0x54>)
 8000f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f72:	4a11      	ldr	r2, [pc, #68]	; (8000fb8 <HAL_MspInit+0x54>)
 8000f74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f78:	6453      	str	r3, [r2, #68]	; 0x44
 8000f7a:	4b0f      	ldr	r3, [pc, #60]	; (8000fb8 <HAL_MspInit+0x54>)
 8000f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f82:	607b      	str	r3, [r7, #4]
 8000f84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	603b      	str	r3, [r7, #0]
 8000f8a:	4b0b      	ldr	r3, [pc, #44]	; (8000fb8 <HAL_MspInit+0x54>)
 8000f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8e:	4a0a      	ldr	r2, [pc, #40]	; (8000fb8 <HAL_MspInit+0x54>)
 8000f90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f94:	6413      	str	r3, [r2, #64]	; 0x40
 8000f96:	4b08      	ldr	r3, [pc, #32]	; (8000fb8 <HAL_MspInit+0x54>)
 8000f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f9e:	603b      	str	r3, [r7, #0]
 8000fa0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	210f      	movs	r1, #15
 8000fa6:	f06f 0001 	mvn.w	r0, #1
 8000faa:	f000 fb9a 	bl	80016e2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	40023800 	.word	0x40023800

08000fbc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b08a      	sub	sp, #40	; 0x28
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc4:	f107 0314 	add.w	r3, r7, #20
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	605a      	str	r2, [r3, #4]
 8000fce:	609a      	str	r2, [r3, #8]
 8000fd0:	60da      	str	r2, [r3, #12]
 8000fd2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a23      	ldr	r2, [pc, #140]	; (8001068 <HAL_TIM_Base_MspInit+0xac>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d10e      	bne.n	8000ffc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000fde:	2300      	movs	r3, #0
 8000fe0:	613b      	str	r3, [r7, #16]
 8000fe2:	4b22      	ldr	r3, [pc, #136]	; (800106c <HAL_TIM_Base_MspInit+0xb0>)
 8000fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe6:	4a21      	ldr	r2, [pc, #132]	; (800106c <HAL_TIM_Base_MspInit+0xb0>)
 8000fe8:	f043 0301 	orr.w	r3, r3, #1
 8000fec:	6453      	str	r3, [r2, #68]	; 0x44
 8000fee:	4b1f      	ldr	r3, [pc, #124]	; (800106c <HAL_TIM_Base_MspInit+0xb0>)
 8000ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff2:	f003 0301 	and.w	r3, r3, #1
 8000ff6:	613b      	str	r3, [r7, #16]
 8000ff8:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8000ffa:	e030      	b.n	800105e <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM8)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a1b      	ldr	r2, [pc, #108]	; (8001070 <HAL_TIM_Base_MspInit+0xb4>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d12b      	bne.n	800105e <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001006:	2300      	movs	r3, #0
 8001008:	60fb      	str	r3, [r7, #12]
 800100a:	4b18      	ldr	r3, [pc, #96]	; (800106c <HAL_TIM_Base_MspInit+0xb0>)
 800100c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100e:	4a17      	ldr	r2, [pc, #92]	; (800106c <HAL_TIM_Base_MspInit+0xb0>)
 8001010:	f043 0302 	orr.w	r3, r3, #2
 8001014:	6453      	str	r3, [r2, #68]	; 0x44
 8001016:	4b15      	ldr	r3, [pc, #84]	; (800106c <HAL_TIM_Base_MspInit+0xb0>)
 8001018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800101a:	f003 0302 	and.w	r3, r3, #2
 800101e:	60fb      	str	r3, [r7, #12]
 8001020:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	60bb      	str	r3, [r7, #8]
 8001026:	4b11      	ldr	r3, [pc, #68]	; (800106c <HAL_TIM_Base_MspInit+0xb0>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	4a10      	ldr	r2, [pc, #64]	; (800106c <HAL_TIM_Base_MspInit+0xb0>)
 800102c:	f043 0304 	orr.w	r3, r3, #4
 8001030:	6313      	str	r3, [r2, #48]	; 0x30
 8001032:	4b0e      	ldr	r3, [pc, #56]	; (800106c <HAL_TIM_Base_MspInit+0xb0>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	f003 0304 	and.w	r3, r3, #4
 800103a:	60bb      	str	r3, [r7, #8]
 800103c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 800103e:	23c0      	movs	r3, #192	; 0xc0
 8001040:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001042:	2302      	movs	r3, #2
 8001044:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001046:	2300      	movs	r3, #0
 8001048:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104a:	2300      	movs	r3, #0
 800104c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800104e:	2303      	movs	r3, #3
 8001050:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001052:	f107 0314 	add.w	r3, r7, #20
 8001056:	4619      	mov	r1, r3
 8001058:	4806      	ldr	r0, [pc, #24]	; (8001074 <HAL_TIM_Base_MspInit+0xb8>)
 800105a:	f000 fc0b 	bl	8001874 <HAL_GPIO_Init>
}
 800105e:	bf00      	nop
 8001060:	3728      	adds	r7, #40	; 0x28
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40010000 	.word	0x40010000
 800106c:	40023800 	.word	0x40023800
 8001070:	40010400 	.word	0x40010400
 8001074:	40020800 	.word	0x40020800

08001078 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b08c      	sub	sp, #48	; 0x30
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001080:	f107 031c 	add.w	r3, r7, #28
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
 800108c:	60da      	str	r2, [r3, #12]
 800108e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001098:	d14b      	bne.n	8001132 <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	61bb      	str	r3, [r7, #24]
 800109e:	4b3f      	ldr	r3, [pc, #252]	; (800119c <HAL_TIM_Encoder_MspInit+0x124>)
 80010a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a2:	4a3e      	ldr	r2, [pc, #248]	; (800119c <HAL_TIM_Encoder_MspInit+0x124>)
 80010a4:	f043 0301 	orr.w	r3, r3, #1
 80010a8:	6413      	str	r3, [r2, #64]	; 0x40
 80010aa:	4b3c      	ldr	r3, [pc, #240]	; (800119c <HAL_TIM_Encoder_MspInit+0x124>)
 80010ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ae:	f003 0301 	and.w	r3, r3, #1
 80010b2:	61bb      	str	r3, [r7, #24]
 80010b4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	617b      	str	r3, [r7, #20]
 80010ba:	4b38      	ldr	r3, [pc, #224]	; (800119c <HAL_TIM_Encoder_MspInit+0x124>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	4a37      	ldr	r2, [pc, #220]	; (800119c <HAL_TIM_Encoder_MspInit+0x124>)
 80010c0:	f043 0301 	orr.w	r3, r3, #1
 80010c4:	6313      	str	r3, [r2, #48]	; 0x30
 80010c6:	4b35      	ldr	r3, [pc, #212]	; (800119c <HAL_TIM_Encoder_MspInit+0x124>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	f003 0301 	and.w	r3, r3, #1
 80010ce:	617b      	str	r3, [r7, #20]
 80010d0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	613b      	str	r3, [r7, #16]
 80010d6:	4b31      	ldr	r3, [pc, #196]	; (800119c <HAL_TIM_Encoder_MspInit+0x124>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	4a30      	ldr	r2, [pc, #192]	; (800119c <HAL_TIM_Encoder_MspInit+0x124>)
 80010dc:	f043 0302 	orr.w	r3, r3, #2
 80010e0:	6313      	str	r3, [r2, #48]	; 0x30
 80010e2:	4b2e      	ldr	r3, [pc, #184]	; (800119c <HAL_TIM_Encoder_MspInit+0x124>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	f003 0302 	and.w	r3, r3, #2
 80010ea:	613b      	str	r3, [r7, #16]
 80010ec:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80010ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f4:	2302      	movs	r3, #2
 80010f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f8:	2300      	movs	r3, #0
 80010fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fc:	2300      	movs	r3, #0
 80010fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001100:	2301      	movs	r3, #1
 8001102:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001104:	f107 031c 	add.w	r3, r7, #28
 8001108:	4619      	mov	r1, r3
 800110a:	4825      	ldr	r0, [pc, #148]	; (80011a0 <HAL_TIM_Encoder_MspInit+0x128>)
 800110c:	f000 fbb2 	bl	8001874 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001110:	2308      	movs	r3, #8
 8001112:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001114:	2302      	movs	r3, #2
 8001116:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001118:	2300      	movs	r3, #0
 800111a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111c:	2300      	movs	r3, #0
 800111e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001120:	2301      	movs	r3, #1
 8001122:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001124:	f107 031c 	add.w	r3, r7, #28
 8001128:	4619      	mov	r1, r3
 800112a:	481e      	ldr	r0, [pc, #120]	; (80011a4 <HAL_TIM_Encoder_MspInit+0x12c>)
 800112c:	f000 fba2 	bl	8001874 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001130:	e030      	b.n	8001194 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM3)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a1c      	ldr	r2, [pc, #112]	; (80011a8 <HAL_TIM_Encoder_MspInit+0x130>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d12b      	bne.n	8001194 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800113c:	2300      	movs	r3, #0
 800113e:	60fb      	str	r3, [r7, #12]
 8001140:	4b16      	ldr	r3, [pc, #88]	; (800119c <HAL_TIM_Encoder_MspInit+0x124>)
 8001142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001144:	4a15      	ldr	r2, [pc, #84]	; (800119c <HAL_TIM_Encoder_MspInit+0x124>)
 8001146:	f043 0302 	orr.w	r3, r3, #2
 800114a:	6413      	str	r3, [r2, #64]	; 0x40
 800114c:	4b13      	ldr	r3, [pc, #76]	; (800119c <HAL_TIM_Encoder_MspInit+0x124>)
 800114e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001150:	f003 0302 	and.w	r3, r3, #2
 8001154:	60fb      	str	r3, [r7, #12]
 8001156:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001158:	2300      	movs	r3, #0
 800115a:	60bb      	str	r3, [r7, #8]
 800115c:	4b0f      	ldr	r3, [pc, #60]	; (800119c <HAL_TIM_Encoder_MspInit+0x124>)
 800115e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001160:	4a0e      	ldr	r2, [pc, #56]	; (800119c <HAL_TIM_Encoder_MspInit+0x124>)
 8001162:	f043 0301 	orr.w	r3, r3, #1
 8001166:	6313      	str	r3, [r2, #48]	; 0x30
 8001168:	4b0c      	ldr	r3, [pc, #48]	; (800119c <HAL_TIM_Encoder_MspInit+0x124>)
 800116a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116c:	f003 0301 	and.w	r3, r3, #1
 8001170:	60bb      	str	r3, [r7, #8]
 8001172:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001174:	23c0      	movs	r3, #192	; 0xc0
 8001176:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001178:	2302      	movs	r3, #2
 800117a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117c:	2300      	movs	r3, #0
 800117e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001180:	2300      	movs	r3, #0
 8001182:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001184:	2302      	movs	r3, #2
 8001186:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001188:	f107 031c 	add.w	r3, r7, #28
 800118c:	4619      	mov	r1, r3
 800118e:	4804      	ldr	r0, [pc, #16]	; (80011a0 <HAL_TIM_Encoder_MspInit+0x128>)
 8001190:	f000 fb70 	bl	8001874 <HAL_GPIO_Init>
}
 8001194:	bf00      	nop
 8001196:	3730      	adds	r7, #48	; 0x30
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	40023800 	.word	0x40023800
 80011a0:	40020000 	.word	0x40020000
 80011a4:	40020400 	.word	0x40020400
 80011a8:	40000400 	.word	0x40000400

080011ac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b088      	sub	sp, #32
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b4:	f107 030c 	add.w	r3, r7, #12
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]
 80011c0:	60da      	str	r2, [r3, #12]
 80011c2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a12      	ldr	r2, [pc, #72]	; (8001214 <HAL_TIM_MspPostInit+0x68>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d11e      	bne.n	800120c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	60bb      	str	r3, [r7, #8]
 80011d2:	4b11      	ldr	r3, [pc, #68]	; (8001218 <HAL_TIM_MspPostInit+0x6c>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d6:	4a10      	ldr	r2, [pc, #64]	; (8001218 <HAL_TIM_MspPostInit+0x6c>)
 80011d8:	f043 0310 	orr.w	r3, r3, #16
 80011dc:	6313      	str	r3, [r2, #48]	; 0x30
 80011de:	4b0e      	ldr	r3, [pc, #56]	; (8001218 <HAL_TIM_MspPostInit+0x6c>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e2:	f003 0310 	and.w	r3, r3, #16
 80011e6:	60bb      	str	r3, [r7, #8]
 80011e8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80011ea:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80011ee:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f0:	2302      	movs	r3, #2
 80011f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f4:	2300      	movs	r3, #0
 80011f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f8:	2300      	movs	r3, #0
 80011fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80011fc:	2301      	movs	r3, #1
 80011fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001200:	f107 030c 	add.w	r3, r7, #12
 8001204:	4619      	mov	r1, r3
 8001206:	4805      	ldr	r0, [pc, #20]	; (800121c <HAL_TIM_MspPostInit+0x70>)
 8001208:	f000 fb34 	bl	8001874 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800120c:	bf00      	nop
 800120e:	3720      	adds	r7, #32
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	40010000 	.word	0x40010000
 8001218:	40023800 	.word	0x40023800
 800121c:	40021000 	.word	0x40021000

08001220 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b08a      	sub	sp, #40	; 0x28
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001228:	f107 0314 	add.w	r3, r7, #20
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]
 8001232:	609a      	str	r2, [r3, #8]
 8001234:	60da      	str	r2, [r3, #12]
 8001236:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a1d      	ldr	r2, [pc, #116]	; (80012b4 <HAL_UART_MspInit+0x94>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d134      	bne.n	80012ac <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	613b      	str	r3, [r7, #16]
 8001246:	4b1c      	ldr	r3, [pc, #112]	; (80012b8 <HAL_UART_MspInit+0x98>)
 8001248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124a:	4a1b      	ldr	r2, [pc, #108]	; (80012b8 <HAL_UART_MspInit+0x98>)
 800124c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001250:	6413      	str	r3, [r2, #64]	; 0x40
 8001252:	4b19      	ldr	r3, [pc, #100]	; (80012b8 <HAL_UART_MspInit+0x98>)
 8001254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001256:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800125a:	613b      	str	r3, [r7, #16]
 800125c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	60fb      	str	r3, [r7, #12]
 8001262:	4b15      	ldr	r3, [pc, #84]	; (80012b8 <HAL_UART_MspInit+0x98>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	4a14      	ldr	r2, [pc, #80]	; (80012b8 <HAL_UART_MspInit+0x98>)
 8001268:	f043 0304 	orr.w	r3, r3, #4
 800126c:	6313      	str	r3, [r2, #48]	; 0x30
 800126e:	4b12      	ldr	r3, [pc, #72]	; (80012b8 <HAL_UART_MspInit+0x98>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	f003 0304 	and.w	r3, r3, #4
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800127a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800127e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001280:	2302      	movs	r3, #2
 8001282:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001284:	2300      	movs	r3, #0
 8001286:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001288:	2303      	movs	r3, #3
 800128a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800128c:	2307      	movs	r3, #7
 800128e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001290:	f107 0314 	add.w	r3, r7, #20
 8001294:	4619      	mov	r1, r3
 8001296:	4809      	ldr	r0, [pc, #36]	; (80012bc <HAL_UART_MspInit+0x9c>)
 8001298:	f000 faec 	bl	8001874 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800129c:	2200      	movs	r2, #0
 800129e:	2105      	movs	r1, #5
 80012a0:	2027      	movs	r0, #39	; 0x27
 80012a2:	f000 fa1e 	bl	80016e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80012a6:	2027      	movs	r0, #39	; 0x27
 80012a8:	f000 fa37 	bl	800171a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80012ac:	bf00      	nop
 80012ae:	3728      	adds	r7, #40	; 0x28
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	40004800 	.word	0x40004800
 80012b8:	40023800 	.word	0x40023800
 80012bc:	40020800 	.word	0x40020800

080012c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012c4:	e7fe      	b.n	80012c4 <NMI_Handler+0x4>

080012c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012c6:	b480      	push	{r7}
 80012c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012ca:	e7fe      	b.n	80012ca <HardFault_Handler+0x4>

080012cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012d0:	e7fe      	b.n	80012d0 <MemManage_Handler+0x4>

080012d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012d2:	b480      	push	{r7}
 80012d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012d6:	e7fe      	b.n	80012d6 <BusFault_Handler+0x4>

080012d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012dc:	e7fe      	b.n	80012dc <UsageFault_Handler+0x4>

080012de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012de:	b480      	push	{r7}
 80012e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012e2:	bf00      	nop
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr

080012ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012f0:	f000 f8d8 	bl	80014a4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80012f4:	f005 f99a 	bl	800662c <xTaskGetSchedulerState>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b01      	cmp	r3, #1
 80012fc:	d001      	beq.n	8001302 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80012fe:	f003 fdfb 	bl	8004ef8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001302:	bf00      	nop
 8001304:	bd80      	pop	{r7, pc}
	...

08001308 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800130c:	4802      	ldr	r0, [pc, #8]	; (8001318 <USART3_IRQHandler+0x10>)
 800130e:	f002 f97f 	bl	8003610 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	200049f8 	.word	0x200049f8

0800131c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b086      	sub	sp, #24
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001324:	4a14      	ldr	r2, [pc, #80]	; (8001378 <_sbrk+0x5c>)
 8001326:	4b15      	ldr	r3, [pc, #84]	; (800137c <_sbrk+0x60>)
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001330:	4b13      	ldr	r3, [pc, #76]	; (8001380 <_sbrk+0x64>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d102      	bne.n	800133e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001338:	4b11      	ldr	r3, [pc, #68]	; (8001380 <_sbrk+0x64>)
 800133a:	4a12      	ldr	r2, [pc, #72]	; (8001384 <_sbrk+0x68>)
 800133c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800133e:	4b10      	ldr	r3, [pc, #64]	; (8001380 <_sbrk+0x64>)
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4413      	add	r3, r2
 8001346:	693a      	ldr	r2, [r7, #16]
 8001348:	429a      	cmp	r2, r3
 800134a:	d207      	bcs.n	800135c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800134c:	f005 ffce 	bl	80072ec <__errno>
 8001350:	4603      	mov	r3, r0
 8001352:	220c      	movs	r2, #12
 8001354:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001356:	f04f 33ff 	mov.w	r3, #4294967295
 800135a:	e009      	b.n	8001370 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800135c:	4b08      	ldr	r3, [pc, #32]	; (8001380 <_sbrk+0x64>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001362:	4b07      	ldr	r3, [pc, #28]	; (8001380 <_sbrk+0x64>)
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4413      	add	r3, r2
 800136a:	4a05      	ldr	r2, [pc, #20]	; (8001380 <_sbrk+0x64>)
 800136c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800136e:	68fb      	ldr	r3, [r7, #12]
}
 8001370:	4618      	mov	r0, r3
 8001372:	3718      	adds	r7, #24
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	20020000 	.word	0x20020000
 800137c:	00000400 	.word	0x00000400
 8001380:	20000090 	.word	0x20000090
 8001384:	20004f88 	.word	0x20004f88

08001388 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800138c:	4b06      	ldr	r3, [pc, #24]	; (80013a8 <SystemInit+0x20>)
 800138e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001392:	4a05      	ldr	r2, [pc, #20]	; (80013a8 <SystemInit+0x20>)
 8001394:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001398:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800139c:	bf00      	nop
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	e000ed00 	.word	0xe000ed00

080013ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80013ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013e4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013b0:	480d      	ldr	r0, [pc, #52]	; (80013e8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80013b2:	490e      	ldr	r1, [pc, #56]	; (80013ec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80013b4:	4a0e      	ldr	r2, [pc, #56]	; (80013f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013b8:	e002      	b.n	80013c0 <LoopCopyDataInit>

080013ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013be:	3304      	adds	r3, #4

080013c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013c4:	d3f9      	bcc.n	80013ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013c6:	4a0b      	ldr	r2, [pc, #44]	; (80013f4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80013c8:	4c0b      	ldr	r4, [pc, #44]	; (80013f8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80013ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013cc:	e001      	b.n	80013d2 <LoopFillZerobss>

080013ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013d0:	3204      	adds	r2, #4

080013d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013d4:	d3fb      	bcc.n	80013ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80013d6:	f7ff ffd7 	bl	8001388 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013da:	f005 ff8d 	bl	80072f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013de:	f7ff f8c3 	bl	8000568 <main>
  bx  lr    
 80013e2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80013e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013ec:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80013f0:	080087a0 	.word	0x080087a0
  ldr r2, =_sbss
 80013f4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80013f8:	20004f88 	.word	0x20004f88

080013fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013fc:	e7fe      	b.n	80013fc <ADC_IRQHandler>
	...

08001400 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001404:	4b0e      	ldr	r3, [pc, #56]	; (8001440 <HAL_Init+0x40>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a0d      	ldr	r2, [pc, #52]	; (8001440 <HAL_Init+0x40>)
 800140a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800140e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001410:	4b0b      	ldr	r3, [pc, #44]	; (8001440 <HAL_Init+0x40>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a0a      	ldr	r2, [pc, #40]	; (8001440 <HAL_Init+0x40>)
 8001416:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800141a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800141c:	4b08      	ldr	r3, [pc, #32]	; (8001440 <HAL_Init+0x40>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a07      	ldr	r2, [pc, #28]	; (8001440 <HAL_Init+0x40>)
 8001422:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001426:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001428:	2003      	movs	r0, #3
 800142a:	f000 f94f 	bl	80016cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800142e:	200f      	movs	r0, #15
 8001430:	f000 f808 	bl	8001444 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001434:	f7ff fd96 	bl	8000f64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001438:	2300      	movs	r3, #0
}
 800143a:	4618      	mov	r0, r3
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	40023c00 	.word	0x40023c00

08001444 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800144c:	4b12      	ldr	r3, [pc, #72]	; (8001498 <HAL_InitTick+0x54>)
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	4b12      	ldr	r3, [pc, #72]	; (800149c <HAL_InitTick+0x58>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	4619      	mov	r1, r3
 8001456:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800145a:	fbb3 f3f1 	udiv	r3, r3, r1
 800145e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001462:	4618      	mov	r0, r3
 8001464:	f000 f967 	bl	8001736 <HAL_SYSTICK_Config>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
 8001470:	e00e      	b.n	8001490 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2b0f      	cmp	r3, #15
 8001476:	d80a      	bhi.n	800148e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001478:	2200      	movs	r2, #0
 800147a:	6879      	ldr	r1, [r7, #4]
 800147c:	f04f 30ff 	mov.w	r0, #4294967295
 8001480:	f000 f92f 	bl	80016e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001484:	4a06      	ldr	r2, [pc, #24]	; (80014a0 <HAL_InitTick+0x5c>)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800148a:	2300      	movs	r3, #0
 800148c:	e000      	b.n	8001490 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
}
 8001490:	4618      	mov	r0, r3
 8001492:	3708      	adds	r7, #8
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	20000000 	.word	0x20000000
 800149c:	20000008 	.word	0x20000008
 80014a0:	20000004 	.word	0x20000004

080014a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014a8:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <HAL_IncTick+0x20>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	461a      	mov	r2, r3
 80014ae:	4b06      	ldr	r3, [pc, #24]	; (80014c8 <HAL_IncTick+0x24>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4413      	add	r3, r2
 80014b4:	4a04      	ldr	r2, [pc, #16]	; (80014c8 <HAL_IncTick+0x24>)
 80014b6:	6013      	str	r3, [r2, #0]
}
 80014b8:	bf00      	nop
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	20000008 	.word	0x20000008
 80014c8:	20004b34 	.word	0x20004b34

080014cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  return uwTick;
 80014d0:	4b03      	ldr	r3, [pc, #12]	; (80014e0 <HAL_GetTick+0x14>)
 80014d2:	681b      	ldr	r3, [r3, #0]
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	20004b34 	.word	0x20004b34

080014e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014ec:	f7ff ffee 	bl	80014cc <HAL_GetTick>
 80014f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014fc:	d005      	beq.n	800150a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014fe:	4b0a      	ldr	r3, [pc, #40]	; (8001528 <HAL_Delay+0x44>)
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	461a      	mov	r2, r3
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	4413      	add	r3, r2
 8001508:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800150a:	bf00      	nop
 800150c:	f7ff ffde 	bl	80014cc <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	68fa      	ldr	r2, [r7, #12]
 8001518:	429a      	cmp	r2, r3
 800151a:	d8f7      	bhi.n	800150c <HAL_Delay+0x28>
  {
  }
}
 800151c:	bf00      	nop
 800151e:	bf00      	nop
 8001520:	3710      	adds	r7, #16
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	20000008 	.word	0x20000008

0800152c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800152c:	b480      	push	{r7}
 800152e:	b085      	sub	sp, #20
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f003 0307 	and.w	r3, r3, #7
 800153a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800153c:	4b0c      	ldr	r3, [pc, #48]	; (8001570 <__NVIC_SetPriorityGrouping+0x44>)
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001542:	68ba      	ldr	r2, [r7, #8]
 8001544:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001548:	4013      	ands	r3, r2
 800154a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001554:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001558:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800155c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800155e:	4a04      	ldr	r2, [pc, #16]	; (8001570 <__NVIC_SetPriorityGrouping+0x44>)
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	60d3      	str	r3, [r2, #12]
}
 8001564:	bf00      	nop
 8001566:	3714      	adds	r7, #20
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr
 8001570:	e000ed00 	.word	0xe000ed00

08001574 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001578:	4b04      	ldr	r3, [pc, #16]	; (800158c <__NVIC_GetPriorityGrouping+0x18>)
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	0a1b      	lsrs	r3, r3, #8
 800157e:	f003 0307 	and.w	r3, r3, #7
}
 8001582:	4618      	mov	r0, r3
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr
 800158c:	e000ed00 	.word	0xe000ed00

08001590 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	4603      	mov	r3, r0
 8001598:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800159a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	db0b      	blt.n	80015ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015a2:	79fb      	ldrb	r3, [r7, #7]
 80015a4:	f003 021f 	and.w	r2, r3, #31
 80015a8:	4907      	ldr	r1, [pc, #28]	; (80015c8 <__NVIC_EnableIRQ+0x38>)
 80015aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ae:	095b      	lsrs	r3, r3, #5
 80015b0:	2001      	movs	r0, #1
 80015b2:	fa00 f202 	lsl.w	r2, r0, r2
 80015b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015ba:	bf00      	nop
 80015bc:	370c      	adds	r7, #12
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	e000e100 	.word	0xe000e100

080015cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	4603      	mov	r3, r0
 80015d4:	6039      	str	r1, [r7, #0]
 80015d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	db0a      	blt.n	80015f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	b2da      	uxtb	r2, r3
 80015e4:	490c      	ldr	r1, [pc, #48]	; (8001618 <__NVIC_SetPriority+0x4c>)
 80015e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ea:	0112      	lsls	r2, r2, #4
 80015ec:	b2d2      	uxtb	r2, r2
 80015ee:	440b      	add	r3, r1
 80015f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015f4:	e00a      	b.n	800160c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	b2da      	uxtb	r2, r3
 80015fa:	4908      	ldr	r1, [pc, #32]	; (800161c <__NVIC_SetPriority+0x50>)
 80015fc:	79fb      	ldrb	r3, [r7, #7]
 80015fe:	f003 030f 	and.w	r3, r3, #15
 8001602:	3b04      	subs	r3, #4
 8001604:	0112      	lsls	r2, r2, #4
 8001606:	b2d2      	uxtb	r2, r2
 8001608:	440b      	add	r3, r1
 800160a:	761a      	strb	r2, [r3, #24]
}
 800160c:	bf00      	nop
 800160e:	370c      	adds	r7, #12
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr
 8001618:	e000e100 	.word	0xe000e100
 800161c:	e000ed00 	.word	0xe000ed00

08001620 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001620:	b480      	push	{r7}
 8001622:	b089      	sub	sp, #36	; 0x24
 8001624:	af00      	add	r7, sp, #0
 8001626:	60f8      	str	r0, [r7, #12]
 8001628:	60b9      	str	r1, [r7, #8]
 800162a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	f003 0307 	and.w	r3, r3, #7
 8001632:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	f1c3 0307 	rsb	r3, r3, #7
 800163a:	2b04      	cmp	r3, #4
 800163c:	bf28      	it	cs
 800163e:	2304      	movcs	r3, #4
 8001640:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	3304      	adds	r3, #4
 8001646:	2b06      	cmp	r3, #6
 8001648:	d902      	bls.n	8001650 <NVIC_EncodePriority+0x30>
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	3b03      	subs	r3, #3
 800164e:	e000      	b.n	8001652 <NVIC_EncodePriority+0x32>
 8001650:	2300      	movs	r3, #0
 8001652:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001654:	f04f 32ff 	mov.w	r2, #4294967295
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	fa02 f303 	lsl.w	r3, r2, r3
 800165e:	43da      	mvns	r2, r3
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	401a      	ands	r2, r3
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001668:	f04f 31ff 	mov.w	r1, #4294967295
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	fa01 f303 	lsl.w	r3, r1, r3
 8001672:	43d9      	mvns	r1, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001678:	4313      	orrs	r3, r2
         );
}
 800167a:	4618      	mov	r0, r3
 800167c:	3724      	adds	r7, #36	; 0x24
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
	...

08001688 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	3b01      	subs	r3, #1
 8001694:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001698:	d301      	bcc.n	800169e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800169a:	2301      	movs	r3, #1
 800169c:	e00f      	b.n	80016be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800169e:	4a0a      	ldr	r2, [pc, #40]	; (80016c8 <SysTick_Config+0x40>)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	3b01      	subs	r3, #1
 80016a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016a6:	210f      	movs	r1, #15
 80016a8:	f04f 30ff 	mov.w	r0, #4294967295
 80016ac:	f7ff ff8e 	bl	80015cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016b0:	4b05      	ldr	r3, [pc, #20]	; (80016c8 <SysTick_Config+0x40>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016b6:	4b04      	ldr	r3, [pc, #16]	; (80016c8 <SysTick_Config+0x40>)
 80016b8:	2207      	movs	r2, #7
 80016ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016bc:	2300      	movs	r3, #0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3708      	adds	r7, #8
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	e000e010 	.word	0xe000e010

080016cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f7ff ff29 	bl	800152c <__NVIC_SetPriorityGrouping>
}
 80016da:	bf00      	nop
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016e2:	b580      	push	{r7, lr}
 80016e4:	b086      	sub	sp, #24
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	4603      	mov	r3, r0
 80016ea:	60b9      	str	r1, [r7, #8]
 80016ec:	607a      	str	r2, [r7, #4]
 80016ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016f0:	2300      	movs	r3, #0
 80016f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016f4:	f7ff ff3e 	bl	8001574 <__NVIC_GetPriorityGrouping>
 80016f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	68b9      	ldr	r1, [r7, #8]
 80016fe:	6978      	ldr	r0, [r7, #20]
 8001700:	f7ff ff8e 	bl	8001620 <NVIC_EncodePriority>
 8001704:	4602      	mov	r2, r0
 8001706:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800170a:	4611      	mov	r1, r2
 800170c:	4618      	mov	r0, r3
 800170e:	f7ff ff5d 	bl	80015cc <__NVIC_SetPriority>
}
 8001712:	bf00      	nop
 8001714:	3718      	adds	r7, #24
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}

0800171a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800171a:	b580      	push	{r7, lr}
 800171c:	b082      	sub	sp, #8
 800171e:	af00      	add	r7, sp, #0
 8001720:	4603      	mov	r3, r0
 8001722:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001724:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff ff31 	bl	8001590 <__NVIC_EnableIRQ>
}
 800172e:	bf00      	nop
 8001730:	3708      	adds	r7, #8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}

08001736 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001736:	b580      	push	{r7, lr}
 8001738:	b082      	sub	sp, #8
 800173a:	af00      	add	r7, sp, #0
 800173c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f7ff ffa2 	bl	8001688 <SysTick_Config>
 8001744:	4603      	mov	r3, r0
}
 8001746:	4618      	mov	r0, r3
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}

0800174e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800174e:	b580      	push	{r7, lr}
 8001750:	b084      	sub	sp, #16
 8001752:	af00      	add	r7, sp, #0
 8001754:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800175a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800175c:	f7ff feb6 	bl	80014cc <HAL_GetTick>
 8001760:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001768:	b2db      	uxtb	r3, r3
 800176a:	2b02      	cmp	r3, #2
 800176c:	d008      	beq.n	8001780 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2280      	movs	r2, #128	; 0x80
 8001772:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2200      	movs	r2, #0
 8001778:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e052      	b.n	8001826 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f022 0216 	bic.w	r2, r2, #22
 800178e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	695a      	ldr	r2, [r3, #20]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800179e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d103      	bne.n	80017b0 <HAL_DMA_Abort+0x62>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d007      	beq.n	80017c0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f022 0208 	bic.w	r2, r2, #8
 80017be:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f022 0201 	bic.w	r2, r2, #1
 80017ce:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017d0:	e013      	b.n	80017fa <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80017d2:	f7ff fe7b 	bl	80014cc <HAL_GetTick>
 80017d6:	4602      	mov	r2, r0
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	2b05      	cmp	r3, #5
 80017de:	d90c      	bls.n	80017fa <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2220      	movs	r2, #32
 80017e4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2203      	movs	r2, #3
 80017ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2200      	movs	r2, #0
 80017f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e015      	b.n	8001826 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 0301 	and.w	r3, r3, #1
 8001804:	2b00      	cmp	r3, #0
 8001806:	d1e4      	bne.n	80017d2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800180c:	223f      	movs	r2, #63	; 0x3f
 800180e:	409a      	lsls	r2, r3
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2201      	movs	r2, #1
 8001818:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2200      	movs	r2, #0
 8001820:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001824:	2300      	movs	r3, #0
}
 8001826:	4618      	mov	r0, r3
 8001828:	3710      	adds	r7, #16
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}

0800182e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800182e:	b480      	push	{r7}
 8001830:	b083      	sub	sp, #12
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800183c:	b2db      	uxtb	r3, r3
 800183e:	2b02      	cmp	r3, #2
 8001840:	d004      	beq.n	800184c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2280      	movs	r2, #128	; 0x80
 8001846:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	e00c      	b.n	8001866 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2205      	movs	r2, #5
 8001850:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f022 0201 	bic.w	r2, r2, #1
 8001862:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001864:	2300      	movs	r3, #0
}
 8001866:	4618      	mov	r0, r3
 8001868:	370c      	adds	r7, #12
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
	...

08001874 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001874:	b480      	push	{r7}
 8001876:	b089      	sub	sp, #36	; 0x24
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800187e:	2300      	movs	r3, #0
 8001880:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001882:	2300      	movs	r3, #0
 8001884:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001886:	2300      	movs	r3, #0
 8001888:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800188a:	2300      	movs	r3, #0
 800188c:	61fb      	str	r3, [r7, #28]
 800188e:	e16b      	b.n	8001b68 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001890:	2201      	movs	r2, #1
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	fa02 f303 	lsl.w	r3, r2, r3
 8001898:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	697a      	ldr	r2, [r7, #20]
 80018a0:	4013      	ands	r3, r2
 80018a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018a4:	693a      	ldr	r2, [r7, #16]
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	f040 815a 	bne.w	8001b62 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f003 0303 	and.w	r3, r3, #3
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d005      	beq.n	80018c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d130      	bne.n	8001928 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	005b      	lsls	r3, r3, #1
 80018d0:	2203      	movs	r2, #3
 80018d2:	fa02 f303 	lsl.w	r3, r2, r3
 80018d6:	43db      	mvns	r3, r3
 80018d8:	69ba      	ldr	r2, [r7, #24]
 80018da:	4013      	ands	r3, r2
 80018dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	68da      	ldr	r2, [r3, #12]
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	005b      	lsls	r3, r3, #1
 80018e6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ea:	69ba      	ldr	r2, [r7, #24]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	69ba      	ldr	r2, [r7, #24]
 80018f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018fc:	2201      	movs	r2, #1
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	fa02 f303 	lsl.w	r3, r2, r3
 8001904:	43db      	mvns	r3, r3
 8001906:	69ba      	ldr	r2, [r7, #24]
 8001908:	4013      	ands	r3, r2
 800190a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	091b      	lsrs	r3, r3, #4
 8001912:	f003 0201 	and.w	r2, r3, #1
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	4313      	orrs	r3, r2
 8001920:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	69ba      	ldr	r2, [r7, #24]
 8001926:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f003 0303 	and.w	r3, r3, #3
 8001930:	2b03      	cmp	r3, #3
 8001932:	d017      	beq.n	8001964 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	2203      	movs	r2, #3
 8001940:	fa02 f303 	lsl.w	r3, r2, r3
 8001944:	43db      	mvns	r3, r3
 8001946:	69ba      	ldr	r2, [r7, #24]
 8001948:	4013      	ands	r3, r2
 800194a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	689a      	ldr	r2, [r3, #8]
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	005b      	lsls	r3, r3, #1
 8001954:	fa02 f303 	lsl.w	r3, r2, r3
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	4313      	orrs	r3, r2
 800195c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f003 0303 	and.w	r3, r3, #3
 800196c:	2b02      	cmp	r3, #2
 800196e:	d123      	bne.n	80019b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	08da      	lsrs	r2, r3, #3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	3208      	adds	r2, #8
 8001978:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800197c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	f003 0307 	and.w	r3, r3, #7
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	220f      	movs	r2, #15
 8001988:	fa02 f303 	lsl.w	r3, r2, r3
 800198c:	43db      	mvns	r3, r3
 800198e:	69ba      	ldr	r2, [r7, #24]
 8001990:	4013      	ands	r3, r2
 8001992:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	691a      	ldr	r2, [r3, #16]
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	f003 0307 	and.w	r3, r3, #7
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	08da      	lsrs	r2, r3, #3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	3208      	adds	r2, #8
 80019b2:	69b9      	ldr	r1, [r7, #24]
 80019b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	005b      	lsls	r3, r3, #1
 80019c2:	2203      	movs	r2, #3
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	43db      	mvns	r3, r3
 80019ca:	69ba      	ldr	r2, [r7, #24]
 80019cc:	4013      	ands	r3, r2
 80019ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f003 0203 	and.w	r2, r3, #3
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	4313      	orrs	r3, r2
 80019e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	f000 80b4 	beq.w	8001b62 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019fa:	2300      	movs	r3, #0
 80019fc:	60fb      	str	r3, [r7, #12]
 80019fe:	4b60      	ldr	r3, [pc, #384]	; (8001b80 <HAL_GPIO_Init+0x30c>)
 8001a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a02:	4a5f      	ldr	r2, [pc, #380]	; (8001b80 <HAL_GPIO_Init+0x30c>)
 8001a04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a08:	6453      	str	r3, [r2, #68]	; 0x44
 8001a0a:	4b5d      	ldr	r3, [pc, #372]	; (8001b80 <HAL_GPIO_Init+0x30c>)
 8001a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a12:	60fb      	str	r3, [r7, #12]
 8001a14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a16:	4a5b      	ldr	r2, [pc, #364]	; (8001b84 <HAL_GPIO_Init+0x310>)
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	089b      	lsrs	r3, r3, #2
 8001a1c:	3302      	adds	r3, #2
 8001a1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	f003 0303 	and.w	r3, r3, #3
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	220f      	movs	r2, #15
 8001a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a32:	43db      	mvns	r3, r3
 8001a34:	69ba      	ldr	r2, [r7, #24]
 8001a36:	4013      	ands	r3, r2
 8001a38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4a52      	ldr	r2, [pc, #328]	; (8001b88 <HAL_GPIO_Init+0x314>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d02b      	beq.n	8001a9a <HAL_GPIO_Init+0x226>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4a51      	ldr	r2, [pc, #324]	; (8001b8c <HAL_GPIO_Init+0x318>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d025      	beq.n	8001a96 <HAL_GPIO_Init+0x222>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4a50      	ldr	r2, [pc, #320]	; (8001b90 <HAL_GPIO_Init+0x31c>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d01f      	beq.n	8001a92 <HAL_GPIO_Init+0x21e>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a4f      	ldr	r2, [pc, #316]	; (8001b94 <HAL_GPIO_Init+0x320>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d019      	beq.n	8001a8e <HAL_GPIO_Init+0x21a>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a4e      	ldr	r2, [pc, #312]	; (8001b98 <HAL_GPIO_Init+0x324>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d013      	beq.n	8001a8a <HAL_GPIO_Init+0x216>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4a4d      	ldr	r2, [pc, #308]	; (8001b9c <HAL_GPIO_Init+0x328>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d00d      	beq.n	8001a86 <HAL_GPIO_Init+0x212>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4a4c      	ldr	r2, [pc, #304]	; (8001ba0 <HAL_GPIO_Init+0x32c>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d007      	beq.n	8001a82 <HAL_GPIO_Init+0x20e>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a4b      	ldr	r2, [pc, #300]	; (8001ba4 <HAL_GPIO_Init+0x330>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d101      	bne.n	8001a7e <HAL_GPIO_Init+0x20a>
 8001a7a:	2307      	movs	r3, #7
 8001a7c:	e00e      	b.n	8001a9c <HAL_GPIO_Init+0x228>
 8001a7e:	2308      	movs	r3, #8
 8001a80:	e00c      	b.n	8001a9c <HAL_GPIO_Init+0x228>
 8001a82:	2306      	movs	r3, #6
 8001a84:	e00a      	b.n	8001a9c <HAL_GPIO_Init+0x228>
 8001a86:	2305      	movs	r3, #5
 8001a88:	e008      	b.n	8001a9c <HAL_GPIO_Init+0x228>
 8001a8a:	2304      	movs	r3, #4
 8001a8c:	e006      	b.n	8001a9c <HAL_GPIO_Init+0x228>
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e004      	b.n	8001a9c <HAL_GPIO_Init+0x228>
 8001a92:	2302      	movs	r3, #2
 8001a94:	e002      	b.n	8001a9c <HAL_GPIO_Init+0x228>
 8001a96:	2301      	movs	r3, #1
 8001a98:	e000      	b.n	8001a9c <HAL_GPIO_Init+0x228>
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	69fa      	ldr	r2, [r7, #28]
 8001a9e:	f002 0203 	and.w	r2, r2, #3
 8001aa2:	0092      	lsls	r2, r2, #2
 8001aa4:	4093      	lsls	r3, r2
 8001aa6:	69ba      	ldr	r2, [r7, #24]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001aac:	4935      	ldr	r1, [pc, #212]	; (8001b84 <HAL_GPIO_Init+0x310>)
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	089b      	lsrs	r3, r3, #2
 8001ab2:	3302      	adds	r3, #2
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001aba:	4b3b      	ldr	r3, [pc, #236]	; (8001ba8 <HAL_GPIO_Init+0x334>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	43db      	mvns	r3, r3
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d003      	beq.n	8001ade <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001ad6:	69ba      	ldr	r2, [r7, #24]
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ade:	4a32      	ldr	r2, [pc, #200]	; (8001ba8 <HAL_GPIO_Init+0x334>)
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ae4:	4b30      	ldr	r3, [pc, #192]	; (8001ba8 <HAL_GPIO_Init+0x334>)
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	43db      	mvns	r3, r3
 8001aee:	69ba      	ldr	r2, [r7, #24]
 8001af0:	4013      	ands	r3, r2
 8001af2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d003      	beq.n	8001b08 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b08:	4a27      	ldr	r2, [pc, #156]	; (8001ba8 <HAL_GPIO_Init+0x334>)
 8001b0a:	69bb      	ldr	r3, [r7, #24]
 8001b0c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b0e:	4b26      	ldr	r3, [pc, #152]	; (8001ba8 <HAL_GPIO_Init+0x334>)
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	43db      	mvns	r3, r3
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d003      	beq.n	8001b32 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001b2a:	69ba      	ldr	r2, [r7, #24]
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b32:	4a1d      	ldr	r2, [pc, #116]	; (8001ba8 <HAL_GPIO_Init+0x334>)
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b38:	4b1b      	ldr	r3, [pc, #108]	; (8001ba8 <HAL_GPIO_Init+0x334>)
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	43db      	mvns	r3, r3
 8001b42:	69ba      	ldr	r2, [r7, #24]
 8001b44:	4013      	ands	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d003      	beq.n	8001b5c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b5c:	4a12      	ldr	r2, [pc, #72]	; (8001ba8 <HAL_GPIO_Init+0x334>)
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	3301      	adds	r3, #1
 8001b66:	61fb      	str	r3, [r7, #28]
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	2b0f      	cmp	r3, #15
 8001b6c:	f67f ae90 	bls.w	8001890 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b70:	bf00      	nop
 8001b72:	bf00      	nop
 8001b74:	3724      	adds	r7, #36	; 0x24
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	40023800 	.word	0x40023800
 8001b84:	40013800 	.word	0x40013800
 8001b88:	40020000 	.word	0x40020000
 8001b8c:	40020400 	.word	0x40020400
 8001b90:	40020800 	.word	0x40020800
 8001b94:	40020c00 	.word	0x40020c00
 8001b98:	40021000 	.word	0x40021000
 8001b9c:	40021400 	.word	0x40021400
 8001ba0:	40021800 	.word	0x40021800
 8001ba4:	40021c00 	.word	0x40021c00
 8001ba8:	40013c00 	.word	0x40013c00

08001bac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	807b      	strh	r3, [r7, #2]
 8001bb8:	4613      	mov	r3, r2
 8001bba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bbc:	787b      	ldrb	r3, [r7, #1]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d003      	beq.n	8001bca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bc2:	887a      	ldrh	r2, [r7, #2]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bc8:	e003      	b.n	8001bd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bca:	887b      	ldrh	r3, [r7, #2]
 8001bcc:	041a      	lsls	r2, r3, #16
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	619a      	str	r2, [r3, #24]
}
 8001bd2:	bf00      	nop
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr

08001bde <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001bde:	b480      	push	{r7}
 8001be0:	b085      	sub	sp, #20
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
 8001be6:	460b      	mov	r3, r1
 8001be8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	695b      	ldr	r3, [r3, #20]
 8001bee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001bf0:	887a      	ldrh	r2, [r7, #2]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	041a      	lsls	r2, r3, #16
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	43d9      	mvns	r1, r3
 8001bfc:	887b      	ldrh	r3, [r7, #2]
 8001bfe:	400b      	ands	r3, r1
 8001c00:	431a      	orrs	r2, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	619a      	str	r2, [r3, #24]
}
 8001c06:	bf00      	nop
 8001c08:	3714      	adds	r7, #20
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
	...

08001c14 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8001c1a:	4b06      	ldr	r3, [pc, #24]	; (8001c34 <HAL_PWR_EnableBkUpAccess+0x20>)
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8001c20:	4b05      	ldr	r3, [pc, #20]	; (8001c38 <HAL_PWR_EnableBkUpAccess+0x24>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8001c26:	687b      	ldr	r3, [r7, #4]
}
 8001c28:	bf00      	nop
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr
 8001c34:	420e0020 	.word	0x420e0020
 8001c38:	40007000 	.word	0x40007000

08001c3c <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8001c42:	4b06      	ldr	r3, [pc, #24]	; (8001c5c <HAL_PWR_DisableBkUpAccess+0x20>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8001c48:	4b05      	ldr	r3, [pc, #20]	; (8001c60 <HAL_PWR_DisableBkUpAccess+0x24>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8001c4e:	687b      	ldr	r3, [r7, #4]
}
 8001c50:	bf00      	nop
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr
 8001c5c:	420e0020 	.word	0x420e0020
 8001c60:	40007000 	.word	0x40007000

08001c64 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b086      	sub	sp, #24
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d101      	bne.n	8001c76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e264      	b.n	8002140 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0301 	and.w	r3, r3, #1
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d075      	beq.n	8001d6e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c82:	4ba3      	ldr	r3, [pc, #652]	; (8001f10 <HAL_RCC_OscConfig+0x2ac>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	f003 030c 	and.w	r3, r3, #12
 8001c8a:	2b04      	cmp	r3, #4
 8001c8c:	d00c      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c8e:	4ba0      	ldr	r3, [pc, #640]	; (8001f10 <HAL_RCC_OscConfig+0x2ac>)
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c96:	2b08      	cmp	r3, #8
 8001c98:	d112      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c9a:	4b9d      	ldr	r3, [pc, #628]	; (8001f10 <HAL_RCC_OscConfig+0x2ac>)
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ca2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ca6:	d10b      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ca8:	4b99      	ldr	r3, [pc, #612]	; (8001f10 <HAL_RCC_OscConfig+0x2ac>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d05b      	beq.n	8001d6c <HAL_RCC_OscConfig+0x108>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d157      	bne.n	8001d6c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e23f      	b.n	8002140 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cc8:	d106      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x74>
 8001cca:	4b91      	ldr	r3, [pc, #580]	; (8001f10 <HAL_RCC_OscConfig+0x2ac>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a90      	ldr	r2, [pc, #576]	; (8001f10 <HAL_RCC_OscConfig+0x2ac>)
 8001cd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cd4:	6013      	str	r3, [r2, #0]
 8001cd6:	e01d      	b.n	8001d14 <HAL_RCC_OscConfig+0xb0>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ce0:	d10c      	bne.n	8001cfc <HAL_RCC_OscConfig+0x98>
 8001ce2:	4b8b      	ldr	r3, [pc, #556]	; (8001f10 <HAL_RCC_OscConfig+0x2ac>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a8a      	ldr	r2, [pc, #552]	; (8001f10 <HAL_RCC_OscConfig+0x2ac>)
 8001ce8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cec:	6013      	str	r3, [r2, #0]
 8001cee:	4b88      	ldr	r3, [pc, #544]	; (8001f10 <HAL_RCC_OscConfig+0x2ac>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a87      	ldr	r2, [pc, #540]	; (8001f10 <HAL_RCC_OscConfig+0x2ac>)
 8001cf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cf8:	6013      	str	r3, [r2, #0]
 8001cfa:	e00b      	b.n	8001d14 <HAL_RCC_OscConfig+0xb0>
 8001cfc:	4b84      	ldr	r3, [pc, #528]	; (8001f10 <HAL_RCC_OscConfig+0x2ac>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a83      	ldr	r2, [pc, #524]	; (8001f10 <HAL_RCC_OscConfig+0x2ac>)
 8001d02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d06:	6013      	str	r3, [r2, #0]
 8001d08:	4b81      	ldr	r3, [pc, #516]	; (8001f10 <HAL_RCC_OscConfig+0x2ac>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a80      	ldr	r2, [pc, #512]	; (8001f10 <HAL_RCC_OscConfig+0x2ac>)
 8001d0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d013      	beq.n	8001d44 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d1c:	f7ff fbd6 	bl	80014cc <HAL_GetTick>
 8001d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d22:	e008      	b.n	8001d36 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d24:	f7ff fbd2 	bl	80014cc <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	2b64      	cmp	r3, #100	; 0x64
 8001d30:	d901      	bls.n	8001d36 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e204      	b.n	8002140 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d36:	4b76      	ldr	r3, [pc, #472]	; (8001f10 <HAL_RCC_OscConfig+0x2ac>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d0f0      	beq.n	8001d24 <HAL_RCC_OscConfig+0xc0>
 8001d42:	e014      	b.n	8001d6e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d44:	f7ff fbc2 	bl	80014cc <HAL_GetTick>
 8001d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d4a:	e008      	b.n	8001d5e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d4c:	f7ff fbbe 	bl	80014cc <HAL_GetTick>
 8001d50:	4602      	mov	r2, r0
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	2b64      	cmp	r3, #100	; 0x64
 8001d58:	d901      	bls.n	8001d5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e1f0      	b.n	8002140 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d5e:	4b6c      	ldr	r3, [pc, #432]	; (8001f10 <HAL_RCC_OscConfig+0x2ac>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d1f0      	bne.n	8001d4c <HAL_RCC_OscConfig+0xe8>
 8001d6a:	e000      	b.n	8001d6e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0302 	and.w	r3, r3, #2
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d063      	beq.n	8001e42 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d7a:	4b65      	ldr	r3, [pc, #404]	; (8001f10 <HAL_RCC_OscConfig+0x2ac>)
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	f003 030c 	and.w	r3, r3, #12
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d00b      	beq.n	8001d9e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d86:	4b62      	ldr	r3, [pc, #392]	; (8001f10 <HAL_RCC_OscConfig+0x2ac>)
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d8e:	2b08      	cmp	r3, #8
 8001d90:	d11c      	bne.n	8001dcc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d92:	4b5f      	ldr	r3, [pc, #380]	; (8001f10 <HAL_RCC_OscConfig+0x2ac>)
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d116      	bne.n	8001dcc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d9e:	4b5c      	ldr	r3, [pc, #368]	; (8001f10 <HAL_RCC_OscConfig+0x2ac>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0302 	and.w	r3, r3, #2
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d005      	beq.n	8001db6 <HAL_RCC_OscConfig+0x152>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d001      	beq.n	8001db6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e1c4      	b.n	8002140 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001db6:	4b56      	ldr	r3, [pc, #344]	; (8001f10 <HAL_RCC_OscConfig+0x2ac>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	691b      	ldr	r3, [r3, #16]
 8001dc2:	00db      	lsls	r3, r3, #3
 8001dc4:	4952      	ldr	r1, [pc, #328]	; (8001f10 <HAL_RCC_OscConfig+0x2ac>)
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dca:	e03a      	b.n	8001e42 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d020      	beq.n	8001e16 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dd4:	4b4f      	ldr	r3, [pc, #316]	; (8001f14 <HAL_RCC_OscConfig+0x2b0>)
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dda:	f7ff fb77 	bl	80014cc <HAL_GetTick>
 8001dde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001de0:	e008      	b.n	8001df4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001de2:	f7ff fb73 	bl	80014cc <HAL_GetTick>
 8001de6:	4602      	mov	r2, r0
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d901      	bls.n	8001df4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001df0:	2303      	movs	r3, #3
 8001df2:	e1a5      	b.n	8002140 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001df4:	4b46      	ldr	r3, [pc, #280]	; (8001f10 <HAL_RCC_OscConfig+0x2ac>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 0302 	and.w	r3, r3, #2
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d0f0      	beq.n	8001de2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e00:	4b43      	ldr	r3, [pc, #268]	; (8001f10 <HAL_RCC_OscConfig+0x2ac>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	691b      	ldr	r3, [r3, #16]
 8001e0c:	00db      	lsls	r3, r3, #3
 8001e0e:	4940      	ldr	r1, [pc, #256]	; (8001f10 <HAL_RCC_OscConfig+0x2ac>)
 8001e10:	4313      	orrs	r3, r2
 8001e12:	600b      	str	r3, [r1, #0]
 8001e14:	e015      	b.n	8001e42 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e16:	4b3f      	ldr	r3, [pc, #252]	; (8001f14 <HAL_RCC_OscConfig+0x2b0>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e1c:	f7ff fb56 	bl	80014cc <HAL_GetTick>
 8001e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e22:	e008      	b.n	8001e36 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e24:	f7ff fb52 	bl	80014cc <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e184      	b.n	8002140 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e36:	4b36      	ldr	r3, [pc, #216]	; (8001f10 <HAL_RCC_OscConfig+0x2ac>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0302 	and.w	r3, r3, #2
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d1f0      	bne.n	8001e24 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0308 	and.w	r3, r3, #8
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d030      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	695b      	ldr	r3, [r3, #20]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d016      	beq.n	8001e84 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e56:	4b30      	ldr	r3, [pc, #192]	; (8001f18 <HAL_RCC_OscConfig+0x2b4>)
 8001e58:	2201      	movs	r2, #1
 8001e5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e5c:	f7ff fb36 	bl	80014cc <HAL_GetTick>
 8001e60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e62:	e008      	b.n	8001e76 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e64:	f7ff fb32 	bl	80014cc <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d901      	bls.n	8001e76 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e164      	b.n	8002140 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e76:	4b26      	ldr	r3, [pc, #152]	; (8001f10 <HAL_RCC_OscConfig+0x2ac>)
 8001e78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d0f0      	beq.n	8001e64 <HAL_RCC_OscConfig+0x200>
 8001e82:	e015      	b.n	8001eb0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e84:	4b24      	ldr	r3, [pc, #144]	; (8001f18 <HAL_RCC_OscConfig+0x2b4>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e8a:	f7ff fb1f 	bl	80014cc <HAL_GetTick>
 8001e8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e90:	e008      	b.n	8001ea4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e92:	f7ff fb1b 	bl	80014cc <HAL_GetTick>
 8001e96:	4602      	mov	r2, r0
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d901      	bls.n	8001ea4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	e14d      	b.n	8002140 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ea4:	4b1a      	ldr	r3, [pc, #104]	; (8001f10 <HAL_RCC_OscConfig+0x2ac>)
 8001ea6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ea8:	f003 0302 	and.w	r3, r3, #2
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d1f0      	bne.n	8001e92 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0304 	and.w	r3, r3, #4
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	f000 80a0 	beq.w	8001ffe <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ec2:	4b13      	ldr	r3, [pc, #76]	; (8001f10 <HAL_RCC_OscConfig+0x2ac>)
 8001ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d10f      	bne.n	8001eee <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ece:	2300      	movs	r3, #0
 8001ed0:	60bb      	str	r3, [r7, #8]
 8001ed2:	4b0f      	ldr	r3, [pc, #60]	; (8001f10 <HAL_RCC_OscConfig+0x2ac>)
 8001ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed6:	4a0e      	ldr	r2, [pc, #56]	; (8001f10 <HAL_RCC_OscConfig+0x2ac>)
 8001ed8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001edc:	6413      	str	r3, [r2, #64]	; 0x40
 8001ede:	4b0c      	ldr	r3, [pc, #48]	; (8001f10 <HAL_RCC_OscConfig+0x2ac>)
 8001ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ee6:	60bb      	str	r3, [r7, #8]
 8001ee8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001eea:	2301      	movs	r3, #1
 8001eec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eee:	4b0b      	ldr	r3, [pc, #44]	; (8001f1c <HAL_RCC_OscConfig+0x2b8>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d121      	bne.n	8001f3e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001efa:	4b08      	ldr	r3, [pc, #32]	; (8001f1c <HAL_RCC_OscConfig+0x2b8>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a07      	ldr	r2, [pc, #28]	; (8001f1c <HAL_RCC_OscConfig+0x2b8>)
 8001f00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f06:	f7ff fae1 	bl	80014cc <HAL_GetTick>
 8001f0a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f0c:	e011      	b.n	8001f32 <HAL_RCC_OscConfig+0x2ce>
 8001f0e:	bf00      	nop
 8001f10:	40023800 	.word	0x40023800
 8001f14:	42470000 	.word	0x42470000
 8001f18:	42470e80 	.word	0x42470e80
 8001f1c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f20:	f7ff fad4 	bl	80014cc <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d901      	bls.n	8001f32 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e106      	b.n	8002140 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f32:	4b85      	ldr	r3, [pc, #532]	; (8002148 <HAL_RCC_OscConfig+0x4e4>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d0f0      	beq.n	8001f20 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d106      	bne.n	8001f54 <HAL_RCC_OscConfig+0x2f0>
 8001f46:	4b81      	ldr	r3, [pc, #516]	; (800214c <HAL_RCC_OscConfig+0x4e8>)
 8001f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f4a:	4a80      	ldr	r2, [pc, #512]	; (800214c <HAL_RCC_OscConfig+0x4e8>)
 8001f4c:	f043 0301 	orr.w	r3, r3, #1
 8001f50:	6713      	str	r3, [r2, #112]	; 0x70
 8001f52:	e01c      	b.n	8001f8e <HAL_RCC_OscConfig+0x32a>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	2b05      	cmp	r3, #5
 8001f5a:	d10c      	bne.n	8001f76 <HAL_RCC_OscConfig+0x312>
 8001f5c:	4b7b      	ldr	r3, [pc, #492]	; (800214c <HAL_RCC_OscConfig+0x4e8>)
 8001f5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f60:	4a7a      	ldr	r2, [pc, #488]	; (800214c <HAL_RCC_OscConfig+0x4e8>)
 8001f62:	f043 0304 	orr.w	r3, r3, #4
 8001f66:	6713      	str	r3, [r2, #112]	; 0x70
 8001f68:	4b78      	ldr	r3, [pc, #480]	; (800214c <HAL_RCC_OscConfig+0x4e8>)
 8001f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f6c:	4a77      	ldr	r2, [pc, #476]	; (800214c <HAL_RCC_OscConfig+0x4e8>)
 8001f6e:	f043 0301 	orr.w	r3, r3, #1
 8001f72:	6713      	str	r3, [r2, #112]	; 0x70
 8001f74:	e00b      	b.n	8001f8e <HAL_RCC_OscConfig+0x32a>
 8001f76:	4b75      	ldr	r3, [pc, #468]	; (800214c <HAL_RCC_OscConfig+0x4e8>)
 8001f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f7a:	4a74      	ldr	r2, [pc, #464]	; (800214c <HAL_RCC_OscConfig+0x4e8>)
 8001f7c:	f023 0301 	bic.w	r3, r3, #1
 8001f80:	6713      	str	r3, [r2, #112]	; 0x70
 8001f82:	4b72      	ldr	r3, [pc, #456]	; (800214c <HAL_RCC_OscConfig+0x4e8>)
 8001f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f86:	4a71      	ldr	r2, [pc, #452]	; (800214c <HAL_RCC_OscConfig+0x4e8>)
 8001f88:	f023 0304 	bic.w	r3, r3, #4
 8001f8c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d015      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f96:	f7ff fa99 	bl	80014cc <HAL_GetTick>
 8001f9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f9c:	e00a      	b.n	8001fb4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f9e:	f7ff fa95 	bl	80014cc <HAL_GetTick>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d901      	bls.n	8001fb4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	e0c5      	b.n	8002140 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fb4:	4b65      	ldr	r3, [pc, #404]	; (800214c <HAL_RCC_OscConfig+0x4e8>)
 8001fb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fb8:	f003 0302 	and.w	r3, r3, #2
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d0ee      	beq.n	8001f9e <HAL_RCC_OscConfig+0x33a>
 8001fc0:	e014      	b.n	8001fec <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fc2:	f7ff fa83 	bl	80014cc <HAL_GetTick>
 8001fc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fc8:	e00a      	b.n	8001fe0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fca:	f7ff fa7f 	bl	80014cc <HAL_GetTick>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d901      	bls.n	8001fe0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e0af      	b.n	8002140 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fe0:	4b5a      	ldr	r3, [pc, #360]	; (800214c <HAL_RCC_OscConfig+0x4e8>)
 8001fe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fe4:	f003 0302 	and.w	r3, r3, #2
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d1ee      	bne.n	8001fca <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fec:	7dfb      	ldrb	r3, [r7, #23]
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d105      	bne.n	8001ffe <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ff2:	4b56      	ldr	r3, [pc, #344]	; (800214c <HAL_RCC_OscConfig+0x4e8>)
 8001ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff6:	4a55      	ldr	r2, [pc, #340]	; (800214c <HAL_RCC_OscConfig+0x4e8>)
 8001ff8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ffc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	699b      	ldr	r3, [r3, #24]
 8002002:	2b00      	cmp	r3, #0
 8002004:	f000 809b 	beq.w	800213e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002008:	4b50      	ldr	r3, [pc, #320]	; (800214c <HAL_RCC_OscConfig+0x4e8>)
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	f003 030c 	and.w	r3, r3, #12
 8002010:	2b08      	cmp	r3, #8
 8002012:	d05c      	beq.n	80020ce <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	699b      	ldr	r3, [r3, #24]
 8002018:	2b02      	cmp	r3, #2
 800201a:	d141      	bne.n	80020a0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800201c:	4b4c      	ldr	r3, [pc, #304]	; (8002150 <HAL_RCC_OscConfig+0x4ec>)
 800201e:	2200      	movs	r2, #0
 8002020:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002022:	f7ff fa53 	bl	80014cc <HAL_GetTick>
 8002026:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002028:	e008      	b.n	800203c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800202a:	f7ff fa4f 	bl	80014cc <HAL_GetTick>
 800202e:	4602      	mov	r2, r0
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	2b02      	cmp	r3, #2
 8002036:	d901      	bls.n	800203c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002038:	2303      	movs	r3, #3
 800203a:	e081      	b.n	8002140 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800203c:	4b43      	ldr	r3, [pc, #268]	; (800214c <HAL_RCC_OscConfig+0x4e8>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d1f0      	bne.n	800202a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	69da      	ldr	r2, [r3, #28]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6a1b      	ldr	r3, [r3, #32]
 8002050:	431a      	orrs	r2, r3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002056:	019b      	lsls	r3, r3, #6
 8002058:	431a      	orrs	r2, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800205e:	085b      	lsrs	r3, r3, #1
 8002060:	3b01      	subs	r3, #1
 8002062:	041b      	lsls	r3, r3, #16
 8002064:	431a      	orrs	r2, r3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800206a:	061b      	lsls	r3, r3, #24
 800206c:	4937      	ldr	r1, [pc, #220]	; (800214c <HAL_RCC_OscConfig+0x4e8>)
 800206e:	4313      	orrs	r3, r2
 8002070:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002072:	4b37      	ldr	r3, [pc, #220]	; (8002150 <HAL_RCC_OscConfig+0x4ec>)
 8002074:	2201      	movs	r2, #1
 8002076:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002078:	f7ff fa28 	bl	80014cc <HAL_GetTick>
 800207c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800207e:	e008      	b.n	8002092 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002080:	f7ff fa24 	bl	80014cc <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	2b02      	cmp	r3, #2
 800208c:	d901      	bls.n	8002092 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e056      	b.n	8002140 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002092:	4b2e      	ldr	r3, [pc, #184]	; (800214c <HAL_RCC_OscConfig+0x4e8>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d0f0      	beq.n	8002080 <HAL_RCC_OscConfig+0x41c>
 800209e:	e04e      	b.n	800213e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020a0:	4b2b      	ldr	r3, [pc, #172]	; (8002150 <HAL_RCC_OscConfig+0x4ec>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a6:	f7ff fa11 	bl	80014cc <HAL_GetTick>
 80020aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020ac:	e008      	b.n	80020c0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020ae:	f7ff fa0d 	bl	80014cc <HAL_GetTick>
 80020b2:	4602      	mov	r2, r0
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d901      	bls.n	80020c0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80020bc:	2303      	movs	r3, #3
 80020be:	e03f      	b.n	8002140 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020c0:	4b22      	ldr	r3, [pc, #136]	; (800214c <HAL_RCC_OscConfig+0x4e8>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d1f0      	bne.n	80020ae <HAL_RCC_OscConfig+0x44a>
 80020cc:	e037      	b.n	800213e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	699b      	ldr	r3, [r3, #24]
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d101      	bne.n	80020da <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e032      	b.n	8002140 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80020da:	4b1c      	ldr	r3, [pc, #112]	; (800214c <HAL_RCC_OscConfig+0x4e8>)
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	699b      	ldr	r3, [r3, #24]
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d028      	beq.n	800213a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d121      	bne.n	800213a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002100:	429a      	cmp	r2, r3
 8002102:	d11a      	bne.n	800213a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002104:	68fa      	ldr	r2, [r7, #12]
 8002106:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800210a:	4013      	ands	r3, r2
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002110:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002112:	4293      	cmp	r3, r2
 8002114:	d111      	bne.n	800213a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002120:	085b      	lsrs	r3, r3, #1
 8002122:	3b01      	subs	r3, #1
 8002124:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002126:	429a      	cmp	r2, r3
 8002128:	d107      	bne.n	800213a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002134:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002136:	429a      	cmp	r2, r3
 8002138:	d001      	beq.n	800213e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e000      	b.n	8002140 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800213e:	2300      	movs	r3, #0
}
 8002140:	4618      	mov	r0, r3
 8002142:	3718      	adds	r7, #24
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	40007000 	.word	0x40007000
 800214c:	40023800 	.word	0x40023800
 8002150:	42470060 	.word	0x42470060

08002154 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d101      	bne.n	8002168 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e0cc      	b.n	8002302 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002168:	4b68      	ldr	r3, [pc, #416]	; (800230c <HAL_RCC_ClockConfig+0x1b8>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0307 	and.w	r3, r3, #7
 8002170:	683a      	ldr	r2, [r7, #0]
 8002172:	429a      	cmp	r2, r3
 8002174:	d90c      	bls.n	8002190 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002176:	4b65      	ldr	r3, [pc, #404]	; (800230c <HAL_RCC_ClockConfig+0x1b8>)
 8002178:	683a      	ldr	r2, [r7, #0]
 800217a:	b2d2      	uxtb	r2, r2
 800217c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800217e:	4b63      	ldr	r3, [pc, #396]	; (800230c <HAL_RCC_ClockConfig+0x1b8>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0307 	and.w	r3, r3, #7
 8002186:	683a      	ldr	r2, [r7, #0]
 8002188:	429a      	cmp	r2, r3
 800218a:	d001      	beq.n	8002190 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e0b8      	b.n	8002302 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0302 	and.w	r3, r3, #2
 8002198:	2b00      	cmp	r3, #0
 800219a:	d020      	beq.n	80021de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0304 	and.w	r3, r3, #4
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d005      	beq.n	80021b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021a8:	4b59      	ldr	r3, [pc, #356]	; (8002310 <HAL_RCC_ClockConfig+0x1bc>)
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	4a58      	ldr	r2, [pc, #352]	; (8002310 <HAL_RCC_ClockConfig+0x1bc>)
 80021ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80021b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0308 	and.w	r3, r3, #8
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d005      	beq.n	80021cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021c0:	4b53      	ldr	r3, [pc, #332]	; (8002310 <HAL_RCC_ClockConfig+0x1bc>)
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	4a52      	ldr	r2, [pc, #328]	; (8002310 <HAL_RCC_ClockConfig+0x1bc>)
 80021c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80021ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021cc:	4b50      	ldr	r3, [pc, #320]	; (8002310 <HAL_RCC_ClockConfig+0x1bc>)
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	494d      	ldr	r1, [pc, #308]	; (8002310 <HAL_RCC_ClockConfig+0x1bc>)
 80021da:	4313      	orrs	r3, r2
 80021dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d044      	beq.n	8002274 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d107      	bne.n	8002202 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021f2:	4b47      	ldr	r3, [pc, #284]	; (8002310 <HAL_RCC_ClockConfig+0x1bc>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d119      	bne.n	8002232 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e07f      	b.n	8002302 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	2b02      	cmp	r3, #2
 8002208:	d003      	beq.n	8002212 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800220e:	2b03      	cmp	r3, #3
 8002210:	d107      	bne.n	8002222 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002212:	4b3f      	ldr	r3, [pc, #252]	; (8002310 <HAL_RCC_ClockConfig+0x1bc>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d109      	bne.n	8002232 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e06f      	b.n	8002302 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002222:	4b3b      	ldr	r3, [pc, #236]	; (8002310 <HAL_RCC_ClockConfig+0x1bc>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0302 	and.w	r3, r3, #2
 800222a:	2b00      	cmp	r3, #0
 800222c:	d101      	bne.n	8002232 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e067      	b.n	8002302 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002232:	4b37      	ldr	r3, [pc, #220]	; (8002310 <HAL_RCC_ClockConfig+0x1bc>)
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	f023 0203 	bic.w	r2, r3, #3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	4934      	ldr	r1, [pc, #208]	; (8002310 <HAL_RCC_ClockConfig+0x1bc>)
 8002240:	4313      	orrs	r3, r2
 8002242:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002244:	f7ff f942 	bl	80014cc <HAL_GetTick>
 8002248:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800224a:	e00a      	b.n	8002262 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800224c:	f7ff f93e 	bl	80014cc <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	f241 3288 	movw	r2, #5000	; 0x1388
 800225a:	4293      	cmp	r3, r2
 800225c:	d901      	bls.n	8002262 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e04f      	b.n	8002302 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002262:	4b2b      	ldr	r3, [pc, #172]	; (8002310 <HAL_RCC_ClockConfig+0x1bc>)
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	f003 020c 	and.w	r2, r3, #12
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	429a      	cmp	r2, r3
 8002272:	d1eb      	bne.n	800224c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002274:	4b25      	ldr	r3, [pc, #148]	; (800230c <HAL_RCC_ClockConfig+0x1b8>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0307 	and.w	r3, r3, #7
 800227c:	683a      	ldr	r2, [r7, #0]
 800227e:	429a      	cmp	r2, r3
 8002280:	d20c      	bcs.n	800229c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002282:	4b22      	ldr	r3, [pc, #136]	; (800230c <HAL_RCC_ClockConfig+0x1b8>)
 8002284:	683a      	ldr	r2, [r7, #0]
 8002286:	b2d2      	uxtb	r2, r2
 8002288:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800228a:	4b20      	ldr	r3, [pc, #128]	; (800230c <HAL_RCC_ClockConfig+0x1b8>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0307 	and.w	r3, r3, #7
 8002292:	683a      	ldr	r2, [r7, #0]
 8002294:	429a      	cmp	r2, r3
 8002296:	d001      	beq.n	800229c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e032      	b.n	8002302 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0304 	and.w	r3, r3, #4
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d008      	beq.n	80022ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022a8:	4b19      	ldr	r3, [pc, #100]	; (8002310 <HAL_RCC_ClockConfig+0x1bc>)
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	4916      	ldr	r1, [pc, #88]	; (8002310 <HAL_RCC_ClockConfig+0x1bc>)
 80022b6:	4313      	orrs	r3, r2
 80022b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0308 	and.w	r3, r3, #8
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d009      	beq.n	80022da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022c6:	4b12      	ldr	r3, [pc, #72]	; (8002310 <HAL_RCC_ClockConfig+0x1bc>)
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	691b      	ldr	r3, [r3, #16]
 80022d2:	00db      	lsls	r3, r3, #3
 80022d4:	490e      	ldr	r1, [pc, #56]	; (8002310 <HAL_RCC_ClockConfig+0x1bc>)
 80022d6:	4313      	orrs	r3, r2
 80022d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80022da:	f000 f821 	bl	8002320 <HAL_RCC_GetSysClockFreq>
 80022de:	4602      	mov	r2, r0
 80022e0:	4b0b      	ldr	r3, [pc, #44]	; (8002310 <HAL_RCC_ClockConfig+0x1bc>)
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	091b      	lsrs	r3, r3, #4
 80022e6:	f003 030f 	and.w	r3, r3, #15
 80022ea:	490a      	ldr	r1, [pc, #40]	; (8002314 <HAL_RCC_ClockConfig+0x1c0>)
 80022ec:	5ccb      	ldrb	r3, [r1, r3]
 80022ee:	fa22 f303 	lsr.w	r3, r2, r3
 80022f2:	4a09      	ldr	r2, [pc, #36]	; (8002318 <HAL_RCC_ClockConfig+0x1c4>)
 80022f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80022f6:	4b09      	ldr	r3, [pc, #36]	; (800231c <HAL_RCC_ClockConfig+0x1c8>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4618      	mov	r0, r3
 80022fc:	f7ff f8a2 	bl	8001444 <HAL_InitTick>

  return HAL_OK;
 8002300:	2300      	movs	r3, #0
}
 8002302:	4618      	mov	r0, r3
 8002304:	3710      	adds	r7, #16
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	40023c00 	.word	0x40023c00
 8002310:	40023800 	.word	0x40023800
 8002314:	08007ce0 	.word	0x08007ce0
 8002318:	20000000 	.word	0x20000000
 800231c:	20000004 	.word	0x20000004

08002320 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002320:	b5b0      	push	{r4, r5, r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002326:	2100      	movs	r1, #0
 8002328:	6079      	str	r1, [r7, #4]
 800232a:	2100      	movs	r1, #0
 800232c:	60f9      	str	r1, [r7, #12]
 800232e:	2100      	movs	r1, #0
 8002330:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002332:	2100      	movs	r1, #0
 8002334:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002336:	4952      	ldr	r1, [pc, #328]	; (8002480 <HAL_RCC_GetSysClockFreq+0x160>)
 8002338:	6889      	ldr	r1, [r1, #8]
 800233a:	f001 010c 	and.w	r1, r1, #12
 800233e:	2908      	cmp	r1, #8
 8002340:	d00d      	beq.n	800235e <HAL_RCC_GetSysClockFreq+0x3e>
 8002342:	2908      	cmp	r1, #8
 8002344:	f200 8094 	bhi.w	8002470 <HAL_RCC_GetSysClockFreq+0x150>
 8002348:	2900      	cmp	r1, #0
 800234a:	d002      	beq.n	8002352 <HAL_RCC_GetSysClockFreq+0x32>
 800234c:	2904      	cmp	r1, #4
 800234e:	d003      	beq.n	8002358 <HAL_RCC_GetSysClockFreq+0x38>
 8002350:	e08e      	b.n	8002470 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002352:	4b4c      	ldr	r3, [pc, #304]	; (8002484 <HAL_RCC_GetSysClockFreq+0x164>)
 8002354:	60bb      	str	r3, [r7, #8]
       break;
 8002356:	e08e      	b.n	8002476 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002358:	4b4b      	ldr	r3, [pc, #300]	; (8002488 <HAL_RCC_GetSysClockFreq+0x168>)
 800235a:	60bb      	str	r3, [r7, #8]
      break;
 800235c:	e08b      	b.n	8002476 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800235e:	4948      	ldr	r1, [pc, #288]	; (8002480 <HAL_RCC_GetSysClockFreq+0x160>)
 8002360:	6849      	ldr	r1, [r1, #4]
 8002362:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002366:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002368:	4945      	ldr	r1, [pc, #276]	; (8002480 <HAL_RCC_GetSysClockFreq+0x160>)
 800236a:	6849      	ldr	r1, [r1, #4]
 800236c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002370:	2900      	cmp	r1, #0
 8002372:	d024      	beq.n	80023be <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002374:	4942      	ldr	r1, [pc, #264]	; (8002480 <HAL_RCC_GetSysClockFreq+0x160>)
 8002376:	6849      	ldr	r1, [r1, #4]
 8002378:	0989      	lsrs	r1, r1, #6
 800237a:	4608      	mov	r0, r1
 800237c:	f04f 0100 	mov.w	r1, #0
 8002380:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002384:	f04f 0500 	mov.w	r5, #0
 8002388:	ea00 0204 	and.w	r2, r0, r4
 800238c:	ea01 0305 	and.w	r3, r1, r5
 8002390:	493d      	ldr	r1, [pc, #244]	; (8002488 <HAL_RCC_GetSysClockFreq+0x168>)
 8002392:	fb01 f003 	mul.w	r0, r1, r3
 8002396:	2100      	movs	r1, #0
 8002398:	fb01 f102 	mul.w	r1, r1, r2
 800239c:	1844      	adds	r4, r0, r1
 800239e:	493a      	ldr	r1, [pc, #232]	; (8002488 <HAL_RCC_GetSysClockFreq+0x168>)
 80023a0:	fba2 0101 	umull	r0, r1, r2, r1
 80023a4:	1863      	adds	r3, r4, r1
 80023a6:	4619      	mov	r1, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	461a      	mov	r2, r3
 80023ac:	f04f 0300 	mov.w	r3, #0
 80023b0:	f7fd ff5e 	bl	8000270 <__aeabi_uldivmod>
 80023b4:	4602      	mov	r2, r0
 80023b6:	460b      	mov	r3, r1
 80023b8:	4613      	mov	r3, r2
 80023ba:	60fb      	str	r3, [r7, #12]
 80023bc:	e04a      	b.n	8002454 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023be:	4b30      	ldr	r3, [pc, #192]	; (8002480 <HAL_RCC_GetSysClockFreq+0x160>)
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	099b      	lsrs	r3, r3, #6
 80023c4:	461a      	mov	r2, r3
 80023c6:	f04f 0300 	mov.w	r3, #0
 80023ca:	f240 10ff 	movw	r0, #511	; 0x1ff
 80023ce:	f04f 0100 	mov.w	r1, #0
 80023d2:	ea02 0400 	and.w	r4, r2, r0
 80023d6:	ea03 0501 	and.w	r5, r3, r1
 80023da:	4620      	mov	r0, r4
 80023dc:	4629      	mov	r1, r5
 80023de:	f04f 0200 	mov.w	r2, #0
 80023e2:	f04f 0300 	mov.w	r3, #0
 80023e6:	014b      	lsls	r3, r1, #5
 80023e8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80023ec:	0142      	lsls	r2, r0, #5
 80023ee:	4610      	mov	r0, r2
 80023f0:	4619      	mov	r1, r3
 80023f2:	1b00      	subs	r0, r0, r4
 80023f4:	eb61 0105 	sbc.w	r1, r1, r5
 80023f8:	f04f 0200 	mov.w	r2, #0
 80023fc:	f04f 0300 	mov.w	r3, #0
 8002400:	018b      	lsls	r3, r1, #6
 8002402:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002406:	0182      	lsls	r2, r0, #6
 8002408:	1a12      	subs	r2, r2, r0
 800240a:	eb63 0301 	sbc.w	r3, r3, r1
 800240e:	f04f 0000 	mov.w	r0, #0
 8002412:	f04f 0100 	mov.w	r1, #0
 8002416:	00d9      	lsls	r1, r3, #3
 8002418:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800241c:	00d0      	lsls	r0, r2, #3
 800241e:	4602      	mov	r2, r0
 8002420:	460b      	mov	r3, r1
 8002422:	1912      	adds	r2, r2, r4
 8002424:	eb45 0303 	adc.w	r3, r5, r3
 8002428:	f04f 0000 	mov.w	r0, #0
 800242c:	f04f 0100 	mov.w	r1, #0
 8002430:	0299      	lsls	r1, r3, #10
 8002432:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002436:	0290      	lsls	r0, r2, #10
 8002438:	4602      	mov	r2, r0
 800243a:	460b      	mov	r3, r1
 800243c:	4610      	mov	r0, r2
 800243e:	4619      	mov	r1, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	461a      	mov	r2, r3
 8002444:	f04f 0300 	mov.w	r3, #0
 8002448:	f7fd ff12 	bl	8000270 <__aeabi_uldivmod>
 800244c:	4602      	mov	r2, r0
 800244e:	460b      	mov	r3, r1
 8002450:	4613      	mov	r3, r2
 8002452:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002454:	4b0a      	ldr	r3, [pc, #40]	; (8002480 <HAL_RCC_GetSysClockFreq+0x160>)
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	0c1b      	lsrs	r3, r3, #16
 800245a:	f003 0303 	and.w	r3, r3, #3
 800245e:	3301      	adds	r3, #1
 8002460:	005b      	lsls	r3, r3, #1
 8002462:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002464:	68fa      	ldr	r2, [r7, #12]
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	fbb2 f3f3 	udiv	r3, r2, r3
 800246c:	60bb      	str	r3, [r7, #8]
      break;
 800246e:	e002      	b.n	8002476 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002470:	4b04      	ldr	r3, [pc, #16]	; (8002484 <HAL_RCC_GetSysClockFreq+0x164>)
 8002472:	60bb      	str	r3, [r7, #8]
      break;
 8002474:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002476:	68bb      	ldr	r3, [r7, #8]
}
 8002478:	4618      	mov	r0, r3
 800247a:	3710      	adds	r7, #16
 800247c:	46bd      	mov	sp, r7
 800247e:	bdb0      	pop	{r4, r5, r7, pc}
 8002480:	40023800 	.word	0x40023800
 8002484:	00f42400 	.word	0x00f42400
 8002488:	017d7840 	.word	0x017d7840

0800248c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002490:	4b03      	ldr	r3, [pc, #12]	; (80024a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002492:	681b      	ldr	r3, [r3, #0]
}
 8002494:	4618      	mov	r0, r3
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	20000000 	.word	0x20000000

080024a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80024a8:	f7ff fff0 	bl	800248c <HAL_RCC_GetHCLKFreq>
 80024ac:	4602      	mov	r2, r0
 80024ae:	4b05      	ldr	r3, [pc, #20]	; (80024c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	0a9b      	lsrs	r3, r3, #10
 80024b4:	f003 0307 	and.w	r3, r3, #7
 80024b8:	4903      	ldr	r1, [pc, #12]	; (80024c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024ba:	5ccb      	ldrb	r3, [r1, r3]
 80024bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	40023800 	.word	0x40023800
 80024c8:	08007cf0 	.word	0x08007cf0

080024cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80024d0:	f7ff ffdc 	bl	800248c <HAL_RCC_GetHCLKFreq>
 80024d4:	4602      	mov	r2, r0
 80024d6:	4b05      	ldr	r3, [pc, #20]	; (80024ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	0b5b      	lsrs	r3, r3, #13
 80024dc:	f003 0307 	and.w	r3, r3, #7
 80024e0:	4903      	ldr	r1, [pc, #12]	; (80024f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024e2:	5ccb      	ldrb	r3, [r1, r3]
 80024e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	40023800 	.word	0x40023800
 80024f0:	08007cf0 	.word	0x08007cf0

080024f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d101      	bne.n	8002506 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e041      	b.n	800258a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800250c:	b2db      	uxtb	r3, r3
 800250e:	2b00      	cmp	r3, #0
 8002510:	d106      	bne.n	8002520 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f7fe fd4e 	bl	8000fbc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2202      	movs	r2, #2
 8002524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	3304      	adds	r3, #4
 8002530:	4619      	mov	r1, r3
 8002532:	4610      	mov	r0, r2
 8002534:	f000 fb7e 	bl	8002c34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2201      	movs	r2, #1
 8002544:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2201      	movs	r2, #1
 8002564:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2201      	movs	r2, #1
 800256c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2201      	movs	r2, #1
 8002574:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2201      	movs	r2, #1
 800257c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2201      	movs	r2, #1
 8002584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002588:	2300      	movs	r3, #0
}
 800258a:	4618      	mov	r0, r3
 800258c:	3708      	adds	r7, #8
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}

08002592 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002592:	b580      	push	{r7, lr}
 8002594:	b082      	sub	sp, #8
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d101      	bne.n	80025a4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e041      	b.n	8002628 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d106      	bne.n	80025be <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	f000 f839 	bl	8002630 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2202      	movs	r2, #2
 80025c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	3304      	adds	r3, #4
 80025ce:	4619      	mov	r1, r3
 80025d0:	4610      	mov	r0, r2
 80025d2:	f000 fb2f 	bl	8002c34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2201      	movs	r2, #1
 80025da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2201      	movs	r2, #1
 80025e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2201      	movs	r2, #1
 80025ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2201      	movs	r2, #1
 80025f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2201      	movs	r2, #1
 80025fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2201      	movs	r2, #1
 8002602:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2201      	movs	r2, #1
 800260a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2201      	movs	r2, #1
 8002612:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2201      	movs	r2, #1
 800261a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2201      	movs	r2, #1
 8002622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002626:	2300      	movs	r3, #0
}
 8002628:	4618      	mov	r0, r3
 800262a:	3708      	adds	r7, #8
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}

08002630 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002638:	bf00      	nop
 800263a:	370c      	adds	r7, #12
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d109      	bne.n	8002668 <HAL_TIM_PWM_Start+0x24>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800265a:	b2db      	uxtb	r3, r3
 800265c:	2b01      	cmp	r3, #1
 800265e:	bf14      	ite	ne
 8002660:	2301      	movne	r3, #1
 8002662:	2300      	moveq	r3, #0
 8002664:	b2db      	uxtb	r3, r3
 8002666:	e022      	b.n	80026ae <HAL_TIM_PWM_Start+0x6a>
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	2b04      	cmp	r3, #4
 800266c:	d109      	bne.n	8002682 <HAL_TIM_PWM_Start+0x3e>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002674:	b2db      	uxtb	r3, r3
 8002676:	2b01      	cmp	r3, #1
 8002678:	bf14      	ite	ne
 800267a:	2301      	movne	r3, #1
 800267c:	2300      	moveq	r3, #0
 800267e:	b2db      	uxtb	r3, r3
 8002680:	e015      	b.n	80026ae <HAL_TIM_PWM_Start+0x6a>
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	2b08      	cmp	r3, #8
 8002686:	d109      	bne.n	800269c <HAL_TIM_PWM_Start+0x58>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800268e:	b2db      	uxtb	r3, r3
 8002690:	2b01      	cmp	r3, #1
 8002692:	bf14      	ite	ne
 8002694:	2301      	movne	r3, #1
 8002696:	2300      	moveq	r3, #0
 8002698:	b2db      	uxtb	r3, r3
 800269a:	e008      	b.n	80026ae <HAL_TIM_PWM_Start+0x6a>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	bf14      	ite	ne
 80026a8:	2301      	movne	r3, #1
 80026aa:	2300      	moveq	r3, #0
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e07c      	b.n	80027b0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d104      	bne.n	80026c6 <HAL_TIM_PWM_Start+0x82>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2202      	movs	r2, #2
 80026c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80026c4:	e013      	b.n	80026ee <HAL_TIM_PWM_Start+0xaa>
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	2b04      	cmp	r3, #4
 80026ca:	d104      	bne.n	80026d6 <HAL_TIM_PWM_Start+0x92>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2202      	movs	r2, #2
 80026d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026d4:	e00b      	b.n	80026ee <HAL_TIM_PWM_Start+0xaa>
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	2b08      	cmp	r3, #8
 80026da:	d104      	bne.n	80026e6 <HAL_TIM_PWM_Start+0xa2>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2202      	movs	r2, #2
 80026e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026e4:	e003      	b.n	80026ee <HAL_TIM_PWM_Start+0xaa>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2202      	movs	r2, #2
 80026ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	2201      	movs	r2, #1
 80026f4:	6839      	ldr	r1, [r7, #0]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f000 fd86 	bl	8003208 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a2d      	ldr	r2, [pc, #180]	; (80027b8 <HAL_TIM_PWM_Start+0x174>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d004      	beq.n	8002710 <HAL_TIM_PWM_Start+0xcc>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a2c      	ldr	r2, [pc, #176]	; (80027bc <HAL_TIM_PWM_Start+0x178>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d101      	bne.n	8002714 <HAL_TIM_PWM_Start+0xd0>
 8002710:	2301      	movs	r3, #1
 8002712:	e000      	b.n	8002716 <HAL_TIM_PWM_Start+0xd2>
 8002714:	2300      	movs	r3, #0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d007      	beq.n	800272a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002728:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a22      	ldr	r2, [pc, #136]	; (80027b8 <HAL_TIM_PWM_Start+0x174>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d022      	beq.n	800277a <HAL_TIM_PWM_Start+0x136>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800273c:	d01d      	beq.n	800277a <HAL_TIM_PWM_Start+0x136>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a1f      	ldr	r2, [pc, #124]	; (80027c0 <HAL_TIM_PWM_Start+0x17c>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d018      	beq.n	800277a <HAL_TIM_PWM_Start+0x136>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a1d      	ldr	r2, [pc, #116]	; (80027c4 <HAL_TIM_PWM_Start+0x180>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d013      	beq.n	800277a <HAL_TIM_PWM_Start+0x136>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a1c      	ldr	r2, [pc, #112]	; (80027c8 <HAL_TIM_PWM_Start+0x184>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d00e      	beq.n	800277a <HAL_TIM_PWM_Start+0x136>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a16      	ldr	r2, [pc, #88]	; (80027bc <HAL_TIM_PWM_Start+0x178>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d009      	beq.n	800277a <HAL_TIM_PWM_Start+0x136>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a18      	ldr	r2, [pc, #96]	; (80027cc <HAL_TIM_PWM_Start+0x188>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d004      	beq.n	800277a <HAL_TIM_PWM_Start+0x136>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a16      	ldr	r2, [pc, #88]	; (80027d0 <HAL_TIM_PWM_Start+0x18c>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d111      	bne.n	800279e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	f003 0307 	and.w	r3, r3, #7
 8002784:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2b06      	cmp	r3, #6
 800278a:	d010      	beq.n	80027ae <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f042 0201 	orr.w	r2, r2, #1
 800279a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800279c:	e007      	b.n	80027ae <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f042 0201 	orr.w	r2, r2, #1
 80027ac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80027ae:	2300      	movs	r3, #0
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3710      	adds	r7, #16
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	40010000 	.word	0x40010000
 80027bc:	40010400 	.word	0x40010400
 80027c0:	40000400 	.word	0x40000400
 80027c4:	40000800 	.word	0x40000800
 80027c8:	40000c00 	.word	0x40000c00
 80027cc:	40014000 	.word	0x40014000
 80027d0:	40001800 	.word	0x40001800

080027d4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b086      	sub	sp, #24
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d101      	bne.n	80027e8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e097      	b.n	8002918 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d106      	bne.n	8002802 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2200      	movs	r2, #0
 80027f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f7fe fc3b 	bl	8001078 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2202      	movs	r2, #2
 8002806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	6812      	ldr	r2, [r2, #0]
 8002814:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002818:	f023 0307 	bic.w	r3, r3, #7
 800281c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	3304      	adds	r3, #4
 8002826:	4619      	mov	r1, r3
 8002828:	4610      	mov	r0, r2
 800282a:	f000 fa03 	bl	8002c34 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	699b      	ldr	r3, [r3, #24]
 800283c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	6a1b      	ldr	r3, [r3, #32]
 8002844:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	697a      	ldr	r2, [r7, #20]
 800284c:	4313      	orrs	r3, r2
 800284e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002856:	f023 0303 	bic.w	r3, r3, #3
 800285a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	689a      	ldr	r2, [r3, #8]
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	699b      	ldr	r3, [r3, #24]
 8002864:	021b      	lsls	r3, r3, #8
 8002866:	4313      	orrs	r3, r2
 8002868:	693a      	ldr	r2, [r7, #16]
 800286a:	4313      	orrs	r3, r2
 800286c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002874:	f023 030c 	bic.w	r3, r3, #12
 8002878:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002880:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002884:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	68da      	ldr	r2, [r3, #12]
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	69db      	ldr	r3, [r3, #28]
 800288e:	021b      	lsls	r3, r3, #8
 8002890:	4313      	orrs	r3, r2
 8002892:	693a      	ldr	r2, [r7, #16]
 8002894:	4313      	orrs	r3, r2
 8002896:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	691b      	ldr	r3, [r3, #16]
 800289c:	011a      	lsls	r2, r3, #4
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	6a1b      	ldr	r3, [r3, #32]
 80028a2:	031b      	lsls	r3, r3, #12
 80028a4:	4313      	orrs	r3, r2
 80028a6:	693a      	ldr	r2, [r7, #16]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80028b2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80028ba:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	685a      	ldr	r2, [r3, #4]
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	695b      	ldr	r3, [r3, #20]
 80028c4:	011b      	lsls	r3, r3, #4
 80028c6:	4313      	orrs	r3, r2
 80028c8:	68fa      	ldr	r2, [r7, #12]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	697a      	ldr	r2, [r7, #20]
 80028d4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	693a      	ldr	r2, [r7, #16]
 80028dc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	68fa      	ldr	r2, [r7, #12]
 80028e4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2201      	movs	r2, #1
 80028ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2201      	movs	r2, #1
 80028f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2201      	movs	r2, #1
 80028fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2201      	movs	r2, #1
 8002902:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2201      	movs	r2, #1
 800290a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2201      	movs	r2, #1
 8002912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002916:	2300      	movs	r3, #0
}
 8002918:	4618      	mov	r0, r3
 800291a:	3718      	adds	r7, #24
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}

08002920 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b086      	sub	sp, #24
 8002924:	af00      	add	r7, sp, #0
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	60b9      	str	r1, [r7, #8]
 800292a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800292c:	2300      	movs	r3, #0
 800292e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002936:	2b01      	cmp	r3, #1
 8002938:	d101      	bne.n	800293e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800293a:	2302      	movs	r3, #2
 800293c:	e0ae      	b.n	8002a9c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2201      	movs	r2, #1
 8002942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2b0c      	cmp	r3, #12
 800294a:	f200 809f 	bhi.w	8002a8c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800294e:	a201      	add	r2, pc, #4	; (adr r2, 8002954 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002954:	08002989 	.word	0x08002989
 8002958:	08002a8d 	.word	0x08002a8d
 800295c:	08002a8d 	.word	0x08002a8d
 8002960:	08002a8d 	.word	0x08002a8d
 8002964:	080029c9 	.word	0x080029c9
 8002968:	08002a8d 	.word	0x08002a8d
 800296c:	08002a8d 	.word	0x08002a8d
 8002970:	08002a8d 	.word	0x08002a8d
 8002974:	08002a0b 	.word	0x08002a0b
 8002978:	08002a8d 	.word	0x08002a8d
 800297c:	08002a8d 	.word	0x08002a8d
 8002980:	08002a8d 	.word	0x08002a8d
 8002984:	08002a4b 	.word	0x08002a4b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	68b9      	ldr	r1, [r7, #8]
 800298e:	4618      	mov	r0, r3
 8002990:	f000 f9f0 	bl	8002d74 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	699a      	ldr	r2, [r3, #24]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f042 0208 	orr.w	r2, r2, #8
 80029a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	699a      	ldr	r2, [r3, #24]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f022 0204 	bic.w	r2, r2, #4
 80029b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	6999      	ldr	r1, [r3, #24]
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	691a      	ldr	r2, [r3, #16]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	430a      	orrs	r2, r1
 80029c4:	619a      	str	r2, [r3, #24]
      break;
 80029c6:	e064      	b.n	8002a92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	68b9      	ldr	r1, [r7, #8]
 80029ce:	4618      	mov	r0, r3
 80029d0:	f000 fa40 	bl	8002e54 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	699a      	ldr	r2, [r3, #24]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	699a      	ldr	r2, [r3, #24]
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	6999      	ldr	r1, [r3, #24]
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	691b      	ldr	r3, [r3, #16]
 80029fe:	021a      	lsls	r2, r3, #8
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	430a      	orrs	r2, r1
 8002a06:	619a      	str	r2, [r3, #24]
      break;
 8002a08:	e043      	b.n	8002a92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	68b9      	ldr	r1, [r7, #8]
 8002a10:	4618      	mov	r0, r3
 8002a12:	f000 fa95 	bl	8002f40 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	69da      	ldr	r2, [r3, #28]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f042 0208 	orr.w	r2, r2, #8
 8002a24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	69da      	ldr	r2, [r3, #28]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f022 0204 	bic.w	r2, r2, #4
 8002a34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	69d9      	ldr	r1, [r3, #28]
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	691a      	ldr	r2, [r3, #16]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	430a      	orrs	r2, r1
 8002a46:	61da      	str	r2, [r3, #28]
      break;
 8002a48:	e023      	b.n	8002a92 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	68b9      	ldr	r1, [r7, #8]
 8002a50:	4618      	mov	r0, r3
 8002a52:	f000 fae9 	bl	8003028 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	69da      	ldr	r2, [r3, #28]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	69da      	ldr	r2, [r3, #28]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	69d9      	ldr	r1, [r3, #28]
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	691b      	ldr	r3, [r3, #16]
 8002a80:	021a      	lsls	r2, r3, #8
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	430a      	orrs	r2, r1
 8002a88:	61da      	str	r2, [r3, #28]
      break;
 8002a8a:	e002      	b.n	8002a92 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	75fb      	strb	r3, [r7, #23]
      break;
 8002a90:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2200      	movs	r2, #0
 8002a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002a9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3718      	adds	r7, #24
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d101      	bne.n	8002ac0 <HAL_TIM_ConfigClockSource+0x1c>
 8002abc:	2302      	movs	r3, #2
 8002abe:	e0b4      	b.n	8002c2a <HAL_TIM_ConfigClockSource+0x186>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2202      	movs	r2, #2
 8002acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002ade:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ae6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	68ba      	ldr	r2, [r7, #8]
 8002aee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002af8:	d03e      	beq.n	8002b78 <HAL_TIM_ConfigClockSource+0xd4>
 8002afa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002afe:	f200 8087 	bhi.w	8002c10 <HAL_TIM_ConfigClockSource+0x16c>
 8002b02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b06:	f000 8086 	beq.w	8002c16 <HAL_TIM_ConfigClockSource+0x172>
 8002b0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b0e:	d87f      	bhi.n	8002c10 <HAL_TIM_ConfigClockSource+0x16c>
 8002b10:	2b70      	cmp	r3, #112	; 0x70
 8002b12:	d01a      	beq.n	8002b4a <HAL_TIM_ConfigClockSource+0xa6>
 8002b14:	2b70      	cmp	r3, #112	; 0x70
 8002b16:	d87b      	bhi.n	8002c10 <HAL_TIM_ConfigClockSource+0x16c>
 8002b18:	2b60      	cmp	r3, #96	; 0x60
 8002b1a:	d050      	beq.n	8002bbe <HAL_TIM_ConfigClockSource+0x11a>
 8002b1c:	2b60      	cmp	r3, #96	; 0x60
 8002b1e:	d877      	bhi.n	8002c10 <HAL_TIM_ConfigClockSource+0x16c>
 8002b20:	2b50      	cmp	r3, #80	; 0x50
 8002b22:	d03c      	beq.n	8002b9e <HAL_TIM_ConfigClockSource+0xfa>
 8002b24:	2b50      	cmp	r3, #80	; 0x50
 8002b26:	d873      	bhi.n	8002c10 <HAL_TIM_ConfigClockSource+0x16c>
 8002b28:	2b40      	cmp	r3, #64	; 0x40
 8002b2a:	d058      	beq.n	8002bde <HAL_TIM_ConfigClockSource+0x13a>
 8002b2c:	2b40      	cmp	r3, #64	; 0x40
 8002b2e:	d86f      	bhi.n	8002c10 <HAL_TIM_ConfigClockSource+0x16c>
 8002b30:	2b30      	cmp	r3, #48	; 0x30
 8002b32:	d064      	beq.n	8002bfe <HAL_TIM_ConfigClockSource+0x15a>
 8002b34:	2b30      	cmp	r3, #48	; 0x30
 8002b36:	d86b      	bhi.n	8002c10 <HAL_TIM_ConfigClockSource+0x16c>
 8002b38:	2b20      	cmp	r3, #32
 8002b3a:	d060      	beq.n	8002bfe <HAL_TIM_ConfigClockSource+0x15a>
 8002b3c:	2b20      	cmp	r3, #32
 8002b3e:	d867      	bhi.n	8002c10 <HAL_TIM_ConfigClockSource+0x16c>
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d05c      	beq.n	8002bfe <HAL_TIM_ConfigClockSource+0x15a>
 8002b44:	2b10      	cmp	r3, #16
 8002b46:	d05a      	beq.n	8002bfe <HAL_TIM_ConfigClockSource+0x15a>
 8002b48:	e062      	b.n	8002c10 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6818      	ldr	r0, [r3, #0]
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	6899      	ldr	r1, [r3, #8]
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	685a      	ldr	r2, [r3, #4]
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	f000 fb35 	bl	80031c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002b6c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	68ba      	ldr	r2, [r7, #8]
 8002b74:	609a      	str	r2, [r3, #8]
      break;
 8002b76:	e04f      	b.n	8002c18 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6818      	ldr	r0, [r3, #0]
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	6899      	ldr	r1, [r3, #8]
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	685a      	ldr	r2, [r3, #4]
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	f000 fb1e 	bl	80031c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	689a      	ldr	r2, [r3, #8]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b9a:	609a      	str	r2, [r3, #8]
      break;
 8002b9c:	e03c      	b.n	8002c18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6818      	ldr	r0, [r3, #0]
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	6859      	ldr	r1, [r3, #4]
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	461a      	mov	r2, r3
 8002bac:	f000 fa92 	bl	80030d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2150      	movs	r1, #80	; 0x50
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f000 faeb 	bl	8003192 <TIM_ITRx_SetConfig>
      break;
 8002bbc:	e02c      	b.n	8002c18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6818      	ldr	r0, [r3, #0]
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	6859      	ldr	r1, [r3, #4]
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	461a      	mov	r2, r3
 8002bcc:	f000 fab1 	bl	8003132 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2160      	movs	r1, #96	; 0x60
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f000 fadb 	bl	8003192 <TIM_ITRx_SetConfig>
      break;
 8002bdc:	e01c      	b.n	8002c18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6818      	ldr	r0, [r3, #0]
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	6859      	ldr	r1, [r3, #4]
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	461a      	mov	r2, r3
 8002bec:	f000 fa72 	bl	80030d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2140      	movs	r1, #64	; 0x40
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f000 facb 	bl	8003192 <TIM_ITRx_SetConfig>
      break;
 8002bfc:	e00c      	b.n	8002c18 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4619      	mov	r1, r3
 8002c08:	4610      	mov	r0, r2
 8002c0a:	f000 fac2 	bl	8003192 <TIM_ITRx_SetConfig>
      break;
 8002c0e:	e003      	b.n	8002c18 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	73fb      	strb	r3, [r7, #15]
      break;
 8002c14:	e000      	b.n	8002c18 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002c16:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2200      	movs	r2, #0
 8002c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3710      	adds	r7, #16
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
	...

08002c34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b085      	sub	sp, #20
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	4a40      	ldr	r2, [pc, #256]	; (8002d48 <TIM_Base_SetConfig+0x114>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d013      	beq.n	8002c74 <TIM_Base_SetConfig+0x40>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c52:	d00f      	beq.n	8002c74 <TIM_Base_SetConfig+0x40>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	4a3d      	ldr	r2, [pc, #244]	; (8002d4c <TIM_Base_SetConfig+0x118>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d00b      	beq.n	8002c74 <TIM_Base_SetConfig+0x40>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	4a3c      	ldr	r2, [pc, #240]	; (8002d50 <TIM_Base_SetConfig+0x11c>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d007      	beq.n	8002c74 <TIM_Base_SetConfig+0x40>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	4a3b      	ldr	r2, [pc, #236]	; (8002d54 <TIM_Base_SetConfig+0x120>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d003      	beq.n	8002c74 <TIM_Base_SetConfig+0x40>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	4a3a      	ldr	r2, [pc, #232]	; (8002d58 <TIM_Base_SetConfig+0x124>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d108      	bne.n	8002c86 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	68fa      	ldr	r2, [r7, #12]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a2f      	ldr	r2, [pc, #188]	; (8002d48 <TIM_Base_SetConfig+0x114>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d02b      	beq.n	8002ce6 <TIM_Base_SetConfig+0xb2>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c94:	d027      	beq.n	8002ce6 <TIM_Base_SetConfig+0xb2>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a2c      	ldr	r2, [pc, #176]	; (8002d4c <TIM_Base_SetConfig+0x118>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d023      	beq.n	8002ce6 <TIM_Base_SetConfig+0xb2>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a2b      	ldr	r2, [pc, #172]	; (8002d50 <TIM_Base_SetConfig+0x11c>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d01f      	beq.n	8002ce6 <TIM_Base_SetConfig+0xb2>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a2a      	ldr	r2, [pc, #168]	; (8002d54 <TIM_Base_SetConfig+0x120>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d01b      	beq.n	8002ce6 <TIM_Base_SetConfig+0xb2>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a29      	ldr	r2, [pc, #164]	; (8002d58 <TIM_Base_SetConfig+0x124>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d017      	beq.n	8002ce6 <TIM_Base_SetConfig+0xb2>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4a28      	ldr	r2, [pc, #160]	; (8002d5c <TIM_Base_SetConfig+0x128>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d013      	beq.n	8002ce6 <TIM_Base_SetConfig+0xb2>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a27      	ldr	r2, [pc, #156]	; (8002d60 <TIM_Base_SetConfig+0x12c>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d00f      	beq.n	8002ce6 <TIM_Base_SetConfig+0xb2>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a26      	ldr	r2, [pc, #152]	; (8002d64 <TIM_Base_SetConfig+0x130>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d00b      	beq.n	8002ce6 <TIM_Base_SetConfig+0xb2>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a25      	ldr	r2, [pc, #148]	; (8002d68 <TIM_Base_SetConfig+0x134>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d007      	beq.n	8002ce6 <TIM_Base_SetConfig+0xb2>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a24      	ldr	r2, [pc, #144]	; (8002d6c <TIM_Base_SetConfig+0x138>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d003      	beq.n	8002ce6 <TIM_Base_SetConfig+0xb2>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a23      	ldr	r2, [pc, #140]	; (8002d70 <TIM_Base_SetConfig+0x13c>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d108      	bne.n	8002cf8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	68fa      	ldr	r2, [r7, #12]
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	695b      	ldr	r3, [r3, #20]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	68fa      	ldr	r2, [r7, #12]
 8002d0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	689a      	ldr	r2, [r3, #8]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	4a0a      	ldr	r2, [pc, #40]	; (8002d48 <TIM_Base_SetConfig+0x114>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d003      	beq.n	8002d2c <TIM_Base_SetConfig+0xf8>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	4a0c      	ldr	r2, [pc, #48]	; (8002d58 <TIM_Base_SetConfig+0x124>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d103      	bne.n	8002d34 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	691a      	ldr	r2, [r3, #16]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2201      	movs	r2, #1
 8002d38:	615a      	str	r2, [r3, #20]
}
 8002d3a:	bf00      	nop
 8002d3c:	3714      	adds	r7, #20
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr
 8002d46:	bf00      	nop
 8002d48:	40010000 	.word	0x40010000
 8002d4c:	40000400 	.word	0x40000400
 8002d50:	40000800 	.word	0x40000800
 8002d54:	40000c00 	.word	0x40000c00
 8002d58:	40010400 	.word	0x40010400
 8002d5c:	40014000 	.word	0x40014000
 8002d60:	40014400 	.word	0x40014400
 8002d64:	40014800 	.word	0x40014800
 8002d68:	40001800 	.word	0x40001800
 8002d6c:	40001c00 	.word	0x40001c00
 8002d70:	40002000 	.word	0x40002000

08002d74 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b087      	sub	sp, #28
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a1b      	ldr	r3, [r3, #32]
 8002d82:	f023 0201 	bic.w	r2, r3, #1
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6a1b      	ldr	r3, [r3, #32]
 8002d8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	699b      	ldr	r3, [r3, #24]
 8002d9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002da2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f023 0303 	bic.w	r3, r3, #3
 8002daa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	68fa      	ldr	r2, [r7, #12]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	f023 0302 	bic.w	r3, r3, #2
 8002dbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	697a      	ldr	r2, [r7, #20]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	4a20      	ldr	r2, [pc, #128]	; (8002e4c <TIM_OC1_SetConfig+0xd8>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d003      	beq.n	8002dd8 <TIM_OC1_SetConfig+0x64>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	4a1f      	ldr	r2, [pc, #124]	; (8002e50 <TIM_OC1_SetConfig+0xdc>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d10c      	bne.n	8002df2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	f023 0308 	bic.w	r3, r3, #8
 8002dde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	697a      	ldr	r2, [r7, #20]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	f023 0304 	bic.w	r3, r3, #4
 8002df0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4a15      	ldr	r2, [pc, #84]	; (8002e4c <TIM_OC1_SetConfig+0xd8>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d003      	beq.n	8002e02 <TIM_OC1_SetConfig+0x8e>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4a14      	ldr	r2, [pc, #80]	; (8002e50 <TIM_OC1_SetConfig+0xdc>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d111      	bne.n	8002e26 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002e10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	695b      	ldr	r3, [r3, #20]
 8002e16:	693a      	ldr	r2, [r7, #16]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	699b      	ldr	r3, [r3, #24]
 8002e20:	693a      	ldr	r2, [r7, #16]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	693a      	ldr	r2, [r7, #16]
 8002e2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	68fa      	ldr	r2, [r7, #12]
 8002e30:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	685a      	ldr	r2, [r3, #4]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	697a      	ldr	r2, [r7, #20]
 8002e3e:	621a      	str	r2, [r3, #32]
}
 8002e40:	bf00      	nop
 8002e42:	371c      	adds	r7, #28
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr
 8002e4c:	40010000 	.word	0x40010000
 8002e50:	40010400 	.word	0x40010400

08002e54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b087      	sub	sp, #28
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6a1b      	ldr	r3, [r3, #32]
 8002e62:	f023 0210 	bic.w	r2, r3, #16
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a1b      	ldr	r3, [r3, #32]
 8002e6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	699b      	ldr	r3, [r3, #24]
 8002e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	021b      	lsls	r3, r3, #8
 8002e92:	68fa      	ldr	r2, [r7, #12]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	f023 0320 	bic.w	r3, r3, #32
 8002e9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	011b      	lsls	r3, r3, #4
 8002ea6:	697a      	ldr	r2, [r7, #20]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	4a22      	ldr	r2, [pc, #136]	; (8002f38 <TIM_OC2_SetConfig+0xe4>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d003      	beq.n	8002ebc <TIM_OC2_SetConfig+0x68>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	4a21      	ldr	r2, [pc, #132]	; (8002f3c <TIM_OC2_SetConfig+0xe8>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d10d      	bne.n	8002ed8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ec2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	011b      	lsls	r3, r3, #4
 8002eca:	697a      	ldr	r2, [r7, #20]
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ed6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	4a17      	ldr	r2, [pc, #92]	; (8002f38 <TIM_OC2_SetConfig+0xe4>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d003      	beq.n	8002ee8 <TIM_OC2_SetConfig+0x94>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	4a16      	ldr	r2, [pc, #88]	; (8002f3c <TIM_OC2_SetConfig+0xe8>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d113      	bne.n	8002f10 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002eee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002ef6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	695b      	ldr	r3, [r3, #20]
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	693a      	ldr	r2, [r7, #16]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	699b      	ldr	r3, [r3, #24]
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	693a      	ldr	r2, [r7, #16]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	693a      	ldr	r2, [r7, #16]
 8002f14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	68fa      	ldr	r2, [r7, #12]
 8002f1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	685a      	ldr	r2, [r3, #4]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	697a      	ldr	r2, [r7, #20]
 8002f28:	621a      	str	r2, [r3, #32]
}
 8002f2a:	bf00      	nop
 8002f2c:	371c      	adds	r7, #28
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop
 8002f38:	40010000 	.word	0x40010000
 8002f3c:	40010400 	.word	0x40010400

08002f40 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b087      	sub	sp, #28
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a1b      	ldr	r3, [r3, #32]
 8002f4e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a1b      	ldr	r3, [r3, #32]
 8002f5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	69db      	ldr	r3, [r3, #28]
 8002f66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	f023 0303 	bic.w	r3, r3, #3
 8002f76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	68fa      	ldr	r2, [r7, #12]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002f88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	021b      	lsls	r3, r3, #8
 8002f90:	697a      	ldr	r2, [r7, #20]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4a21      	ldr	r2, [pc, #132]	; (8003020 <TIM_OC3_SetConfig+0xe0>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d003      	beq.n	8002fa6 <TIM_OC3_SetConfig+0x66>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a20      	ldr	r2, [pc, #128]	; (8003024 <TIM_OC3_SetConfig+0xe4>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d10d      	bne.n	8002fc2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002fac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	021b      	lsls	r3, r3, #8
 8002fb4:	697a      	ldr	r2, [r7, #20]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002fc0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4a16      	ldr	r2, [pc, #88]	; (8003020 <TIM_OC3_SetConfig+0xe0>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d003      	beq.n	8002fd2 <TIM_OC3_SetConfig+0x92>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4a15      	ldr	r2, [pc, #84]	; (8003024 <TIM_OC3_SetConfig+0xe4>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d113      	bne.n	8002ffa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002fd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002fe0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	695b      	ldr	r3, [r3, #20]
 8002fe6:	011b      	lsls	r3, r3, #4
 8002fe8:	693a      	ldr	r2, [r7, #16]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	699b      	ldr	r3, [r3, #24]
 8002ff2:	011b      	lsls	r3, r3, #4
 8002ff4:	693a      	ldr	r2, [r7, #16]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	693a      	ldr	r2, [r7, #16]
 8002ffe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	68fa      	ldr	r2, [r7, #12]
 8003004:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	685a      	ldr	r2, [r3, #4]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	697a      	ldr	r2, [r7, #20]
 8003012:	621a      	str	r2, [r3, #32]
}
 8003014:	bf00      	nop
 8003016:	371c      	adds	r7, #28
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr
 8003020:	40010000 	.word	0x40010000
 8003024:	40010400 	.word	0x40010400

08003028 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003028:	b480      	push	{r7}
 800302a:	b087      	sub	sp, #28
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6a1b      	ldr	r3, [r3, #32]
 8003036:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6a1b      	ldr	r3, [r3, #32]
 8003042:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	69db      	ldr	r3, [r3, #28]
 800304e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003056:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800305e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	021b      	lsls	r3, r3, #8
 8003066:	68fa      	ldr	r2, [r7, #12]
 8003068:	4313      	orrs	r3, r2
 800306a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003072:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	031b      	lsls	r3, r3, #12
 800307a:	693a      	ldr	r2, [r7, #16]
 800307c:	4313      	orrs	r3, r2
 800307e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	4a12      	ldr	r2, [pc, #72]	; (80030cc <TIM_OC4_SetConfig+0xa4>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d003      	beq.n	8003090 <TIM_OC4_SetConfig+0x68>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	4a11      	ldr	r2, [pc, #68]	; (80030d0 <TIM_OC4_SetConfig+0xa8>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d109      	bne.n	80030a4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003096:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	695b      	ldr	r3, [r3, #20]
 800309c:	019b      	lsls	r3, r3, #6
 800309e:	697a      	ldr	r2, [r7, #20]
 80030a0:	4313      	orrs	r3, r2
 80030a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	697a      	ldr	r2, [r7, #20]
 80030a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	68fa      	ldr	r2, [r7, #12]
 80030ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	685a      	ldr	r2, [r3, #4]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	693a      	ldr	r2, [r7, #16]
 80030bc:	621a      	str	r2, [r3, #32]
}
 80030be:	bf00      	nop
 80030c0:	371c      	adds	r7, #28
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop
 80030cc:	40010000 	.word	0x40010000
 80030d0:	40010400 	.word	0x40010400

080030d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b087      	sub	sp, #28
 80030d8:	af00      	add	r7, sp, #0
 80030da:	60f8      	str	r0, [r7, #12]
 80030dc:	60b9      	str	r1, [r7, #8]
 80030de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6a1b      	ldr	r3, [r3, #32]
 80030e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6a1b      	ldr	r3, [r3, #32]
 80030ea:	f023 0201 	bic.w	r2, r3, #1
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	699b      	ldr	r3, [r3, #24]
 80030f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	011b      	lsls	r3, r3, #4
 8003104:	693a      	ldr	r2, [r7, #16]
 8003106:	4313      	orrs	r3, r2
 8003108:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	f023 030a 	bic.w	r3, r3, #10
 8003110:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003112:	697a      	ldr	r2, [r7, #20]
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	4313      	orrs	r3, r2
 8003118:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	693a      	ldr	r2, [r7, #16]
 800311e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	697a      	ldr	r2, [r7, #20]
 8003124:	621a      	str	r2, [r3, #32]
}
 8003126:	bf00      	nop
 8003128:	371c      	adds	r7, #28
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr

08003132 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003132:	b480      	push	{r7}
 8003134:	b087      	sub	sp, #28
 8003136:	af00      	add	r7, sp, #0
 8003138:	60f8      	str	r0, [r7, #12]
 800313a:	60b9      	str	r1, [r7, #8]
 800313c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	6a1b      	ldr	r3, [r3, #32]
 8003142:	f023 0210 	bic.w	r2, r3, #16
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	699b      	ldr	r3, [r3, #24]
 800314e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6a1b      	ldr	r3, [r3, #32]
 8003154:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800315c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	031b      	lsls	r3, r3, #12
 8003162:	697a      	ldr	r2, [r7, #20]
 8003164:	4313      	orrs	r3, r2
 8003166:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800316e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	011b      	lsls	r3, r3, #4
 8003174:	693a      	ldr	r2, [r7, #16]
 8003176:	4313      	orrs	r3, r2
 8003178:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	697a      	ldr	r2, [r7, #20]
 800317e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	693a      	ldr	r2, [r7, #16]
 8003184:	621a      	str	r2, [r3, #32]
}
 8003186:	bf00      	nop
 8003188:	371c      	adds	r7, #28
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr

08003192 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003192:	b480      	push	{r7}
 8003194:	b085      	sub	sp, #20
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]
 800319a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80031aa:	683a      	ldr	r2, [r7, #0]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	f043 0307 	orr.w	r3, r3, #7
 80031b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	68fa      	ldr	r2, [r7, #12]
 80031ba:	609a      	str	r2, [r3, #8]
}
 80031bc:	bf00      	nop
 80031be:	3714      	adds	r7, #20
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr

080031c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b087      	sub	sp, #28
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	60f8      	str	r0, [r7, #12]
 80031d0:	60b9      	str	r1, [r7, #8]
 80031d2:	607a      	str	r2, [r7, #4]
 80031d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80031e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	021a      	lsls	r2, r3, #8
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	431a      	orrs	r2, r3
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	697a      	ldr	r2, [r7, #20]
 80031f2:	4313      	orrs	r3, r2
 80031f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	697a      	ldr	r2, [r7, #20]
 80031fa:	609a      	str	r2, [r3, #8]
}
 80031fc:	bf00      	nop
 80031fe:	371c      	adds	r7, #28
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003208:	b480      	push	{r7}
 800320a:	b087      	sub	sp, #28
 800320c:	af00      	add	r7, sp, #0
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	60b9      	str	r1, [r7, #8]
 8003212:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	f003 031f 	and.w	r3, r3, #31
 800321a:	2201      	movs	r2, #1
 800321c:	fa02 f303 	lsl.w	r3, r2, r3
 8003220:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6a1a      	ldr	r2, [r3, #32]
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	43db      	mvns	r3, r3
 800322a:	401a      	ands	r2, r3
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6a1a      	ldr	r2, [r3, #32]
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	f003 031f 	and.w	r3, r3, #31
 800323a:	6879      	ldr	r1, [r7, #4]
 800323c:	fa01 f303 	lsl.w	r3, r1, r3
 8003240:	431a      	orrs	r2, r3
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	621a      	str	r2, [r3, #32]
}
 8003246:	bf00      	nop
 8003248:	371c      	adds	r7, #28
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr
	...

08003254 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003254:	b480      	push	{r7}
 8003256:	b085      	sub	sp, #20
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003264:	2b01      	cmp	r3, #1
 8003266:	d101      	bne.n	800326c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003268:	2302      	movs	r3, #2
 800326a:	e05a      	b.n	8003322 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2201      	movs	r2, #1
 8003270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2202      	movs	r2, #2
 8003278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003292:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	68fa      	ldr	r2, [r7, #12]
 800329a:	4313      	orrs	r3, r2
 800329c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	68fa      	ldr	r2, [r7, #12]
 80032a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a21      	ldr	r2, [pc, #132]	; (8003330 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d022      	beq.n	80032f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032b8:	d01d      	beq.n	80032f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a1d      	ldr	r2, [pc, #116]	; (8003334 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d018      	beq.n	80032f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a1b      	ldr	r2, [pc, #108]	; (8003338 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d013      	beq.n	80032f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a1a      	ldr	r2, [pc, #104]	; (800333c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d00e      	beq.n	80032f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a18      	ldr	r2, [pc, #96]	; (8003340 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d009      	beq.n	80032f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a17      	ldr	r2, [pc, #92]	; (8003344 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d004      	beq.n	80032f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a15      	ldr	r2, [pc, #84]	; (8003348 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d10c      	bne.n	8003310 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	68ba      	ldr	r2, [r7, #8]
 8003304:	4313      	orrs	r3, r2
 8003306:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	68ba      	ldr	r2, [r7, #8]
 800330e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2201      	movs	r2, #1
 8003314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003320:	2300      	movs	r3, #0
}
 8003322:	4618      	mov	r0, r3
 8003324:	3714      	adds	r7, #20
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr
 800332e:	bf00      	nop
 8003330:	40010000 	.word	0x40010000
 8003334:	40000400 	.word	0x40000400
 8003338:	40000800 	.word	0x40000800
 800333c:	40000c00 	.word	0x40000c00
 8003340:	40010400 	.word	0x40010400
 8003344:	40014000 	.word	0x40014000
 8003348:	40001800 	.word	0x40001800

0800334c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800334c:	b480      	push	{r7}
 800334e:	b085      	sub	sp, #20
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003356:	2300      	movs	r3, #0
 8003358:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003360:	2b01      	cmp	r3, #1
 8003362:	d101      	bne.n	8003368 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003364:	2302      	movs	r3, #2
 8003366:	e03d      	b.n	80033e4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	4313      	orrs	r3, r2
 800337c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	4313      	orrs	r3, r2
 800338a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	4313      	orrs	r3, r2
 8003398:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	691b      	ldr	r3, [r3, #16]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	695b      	ldr	r3, [r3, #20]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	69db      	ldr	r3, [r3, #28]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	68fa      	ldr	r2, [r7, #12]
 80033d8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033e2:	2300      	movs	r3, #0
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3714      	adds	r7, #20
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr

080033f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d101      	bne.n	8003402 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e03f      	b.n	8003482 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003408:	b2db      	uxtb	r3, r3
 800340a:	2b00      	cmp	r3, #0
 800340c:	d106      	bne.n	800341c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f7fd ff02 	bl	8001220 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2224      	movs	r2, #36	; 0x24
 8003420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	68da      	ldr	r2, [r3, #12]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003432:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f000 fddb 	bl	8003ff0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	691a      	ldr	r2, [r3, #16]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003448:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	695a      	ldr	r2, [r3, #20]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003458:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	68da      	ldr	r2, [r3, #12]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003468:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2220      	movs	r2, #32
 8003474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2220      	movs	r2, #32
 800347c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003480:	2300      	movs	r3, #0
}
 8003482:	4618      	mov	r0, r3
 8003484:	3708      	adds	r7, #8
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}

0800348a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800348a:	b580      	push	{r7, lr}
 800348c:	b08a      	sub	sp, #40	; 0x28
 800348e:	af02      	add	r7, sp, #8
 8003490:	60f8      	str	r0, [r7, #12]
 8003492:	60b9      	str	r1, [r7, #8]
 8003494:	603b      	str	r3, [r7, #0]
 8003496:	4613      	mov	r3, r2
 8003498:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800349a:	2300      	movs	r3, #0
 800349c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	2b20      	cmp	r3, #32
 80034a8:	d17c      	bne.n	80035a4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d002      	beq.n	80034b6 <HAL_UART_Transmit+0x2c>
 80034b0:	88fb      	ldrh	r3, [r7, #6]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d101      	bne.n	80034ba <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e075      	b.n	80035a6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d101      	bne.n	80034c8 <HAL_UART_Transmit+0x3e>
 80034c4:	2302      	movs	r3, #2
 80034c6:	e06e      	b.n	80035a6 <HAL_UART_Transmit+0x11c>
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2200      	movs	r2, #0
 80034d4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2221      	movs	r2, #33	; 0x21
 80034da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034de:	f7fd fff5 	bl	80014cc <HAL_GetTick>
 80034e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	88fa      	ldrh	r2, [r7, #6]
 80034e8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	88fa      	ldrh	r2, [r7, #6]
 80034ee:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034f8:	d108      	bne.n	800350c <HAL_UART_Transmit+0x82>
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	691b      	ldr	r3, [r3, #16]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d104      	bne.n	800350c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003502:	2300      	movs	r3, #0
 8003504:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	61bb      	str	r3, [r7, #24]
 800350a:	e003      	b.n	8003514 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003510:	2300      	movs	r3, #0
 8003512:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2200      	movs	r2, #0
 8003518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800351c:	e02a      	b.n	8003574 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	9300      	str	r3, [sp, #0]
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	2200      	movs	r2, #0
 8003526:	2180      	movs	r1, #128	; 0x80
 8003528:	68f8      	ldr	r0, [r7, #12]
 800352a:	f000 fb1f 	bl	8003b6c <UART_WaitOnFlagUntilTimeout>
 800352e:	4603      	mov	r3, r0
 8003530:	2b00      	cmp	r3, #0
 8003532:	d001      	beq.n	8003538 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003534:	2303      	movs	r3, #3
 8003536:	e036      	b.n	80035a6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d10b      	bne.n	8003556 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800353e:	69bb      	ldr	r3, [r7, #24]
 8003540:	881b      	ldrh	r3, [r3, #0]
 8003542:	461a      	mov	r2, r3
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800354c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800354e:	69bb      	ldr	r3, [r7, #24]
 8003550:	3302      	adds	r3, #2
 8003552:	61bb      	str	r3, [r7, #24]
 8003554:	e007      	b.n	8003566 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	781a      	ldrb	r2, [r3, #0]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003560:	69fb      	ldr	r3, [r7, #28]
 8003562:	3301      	adds	r3, #1
 8003564:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800356a:	b29b      	uxth	r3, r3
 800356c:	3b01      	subs	r3, #1
 800356e:	b29a      	uxth	r2, r3
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003578:	b29b      	uxth	r3, r3
 800357a:	2b00      	cmp	r3, #0
 800357c:	d1cf      	bne.n	800351e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	9300      	str	r3, [sp, #0]
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	2200      	movs	r2, #0
 8003586:	2140      	movs	r1, #64	; 0x40
 8003588:	68f8      	ldr	r0, [r7, #12]
 800358a:	f000 faef 	bl	8003b6c <UART_WaitOnFlagUntilTimeout>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	d001      	beq.n	8003598 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003594:	2303      	movs	r3, #3
 8003596:	e006      	b.n	80035a6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2220      	movs	r2, #32
 800359c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80035a0:	2300      	movs	r3, #0
 80035a2:	e000      	b.n	80035a6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80035a4:	2302      	movs	r3, #2
  }
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3720      	adds	r7, #32
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}

080035ae <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80035ae:	b580      	push	{r7, lr}
 80035b0:	b084      	sub	sp, #16
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	60f8      	str	r0, [r7, #12]
 80035b6:	60b9      	str	r1, [r7, #8]
 80035b8:	4613      	mov	r3, r2
 80035ba:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	2b20      	cmp	r3, #32
 80035c6:	d11d      	bne.n	8003604 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d002      	beq.n	80035d4 <HAL_UART_Receive_IT+0x26>
 80035ce:	88fb      	ldrh	r3, [r7, #6]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d101      	bne.n	80035d8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e016      	b.n	8003606 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d101      	bne.n	80035e6 <HAL_UART_Receive_IT+0x38>
 80035e2:	2302      	movs	r3, #2
 80035e4:	e00f      	b.n	8003606 <HAL_UART_Receive_IT+0x58>
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2201      	movs	r2, #1
 80035ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2200      	movs	r2, #0
 80035f2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80035f4:	88fb      	ldrh	r3, [r7, #6]
 80035f6:	461a      	mov	r2, r3
 80035f8:	68b9      	ldr	r1, [r7, #8]
 80035fa:	68f8      	ldr	r0, [r7, #12]
 80035fc:	f000 fb24 	bl	8003c48 <UART_Start_Receive_IT>
 8003600:	4603      	mov	r3, r0
 8003602:	e000      	b.n	8003606 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003604:	2302      	movs	r3, #2
  }
}
 8003606:	4618      	mov	r0, r3
 8003608:	3710      	adds	r7, #16
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
	...

08003610 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b0ba      	sub	sp, #232	; 0xe8
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	695b      	ldr	r3, [r3, #20]
 8003632:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003636:	2300      	movs	r3, #0
 8003638:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800363c:	2300      	movs	r3, #0
 800363e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003642:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003646:	f003 030f 	and.w	r3, r3, #15
 800364a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800364e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003652:	2b00      	cmp	r3, #0
 8003654:	d10f      	bne.n	8003676 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003656:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800365a:	f003 0320 	and.w	r3, r3, #32
 800365e:	2b00      	cmp	r3, #0
 8003660:	d009      	beq.n	8003676 <HAL_UART_IRQHandler+0x66>
 8003662:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003666:	f003 0320 	and.w	r3, r3, #32
 800366a:	2b00      	cmp	r3, #0
 800366c:	d003      	beq.n	8003676 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f000 fc03 	bl	8003e7a <UART_Receive_IT>
      return;
 8003674:	e256      	b.n	8003b24 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003676:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800367a:	2b00      	cmp	r3, #0
 800367c:	f000 80de 	beq.w	800383c <HAL_UART_IRQHandler+0x22c>
 8003680:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003684:	f003 0301 	and.w	r3, r3, #1
 8003688:	2b00      	cmp	r3, #0
 800368a:	d106      	bne.n	800369a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800368c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003690:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003694:	2b00      	cmp	r3, #0
 8003696:	f000 80d1 	beq.w	800383c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800369a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800369e:	f003 0301 	and.w	r3, r3, #1
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d00b      	beq.n	80036be <HAL_UART_IRQHandler+0xae>
 80036a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d005      	beq.n	80036be <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b6:	f043 0201 	orr.w	r2, r3, #1
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036c2:	f003 0304 	and.w	r3, r3, #4
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d00b      	beq.n	80036e2 <HAL_UART_IRQHandler+0xd2>
 80036ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036ce:	f003 0301 	and.w	r3, r3, #1
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d005      	beq.n	80036e2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036da:	f043 0202 	orr.w	r2, r3, #2
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036e6:	f003 0302 	and.w	r3, r3, #2
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d00b      	beq.n	8003706 <HAL_UART_IRQHandler+0xf6>
 80036ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036f2:	f003 0301 	and.w	r3, r3, #1
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d005      	beq.n	8003706 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fe:	f043 0204 	orr.w	r2, r3, #4
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003706:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800370a:	f003 0308 	and.w	r3, r3, #8
 800370e:	2b00      	cmp	r3, #0
 8003710:	d011      	beq.n	8003736 <HAL_UART_IRQHandler+0x126>
 8003712:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003716:	f003 0320 	and.w	r3, r3, #32
 800371a:	2b00      	cmp	r3, #0
 800371c:	d105      	bne.n	800372a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800371e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003722:	f003 0301 	and.w	r3, r3, #1
 8003726:	2b00      	cmp	r3, #0
 8003728:	d005      	beq.n	8003736 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372e:	f043 0208 	orr.w	r2, r3, #8
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373a:	2b00      	cmp	r3, #0
 800373c:	f000 81ed 	beq.w	8003b1a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003740:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003744:	f003 0320 	and.w	r3, r3, #32
 8003748:	2b00      	cmp	r3, #0
 800374a:	d008      	beq.n	800375e <HAL_UART_IRQHandler+0x14e>
 800374c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003750:	f003 0320 	and.w	r3, r3, #32
 8003754:	2b00      	cmp	r3, #0
 8003756:	d002      	beq.n	800375e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f000 fb8e 	bl	8003e7a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	695b      	ldr	r3, [r3, #20]
 8003764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003768:	2b40      	cmp	r3, #64	; 0x40
 800376a:	bf0c      	ite	eq
 800376c:	2301      	moveq	r3, #1
 800376e:	2300      	movne	r3, #0
 8003770:	b2db      	uxtb	r3, r3
 8003772:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377a:	f003 0308 	and.w	r3, r3, #8
 800377e:	2b00      	cmp	r3, #0
 8003780:	d103      	bne.n	800378a <HAL_UART_IRQHandler+0x17a>
 8003782:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003786:	2b00      	cmp	r3, #0
 8003788:	d04f      	beq.n	800382a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f000 fa96 	bl	8003cbc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	695b      	ldr	r3, [r3, #20]
 8003796:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800379a:	2b40      	cmp	r3, #64	; 0x40
 800379c:	d141      	bne.n	8003822 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	3314      	adds	r3, #20
 80037a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80037ac:	e853 3f00 	ldrex	r3, [r3]
 80037b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80037b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80037b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	3314      	adds	r3, #20
 80037c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80037ca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80037ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80037d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80037da:	e841 2300 	strex	r3, r2, [r1]
 80037de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80037e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d1d9      	bne.n	800379e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d013      	beq.n	800381a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f6:	4a7d      	ldr	r2, [pc, #500]	; (80039ec <HAL_UART_IRQHandler+0x3dc>)
 80037f8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037fe:	4618      	mov	r0, r3
 8003800:	f7fe f815 	bl	800182e <HAL_DMA_Abort_IT>
 8003804:	4603      	mov	r3, r0
 8003806:	2b00      	cmp	r3, #0
 8003808:	d016      	beq.n	8003838 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800380e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003814:	4610      	mov	r0, r2
 8003816:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003818:	e00e      	b.n	8003838 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f000 f990 	bl	8003b40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003820:	e00a      	b.n	8003838 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f000 f98c 	bl	8003b40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003828:	e006      	b.n	8003838 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f000 f988 	bl	8003b40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003836:	e170      	b.n	8003b1a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003838:	bf00      	nop
    return;
 800383a:	e16e      	b.n	8003b1a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003840:	2b01      	cmp	r3, #1
 8003842:	f040 814a 	bne.w	8003ada <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003846:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800384a:	f003 0310 	and.w	r3, r3, #16
 800384e:	2b00      	cmp	r3, #0
 8003850:	f000 8143 	beq.w	8003ada <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003854:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003858:	f003 0310 	and.w	r3, r3, #16
 800385c:	2b00      	cmp	r3, #0
 800385e:	f000 813c 	beq.w	8003ada <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003862:	2300      	movs	r3, #0
 8003864:	60bb      	str	r3, [r7, #8]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	60bb      	str	r3, [r7, #8]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	60bb      	str	r3, [r7, #8]
 8003876:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	695b      	ldr	r3, [r3, #20]
 800387e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003882:	2b40      	cmp	r3, #64	; 0x40
 8003884:	f040 80b4 	bne.w	80039f0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003894:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003898:	2b00      	cmp	r3, #0
 800389a:	f000 8140 	beq.w	8003b1e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80038a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80038a6:	429a      	cmp	r2, r3
 80038a8:	f080 8139 	bcs.w	8003b1e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80038b2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b8:	69db      	ldr	r3, [r3, #28]
 80038ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038be:	f000 8088 	beq.w	80039d2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	330c      	adds	r3, #12
 80038c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80038d0:	e853 3f00 	ldrex	r3, [r3]
 80038d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80038d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80038dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	330c      	adds	r3, #12
 80038ea:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80038ee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80038f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038f6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80038fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80038fe:	e841 2300 	strex	r3, r2, [r1]
 8003902:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003906:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800390a:	2b00      	cmp	r3, #0
 800390c:	d1d9      	bne.n	80038c2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	3314      	adds	r3, #20
 8003914:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003916:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003918:	e853 3f00 	ldrex	r3, [r3]
 800391c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800391e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003920:	f023 0301 	bic.w	r3, r3, #1
 8003924:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	3314      	adds	r3, #20
 800392e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003932:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003936:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003938:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800393a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800393e:	e841 2300 	strex	r3, r2, [r1]
 8003942:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003944:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003946:	2b00      	cmp	r3, #0
 8003948:	d1e1      	bne.n	800390e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	3314      	adds	r3, #20
 8003950:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003952:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003954:	e853 3f00 	ldrex	r3, [r3]
 8003958:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800395a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800395c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003960:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	3314      	adds	r3, #20
 800396a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800396e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003970:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003972:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003974:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003976:	e841 2300 	strex	r3, r2, [r1]
 800397a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800397c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800397e:	2b00      	cmp	r3, #0
 8003980:	d1e3      	bne.n	800394a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2220      	movs	r2, #32
 8003986:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	330c      	adds	r3, #12
 8003996:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003998:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800399a:	e853 3f00 	ldrex	r3, [r3]
 800399e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80039a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039a2:	f023 0310 	bic.w	r3, r3, #16
 80039a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	330c      	adds	r3, #12
 80039b0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80039b4:	65ba      	str	r2, [r7, #88]	; 0x58
 80039b6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039b8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80039ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80039bc:	e841 2300 	strex	r3, r2, [r1]
 80039c0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80039c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d1e3      	bne.n	8003990 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039cc:	4618      	mov	r0, r3
 80039ce:	f7fd febe 	bl	800174e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80039da:	b29b      	uxth	r3, r3
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	b29b      	uxth	r3, r3
 80039e0:	4619      	mov	r1, r3
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f000 f8b6 	bl	8003b54 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80039e8:	e099      	b.n	8003b1e <HAL_UART_IRQHandler+0x50e>
 80039ea:	bf00      	nop
 80039ec:	08003d83 	.word	0x08003d83
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003a04:	b29b      	uxth	r3, r3
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	f000 808b 	beq.w	8003b22 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003a0c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	f000 8086 	beq.w	8003b22 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	330c      	adds	r3, #12
 8003a1c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a20:	e853 3f00 	ldrex	r3, [r3]
 8003a24:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a28:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a2c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	330c      	adds	r3, #12
 8003a36:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003a3a:	647a      	str	r2, [r7, #68]	; 0x44
 8003a3c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a3e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003a40:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a42:	e841 2300 	strex	r3, r2, [r1]
 8003a46:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003a48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d1e3      	bne.n	8003a16 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	3314      	adds	r3, #20
 8003a54:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a58:	e853 3f00 	ldrex	r3, [r3]
 8003a5c:	623b      	str	r3, [r7, #32]
   return(result);
 8003a5e:	6a3b      	ldr	r3, [r7, #32]
 8003a60:	f023 0301 	bic.w	r3, r3, #1
 8003a64:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	3314      	adds	r3, #20
 8003a6e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003a72:	633a      	str	r2, [r7, #48]	; 0x30
 8003a74:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a7a:	e841 2300 	strex	r3, r2, [r1]
 8003a7e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d1e3      	bne.n	8003a4e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2220      	movs	r2, #32
 8003a8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	330c      	adds	r3, #12
 8003a9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	e853 3f00 	ldrex	r3, [r3]
 8003aa2:	60fb      	str	r3, [r7, #12]
   return(result);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f023 0310 	bic.w	r3, r3, #16
 8003aaa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	330c      	adds	r3, #12
 8003ab4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003ab8:	61fa      	str	r2, [r7, #28]
 8003aba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003abc:	69b9      	ldr	r1, [r7, #24]
 8003abe:	69fa      	ldr	r2, [r7, #28]
 8003ac0:	e841 2300 	strex	r3, r2, [r1]
 8003ac4:	617b      	str	r3, [r7, #20]
   return(result);
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d1e3      	bne.n	8003a94 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003acc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003ad0:	4619      	mov	r1, r3
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f000 f83e 	bl	8003b54 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003ad8:	e023      	b.n	8003b22 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003ada:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d009      	beq.n	8003afa <HAL_UART_IRQHandler+0x4ea>
 8003ae6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003aea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d003      	beq.n	8003afa <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f000 f959 	bl	8003daa <UART_Transmit_IT>
    return;
 8003af8:	e014      	b.n	8003b24 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003afa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d00e      	beq.n	8003b24 <HAL_UART_IRQHandler+0x514>
 8003b06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d008      	beq.n	8003b24 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f000 f999 	bl	8003e4a <UART_EndTransmit_IT>
    return;
 8003b18:	e004      	b.n	8003b24 <HAL_UART_IRQHandler+0x514>
    return;
 8003b1a:	bf00      	nop
 8003b1c:	e002      	b.n	8003b24 <HAL_UART_IRQHandler+0x514>
      return;
 8003b1e:	bf00      	nop
 8003b20:	e000      	b.n	8003b24 <HAL_UART_IRQHandler+0x514>
      return;
 8003b22:	bf00      	nop
  }
}
 8003b24:	37e8      	adds	r7, #232	; 0xe8
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop

08003b2c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003b34:	bf00      	nop
 8003b36:	370c      	adds	r7, #12
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr

08003b40 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003b48:	bf00      	nop
 8003b4a:	370c      	adds	r7, #12
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr

08003b54 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b083      	sub	sp, #12
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	460b      	mov	r3, r1
 8003b5e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003b60:	bf00      	nop
 8003b62:	370c      	adds	r7, #12
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr

08003b6c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b090      	sub	sp, #64	; 0x40
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	60f8      	str	r0, [r7, #12]
 8003b74:	60b9      	str	r1, [r7, #8]
 8003b76:	603b      	str	r3, [r7, #0]
 8003b78:	4613      	mov	r3, r2
 8003b7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b7c:	e050      	b.n	8003c20 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b84:	d04c      	beq.n	8003c20 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003b86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d007      	beq.n	8003b9c <UART_WaitOnFlagUntilTimeout+0x30>
 8003b8c:	f7fd fc9e 	bl	80014cc <HAL_GetTick>
 8003b90:	4602      	mov	r2, r0
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d241      	bcs.n	8003c20 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	330c      	adds	r3, #12
 8003ba2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ba6:	e853 3f00 	ldrex	r3, [r3]
 8003baa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bae:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003bb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	330c      	adds	r3, #12
 8003bba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003bbc:	637a      	str	r2, [r7, #52]	; 0x34
 8003bbe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bc0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003bc2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003bc4:	e841 2300 	strex	r3, r2, [r1]
 8003bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d1e5      	bne.n	8003b9c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	3314      	adds	r3, #20
 8003bd6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	e853 3f00 	ldrex	r3, [r3]
 8003bde:	613b      	str	r3, [r7, #16]
   return(result);
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	f023 0301 	bic.w	r3, r3, #1
 8003be6:	63bb      	str	r3, [r7, #56]	; 0x38
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	3314      	adds	r3, #20
 8003bee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003bf0:	623a      	str	r2, [r7, #32]
 8003bf2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bf4:	69f9      	ldr	r1, [r7, #28]
 8003bf6:	6a3a      	ldr	r2, [r7, #32]
 8003bf8:	e841 2300 	strex	r3, r2, [r1]
 8003bfc:	61bb      	str	r3, [r7, #24]
   return(result);
 8003bfe:	69bb      	ldr	r3, [r7, #24]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d1e5      	bne.n	8003bd0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2220      	movs	r2, #32
 8003c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2220      	movs	r2, #32
 8003c10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2200      	movs	r2, #0
 8003c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003c1c:	2303      	movs	r3, #3
 8003c1e:	e00f      	b.n	8003c40 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	4013      	ands	r3, r2
 8003c2a:	68ba      	ldr	r2, [r7, #8]
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	bf0c      	ite	eq
 8003c30:	2301      	moveq	r3, #1
 8003c32:	2300      	movne	r3, #0
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	461a      	mov	r2, r3
 8003c38:	79fb      	ldrb	r3, [r7, #7]
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d09f      	beq.n	8003b7e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c3e:	2300      	movs	r3, #0
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3740      	adds	r7, #64	; 0x40
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}

08003c48 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b085      	sub	sp, #20
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	60f8      	str	r0, [r7, #12]
 8003c50:	60b9      	str	r1, [r7, #8]
 8003c52:	4613      	mov	r3, r2
 8003c54:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	68ba      	ldr	r2, [r7, #8]
 8003c5a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	88fa      	ldrh	r2, [r7, #6]
 8003c60:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	88fa      	ldrh	r2, [r7, #6]
 8003c66:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2222      	movs	r2, #34	; 0x22
 8003c72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	68da      	ldr	r2, [r3, #12]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c8c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	695a      	ldr	r2, [r3, #20]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f042 0201 	orr.w	r2, r2, #1
 8003c9c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	68da      	ldr	r2, [r3, #12]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f042 0220 	orr.w	r2, r2, #32
 8003cac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003cae:	2300      	movs	r3, #0
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3714      	adds	r7, #20
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr

08003cbc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b095      	sub	sp, #84	; 0x54
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	330c      	adds	r3, #12
 8003cca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cce:	e853 3f00 	ldrex	r3, [r3]
 8003cd2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cd6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003cda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	330c      	adds	r3, #12
 8003ce2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ce4:	643a      	str	r2, [r7, #64]	; 0x40
 8003ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ce8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003cea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003cec:	e841 2300 	strex	r3, r2, [r1]
 8003cf0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d1e5      	bne.n	8003cc4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	3314      	adds	r3, #20
 8003cfe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d00:	6a3b      	ldr	r3, [r7, #32]
 8003d02:	e853 3f00 	ldrex	r3, [r3]
 8003d06:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	f023 0301 	bic.w	r3, r3, #1
 8003d0e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	3314      	adds	r3, #20
 8003d16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d18:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d1a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d20:	e841 2300 	strex	r3, r2, [r1]
 8003d24:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d1e5      	bne.n	8003cf8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d119      	bne.n	8003d68 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	330c      	adds	r3, #12
 8003d3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	e853 3f00 	ldrex	r3, [r3]
 8003d42:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	f023 0310 	bic.w	r3, r3, #16
 8003d4a:	647b      	str	r3, [r7, #68]	; 0x44
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	330c      	adds	r3, #12
 8003d52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d54:	61ba      	str	r2, [r7, #24]
 8003d56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d58:	6979      	ldr	r1, [r7, #20]
 8003d5a:	69ba      	ldr	r2, [r7, #24]
 8003d5c:	e841 2300 	strex	r3, r2, [r1]
 8003d60:	613b      	str	r3, [r7, #16]
   return(result);
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d1e5      	bne.n	8003d34 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2220      	movs	r2, #32
 8003d6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2200      	movs	r2, #0
 8003d74:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003d76:	bf00      	nop
 8003d78:	3754      	adds	r7, #84	; 0x54
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr

08003d82 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d82:	b580      	push	{r7, lr}
 8003d84:	b084      	sub	sp, #16
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d8e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2200      	movs	r2, #0
 8003d94:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d9c:	68f8      	ldr	r0, [r7, #12]
 8003d9e:	f7ff fecf 	bl	8003b40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003da2:	bf00      	nop
 8003da4:	3710      	adds	r7, #16
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}

08003daa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003daa:	b480      	push	{r7}
 8003dac:	b085      	sub	sp, #20
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	2b21      	cmp	r3, #33	; 0x21
 8003dbc:	d13e      	bne.n	8003e3c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dc6:	d114      	bne.n	8003df2 <UART_Transmit_IT+0x48>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	691b      	ldr	r3, [r3, #16]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d110      	bne.n	8003df2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6a1b      	ldr	r3, [r3, #32]
 8003dd4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	881b      	ldrh	r3, [r3, #0]
 8003dda:	461a      	mov	r2, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003de4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a1b      	ldr	r3, [r3, #32]
 8003dea:	1c9a      	adds	r2, r3, #2
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	621a      	str	r2, [r3, #32]
 8003df0:	e008      	b.n	8003e04 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a1b      	ldr	r3, [r3, #32]
 8003df6:	1c59      	adds	r1, r3, #1
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	6211      	str	r1, [r2, #32]
 8003dfc:	781a      	ldrb	r2, [r3, #0]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	3b01      	subs	r3, #1
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	4619      	mov	r1, r3
 8003e12:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d10f      	bne.n	8003e38 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	68da      	ldr	r2, [r3, #12]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e26:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	68da      	ldr	r2, [r3, #12]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e36:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	e000      	b.n	8003e3e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003e3c:	2302      	movs	r3, #2
  }
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3714      	adds	r7, #20
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr

08003e4a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e4a:	b580      	push	{r7, lr}
 8003e4c:	b082      	sub	sp, #8
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	68da      	ldr	r2, [r3, #12]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e60:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2220      	movs	r2, #32
 8003e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f7ff fe5e 	bl	8003b2c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003e70:	2300      	movs	r3, #0
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3708      	adds	r7, #8
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}

08003e7a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003e7a:	b580      	push	{r7, lr}
 8003e7c:	b08c      	sub	sp, #48	; 0x30
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	2b22      	cmp	r3, #34	; 0x22
 8003e8c:	f040 80ab 	bne.w	8003fe6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e98:	d117      	bne.n	8003eca <UART_Receive_IT+0x50>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d113      	bne.n	8003eca <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eaa:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003eb8:	b29a      	uxth	r2, r3
 8003eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ebc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ec2:	1c9a      	adds	r2, r3, #2
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	629a      	str	r2, [r3, #40]	; 0x28
 8003ec8:	e026      	b.n	8003f18 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ece:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003edc:	d007      	beq.n	8003eee <UART_Receive_IT+0x74>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d10a      	bne.n	8003efc <UART_Receive_IT+0x82>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	691b      	ldr	r3, [r3, #16]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d106      	bne.n	8003efc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	b2da      	uxtb	r2, r3
 8003ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ef8:	701a      	strb	r2, [r3, #0]
 8003efa:	e008      	b.n	8003f0e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f08:	b2da      	uxtb	r2, r3
 8003f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f0c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f12:	1c5a      	adds	r2, r3, #1
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	4619      	mov	r1, r3
 8003f26:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d15a      	bne.n	8003fe2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	68da      	ldr	r2, [r3, #12]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f022 0220 	bic.w	r2, r2, #32
 8003f3a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	68da      	ldr	r2, [r3, #12]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f4a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	695a      	ldr	r2, [r3, #20]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f022 0201 	bic.w	r2, r2, #1
 8003f5a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2220      	movs	r2, #32
 8003f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d135      	bne.n	8003fd8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	330c      	adds	r3, #12
 8003f78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	e853 3f00 	ldrex	r3, [r3]
 8003f80:	613b      	str	r3, [r7, #16]
   return(result);
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	f023 0310 	bic.w	r3, r3, #16
 8003f88:	627b      	str	r3, [r7, #36]	; 0x24
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	330c      	adds	r3, #12
 8003f90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f92:	623a      	str	r2, [r7, #32]
 8003f94:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f96:	69f9      	ldr	r1, [r7, #28]
 8003f98:	6a3a      	ldr	r2, [r7, #32]
 8003f9a:	e841 2300 	strex	r3, r2, [r1]
 8003f9e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003fa0:	69bb      	ldr	r3, [r7, #24]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d1e5      	bne.n	8003f72 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 0310 	and.w	r3, r3, #16
 8003fb0:	2b10      	cmp	r3, #16
 8003fb2:	d10a      	bne.n	8003fca <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	60fb      	str	r3, [r7, #12]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	60fb      	str	r3, [r7, #12]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	60fb      	str	r3, [r7, #12]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003fce:	4619      	mov	r1, r3
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f7ff fdbf 	bl	8003b54 <HAL_UARTEx_RxEventCallback>
 8003fd6:	e002      	b.n	8003fde <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f7fc fe0d 	bl	8000bf8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	e002      	b.n	8003fe8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	e000      	b.n	8003fe8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003fe6:	2302      	movs	r3, #2
  }
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3730      	adds	r7, #48	; 0x30
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ff4:	b09f      	sub	sp, #124	; 0x7c
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ffa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	691b      	ldr	r3, [r3, #16]
 8004000:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004004:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004006:	68d9      	ldr	r1, [r3, #12]
 8004008:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	ea40 0301 	orr.w	r3, r0, r1
 8004010:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004012:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004014:	689a      	ldr	r2, [r3, #8]
 8004016:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004018:	691b      	ldr	r3, [r3, #16]
 800401a:	431a      	orrs	r2, r3
 800401c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800401e:	695b      	ldr	r3, [r3, #20]
 8004020:	431a      	orrs	r2, r3
 8004022:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004024:	69db      	ldr	r3, [r3, #28]
 8004026:	4313      	orrs	r3, r2
 8004028:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800402a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004034:	f021 010c 	bic.w	r1, r1, #12
 8004038:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800403e:	430b      	orrs	r3, r1
 8004040:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004042:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	695b      	ldr	r3, [r3, #20]
 8004048:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800404c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800404e:	6999      	ldr	r1, [r3, #24]
 8004050:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	ea40 0301 	orr.w	r3, r0, r1
 8004058:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800405a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	4bc5      	ldr	r3, [pc, #788]	; (8004374 <UART_SetConfig+0x384>)
 8004060:	429a      	cmp	r2, r3
 8004062:	d004      	beq.n	800406e <UART_SetConfig+0x7e>
 8004064:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	4bc3      	ldr	r3, [pc, #780]	; (8004378 <UART_SetConfig+0x388>)
 800406a:	429a      	cmp	r2, r3
 800406c:	d103      	bne.n	8004076 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800406e:	f7fe fa2d 	bl	80024cc <HAL_RCC_GetPCLK2Freq>
 8004072:	6778      	str	r0, [r7, #116]	; 0x74
 8004074:	e002      	b.n	800407c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004076:	f7fe fa15 	bl	80024a4 <HAL_RCC_GetPCLK1Freq>
 800407a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800407c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800407e:	69db      	ldr	r3, [r3, #28]
 8004080:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004084:	f040 80b6 	bne.w	80041f4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004088:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800408a:	461c      	mov	r4, r3
 800408c:	f04f 0500 	mov.w	r5, #0
 8004090:	4622      	mov	r2, r4
 8004092:	462b      	mov	r3, r5
 8004094:	1891      	adds	r1, r2, r2
 8004096:	6439      	str	r1, [r7, #64]	; 0x40
 8004098:	415b      	adcs	r3, r3
 800409a:	647b      	str	r3, [r7, #68]	; 0x44
 800409c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80040a0:	1912      	adds	r2, r2, r4
 80040a2:	eb45 0303 	adc.w	r3, r5, r3
 80040a6:	f04f 0000 	mov.w	r0, #0
 80040aa:	f04f 0100 	mov.w	r1, #0
 80040ae:	00d9      	lsls	r1, r3, #3
 80040b0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80040b4:	00d0      	lsls	r0, r2, #3
 80040b6:	4602      	mov	r2, r0
 80040b8:	460b      	mov	r3, r1
 80040ba:	1911      	adds	r1, r2, r4
 80040bc:	6639      	str	r1, [r7, #96]	; 0x60
 80040be:	416b      	adcs	r3, r5
 80040c0:	667b      	str	r3, [r7, #100]	; 0x64
 80040c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	461a      	mov	r2, r3
 80040c8:	f04f 0300 	mov.w	r3, #0
 80040cc:	1891      	adds	r1, r2, r2
 80040ce:	63b9      	str	r1, [r7, #56]	; 0x38
 80040d0:	415b      	adcs	r3, r3
 80040d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80040d8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80040dc:	f7fc f8c8 	bl	8000270 <__aeabi_uldivmod>
 80040e0:	4602      	mov	r2, r0
 80040e2:	460b      	mov	r3, r1
 80040e4:	4ba5      	ldr	r3, [pc, #660]	; (800437c <UART_SetConfig+0x38c>)
 80040e6:	fba3 2302 	umull	r2, r3, r3, r2
 80040ea:	095b      	lsrs	r3, r3, #5
 80040ec:	011e      	lsls	r6, r3, #4
 80040ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040f0:	461c      	mov	r4, r3
 80040f2:	f04f 0500 	mov.w	r5, #0
 80040f6:	4622      	mov	r2, r4
 80040f8:	462b      	mov	r3, r5
 80040fa:	1891      	adds	r1, r2, r2
 80040fc:	6339      	str	r1, [r7, #48]	; 0x30
 80040fe:	415b      	adcs	r3, r3
 8004100:	637b      	str	r3, [r7, #52]	; 0x34
 8004102:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004106:	1912      	adds	r2, r2, r4
 8004108:	eb45 0303 	adc.w	r3, r5, r3
 800410c:	f04f 0000 	mov.w	r0, #0
 8004110:	f04f 0100 	mov.w	r1, #0
 8004114:	00d9      	lsls	r1, r3, #3
 8004116:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800411a:	00d0      	lsls	r0, r2, #3
 800411c:	4602      	mov	r2, r0
 800411e:	460b      	mov	r3, r1
 8004120:	1911      	adds	r1, r2, r4
 8004122:	65b9      	str	r1, [r7, #88]	; 0x58
 8004124:	416b      	adcs	r3, r5
 8004126:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004128:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	461a      	mov	r2, r3
 800412e:	f04f 0300 	mov.w	r3, #0
 8004132:	1891      	adds	r1, r2, r2
 8004134:	62b9      	str	r1, [r7, #40]	; 0x28
 8004136:	415b      	adcs	r3, r3
 8004138:	62fb      	str	r3, [r7, #44]	; 0x2c
 800413a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800413e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004142:	f7fc f895 	bl	8000270 <__aeabi_uldivmod>
 8004146:	4602      	mov	r2, r0
 8004148:	460b      	mov	r3, r1
 800414a:	4b8c      	ldr	r3, [pc, #560]	; (800437c <UART_SetConfig+0x38c>)
 800414c:	fba3 1302 	umull	r1, r3, r3, r2
 8004150:	095b      	lsrs	r3, r3, #5
 8004152:	2164      	movs	r1, #100	; 0x64
 8004154:	fb01 f303 	mul.w	r3, r1, r3
 8004158:	1ad3      	subs	r3, r2, r3
 800415a:	00db      	lsls	r3, r3, #3
 800415c:	3332      	adds	r3, #50	; 0x32
 800415e:	4a87      	ldr	r2, [pc, #540]	; (800437c <UART_SetConfig+0x38c>)
 8004160:	fba2 2303 	umull	r2, r3, r2, r3
 8004164:	095b      	lsrs	r3, r3, #5
 8004166:	005b      	lsls	r3, r3, #1
 8004168:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800416c:	441e      	add	r6, r3
 800416e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004170:	4618      	mov	r0, r3
 8004172:	f04f 0100 	mov.w	r1, #0
 8004176:	4602      	mov	r2, r0
 8004178:	460b      	mov	r3, r1
 800417a:	1894      	adds	r4, r2, r2
 800417c:	623c      	str	r4, [r7, #32]
 800417e:	415b      	adcs	r3, r3
 8004180:	627b      	str	r3, [r7, #36]	; 0x24
 8004182:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004186:	1812      	adds	r2, r2, r0
 8004188:	eb41 0303 	adc.w	r3, r1, r3
 800418c:	f04f 0400 	mov.w	r4, #0
 8004190:	f04f 0500 	mov.w	r5, #0
 8004194:	00dd      	lsls	r5, r3, #3
 8004196:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800419a:	00d4      	lsls	r4, r2, #3
 800419c:	4622      	mov	r2, r4
 800419e:	462b      	mov	r3, r5
 80041a0:	1814      	adds	r4, r2, r0
 80041a2:	653c      	str	r4, [r7, #80]	; 0x50
 80041a4:	414b      	adcs	r3, r1
 80041a6:	657b      	str	r3, [r7, #84]	; 0x54
 80041a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	461a      	mov	r2, r3
 80041ae:	f04f 0300 	mov.w	r3, #0
 80041b2:	1891      	adds	r1, r2, r2
 80041b4:	61b9      	str	r1, [r7, #24]
 80041b6:	415b      	adcs	r3, r3
 80041b8:	61fb      	str	r3, [r7, #28]
 80041ba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041be:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80041c2:	f7fc f855 	bl	8000270 <__aeabi_uldivmod>
 80041c6:	4602      	mov	r2, r0
 80041c8:	460b      	mov	r3, r1
 80041ca:	4b6c      	ldr	r3, [pc, #432]	; (800437c <UART_SetConfig+0x38c>)
 80041cc:	fba3 1302 	umull	r1, r3, r3, r2
 80041d0:	095b      	lsrs	r3, r3, #5
 80041d2:	2164      	movs	r1, #100	; 0x64
 80041d4:	fb01 f303 	mul.w	r3, r1, r3
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	00db      	lsls	r3, r3, #3
 80041dc:	3332      	adds	r3, #50	; 0x32
 80041de:	4a67      	ldr	r2, [pc, #412]	; (800437c <UART_SetConfig+0x38c>)
 80041e0:	fba2 2303 	umull	r2, r3, r2, r3
 80041e4:	095b      	lsrs	r3, r3, #5
 80041e6:	f003 0207 	and.w	r2, r3, #7
 80041ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4432      	add	r2, r6
 80041f0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80041f2:	e0b9      	b.n	8004368 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80041f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041f6:	461c      	mov	r4, r3
 80041f8:	f04f 0500 	mov.w	r5, #0
 80041fc:	4622      	mov	r2, r4
 80041fe:	462b      	mov	r3, r5
 8004200:	1891      	adds	r1, r2, r2
 8004202:	6139      	str	r1, [r7, #16]
 8004204:	415b      	adcs	r3, r3
 8004206:	617b      	str	r3, [r7, #20]
 8004208:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800420c:	1912      	adds	r2, r2, r4
 800420e:	eb45 0303 	adc.w	r3, r5, r3
 8004212:	f04f 0000 	mov.w	r0, #0
 8004216:	f04f 0100 	mov.w	r1, #0
 800421a:	00d9      	lsls	r1, r3, #3
 800421c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004220:	00d0      	lsls	r0, r2, #3
 8004222:	4602      	mov	r2, r0
 8004224:	460b      	mov	r3, r1
 8004226:	eb12 0804 	adds.w	r8, r2, r4
 800422a:	eb43 0905 	adc.w	r9, r3, r5
 800422e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	4618      	mov	r0, r3
 8004234:	f04f 0100 	mov.w	r1, #0
 8004238:	f04f 0200 	mov.w	r2, #0
 800423c:	f04f 0300 	mov.w	r3, #0
 8004240:	008b      	lsls	r3, r1, #2
 8004242:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004246:	0082      	lsls	r2, r0, #2
 8004248:	4640      	mov	r0, r8
 800424a:	4649      	mov	r1, r9
 800424c:	f7fc f810 	bl	8000270 <__aeabi_uldivmod>
 8004250:	4602      	mov	r2, r0
 8004252:	460b      	mov	r3, r1
 8004254:	4b49      	ldr	r3, [pc, #292]	; (800437c <UART_SetConfig+0x38c>)
 8004256:	fba3 2302 	umull	r2, r3, r3, r2
 800425a:	095b      	lsrs	r3, r3, #5
 800425c:	011e      	lsls	r6, r3, #4
 800425e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004260:	4618      	mov	r0, r3
 8004262:	f04f 0100 	mov.w	r1, #0
 8004266:	4602      	mov	r2, r0
 8004268:	460b      	mov	r3, r1
 800426a:	1894      	adds	r4, r2, r2
 800426c:	60bc      	str	r4, [r7, #8]
 800426e:	415b      	adcs	r3, r3
 8004270:	60fb      	str	r3, [r7, #12]
 8004272:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004276:	1812      	adds	r2, r2, r0
 8004278:	eb41 0303 	adc.w	r3, r1, r3
 800427c:	f04f 0400 	mov.w	r4, #0
 8004280:	f04f 0500 	mov.w	r5, #0
 8004284:	00dd      	lsls	r5, r3, #3
 8004286:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800428a:	00d4      	lsls	r4, r2, #3
 800428c:	4622      	mov	r2, r4
 800428e:	462b      	mov	r3, r5
 8004290:	1814      	adds	r4, r2, r0
 8004292:	64bc      	str	r4, [r7, #72]	; 0x48
 8004294:	414b      	adcs	r3, r1
 8004296:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004298:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	4618      	mov	r0, r3
 800429e:	f04f 0100 	mov.w	r1, #0
 80042a2:	f04f 0200 	mov.w	r2, #0
 80042a6:	f04f 0300 	mov.w	r3, #0
 80042aa:	008b      	lsls	r3, r1, #2
 80042ac:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80042b0:	0082      	lsls	r2, r0, #2
 80042b2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80042b6:	f7fb ffdb 	bl	8000270 <__aeabi_uldivmod>
 80042ba:	4602      	mov	r2, r0
 80042bc:	460b      	mov	r3, r1
 80042be:	4b2f      	ldr	r3, [pc, #188]	; (800437c <UART_SetConfig+0x38c>)
 80042c0:	fba3 1302 	umull	r1, r3, r3, r2
 80042c4:	095b      	lsrs	r3, r3, #5
 80042c6:	2164      	movs	r1, #100	; 0x64
 80042c8:	fb01 f303 	mul.w	r3, r1, r3
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	011b      	lsls	r3, r3, #4
 80042d0:	3332      	adds	r3, #50	; 0x32
 80042d2:	4a2a      	ldr	r2, [pc, #168]	; (800437c <UART_SetConfig+0x38c>)
 80042d4:	fba2 2303 	umull	r2, r3, r2, r3
 80042d8:	095b      	lsrs	r3, r3, #5
 80042da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042de:	441e      	add	r6, r3
 80042e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042e2:	4618      	mov	r0, r3
 80042e4:	f04f 0100 	mov.w	r1, #0
 80042e8:	4602      	mov	r2, r0
 80042ea:	460b      	mov	r3, r1
 80042ec:	1894      	adds	r4, r2, r2
 80042ee:	603c      	str	r4, [r7, #0]
 80042f0:	415b      	adcs	r3, r3
 80042f2:	607b      	str	r3, [r7, #4]
 80042f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80042f8:	1812      	adds	r2, r2, r0
 80042fa:	eb41 0303 	adc.w	r3, r1, r3
 80042fe:	f04f 0400 	mov.w	r4, #0
 8004302:	f04f 0500 	mov.w	r5, #0
 8004306:	00dd      	lsls	r5, r3, #3
 8004308:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800430c:	00d4      	lsls	r4, r2, #3
 800430e:	4622      	mov	r2, r4
 8004310:	462b      	mov	r3, r5
 8004312:	eb12 0a00 	adds.w	sl, r2, r0
 8004316:	eb43 0b01 	adc.w	fp, r3, r1
 800431a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	4618      	mov	r0, r3
 8004320:	f04f 0100 	mov.w	r1, #0
 8004324:	f04f 0200 	mov.w	r2, #0
 8004328:	f04f 0300 	mov.w	r3, #0
 800432c:	008b      	lsls	r3, r1, #2
 800432e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004332:	0082      	lsls	r2, r0, #2
 8004334:	4650      	mov	r0, sl
 8004336:	4659      	mov	r1, fp
 8004338:	f7fb ff9a 	bl	8000270 <__aeabi_uldivmod>
 800433c:	4602      	mov	r2, r0
 800433e:	460b      	mov	r3, r1
 8004340:	4b0e      	ldr	r3, [pc, #56]	; (800437c <UART_SetConfig+0x38c>)
 8004342:	fba3 1302 	umull	r1, r3, r3, r2
 8004346:	095b      	lsrs	r3, r3, #5
 8004348:	2164      	movs	r1, #100	; 0x64
 800434a:	fb01 f303 	mul.w	r3, r1, r3
 800434e:	1ad3      	subs	r3, r2, r3
 8004350:	011b      	lsls	r3, r3, #4
 8004352:	3332      	adds	r3, #50	; 0x32
 8004354:	4a09      	ldr	r2, [pc, #36]	; (800437c <UART_SetConfig+0x38c>)
 8004356:	fba2 2303 	umull	r2, r3, r2, r3
 800435a:	095b      	lsrs	r3, r3, #5
 800435c:	f003 020f 	and.w	r2, r3, #15
 8004360:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4432      	add	r2, r6
 8004366:	609a      	str	r2, [r3, #8]
}
 8004368:	bf00      	nop
 800436a:	377c      	adds	r7, #124	; 0x7c
 800436c:	46bd      	mov	sp, r7
 800436e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004372:	bf00      	nop
 8004374:	40011000 	.word	0x40011000
 8004378:	40011400 	.word	0x40011400
 800437c:	51eb851f 	.word	0x51eb851f

08004380 <__NVIC_SetPriority>:
{
 8004380:	b480      	push	{r7}
 8004382:	b083      	sub	sp, #12
 8004384:	af00      	add	r7, sp, #0
 8004386:	4603      	mov	r3, r0
 8004388:	6039      	str	r1, [r7, #0]
 800438a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800438c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004390:	2b00      	cmp	r3, #0
 8004392:	db0a      	blt.n	80043aa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	b2da      	uxtb	r2, r3
 8004398:	490c      	ldr	r1, [pc, #48]	; (80043cc <__NVIC_SetPriority+0x4c>)
 800439a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800439e:	0112      	lsls	r2, r2, #4
 80043a0:	b2d2      	uxtb	r2, r2
 80043a2:	440b      	add	r3, r1
 80043a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80043a8:	e00a      	b.n	80043c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	b2da      	uxtb	r2, r3
 80043ae:	4908      	ldr	r1, [pc, #32]	; (80043d0 <__NVIC_SetPriority+0x50>)
 80043b0:	79fb      	ldrb	r3, [r7, #7]
 80043b2:	f003 030f 	and.w	r3, r3, #15
 80043b6:	3b04      	subs	r3, #4
 80043b8:	0112      	lsls	r2, r2, #4
 80043ba:	b2d2      	uxtb	r2, r2
 80043bc:	440b      	add	r3, r1
 80043be:	761a      	strb	r2, [r3, #24]
}
 80043c0:	bf00      	nop
 80043c2:	370c      	adds	r7, #12
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr
 80043cc:	e000e100 	.word	0xe000e100
 80043d0:	e000ed00 	.word	0xe000ed00

080043d4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80043d4:	b580      	push	{r7, lr}
 80043d6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80043d8:	2100      	movs	r1, #0
 80043da:	f06f 0004 	mvn.w	r0, #4
 80043de:	f7ff ffcf 	bl	8004380 <__NVIC_SetPriority>
#endif
}
 80043e2:	bf00      	nop
 80043e4:	bd80      	pop	{r7, pc}
	...

080043e8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80043e8:	b480      	push	{r7}
 80043ea:	b083      	sub	sp, #12
 80043ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80043ee:	f3ef 8305 	mrs	r3, IPSR
 80043f2:	603b      	str	r3, [r7, #0]
  return(result);
 80043f4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d003      	beq.n	8004402 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80043fa:	f06f 0305 	mvn.w	r3, #5
 80043fe:	607b      	str	r3, [r7, #4]
 8004400:	e00c      	b.n	800441c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004402:	4b0a      	ldr	r3, [pc, #40]	; (800442c <osKernelInitialize+0x44>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d105      	bne.n	8004416 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800440a:	4b08      	ldr	r3, [pc, #32]	; (800442c <osKernelInitialize+0x44>)
 800440c:	2201      	movs	r2, #1
 800440e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004410:	2300      	movs	r3, #0
 8004412:	607b      	str	r3, [r7, #4]
 8004414:	e002      	b.n	800441c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004416:	f04f 33ff 	mov.w	r3, #4294967295
 800441a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800441c:	687b      	ldr	r3, [r7, #4]
}
 800441e:	4618      	mov	r0, r3
 8004420:	370c      	adds	r7, #12
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr
 800442a:	bf00      	nop
 800442c:	20000094 	.word	0x20000094

08004430 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004430:	b580      	push	{r7, lr}
 8004432:	b082      	sub	sp, #8
 8004434:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004436:	f3ef 8305 	mrs	r3, IPSR
 800443a:	603b      	str	r3, [r7, #0]
  return(result);
 800443c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800443e:	2b00      	cmp	r3, #0
 8004440:	d003      	beq.n	800444a <osKernelStart+0x1a>
    stat = osErrorISR;
 8004442:	f06f 0305 	mvn.w	r3, #5
 8004446:	607b      	str	r3, [r7, #4]
 8004448:	e010      	b.n	800446c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800444a:	4b0b      	ldr	r3, [pc, #44]	; (8004478 <osKernelStart+0x48>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	2b01      	cmp	r3, #1
 8004450:	d109      	bne.n	8004466 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004452:	f7ff ffbf 	bl	80043d4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004456:	4b08      	ldr	r3, [pc, #32]	; (8004478 <osKernelStart+0x48>)
 8004458:	2202      	movs	r2, #2
 800445a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800445c:	f001 fc9e 	bl	8005d9c <vTaskStartScheduler>
      stat = osOK;
 8004460:	2300      	movs	r3, #0
 8004462:	607b      	str	r3, [r7, #4]
 8004464:	e002      	b.n	800446c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004466:	f04f 33ff 	mov.w	r3, #4294967295
 800446a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800446c:	687b      	ldr	r3, [r7, #4]
}
 800446e:	4618      	mov	r0, r3
 8004470:	3708      	adds	r7, #8
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
 8004476:	bf00      	nop
 8004478:	20000094 	.word	0x20000094

0800447c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800447c:	b580      	push	{r7, lr}
 800447e:	b08e      	sub	sp, #56	; 0x38
 8004480:	af04      	add	r7, sp, #16
 8004482:	60f8      	str	r0, [r7, #12]
 8004484:	60b9      	str	r1, [r7, #8]
 8004486:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004488:	2300      	movs	r3, #0
 800448a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800448c:	f3ef 8305 	mrs	r3, IPSR
 8004490:	617b      	str	r3, [r7, #20]
  return(result);
 8004492:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004494:	2b00      	cmp	r3, #0
 8004496:	d17e      	bne.n	8004596 <osThreadNew+0x11a>
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d07b      	beq.n	8004596 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800449e:	2380      	movs	r3, #128	; 0x80
 80044a0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80044a2:	2318      	movs	r3, #24
 80044a4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80044a6:	2300      	movs	r3, #0
 80044a8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80044aa:	f04f 33ff 	mov.w	r3, #4294967295
 80044ae:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d045      	beq.n	8004542 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d002      	beq.n	80044c4 <osThreadNew+0x48>
        name = attr->name;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	699b      	ldr	r3, [r3, #24]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d002      	beq.n	80044d2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	699b      	ldr	r3, [r3, #24]
 80044d0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80044d2:	69fb      	ldr	r3, [r7, #28]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d008      	beq.n	80044ea <osThreadNew+0x6e>
 80044d8:	69fb      	ldr	r3, [r7, #28]
 80044da:	2b38      	cmp	r3, #56	; 0x38
 80044dc:	d805      	bhi.n	80044ea <osThreadNew+0x6e>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	f003 0301 	and.w	r3, r3, #1
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d001      	beq.n	80044ee <osThreadNew+0x72>
        return (NULL);
 80044ea:	2300      	movs	r3, #0
 80044ec:	e054      	b.n	8004598 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	695b      	ldr	r3, [r3, #20]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d003      	beq.n	80044fe <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	695b      	ldr	r3, [r3, #20]
 80044fa:	089b      	lsrs	r3, r3, #2
 80044fc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d00e      	beq.n	8004524 <osThreadNew+0xa8>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	2b5b      	cmp	r3, #91	; 0x5b
 800450c:	d90a      	bls.n	8004524 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004512:	2b00      	cmp	r3, #0
 8004514:	d006      	beq.n	8004524 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	695b      	ldr	r3, [r3, #20]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d002      	beq.n	8004524 <osThreadNew+0xa8>
        mem = 1;
 800451e:	2301      	movs	r3, #1
 8004520:	61bb      	str	r3, [r7, #24]
 8004522:	e010      	b.n	8004546 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d10c      	bne.n	8004546 <osThreadNew+0xca>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d108      	bne.n	8004546 <osThreadNew+0xca>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	691b      	ldr	r3, [r3, #16]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d104      	bne.n	8004546 <osThreadNew+0xca>
          mem = 0;
 800453c:	2300      	movs	r3, #0
 800453e:	61bb      	str	r3, [r7, #24]
 8004540:	e001      	b.n	8004546 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004542:	2300      	movs	r3, #0
 8004544:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004546:	69bb      	ldr	r3, [r7, #24]
 8004548:	2b01      	cmp	r3, #1
 800454a:	d110      	bne.n	800456e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004554:	9202      	str	r2, [sp, #8]
 8004556:	9301      	str	r3, [sp, #4]
 8004558:	69fb      	ldr	r3, [r7, #28]
 800455a:	9300      	str	r3, [sp, #0]
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	6a3a      	ldr	r2, [r7, #32]
 8004560:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004562:	68f8      	ldr	r0, [r7, #12]
 8004564:	f001 fa44 	bl	80059f0 <xTaskCreateStatic>
 8004568:	4603      	mov	r3, r0
 800456a:	613b      	str	r3, [r7, #16]
 800456c:	e013      	b.n	8004596 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800456e:	69bb      	ldr	r3, [r7, #24]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d110      	bne.n	8004596 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004574:	6a3b      	ldr	r3, [r7, #32]
 8004576:	b29a      	uxth	r2, r3
 8004578:	f107 0310 	add.w	r3, r7, #16
 800457c:	9301      	str	r3, [sp, #4]
 800457e:	69fb      	ldr	r3, [r7, #28]
 8004580:	9300      	str	r3, [sp, #0]
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004586:	68f8      	ldr	r0, [r7, #12]
 8004588:	f001 fa8f 	bl	8005aaa <xTaskCreate>
 800458c:	4603      	mov	r3, r0
 800458e:	2b01      	cmp	r3, #1
 8004590:	d001      	beq.n	8004596 <osThreadNew+0x11a>
            hTask = NULL;
 8004592:	2300      	movs	r3, #0
 8004594:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004596:	693b      	ldr	r3, [r7, #16]
}
 8004598:	4618      	mov	r0, r3
 800459a:	3728      	adds	r7, #40	; 0x28
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}

080045a0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b084      	sub	sp, #16
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80045a8:	f3ef 8305 	mrs	r3, IPSR
 80045ac:	60bb      	str	r3, [r7, #8]
  return(result);
 80045ae:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d003      	beq.n	80045bc <osDelay+0x1c>
    stat = osErrorISR;
 80045b4:	f06f 0305 	mvn.w	r3, #5
 80045b8:	60fb      	str	r3, [r7, #12]
 80045ba:	e007      	b.n	80045cc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80045bc:	2300      	movs	r3, #0
 80045be:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d002      	beq.n	80045cc <osDelay+0x2c>
      vTaskDelay(ticks);
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	f001 fbb4 	bl	8005d34 <vTaskDelay>
    }
  }

  return (stat);
 80045cc:	68fb      	ldr	r3, [r7, #12]
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3710      	adds	r7, #16
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
	...

080045d8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80045d8:	b480      	push	{r7}
 80045da:	b085      	sub	sp, #20
 80045dc:	af00      	add	r7, sp, #0
 80045de:	60f8      	str	r0, [r7, #12]
 80045e0:	60b9      	str	r1, [r7, #8]
 80045e2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	4a07      	ldr	r2, [pc, #28]	; (8004604 <vApplicationGetIdleTaskMemory+0x2c>)
 80045e8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	4a06      	ldr	r2, [pc, #24]	; (8004608 <vApplicationGetIdleTaskMemory+0x30>)
 80045ee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2280      	movs	r2, #128	; 0x80
 80045f4:	601a      	str	r2, [r3, #0]
}
 80045f6:	bf00      	nop
 80045f8:	3714      	adds	r7, #20
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr
 8004602:	bf00      	nop
 8004604:	20000098 	.word	0x20000098
 8004608:	200000f4 	.word	0x200000f4

0800460c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800460c:	b480      	push	{r7}
 800460e:	b085      	sub	sp, #20
 8004610:	af00      	add	r7, sp, #0
 8004612:	60f8      	str	r0, [r7, #12]
 8004614:	60b9      	str	r1, [r7, #8]
 8004616:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	4a07      	ldr	r2, [pc, #28]	; (8004638 <vApplicationGetTimerTaskMemory+0x2c>)
 800461c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	4a06      	ldr	r2, [pc, #24]	; (800463c <vApplicationGetTimerTaskMemory+0x30>)
 8004622:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f44f 7280 	mov.w	r2, #256	; 0x100
 800462a:	601a      	str	r2, [r3, #0]
}
 800462c:	bf00      	nop
 800462e:	3714      	adds	r7, #20
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr
 8004638:	200002f4 	.word	0x200002f4
 800463c:	20000350 	.word	0x20000350

08004640 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b08a      	sub	sp, #40	; 0x28
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004648:	2300      	movs	r3, #0
 800464a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800464c:	f001 fc0c 	bl	8005e68 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004650:	4b5b      	ldr	r3, [pc, #364]	; (80047c0 <pvPortMalloc+0x180>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d101      	bne.n	800465c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004658:	f000 f920 	bl	800489c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800465c:	4b59      	ldr	r3, [pc, #356]	; (80047c4 <pvPortMalloc+0x184>)
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	4013      	ands	r3, r2
 8004664:	2b00      	cmp	r3, #0
 8004666:	f040 8093 	bne.w	8004790 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d01d      	beq.n	80046ac <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004670:	2208      	movs	r2, #8
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4413      	add	r3, r2
 8004676:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f003 0307 	and.w	r3, r3, #7
 800467e:	2b00      	cmp	r3, #0
 8004680:	d014      	beq.n	80046ac <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f023 0307 	bic.w	r3, r3, #7
 8004688:	3308      	adds	r3, #8
 800468a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f003 0307 	and.w	r3, r3, #7
 8004692:	2b00      	cmp	r3, #0
 8004694:	d00a      	beq.n	80046ac <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800469a:	f383 8811 	msr	BASEPRI, r3
 800469e:	f3bf 8f6f 	isb	sy
 80046a2:	f3bf 8f4f 	dsb	sy
 80046a6:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80046a8:	bf00      	nop
 80046aa:	e7fe      	b.n	80046aa <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d06e      	beq.n	8004790 <pvPortMalloc+0x150>
 80046b2:	4b45      	ldr	r3, [pc, #276]	; (80047c8 <pvPortMalloc+0x188>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d869      	bhi.n	8004790 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80046bc:	4b43      	ldr	r3, [pc, #268]	; (80047cc <pvPortMalloc+0x18c>)
 80046be:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80046c0:	4b42      	ldr	r3, [pc, #264]	; (80047cc <pvPortMalloc+0x18c>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80046c6:	e004      	b.n	80046d2 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80046c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ca:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80046cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80046d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	429a      	cmp	r2, r3
 80046da:	d903      	bls.n	80046e4 <pvPortMalloc+0xa4>
 80046dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d1f1      	bne.n	80046c8 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80046e4:	4b36      	ldr	r3, [pc, #216]	; (80047c0 <pvPortMalloc+0x180>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046ea:	429a      	cmp	r2, r3
 80046ec:	d050      	beq.n	8004790 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80046ee:	6a3b      	ldr	r3, [r7, #32]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	2208      	movs	r2, #8
 80046f4:	4413      	add	r3, r2
 80046f6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80046f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	6a3b      	ldr	r3, [r7, #32]
 80046fe:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004702:	685a      	ldr	r2, [r3, #4]
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	1ad2      	subs	r2, r2, r3
 8004708:	2308      	movs	r3, #8
 800470a:	005b      	lsls	r3, r3, #1
 800470c:	429a      	cmp	r2, r3
 800470e:	d91f      	bls.n	8004750 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004710:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4413      	add	r3, r2
 8004716:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004718:	69bb      	ldr	r3, [r7, #24]
 800471a:	f003 0307 	and.w	r3, r3, #7
 800471e:	2b00      	cmp	r3, #0
 8004720:	d00a      	beq.n	8004738 <pvPortMalloc+0xf8>
	__asm volatile
 8004722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004726:	f383 8811 	msr	BASEPRI, r3
 800472a:	f3bf 8f6f 	isb	sy
 800472e:	f3bf 8f4f 	dsb	sy
 8004732:	613b      	str	r3, [r7, #16]
}
 8004734:	bf00      	nop
 8004736:	e7fe      	b.n	8004736 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473a:	685a      	ldr	r2, [r3, #4]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	1ad2      	subs	r2, r2, r3
 8004740:	69bb      	ldr	r3, [r7, #24]
 8004742:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800474a:	69b8      	ldr	r0, [r7, #24]
 800474c:	f000 f908 	bl	8004960 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004750:	4b1d      	ldr	r3, [pc, #116]	; (80047c8 <pvPortMalloc+0x188>)
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	4a1b      	ldr	r2, [pc, #108]	; (80047c8 <pvPortMalloc+0x188>)
 800475c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800475e:	4b1a      	ldr	r3, [pc, #104]	; (80047c8 <pvPortMalloc+0x188>)
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	4b1b      	ldr	r3, [pc, #108]	; (80047d0 <pvPortMalloc+0x190>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	429a      	cmp	r2, r3
 8004768:	d203      	bcs.n	8004772 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800476a:	4b17      	ldr	r3, [pc, #92]	; (80047c8 <pvPortMalloc+0x188>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a18      	ldr	r2, [pc, #96]	; (80047d0 <pvPortMalloc+0x190>)
 8004770:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004774:	685a      	ldr	r2, [r3, #4]
 8004776:	4b13      	ldr	r3, [pc, #76]	; (80047c4 <pvPortMalloc+0x184>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	431a      	orrs	r2, r3
 800477c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004782:	2200      	movs	r2, #0
 8004784:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004786:	4b13      	ldr	r3, [pc, #76]	; (80047d4 <pvPortMalloc+0x194>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	3301      	adds	r3, #1
 800478c:	4a11      	ldr	r2, [pc, #68]	; (80047d4 <pvPortMalloc+0x194>)
 800478e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004790:	f001 fb78 	bl	8005e84 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004794:	69fb      	ldr	r3, [r7, #28]
 8004796:	f003 0307 	and.w	r3, r3, #7
 800479a:	2b00      	cmp	r3, #0
 800479c:	d00a      	beq.n	80047b4 <pvPortMalloc+0x174>
	__asm volatile
 800479e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a2:	f383 8811 	msr	BASEPRI, r3
 80047a6:	f3bf 8f6f 	isb	sy
 80047aa:	f3bf 8f4f 	dsb	sy
 80047ae:	60fb      	str	r3, [r7, #12]
}
 80047b0:	bf00      	nop
 80047b2:	e7fe      	b.n	80047b2 <pvPortMalloc+0x172>
	return pvReturn;
 80047b4:	69fb      	ldr	r3, [r7, #28]
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3728      	adds	r7, #40	; 0x28
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}
 80047be:	bf00      	nop
 80047c0:	20004358 	.word	0x20004358
 80047c4:	2000436c 	.word	0x2000436c
 80047c8:	2000435c 	.word	0x2000435c
 80047cc:	20004350 	.word	0x20004350
 80047d0:	20004360 	.word	0x20004360
 80047d4:	20004364 	.word	0x20004364

080047d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b086      	sub	sp, #24
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d04d      	beq.n	8004886 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80047ea:	2308      	movs	r3, #8
 80047ec:	425b      	negs	r3, r3
 80047ee:	697a      	ldr	r2, [r7, #20]
 80047f0:	4413      	add	r3, r2
 80047f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	685a      	ldr	r2, [r3, #4]
 80047fc:	4b24      	ldr	r3, [pc, #144]	; (8004890 <vPortFree+0xb8>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4013      	ands	r3, r2
 8004802:	2b00      	cmp	r3, #0
 8004804:	d10a      	bne.n	800481c <vPortFree+0x44>
	__asm volatile
 8004806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800480a:	f383 8811 	msr	BASEPRI, r3
 800480e:	f3bf 8f6f 	isb	sy
 8004812:	f3bf 8f4f 	dsb	sy
 8004816:	60fb      	str	r3, [r7, #12]
}
 8004818:	bf00      	nop
 800481a:	e7fe      	b.n	800481a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d00a      	beq.n	800483a <vPortFree+0x62>
	__asm volatile
 8004824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004828:	f383 8811 	msr	BASEPRI, r3
 800482c:	f3bf 8f6f 	isb	sy
 8004830:	f3bf 8f4f 	dsb	sy
 8004834:	60bb      	str	r3, [r7, #8]
}
 8004836:	bf00      	nop
 8004838:	e7fe      	b.n	8004838 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	685a      	ldr	r2, [r3, #4]
 800483e:	4b14      	ldr	r3, [pc, #80]	; (8004890 <vPortFree+0xb8>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4013      	ands	r3, r2
 8004844:	2b00      	cmp	r3, #0
 8004846:	d01e      	beq.n	8004886 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d11a      	bne.n	8004886 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	685a      	ldr	r2, [r3, #4]
 8004854:	4b0e      	ldr	r3, [pc, #56]	; (8004890 <vPortFree+0xb8>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	43db      	mvns	r3, r3
 800485a:	401a      	ands	r2, r3
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004860:	f001 fb02 	bl	8005e68 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	685a      	ldr	r2, [r3, #4]
 8004868:	4b0a      	ldr	r3, [pc, #40]	; (8004894 <vPortFree+0xbc>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4413      	add	r3, r2
 800486e:	4a09      	ldr	r2, [pc, #36]	; (8004894 <vPortFree+0xbc>)
 8004870:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004872:	6938      	ldr	r0, [r7, #16]
 8004874:	f000 f874 	bl	8004960 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004878:	4b07      	ldr	r3, [pc, #28]	; (8004898 <vPortFree+0xc0>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	3301      	adds	r3, #1
 800487e:	4a06      	ldr	r2, [pc, #24]	; (8004898 <vPortFree+0xc0>)
 8004880:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004882:	f001 faff 	bl	8005e84 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004886:	bf00      	nop
 8004888:	3718      	adds	r7, #24
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
 800488e:	bf00      	nop
 8004890:	2000436c 	.word	0x2000436c
 8004894:	2000435c 	.word	0x2000435c
 8004898:	20004368 	.word	0x20004368

0800489c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800489c:	b480      	push	{r7}
 800489e:	b085      	sub	sp, #20
 80048a0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80048a2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80048a6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80048a8:	4b27      	ldr	r3, [pc, #156]	; (8004948 <prvHeapInit+0xac>)
 80048aa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f003 0307 	and.w	r3, r3, #7
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d00c      	beq.n	80048d0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	3307      	adds	r3, #7
 80048ba:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f023 0307 	bic.w	r3, r3, #7
 80048c2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80048c4:	68ba      	ldr	r2, [r7, #8]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	1ad3      	subs	r3, r2, r3
 80048ca:	4a1f      	ldr	r2, [pc, #124]	; (8004948 <prvHeapInit+0xac>)
 80048cc:	4413      	add	r3, r2
 80048ce:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80048d4:	4a1d      	ldr	r2, [pc, #116]	; (800494c <prvHeapInit+0xb0>)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80048da:	4b1c      	ldr	r3, [pc, #112]	; (800494c <prvHeapInit+0xb0>)
 80048dc:	2200      	movs	r2, #0
 80048de:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	68ba      	ldr	r2, [r7, #8]
 80048e4:	4413      	add	r3, r2
 80048e6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80048e8:	2208      	movs	r2, #8
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	1a9b      	subs	r3, r3, r2
 80048ee:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f023 0307 	bic.w	r3, r3, #7
 80048f6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	4a15      	ldr	r2, [pc, #84]	; (8004950 <prvHeapInit+0xb4>)
 80048fc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80048fe:	4b14      	ldr	r3, [pc, #80]	; (8004950 <prvHeapInit+0xb4>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	2200      	movs	r2, #0
 8004904:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004906:	4b12      	ldr	r3, [pc, #72]	; (8004950 <prvHeapInit+0xb4>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	2200      	movs	r2, #0
 800490c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	68fa      	ldr	r2, [r7, #12]
 8004916:	1ad2      	subs	r2, r2, r3
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800491c:	4b0c      	ldr	r3, [pc, #48]	; (8004950 <prvHeapInit+0xb4>)
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	4a0a      	ldr	r2, [pc, #40]	; (8004954 <prvHeapInit+0xb8>)
 800492a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	4a09      	ldr	r2, [pc, #36]	; (8004958 <prvHeapInit+0xbc>)
 8004932:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004934:	4b09      	ldr	r3, [pc, #36]	; (800495c <prvHeapInit+0xc0>)
 8004936:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800493a:	601a      	str	r2, [r3, #0]
}
 800493c:	bf00      	nop
 800493e:	3714      	adds	r7, #20
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr
 8004948:	20000750 	.word	0x20000750
 800494c:	20004350 	.word	0x20004350
 8004950:	20004358 	.word	0x20004358
 8004954:	20004360 	.word	0x20004360
 8004958:	2000435c 	.word	0x2000435c
 800495c:	2000436c 	.word	0x2000436c

08004960 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004960:	b480      	push	{r7}
 8004962:	b085      	sub	sp, #20
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004968:	4b28      	ldr	r3, [pc, #160]	; (8004a0c <prvInsertBlockIntoFreeList+0xac>)
 800496a:	60fb      	str	r3, [r7, #12]
 800496c:	e002      	b.n	8004974 <prvInsertBlockIntoFreeList+0x14>
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	60fb      	str	r3, [r7, #12]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	429a      	cmp	r2, r3
 800497c:	d8f7      	bhi.n	800496e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	68ba      	ldr	r2, [r7, #8]
 8004988:	4413      	add	r3, r2
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	429a      	cmp	r2, r3
 800498e:	d108      	bne.n	80049a2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	685a      	ldr	r2, [r3, #4]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	441a      	add	r2, r3
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	68ba      	ldr	r2, [r7, #8]
 80049ac:	441a      	add	r2, r3
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d118      	bne.n	80049e8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	4b15      	ldr	r3, [pc, #84]	; (8004a10 <prvInsertBlockIntoFreeList+0xb0>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	429a      	cmp	r2, r3
 80049c0:	d00d      	beq.n	80049de <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	685a      	ldr	r2, [r3, #4]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	441a      	add	r2, r3
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	601a      	str	r2, [r3, #0]
 80049dc:	e008      	b.n	80049f0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80049de:	4b0c      	ldr	r3, [pc, #48]	; (8004a10 <prvInsertBlockIntoFreeList+0xb0>)
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	601a      	str	r2, [r3, #0]
 80049e6:	e003      	b.n	80049f0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80049f0:	68fa      	ldr	r2, [r7, #12]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d002      	beq.n	80049fe <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	687a      	ldr	r2, [r7, #4]
 80049fc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80049fe:	bf00      	nop
 8004a00:	3714      	adds	r7, #20
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr
 8004a0a:	bf00      	nop
 8004a0c:	20004350 	.word	0x20004350
 8004a10:	20004358 	.word	0x20004358

08004a14 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f103 0208 	add.w	r2, r3, #8
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f04f 32ff 	mov.w	r2, #4294967295
 8004a2c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f103 0208 	add.w	r2, r3, #8
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	f103 0208 	add.w	r2, r3, #8
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2200      	movs	r2, #0
 8004a46:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004a48:	bf00      	nop
 8004a4a:	370c      	adds	r7, #12
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr

08004a54 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004a54:	b480      	push	{r7}
 8004a56:	b083      	sub	sp, #12
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004a62:	bf00      	nop
 8004a64:	370c      	adds	r7, #12
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr

08004a6e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004a6e:	b480      	push	{r7}
 8004a70:	b085      	sub	sp, #20
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	6078      	str	r0, [r7, #4]
 8004a76:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	68fa      	ldr	r2, [r7, #12]
 8004a82:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	689a      	ldr	r2, [r3, #8]
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	683a      	ldr	r2, [r7, #0]
 8004a92:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	683a      	ldr	r2, [r7, #0]
 8004a98:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	687a      	ldr	r2, [r7, #4]
 8004a9e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	1c5a      	adds	r2, r3, #1
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	601a      	str	r2, [r3, #0]
}
 8004aaa:	bf00      	nop
 8004aac:	3714      	adds	r7, #20
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr

08004ab6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004ab6:	b480      	push	{r7}
 8004ab8:	b085      	sub	sp, #20
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	6078      	str	r0, [r7, #4]
 8004abe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004acc:	d103      	bne.n	8004ad6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	691b      	ldr	r3, [r3, #16]
 8004ad2:	60fb      	str	r3, [r7, #12]
 8004ad4:	e00c      	b.n	8004af0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	3308      	adds	r3, #8
 8004ada:	60fb      	str	r3, [r7, #12]
 8004adc:	e002      	b.n	8004ae4 <vListInsert+0x2e>
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	60fb      	str	r3, [r7, #12]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	68ba      	ldr	r2, [r7, #8]
 8004aec:	429a      	cmp	r2, r3
 8004aee:	d2f6      	bcs.n	8004ade <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	685a      	ldr	r2, [r3, #4]
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	683a      	ldr	r2, [r7, #0]
 8004afe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	68fa      	ldr	r2, [r7, #12]
 8004b04:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	683a      	ldr	r2, [r7, #0]
 8004b0a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	1c5a      	adds	r2, r3, #1
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	601a      	str	r2, [r3, #0]
}
 8004b1c:	bf00      	nop
 8004b1e:	3714      	adds	r7, #20
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr

08004b28 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b085      	sub	sp, #20
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	691b      	ldr	r3, [r3, #16]
 8004b34:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	6892      	ldr	r2, [r2, #8]
 8004b3e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	687a      	ldr	r2, [r7, #4]
 8004b46:	6852      	ldr	r2, [r2, #4]
 8004b48:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d103      	bne.n	8004b5c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	689a      	ldr	r2, [r3, #8]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	1e5a      	subs	r2, r3, #1
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3714      	adds	r7, #20
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr

08004b7c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b085      	sub	sp, #20
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	60f8      	str	r0, [r7, #12]
 8004b84:	60b9      	str	r1, [r7, #8]
 8004b86:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	3b04      	subs	r3, #4
 8004b8c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004b94:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	3b04      	subs	r3, #4
 8004b9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	f023 0201 	bic.w	r2, r3, #1
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	3b04      	subs	r3, #4
 8004baa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004bac:	4a0c      	ldr	r2, [pc, #48]	; (8004be0 <pxPortInitialiseStack+0x64>)
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	3b14      	subs	r3, #20
 8004bb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	3b04      	subs	r3, #4
 8004bc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f06f 0202 	mvn.w	r2, #2
 8004bca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	3b20      	subs	r3, #32
 8004bd0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3714      	adds	r7, #20
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bde:	4770      	bx	lr
 8004be0:	08004be5 	.word	0x08004be5

08004be4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004be4:	b480      	push	{r7}
 8004be6:	b085      	sub	sp, #20
 8004be8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004bea:	2300      	movs	r3, #0
 8004bec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004bee:	4b12      	ldr	r3, [pc, #72]	; (8004c38 <prvTaskExitError+0x54>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bf6:	d00a      	beq.n	8004c0e <prvTaskExitError+0x2a>
	__asm volatile
 8004bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bfc:	f383 8811 	msr	BASEPRI, r3
 8004c00:	f3bf 8f6f 	isb	sy
 8004c04:	f3bf 8f4f 	dsb	sy
 8004c08:	60fb      	str	r3, [r7, #12]
}
 8004c0a:	bf00      	nop
 8004c0c:	e7fe      	b.n	8004c0c <prvTaskExitError+0x28>
	__asm volatile
 8004c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c12:	f383 8811 	msr	BASEPRI, r3
 8004c16:	f3bf 8f6f 	isb	sy
 8004c1a:	f3bf 8f4f 	dsb	sy
 8004c1e:	60bb      	str	r3, [r7, #8]
}
 8004c20:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004c22:	bf00      	nop
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d0fc      	beq.n	8004c24 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004c2a:	bf00      	nop
 8004c2c:	bf00      	nop
 8004c2e:	3714      	adds	r7, #20
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr
 8004c38:	2000000c 	.word	0x2000000c
 8004c3c:	00000000 	.word	0x00000000

08004c40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004c40:	4b07      	ldr	r3, [pc, #28]	; (8004c60 <pxCurrentTCBConst2>)
 8004c42:	6819      	ldr	r1, [r3, #0]
 8004c44:	6808      	ldr	r0, [r1, #0]
 8004c46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c4a:	f380 8809 	msr	PSP, r0
 8004c4e:	f3bf 8f6f 	isb	sy
 8004c52:	f04f 0000 	mov.w	r0, #0
 8004c56:	f380 8811 	msr	BASEPRI, r0
 8004c5a:	4770      	bx	lr
 8004c5c:	f3af 8000 	nop.w

08004c60 <pxCurrentTCBConst2>:
 8004c60:	20004378 	.word	0x20004378
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004c64:	bf00      	nop
 8004c66:	bf00      	nop

08004c68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004c68:	4808      	ldr	r0, [pc, #32]	; (8004c8c <prvPortStartFirstTask+0x24>)
 8004c6a:	6800      	ldr	r0, [r0, #0]
 8004c6c:	6800      	ldr	r0, [r0, #0]
 8004c6e:	f380 8808 	msr	MSP, r0
 8004c72:	f04f 0000 	mov.w	r0, #0
 8004c76:	f380 8814 	msr	CONTROL, r0
 8004c7a:	b662      	cpsie	i
 8004c7c:	b661      	cpsie	f
 8004c7e:	f3bf 8f4f 	dsb	sy
 8004c82:	f3bf 8f6f 	isb	sy
 8004c86:	df00      	svc	0
 8004c88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004c8a:	bf00      	nop
 8004c8c:	e000ed08 	.word	0xe000ed08

08004c90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b086      	sub	sp, #24
 8004c94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004c96:	4b46      	ldr	r3, [pc, #280]	; (8004db0 <xPortStartScheduler+0x120>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a46      	ldr	r2, [pc, #280]	; (8004db4 <xPortStartScheduler+0x124>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d10a      	bne.n	8004cb6 <xPortStartScheduler+0x26>
	__asm volatile
 8004ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ca4:	f383 8811 	msr	BASEPRI, r3
 8004ca8:	f3bf 8f6f 	isb	sy
 8004cac:	f3bf 8f4f 	dsb	sy
 8004cb0:	613b      	str	r3, [r7, #16]
}
 8004cb2:	bf00      	nop
 8004cb4:	e7fe      	b.n	8004cb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004cb6:	4b3e      	ldr	r3, [pc, #248]	; (8004db0 <xPortStartScheduler+0x120>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a3f      	ldr	r2, [pc, #252]	; (8004db8 <xPortStartScheduler+0x128>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d10a      	bne.n	8004cd6 <xPortStartScheduler+0x46>
	__asm volatile
 8004cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc4:	f383 8811 	msr	BASEPRI, r3
 8004cc8:	f3bf 8f6f 	isb	sy
 8004ccc:	f3bf 8f4f 	dsb	sy
 8004cd0:	60fb      	str	r3, [r7, #12]
}
 8004cd2:	bf00      	nop
 8004cd4:	e7fe      	b.n	8004cd4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004cd6:	4b39      	ldr	r3, [pc, #228]	; (8004dbc <xPortStartScheduler+0x12c>)
 8004cd8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	781b      	ldrb	r3, [r3, #0]
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	22ff      	movs	r2, #255	; 0xff
 8004ce6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004cf0:	78fb      	ldrb	r3, [r7, #3]
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004cf8:	b2da      	uxtb	r2, r3
 8004cfa:	4b31      	ldr	r3, [pc, #196]	; (8004dc0 <xPortStartScheduler+0x130>)
 8004cfc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004cfe:	4b31      	ldr	r3, [pc, #196]	; (8004dc4 <xPortStartScheduler+0x134>)
 8004d00:	2207      	movs	r2, #7
 8004d02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004d04:	e009      	b.n	8004d1a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004d06:	4b2f      	ldr	r3, [pc, #188]	; (8004dc4 <xPortStartScheduler+0x134>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	3b01      	subs	r3, #1
 8004d0c:	4a2d      	ldr	r2, [pc, #180]	; (8004dc4 <xPortStartScheduler+0x134>)
 8004d0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004d10:	78fb      	ldrb	r3, [r7, #3]
 8004d12:	b2db      	uxtb	r3, r3
 8004d14:	005b      	lsls	r3, r3, #1
 8004d16:	b2db      	uxtb	r3, r3
 8004d18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004d1a:	78fb      	ldrb	r3, [r7, #3]
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d22:	2b80      	cmp	r3, #128	; 0x80
 8004d24:	d0ef      	beq.n	8004d06 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004d26:	4b27      	ldr	r3, [pc, #156]	; (8004dc4 <xPortStartScheduler+0x134>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f1c3 0307 	rsb	r3, r3, #7
 8004d2e:	2b04      	cmp	r3, #4
 8004d30:	d00a      	beq.n	8004d48 <xPortStartScheduler+0xb8>
	__asm volatile
 8004d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d36:	f383 8811 	msr	BASEPRI, r3
 8004d3a:	f3bf 8f6f 	isb	sy
 8004d3e:	f3bf 8f4f 	dsb	sy
 8004d42:	60bb      	str	r3, [r7, #8]
}
 8004d44:	bf00      	nop
 8004d46:	e7fe      	b.n	8004d46 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004d48:	4b1e      	ldr	r3, [pc, #120]	; (8004dc4 <xPortStartScheduler+0x134>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	021b      	lsls	r3, r3, #8
 8004d4e:	4a1d      	ldr	r2, [pc, #116]	; (8004dc4 <xPortStartScheduler+0x134>)
 8004d50:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004d52:	4b1c      	ldr	r3, [pc, #112]	; (8004dc4 <xPortStartScheduler+0x134>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004d5a:	4a1a      	ldr	r2, [pc, #104]	; (8004dc4 <xPortStartScheduler+0x134>)
 8004d5c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	b2da      	uxtb	r2, r3
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004d66:	4b18      	ldr	r3, [pc, #96]	; (8004dc8 <xPortStartScheduler+0x138>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a17      	ldr	r2, [pc, #92]	; (8004dc8 <xPortStartScheduler+0x138>)
 8004d6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004d70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004d72:	4b15      	ldr	r3, [pc, #84]	; (8004dc8 <xPortStartScheduler+0x138>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a14      	ldr	r2, [pc, #80]	; (8004dc8 <xPortStartScheduler+0x138>)
 8004d78:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004d7c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004d7e:	f000 f8dd 	bl	8004f3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004d82:	4b12      	ldr	r3, [pc, #72]	; (8004dcc <xPortStartScheduler+0x13c>)
 8004d84:	2200      	movs	r2, #0
 8004d86:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004d88:	f000 f8fc 	bl	8004f84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004d8c:	4b10      	ldr	r3, [pc, #64]	; (8004dd0 <xPortStartScheduler+0x140>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a0f      	ldr	r2, [pc, #60]	; (8004dd0 <xPortStartScheduler+0x140>)
 8004d92:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004d96:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004d98:	f7ff ff66 	bl	8004c68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004d9c:	f001 f9da 	bl	8006154 <vTaskSwitchContext>
	prvTaskExitError();
 8004da0:	f7ff ff20 	bl	8004be4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004da4:	2300      	movs	r3, #0
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3718      	adds	r7, #24
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}
 8004dae:	bf00      	nop
 8004db0:	e000ed00 	.word	0xe000ed00
 8004db4:	410fc271 	.word	0x410fc271
 8004db8:	410fc270 	.word	0x410fc270
 8004dbc:	e000e400 	.word	0xe000e400
 8004dc0:	20004370 	.word	0x20004370
 8004dc4:	20004374 	.word	0x20004374
 8004dc8:	e000ed20 	.word	0xe000ed20
 8004dcc:	2000000c 	.word	0x2000000c
 8004dd0:	e000ef34 	.word	0xe000ef34

08004dd4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b083      	sub	sp, #12
 8004dd8:	af00      	add	r7, sp, #0
	__asm volatile
 8004dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dde:	f383 8811 	msr	BASEPRI, r3
 8004de2:	f3bf 8f6f 	isb	sy
 8004de6:	f3bf 8f4f 	dsb	sy
 8004dea:	607b      	str	r3, [r7, #4]
}
 8004dec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004dee:	4b0f      	ldr	r3, [pc, #60]	; (8004e2c <vPortEnterCritical+0x58>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	3301      	adds	r3, #1
 8004df4:	4a0d      	ldr	r2, [pc, #52]	; (8004e2c <vPortEnterCritical+0x58>)
 8004df6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004df8:	4b0c      	ldr	r3, [pc, #48]	; (8004e2c <vPortEnterCritical+0x58>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d10f      	bne.n	8004e20 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004e00:	4b0b      	ldr	r3, [pc, #44]	; (8004e30 <vPortEnterCritical+0x5c>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d00a      	beq.n	8004e20 <vPortEnterCritical+0x4c>
	__asm volatile
 8004e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e0e:	f383 8811 	msr	BASEPRI, r3
 8004e12:	f3bf 8f6f 	isb	sy
 8004e16:	f3bf 8f4f 	dsb	sy
 8004e1a:	603b      	str	r3, [r7, #0]
}
 8004e1c:	bf00      	nop
 8004e1e:	e7fe      	b.n	8004e1e <vPortEnterCritical+0x4a>
	}
}
 8004e20:	bf00      	nop
 8004e22:	370c      	adds	r7, #12
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr
 8004e2c:	2000000c 	.word	0x2000000c
 8004e30:	e000ed04 	.word	0xe000ed04

08004e34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004e34:	b480      	push	{r7}
 8004e36:	b083      	sub	sp, #12
 8004e38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004e3a:	4b12      	ldr	r3, [pc, #72]	; (8004e84 <vPortExitCritical+0x50>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d10a      	bne.n	8004e58 <vPortExitCritical+0x24>
	__asm volatile
 8004e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e46:	f383 8811 	msr	BASEPRI, r3
 8004e4a:	f3bf 8f6f 	isb	sy
 8004e4e:	f3bf 8f4f 	dsb	sy
 8004e52:	607b      	str	r3, [r7, #4]
}
 8004e54:	bf00      	nop
 8004e56:	e7fe      	b.n	8004e56 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004e58:	4b0a      	ldr	r3, [pc, #40]	; (8004e84 <vPortExitCritical+0x50>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	3b01      	subs	r3, #1
 8004e5e:	4a09      	ldr	r2, [pc, #36]	; (8004e84 <vPortExitCritical+0x50>)
 8004e60:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004e62:	4b08      	ldr	r3, [pc, #32]	; (8004e84 <vPortExitCritical+0x50>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d105      	bne.n	8004e76 <vPortExitCritical+0x42>
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004e74:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004e76:	bf00      	nop
 8004e78:	370c      	adds	r7, #12
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr
 8004e82:	bf00      	nop
 8004e84:	2000000c 	.word	0x2000000c
	...

08004e90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004e90:	f3ef 8009 	mrs	r0, PSP
 8004e94:	f3bf 8f6f 	isb	sy
 8004e98:	4b15      	ldr	r3, [pc, #84]	; (8004ef0 <pxCurrentTCBConst>)
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	f01e 0f10 	tst.w	lr, #16
 8004ea0:	bf08      	it	eq
 8004ea2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004ea6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004eaa:	6010      	str	r0, [r2, #0]
 8004eac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004eb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004eb4:	f380 8811 	msr	BASEPRI, r0
 8004eb8:	f3bf 8f4f 	dsb	sy
 8004ebc:	f3bf 8f6f 	isb	sy
 8004ec0:	f001 f948 	bl	8006154 <vTaskSwitchContext>
 8004ec4:	f04f 0000 	mov.w	r0, #0
 8004ec8:	f380 8811 	msr	BASEPRI, r0
 8004ecc:	bc09      	pop	{r0, r3}
 8004ece:	6819      	ldr	r1, [r3, #0]
 8004ed0:	6808      	ldr	r0, [r1, #0]
 8004ed2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ed6:	f01e 0f10 	tst.w	lr, #16
 8004eda:	bf08      	it	eq
 8004edc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004ee0:	f380 8809 	msr	PSP, r0
 8004ee4:	f3bf 8f6f 	isb	sy
 8004ee8:	4770      	bx	lr
 8004eea:	bf00      	nop
 8004eec:	f3af 8000 	nop.w

08004ef0 <pxCurrentTCBConst>:
 8004ef0:	20004378 	.word	0x20004378
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004ef4:	bf00      	nop
 8004ef6:	bf00      	nop

08004ef8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b082      	sub	sp, #8
 8004efc:	af00      	add	r7, sp, #0
	__asm volatile
 8004efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f02:	f383 8811 	msr	BASEPRI, r3
 8004f06:	f3bf 8f6f 	isb	sy
 8004f0a:	f3bf 8f4f 	dsb	sy
 8004f0e:	607b      	str	r3, [r7, #4]
}
 8004f10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004f12:	f001 f865 	bl	8005fe0 <xTaskIncrementTick>
 8004f16:	4603      	mov	r3, r0
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d003      	beq.n	8004f24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004f1c:	4b06      	ldr	r3, [pc, #24]	; (8004f38 <xPortSysTickHandler+0x40>)
 8004f1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f22:	601a      	str	r2, [r3, #0]
 8004f24:	2300      	movs	r3, #0
 8004f26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	f383 8811 	msr	BASEPRI, r3
}
 8004f2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004f30:	bf00      	nop
 8004f32:	3708      	adds	r7, #8
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}
 8004f38:	e000ed04 	.word	0xe000ed04

08004f3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004f40:	4b0b      	ldr	r3, [pc, #44]	; (8004f70 <vPortSetupTimerInterrupt+0x34>)
 8004f42:	2200      	movs	r2, #0
 8004f44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004f46:	4b0b      	ldr	r3, [pc, #44]	; (8004f74 <vPortSetupTimerInterrupt+0x38>)
 8004f48:	2200      	movs	r2, #0
 8004f4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004f4c:	4b0a      	ldr	r3, [pc, #40]	; (8004f78 <vPortSetupTimerInterrupt+0x3c>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a0a      	ldr	r2, [pc, #40]	; (8004f7c <vPortSetupTimerInterrupt+0x40>)
 8004f52:	fba2 2303 	umull	r2, r3, r2, r3
 8004f56:	099b      	lsrs	r3, r3, #6
 8004f58:	4a09      	ldr	r2, [pc, #36]	; (8004f80 <vPortSetupTimerInterrupt+0x44>)
 8004f5a:	3b01      	subs	r3, #1
 8004f5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004f5e:	4b04      	ldr	r3, [pc, #16]	; (8004f70 <vPortSetupTimerInterrupt+0x34>)
 8004f60:	2207      	movs	r2, #7
 8004f62:	601a      	str	r2, [r3, #0]
}
 8004f64:	bf00      	nop
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr
 8004f6e:	bf00      	nop
 8004f70:	e000e010 	.word	0xe000e010
 8004f74:	e000e018 	.word	0xe000e018
 8004f78:	20000000 	.word	0x20000000
 8004f7c:	10624dd3 	.word	0x10624dd3
 8004f80:	e000e014 	.word	0xe000e014

08004f84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004f84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004f94 <vPortEnableVFP+0x10>
 8004f88:	6801      	ldr	r1, [r0, #0]
 8004f8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004f8e:	6001      	str	r1, [r0, #0]
 8004f90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004f92:	bf00      	nop
 8004f94:	e000ed88 	.word	0xe000ed88

08004f98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004f98:	b480      	push	{r7}
 8004f9a:	b085      	sub	sp, #20
 8004f9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004f9e:	f3ef 8305 	mrs	r3, IPSR
 8004fa2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2b0f      	cmp	r3, #15
 8004fa8:	d914      	bls.n	8004fd4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004faa:	4a17      	ldr	r2, [pc, #92]	; (8005008 <vPortValidateInterruptPriority+0x70>)
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	4413      	add	r3, r2
 8004fb0:	781b      	ldrb	r3, [r3, #0]
 8004fb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004fb4:	4b15      	ldr	r3, [pc, #84]	; (800500c <vPortValidateInterruptPriority+0x74>)
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	7afa      	ldrb	r2, [r7, #11]
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d20a      	bcs.n	8004fd4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fc2:	f383 8811 	msr	BASEPRI, r3
 8004fc6:	f3bf 8f6f 	isb	sy
 8004fca:	f3bf 8f4f 	dsb	sy
 8004fce:	607b      	str	r3, [r7, #4]
}
 8004fd0:	bf00      	nop
 8004fd2:	e7fe      	b.n	8004fd2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004fd4:	4b0e      	ldr	r3, [pc, #56]	; (8005010 <vPortValidateInterruptPriority+0x78>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004fdc:	4b0d      	ldr	r3, [pc, #52]	; (8005014 <vPortValidateInterruptPriority+0x7c>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d90a      	bls.n	8004ffa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe8:	f383 8811 	msr	BASEPRI, r3
 8004fec:	f3bf 8f6f 	isb	sy
 8004ff0:	f3bf 8f4f 	dsb	sy
 8004ff4:	603b      	str	r3, [r7, #0]
}
 8004ff6:	bf00      	nop
 8004ff8:	e7fe      	b.n	8004ff8 <vPortValidateInterruptPriority+0x60>
	}
 8004ffa:	bf00      	nop
 8004ffc:	3714      	adds	r7, #20
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr
 8005006:	bf00      	nop
 8005008:	e000e3f0 	.word	0xe000e3f0
 800500c:	20004370 	.word	0x20004370
 8005010:	e000ed0c 	.word	0xe000ed0c
 8005014:	20004374 	.word	0x20004374

08005018 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b084      	sub	sp, #16
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d10a      	bne.n	8005042 <xQueueGenericReset+0x2a>
	__asm volatile
 800502c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005030:	f383 8811 	msr	BASEPRI, r3
 8005034:	f3bf 8f6f 	isb	sy
 8005038:	f3bf 8f4f 	dsb	sy
 800503c:	60bb      	str	r3, [r7, #8]
}
 800503e:	bf00      	nop
 8005040:	e7fe      	b.n	8005040 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005042:	f7ff fec7 	bl	8004dd4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800504e:	68f9      	ldr	r1, [r7, #12]
 8005050:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005052:	fb01 f303 	mul.w	r3, r1, r3
 8005056:	441a      	add	r2, r3
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2200      	movs	r2, #0
 8005060:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005072:	3b01      	subs	r3, #1
 8005074:	68f9      	ldr	r1, [r7, #12]
 8005076:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005078:	fb01 f303 	mul.w	r3, r1, r3
 800507c:	441a      	add	r2, r3
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	22ff      	movs	r2, #255	; 0xff
 8005086:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	22ff      	movs	r2, #255	; 0xff
 800508e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d114      	bne.n	80050c2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	691b      	ldr	r3, [r3, #16]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d01a      	beq.n	80050d6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	3310      	adds	r3, #16
 80050a4:	4618      	mov	r0, r3
 80050a6:	f001 f903 	bl	80062b0 <xTaskRemoveFromEventList>
 80050aa:	4603      	mov	r3, r0
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d012      	beq.n	80050d6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80050b0:	4b0c      	ldr	r3, [pc, #48]	; (80050e4 <xQueueGenericReset+0xcc>)
 80050b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050b6:	601a      	str	r2, [r3, #0]
 80050b8:	f3bf 8f4f 	dsb	sy
 80050bc:	f3bf 8f6f 	isb	sy
 80050c0:	e009      	b.n	80050d6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	3310      	adds	r3, #16
 80050c6:	4618      	mov	r0, r3
 80050c8:	f7ff fca4 	bl	8004a14 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	3324      	adds	r3, #36	; 0x24
 80050d0:	4618      	mov	r0, r3
 80050d2:	f7ff fc9f 	bl	8004a14 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80050d6:	f7ff fead 	bl	8004e34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80050da:	2301      	movs	r3, #1
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3710      	adds	r7, #16
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}
 80050e4:	e000ed04 	.word	0xe000ed04

080050e8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b08e      	sub	sp, #56	; 0x38
 80050ec:	af02      	add	r7, sp, #8
 80050ee:	60f8      	str	r0, [r7, #12]
 80050f0:	60b9      	str	r1, [r7, #8]
 80050f2:	607a      	str	r2, [r7, #4]
 80050f4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d10a      	bne.n	8005112 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80050fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005100:	f383 8811 	msr	BASEPRI, r3
 8005104:	f3bf 8f6f 	isb	sy
 8005108:	f3bf 8f4f 	dsb	sy
 800510c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800510e:	bf00      	nop
 8005110:	e7fe      	b.n	8005110 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d10a      	bne.n	800512e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800511c:	f383 8811 	msr	BASEPRI, r3
 8005120:	f3bf 8f6f 	isb	sy
 8005124:	f3bf 8f4f 	dsb	sy
 8005128:	627b      	str	r3, [r7, #36]	; 0x24
}
 800512a:	bf00      	nop
 800512c:	e7fe      	b.n	800512c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d002      	beq.n	800513a <xQueueGenericCreateStatic+0x52>
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d001      	beq.n	800513e <xQueueGenericCreateStatic+0x56>
 800513a:	2301      	movs	r3, #1
 800513c:	e000      	b.n	8005140 <xQueueGenericCreateStatic+0x58>
 800513e:	2300      	movs	r3, #0
 8005140:	2b00      	cmp	r3, #0
 8005142:	d10a      	bne.n	800515a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005148:	f383 8811 	msr	BASEPRI, r3
 800514c:	f3bf 8f6f 	isb	sy
 8005150:	f3bf 8f4f 	dsb	sy
 8005154:	623b      	str	r3, [r7, #32]
}
 8005156:	bf00      	nop
 8005158:	e7fe      	b.n	8005158 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d102      	bne.n	8005166 <xQueueGenericCreateStatic+0x7e>
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d101      	bne.n	800516a <xQueueGenericCreateStatic+0x82>
 8005166:	2301      	movs	r3, #1
 8005168:	e000      	b.n	800516c <xQueueGenericCreateStatic+0x84>
 800516a:	2300      	movs	r3, #0
 800516c:	2b00      	cmp	r3, #0
 800516e:	d10a      	bne.n	8005186 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005174:	f383 8811 	msr	BASEPRI, r3
 8005178:	f3bf 8f6f 	isb	sy
 800517c:	f3bf 8f4f 	dsb	sy
 8005180:	61fb      	str	r3, [r7, #28]
}
 8005182:	bf00      	nop
 8005184:	e7fe      	b.n	8005184 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005186:	2350      	movs	r3, #80	; 0x50
 8005188:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	2b50      	cmp	r3, #80	; 0x50
 800518e:	d00a      	beq.n	80051a6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005194:	f383 8811 	msr	BASEPRI, r3
 8005198:	f3bf 8f6f 	isb	sy
 800519c:	f3bf 8f4f 	dsb	sy
 80051a0:	61bb      	str	r3, [r7, #24]
}
 80051a2:	bf00      	nop
 80051a4:	e7fe      	b.n	80051a4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80051a6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80051ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d00d      	beq.n	80051ce <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80051b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051b4:	2201      	movs	r2, #1
 80051b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80051ba:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80051be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051c0:	9300      	str	r3, [sp, #0]
 80051c2:	4613      	mov	r3, r2
 80051c4:	687a      	ldr	r2, [r7, #4]
 80051c6:	68b9      	ldr	r1, [r7, #8]
 80051c8:	68f8      	ldr	r0, [r7, #12]
 80051ca:	f000 f805 	bl	80051d8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80051ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3730      	adds	r7, #48	; 0x30
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}

080051d8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b084      	sub	sp, #16
 80051dc:	af00      	add	r7, sp, #0
 80051de:	60f8      	str	r0, [r7, #12]
 80051e0:	60b9      	str	r1, [r7, #8]
 80051e2:	607a      	str	r2, [r7, #4]
 80051e4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d103      	bne.n	80051f4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80051ec:	69bb      	ldr	r3, [r7, #24]
 80051ee:	69ba      	ldr	r2, [r7, #24]
 80051f0:	601a      	str	r2, [r3, #0]
 80051f2:	e002      	b.n	80051fa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80051f4:	69bb      	ldr	r3, [r7, #24]
 80051f6:	687a      	ldr	r2, [r7, #4]
 80051f8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80051fa:	69bb      	ldr	r3, [r7, #24]
 80051fc:	68fa      	ldr	r2, [r7, #12]
 80051fe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005200:	69bb      	ldr	r3, [r7, #24]
 8005202:	68ba      	ldr	r2, [r7, #8]
 8005204:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005206:	2101      	movs	r1, #1
 8005208:	69b8      	ldr	r0, [r7, #24]
 800520a:	f7ff ff05 	bl	8005018 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800520e:	69bb      	ldr	r3, [r7, #24]
 8005210:	78fa      	ldrb	r2, [r7, #3]
 8005212:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005216:	bf00      	nop
 8005218:	3710      	adds	r7, #16
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}
	...

08005220 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b08e      	sub	sp, #56	; 0x38
 8005224:	af00      	add	r7, sp, #0
 8005226:	60f8      	str	r0, [r7, #12]
 8005228:	60b9      	str	r1, [r7, #8]
 800522a:	607a      	str	r2, [r7, #4]
 800522c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800522e:	2300      	movs	r3, #0
 8005230:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005238:	2b00      	cmp	r3, #0
 800523a:	d10a      	bne.n	8005252 <xQueueGenericSend+0x32>
	__asm volatile
 800523c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005240:	f383 8811 	msr	BASEPRI, r3
 8005244:	f3bf 8f6f 	isb	sy
 8005248:	f3bf 8f4f 	dsb	sy
 800524c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800524e:	bf00      	nop
 8005250:	e7fe      	b.n	8005250 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d103      	bne.n	8005260 <xQueueGenericSend+0x40>
 8005258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800525a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800525c:	2b00      	cmp	r3, #0
 800525e:	d101      	bne.n	8005264 <xQueueGenericSend+0x44>
 8005260:	2301      	movs	r3, #1
 8005262:	e000      	b.n	8005266 <xQueueGenericSend+0x46>
 8005264:	2300      	movs	r3, #0
 8005266:	2b00      	cmp	r3, #0
 8005268:	d10a      	bne.n	8005280 <xQueueGenericSend+0x60>
	__asm volatile
 800526a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800526e:	f383 8811 	msr	BASEPRI, r3
 8005272:	f3bf 8f6f 	isb	sy
 8005276:	f3bf 8f4f 	dsb	sy
 800527a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800527c:	bf00      	nop
 800527e:	e7fe      	b.n	800527e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	2b02      	cmp	r3, #2
 8005284:	d103      	bne.n	800528e <xQueueGenericSend+0x6e>
 8005286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800528a:	2b01      	cmp	r3, #1
 800528c:	d101      	bne.n	8005292 <xQueueGenericSend+0x72>
 800528e:	2301      	movs	r3, #1
 8005290:	e000      	b.n	8005294 <xQueueGenericSend+0x74>
 8005292:	2300      	movs	r3, #0
 8005294:	2b00      	cmp	r3, #0
 8005296:	d10a      	bne.n	80052ae <xQueueGenericSend+0x8e>
	__asm volatile
 8005298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800529c:	f383 8811 	msr	BASEPRI, r3
 80052a0:	f3bf 8f6f 	isb	sy
 80052a4:	f3bf 8f4f 	dsb	sy
 80052a8:	623b      	str	r3, [r7, #32]
}
 80052aa:	bf00      	nop
 80052ac:	e7fe      	b.n	80052ac <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80052ae:	f001 f9bd 	bl	800662c <xTaskGetSchedulerState>
 80052b2:	4603      	mov	r3, r0
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d102      	bne.n	80052be <xQueueGenericSend+0x9e>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d101      	bne.n	80052c2 <xQueueGenericSend+0xa2>
 80052be:	2301      	movs	r3, #1
 80052c0:	e000      	b.n	80052c4 <xQueueGenericSend+0xa4>
 80052c2:	2300      	movs	r3, #0
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d10a      	bne.n	80052de <xQueueGenericSend+0xbe>
	__asm volatile
 80052c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052cc:	f383 8811 	msr	BASEPRI, r3
 80052d0:	f3bf 8f6f 	isb	sy
 80052d4:	f3bf 8f4f 	dsb	sy
 80052d8:	61fb      	str	r3, [r7, #28]
}
 80052da:	bf00      	nop
 80052dc:	e7fe      	b.n	80052dc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80052de:	f7ff fd79 	bl	8004dd4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80052e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d302      	bcc.n	80052f4 <xQueueGenericSend+0xd4>
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	2b02      	cmp	r3, #2
 80052f2:	d129      	bne.n	8005348 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80052f4:	683a      	ldr	r2, [r7, #0]
 80052f6:	68b9      	ldr	r1, [r7, #8]
 80052f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80052fa:	f000 fa0b 	bl	8005714 <prvCopyDataToQueue>
 80052fe:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005304:	2b00      	cmp	r3, #0
 8005306:	d010      	beq.n	800532a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800530a:	3324      	adds	r3, #36	; 0x24
 800530c:	4618      	mov	r0, r3
 800530e:	f000 ffcf 	bl	80062b0 <xTaskRemoveFromEventList>
 8005312:	4603      	mov	r3, r0
 8005314:	2b00      	cmp	r3, #0
 8005316:	d013      	beq.n	8005340 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005318:	4b3f      	ldr	r3, [pc, #252]	; (8005418 <xQueueGenericSend+0x1f8>)
 800531a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800531e:	601a      	str	r2, [r3, #0]
 8005320:	f3bf 8f4f 	dsb	sy
 8005324:	f3bf 8f6f 	isb	sy
 8005328:	e00a      	b.n	8005340 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800532a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800532c:	2b00      	cmp	r3, #0
 800532e:	d007      	beq.n	8005340 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005330:	4b39      	ldr	r3, [pc, #228]	; (8005418 <xQueueGenericSend+0x1f8>)
 8005332:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005336:	601a      	str	r2, [r3, #0]
 8005338:	f3bf 8f4f 	dsb	sy
 800533c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005340:	f7ff fd78 	bl	8004e34 <vPortExitCritical>
				return pdPASS;
 8005344:	2301      	movs	r3, #1
 8005346:	e063      	b.n	8005410 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d103      	bne.n	8005356 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800534e:	f7ff fd71 	bl	8004e34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005352:	2300      	movs	r3, #0
 8005354:	e05c      	b.n	8005410 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005358:	2b00      	cmp	r3, #0
 800535a:	d106      	bne.n	800536a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800535c:	f107 0314 	add.w	r3, r7, #20
 8005360:	4618      	mov	r0, r3
 8005362:	f001 f809 	bl	8006378 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005366:	2301      	movs	r3, #1
 8005368:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800536a:	f7ff fd63 	bl	8004e34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800536e:	f000 fd7b 	bl	8005e68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005372:	f7ff fd2f 	bl	8004dd4 <vPortEnterCritical>
 8005376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005378:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800537c:	b25b      	sxtb	r3, r3
 800537e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005382:	d103      	bne.n	800538c <xQueueGenericSend+0x16c>
 8005384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005386:	2200      	movs	r2, #0
 8005388:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800538c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800538e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005392:	b25b      	sxtb	r3, r3
 8005394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005398:	d103      	bne.n	80053a2 <xQueueGenericSend+0x182>
 800539a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800539c:	2200      	movs	r2, #0
 800539e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80053a2:	f7ff fd47 	bl	8004e34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80053a6:	1d3a      	adds	r2, r7, #4
 80053a8:	f107 0314 	add.w	r3, r7, #20
 80053ac:	4611      	mov	r1, r2
 80053ae:	4618      	mov	r0, r3
 80053b0:	f000 fff8 	bl	80063a4 <xTaskCheckForTimeOut>
 80053b4:	4603      	mov	r3, r0
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d124      	bne.n	8005404 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80053ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80053bc:	f000 faa2 	bl	8005904 <prvIsQueueFull>
 80053c0:	4603      	mov	r3, r0
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d018      	beq.n	80053f8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80053c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053c8:	3310      	adds	r3, #16
 80053ca:	687a      	ldr	r2, [r7, #4]
 80053cc:	4611      	mov	r1, r2
 80053ce:	4618      	mov	r0, r3
 80053d0:	f000 ff1e 	bl	8006210 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80053d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80053d6:	f000 fa2d 	bl	8005834 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80053da:	f000 fd53 	bl	8005e84 <xTaskResumeAll>
 80053de:	4603      	mov	r3, r0
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	f47f af7c 	bne.w	80052de <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80053e6:	4b0c      	ldr	r3, [pc, #48]	; (8005418 <xQueueGenericSend+0x1f8>)
 80053e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053ec:	601a      	str	r2, [r3, #0]
 80053ee:	f3bf 8f4f 	dsb	sy
 80053f2:	f3bf 8f6f 	isb	sy
 80053f6:	e772      	b.n	80052de <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80053f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80053fa:	f000 fa1b 	bl	8005834 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80053fe:	f000 fd41 	bl	8005e84 <xTaskResumeAll>
 8005402:	e76c      	b.n	80052de <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005404:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005406:	f000 fa15 	bl	8005834 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800540a:	f000 fd3b 	bl	8005e84 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800540e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005410:	4618      	mov	r0, r3
 8005412:	3738      	adds	r7, #56	; 0x38
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}
 8005418:	e000ed04 	.word	0xe000ed04

0800541c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b090      	sub	sp, #64	; 0x40
 8005420:	af00      	add	r7, sp, #0
 8005422:	60f8      	str	r0, [r7, #12]
 8005424:	60b9      	str	r1, [r7, #8]
 8005426:	607a      	str	r2, [r7, #4]
 8005428:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800542e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005430:	2b00      	cmp	r3, #0
 8005432:	d10a      	bne.n	800544a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005438:	f383 8811 	msr	BASEPRI, r3
 800543c:	f3bf 8f6f 	isb	sy
 8005440:	f3bf 8f4f 	dsb	sy
 8005444:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005446:	bf00      	nop
 8005448:	e7fe      	b.n	8005448 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d103      	bne.n	8005458 <xQueueGenericSendFromISR+0x3c>
 8005450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005454:	2b00      	cmp	r3, #0
 8005456:	d101      	bne.n	800545c <xQueueGenericSendFromISR+0x40>
 8005458:	2301      	movs	r3, #1
 800545a:	e000      	b.n	800545e <xQueueGenericSendFromISR+0x42>
 800545c:	2300      	movs	r3, #0
 800545e:	2b00      	cmp	r3, #0
 8005460:	d10a      	bne.n	8005478 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005466:	f383 8811 	msr	BASEPRI, r3
 800546a:	f3bf 8f6f 	isb	sy
 800546e:	f3bf 8f4f 	dsb	sy
 8005472:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005474:	bf00      	nop
 8005476:	e7fe      	b.n	8005476 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	2b02      	cmp	r3, #2
 800547c:	d103      	bne.n	8005486 <xQueueGenericSendFromISR+0x6a>
 800547e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005482:	2b01      	cmp	r3, #1
 8005484:	d101      	bne.n	800548a <xQueueGenericSendFromISR+0x6e>
 8005486:	2301      	movs	r3, #1
 8005488:	e000      	b.n	800548c <xQueueGenericSendFromISR+0x70>
 800548a:	2300      	movs	r3, #0
 800548c:	2b00      	cmp	r3, #0
 800548e:	d10a      	bne.n	80054a6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005494:	f383 8811 	msr	BASEPRI, r3
 8005498:	f3bf 8f6f 	isb	sy
 800549c:	f3bf 8f4f 	dsb	sy
 80054a0:	623b      	str	r3, [r7, #32]
}
 80054a2:	bf00      	nop
 80054a4:	e7fe      	b.n	80054a4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80054a6:	f7ff fd77 	bl	8004f98 <vPortValidateInterruptPriority>
	__asm volatile
 80054aa:	f3ef 8211 	mrs	r2, BASEPRI
 80054ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b2:	f383 8811 	msr	BASEPRI, r3
 80054b6:	f3bf 8f6f 	isb	sy
 80054ba:	f3bf 8f4f 	dsb	sy
 80054be:	61fa      	str	r2, [r7, #28]
 80054c0:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 80054c2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80054c4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80054c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054ce:	429a      	cmp	r2, r3
 80054d0:	d302      	bcc.n	80054d8 <xQueueGenericSendFromISR+0xbc>
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	2b02      	cmp	r3, #2
 80054d6:	d12f      	bne.n	8005538 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80054d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80054de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80054e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054e6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80054e8:	683a      	ldr	r2, [r7, #0]
 80054ea:	68b9      	ldr	r1, [r7, #8]
 80054ec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80054ee:	f000 f911 	bl	8005714 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80054f2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80054f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054fa:	d112      	bne.n	8005522 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80054fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005500:	2b00      	cmp	r3, #0
 8005502:	d016      	beq.n	8005532 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005506:	3324      	adds	r3, #36	; 0x24
 8005508:	4618      	mov	r0, r3
 800550a:	f000 fed1 	bl	80062b0 <xTaskRemoveFromEventList>
 800550e:	4603      	mov	r3, r0
 8005510:	2b00      	cmp	r3, #0
 8005512:	d00e      	beq.n	8005532 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d00b      	beq.n	8005532 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2201      	movs	r2, #1
 800551e:	601a      	str	r2, [r3, #0]
 8005520:	e007      	b.n	8005532 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005522:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005526:	3301      	adds	r3, #1
 8005528:	b2db      	uxtb	r3, r3
 800552a:	b25a      	sxtb	r2, r3
 800552c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800552e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005532:	2301      	movs	r3, #1
 8005534:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005536:	e001      	b.n	800553c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005538:	2300      	movs	r3, #0
 800553a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800553c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800553e:	617b      	str	r3, [r7, #20]
	__asm volatile
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	f383 8811 	msr	BASEPRI, r3
}
 8005546:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005548:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800554a:	4618      	mov	r0, r3
 800554c:	3740      	adds	r7, #64	; 0x40
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}
	...

08005554 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b08c      	sub	sp, #48	; 0x30
 8005558:	af00      	add	r7, sp, #0
 800555a:	60f8      	str	r0, [r7, #12]
 800555c:	60b9      	str	r1, [r7, #8]
 800555e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005560:	2300      	movs	r3, #0
 8005562:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800556a:	2b00      	cmp	r3, #0
 800556c:	d10a      	bne.n	8005584 <xQueueReceive+0x30>
	__asm volatile
 800556e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005572:	f383 8811 	msr	BASEPRI, r3
 8005576:	f3bf 8f6f 	isb	sy
 800557a:	f3bf 8f4f 	dsb	sy
 800557e:	623b      	str	r3, [r7, #32]
}
 8005580:	bf00      	nop
 8005582:	e7fe      	b.n	8005582 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d103      	bne.n	8005592 <xQueueReceive+0x3e>
 800558a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800558c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800558e:	2b00      	cmp	r3, #0
 8005590:	d101      	bne.n	8005596 <xQueueReceive+0x42>
 8005592:	2301      	movs	r3, #1
 8005594:	e000      	b.n	8005598 <xQueueReceive+0x44>
 8005596:	2300      	movs	r3, #0
 8005598:	2b00      	cmp	r3, #0
 800559a:	d10a      	bne.n	80055b2 <xQueueReceive+0x5e>
	__asm volatile
 800559c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055a0:	f383 8811 	msr	BASEPRI, r3
 80055a4:	f3bf 8f6f 	isb	sy
 80055a8:	f3bf 8f4f 	dsb	sy
 80055ac:	61fb      	str	r3, [r7, #28]
}
 80055ae:	bf00      	nop
 80055b0:	e7fe      	b.n	80055b0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80055b2:	f001 f83b 	bl	800662c <xTaskGetSchedulerState>
 80055b6:	4603      	mov	r3, r0
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d102      	bne.n	80055c2 <xQueueReceive+0x6e>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d101      	bne.n	80055c6 <xQueueReceive+0x72>
 80055c2:	2301      	movs	r3, #1
 80055c4:	e000      	b.n	80055c8 <xQueueReceive+0x74>
 80055c6:	2300      	movs	r3, #0
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d10a      	bne.n	80055e2 <xQueueReceive+0x8e>
	__asm volatile
 80055cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d0:	f383 8811 	msr	BASEPRI, r3
 80055d4:	f3bf 8f6f 	isb	sy
 80055d8:	f3bf 8f4f 	dsb	sy
 80055dc:	61bb      	str	r3, [r7, #24]
}
 80055de:	bf00      	nop
 80055e0:	e7fe      	b.n	80055e0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80055e2:	f7ff fbf7 	bl	8004dd4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80055e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ea:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80055ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d01f      	beq.n	8005632 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80055f2:	68b9      	ldr	r1, [r7, #8]
 80055f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80055f6:	f000 f8f7 	bl	80057e8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80055fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fc:	1e5a      	subs	r2, r3, #1
 80055fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005600:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005604:	691b      	ldr	r3, [r3, #16]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d00f      	beq.n	800562a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800560a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800560c:	3310      	adds	r3, #16
 800560e:	4618      	mov	r0, r3
 8005610:	f000 fe4e 	bl	80062b0 <xTaskRemoveFromEventList>
 8005614:	4603      	mov	r3, r0
 8005616:	2b00      	cmp	r3, #0
 8005618:	d007      	beq.n	800562a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800561a:	4b3d      	ldr	r3, [pc, #244]	; (8005710 <xQueueReceive+0x1bc>)
 800561c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005620:	601a      	str	r2, [r3, #0]
 8005622:	f3bf 8f4f 	dsb	sy
 8005626:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800562a:	f7ff fc03 	bl	8004e34 <vPortExitCritical>
				return pdPASS;
 800562e:	2301      	movs	r3, #1
 8005630:	e069      	b.n	8005706 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d103      	bne.n	8005640 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005638:	f7ff fbfc 	bl	8004e34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800563c:	2300      	movs	r3, #0
 800563e:	e062      	b.n	8005706 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005642:	2b00      	cmp	r3, #0
 8005644:	d106      	bne.n	8005654 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005646:	f107 0310 	add.w	r3, r7, #16
 800564a:	4618      	mov	r0, r3
 800564c:	f000 fe94 	bl	8006378 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005650:	2301      	movs	r3, #1
 8005652:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005654:	f7ff fbee 	bl	8004e34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005658:	f000 fc06 	bl	8005e68 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800565c:	f7ff fbba 	bl	8004dd4 <vPortEnterCritical>
 8005660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005662:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005666:	b25b      	sxtb	r3, r3
 8005668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800566c:	d103      	bne.n	8005676 <xQueueReceive+0x122>
 800566e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005670:	2200      	movs	r2, #0
 8005672:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005678:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800567c:	b25b      	sxtb	r3, r3
 800567e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005682:	d103      	bne.n	800568c <xQueueReceive+0x138>
 8005684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005686:	2200      	movs	r2, #0
 8005688:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800568c:	f7ff fbd2 	bl	8004e34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005690:	1d3a      	adds	r2, r7, #4
 8005692:	f107 0310 	add.w	r3, r7, #16
 8005696:	4611      	mov	r1, r2
 8005698:	4618      	mov	r0, r3
 800569a:	f000 fe83 	bl	80063a4 <xTaskCheckForTimeOut>
 800569e:	4603      	mov	r3, r0
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d123      	bne.n	80056ec <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80056a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80056a6:	f000 f917 	bl	80058d8 <prvIsQueueEmpty>
 80056aa:	4603      	mov	r3, r0
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d017      	beq.n	80056e0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80056b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056b2:	3324      	adds	r3, #36	; 0x24
 80056b4:	687a      	ldr	r2, [r7, #4]
 80056b6:	4611      	mov	r1, r2
 80056b8:	4618      	mov	r0, r3
 80056ba:	f000 fda9 	bl	8006210 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80056be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80056c0:	f000 f8b8 	bl	8005834 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80056c4:	f000 fbde 	bl	8005e84 <xTaskResumeAll>
 80056c8:	4603      	mov	r3, r0
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d189      	bne.n	80055e2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80056ce:	4b10      	ldr	r3, [pc, #64]	; (8005710 <xQueueReceive+0x1bc>)
 80056d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056d4:	601a      	str	r2, [r3, #0]
 80056d6:	f3bf 8f4f 	dsb	sy
 80056da:	f3bf 8f6f 	isb	sy
 80056de:	e780      	b.n	80055e2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80056e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80056e2:	f000 f8a7 	bl	8005834 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80056e6:	f000 fbcd 	bl	8005e84 <xTaskResumeAll>
 80056ea:	e77a      	b.n	80055e2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80056ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80056ee:	f000 f8a1 	bl	8005834 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80056f2:	f000 fbc7 	bl	8005e84 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80056f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80056f8:	f000 f8ee 	bl	80058d8 <prvIsQueueEmpty>
 80056fc:	4603      	mov	r3, r0
 80056fe:	2b00      	cmp	r3, #0
 8005700:	f43f af6f 	beq.w	80055e2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005704:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005706:	4618      	mov	r0, r3
 8005708:	3730      	adds	r7, #48	; 0x30
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}
 800570e:	bf00      	nop
 8005710:	e000ed04 	.word	0xe000ed04

08005714 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b086      	sub	sp, #24
 8005718:	af00      	add	r7, sp, #0
 800571a:	60f8      	str	r0, [r7, #12]
 800571c:	60b9      	str	r1, [r7, #8]
 800571e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005720:	2300      	movs	r3, #0
 8005722:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005728:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800572e:	2b00      	cmp	r3, #0
 8005730:	d10d      	bne.n	800574e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d14d      	bne.n	80057d6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	4618      	mov	r0, r3
 8005740:	f000 ff92 	bl	8006668 <xTaskPriorityDisinherit>
 8005744:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2200      	movs	r2, #0
 800574a:	609a      	str	r2, [r3, #8]
 800574c:	e043      	b.n	80057d6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d119      	bne.n	8005788 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	6858      	ldr	r0, [r3, #4]
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800575c:	461a      	mov	r2, r3
 800575e:	68b9      	ldr	r1, [r7, #8]
 8005760:	f001 fdee 	bl	8007340 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	685a      	ldr	r2, [r3, #4]
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800576c:	441a      	add	r2, r3
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	685a      	ldr	r2, [r3, #4]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	429a      	cmp	r2, r3
 800577c:	d32b      	bcc.n	80057d6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	605a      	str	r2, [r3, #4]
 8005786:	e026      	b.n	80057d6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	68d8      	ldr	r0, [r3, #12]
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005790:	461a      	mov	r2, r3
 8005792:	68b9      	ldr	r1, [r7, #8]
 8005794:	f001 fdd4 	bl	8007340 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	68da      	ldr	r2, [r3, #12]
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a0:	425b      	negs	r3, r3
 80057a2:	441a      	add	r2, r3
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	68da      	ldr	r2, [r3, #12]
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d207      	bcs.n	80057c4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	689a      	ldr	r2, [r3, #8]
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057bc:	425b      	negs	r3, r3
 80057be:	441a      	add	r2, r3
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2b02      	cmp	r3, #2
 80057c8:	d105      	bne.n	80057d6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d002      	beq.n	80057d6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	3b01      	subs	r3, #1
 80057d4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	1c5a      	adds	r2, r3, #1
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80057de:	697b      	ldr	r3, [r7, #20]
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3718      	adds	r7, #24
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}

080057e8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b082      	sub	sp, #8
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
 80057f0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d018      	beq.n	800582c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	68da      	ldr	r2, [r3, #12]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005802:	441a      	add	r2, r3
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	68da      	ldr	r2, [r3, #12]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	429a      	cmp	r2, r3
 8005812:	d303      	bcc.n	800581c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	68d9      	ldr	r1, [r3, #12]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005824:	461a      	mov	r2, r3
 8005826:	6838      	ldr	r0, [r7, #0]
 8005828:	f001 fd8a 	bl	8007340 <memcpy>
	}
}
 800582c:	bf00      	nop
 800582e:	3708      	adds	r7, #8
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}

08005834 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b084      	sub	sp, #16
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800583c:	f7ff faca 	bl	8004dd4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005846:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005848:	e011      	b.n	800586e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800584e:	2b00      	cmp	r3, #0
 8005850:	d012      	beq.n	8005878 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	3324      	adds	r3, #36	; 0x24
 8005856:	4618      	mov	r0, r3
 8005858:	f000 fd2a 	bl	80062b0 <xTaskRemoveFromEventList>
 800585c:	4603      	mov	r3, r0
 800585e:	2b00      	cmp	r3, #0
 8005860:	d001      	beq.n	8005866 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005862:	f000 fe01 	bl	8006468 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005866:	7bfb      	ldrb	r3, [r7, #15]
 8005868:	3b01      	subs	r3, #1
 800586a:	b2db      	uxtb	r3, r3
 800586c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800586e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005872:	2b00      	cmp	r3, #0
 8005874:	dce9      	bgt.n	800584a <prvUnlockQueue+0x16>
 8005876:	e000      	b.n	800587a <prvUnlockQueue+0x46>
					break;
 8005878:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	22ff      	movs	r2, #255	; 0xff
 800587e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005882:	f7ff fad7 	bl	8004e34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005886:	f7ff faa5 	bl	8004dd4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005890:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005892:	e011      	b.n	80058b8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	691b      	ldr	r3, [r3, #16]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d012      	beq.n	80058c2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	3310      	adds	r3, #16
 80058a0:	4618      	mov	r0, r3
 80058a2:	f000 fd05 	bl	80062b0 <xTaskRemoveFromEventList>
 80058a6:	4603      	mov	r3, r0
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d001      	beq.n	80058b0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80058ac:	f000 fddc 	bl	8006468 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80058b0:	7bbb      	ldrb	r3, [r7, #14]
 80058b2:	3b01      	subs	r3, #1
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80058b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	dce9      	bgt.n	8005894 <prvUnlockQueue+0x60>
 80058c0:	e000      	b.n	80058c4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80058c2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	22ff      	movs	r2, #255	; 0xff
 80058c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80058cc:	f7ff fab2 	bl	8004e34 <vPortExitCritical>
}
 80058d0:	bf00      	nop
 80058d2:	3710      	adds	r7, #16
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}

080058d8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b084      	sub	sp, #16
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80058e0:	f7ff fa78 	bl	8004dd4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d102      	bne.n	80058f2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80058ec:	2301      	movs	r3, #1
 80058ee:	60fb      	str	r3, [r7, #12]
 80058f0:	e001      	b.n	80058f6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80058f2:	2300      	movs	r3, #0
 80058f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80058f6:	f7ff fa9d 	bl	8004e34 <vPortExitCritical>

	return xReturn;
 80058fa:	68fb      	ldr	r3, [r7, #12]
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	3710      	adds	r7, #16
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}

08005904 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b084      	sub	sp, #16
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800590c:	f7ff fa62 	bl	8004dd4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005918:	429a      	cmp	r2, r3
 800591a:	d102      	bne.n	8005922 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800591c:	2301      	movs	r3, #1
 800591e:	60fb      	str	r3, [r7, #12]
 8005920:	e001      	b.n	8005926 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005922:	2300      	movs	r3, #0
 8005924:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005926:	f7ff fa85 	bl	8004e34 <vPortExitCritical>

	return xReturn;
 800592a:	68fb      	ldr	r3, [r7, #12]
}
 800592c:	4618      	mov	r0, r3
 800592e:	3710      	adds	r7, #16
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}

08005934 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005934:	b480      	push	{r7}
 8005936:	b085      	sub	sp, #20
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800593e:	2300      	movs	r3, #0
 8005940:	60fb      	str	r3, [r7, #12]
 8005942:	e014      	b.n	800596e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005944:	4a0f      	ldr	r2, [pc, #60]	; (8005984 <vQueueAddToRegistry+0x50>)
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d10b      	bne.n	8005968 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005950:	490c      	ldr	r1, [pc, #48]	; (8005984 <vQueueAddToRegistry+0x50>)
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	683a      	ldr	r2, [r7, #0]
 8005956:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800595a:	4a0a      	ldr	r2, [pc, #40]	; (8005984 <vQueueAddToRegistry+0x50>)
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	00db      	lsls	r3, r3, #3
 8005960:	4413      	add	r3, r2
 8005962:	687a      	ldr	r2, [r7, #4]
 8005964:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005966:	e006      	b.n	8005976 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	3301      	adds	r3, #1
 800596c:	60fb      	str	r3, [r7, #12]
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2b07      	cmp	r3, #7
 8005972:	d9e7      	bls.n	8005944 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005974:	bf00      	nop
 8005976:	bf00      	nop
 8005978:	3714      	adds	r7, #20
 800597a:	46bd      	mov	sp, r7
 800597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005980:	4770      	bx	lr
 8005982:	bf00      	nop
 8005984:	20004b38 	.word	0x20004b38

08005988 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005988:	b580      	push	{r7, lr}
 800598a:	b086      	sub	sp, #24
 800598c:	af00      	add	r7, sp, #0
 800598e:	60f8      	str	r0, [r7, #12]
 8005990:	60b9      	str	r1, [r7, #8]
 8005992:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005998:	f7ff fa1c 	bl	8004dd4 <vPortEnterCritical>
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80059a2:	b25b      	sxtb	r3, r3
 80059a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059a8:	d103      	bne.n	80059b2 <vQueueWaitForMessageRestricted+0x2a>
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	2200      	movs	r2, #0
 80059ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80059b8:	b25b      	sxtb	r3, r3
 80059ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059be:	d103      	bne.n	80059c8 <vQueueWaitForMessageRestricted+0x40>
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	2200      	movs	r2, #0
 80059c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80059c8:	f7ff fa34 	bl	8004e34 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d106      	bne.n	80059e2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	3324      	adds	r3, #36	; 0x24
 80059d8:	687a      	ldr	r2, [r7, #4]
 80059da:	68b9      	ldr	r1, [r7, #8]
 80059dc:	4618      	mov	r0, r3
 80059de:	f000 fc3b 	bl	8006258 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80059e2:	6978      	ldr	r0, [r7, #20]
 80059e4:	f7ff ff26 	bl	8005834 <prvUnlockQueue>
	}
 80059e8:	bf00      	nop
 80059ea:	3718      	adds	r7, #24
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}

080059f0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b08e      	sub	sp, #56	; 0x38
 80059f4:	af04      	add	r7, sp, #16
 80059f6:	60f8      	str	r0, [r7, #12]
 80059f8:	60b9      	str	r1, [r7, #8]
 80059fa:	607a      	str	r2, [r7, #4]
 80059fc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80059fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d10a      	bne.n	8005a1a <xTaskCreateStatic+0x2a>
	__asm volatile
 8005a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a08:	f383 8811 	msr	BASEPRI, r3
 8005a0c:	f3bf 8f6f 	isb	sy
 8005a10:	f3bf 8f4f 	dsb	sy
 8005a14:	623b      	str	r3, [r7, #32]
}
 8005a16:	bf00      	nop
 8005a18:	e7fe      	b.n	8005a18 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d10a      	bne.n	8005a36 <xTaskCreateStatic+0x46>
	__asm volatile
 8005a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a24:	f383 8811 	msr	BASEPRI, r3
 8005a28:	f3bf 8f6f 	isb	sy
 8005a2c:	f3bf 8f4f 	dsb	sy
 8005a30:	61fb      	str	r3, [r7, #28]
}
 8005a32:	bf00      	nop
 8005a34:	e7fe      	b.n	8005a34 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005a36:	235c      	movs	r3, #92	; 0x5c
 8005a38:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	2b5c      	cmp	r3, #92	; 0x5c
 8005a3e:	d00a      	beq.n	8005a56 <xTaskCreateStatic+0x66>
	__asm volatile
 8005a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a44:	f383 8811 	msr	BASEPRI, r3
 8005a48:	f3bf 8f6f 	isb	sy
 8005a4c:	f3bf 8f4f 	dsb	sy
 8005a50:	61bb      	str	r3, [r7, #24]
}
 8005a52:	bf00      	nop
 8005a54:	e7fe      	b.n	8005a54 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005a56:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d01e      	beq.n	8005a9c <xTaskCreateStatic+0xac>
 8005a5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d01b      	beq.n	8005a9c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a66:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a6c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a70:	2202      	movs	r2, #2
 8005a72:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005a76:	2300      	movs	r3, #0
 8005a78:	9303      	str	r3, [sp, #12]
 8005a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7c:	9302      	str	r3, [sp, #8]
 8005a7e:	f107 0314 	add.w	r3, r7, #20
 8005a82:	9301      	str	r3, [sp, #4]
 8005a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a86:	9300      	str	r3, [sp, #0]
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	687a      	ldr	r2, [r7, #4]
 8005a8c:	68b9      	ldr	r1, [r7, #8]
 8005a8e:	68f8      	ldr	r0, [r7, #12]
 8005a90:	f000 f850 	bl	8005b34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005a94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005a96:	f000 f8dd 	bl	8005c54 <prvAddNewTaskToReadyList>
 8005a9a:	e001      	b.n	8005aa0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005aa0:	697b      	ldr	r3, [r7, #20]
	}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	3728      	adds	r7, #40	; 0x28
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}

08005aaa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005aaa:	b580      	push	{r7, lr}
 8005aac:	b08c      	sub	sp, #48	; 0x30
 8005aae:	af04      	add	r7, sp, #16
 8005ab0:	60f8      	str	r0, [r7, #12]
 8005ab2:	60b9      	str	r1, [r7, #8]
 8005ab4:	603b      	str	r3, [r7, #0]
 8005ab6:	4613      	mov	r3, r2
 8005ab8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005aba:	88fb      	ldrh	r3, [r7, #6]
 8005abc:	009b      	lsls	r3, r3, #2
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f7fe fdbe 	bl	8004640 <pvPortMalloc>
 8005ac4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d00e      	beq.n	8005aea <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005acc:	205c      	movs	r0, #92	; 0x5c
 8005ace:	f7fe fdb7 	bl	8004640 <pvPortMalloc>
 8005ad2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005ad4:	69fb      	ldr	r3, [r7, #28]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d003      	beq.n	8005ae2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005ada:	69fb      	ldr	r3, [r7, #28]
 8005adc:	697a      	ldr	r2, [r7, #20]
 8005ade:	631a      	str	r2, [r3, #48]	; 0x30
 8005ae0:	e005      	b.n	8005aee <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005ae2:	6978      	ldr	r0, [r7, #20]
 8005ae4:	f7fe fe78 	bl	80047d8 <vPortFree>
 8005ae8:	e001      	b.n	8005aee <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005aea:	2300      	movs	r3, #0
 8005aec:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005aee:	69fb      	ldr	r3, [r7, #28]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d017      	beq.n	8005b24 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005af4:	69fb      	ldr	r3, [r7, #28]
 8005af6:	2200      	movs	r2, #0
 8005af8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005afc:	88fa      	ldrh	r2, [r7, #6]
 8005afe:	2300      	movs	r3, #0
 8005b00:	9303      	str	r3, [sp, #12]
 8005b02:	69fb      	ldr	r3, [r7, #28]
 8005b04:	9302      	str	r3, [sp, #8]
 8005b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b08:	9301      	str	r3, [sp, #4]
 8005b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b0c:	9300      	str	r3, [sp, #0]
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	68b9      	ldr	r1, [r7, #8]
 8005b12:	68f8      	ldr	r0, [r7, #12]
 8005b14:	f000 f80e 	bl	8005b34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005b18:	69f8      	ldr	r0, [r7, #28]
 8005b1a:	f000 f89b 	bl	8005c54 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	61bb      	str	r3, [r7, #24]
 8005b22:	e002      	b.n	8005b2a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005b24:	f04f 33ff 	mov.w	r3, #4294967295
 8005b28:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005b2a:	69bb      	ldr	r3, [r7, #24]
	}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	3720      	adds	r7, #32
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}

08005b34 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b088      	sub	sp, #32
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	60f8      	str	r0, [r7, #12]
 8005b3c:	60b9      	str	r1, [r7, #8]
 8005b3e:	607a      	str	r2, [r7, #4]
 8005b40:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b44:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	009b      	lsls	r3, r3, #2
 8005b4a:	461a      	mov	r2, r3
 8005b4c:	21a5      	movs	r1, #165	; 0xa5
 8005b4e:	f001 fc05 	bl	800735c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005b5c:	3b01      	subs	r3, #1
 8005b5e:	009b      	lsls	r3, r3, #2
 8005b60:	4413      	add	r3, r2
 8005b62:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005b64:	69bb      	ldr	r3, [r7, #24]
 8005b66:	f023 0307 	bic.w	r3, r3, #7
 8005b6a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005b6c:	69bb      	ldr	r3, [r7, #24]
 8005b6e:	f003 0307 	and.w	r3, r3, #7
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d00a      	beq.n	8005b8c <prvInitialiseNewTask+0x58>
	__asm volatile
 8005b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b7a:	f383 8811 	msr	BASEPRI, r3
 8005b7e:	f3bf 8f6f 	isb	sy
 8005b82:	f3bf 8f4f 	dsb	sy
 8005b86:	617b      	str	r3, [r7, #20]
}
 8005b88:	bf00      	nop
 8005b8a:	e7fe      	b.n	8005b8a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d01f      	beq.n	8005bd2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005b92:	2300      	movs	r3, #0
 8005b94:	61fb      	str	r3, [r7, #28]
 8005b96:	e012      	b.n	8005bbe <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005b98:	68ba      	ldr	r2, [r7, #8]
 8005b9a:	69fb      	ldr	r3, [r7, #28]
 8005b9c:	4413      	add	r3, r2
 8005b9e:	7819      	ldrb	r1, [r3, #0]
 8005ba0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ba2:	69fb      	ldr	r3, [r7, #28]
 8005ba4:	4413      	add	r3, r2
 8005ba6:	3334      	adds	r3, #52	; 0x34
 8005ba8:	460a      	mov	r2, r1
 8005baa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005bac:	68ba      	ldr	r2, [r7, #8]
 8005bae:	69fb      	ldr	r3, [r7, #28]
 8005bb0:	4413      	add	r3, r2
 8005bb2:	781b      	ldrb	r3, [r3, #0]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d006      	beq.n	8005bc6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005bb8:	69fb      	ldr	r3, [r7, #28]
 8005bba:	3301      	adds	r3, #1
 8005bbc:	61fb      	str	r3, [r7, #28]
 8005bbe:	69fb      	ldr	r3, [r7, #28]
 8005bc0:	2b0f      	cmp	r3, #15
 8005bc2:	d9e9      	bls.n	8005b98 <prvInitialiseNewTask+0x64>
 8005bc4:	e000      	b.n	8005bc8 <prvInitialiseNewTask+0x94>
			{
				break;
 8005bc6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bca:	2200      	movs	r2, #0
 8005bcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005bd0:	e003      	b.n	8005bda <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bdc:	2b37      	cmp	r3, #55	; 0x37
 8005bde:	d901      	bls.n	8005be4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005be0:	2337      	movs	r3, #55	; 0x37
 8005be2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005be8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005bee:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bf8:	3304      	adds	r3, #4
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f7fe ff2a 	bl	8004a54 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c02:	3318      	adds	r3, #24
 8005c04:	4618      	mov	r0, r3
 8005c06:	f7fe ff25 	bl	8004a54 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c0e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c12:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c18:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c1e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c22:	2200      	movs	r2, #0
 8005c24:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c28:	2200      	movs	r2, #0
 8005c2a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005c2e:	683a      	ldr	r2, [r7, #0]
 8005c30:	68f9      	ldr	r1, [r7, #12]
 8005c32:	69b8      	ldr	r0, [r7, #24]
 8005c34:	f7fe ffa2 	bl	8004b7c <pxPortInitialiseStack>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c3c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d002      	beq.n	8005c4a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c48:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005c4a:	bf00      	nop
 8005c4c:	3720      	adds	r7, #32
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}
	...

08005c54 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b082      	sub	sp, #8
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005c5c:	f7ff f8ba 	bl	8004dd4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005c60:	4b2d      	ldr	r3, [pc, #180]	; (8005d18 <prvAddNewTaskToReadyList+0xc4>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	3301      	adds	r3, #1
 8005c66:	4a2c      	ldr	r2, [pc, #176]	; (8005d18 <prvAddNewTaskToReadyList+0xc4>)
 8005c68:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005c6a:	4b2c      	ldr	r3, [pc, #176]	; (8005d1c <prvAddNewTaskToReadyList+0xc8>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d109      	bne.n	8005c86 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005c72:	4a2a      	ldr	r2, [pc, #168]	; (8005d1c <prvAddNewTaskToReadyList+0xc8>)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005c78:	4b27      	ldr	r3, [pc, #156]	; (8005d18 <prvAddNewTaskToReadyList+0xc4>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d110      	bne.n	8005ca2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005c80:	f000 fc16 	bl	80064b0 <prvInitialiseTaskLists>
 8005c84:	e00d      	b.n	8005ca2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005c86:	4b26      	ldr	r3, [pc, #152]	; (8005d20 <prvAddNewTaskToReadyList+0xcc>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d109      	bne.n	8005ca2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005c8e:	4b23      	ldr	r3, [pc, #140]	; (8005d1c <prvAddNewTaskToReadyList+0xc8>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	d802      	bhi.n	8005ca2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005c9c:	4a1f      	ldr	r2, [pc, #124]	; (8005d1c <prvAddNewTaskToReadyList+0xc8>)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005ca2:	4b20      	ldr	r3, [pc, #128]	; (8005d24 <prvAddNewTaskToReadyList+0xd0>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	3301      	adds	r3, #1
 8005ca8:	4a1e      	ldr	r2, [pc, #120]	; (8005d24 <prvAddNewTaskToReadyList+0xd0>)
 8005caa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005cac:	4b1d      	ldr	r3, [pc, #116]	; (8005d24 <prvAddNewTaskToReadyList+0xd0>)
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cb8:	4b1b      	ldr	r3, [pc, #108]	; (8005d28 <prvAddNewTaskToReadyList+0xd4>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d903      	bls.n	8005cc8 <prvAddNewTaskToReadyList+0x74>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc4:	4a18      	ldr	r2, [pc, #96]	; (8005d28 <prvAddNewTaskToReadyList+0xd4>)
 8005cc6:	6013      	str	r3, [r2, #0]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ccc:	4613      	mov	r3, r2
 8005cce:	009b      	lsls	r3, r3, #2
 8005cd0:	4413      	add	r3, r2
 8005cd2:	009b      	lsls	r3, r3, #2
 8005cd4:	4a15      	ldr	r2, [pc, #84]	; (8005d2c <prvAddNewTaskToReadyList+0xd8>)
 8005cd6:	441a      	add	r2, r3
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	3304      	adds	r3, #4
 8005cdc:	4619      	mov	r1, r3
 8005cde:	4610      	mov	r0, r2
 8005ce0:	f7fe fec5 	bl	8004a6e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005ce4:	f7ff f8a6 	bl	8004e34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005ce8:	4b0d      	ldr	r3, [pc, #52]	; (8005d20 <prvAddNewTaskToReadyList+0xcc>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d00e      	beq.n	8005d0e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005cf0:	4b0a      	ldr	r3, [pc, #40]	; (8005d1c <prvAddNewTaskToReadyList+0xc8>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d207      	bcs.n	8005d0e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005cfe:	4b0c      	ldr	r3, [pc, #48]	; (8005d30 <prvAddNewTaskToReadyList+0xdc>)
 8005d00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d04:	601a      	str	r2, [r3, #0]
 8005d06:	f3bf 8f4f 	dsb	sy
 8005d0a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005d0e:	bf00      	nop
 8005d10:	3708      	adds	r7, #8
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}
 8005d16:	bf00      	nop
 8005d18:	2000484c 	.word	0x2000484c
 8005d1c:	20004378 	.word	0x20004378
 8005d20:	20004858 	.word	0x20004858
 8005d24:	20004868 	.word	0x20004868
 8005d28:	20004854 	.word	0x20004854
 8005d2c:	2000437c 	.word	0x2000437c
 8005d30:	e000ed04 	.word	0xe000ed04

08005d34 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b084      	sub	sp, #16
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d017      	beq.n	8005d76 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005d46:	4b13      	ldr	r3, [pc, #76]	; (8005d94 <vTaskDelay+0x60>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d00a      	beq.n	8005d64 <vTaskDelay+0x30>
	__asm volatile
 8005d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d52:	f383 8811 	msr	BASEPRI, r3
 8005d56:	f3bf 8f6f 	isb	sy
 8005d5a:	f3bf 8f4f 	dsb	sy
 8005d5e:	60bb      	str	r3, [r7, #8]
}
 8005d60:	bf00      	nop
 8005d62:	e7fe      	b.n	8005d62 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005d64:	f000 f880 	bl	8005e68 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005d68:	2100      	movs	r1, #0
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f000 fcea 	bl	8006744 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005d70:	f000 f888 	bl	8005e84 <xTaskResumeAll>
 8005d74:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d107      	bne.n	8005d8c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005d7c:	4b06      	ldr	r3, [pc, #24]	; (8005d98 <vTaskDelay+0x64>)
 8005d7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d82:	601a      	str	r2, [r3, #0]
 8005d84:	f3bf 8f4f 	dsb	sy
 8005d88:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005d8c:	bf00      	nop
 8005d8e:	3710      	adds	r7, #16
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}
 8005d94:	20004874 	.word	0x20004874
 8005d98:	e000ed04 	.word	0xe000ed04

08005d9c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b08a      	sub	sp, #40	; 0x28
 8005da0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005da2:	2300      	movs	r3, #0
 8005da4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005da6:	2300      	movs	r3, #0
 8005da8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005daa:	463a      	mov	r2, r7
 8005dac:	1d39      	adds	r1, r7, #4
 8005dae:	f107 0308 	add.w	r3, r7, #8
 8005db2:	4618      	mov	r0, r3
 8005db4:	f7fe fc10 	bl	80045d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005db8:	6839      	ldr	r1, [r7, #0]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	68ba      	ldr	r2, [r7, #8]
 8005dbe:	9202      	str	r2, [sp, #8]
 8005dc0:	9301      	str	r3, [sp, #4]
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	9300      	str	r3, [sp, #0]
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	460a      	mov	r2, r1
 8005dca:	4921      	ldr	r1, [pc, #132]	; (8005e50 <vTaskStartScheduler+0xb4>)
 8005dcc:	4821      	ldr	r0, [pc, #132]	; (8005e54 <vTaskStartScheduler+0xb8>)
 8005dce:	f7ff fe0f 	bl	80059f0 <xTaskCreateStatic>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	4a20      	ldr	r2, [pc, #128]	; (8005e58 <vTaskStartScheduler+0xbc>)
 8005dd6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005dd8:	4b1f      	ldr	r3, [pc, #124]	; (8005e58 <vTaskStartScheduler+0xbc>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d002      	beq.n	8005de6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005de0:	2301      	movs	r3, #1
 8005de2:	617b      	str	r3, [r7, #20]
 8005de4:	e001      	b.n	8005dea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005de6:	2300      	movs	r3, #0
 8005de8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	d102      	bne.n	8005df6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005df0:	f000 fcfc 	bl	80067ec <xTimerCreateTimerTask>
 8005df4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	2b01      	cmp	r3, #1
 8005dfa:	d116      	bne.n	8005e2a <vTaskStartScheduler+0x8e>
	__asm volatile
 8005dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e00:	f383 8811 	msr	BASEPRI, r3
 8005e04:	f3bf 8f6f 	isb	sy
 8005e08:	f3bf 8f4f 	dsb	sy
 8005e0c:	613b      	str	r3, [r7, #16]
}
 8005e0e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005e10:	4b12      	ldr	r3, [pc, #72]	; (8005e5c <vTaskStartScheduler+0xc0>)
 8005e12:	f04f 32ff 	mov.w	r2, #4294967295
 8005e16:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005e18:	4b11      	ldr	r3, [pc, #68]	; (8005e60 <vTaskStartScheduler+0xc4>)
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005e1e:	4b11      	ldr	r3, [pc, #68]	; (8005e64 <vTaskStartScheduler+0xc8>)
 8005e20:	2200      	movs	r2, #0
 8005e22:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005e24:	f7fe ff34 	bl	8004c90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005e28:	e00e      	b.n	8005e48 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e30:	d10a      	bne.n	8005e48 <vTaskStartScheduler+0xac>
	__asm volatile
 8005e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e36:	f383 8811 	msr	BASEPRI, r3
 8005e3a:	f3bf 8f6f 	isb	sy
 8005e3e:	f3bf 8f4f 	dsb	sy
 8005e42:	60fb      	str	r3, [r7, #12]
}
 8005e44:	bf00      	nop
 8005e46:	e7fe      	b.n	8005e46 <vTaskStartScheduler+0xaa>
}
 8005e48:	bf00      	nop
 8005e4a:	3718      	adds	r7, #24
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}
 8005e50:	08007c38 	.word	0x08007c38
 8005e54:	08006481 	.word	0x08006481
 8005e58:	20004870 	.word	0x20004870
 8005e5c:	2000486c 	.word	0x2000486c
 8005e60:	20004858 	.word	0x20004858
 8005e64:	20004850 	.word	0x20004850

08005e68 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005e68:	b480      	push	{r7}
 8005e6a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005e6c:	4b04      	ldr	r3, [pc, #16]	; (8005e80 <vTaskSuspendAll+0x18>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	3301      	adds	r3, #1
 8005e72:	4a03      	ldr	r2, [pc, #12]	; (8005e80 <vTaskSuspendAll+0x18>)
 8005e74:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005e76:	bf00      	nop
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr
 8005e80:	20004874 	.word	0x20004874

08005e84 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b084      	sub	sp, #16
 8005e88:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005e92:	4b42      	ldr	r3, [pc, #264]	; (8005f9c <xTaskResumeAll+0x118>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d10a      	bne.n	8005eb0 <xTaskResumeAll+0x2c>
	__asm volatile
 8005e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e9e:	f383 8811 	msr	BASEPRI, r3
 8005ea2:	f3bf 8f6f 	isb	sy
 8005ea6:	f3bf 8f4f 	dsb	sy
 8005eaa:	603b      	str	r3, [r7, #0]
}
 8005eac:	bf00      	nop
 8005eae:	e7fe      	b.n	8005eae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005eb0:	f7fe ff90 	bl	8004dd4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005eb4:	4b39      	ldr	r3, [pc, #228]	; (8005f9c <xTaskResumeAll+0x118>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	3b01      	subs	r3, #1
 8005eba:	4a38      	ldr	r2, [pc, #224]	; (8005f9c <xTaskResumeAll+0x118>)
 8005ebc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ebe:	4b37      	ldr	r3, [pc, #220]	; (8005f9c <xTaskResumeAll+0x118>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d162      	bne.n	8005f8c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005ec6:	4b36      	ldr	r3, [pc, #216]	; (8005fa0 <xTaskResumeAll+0x11c>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d05e      	beq.n	8005f8c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005ece:	e02f      	b.n	8005f30 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ed0:	4b34      	ldr	r3, [pc, #208]	; (8005fa4 <xTaskResumeAll+0x120>)
 8005ed2:	68db      	ldr	r3, [r3, #12]
 8005ed4:	68db      	ldr	r3, [r3, #12]
 8005ed6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	3318      	adds	r3, #24
 8005edc:	4618      	mov	r0, r3
 8005ede:	f7fe fe23 	bl	8004b28 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	3304      	adds	r3, #4
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f7fe fe1e 	bl	8004b28 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ef0:	4b2d      	ldr	r3, [pc, #180]	; (8005fa8 <xTaskResumeAll+0x124>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	d903      	bls.n	8005f00 <xTaskResumeAll+0x7c>
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005efc:	4a2a      	ldr	r2, [pc, #168]	; (8005fa8 <xTaskResumeAll+0x124>)
 8005efe:	6013      	str	r3, [r2, #0]
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f04:	4613      	mov	r3, r2
 8005f06:	009b      	lsls	r3, r3, #2
 8005f08:	4413      	add	r3, r2
 8005f0a:	009b      	lsls	r3, r3, #2
 8005f0c:	4a27      	ldr	r2, [pc, #156]	; (8005fac <xTaskResumeAll+0x128>)
 8005f0e:	441a      	add	r2, r3
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	3304      	adds	r3, #4
 8005f14:	4619      	mov	r1, r3
 8005f16:	4610      	mov	r0, r2
 8005f18:	f7fe fda9 	bl	8004a6e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f20:	4b23      	ldr	r3, [pc, #140]	; (8005fb0 <xTaskResumeAll+0x12c>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f26:	429a      	cmp	r2, r3
 8005f28:	d302      	bcc.n	8005f30 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005f2a:	4b22      	ldr	r3, [pc, #136]	; (8005fb4 <xTaskResumeAll+0x130>)
 8005f2c:	2201      	movs	r2, #1
 8005f2e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005f30:	4b1c      	ldr	r3, [pc, #112]	; (8005fa4 <xTaskResumeAll+0x120>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d1cb      	bne.n	8005ed0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d001      	beq.n	8005f42 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005f3e:	f000 fb55 	bl	80065ec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005f42:	4b1d      	ldr	r3, [pc, #116]	; (8005fb8 <xTaskResumeAll+0x134>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d010      	beq.n	8005f70 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005f4e:	f000 f847 	bl	8005fe0 <xTaskIncrementTick>
 8005f52:	4603      	mov	r3, r0
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d002      	beq.n	8005f5e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005f58:	4b16      	ldr	r3, [pc, #88]	; (8005fb4 <xTaskResumeAll+0x130>)
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	3b01      	subs	r3, #1
 8005f62:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d1f1      	bne.n	8005f4e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005f6a:	4b13      	ldr	r3, [pc, #76]	; (8005fb8 <xTaskResumeAll+0x134>)
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005f70:	4b10      	ldr	r3, [pc, #64]	; (8005fb4 <xTaskResumeAll+0x130>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d009      	beq.n	8005f8c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005f78:	2301      	movs	r3, #1
 8005f7a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005f7c:	4b0f      	ldr	r3, [pc, #60]	; (8005fbc <xTaskResumeAll+0x138>)
 8005f7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f82:	601a      	str	r2, [r3, #0]
 8005f84:	f3bf 8f4f 	dsb	sy
 8005f88:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005f8c:	f7fe ff52 	bl	8004e34 <vPortExitCritical>

	return xAlreadyYielded;
 8005f90:	68bb      	ldr	r3, [r7, #8]
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3710      	adds	r7, #16
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
 8005f9a:	bf00      	nop
 8005f9c:	20004874 	.word	0x20004874
 8005fa0:	2000484c 	.word	0x2000484c
 8005fa4:	2000480c 	.word	0x2000480c
 8005fa8:	20004854 	.word	0x20004854
 8005fac:	2000437c 	.word	0x2000437c
 8005fb0:	20004378 	.word	0x20004378
 8005fb4:	20004860 	.word	0x20004860
 8005fb8:	2000485c 	.word	0x2000485c
 8005fbc:	e000ed04 	.word	0xe000ed04

08005fc0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b083      	sub	sp, #12
 8005fc4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005fc6:	4b05      	ldr	r3, [pc, #20]	; (8005fdc <xTaskGetTickCount+0x1c>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005fcc:	687b      	ldr	r3, [r7, #4]
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	370c      	adds	r7, #12
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr
 8005fda:	bf00      	nop
 8005fdc:	20004850 	.word	0x20004850

08005fe0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b086      	sub	sp, #24
 8005fe4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005fea:	4b4f      	ldr	r3, [pc, #316]	; (8006128 <xTaskIncrementTick+0x148>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	f040 808f 	bne.w	8006112 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005ff4:	4b4d      	ldr	r3, [pc, #308]	; (800612c <xTaskIncrementTick+0x14c>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	3301      	adds	r3, #1
 8005ffa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005ffc:	4a4b      	ldr	r2, [pc, #300]	; (800612c <xTaskIncrementTick+0x14c>)
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d120      	bne.n	800604a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006008:	4b49      	ldr	r3, [pc, #292]	; (8006130 <xTaskIncrementTick+0x150>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d00a      	beq.n	8006028 <xTaskIncrementTick+0x48>
	__asm volatile
 8006012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006016:	f383 8811 	msr	BASEPRI, r3
 800601a:	f3bf 8f6f 	isb	sy
 800601e:	f3bf 8f4f 	dsb	sy
 8006022:	603b      	str	r3, [r7, #0]
}
 8006024:	bf00      	nop
 8006026:	e7fe      	b.n	8006026 <xTaskIncrementTick+0x46>
 8006028:	4b41      	ldr	r3, [pc, #260]	; (8006130 <xTaskIncrementTick+0x150>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	60fb      	str	r3, [r7, #12]
 800602e:	4b41      	ldr	r3, [pc, #260]	; (8006134 <xTaskIncrementTick+0x154>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a3f      	ldr	r2, [pc, #252]	; (8006130 <xTaskIncrementTick+0x150>)
 8006034:	6013      	str	r3, [r2, #0]
 8006036:	4a3f      	ldr	r2, [pc, #252]	; (8006134 <xTaskIncrementTick+0x154>)
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	6013      	str	r3, [r2, #0]
 800603c:	4b3e      	ldr	r3, [pc, #248]	; (8006138 <xTaskIncrementTick+0x158>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	3301      	adds	r3, #1
 8006042:	4a3d      	ldr	r2, [pc, #244]	; (8006138 <xTaskIncrementTick+0x158>)
 8006044:	6013      	str	r3, [r2, #0]
 8006046:	f000 fad1 	bl	80065ec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800604a:	4b3c      	ldr	r3, [pc, #240]	; (800613c <xTaskIncrementTick+0x15c>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	693a      	ldr	r2, [r7, #16]
 8006050:	429a      	cmp	r2, r3
 8006052:	d349      	bcc.n	80060e8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006054:	4b36      	ldr	r3, [pc, #216]	; (8006130 <xTaskIncrementTick+0x150>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d104      	bne.n	8006068 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800605e:	4b37      	ldr	r3, [pc, #220]	; (800613c <xTaskIncrementTick+0x15c>)
 8006060:	f04f 32ff 	mov.w	r2, #4294967295
 8006064:	601a      	str	r2, [r3, #0]
					break;
 8006066:	e03f      	b.n	80060e8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006068:	4b31      	ldr	r3, [pc, #196]	; (8006130 <xTaskIncrementTick+0x150>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	68db      	ldr	r3, [r3, #12]
 800606e:	68db      	ldr	r3, [r3, #12]
 8006070:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006078:	693a      	ldr	r2, [r7, #16]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	429a      	cmp	r2, r3
 800607e:	d203      	bcs.n	8006088 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006080:	4a2e      	ldr	r2, [pc, #184]	; (800613c <xTaskIncrementTick+0x15c>)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006086:	e02f      	b.n	80060e8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	3304      	adds	r3, #4
 800608c:	4618      	mov	r0, r3
 800608e:	f7fe fd4b 	bl	8004b28 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006096:	2b00      	cmp	r3, #0
 8006098:	d004      	beq.n	80060a4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	3318      	adds	r3, #24
 800609e:	4618      	mov	r0, r3
 80060a0:	f7fe fd42 	bl	8004b28 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060a8:	4b25      	ldr	r3, [pc, #148]	; (8006140 <xTaskIncrementTick+0x160>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	429a      	cmp	r2, r3
 80060ae:	d903      	bls.n	80060b8 <xTaskIncrementTick+0xd8>
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060b4:	4a22      	ldr	r2, [pc, #136]	; (8006140 <xTaskIncrementTick+0x160>)
 80060b6:	6013      	str	r3, [r2, #0]
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060bc:	4613      	mov	r3, r2
 80060be:	009b      	lsls	r3, r3, #2
 80060c0:	4413      	add	r3, r2
 80060c2:	009b      	lsls	r3, r3, #2
 80060c4:	4a1f      	ldr	r2, [pc, #124]	; (8006144 <xTaskIncrementTick+0x164>)
 80060c6:	441a      	add	r2, r3
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	3304      	adds	r3, #4
 80060cc:	4619      	mov	r1, r3
 80060ce:	4610      	mov	r0, r2
 80060d0:	f7fe fccd 	bl	8004a6e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060d8:	4b1b      	ldr	r3, [pc, #108]	; (8006148 <xTaskIncrementTick+0x168>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060de:	429a      	cmp	r2, r3
 80060e0:	d3b8      	bcc.n	8006054 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80060e2:	2301      	movs	r3, #1
 80060e4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80060e6:	e7b5      	b.n	8006054 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80060e8:	4b17      	ldr	r3, [pc, #92]	; (8006148 <xTaskIncrementTick+0x168>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060ee:	4915      	ldr	r1, [pc, #84]	; (8006144 <xTaskIncrementTick+0x164>)
 80060f0:	4613      	mov	r3, r2
 80060f2:	009b      	lsls	r3, r3, #2
 80060f4:	4413      	add	r3, r2
 80060f6:	009b      	lsls	r3, r3, #2
 80060f8:	440b      	add	r3, r1
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d901      	bls.n	8006104 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006100:	2301      	movs	r3, #1
 8006102:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006104:	4b11      	ldr	r3, [pc, #68]	; (800614c <xTaskIncrementTick+0x16c>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d007      	beq.n	800611c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800610c:	2301      	movs	r3, #1
 800610e:	617b      	str	r3, [r7, #20]
 8006110:	e004      	b.n	800611c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006112:	4b0f      	ldr	r3, [pc, #60]	; (8006150 <xTaskIncrementTick+0x170>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	3301      	adds	r3, #1
 8006118:	4a0d      	ldr	r2, [pc, #52]	; (8006150 <xTaskIncrementTick+0x170>)
 800611a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800611c:	697b      	ldr	r3, [r7, #20]
}
 800611e:	4618      	mov	r0, r3
 8006120:	3718      	adds	r7, #24
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}
 8006126:	bf00      	nop
 8006128:	20004874 	.word	0x20004874
 800612c:	20004850 	.word	0x20004850
 8006130:	20004804 	.word	0x20004804
 8006134:	20004808 	.word	0x20004808
 8006138:	20004864 	.word	0x20004864
 800613c:	2000486c 	.word	0x2000486c
 8006140:	20004854 	.word	0x20004854
 8006144:	2000437c 	.word	0x2000437c
 8006148:	20004378 	.word	0x20004378
 800614c:	20004860 	.word	0x20004860
 8006150:	2000485c 	.word	0x2000485c

08006154 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006154:	b480      	push	{r7}
 8006156:	b085      	sub	sp, #20
 8006158:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800615a:	4b28      	ldr	r3, [pc, #160]	; (80061fc <vTaskSwitchContext+0xa8>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d003      	beq.n	800616a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006162:	4b27      	ldr	r3, [pc, #156]	; (8006200 <vTaskSwitchContext+0xac>)
 8006164:	2201      	movs	r2, #1
 8006166:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006168:	e041      	b.n	80061ee <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800616a:	4b25      	ldr	r3, [pc, #148]	; (8006200 <vTaskSwitchContext+0xac>)
 800616c:	2200      	movs	r2, #0
 800616e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006170:	4b24      	ldr	r3, [pc, #144]	; (8006204 <vTaskSwitchContext+0xb0>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	60fb      	str	r3, [r7, #12]
 8006176:	e010      	b.n	800619a <vTaskSwitchContext+0x46>
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d10a      	bne.n	8006194 <vTaskSwitchContext+0x40>
	__asm volatile
 800617e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006182:	f383 8811 	msr	BASEPRI, r3
 8006186:	f3bf 8f6f 	isb	sy
 800618a:	f3bf 8f4f 	dsb	sy
 800618e:	607b      	str	r3, [r7, #4]
}
 8006190:	bf00      	nop
 8006192:	e7fe      	b.n	8006192 <vTaskSwitchContext+0x3e>
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	3b01      	subs	r3, #1
 8006198:	60fb      	str	r3, [r7, #12]
 800619a:	491b      	ldr	r1, [pc, #108]	; (8006208 <vTaskSwitchContext+0xb4>)
 800619c:	68fa      	ldr	r2, [r7, #12]
 800619e:	4613      	mov	r3, r2
 80061a0:	009b      	lsls	r3, r3, #2
 80061a2:	4413      	add	r3, r2
 80061a4:	009b      	lsls	r3, r3, #2
 80061a6:	440b      	add	r3, r1
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d0e4      	beq.n	8006178 <vTaskSwitchContext+0x24>
 80061ae:	68fa      	ldr	r2, [r7, #12]
 80061b0:	4613      	mov	r3, r2
 80061b2:	009b      	lsls	r3, r3, #2
 80061b4:	4413      	add	r3, r2
 80061b6:	009b      	lsls	r3, r3, #2
 80061b8:	4a13      	ldr	r2, [pc, #76]	; (8006208 <vTaskSwitchContext+0xb4>)
 80061ba:	4413      	add	r3, r2
 80061bc:	60bb      	str	r3, [r7, #8]
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	685b      	ldr	r3, [r3, #4]
 80061c2:	685a      	ldr	r2, [r3, #4]
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	605a      	str	r2, [r3, #4]
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	685a      	ldr	r2, [r3, #4]
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	3308      	adds	r3, #8
 80061d0:	429a      	cmp	r2, r3
 80061d2:	d104      	bne.n	80061de <vTaskSwitchContext+0x8a>
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	685a      	ldr	r2, [r3, #4]
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	605a      	str	r2, [r3, #4]
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	68db      	ldr	r3, [r3, #12]
 80061e4:	4a09      	ldr	r2, [pc, #36]	; (800620c <vTaskSwitchContext+0xb8>)
 80061e6:	6013      	str	r3, [r2, #0]
 80061e8:	4a06      	ldr	r2, [pc, #24]	; (8006204 <vTaskSwitchContext+0xb0>)
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	6013      	str	r3, [r2, #0]
}
 80061ee:	bf00      	nop
 80061f0:	3714      	adds	r7, #20
 80061f2:	46bd      	mov	sp, r7
 80061f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f8:	4770      	bx	lr
 80061fa:	bf00      	nop
 80061fc:	20004874 	.word	0x20004874
 8006200:	20004860 	.word	0x20004860
 8006204:	20004854 	.word	0x20004854
 8006208:	2000437c 	.word	0x2000437c
 800620c:	20004378 	.word	0x20004378

08006210 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b084      	sub	sp, #16
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
 8006218:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d10a      	bne.n	8006236 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006224:	f383 8811 	msr	BASEPRI, r3
 8006228:	f3bf 8f6f 	isb	sy
 800622c:	f3bf 8f4f 	dsb	sy
 8006230:	60fb      	str	r3, [r7, #12]
}
 8006232:	bf00      	nop
 8006234:	e7fe      	b.n	8006234 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006236:	4b07      	ldr	r3, [pc, #28]	; (8006254 <vTaskPlaceOnEventList+0x44>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	3318      	adds	r3, #24
 800623c:	4619      	mov	r1, r3
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f7fe fc39 	bl	8004ab6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006244:	2101      	movs	r1, #1
 8006246:	6838      	ldr	r0, [r7, #0]
 8006248:	f000 fa7c 	bl	8006744 <prvAddCurrentTaskToDelayedList>
}
 800624c:	bf00      	nop
 800624e:	3710      	adds	r7, #16
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}
 8006254:	20004378 	.word	0x20004378

08006258 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006258:	b580      	push	{r7, lr}
 800625a:	b086      	sub	sp, #24
 800625c:	af00      	add	r7, sp, #0
 800625e:	60f8      	str	r0, [r7, #12]
 8006260:	60b9      	str	r1, [r7, #8]
 8006262:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d10a      	bne.n	8006280 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800626a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800626e:	f383 8811 	msr	BASEPRI, r3
 8006272:	f3bf 8f6f 	isb	sy
 8006276:	f3bf 8f4f 	dsb	sy
 800627a:	617b      	str	r3, [r7, #20]
}
 800627c:	bf00      	nop
 800627e:	e7fe      	b.n	800627e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006280:	4b0a      	ldr	r3, [pc, #40]	; (80062ac <vTaskPlaceOnEventListRestricted+0x54>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	3318      	adds	r3, #24
 8006286:	4619      	mov	r1, r3
 8006288:	68f8      	ldr	r0, [r7, #12]
 800628a:	f7fe fbf0 	bl	8004a6e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d002      	beq.n	800629a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006294:	f04f 33ff 	mov.w	r3, #4294967295
 8006298:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800629a:	6879      	ldr	r1, [r7, #4]
 800629c:	68b8      	ldr	r0, [r7, #8]
 800629e:	f000 fa51 	bl	8006744 <prvAddCurrentTaskToDelayedList>
	}
 80062a2:	bf00      	nop
 80062a4:	3718      	adds	r7, #24
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}
 80062aa:	bf00      	nop
 80062ac:	20004378 	.word	0x20004378

080062b0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b086      	sub	sp, #24
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	68db      	ldr	r3, [r3, #12]
 80062bc:	68db      	ldr	r3, [r3, #12]
 80062be:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d10a      	bne.n	80062dc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80062c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ca:	f383 8811 	msr	BASEPRI, r3
 80062ce:	f3bf 8f6f 	isb	sy
 80062d2:	f3bf 8f4f 	dsb	sy
 80062d6:	60fb      	str	r3, [r7, #12]
}
 80062d8:	bf00      	nop
 80062da:	e7fe      	b.n	80062da <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	3318      	adds	r3, #24
 80062e0:	4618      	mov	r0, r3
 80062e2:	f7fe fc21 	bl	8004b28 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062e6:	4b1e      	ldr	r3, [pc, #120]	; (8006360 <xTaskRemoveFromEventList+0xb0>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d11d      	bne.n	800632a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	3304      	adds	r3, #4
 80062f2:	4618      	mov	r0, r3
 80062f4:	f7fe fc18 	bl	8004b28 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062fc:	4b19      	ldr	r3, [pc, #100]	; (8006364 <xTaskRemoveFromEventList+0xb4>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	429a      	cmp	r2, r3
 8006302:	d903      	bls.n	800630c <xTaskRemoveFromEventList+0x5c>
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006308:	4a16      	ldr	r2, [pc, #88]	; (8006364 <xTaskRemoveFromEventList+0xb4>)
 800630a:	6013      	str	r3, [r2, #0]
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006310:	4613      	mov	r3, r2
 8006312:	009b      	lsls	r3, r3, #2
 8006314:	4413      	add	r3, r2
 8006316:	009b      	lsls	r3, r3, #2
 8006318:	4a13      	ldr	r2, [pc, #76]	; (8006368 <xTaskRemoveFromEventList+0xb8>)
 800631a:	441a      	add	r2, r3
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	3304      	adds	r3, #4
 8006320:	4619      	mov	r1, r3
 8006322:	4610      	mov	r0, r2
 8006324:	f7fe fba3 	bl	8004a6e <vListInsertEnd>
 8006328:	e005      	b.n	8006336 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	3318      	adds	r3, #24
 800632e:	4619      	mov	r1, r3
 8006330:	480e      	ldr	r0, [pc, #56]	; (800636c <xTaskRemoveFromEventList+0xbc>)
 8006332:	f7fe fb9c 	bl	8004a6e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800633a:	4b0d      	ldr	r3, [pc, #52]	; (8006370 <xTaskRemoveFromEventList+0xc0>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006340:	429a      	cmp	r2, r3
 8006342:	d905      	bls.n	8006350 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006344:	2301      	movs	r3, #1
 8006346:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006348:	4b0a      	ldr	r3, [pc, #40]	; (8006374 <xTaskRemoveFromEventList+0xc4>)
 800634a:	2201      	movs	r2, #1
 800634c:	601a      	str	r2, [r3, #0]
 800634e:	e001      	b.n	8006354 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006350:	2300      	movs	r3, #0
 8006352:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006354:	697b      	ldr	r3, [r7, #20]
}
 8006356:	4618      	mov	r0, r3
 8006358:	3718      	adds	r7, #24
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}
 800635e:	bf00      	nop
 8006360:	20004874 	.word	0x20004874
 8006364:	20004854 	.word	0x20004854
 8006368:	2000437c 	.word	0x2000437c
 800636c:	2000480c 	.word	0x2000480c
 8006370:	20004378 	.word	0x20004378
 8006374:	20004860 	.word	0x20004860

08006378 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006378:	b480      	push	{r7}
 800637a:	b083      	sub	sp, #12
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006380:	4b06      	ldr	r3, [pc, #24]	; (800639c <vTaskInternalSetTimeOutState+0x24>)
 8006382:	681a      	ldr	r2, [r3, #0]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006388:	4b05      	ldr	r3, [pc, #20]	; (80063a0 <vTaskInternalSetTimeOutState+0x28>)
 800638a:	681a      	ldr	r2, [r3, #0]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	605a      	str	r2, [r3, #4]
}
 8006390:	bf00      	nop
 8006392:	370c      	adds	r7, #12
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr
 800639c:	20004864 	.word	0x20004864
 80063a0:	20004850 	.word	0x20004850

080063a4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b088      	sub	sp, #32
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
 80063ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d10a      	bne.n	80063ca <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80063b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b8:	f383 8811 	msr	BASEPRI, r3
 80063bc:	f3bf 8f6f 	isb	sy
 80063c0:	f3bf 8f4f 	dsb	sy
 80063c4:	613b      	str	r3, [r7, #16]
}
 80063c6:	bf00      	nop
 80063c8:	e7fe      	b.n	80063c8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d10a      	bne.n	80063e6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80063d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d4:	f383 8811 	msr	BASEPRI, r3
 80063d8:	f3bf 8f6f 	isb	sy
 80063dc:	f3bf 8f4f 	dsb	sy
 80063e0:	60fb      	str	r3, [r7, #12]
}
 80063e2:	bf00      	nop
 80063e4:	e7fe      	b.n	80063e4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80063e6:	f7fe fcf5 	bl	8004dd4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80063ea:	4b1d      	ldr	r3, [pc, #116]	; (8006460 <xTaskCheckForTimeOut+0xbc>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	69ba      	ldr	r2, [r7, #24]
 80063f6:	1ad3      	subs	r3, r2, r3
 80063f8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006402:	d102      	bne.n	800640a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006404:	2300      	movs	r3, #0
 8006406:	61fb      	str	r3, [r7, #28]
 8006408:	e023      	b.n	8006452 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681a      	ldr	r2, [r3, #0]
 800640e:	4b15      	ldr	r3, [pc, #84]	; (8006464 <xTaskCheckForTimeOut+0xc0>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	429a      	cmp	r2, r3
 8006414:	d007      	beq.n	8006426 <xTaskCheckForTimeOut+0x82>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	69ba      	ldr	r2, [r7, #24]
 800641c:	429a      	cmp	r2, r3
 800641e:	d302      	bcc.n	8006426 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006420:	2301      	movs	r3, #1
 8006422:	61fb      	str	r3, [r7, #28]
 8006424:	e015      	b.n	8006452 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	697a      	ldr	r2, [r7, #20]
 800642c:	429a      	cmp	r2, r3
 800642e:	d20b      	bcs.n	8006448 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	681a      	ldr	r2, [r3, #0]
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	1ad2      	subs	r2, r2, r3
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f7ff ff9b 	bl	8006378 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006442:	2300      	movs	r3, #0
 8006444:	61fb      	str	r3, [r7, #28]
 8006446:	e004      	b.n	8006452 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	2200      	movs	r2, #0
 800644c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800644e:	2301      	movs	r3, #1
 8006450:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006452:	f7fe fcef 	bl	8004e34 <vPortExitCritical>

	return xReturn;
 8006456:	69fb      	ldr	r3, [r7, #28]
}
 8006458:	4618      	mov	r0, r3
 800645a:	3720      	adds	r7, #32
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}
 8006460:	20004850 	.word	0x20004850
 8006464:	20004864 	.word	0x20004864

08006468 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006468:	b480      	push	{r7}
 800646a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800646c:	4b03      	ldr	r3, [pc, #12]	; (800647c <vTaskMissedYield+0x14>)
 800646e:	2201      	movs	r2, #1
 8006470:	601a      	str	r2, [r3, #0]
}
 8006472:	bf00      	nop
 8006474:	46bd      	mov	sp, r7
 8006476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647a:	4770      	bx	lr
 800647c:	20004860 	.word	0x20004860

08006480 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b082      	sub	sp, #8
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006488:	f000 f852 	bl	8006530 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800648c:	4b06      	ldr	r3, [pc, #24]	; (80064a8 <prvIdleTask+0x28>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	2b01      	cmp	r3, #1
 8006492:	d9f9      	bls.n	8006488 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006494:	4b05      	ldr	r3, [pc, #20]	; (80064ac <prvIdleTask+0x2c>)
 8006496:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800649a:	601a      	str	r2, [r3, #0]
 800649c:	f3bf 8f4f 	dsb	sy
 80064a0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80064a4:	e7f0      	b.n	8006488 <prvIdleTask+0x8>
 80064a6:	bf00      	nop
 80064a8:	2000437c 	.word	0x2000437c
 80064ac:	e000ed04 	.word	0xe000ed04

080064b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b082      	sub	sp, #8
 80064b4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80064b6:	2300      	movs	r3, #0
 80064b8:	607b      	str	r3, [r7, #4]
 80064ba:	e00c      	b.n	80064d6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80064bc:	687a      	ldr	r2, [r7, #4]
 80064be:	4613      	mov	r3, r2
 80064c0:	009b      	lsls	r3, r3, #2
 80064c2:	4413      	add	r3, r2
 80064c4:	009b      	lsls	r3, r3, #2
 80064c6:	4a12      	ldr	r2, [pc, #72]	; (8006510 <prvInitialiseTaskLists+0x60>)
 80064c8:	4413      	add	r3, r2
 80064ca:	4618      	mov	r0, r3
 80064cc:	f7fe faa2 	bl	8004a14 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	3301      	adds	r3, #1
 80064d4:	607b      	str	r3, [r7, #4]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2b37      	cmp	r3, #55	; 0x37
 80064da:	d9ef      	bls.n	80064bc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80064dc:	480d      	ldr	r0, [pc, #52]	; (8006514 <prvInitialiseTaskLists+0x64>)
 80064de:	f7fe fa99 	bl	8004a14 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80064e2:	480d      	ldr	r0, [pc, #52]	; (8006518 <prvInitialiseTaskLists+0x68>)
 80064e4:	f7fe fa96 	bl	8004a14 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80064e8:	480c      	ldr	r0, [pc, #48]	; (800651c <prvInitialiseTaskLists+0x6c>)
 80064ea:	f7fe fa93 	bl	8004a14 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80064ee:	480c      	ldr	r0, [pc, #48]	; (8006520 <prvInitialiseTaskLists+0x70>)
 80064f0:	f7fe fa90 	bl	8004a14 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80064f4:	480b      	ldr	r0, [pc, #44]	; (8006524 <prvInitialiseTaskLists+0x74>)
 80064f6:	f7fe fa8d 	bl	8004a14 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80064fa:	4b0b      	ldr	r3, [pc, #44]	; (8006528 <prvInitialiseTaskLists+0x78>)
 80064fc:	4a05      	ldr	r2, [pc, #20]	; (8006514 <prvInitialiseTaskLists+0x64>)
 80064fe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006500:	4b0a      	ldr	r3, [pc, #40]	; (800652c <prvInitialiseTaskLists+0x7c>)
 8006502:	4a05      	ldr	r2, [pc, #20]	; (8006518 <prvInitialiseTaskLists+0x68>)
 8006504:	601a      	str	r2, [r3, #0]
}
 8006506:	bf00      	nop
 8006508:	3708      	adds	r7, #8
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}
 800650e:	bf00      	nop
 8006510:	2000437c 	.word	0x2000437c
 8006514:	200047dc 	.word	0x200047dc
 8006518:	200047f0 	.word	0x200047f0
 800651c:	2000480c 	.word	0x2000480c
 8006520:	20004820 	.word	0x20004820
 8006524:	20004838 	.word	0x20004838
 8006528:	20004804 	.word	0x20004804
 800652c:	20004808 	.word	0x20004808

08006530 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b082      	sub	sp, #8
 8006534:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006536:	e019      	b.n	800656c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006538:	f7fe fc4c 	bl	8004dd4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800653c:	4b10      	ldr	r3, [pc, #64]	; (8006580 <prvCheckTasksWaitingTermination+0x50>)
 800653e:	68db      	ldr	r3, [r3, #12]
 8006540:	68db      	ldr	r3, [r3, #12]
 8006542:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	3304      	adds	r3, #4
 8006548:	4618      	mov	r0, r3
 800654a:	f7fe faed 	bl	8004b28 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800654e:	4b0d      	ldr	r3, [pc, #52]	; (8006584 <prvCheckTasksWaitingTermination+0x54>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	3b01      	subs	r3, #1
 8006554:	4a0b      	ldr	r2, [pc, #44]	; (8006584 <prvCheckTasksWaitingTermination+0x54>)
 8006556:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006558:	4b0b      	ldr	r3, [pc, #44]	; (8006588 <prvCheckTasksWaitingTermination+0x58>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	3b01      	subs	r3, #1
 800655e:	4a0a      	ldr	r2, [pc, #40]	; (8006588 <prvCheckTasksWaitingTermination+0x58>)
 8006560:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006562:	f7fe fc67 	bl	8004e34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f000 f810 	bl	800658c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800656c:	4b06      	ldr	r3, [pc, #24]	; (8006588 <prvCheckTasksWaitingTermination+0x58>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d1e1      	bne.n	8006538 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006574:	bf00      	nop
 8006576:	bf00      	nop
 8006578:	3708      	adds	r7, #8
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}
 800657e:	bf00      	nop
 8006580:	20004820 	.word	0x20004820
 8006584:	2000484c 	.word	0x2000484c
 8006588:	20004834 	.word	0x20004834

0800658c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800658c:	b580      	push	{r7, lr}
 800658e:	b084      	sub	sp, #16
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800659a:	2b00      	cmp	r3, #0
 800659c:	d108      	bne.n	80065b0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065a2:	4618      	mov	r0, r3
 80065a4:	f7fe f918 	bl	80047d8 <vPortFree>
				vPortFree( pxTCB );
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f7fe f915 	bl	80047d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80065ae:	e018      	b.n	80065e2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80065b6:	2b01      	cmp	r3, #1
 80065b8:	d103      	bne.n	80065c2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f7fe f90c 	bl	80047d8 <vPortFree>
	}
 80065c0:	e00f      	b.n	80065e2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80065c8:	2b02      	cmp	r3, #2
 80065ca:	d00a      	beq.n	80065e2 <prvDeleteTCB+0x56>
	__asm volatile
 80065cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065d0:	f383 8811 	msr	BASEPRI, r3
 80065d4:	f3bf 8f6f 	isb	sy
 80065d8:	f3bf 8f4f 	dsb	sy
 80065dc:	60fb      	str	r3, [r7, #12]
}
 80065de:	bf00      	nop
 80065e0:	e7fe      	b.n	80065e0 <prvDeleteTCB+0x54>
	}
 80065e2:	bf00      	nop
 80065e4:	3710      	adds	r7, #16
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}
	...

080065ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80065ec:	b480      	push	{r7}
 80065ee:	b083      	sub	sp, #12
 80065f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80065f2:	4b0c      	ldr	r3, [pc, #48]	; (8006624 <prvResetNextTaskUnblockTime+0x38>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d104      	bne.n	8006606 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80065fc:	4b0a      	ldr	r3, [pc, #40]	; (8006628 <prvResetNextTaskUnblockTime+0x3c>)
 80065fe:	f04f 32ff 	mov.w	r2, #4294967295
 8006602:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006604:	e008      	b.n	8006618 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006606:	4b07      	ldr	r3, [pc, #28]	; (8006624 <prvResetNextTaskUnblockTime+0x38>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	68db      	ldr	r3, [r3, #12]
 800660c:	68db      	ldr	r3, [r3, #12]
 800660e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	4a04      	ldr	r2, [pc, #16]	; (8006628 <prvResetNextTaskUnblockTime+0x3c>)
 8006616:	6013      	str	r3, [r2, #0]
}
 8006618:	bf00      	nop
 800661a:	370c      	adds	r7, #12
 800661c:	46bd      	mov	sp, r7
 800661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006622:	4770      	bx	lr
 8006624:	20004804 	.word	0x20004804
 8006628:	2000486c 	.word	0x2000486c

0800662c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800662c:	b480      	push	{r7}
 800662e:	b083      	sub	sp, #12
 8006630:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006632:	4b0b      	ldr	r3, [pc, #44]	; (8006660 <xTaskGetSchedulerState+0x34>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d102      	bne.n	8006640 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800663a:	2301      	movs	r3, #1
 800663c:	607b      	str	r3, [r7, #4]
 800663e:	e008      	b.n	8006652 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006640:	4b08      	ldr	r3, [pc, #32]	; (8006664 <xTaskGetSchedulerState+0x38>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d102      	bne.n	800664e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006648:	2302      	movs	r3, #2
 800664a:	607b      	str	r3, [r7, #4]
 800664c:	e001      	b.n	8006652 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800664e:	2300      	movs	r3, #0
 8006650:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006652:	687b      	ldr	r3, [r7, #4]
	}
 8006654:	4618      	mov	r0, r3
 8006656:	370c      	adds	r7, #12
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr
 8006660:	20004858 	.word	0x20004858
 8006664:	20004874 	.word	0x20004874

08006668 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006668:	b580      	push	{r7, lr}
 800666a:	b086      	sub	sp, #24
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006674:	2300      	movs	r3, #0
 8006676:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d056      	beq.n	800672c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800667e:	4b2e      	ldr	r3, [pc, #184]	; (8006738 <xTaskPriorityDisinherit+0xd0>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	693a      	ldr	r2, [r7, #16]
 8006684:	429a      	cmp	r2, r3
 8006686:	d00a      	beq.n	800669e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800668c:	f383 8811 	msr	BASEPRI, r3
 8006690:	f3bf 8f6f 	isb	sy
 8006694:	f3bf 8f4f 	dsb	sy
 8006698:	60fb      	str	r3, [r7, #12]
}
 800669a:	bf00      	nop
 800669c:	e7fe      	b.n	800669c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d10a      	bne.n	80066bc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80066a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066aa:	f383 8811 	msr	BASEPRI, r3
 80066ae:	f3bf 8f6f 	isb	sy
 80066b2:	f3bf 8f4f 	dsb	sy
 80066b6:	60bb      	str	r3, [r7, #8]
}
 80066b8:	bf00      	nop
 80066ba:	e7fe      	b.n	80066ba <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066c0:	1e5a      	subs	r2, r3, #1
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80066ce:	429a      	cmp	r2, r3
 80066d0:	d02c      	beq.n	800672c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d128      	bne.n	800672c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	3304      	adds	r3, #4
 80066de:	4618      	mov	r0, r3
 80066e0:	f7fe fa22 	bl	8004b28 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066f0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066fc:	4b0f      	ldr	r3, [pc, #60]	; (800673c <xTaskPriorityDisinherit+0xd4>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	429a      	cmp	r2, r3
 8006702:	d903      	bls.n	800670c <xTaskPriorityDisinherit+0xa4>
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006708:	4a0c      	ldr	r2, [pc, #48]	; (800673c <xTaskPriorityDisinherit+0xd4>)
 800670a:	6013      	str	r3, [r2, #0]
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006710:	4613      	mov	r3, r2
 8006712:	009b      	lsls	r3, r3, #2
 8006714:	4413      	add	r3, r2
 8006716:	009b      	lsls	r3, r3, #2
 8006718:	4a09      	ldr	r2, [pc, #36]	; (8006740 <xTaskPriorityDisinherit+0xd8>)
 800671a:	441a      	add	r2, r3
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	3304      	adds	r3, #4
 8006720:	4619      	mov	r1, r3
 8006722:	4610      	mov	r0, r2
 8006724:	f7fe f9a3 	bl	8004a6e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006728:	2301      	movs	r3, #1
 800672a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800672c:	697b      	ldr	r3, [r7, #20]
	}
 800672e:	4618      	mov	r0, r3
 8006730:	3718      	adds	r7, #24
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}
 8006736:	bf00      	nop
 8006738:	20004378 	.word	0x20004378
 800673c:	20004854 	.word	0x20004854
 8006740:	2000437c 	.word	0x2000437c

08006744 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b084      	sub	sp, #16
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
 800674c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800674e:	4b21      	ldr	r3, [pc, #132]	; (80067d4 <prvAddCurrentTaskToDelayedList+0x90>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006754:	4b20      	ldr	r3, [pc, #128]	; (80067d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	3304      	adds	r3, #4
 800675a:	4618      	mov	r0, r3
 800675c:	f7fe f9e4 	bl	8004b28 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006766:	d10a      	bne.n	800677e <prvAddCurrentTaskToDelayedList+0x3a>
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d007      	beq.n	800677e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800676e:	4b1a      	ldr	r3, [pc, #104]	; (80067d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	3304      	adds	r3, #4
 8006774:	4619      	mov	r1, r3
 8006776:	4819      	ldr	r0, [pc, #100]	; (80067dc <prvAddCurrentTaskToDelayedList+0x98>)
 8006778:	f7fe f979 	bl	8004a6e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800677c:	e026      	b.n	80067cc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800677e:	68fa      	ldr	r2, [r7, #12]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	4413      	add	r3, r2
 8006784:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006786:	4b14      	ldr	r3, [pc, #80]	; (80067d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	68ba      	ldr	r2, [r7, #8]
 800678c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800678e:	68ba      	ldr	r2, [r7, #8]
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	429a      	cmp	r2, r3
 8006794:	d209      	bcs.n	80067aa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006796:	4b12      	ldr	r3, [pc, #72]	; (80067e0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006798:	681a      	ldr	r2, [r3, #0]
 800679a:	4b0f      	ldr	r3, [pc, #60]	; (80067d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	3304      	adds	r3, #4
 80067a0:	4619      	mov	r1, r3
 80067a2:	4610      	mov	r0, r2
 80067a4:	f7fe f987 	bl	8004ab6 <vListInsert>
}
 80067a8:	e010      	b.n	80067cc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80067aa:	4b0e      	ldr	r3, [pc, #56]	; (80067e4 <prvAddCurrentTaskToDelayedList+0xa0>)
 80067ac:	681a      	ldr	r2, [r3, #0]
 80067ae:	4b0a      	ldr	r3, [pc, #40]	; (80067d8 <prvAddCurrentTaskToDelayedList+0x94>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	3304      	adds	r3, #4
 80067b4:	4619      	mov	r1, r3
 80067b6:	4610      	mov	r0, r2
 80067b8:	f7fe f97d 	bl	8004ab6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80067bc:	4b0a      	ldr	r3, [pc, #40]	; (80067e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	68ba      	ldr	r2, [r7, #8]
 80067c2:	429a      	cmp	r2, r3
 80067c4:	d202      	bcs.n	80067cc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80067c6:	4a08      	ldr	r2, [pc, #32]	; (80067e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	6013      	str	r3, [r2, #0]
}
 80067cc:	bf00      	nop
 80067ce:	3710      	adds	r7, #16
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}
 80067d4:	20004850 	.word	0x20004850
 80067d8:	20004378 	.word	0x20004378
 80067dc:	20004838 	.word	0x20004838
 80067e0:	20004808 	.word	0x20004808
 80067e4:	20004804 	.word	0x20004804
 80067e8:	2000486c 	.word	0x2000486c

080067ec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b08a      	sub	sp, #40	; 0x28
 80067f0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80067f2:	2300      	movs	r3, #0
 80067f4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80067f6:	f000 fb07 	bl	8006e08 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80067fa:	4b1c      	ldr	r3, [pc, #112]	; (800686c <xTimerCreateTimerTask+0x80>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d021      	beq.n	8006846 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006802:	2300      	movs	r3, #0
 8006804:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006806:	2300      	movs	r3, #0
 8006808:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800680a:	1d3a      	adds	r2, r7, #4
 800680c:	f107 0108 	add.w	r1, r7, #8
 8006810:	f107 030c 	add.w	r3, r7, #12
 8006814:	4618      	mov	r0, r3
 8006816:	f7fd fef9 	bl	800460c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800681a:	6879      	ldr	r1, [r7, #4]
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	68fa      	ldr	r2, [r7, #12]
 8006820:	9202      	str	r2, [sp, #8]
 8006822:	9301      	str	r3, [sp, #4]
 8006824:	2302      	movs	r3, #2
 8006826:	9300      	str	r3, [sp, #0]
 8006828:	2300      	movs	r3, #0
 800682a:	460a      	mov	r2, r1
 800682c:	4910      	ldr	r1, [pc, #64]	; (8006870 <xTimerCreateTimerTask+0x84>)
 800682e:	4811      	ldr	r0, [pc, #68]	; (8006874 <xTimerCreateTimerTask+0x88>)
 8006830:	f7ff f8de 	bl	80059f0 <xTaskCreateStatic>
 8006834:	4603      	mov	r3, r0
 8006836:	4a10      	ldr	r2, [pc, #64]	; (8006878 <xTimerCreateTimerTask+0x8c>)
 8006838:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800683a:	4b0f      	ldr	r3, [pc, #60]	; (8006878 <xTimerCreateTimerTask+0x8c>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d001      	beq.n	8006846 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006842:	2301      	movs	r3, #1
 8006844:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d10a      	bne.n	8006862 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800684c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006850:	f383 8811 	msr	BASEPRI, r3
 8006854:	f3bf 8f6f 	isb	sy
 8006858:	f3bf 8f4f 	dsb	sy
 800685c:	613b      	str	r3, [r7, #16]
}
 800685e:	bf00      	nop
 8006860:	e7fe      	b.n	8006860 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006862:	697b      	ldr	r3, [r7, #20]
}
 8006864:	4618      	mov	r0, r3
 8006866:	3718      	adds	r7, #24
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}
 800686c:	200048a8 	.word	0x200048a8
 8006870:	08007c40 	.word	0x08007c40
 8006874:	080069b1 	.word	0x080069b1
 8006878:	200048ac 	.word	0x200048ac

0800687c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b08a      	sub	sp, #40	; 0x28
 8006880:	af00      	add	r7, sp, #0
 8006882:	60f8      	str	r0, [r7, #12]
 8006884:	60b9      	str	r1, [r7, #8]
 8006886:	607a      	str	r2, [r7, #4]
 8006888:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800688a:	2300      	movs	r3, #0
 800688c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d10a      	bne.n	80068aa <xTimerGenericCommand+0x2e>
	__asm volatile
 8006894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006898:	f383 8811 	msr	BASEPRI, r3
 800689c:	f3bf 8f6f 	isb	sy
 80068a0:	f3bf 8f4f 	dsb	sy
 80068a4:	623b      	str	r3, [r7, #32]
}
 80068a6:	bf00      	nop
 80068a8:	e7fe      	b.n	80068a8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80068aa:	4b1a      	ldr	r3, [pc, #104]	; (8006914 <xTimerGenericCommand+0x98>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d02a      	beq.n	8006908 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	2b05      	cmp	r3, #5
 80068c2:	dc18      	bgt.n	80068f6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80068c4:	f7ff feb2 	bl	800662c <xTaskGetSchedulerState>
 80068c8:	4603      	mov	r3, r0
 80068ca:	2b02      	cmp	r3, #2
 80068cc:	d109      	bne.n	80068e2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80068ce:	4b11      	ldr	r3, [pc, #68]	; (8006914 <xTimerGenericCommand+0x98>)
 80068d0:	6818      	ldr	r0, [r3, #0]
 80068d2:	f107 0110 	add.w	r1, r7, #16
 80068d6:	2300      	movs	r3, #0
 80068d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068da:	f7fe fca1 	bl	8005220 <xQueueGenericSend>
 80068de:	6278      	str	r0, [r7, #36]	; 0x24
 80068e0:	e012      	b.n	8006908 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80068e2:	4b0c      	ldr	r3, [pc, #48]	; (8006914 <xTimerGenericCommand+0x98>)
 80068e4:	6818      	ldr	r0, [r3, #0]
 80068e6:	f107 0110 	add.w	r1, r7, #16
 80068ea:	2300      	movs	r3, #0
 80068ec:	2200      	movs	r2, #0
 80068ee:	f7fe fc97 	bl	8005220 <xQueueGenericSend>
 80068f2:	6278      	str	r0, [r7, #36]	; 0x24
 80068f4:	e008      	b.n	8006908 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80068f6:	4b07      	ldr	r3, [pc, #28]	; (8006914 <xTimerGenericCommand+0x98>)
 80068f8:	6818      	ldr	r0, [r3, #0]
 80068fa:	f107 0110 	add.w	r1, r7, #16
 80068fe:	2300      	movs	r3, #0
 8006900:	683a      	ldr	r2, [r7, #0]
 8006902:	f7fe fd8b 	bl	800541c <xQueueGenericSendFromISR>
 8006906:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800690a:	4618      	mov	r0, r3
 800690c:	3728      	adds	r7, #40	; 0x28
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}
 8006912:	bf00      	nop
 8006914:	200048a8 	.word	0x200048a8

08006918 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b088      	sub	sp, #32
 800691c:	af02      	add	r7, sp, #8
 800691e:	6078      	str	r0, [r7, #4]
 8006920:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006922:	4b22      	ldr	r3, [pc, #136]	; (80069ac <prvProcessExpiredTimer+0x94>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	68db      	ldr	r3, [r3, #12]
 8006928:	68db      	ldr	r3, [r3, #12]
 800692a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	3304      	adds	r3, #4
 8006930:	4618      	mov	r0, r3
 8006932:	f7fe f8f9 	bl	8004b28 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800693c:	f003 0304 	and.w	r3, r3, #4
 8006940:	2b00      	cmp	r3, #0
 8006942:	d022      	beq.n	800698a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	699a      	ldr	r2, [r3, #24]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	18d1      	adds	r1, r2, r3
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	683a      	ldr	r2, [r7, #0]
 8006950:	6978      	ldr	r0, [r7, #20]
 8006952:	f000 f8d1 	bl	8006af8 <prvInsertTimerInActiveList>
 8006956:	4603      	mov	r3, r0
 8006958:	2b00      	cmp	r3, #0
 800695a:	d01f      	beq.n	800699c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800695c:	2300      	movs	r3, #0
 800695e:	9300      	str	r3, [sp, #0]
 8006960:	2300      	movs	r3, #0
 8006962:	687a      	ldr	r2, [r7, #4]
 8006964:	2100      	movs	r1, #0
 8006966:	6978      	ldr	r0, [r7, #20]
 8006968:	f7ff ff88 	bl	800687c <xTimerGenericCommand>
 800696c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d113      	bne.n	800699c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006978:	f383 8811 	msr	BASEPRI, r3
 800697c:	f3bf 8f6f 	isb	sy
 8006980:	f3bf 8f4f 	dsb	sy
 8006984:	60fb      	str	r3, [r7, #12]
}
 8006986:	bf00      	nop
 8006988:	e7fe      	b.n	8006988 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006990:	f023 0301 	bic.w	r3, r3, #1
 8006994:	b2da      	uxtb	r2, r3
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	6a1b      	ldr	r3, [r3, #32]
 80069a0:	6978      	ldr	r0, [r7, #20]
 80069a2:	4798      	blx	r3
}
 80069a4:	bf00      	nop
 80069a6:	3718      	adds	r7, #24
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}
 80069ac:	200048a0 	.word	0x200048a0

080069b0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b084      	sub	sp, #16
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80069b8:	f107 0308 	add.w	r3, r7, #8
 80069bc:	4618      	mov	r0, r3
 80069be:	f000 f857 	bl	8006a70 <prvGetNextExpireTime>
 80069c2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	4619      	mov	r1, r3
 80069c8:	68f8      	ldr	r0, [r7, #12]
 80069ca:	f000 f803 	bl	80069d4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80069ce:	f000 f8d5 	bl	8006b7c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80069d2:	e7f1      	b.n	80069b8 <prvTimerTask+0x8>

080069d4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b084      	sub	sp, #16
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
 80069dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80069de:	f7ff fa43 	bl	8005e68 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80069e2:	f107 0308 	add.w	r3, r7, #8
 80069e6:	4618      	mov	r0, r3
 80069e8:	f000 f866 	bl	8006ab8 <prvSampleTimeNow>
 80069ec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d130      	bne.n	8006a56 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d10a      	bne.n	8006a10 <prvProcessTimerOrBlockTask+0x3c>
 80069fa:	687a      	ldr	r2, [r7, #4]
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	429a      	cmp	r2, r3
 8006a00:	d806      	bhi.n	8006a10 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006a02:	f7ff fa3f 	bl	8005e84 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006a06:	68f9      	ldr	r1, [r7, #12]
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f7ff ff85 	bl	8006918 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006a0e:	e024      	b.n	8006a5a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d008      	beq.n	8006a28 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006a16:	4b13      	ldr	r3, [pc, #76]	; (8006a64 <prvProcessTimerOrBlockTask+0x90>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d101      	bne.n	8006a24 <prvProcessTimerOrBlockTask+0x50>
 8006a20:	2301      	movs	r3, #1
 8006a22:	e000      	b.n	8006a26 <prvProcessTimerOrBlockTask+0x52>
 8006a24:	2300      	movs	r3, #0
 8006a26:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006a28:	4b0f      	ldr	r3, [pc, #60]	; (8006a68 <prvProcessTimerOrBlockTask+0x94>)
 8006a2a:	6818      	ldr	r0, [r3, #0]
 8006a2c:	687a      	ldr	r2, [r7, #4]
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	1ad3      	subs	r3, r2, r3
 8006a32:	683a      	ldr	r2, [r7, #0]
 8006a34:	4619      	mov	r1, r3
 8006a36:	f7fe ffa7 	bl	8005988 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006a3a:	f7ff fa23 	bl	8005e84 <xTaskResumeAll>
 8006a3e:	4603      	mov	r3, r0
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d10a      	bne.n	8006a5a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006a44:	4b09      	ldr	r3, [pc, #36]	; (8006a6c <prvProcessTimerOrBlockTask+0x98>)
 8006a46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a4a:	601a      	str	r2, [r3, #0]
 8006a4c:	f3bf 8f4f 	dsb	sy
 8006a50:	f3bf 8f6f 	isb	sy
}
 8006a54:	e001      	b.n	8006a5a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006a56:	f7ff fa15 	bl	8005e84 <xTaskResumeAll>
}
 8006a5a:	bf00      	nop
 8006a5c:	3710      	adds	r7, #16
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}
 8006a62:	bf00      	nop
 8006a64:	200048a4 	.word	0x200048a4
 8006a68:	200048a8 	.word	0x200048a8
 8006a6c:	e000ed04 	.word	0xe000ed04

08006a70 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006a70:	b480      	push	{r7}
 8006a72:	b085      	sub	sp, #20
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006a78:	4b0e      	ldr	r3, [pc, #56]	; (8006ab4 <prvGetNextExpireTime+0x44>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d101      	bne.n	8006a86 <prvGetNextExpireTime+0x16>
 8006a82:	2201      	movs	r2, #1
 8006a84:	e000      	b.n	8006a88 <prvGetNextExpireTime+0x18>
 8006a86:	2200      	movs	r2, #0
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d105      	bne.n	8006aa0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006a94:	4b07      	ldr	r3, [pc, #28]	; (8006ab4 <prvGetNextExpireTime+0x44>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	68db      	ldr	r3, [r3, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	60fb      	str	r3, [r7, #12]
 8006a9e:	e001      	b.n	8006aa4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	3714      	adds	r7, #20
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab0:	4770      	bx	lr
 8006ab2:	bf00      	nop
 8006ab4:	200048a0 	.word	0x200048a0

08006ab8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b084      	sub	sp, #16
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006ac0:	f7ff fa7e 	bl	8005fc0 <xTaskGetTickCount>
 8006ac4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006ac6:	4b0b      	ldr	r3, [pc, #44]	; (8006af4 <prvSampleTimeNow+0x3c>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	68fa      	ldr	r2, [r7, #12]
 8006acc:	429a      	cmp	r2, r3
 8006ace:	d205      	bcs.n	8006adc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006ad0:	f000 f936 	bl	8006d40 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	601a      	str	r2, [r3, #0]
 8006ada:	e002      	b.n	8006ae2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006ae2:	4a04      	ldr	r2, [pc, #16]	; (8006af4 <prvSampleTimeNow+0x3c>)
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
}
 8006aea:	4618      	mov	r0, r3
 8006aec:	3710      	adds	r7, #16
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}
 8006af2:	bf00      	nop
 8006af4:	200048b0 	.word	0x200048b0

08006af8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b086      	sub	sp, #24
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	60f8      	str	r0, [r7, #12]
 8006b00:	60b9      	str	r1, [r7, #8]
 8006b02:	607a      	str	r2, [r7, #4]
 8006b04:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006b06:	2300      	movs	r3, #0
 8006b08:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	68ba      	ldr	r2, [r7, #8]
 8006b0e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	68fa      	ldr	r2, [r7, #12]
 8006b14:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006b16:	68ba      	ldr	r2, [r7, #8]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	429a      	cmp	r2, r3
 8006b1c:	d812      	bhi.n	8006b44 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b1e:	687a      	ldr	r2, [r7, #4]
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	1ad2      	subs	r2, r2, r3
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	699b      	ldr	r3, [r3, #24]
 8006b28:	429a      	cmp	r2, r3
 8006b2a:	d302      	bcc.n	8006b32 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	617b      	str	r3, [r7, #20]
 8006b30:	e01b      	b.n	8006b6a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006b32:	4b10      	ldr	r3, [pc, #64]	; (8006b74 <prvInsertTimerInActiveList+0x7c>)
 8006b34:	681a      	ldr	r2, [r3, #0]
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	3304      	adds	r3, #4
 8006b3a:	4619      	mov	r1, r3
 8006b3c:	4610      	mov	r0, r2
 8006b3e:	f7fd ffba 	bl	8004ab6 <vListInsert>
 8006b42:	e012      	b.n	8006b6a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006b44:	687a      	ldr	r2, [r7, #4]
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	429a      	cmp	r2, r3
 8006b4a:	d206      	bcs.n	8006b5a <prvInsertTimerInActiveList+0x62>
 8006b4c:	68ba      	ldr	r2, [r7, #8]
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	429a      	cmp	r2, r3
 8006b52:	d302      	bcc.n	8006b5a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006b54:	2301      	movs	r3, #1
 8006b56:	617b      	str	r3, [r7, #20]
 8006b58:	e007      	b.n	8006b6a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006b5a:	4b07      	ldr	r3, [pc, #28]	; (8006b78 <prvInsertTimerInActiveList+0x80>)
 8006b5c:	681a      	ldr	r2, [r3, #0]
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	3304      	adds	r3, #4
 8006b62:	4619      	mov	r1, r3
 8006b64:	4610      	mov	r0, r2
 8006b66:	f7fd ffa6 	bl	8004ab6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006b6a:	697b      	ldr	r3, [r7, #20]
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3718      	adds	r7, #24
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}
 8006b74:	200048a4 	.word	0x200048a4
 8006b78:	200048a0 	.word	0x200048a0

08006b7c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b08e      	sub	sp, #56	; 0x38
 8006b80:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006b82:	e0ca      	b.n	8006d1a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	da18      	bge.n	8006bbc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006b8a:	1d3b      	adds	r3, r7, #4
 8006b8c:	3304      	adds	r3, #4
 8006b8e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d10a      	bne.n	8006bac <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b9a:	f383 8811 	msr	BASEPRI, r3
 8006b9e:	f3bf 8f6f 	isb	sy
 8006ba2:	f3bf 8f4f 	dsb	sy
 8006ba6:	61fb      	str	r3, [r7, #28]
}
 8006ba8:	bf00      	nop
 8006baa:	e7fe      	b.n	8006baa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006bb2:	6850      	ldr	r0, [r2, #4]
 8006bb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006bb6:	6892      	ldr	r2, [r2, #8]
 8006bb8:	4611      	mov	r1, r2
 8006bba:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	f2c0 80aa 	blt.w	8006d18 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bca:	695b      	ldr	r3, [r3, #20]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d004      	beq.n	8006bda <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bd2:	3304      	adds	r3, #4
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	f7fd ffa7 	bl	8004b28 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006bda:	463b      	mov	r3, r7
 8006bdc:	4618      	mov	r0, r3
 8006bde:	f7ff ff6b 	bl	8006ab8 <prvSampleTimeNow>
 8006be2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2b09      	cmp	r3, #9
 8006be8:	f200 8097 	bhi.w	8006d1a <prvProcessReceivedCommands+0x19e>
 8006bec:	a201      	add	r2, pc, #4	; (adr r2, 8006bf4 <prvProcessReceivedCommands+0x78>)
 8006bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bf2:	bf00      	nop
 8006bf4:	08006c1d 	.word	0x08006c1d
 8006bf8:	08006c1d 	.word	0x08006c1d
 8006bfc:	08006c1d 	.word	0x08006c1d
 8006c00:	08006c91 	.word	0x08006c91
 8006c04:	08006ca5 	.word	0x08006ca5
 8006c08:	08006cef 	.word	0x08006cef
 8006c0c:	08006c1d 	.word	0x08006c1d
 8006c10:	08006c1d 	.word	0x08006c1d
 8006c14:	08006c91 	.word	0x08006c91
 8006c18:	08006ca5 	.word	0x08006ca5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c1e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c22:	f043 0301 	orr.w	r3, r3, #1
 8006c26:	b2da      	uxtb	r2, r3
 8006c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c2a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006c2e:	68ba      	ldr	r2, [r7, #8]
 8006c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c32:	699b      	ldr	r3, [r3, #24]
 8006c34:	18d1      	adds	r1, r2, r3
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c3c:	f7ff ff5c 	bl	8006af8 <prvInsertTimerInActiveList>
 8006c40:	4603      	mov	r3, r0
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d069      	beq.n	8006d1a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c48:	6a1b      	ldr	r3, [r3, #32]
 8006c4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c4c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c54:	f003 0304 	and.w	r3, r3, #4
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d05e      	beq.n	8006d1a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006c5c:	68ba      	ldr	r2, [r7, #8]
 8006c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c60:	699b      	ldr	r3, [r3, #24]
 8006c62:	441a      	add	r2, r3
 8006c64:	2300      	movs	r3, #0
 8006c66:	9300      	str	r3, [sp, #0]
 8006c68:	2300      	movs	r3, #0
 8006c6a:	2100      	movs	r1, #0
 8006c6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c6e:	f7ff fe05 	bl	800687c <xTimerGenericCommand>
 8006c72:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006c74:	6a3b      	ldr	r3, [r7, #32]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d14f      	bne.n	8006d1a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c7e:	f383 8811 	msr	BASEPRI, r3
 8006c82:	f3bf 8f6f 	isb	sy
 8006c86:	f3bf 8f4f 	dsb	sy
 8006c8a:	61bb      	str	r3, [r7, #24]
}
 8006c8c:	bf00      	nop
 8006c8e:	e7fe      	b.n	8006c8e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c92:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c96:	f023 0301 	bic.w	r3, r3, #1
 8006c9a:	b2da      	uxtb	r2, r3
 8006c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006ca2:	e03a      	b.n	8006d1a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ca6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006caa:	f043 0301 	orr.w	r3, r3, #1
 8006cae:	b2da      	uxtb	r2, r3
 8006cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cb2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006cb6:	68ba      	ldr	r2, [r7, #8]
 8006cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cba:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cbe:	699b      	ldr	r3, [r3, #24]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d10a      	bne.n	8006cda <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cc8:	f383 8811 	msr	BASEPRI, r3
 8006ccc:	f3bf 8f6f 	isb	sy
 8006cd0:	f3bf 8f4f 	dsb	sy
 8006cd4:	617b      	str	r3, [r7, #20]
}
 8006cd6:	bf00      	nop
 8006cd8:	e7fe      	b.n	8006cd8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cdc:	699a      	ldr	r2, [r3, #24]
 8006cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce0:	18d1      	adds	r1, r2, r3
 8006ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ce6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ce8:	f7ff ff06 	bl	8006af8 <prvInsertTimerInActiveList>
					break;
 8006cec:	e015      	b.n	8006d1a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cf0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006cf4:	f003 0302 	and.w	r3, r3, #2
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d103      	bne.n	8006d04 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006cfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cfe:	f7fd fd6b 	bl	80047d8 <vPortFree>
 8006d02:	e00a      	b.n	8006d1a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d0a:	f023 0301 	bic.w	r3, r3, #1
 8006d0e:	b2da      	uxtb	r2, r3
 8006d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006d16:	e000      	b.n	8006d1a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006d18:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006d1a:	4b08      	ldr	r3, [pc, #32]	; (8006d3c <prvProcessReceivedCommands+0x1c0>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	1d39      	adds	r1, r7, #4
 8006d20:	2200      	movs	r2, #0
 8006d22:	4618      	mov	r0, r3
 8006d24:	f7fe fc16 	bl	8005554 <xQueueReceive>
 8006d28:	4603      	mov	r3, r0
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	f47f af2a 	bne.w	8006b84 <prvProcessReceivedCommands+0x8>
	}
}
 8006d30:	bf00      	nop
 8006d32:	bf00      	nop
 8006d34:	3730      	adds	r7, #48	; 0x30
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}
 8006d3a:	bf00      	nop
 8006d3c:	200048a8 	.word	0x200048a8

08006d40 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b088      	sub	sp, #32
 8006d44:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006d46:	e048      	b.n	8006dda <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006d48:	4b2d      	ldr	r3, [pc, #180]	; (8006e00 <prvSwitchTimerLists+0xc0>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	68db      	ldr	r3, [r3, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d52:	4b2b      	ldr	r3, [pc, #172]	; (8006e00 <prvSwitchTimerLists+0xc0>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	68db      	ldr	r3, [r3, #12]
 8006d58:	68db      	ldr	r3, [r3, #12]
 8006d5a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	3304      	adds	r3, #4
 8006d60:	4618      	mov	r0, r3
 8006d62:	f7fd fee1 	bl	8004b28 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	6a1b      	ldr	r3, [r3, #32]
 8006d6a:	68f8      	ldr	r0, [r7, #12]
 8006d6c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d74:	f003 0304 	and.w	r3, r3, #4
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d02e      	beq.n	8006dda <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	699b      	ldr	r3, [r3, #24]
 8006d80:	693a      	ldr	r2, [r7, #16]
 8006d82:	4413      	add	r3, r2
 8006d84:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006d86:	68ba      	ldr	r2, [r7, #8]
 8006d88:	693b      	ldr	r3, [r7, #16]
 8006d8a:	429a      	cmp	r2, r3
 8006d8c:	d90e      	bls.n	8006dac <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	68ba      	ldr	r2, [r7, #8]
 8006d92:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	68fa      	ldr	r2, [r7, #12]
 8006d98:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006d9a:	4b19      	ldr	r3, [pc, #100]	; (8006e00 <prvSwitchTimerLists+0xc0>)
 8006d9c:	681a      	ldr	r2, [r3, #0]
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	3304      	adds	r3, #4
 8006da2:	4619      	mov	r1, r3
 8006da4:	4610      	mov	r0, r2
 8006da6:	f7fd fe86 	bl	8004ab6 <vListInsert>
 8006daa:	e016      	b.n	8006dda <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006dac:	2300      	movs	r3, #0
 8006dae:	9300      	str	r3, [sp, #0]
 8006db0:	2300      	movs	r3, #0
 8006db2:	693a      	ldr	r2, [r7, #16]
 8006db4:	2100      	movs	r1, #0
 8006db6:	68f8      	ldr	r0, [r7, #12]
 8006db8:	f7ff fd60 	bl	800687c <xTimerGenericCommand>
 8006dbc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d10a      	bne.n	8006dda <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc8:	f383 8811 	msr	BASEPRI, r3
 8006dcc:	f3bf 8f6f 	isb	sy
 8006dd0:	f3bf 8f4f 	dsb	sy
 8006dd4:	603b      	str	r3, [r7, #0]
}
 8006dd6:	bf00      	nop
 8006dd8:	e7fe      	b.n	8006dd8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006dda:	4b09      	ldr	r3, [pc, #36]	; (8006e00 <prvSwitchTimerLists+0xc0>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d1b1      	bne.n	8006d48 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006de4:	4b06      	ldr	r3, [pc, #24]	; (8006e00 <prvSwitchTimerLists+0xc0>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006dea:	4b06      	ldr	r3, [pc, #24]	; (8006e04 <prvSwitchTimerLists+0xc4>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4a04      	ldr	r2, [pc, #16]	; (8006e00 <prvSwitchTimerLists+0xc0>)
 8006df0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006df2:	4a04      	ldr	r2, [pc, #16]	; (8006e04 <prvSwitchTimerLists+0xc4>)
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	6013      	str	r3, [r2, #0]
}
 8006df8:	bf00      	nop
 8006dfa:	3718      	adds	r7, #24
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}
 8006e00:	200048a0 	.word	0x200048a0
 8006e04:	200048a4 	.word	0x200048a4

08006e08 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b082      	sub	sp, #8
 8006e0c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006e0e:	f7fd ffe1 	bl	8004dd4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006e12:	4b15      	ldr	r3, [pc, #84]	; (8006e68 <prvCheckForValidListAndQueue+0x60>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d120      	bne.n	8006e5c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006e1a:	4814      	ldr	r0, [pc, #80]	; (8006e6c <prvCheckForValidListAndQueue+0x64>)
 8006e1c:	f7fd fdfa 	bl	8004a14 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006e20:	4813      	ldr	r0, [pc, #76]	; (8006e70 <prvCheckForValidListAndQueue+0x68>)
 8006e22:	f7fd fdf7 	bl	8004a14 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006e26:	4b13      	ldr	r3, [pc, #76]	; (8006e74 <prvCheckForValidListAndQueue+0x6c>)
 8006e28:	4a10      	ldr	r2, [pc, #64]	; (8006e6c <prvCheckForValidListAndQueue+0x64>)
 8006e2a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006e2c:	4b12      	ldr	r3, [pc, #72]	; (8006e78 <prvCheckForValidListAndQueue+0x70>)
 8006e2e:	4a10      	ldr	r2, [pc, #64]	; (8006e70 <prvCheckForValidListAndQueue+0x68>)
 8006e30:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006e32:	2300      	movs	r3, #0
 8006e34:	9300      	str	r3, [sp, #0]
 8006e36:	4b11      	ldr	r3, [pc, #68]	; (8006e7c <prvCheckForValidListAndQueue+0x74>)
 8006e38:	4a11      	ldr	r2, [pc, #68]	; (8006e80 <prvCheckForValidListAndQueue+0x78>)
 8006e3a:	2110      	movs	r1, #16
 8006e3c:	200a      	movs	r0, #10
 8006e3e:	f7fe f953 	bl	80050e8 <xQueueGenericCreateStatic>
 8006e42:	4603      	mov	r3, r0
 8006e44:	4a08      	ldr	r2, [pc, #32]	; (8006e68 <prvCheckForValidListAndQueue+0x60>)
 8006e46:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006e48:	4b07      	ldr	r3, [pc, #28]	; (8006e68 <prvCheckForValidListAndQueue+0x60>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d005      	beq.n	8006e5c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006e50:	4b05      	ldr	r3, [pc, #20]	; (8006e68 <prvCheckForValidListAndQueue+0x60>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	490b      	ldr	r1, [pc, #44]	; (8006e84 <prvCheckForValidListAndQueue+0x7c>)
 8006e56:	4618      	mov	r0, r3
 8006e58:	f7fe fd6c 	bl	8005934 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006e5c:	f7fd ffea 	bl	8004e34 <vPortExitCritical>
}
 8006e60:	bf00      	nop
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}
 8006e66:	bf00      	nop
 8006e68:	200048a8 	.word	0x200048a8
 8006e6c:	20004878 	.word	0x20004878
 8006e70:	2000488c 	.word	0x2000488c
 8006e74:	200048a0 	.word	0x200048a0
 8006e78:	200048a4 	.word	0x200048a4
 8006e7c:	20004954 	.word	0x20004954
 8006e80:	200048b4 	.word	0x200048b4
 8006e84:	08007c48 	.word	0x08007c48

08006e88 <OLED_Refresh_Gram>:

#include "../../PeripheralDriver/Inc/oledfont.h"

uint8_t OLED_GRAM[128][8];	 
void OLED_Refresh_Gram(void)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b082      	sub	sp, #8
 8006e8c:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 8006e8e:	2300      	movs	r3, #0
 8006e90:	71fb      	strb	r3, [r7, #7]
 8006e92:	e026      	b.n	8006ee2 <OLED_Refresh_Gram+0x5a>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    
 8006e94:	79fb      	ldrb	r3, [r7, #7]
 8006e96:	3b50      	subs	r3, #80	; 0x50
 8006e98:	b2db      	uxtb	r3, r3
 8006e9a:	2100      	movs	r1, #0
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	f000 f82b 	bl	8006ef8 <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      
 8006ea2:	2100      	movs	r1, #0
 8006ea4:	2000      	movs	r0, #0
 8006ea6:	f000 f827 	bl	8006ef8 <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);        
 8006eaa:	2100      	movs	r1, #0
 8006eac:	2010      	movs	r0, #16
 8006eae:	f000 f823 	bl	8006ef8 <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA); 
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	71bb      	strb	r3, [r7, #6]
 8006eb6:	e00d      	b.n	8006ed4 <OLED_Refresh_Gram+0x4c>
 8006eb8:	79ba      	ldrb	r2, [r7, #6]
 8006eba:	79fb      	ldrb	r3, [r7, #7]
 8006ebc:	490d      	ldr	r1, [pc, #52]	; (8006ef4 <OLED_Refresh_Gram+0x6c>)
 8006ebe:	00d2      	lsls	r2, r2, #3
 8006ec0:	440a      	add	r2, r1
 8006ec2:	4413      	add	r3, r2
 8006ec4:	781b      	ldrb	r3, [r3, #0]
 8006ec6:	2101      	movs	r1, #1
 8006ec8:	4618      	mov	r0, r3
 8006eca:	f000 f815 	bl	8006ef8 <OLED_WR_Byte>
 8006ece:	79bb      	ldrb	r3, [r7, #6]
 8006ed0:	3301      	adds	r3, #1
 8006ed2:	71bb      	strb	r3, [r7, #6]
 8006ed4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	daed      	bge.n	8006eb8 <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)  
 8006edc:	79fb      	ldrb	r3, [r7, #7]
 8006ede:	3301      	adds	r3, #1
 8006ee0:	71fb      	strb	r3, [r7, #7]
 8006ee2:	79fb      	ldrb	r3, [r7, #7]
 8006ee4:	2b07      	cmp	r3, #7
 8006ee6:	d9d5      	bls.n	8006e94 <OLED_Refresh_Gram+0xc>
	}   
}
 8006ee8:	bf00      	nop
 8006eea:	bf00      	nop
 8006eec:	3708      	adds	r7, #8
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}
 8006ef2:	bf00      	nop
 8006ef4:	20004b78 	.word	0x20004b78

08006ef8 <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{	
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b084      	sub	sp, #16
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	4603      	mov	r3, r0
 8006f00:	460a      	mov	r2, r1
 8006f02:	71fb      	strb	r3, [r7, #7]
 8006f04:	4613      	mov	r3, r2
 8006f06:	71bb      	strb	r3, [r7, #6]
	uint8_t i;			  
	if(cmd)
 8006f08:	79bb      	ldrb	r3, [r7, #6]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d006      	beq.n	8006f1c <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 8006f0e:	2201      	movs	r2, #1
 8006f10:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006f14:	481c      	ldr	r0, [pc, #112]	; (8006f88 <OLED_WR_Byte+0x90>)
 8006f16:	f7fa fe49 	bl	8001bac <HAL_GPIO_WritePin>
 8006f1a:	e005      	b.n	8006f28 <OLED_WR_Byte+0x30>
	else 
	  OLED_RS_Clr();		  
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006f22:	4819      	ldr	r0, [pc, #100]	; (8006f88 <OLED_WR_Byte+0x90>)
 8006f24:	f7fa fe42 	bl	8001bac <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 8006f28:	2300      	movs	r3, #0
 8006f2a:	73fb      	strb	r3, [r7, #15]
 8006f2c:	e01e      	b.n	8006f6c <OLED_WR_Byte+0x74>
	{			  
		OLED_SCLK_Clr();
 8006f2e:	2200      	movs	r2, #0
 8006f30:	2120      	movs	r1, #32
 8006f32:	4815      	ldr	r0, [pc, #84]	; (8006f88 <OLED_WR_Byte+0x90>)
 8006f34:	f7fa fe3a 	bl	8001bac <HAL_GPIO_WritePin>
		if(dat&0x80)
 8006f38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	da05      	bge.n	8006f4c <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 8006f40:	2201      	movs	r2, #1
 8006f42:	2140      	movs	r1, #64	; 0x40
 8006f44:	4810      	ldr	r0, [pc, #64]	; (8006f88 <OLED_WR_Byte+0x90>)
 8006f46:	f7fa fe31 	bl	8001bac <HAL_GPIO_WritePin>
 8006f4a:	e004      	b.n	8006f56 <OLED_WR_Byte+0x5e>
		else 
		   OLED_SDIN_Clr();
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	2140      	movs	r1, #64	; 0x40
 8006f50:	480d      	ldr	r0, [pc, #52]	; (8006f88 <OLED_WR_Byte+0x90>)
 8006f52:	f7fa fe2b 	bl	8001bac <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 8006f56:	2201      	movs	r2, #1
 8006f58:	2120      	movs	r1, #32
 8006f5a:	480b      	ldr	r0, [pc, #44]	; (8006f88 <OLED_WR_Byte+0x90>)
 8006f5c:	f7fa fe26 	bl	8001bac <HAL_GPIO_WritePin>
		dat<<=1;   
 8006f60:	79fb      	ldrb	r3, [r7, #7]
 8006f62:	005b      	lsls	r3, r3, #1
 8006f64:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 8006f66:	7bfb      	ldrb	r3, [r7, #15]
 8006f68:	3301      	adds	r3, #1
 8006f6a:	73fb      	strb	r3, [r7, #15]
 8006f6c:	7bfb      	ldrb	r3, [r7, #15]
 8006f6e:	2b07      	cmp	r3, #7
 8006f70:	d9dd      	bls.n	8006f2e <OLED_WR_Byte+0x36>
	}				 		  
	OLED_RS_Set();   	  
 8006f72:	2201      	movs	r2, #1
 8006f74:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006f78:	4803      	ldr	r0, [pc, #12]	; (8006f88 <OLED_WR_Byte+0x90>)
 8006f7a:	f7fa fe17 	bl	8001bac <HAL_GPIO_WritePin>
} 
 8006f7e:	bf00      	nop
 8006f80:	3710      	adds	r7, #16
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}
 8006f86:	bf00      	nop
 8006f88:	40021000 	.word	0x40021000

08006f8c <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b082      	sub	sp, #8
 8006f90:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 8006f92:	2300      	movs	r3, #0
 8006f94:	71fb      	strb	r3, [r7, #7]
 8006f96:	e014      	b.n	8006fc2 <OLED_Clear+0x36>
 8006f98:	2300      	movs	r3, #0
 8006f9a:	71bb      	strb	r3, [r7, #6]
 8006f9c:	e00a      	b.n	8006fb4 <OLED_Clear+0x28>
 8006f9e:	79ba      	ldrb	r2, [r7, #6]
 8006fa0:	79fb      	ldrb	r3, [r7, #7]
 8006fa2:	490c      	ldr	r1, [pc, #48]	; (8006fd4 <OLED_Clear+0x48>)
 8006fa4:	00d2      	lsls	r2, r2, #3
 8006fa6:	440a      	add	r2, r1
 8006fa8:	4413      	add	r3, r2
 8006faa:	2200      	movs	r2, #0
 8006fac:	701a      	strb	r2, [r3, #0]
 8006fae:	79bb      	ldrb	r3, [r7, #6]
 8006fb0:	3301      	adds	r3, #1
 8006fb2:	71bb      	strb	r3, [r7, #6]
 8006fb4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	daf0      	bge.n	8006f9e <OLED_Clear+0x12>
 8006fbc:	79fb      	ldrb	r3, [r7, #7]
 8006fbe:	3301      	adds	r3, #1
 8006fc0:	71fb      	strb	r3, [r7, #7]
 8006fc2:	79fb      	ldrb	r3, [r7, #7]
 8006fc4:	2b07      	cmp	r3, #7
 8006fc6:	d9e7      	bls.n	8006f98 <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 8006fc8:	f7ff ff5e 	bl	8006e88 <OLED_Refresh_Gram>
}
 8006fcc:	bf00      	nop
 8006fce:	3708      	adds	r7, #8
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bd80      	pop	{r7, pc}
 8006fd4:	20004b78 	.word	0x20004b78

08006fd8 <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b085      	sub	sp, #20
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	4603      	mov	r3, r0
 8006fe0:	71fb      	strb	r3, [r7, #7]
 8006fe2:	460b      	mov	r3, r1
 8006fe4:	71bb      	strb	r3, [r7, #6]
 8006fe6:	4613      	mov	r3, r2
 8006fe8:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 8006fea:	2300      	movs	r3, #0
 8006fec:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 8006fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	db41      	blt.n	800707a <OLED_DrawPoint+0xa2>
 8006ff6:	79bb      	ldrb	r3, [r7, #6]
 8006ff8:	2b3f      	cmp	r3, #63	; 0x3f
 8006ffa:	d83e      	bhi.n	800707a <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 8006ffc:	79bb      	ldrb	r3, [r7, #6]
 8006ffe:	08db      	lsrs	r3, r3, #3
 8007000:	b2db      	uxtb	r3, r3
 8007002:	f1c3 0307 	rsb	r3, r3, #7
 8007006:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 8007008:	79bb      	ldrb	r3, [r7, #6]
 800700a:	f003 0307 	and.w	r3, r3, #7
 800700e:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 8007010:	7b7b      	ldrb	r3, [r7, #13]
 8007012:	f1c3 0307 	rsb	r3, r3, #7
 8007016:	2201      	movs	r2, #1
 8007018:	fa02 f303 	lsl.w	r3, r2, r3
 800701c:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 800701e:	797b      	ldrb	r3, [r7, #5]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d012      	beq.n	800704a <OLED_DrawPoint+0x72>
 8007024:	79fa      	ldrb	r2, [r7, #7]
 8007026:	7bbb      	ldrb	r3, [r7, #14]
 8007028:	4917      	ldr	r1, [pc, #92]	; (8007088 <OLED_DrawPoint+0xb0>)
 800702a:	00d2      	lsls	r2, r2, #3
 800702c:	440a      	add	r2, r1
 800702e:	4413      	add	r3, r2
 8007030:	7818      	ldrb	r0, [r3, #0]
 8007032:	79fa      	ldrb	r2, [r7, #7]
 8007034:	7bbb      	ldrb	r3, [r7, #14]
 8007036:	7bf9      	ldrb	r1, [r7, #15]
 8007038:	4301      	orrs	r1, r0
 800703a:	b2c8      	uxtb	r0, r1
 800703c:	4912      	ldr	r1, [pc, #72]	; (8007088 <OLED_DrawPoint+0xb0>)
 800703e:	00d2      	lsls	r2, r2, #3
 8007040:	440a      	add	r2, r1
 8007042:	4413      	add	r3, r2
 8007044:	4602      	mov	r2, r0
 8007046:	701a      	strb	r2, [r3, #0]
 8007048:	e018      	b.n	800707c <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 800704a:	79fa      	ldrb	r2, [r7, #7]
 800704c:	7bbb      	ldrb	r3, [r7, #14]
 800704e:	490e      	ldr	r1, [pc, #56]	; (8007088 <OLED_DrawPoint+0xb0>)
 8007050:	00d2      	lsls	r2, r2, #3
 8007052:	440a      	add	r2, r1
 8007054:	4413      	add	r3, r2
 8007056:	781b      	ldrb	r3, [r3, #0]
 8007058:	b25a      	sxtb	r2, r3
 800705a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800705e:	43db      	mvns	r3, r3
 8007060:	b25b      	sxtb	r3, r3
 8007062:	4013      	ands	r3, r2
 8007064:	b259      	sxtb	r1, r3
 8007066:	79fa      	ldrb	r2, [r7, #7]
 8007068:	7bbb      	ldrb	r3, [r7, #14]
 800706a:	b2c8      	uxtb	r0, r1
 800706c:	4906      	ldr	r1, [pc, #24]	; (8007088 <OLED_DrawPoint+0xb0>)
 800706e:	00d2      	lsls	r2, r2, #3
 8007070:	440a      	add	r2, r1
 8007072:	4413      	add	r3, r2
 8007074:	4602      	mov	r2, r0
 8007076:	701a      	strb	r2, [r3, #0]
 8007078:	e000      	b.n	800707c <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 800707a:	bf00      	nop
}
 800707c:	3714      	adds	r7, #20
 800707e:	46bd      	mov	sp, r7
 8007080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007084:	4770      	bx	lr
 8007086:	bf00      	nop
 8007088:	20004b78 	.word	0x20004b78

0800708c <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 800708c:	b590      	push	{r4, r7, lr}
 800708e:	b085      	sub	sp, #20
 8007090:	af00      	add	r7, sp, #0
 8007092:	4604      	mov	r4, r0
 8007094:	4608      	mov	r0, r1
 8007096:	4611      	mov	r1, r2
 8007098:	461a      	mov	r2, r3
 800709a:	4623      	mov	r3, r4
 800709c:	71fb      	strb	r3, [r7, #7]
 800709e:	4603      	mov	r3, r0
 80070a0:	71bb      	strb	r3, [r7, #6]
 80070a2:	460b      	mov	r3, r1
 80070a4:	717b      	strb	r3, [r7, #5]
 80070a6:	4613      	mov	r3, r2
 80070a8:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 80070aa:	79bb      	ldrb	r3, [r7, #6]
 80070ac:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 80070ae:	797b      	ldrb	r3, [r7, #5]
 80070b0:	3b20      	subs	r3, #32
 80070b2:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 80070b4:	2300      	movs	r3, #0
 80070b6:	73bb      	strb	r3, [r7, #14]
 80070b8:	e04d      	b.n	8007156 <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 80070ba:	793b      	ldrb	r3, [r7, #4]
 80070bc:	2b0c      	cmp	r3, #12
 80070be:	d10b      	bne.n	80070d8 <OLED_ShowChar+0x4c>
 80070c0:	797a      	ldrb	r2, [r7, #5]
 80070c2:	7bb9      	ldrb	r1, [r7, #14]
 80070c4:	4828      	ldr	r0, [pc, #160]	; (8007168 <OLED_ShowChar+0xdc>)
 80070c6:	4613      	mov	r3, r2
 80070c8:	005b      	lsls	r3, r3, #1
 80070ca:	4413      	add	r3, r2
 80070cc:	009b      	lsls	r3, r3, #2
 80070ce:	4403      	add	r3, r0
 80070d0:	440b      	add	r3, r1
 80070d2:	781b      	ldrb	r3, [r3, #0]
 80070d4:	73fb      	strb	r3, [r7, #15]
 80070d6:	e007      	b.n	80070e8 <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 80070d8:	797a      	ldrb	r2, [r7, #5]
 80070da:	7bbb      	ldrb	r3, [r7, #14]
 80070dc:	4923      	ldr	r1, [pc, #140]	; (800716c <OLED_ShowChar+0xe0>)
 80070de:	0112      	lsls	r2, r2, #4
 80070e0:	440a      	add	r2, r1
 80070e2:	4413      	add	r3, r2
 80070e4:	781b      	ldrb	r3, [r3, #0]
 80070e6:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 80070e8:	2300      	movs	r3, #0
 80070ea:	737b      	strb	r3, [r7, #13]
 80070ec:	e02d      	b.n	800714a <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 80070ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	da07      	bge.n	8007106 <OLED_ShowChar+0x7a>
 80070f6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80070fa:	79b9      	ldrb	r1, [r7, #6]
 80070fc:	79fb      	ldrb	r3, [r7, #7]
 80070fe:	4618      	mov	r0, r3
 8007100:	f7ff ff6a 	bl	8006fd8 <OLED_DrawPoint>
 8007104:	e00c      	b.n	8007120 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 8007106:	f897 3020 	ldrb.w	r3, [r7, #32]
 800710a:	2b00      	cmp	r3, #0
 800710c:	bf0c      	ite	eq
 800710e:	2301      	moveq	r3, #1
 8007110:	2300      	movne	r3, #0
 8007112:	b2db      	uxtb	r3, r3
 8007114:	461a      	mov	r2, r3
 8007116:	79b9      	ldrb	r1, [r7, #6]
 8007118:	79fb      	ldrb	r3, [r7, #7]
 800711a:	4618      	mov	r0, r3
 800711c:	f7ff ff5c 	bl	8006fd8 <OLED_DrawPoint>
			temp<<=1;
 8007120:	7bfb      	ldrb	r3, [r7, #15]
 8007122:	005b      	lsls	r3, r3, #1
 8007124:	73fb      	strb	r3, [r7, #15]
			y++;
 8007126:	79bb      	ldrb	r3, [r7, #6]
 8007128:	3301      	adds	r3, #1
 800712a:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 800712c:	79ba      	ldrb	r2, [r7, #6]
 800712e:	7b3b      	ldrb	r3, [r7, #12]
 8007130:	1ad2      	subs	r2, r2, r3
 8007132:	793b      	ldrb	r3, [r7, #4]
 8007134:	429a      	cmp	r2, r3
 8007136:	d105      	bne.n	8007144 <OLED_ShowChar+0xb8>
			{
				y=y0;
 8007138:	7b3b      	ldrb	r3, [r7, #12]
 800713a:	71bb      	strb	r3, [r7, #6]
				x++;
 800713c:	79fb      	ldrb	r3, [r7, #7]
 800713e:	3301      	adds	r3, #1
 8007140:	71fb      	strb	r3, [r7, #7]
				break;
 8007142:	e005      	b.n	8007150 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 8007144:	7b7b      	ldrb	r3, [r7, #13]
 8007146:	3301      	adds	r3, #1
 8007148:	737b      	strb	r3, [r7, #13]
 800714a:	7b7b      	ldrb	r3, [r7, #13]
 800714c:	2b07      	cmp	r3, #7
 800714e:	d9ce      	bls.n	80070ee <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 8007150:	7bbb      	ldrb	r3, [r7, #14]
 8007152:	3301      	adds	r3, #1
 8007154:	73bb      	strb	r3, [r7, #14]
 8007156:	7bba      	ldrb	r2, [r7, #14]
 8007158:	793b      	ldrb	r3, [r7, #4]
 800715a:	429a      	cmp	r2, r3
 800715c:	d3ad      	bcc.n	80070ba <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 800715e:	bf00      	nop
 8007160:	bf00      	nop
 8007162:	3714      	adds	r7, #20
 8007164:	46bd      	mov	sp, r7
 8007166:	bd90      	pop	{r4, r7, pc}
 8007168:	08007cf8 	.word	0x08007cf8
 800716c:	0800816c 	.word	0x0800816c

08007170 <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b084      	sub	sp, #16
 8007174:	af02      	add	r7, sp, #8
 8007176:	4603      	mov	r3, r0
 8007178:	603a      	str	r2, [r7, #0]
 800717a:	71fb      	strb	r3, [r7, #7]
 800717c:	460b      	mov	r3, r1
 800717e:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 8007180:	e01f      	b.n	80071c2 <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 8007182:	79fb      	ldrb	r3, [r7, #7]
 8007184:	2b7a      	cmp	r3, #122	; 0x7a
 8007186:	d904      	bls.n	8007192 <OLED_ShowString+0x22>
 8007188:	2300      	movs	r3, #0
 800718a:	71fb      	strb	r3, [r7, #7]
 800718c:	79bb      	ldrb	r3, [r7, #6]
 800718e:	3310      	adds	r3, #16
 8007190:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 8007192:	79bb      	ldrb	r3, [r7, #6]
 8007194:	2b3a      	cmp	r3, #58	; 0x3a
 8007196:	d905      	bls.n	80071a4 <OLED_ShowString+0x34>
 8007198:	2300      	movs	r3, #0
 800719a:	71fb      	strb	r3, [r7, #7]
 800719c:	79fb      	ldrb	r3, [r7, #7]
 800719e:	71bb      	strb	r3, [r7, #6]
 80071a0:	f7ff fef4 	bl	8006f8c <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	781a      	ldrb	r2, [r3, #0]
 80071a8:	79b9      	ldrb	r1, [r7, #6]
 80071aa:	79f8      	ldrb	r0, [r7, #7]
 80071ac:	2301      	movs	r3, #1
 80071ae:	9300      	str	r3, [sp, #0]
 80071b0:	230c      	movs	r3, #12
 80071b2:	f7ff ff6b 	bl	800708c <OLED_ShowChar>
        x+=8;
 80071b6:	79fb      	ldrb	r3, [r7, #7]
 80071b8:	3308      	adds	r3, #8
 80071ba:	71fb      	strb	r3, [r7, #7]
        p++;
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	3301      	adds	r3, #1
 80071c0:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	781b      	ldrb	r3, [r3, #0]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d1db      	bne.n	8007182 <OLED_ShowString+0x12>
    }  
}	 
 80071ca:	bf00      	nop
 80071cc:	bf00      	nop
 80071ce:	3708      	adds	r7, #8
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}

080071d4 <OLED_Init>:

void OLED_Init(void)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 80071d8:	f7fa fd1c 	bl	8001c14 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 80071dc:	4b41      	ldr	r3, [pc, #260]	; (80072e4 <OLED_Init+0x110>)
 80071de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071e0:	4a40      	ldr	r2, [pc, #256]	; (80072e4 <OLED_Init+0x110>)
 80071e2:	f023 0301 	bic.w	r3, r3, #1
 80071e6:	6713      	str	r3, [r2, #112]	; 0x70
 80071e8:	4b3e      	ldr	r3, [pc, #248]	; (80072e4 <OLED_Init+0x110>)
 80071ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071ec:	4a3d      	ldr	r2, [pc, #244]	; (80072e4 <OLED_Init+0x110>)
 80071ee:	f023 0304 	bic.w	r3, r3, #4
 80071f2:	6713      	str	r3, [r2, #112]	; 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 80071f4:	f7fa fd22 	bl	8001c3c <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 80071f8:	2200      	movs	r2, #0
 80071fa:	2180      	movs	r1, #128	; 0x80
 80071fc:	483a      	ldr	r0, [pc, #232]	; (80072e8 <OLED_Init+0x114>)
 80071fe:	f7fa fcd5 	bl	8001bac <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8007202:	2064      	movs	r0, #100	; 0x64
 8007204:	f7fa f96e 	bl	80014e4 <HAL_Delay>
	OLED_RST_Set();
 8007208:	2201      	movs	r2, #1
 800720a:	2180      	movs	r1, #128	; 0x80
 800720c:	4836      	ldr	r0, [pc, #216]	; (80072e8 <OLED_Init+0x114>)
 800720e:	f7fa fccd 	bl	8001bac <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 8007212:	2100      	movs	r1, #0
 8007214:	20ae      	movs	r0, #174	; 0xae
 8007216:	f7ff fe6f 	bl	8006ef8 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 800721a:	2100      	movs	r1, #0
 800721c:	20d5      	movs	r0, #213	; 0xd5
 800721e:	f7ff fe6b 	bl	8006ef8 <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 8007222:	2100      	movs	r1, #0
 8007224:	2050      	movs	r0, #80	; 0x50
 8007226:	f7ff fe67 	bl	8006ef8 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 800722a:	2100      	movs	r1, #0
 800722c:	20a8      	movs	r0, #168	; 0xa8
 800722e:	f7ff fe63 	bl	8006ef8 <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 8007232:	2100      	movs	r1, #0
 8007234:	203f      	movs	r0, #63	; 0x3f
 8007236:	f7ff fe5f 	bl	8006ef8 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 800723a:	2100      	movs	r1, #0
 800723c:	20d3      	movs	r0, #211	; 0xd3
 800723e:	f7ff fe5b 	bl	8006ef8 <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 8007242:	2100      	movs	r1, #0
 8007244:	2000      	movs	r0, #0
 8007246:	f7ff fe57 	bl	8006ef8 <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 800724a:	2100      	movs	r1, #0
 800724c:	2040      	movs	r0, #64	; 0x40
 800724e:	f7ff fe53 	bl	8006ef8 <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 8007252:	2100      	movs	r1, #0
 8007254:	208d      	movs	r0, #141	; 0x8d
 8007256:	f7ff fe4f 	bl	8006ef8 <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 800725a:	2100      	movs	r1, #0
 800725c:	2014      	movs	r0, #20
 800725e:	f7ff fe4b 	bl	8006ef8 <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 8007262:	2100      	movs	r1, #0
 8007264:	2020      	movs	r0, #32
 8007266:	f7ff fe47 	bl	8006ef8 <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 800726a:	2100      	movs	r1, #0
 800726c:	2002      	movs	r0, #2
 800726e:	f7ff fe43 	bl	8006ef8 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 8007272:	2100      	movs	r1, #0
 8007274:	20a1      	movs	r0, #161	; 0xa1
 8007276:	f7ff fe3f 	bl	8006ef8 <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 800727a:	2100      	movs	r1, #0
 800727c:	20c0      	movs	r0, #192	; 0xc0
 800727e:	f7ff fe3b 	bl	8006ef8 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 8007282:	2100      	movs	r1, #0
 8007284:	20da      	movs	r0, #218	; 0xda
 8007286:	f7ff fe37 	bl	8006ef8 <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 800728a:	2100      	movs	r1, #0
 800728c:	2012      	movs	r0, #18
 800728e:	f7ff fe33 	bl	8006ef8 <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 8007292:	2100      	movs	r1, #0
 8007294:	2081      	movs	r0, #129	; 0x81
 8007296:	f7ff fe2f 	bl	8006ef8 <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 800729a:	2100      	movs	r1, #0
 800729c:	20ef      	movs	r0, #239	; 0xef
 800729e:	f7ff fe2b 	bl	8006ef8 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 80072a2:	2100      	movs	r1, #0
 80072a4:	20d9      	movs	r0, #217	; 0xd9
 80072a6:	f7ff fe27 	bl	8006ef8 <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 80072aa:	2100      	movs	r1, #0
 80072ac:	20f1      	movs	r0, #241	; 0xf1
 80072ae:	f7ff fe23 	bl	8006ef8 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 80072b2:	2100      	movs	r1, #0
 80072b4:	20db      	movs	r0, #219	; 0xdb
 80072b6:	f7ff fe1f 	bl	8006ef8 <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 80072ba:	2100      	movs	r1, #0
 80072bc:	2030      	movs	r0, #48	; 0x30
 80072be:	f7ff fe1b 	bl	8006ef8 <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 80072c2:	2100      	movs	r1, #0
 80072c4:	20a4      	movs	r0, #164	; 0xa4
 80072c6:	f7ff fe17 	bl	8006ef8 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 80072ca:	2100      	movs	r1, #0
 80072cc:	20a6      	movs	r0, #166	; 0xa6
 80072ce:	f7ff fe13 	bl	8006ef8 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 80072d2:	2100      	movs	r1, #0
 80072d4:	20af      	movs	r0, #175	; 0xaf
 80072d6:	f7ff fe0f 	bl	8006ef8 <OLED_WR_Byte>
	OLED_Clear(); 
 80072da:	f7ff fe57 	bl	8006f8c <OLED_Clear>
 80072de:	bf00      	nop
 80072e0:	bd80      	pop	{r7, pc}
 80072e2:	bf00      	nop
 80072e4:	40023800 	.word	0x40023800
 80072e8:	40021000 	.word	0x40021000

080072ec <__errno>:
 80072ec:	4b01      	ldr	r3, [pc, #4]	; (80072f4 <__errno+0x8>)
 80072ee:	6818      	ldr	r0, [r3, #0]
 80072f0:	4770      	bx	lr
 80072f2:	bf00      	nop
 80072f4:	20000010 	.word	0x20000010

080072f8 <__libc_init_array>:
 80072f8:	b570      	push	{r4, r5, r6, lr}
 80072fa:	4d0d      	ldr	r5, [pc, #52]	; (8007330 <__libc_init_array+0x38>)
 80072fc:	4c0d      	ldr	r4, [pc, #52]	; (8007334 <__libc_init_array+0x3c>)
 80072fe:	1b64      	subs	r4, r4, r5
 8007300:	10a4      	asrs	r4, r4, #2
 8007302:	2600      	movs	r6, #0
 8007304:	42a6      	cmp	r6, r4
 8007306:	d109      	bne.n	800731c <__libc_init_array+0x24>
 8007308:	4d0b      	ldr	r5, [pc, #44]	; (8007338 <__libc_init_array+0x40>)
 800730a:	4c0c      	ldr	r4, [pc, #48]	; (800733c <__libc_init_array+0x44>)
 800730c:	f000 fc4e 	bl	8007bac <_init>
 8007310:	1b64      	subs	r4, r4, r5
 8007312:	10a4      	asrs	r4, r4, #2
 8007314:	2600      	movs	r6, #0
 8007316:	42a6      	cmp	r6, r4
 8007318:	d105      	bne.n	8007326 <__libc_init_array+0x2e>
 800731a:	bd70      	pop	{r4, r5, r6, pc}
 800731c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007320:	4798      	blx	r3
 8007322:	3601      	adds	r6, #1
 8007324:	e7ee      	b.n	8007304 <__libc_init_array+0xc>
 8007326:	f855 3b04 	ldr.w	r3, [r5], #4
 800732a:	4798      	blx	r3
 800732c:	3601      	adds	r6, #1
 800732e:	e7f2      	b.n	8007316 <__libc_init_array+0x1e>
 8007330:	08008798 	.word	0x08008798
 8007334:	08008798 	.word	0x08008798
 8007338:	08008798 	.word	0x08008798
 800733c:	0800879c 	.word	0x0800879c

08007340 <memcpy>:
 8007340:	440a      	add	r2, r1
 8007342:	4291      	cmp	r1, r2
 8007344:	f100 33ff 	add.w	r3, r0, #4294967295
 8007348:	d100      	bne.n	800734c <memcpy+0xc>
 800734a:	4770      	bx	lr
 800734c:	b510      	push	{r4, lr}
 800734e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007352:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007356:	4291      	cmp	r1, r2
 8007358:	d1f9      	bne.n	800734e <memcpy+0xe>
 800735a:	bd10      	pop	{r4, pc}

0800735c <memset>:
 800735c:	4402      	add	r2, r0
 800735e:	4603      	mov	r3, r0
 8007360:	4293      	cmp	r3, r2
 8007362:	d100      	bne.n	8007366 <memset+0xa>
 8007364:	4770      	bx	lr
 8007366:	f803 1b01 	strb.w	r1, [r3], #1
 800736a:	e7f9      	b.n	8007360 <memset+0x4>

0800736c <siprintf>:
 800736c:	b40e      	push	{r1, r2, r3}
 800736e:	b500      	push	{lr}
 8007370:	b09c      	sub	sp, #112	; 0x70
 8007372:	ab1d      	add	r3, sp, #116	; 0x74
 8007374:	9002      	str	r0, [sp, #8]
 8007376:	9006      	str	r0, [sp, #24]
 8007378:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800737c:	4809      	ldr	r0, [pc, #36]	; (80073a4 <siprintf+0x38>)
 800737e:	9107      	str	r1, [sp, #28]
 8007380:	9104      	str	r1, [sp, #16]
 8007382:	4909      	ldr	r1, [pc, #36]	; (80073a8 <siprintf+0x3c>)
 8007384:	f853 2b04 	ldr.w	r2, [r3], #4
 8007388:	9105      	str	r1, [sp, #20]
 800738a:	6800      	ldr	r0, [r0, #0]
 800738c:	9301      	str	r3, [sp, #4]
 800738e:	a902      	add	r1, sp, #8
 8007390:	f000 f868 	bl	8007464 <_svfiprintf_r>
 8007394:	9b02      	ldr	r3, [sp, #8]
 8007396:	2200      	movs	r2, #0
 8007398:	701a      	strb	r2, [r3, #0]
 800739a:	b01c      	add	sp, #112	; 0x70
 800739c:	f85d eb04 	ldr.w	lr, [sp], #4
 80073a0:	b003      	add	sp, #12
 80073a2:	4770      	bx	lr
 80073a4:	20000010 	.word	0x20000010
 80073a8:	ffff0208 	.word	0xffff0208

080073ac <__ssputs_r>:
 80073ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073b0:	688e      	ldr	r6, [r1, #8]
 80073b2:	429e      	cmp	r6, r3
 80073b4:	4682      	mov	sl, r0
 80073b6:	460c      	mov	r4, r1
 80073b8:	4690      	mov	r8, r2
 80073ba:	461f      	mov	r7, r3
 80073bc:	d838      	bhi.n	8007430 <__ssputs_r+0x84>
 80073be:	898a      	ldrh	r2, [r1, #12]
 80073c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80073c4:	d032      	beq.n	800742c <__ssputs_r+0x80>
 80073c6:	6825      	ldr	r5, [r4, #0]
 80073c8:	6909      	ldr	r1, [r1, #16]
 80073ca:	eba5 0901 	sub.w	r9, r5, r1
 80073ce:	6965      	ldr	r5, [r4, #20]
 80073d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80073d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80073d8:	3301      	adds	r3, #1
 80073da:	444b      	add	r3, r9
 80073dc:	106d      	asrs	r5, r5, #1
 80073de:	429d      	cmp	r5, r3
 80073e0:	bf38      	it	cc
 80073e2:	461d      	movcc	r5, r3
 80073e4:	0553      	lsls	r3, r2, #21
 80073e6:	d531      	bpl.n	800744c <__ssputs_r+0xa0>
 80073e8:	4629      	mov	r1, r5
 80073ea:	f000 fb39 	bl	8007a60 <_malloc_r>
 80073ee:	4606      	mov	r6, r0
 80073f0:	b950      	cbnz	r0, 8007408 <__ssputs_r+0x5c>
 80073f2:	230c      	movs	r3, #12
 80073f4:	f8ca 3000 	str.w	r3, [sl]
 80073f8:	89a3      	ldrh	r3, [r4, #12]
 80073fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073fe:	81a3      	strh	r3, [r4, #12]
 8007400:	f04f 30ff 	mov.w	r0, #4294967295
 8007404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007408:	6921      	ldr	r1, [r4, #16]
 800740a:	464a      	mov	r2, r9
 800740c:	f7ff ff98 	bl	8007340 <memcpy>
 8007410:	89a3      	ldrh	r3, [r4, #12]
 8007412:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007416:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800741a:	81a3      	strh	r3, [r4, #12]
 800741c:	6126      	str	r6, [r4, #16]
 800741e:	6165      	str	r5, [r4, #20]
 8007420:	444e      	add	r6, r9
 8007422:	eba5 0509 	sub.w	r5, r5, r9
 8007426:	6026      	str	r6, [r4, #0]
 8007428:	60a5      	str	r5, [r4, #8]
 800742a:	463e      	mov	r6, r7
 800742c:	42be      	cmp	r6, r7
 800742e:	d900      	bls.n	8007432 <__ssputs_r+0x86>
 8007430:	463e      	mov	r6, r7
 8007432:	4632      	mov	r2, r6
 8007434:	6820      	ldr	r0, [r4, #0]
 8007436:	4641      	mov	r1, r8
 8007438:	f000 faa8 	bl	800798c <memmove>
 800743c:	68a3      	ldr	r3, [r4, #8]
 800743e:	6822      	ldr	r2, [r4, #0]
 8007440:	1b9b      	subs	r3, r3, r6
 8007442:	4432      	add	r2, r6
 8007444:	60a3      	str	r3, [r4, #8]
 8007446:	6022      	str	r2, [r4, #0]
 8007448:	2000      	movs	r0, #0
 800744a:	e7db      	b.n	8007404 <__ssputs_r+0x58>
 800744c:	462a      	mov	r2, r5
 800744e:	f000 fb61 	bl	8007b14 <_realloc_r>
 8007452:	4606      	mov	r6, r0
 8007454:	2800      	cmp	r0, #0
 8007456:	d1e1      	bne.n	800741c <__ssputs_r+0x70>
 8007458:	6921      	ldr	r1, [r4, #16]
 800745a:	4650      	mov	r0, sl
 800745c:	f000 fab0 	bl	80079c0 <_free_r>
 8007460:	e7c7      	b.n	80073f2 <__ssputs_r+0x46>
	...

08007464 <_svfiprintf_r>:
 8007464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007468:	4698      	mov	r8, r3
 800746a:	898b      	ldrh	r3, [r1, #12]
 800746c:	061b      	lsls	r3, r3, #24
 800746e:	b09d      	sub	sp, #116	; 0x74
 8007470:	4607      	mov	r7, r0
 8007472:	460d      	mov	r5, r1
 8007474:	4614      	mov	r4, r2
 8007476:	d50e      	bpl.n	8007496 <_svfiprintf_r+0x32>
 8007478:	690b      	ldr	r3, [r1, #16]
 800747a:	b963      	cbnz	r3, 8007496 <_svfiprintf_r+0x32>
 800747c:	2140      	movs	r1, #64	; 0x40
 800747e:	f000 faef 	bl	8007a60 <_malloc_r>
 8007482:	6028      	str	r0, [r5, #0]
 8007484:	6128      	str	r0, [r5, #16]
 8007486:	b920      	cbnz	r0, 8007492 <_svfiprintf_r+0x2e>
 8007488:	230c      	movs	r3, #12
 800748a:	603b      	str	r3, [r7, #0]
 800748c:	f04f 30ff 	mov.w	r0, #4294967295
 8007490:	e0d1      	b.n	8007636 <_svfiprintf_r+0x1d2>
 8007492:	2340      	movs	r3, #64	; 0x40
 8007494:	616b      	str	r3, [r5, #20]
 8007496:	2300      	movs	r3, #0
 8007498:	9309      	str	r3, [sp, #36]	; 0x24
 800749a:	2320      	movs	r3, #32
 800749c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80074a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80074a4:	2330      	movs	r3, #48	; 0x30
 80074a6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007650 <_svfiprintf_r+0x1ec>
 80074aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80074ae:	f04f 0901 	mov.w	r9, #1
 80074b2:	4623      	mov	r3, r4
 80074b4:	469a      	mov	sl, r3
 80074b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80074ba:	b10a      	cbz	r2, 80074c0 <_svfiprintf_r+0x5c>
 80074bc:	2a25      	cmp	r2, #37	; 0x25
 80074be:	d1f9      	bne.n	80074b4 <_svfiprintf_r+0x50>
 80074c0:	ebba 0b04 	subs.w	fp, sl, r4
 80074c4:	d00b      	beq.n	80074de <_svfiprintf_r+0x7a>
 80074c6:	465b      	mov	r3, fp
 80074c8:	4622      	mov	r2, r4
 80074ca:	4629      	mov	r1, r5
 80074cc:	4638      	mov	r0, r7
 80074ce:	f7ff ff6d 	bl	80073ac <__ssputs_r>
 80074d2:	3001      	adds	r0, #1
 80074d4:	f000 80aa 	beq.w	800762c <_svfiprintf_r+0x1c8>
 80074d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80074da:	445a      	add	r2, fp
 80074dc:	9209      	str	r2, [sp, #36]	; 0x24
 80074de:	f89a 3000 	ldrb.w	r3, [sl]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	f000 80a2 	beq.w	800762c <_svfiprintf_r+0x1c8>
 80074e8:	2300      	movs	r3, #0
 80074ea:	f04f 32ff 	mov.w	r2, #4294967295
 80074ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80074f2:	f10a 0a01 	add.w	sl, sl, #1
 80074f6:	9304      	str	r3, [sp, #16]
 80074f8:	9307      	str	r3, [sp, #28]
 80074fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80074fe:	931a      	str	r3, [sp, #104]	; 0x68
 8007500:	4654      	mov	r4, sl
 8007502:	2205      	movs	r2, #5
 8007504:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007508:	4851      	ldr	r0, [pc, #324]	; (8007650 <_svfiprintf_r+0x1ec>)
 800750a:	f7f8 fe61 	bl	80001d0 <memchr>
 800750e:	9a04      	ldr	r2, [sp, #16]
 8007510:	b9d8      	cbnz	r0, 800754a <_svfiprintf_r+0xe6>
 8007512:	06d0      	lsls	r0, r2, #27
 8007514:	bf44      	itt	mi
 8007516:	2320      	movmi	r3, #32
 8007518:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800751c:	0711      	lsls	r1, r2, #28
 800751e:	bf44      	itt	mi
 8007520:	232b      	movmi	r3, #43	; 0x2b
 8007522:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007526:	f89a 3000 	ldrb.w	r3, [sl]
 800752a:	2b2a      	cmp	r3, #42	; 0x2a
 800752c:	d015      	beq.n	800755a <_svfiprintf_r+0xf6>
 800752e:	9a07      	ldr	r2, [sp, #28]
 8007530:	4654      	mov	r4, sl
 8007532:	2000      	movs	r0, #0
 8007534:	f04f 0c0a 	mov.w	ip, #10
 8007538:	4621      	mov	r1, r4
 800753a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800753e:	3b30      	subs	r3, #48	; 0x30
 8007540:	2b09      	cmp	r3, #9
 8007542:	d94e      	bls.n	80075e2 <_svfiprintf_r+0x17e>
 8007544:	b1b0      	cbz	r0, 8007574 <_svfiprintf_r+0x110>
 8007546:	9207      	str	r2, [sp, #28]
 8007548:	e014      	b.n	8007574 <_svfiprintf_r+0x110>
 800754a:	eba0 0308 	sub.w	r3, r0, r8
 800754e:	fa09 f303 	lsl.w	r3, r9, r3
 8007552:	4313      	orrs	r3, r2
 8007554:	9304      	str	r3, [sp, #16]
 8007556:	46a2      	mov	sl, r4
 8007558:	e7d2      	b.n	8007500 <_svfiprintf_r+0x9c>
 800755a:	9b03      	ldr	r3, [sp, #12]
 800755c:	1d19      	adds	r1, r3, #4
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	9103      	str	r1, [sp, #12]
 8007562:	2b00      	cmp	r3, #0
 8007564:	bfbb      	ittet	lt
 8007566:	425b      	neglt	r3, r3
 8007568:	f042 0202 	orrlt.w	r2, r2, #2
 800756c:	9307      	strge	r3, [sp, #28]
 800756e:	9307      	strlt	r3, [sp, #28]
 8007570:	bfb8      	it	lt
 8007572:	9204      	strlt	r2, [sp, #16]
 8007574:	7823      	ldrb	r3, [r4, #0]
 8007576:	2b2e      	cmp	r3, #46	; 0x2e
 8007578:	d10c      	bne.n	8007594 <_svfiprintf_r+0x130>
 800757a:	7863      	ldrb	r3, [r4, #1]
 800757c:	2b2a      	cmp	r3, #42	; 0x2a
 800757e:	d135      	bne.n	80075ec <_svfiprintf_r+0x188>
 8007580:	9b03      	ldr	r3, [sp, #12]
 8007582:	1d1a      	adds	r2, r3, #4
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	9203      	str	r2, [sp, #12]
 8007588:	2b00      	cmp	r3, #0
 800758a:	bfb8      	it	lt
 800758c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007590:	3402      	adds	r4, #2
 8007592:	9305      	str	r3, [sp, #20]
 8007594:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007660 <_svfiprintf_r+0x1fc>
 8007598:	7821      	ldrb	r1, [r4, #0]
 800759a:	2203      	movs	r2, #3
 800759c:	4650      	mov	r0, sl
 800759e:	f7f8 fe17 	bl	80001d0 <memchr>
 80075a2:	b140      	cbz	r0, 80075b6 <_svfiprintf_r+0x152>
 80075a4:	2340      	movs	r3, #64	; 0x40
 80075a6:	eba0 000a 	sub.w	r0, r0, sl
 80075aa:	fa03 f000 	lsl.w	r0, r3, r0
 80075ae:	9b04      	ldr	r3, [sp, #16]
 80075b0:	4303      	orrs	r3, r0
 80075b2:	3401      	adds	r4, #1
 80075b4:	9304      	str	r3, [sp, #16]
 80075b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075ba:	4826      	ldr	r0, [pc, #152]	; (8007654 <_svfiprintf_r+0x1f0>)
 80075bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80075c0:	2206      	movs	r2, #6
 80075c2:	f7f8 fe05 	bl	80001d0 <memchr>
 80075c6:	2800      	cmp	r0, #0
 80075c8:	d038      	beq.n	800763c <_svfiprintf_r+0x1d8>
 80075ca:	4b23      	ldr	r3, [pc, #140]	; (8007658 <_svfiprintf_r+0x1f4>)
 80075cc:	bb1b      	cbnz	r3, 8007616 <_svfiprintf_r+0x1b2>
 80075ce:	9b03      	ldr	r3, [sp, #12]
 80075d0:	3307      	adds	r3, #7
 80075d2:	f023 0307 	bic.w	r3, r3, #7
 80075d6:	3308      	adds	r3, #8
 80075d8:	9303      	str	r3, [sp, #12]
 80075da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075dc:	4433      	add	r3, r6
 80075de:	9309      	str	r3, [sp, #36]	; 0x24
 80075e0:	e767      	b.n	80074b2 <_svfiprintf_r+0x4e>
 80075e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80075e6:	460c      	mov	r4, r1
 80075e8:	2001      	movs	r0, #1
 80075ea:	e7a5      	b.n	8007538 <_svfiprintf_r+0xd4>
 80075ec:	2300      	movs	r3, #0
 80075ee:	3401      	adds	r4, #1
 80075f0:	9305      	str	r3, [sp, #20]
 80075f2:	4619      	mov	r1, r3
 80075f4:	f04f 0c0a 	mov.w	ip, #10
 80075f8:	4620      	mov	r0, r4
 80075fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80075fe:	3a30      	subs	r2, #48	; 0x30
 8007600:	2a09      	cmp	r2, #9
 8007602:	d903      	bls.n	800760c <_svfiprintf_r+0x1a8>
 8007604:	2b00      	cmp	r3, #0
 8007606:	d0c5      	beq.n	8007594 <_svfiprintf_r+0x130>
 8007608:	9105      	str	r1, [sp, #20]
 800760a:	e7c3      	b.n	8007594 <_svfiprintf_r+0x130>
 800760c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007610:	4604      	mov	r4, r0
 8007612:	2301      	movs	r3, #1
 8007614:	e7f0      	b.n	80075f8 <_svfiprintf_r+0x194>
 8007616:	ab03      	add	r3, sp, #12
 8007618:	9300      	str	r3, [sp, #0]
 800761a:	462a      	mov	r2, r5
 800761c:	4b0f      	ldr	r3, [pc, #60]	; (800765c <_svfiprintf_r+0x1f8>)
 800761e:	a904      	add	r1, sp, #16
 8007620:	4638      	mov	r0, r7
 8007622:	f3af 8000 	nop.w
 8007626:	1c42      	adds	r2, r0, #1
 8007628:	4606      	mov	r6, r0
 800762a:	d1d6      	bne.n	80075da <_svfiprintf_r+0x176>
 800762c:	89ab      	ldrh	r3, [r5, #12]
 800762e:	065b      	lsls	r3, r3, #25
 8007630:	f53f af2c 	bmi.w	800748c <_svfiprintf_r+0x28>
 8007634:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007636:	b01d      	add	sp, #116	; 0x74
 8007638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800763c:	ab03      	add	r3, sp, #12
 800763e:	9300      	str	r3, [sp, #0]
 8007640:	462a      	mov	r2, r5
 8007642:	4b06      	ldr	r3, [pc, #24]	; (800765c <_svfiprintf_r+0x1f8>)
 8007644:	a904      	add	r1, sp, #16
 8007646:	4638      	mov	r0, r7
 8007648:	f000 f87a 	bl	8007740 <_printf_i>
 800764c:	e7eb      	b.n	8007626 <_svfiprintf_r+0x1c2>
 800764e:	bf00      	nop
 8007650:	0800875c 	.word	0x0800875c
 8007654:	08008766 	.word	0x08008766
 8007658:	00000000 	.word	0x00000000
 800765c:	080073ad 	.word	0x080073ad
 8007660:	08008762 	.word	0x08008762

08007664 <_printf_common>:
 8007664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007668:	4616      	mov	r6, r2
 800766a:	4699      	mov	r9, r3
 800766c:	688a      	ldr	r2, [r1, #8]
 800766e:	690b      	ldr	r3, [r1, #16]
 8007670:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007674:	4293      	cmp	r3, r2
 8007676:	bfb8      	it	lt
 8007678:	4613      	movlt	r3, r2
 800767a:	6033      	str	r3, [r6, #0]
 800767c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007680:	4607      	mov	r7, r0
 8007682:	460c      	mov	r4, r1
 8007684:	b10a      	cbz	r2, 800768a <_printf_common+0x26>
 8007686:	3301      	adds	r3, #1
 8007688:	6033      	str	r3, [r6, #0]
 800768a:	6823      	ldr	r3, [r4, #0]
 800768c:	0699      	lsls	r1, r3, #26
 800768e:	bf42      	ittt	mi
 8007690:	6833      	ldrmi	r3, [r6, #0]
 8007692:	3302      	addmi	r3, #2
 8007694:	6033      	strmi	r3, [r6, #0]
 8007696:	6825      	ldr	r5, [r4, #0]
 8007698:	f015 0506 	ands.w	r5, r5, #6
 800769c:	d106      	bne.n	80076ac <_printf_common+0x48>
 800769e:	f104 0a19 	add.w	sl, r4, #25
 80076a2:	68e3      	ldr	r3, [r4, #12]
 80076a4:	6832      	ldr	r2, [r6, #0]
 80076a6:	1a9b      	subs	r3, r3, r2
 80076a8:	42ab      	cmp	r3, r5
 80076aa:	dc26      	bgt.n	80076fa <_printf_common+0x96>
 80076ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80076b0:	1e13      	subs	r3, r2, #0
 80076b2:	6822      	ldr	r2, [r4, #0]
 80076b4:	bf18      	it	ne
 80076b6:	2301      	movne	r3, #1
 80076b8:	0692      	lsls	r2, r2, #26
 80076ba:	d42b      	bmi.n	8007714 <_printf_common+0xb0>
 80076bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80076c0:	4649      	mov	r1, r9
 80076c2:	4638      	mov	r0, r7
 80076c4:	47c0      	blx	r8
 80076c6:	3001      	adds	r0, #1
 80076c8:	d01e      	beq.n	8007708 <_printf_common+0xa4>
 80076ca:	6823      	ldr	r3, [r4, #0]
 80076cc:	68e5      	ldr	r5, [r4, #12]
 80076ce:	6832      	ldr	r2, [r6, #0]
 80076d0:	f003 0306 	and.w	r3, r3, #6
 80076d4:	2b04      	cmp	r3, #4
 80076d6:	bf08      	it	eq
 80076d8:	1aad      	subeq	r5, r5, r2
 80076da:	68a3      	ldr	r3, [r4, #8]
 80076dc:	6922      	ldr	r2, [r4, #16]
 80076de:	bf0c      	ite	eq
 80076e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80076e4:	2500      	movne	r5, #0
 80076e6:	4293      	cmp	r3, r2
 80076e8:	bfc4      	itt	gt
 80076ea:	1a9b      	subgt	r3, r3, r2
 80076ec:	18ed      	addgt	r5, r5, r3
 80076ee:	2600      	movs	r6, #0
 80076f0:	341a      	adds	r4, #26
 80076f2:	42b5      	cmp	r5, r6
 80076f4:	d11a      	bne.n	800772c <_printf_common+0xc8>
 80076f6:	2000      	movs	r0, #0
 80076f8:	e008      	b.n	800770c <_printf_common+0xa8>
 80076fa:	2301      	movs	r3, #1
 80076fc:	4652      	mov	r2, sl
 80076fe:	4649      	mov	r1, r9
 8007700:	4638      	mov	r0, r7
 8007702:	47c0      	blx	r8
 8007704:	3001      	adds	r0, #1
 8007706:	d103      	bne.n	8007710 <_printf_common+0xac>
 8007708:	f04f 30ff 	mov.w	r0, #4294967295
 800770c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007710:	3501      	adds	r5, #1
 8007712:	e7c6      	b.n	80076a2 <_printf_common+0x3e>
 8007714:	18e1      	adds	r1, r4, r3
 8007716:	1c5a      	adds	r2, r3, #1
 8007718:	2030      	movs	r0, #48	; 0x30
 800771a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800771e:	4422      	add	r2, r4
 8007720:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007724:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007728:	3302      	adds	r3, #2
 800772a:	e7c7      	b.n	80076bc <_printf_common+0x58>
 800772c:	2301      	movs	r3, #1
 800772e:	4622      	mov	r2, r4
 8007730:	4649      	mov	r1, r9
 8007732:	4638      	mov	r0, r7
 8007734:	47c0      	blx	r8
 8007736:	3001      	adds	r0, #1
 8007738:	d0e6      	beq.n	8007708 <_printf_common+0xa4>
 800773a:	3601      	adds	r6, #1
 800773c:	e7d9      	b.n	80076f2 <_printf_common+0x8e>
	...

08007740 <_printf_i>:
 8007740:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007744:	460c      	mov	r4, r1
 8007746:	4691      	mov	r9, r2
 8007748:	7e27      	ldrb	r7, [r4, #24]
 800774a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800774c:	2f78      	cmp	r7, #120	; 0x78
 800774e:	4680      	mov	r8, r0
 8007750:	469a      	mov	sl, r3
 8007752:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007756:	d807      	bhi.n	8007768 <_printf_i+0x28>
 8007758:	2f62      	cmp	r7, #98	; 0x62
 800775a:	d80a      	bhi.n	8007772 <_printf_i+0x32>
 800775c:	2f00      	cmp	r7, #0
 800775e:	f000 80d8 	beq.w	8007912 <_printf_i+0x1d2>
 8007762:	2f58      	cmp	r7, #88	; 0x58
 8007764:	f000 80a3 	beq.w	80078ae <_printf_i+0x16e>
 8007768:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800776c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007770:	e03a      	b.n	80077e8 <_printf_i+0xa8>
 8007772:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007776:	2b15      	cmp	r3, #21
 8007778:	d8f6      	bhi.n	8007768 <_printf_i+0x28>
 800777a:	a001      	add	r0, pc, #4	; (adr r0, 8007780 <_printf_i+0x40>)
 800777c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007780:	080077d9 	.word	0x080077d9
 8007784:	080077ed 	.word	0x080077ed
 8007788:	08007769 	.word	0x08007769
 800778c:	08007769 	.word	0x08007769
 8007790:	08007769 	.word	0x08007769
 8007794:	08007769 	.word	0x08007769
 8007798:	080077ed 	.word	0x080077ed
 800779c:	08007769 	.word	0x08007769
 80077a0:	08007769 	.word	0x08007769
 80077a4:	08007769 	.word	0x08007769
 80077a8:	08007769 	.word	0x08007769
 80077ac:	080078f9 	.word	0x080078f9
 80077b0:	0800781d 	.word	0x0800781d
 80077b4:	080078db 	.word	0x080078db
 80077b8:	08007769 	.word	0x08007769
 80077bc:	08007769 	.word	0x08007769
 80077c0:	0800791b 	.word	0x0800791b
 80077c4:	08007769 	.word	0x08007769
 80077c8:	0800781d 	.word	0x0800781d
 80077cc:	08007769 	.word	0x08007769
 80077d0:	08007769 	.word	0x08007769
 80077d4:	080078e3 	.word	0x080078e3
 80077d8:	680b      	ldr	r3, [r1, #0]
 80077da:	1d1a      	adds	r2, r3, #4
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	600a      	str	r2, [r1, #0]
 80077e0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80077e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80077e8:	2301      	movs	r3, #1
 80077ea:	e0a3      	b.n	8007934 <_printf_i+0x1f4>
 80077ec:	6825      	ldr	r5, [r4, #0]
 80077ee:	6808      	ldr	r0, [r1, #0]
 80077f0:	062e      	lsls	r6, r5, #24
 80077f2:	f100 0304 	add.w	r3, r0, #4
 80077f6:	d50a      	bpl.n	800780e <_printf_i+0xce>
 80077f8:	6805      	ldr	r5, [r0, #0]
 80077fa:	600b      	str	r3, [r1, #0]
 80077fc:	2d00      	cmp	r5, #0
 80077fe:	da03      	bge.n	8007808 <_printf_i+0xc8>
 8007800:	232d      	movs	r3, #45	; 0x2d
 8007802:	426d      	negs	r5, r5
 8007804:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007808:	485e      	ldr	r0, [pc, #376]	; (8007984 <_printf_i+0x244>)
 800780a:	230a      	movs	r3, #10
 800780c:	e019      	b.n	8007842 <_printf_i+0x102>
 800780e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007812:	6805      	ldr	r5, [r0, #0]
 8007814:	600b      	str	r3, [r1, #0]
 8007816:	bf18      	it	ne
 8007818:	b22d      	sxthne	r5, r5
 800781a:	e7ef      	b.n	80077fc <_printf_i+0xbc>
 800781c:	680b      	ldr	r3, [r1, #0]
 800781e:	6825      	ldr	r5, [r4, #0]
 8007820:	1d18      	adds	r0, r3, #4
 8007822:	6008      	str	r0, [r1, #0]
 8007824:	0628      	lsls	r0, r5, #24
 8007826:	d501      	bpl.n	800782c <_printf_i+0xec>
 8007828:	681d      	ldr	r5, [r3, #0]
 800782a:	e002      	b.n	8007832 <_printf_i+0xf2>
 800782c:	0669      	lsls	r1, r5, #25
 800782e:	d5fb      	bpl.n	8007828 <_printf_i+0xe8>
 8007830:	881d      	ldrh	r5, [r3, #0]
 8007832:	4854      	ldr	r0, [pc, #336]	; (8007984 <_printf_i+0x244>)
 8007834:	2f6f      	cmp	r7, #111	; 0x6f
 8007836:	bf0c      	ite	eq
 8007838:	2308      	moveq	r3, #8
 800783a:	230a      	movne	r3, #10
 800783c:	2100      	movs	r1, #0
 800783e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007842:	6866      	ldr	r6, [r4, #4]
 8007844:	60a6      	str	r6, [r4, #8]
 8007846:	2e00      	cmp	r6, #0
 8007848:	bfa2      	ittt	ge
 800784a:	6821      	ldrge	r1, [r4, #0]
 800784c:	f021 0104 	bicge.w	r1, r1, #4
 8007850:	6021      	strge	r1, [r4, #0]
 8007852:	b90d      	cbnz	r5, 8007858 <_printf_i+0x118>
 8007854:	2e00      	cmp	r6, #0
 8007856:	d04d      	beq.n	80078f4 <_printf_i+0x1b4>
 8007858:	4616      	mov	r6, r2
 800785a:	fbb5 f1f3 	udiv	r1, r5, r3
 800785e:	fb03 5711 	mls	r7, r3, r1, r5
 8007862:	5dc7      	ldrb	r7, [r0, r7]
 8007864:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007868:	462f      	mov	r7, r5
 800786a:	42bb      	cmp	r3, r7
 800786c:	460d      	mov	r5, r1
 800786e:	d9f4      	bls.n	800785a <_printf_i+0x11a>
 8007870:	2b08      	cmp	r3, #8
 8007872:	d10b      	bne.n	800788c <_printf_i+0x14c>
 8007874:	6823      	ldr	r3, [r4, #0]
 8007876:	07df      	lsls	r7, r3, #31
 8007878:	d508      	bpl.n	800788c <_printf_i+0x14c>
 800787a:	6923      	ldr	r3, [r4, #16]
 800787c:	6861      	ldr	r1, [r4, #4]
 800787e:	4299      	cmp	r1, r3
 8007880:	bfde      	ittt	le
 8007882:	2330      	movle	r3, #48	; 0x30
 8007884:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007888:	f106 36ff 	addle.w	r6, r6, #4294967295
 800788c:	1b92      	subs	r2, r2, r6
 800788e:	6122      	str	r2, [r4, #16]
 8007890:	f8cd a000 	str.w	sl, [sp]
 8007894:	464b      	mov	r3, r9
 8007896:	aa03      	add	r2, sp, #12
 8007898:	4621      	mov	r1, r4
 800789a:	4640      	mov	r0, r8
 800789c:	f7ff fee2 	bl	8007664 <_printf_common>
 80078a0:	3001      	adds	r0, #1
 80078a2:	d14c      	bne.n	800793e <_printf_i+0x1fe>
 80078a4:	f04f 30ff 	mov.w	r0, #4294967295
 80078a8:	b004      	add	sp, #16
 80078aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078ae:	4835      	ldr	r0, [pc, #212]	; (8007984 <_printf_i+0x244>)
 80078b0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80078b4:	6823      	ldr	r3, [r4, #0]
 80078b6:	680e      	ldr	r6, [r1, #0]
 80078b8:	061f      	lsls	r7, r3, #24
 80078ba:	f856 5b04 	ldr.w	r5, [r6], #4
 80078be:	600e      	str	r6, [r1, #0]
 80078c0:	d514      	bpl.n	80078ec <_printf_i+0x1ac>
 80078c2:	07d9      	lsls	r1, r3, #31
 80078c4:	bf44      	itt	mi
 80078c6:	f043 0320 	orrmi.w	r3, r3, #32
 80078ca:	6023      	strmi	r3, [r4, #0]
 80078cc:	b91d      	cbnz	r5, 80078d6 <_printf_i+0x196>
 80078ce:	6823      	ldr	r3, [r4, #0]
 80078d0:	f023 0320 	bic.w	r3, r3, #32
 80078d4:	6023      	str	r3, [r4, #0]
 80078d6:	2310      	movs	r3, #16
 80078d8:	e7b0      	b.n	800783c <_printf_i+0xfc>
 80078da:	6823      	ldr	r3, [r4, #0]
 80078dc:	f043 0320 	orr.w	r3, r3, #32
 80078e0:	6023      	str	r3, [r4, #0]
 80078e2:	2378      	movs	r3, #120	; 0x78
 80078e4:	4828      	ldr	r0, [pc, #160]	; (8007988 <_printf_i+0x248>)
 80078e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80078ea:	e7e3      	b.n	80078b4 <_printf_i+0x174>
 80078ec:	065e      	lsls	r6, r3, #25
 80078ee:	bf48      	it	mi
 80078f0:	b2ad      	uxthmi	r5, r5
 80078f2:	e7e6      	b.n	80078c2 <_printf_i+0x182>
 80078f4:	4616      	mov	r6, r2
 80078f6:	e7bb      	b.n	8007870 <_printf_i+0x130>
 80078f8:	680b      	ldr	r3, [r1, #0]
 80078fa:	6826      	ldr	r6, [r4, #0]
 80078fc:	6960      	ldr	r0, [r4, #20]
 80078fe:	1d1d      	adds	r5, r3, #4
 8007900:	600d      	str	r5, [r1, #0]
 8007902:	0635      	lsls	r5, r6, #24
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	d501      	bpl.n	800790c <_printf_i+0x1cc>
 8007908:	6018      	str	r0, [r3, #0]
 800790a:	e002      	b.n	8007912 <_printf_i+0x1d2>
 800790c:	0671      	lsls	r1, r6, #25
 800790e:	d5fb      	bpl.n	8007908 <_printf_i+0x1c8>
 8007910:	8018      	strh	r0, [r3, #0]
 8007912:	2300      	movs	r3, #0
 8007914:	6123      	str	r3, [r4, #16]
 8007916:	4616      	mov	r6, r2
 8007918:	e7ba      	b.n	8007890 <_printf_i+0x150>
 800791a:	680b      	ldr	r3, [r1, #0]
 800791c:	1d1a      	adds	r2, r3, #4
 800791e:	600a      	str	r2, [r1, #0]
 8007920:	681e      	ldr	r6, [r3, #0]
 8007922:	6862      	ldr	r2, [r4, #4]
 8007924:	2100      	movs	r1, #0
 8007926:	4630      	mov	r0, r6
 8007928:	f7f8 fc52 	bl	80001d0 <memchr>
 800792c:	b108      	cbz	r0, 8007932 <_printf_i+0x1f2>
 800792e:	1b80      	subs	r0, r0, r6
 8007930:	6060      	str	r0, [r4, #4]
 8007932:	6863      	ldr	r3, [r4, #4]
 8007934:	6123      	str	r3, [r4, #16]
 8007936:	2300      	movs	r3, #0
 8007938:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800793c:	e7a8      	b.n	8007890 <_printf_i+0x150>
 800793e:	6923      	ldr	r3, [r4, #16]
 8007940:	4632      	mov	r2, r6
 8007942:	4649      	mov	r1, r9
 8007944:	4640      	mov	r0, r8
 8007946:	47d0      	blx	sl
 8007948:	3001      	adds	r0, #1
 800794a:	d0ab      	beq.n	80078a4 <_printf_i+0x164>
 800794c:	6823      	ldr	r3, [r4, #0]
 800794e:	079b      	lsls	r3, r3, #30
 8007950:	d413      	bmi.n	800797a <_printf_i+0x23a>
 8007952:	68e0      	ldr	r0, [r4, #12]
 8007954:	9b03      	ldr	r3, [sp, #12]
 8007956:	4298      	cmp	r0, r3
 8007958:	bfb8      	it	lt
 800795a:	4618      	movlt	r0, r3
 800795c:	e7a4      	b.n	80078a8 <_printf_i+0x168>
 800795e:	2301      	movs	r3, #1
 8007960:	4632      	mov	r2, r6
 8007962:	4649      	mov	r1, r9
 8007964:	4640      	mov	r0, r8
 8007966:	47d0      	blx	sl
 8007968:	3001      	adds	r0, #1
 800796a:	d09b      	beq.n	80078a4 <_printf_i+0x164>
 800796c:	3501      	adds	r5, #1
 800796e:	68e3      	ldr	r3, [r4, #12]
 8007970:	9903      	ldr	r1, [sp, #12]
 8007972:	1a5b      	subs	r3, r3, r1
 8007974:	42ab      	cmp	r3, r5
 8007976:	dcf2      	bgt.n	800795e <_printf_i+0x21e>
 8007978:	e7eb      	b.n	8007952 <_printf_i+0x212>
 800797a:	2500      	movs	r5, #0
 800797c:	f104 0619 	add.w	r6, r4, #25
 8007980:	e7f5      	b.n	800796e <_printf_i+0x22e>
 8007982:	bf00      	nop
 8007984:	0800876d 	.word	0x0800876d
 8007988:	0800877e 	.word	0x0800877e

0800798c <memmove>:
 800798c:	4288      	cmp	r0, r1
 800798e:	b510      	push	{r4, lr}
 8007990:	eb01 0402 	add.w	r4, r1, r2
 8007994:	d902      	bls.n	800799c <memmove+0x10>
 8007996:	4284      	cmp	r4, r0
 8007998:	4623      	mov	r3, r4
 800799a:	d807      	bhi.n	80079ac <memmove+0x20>
 800799c:	1e43      	subs	r3, r0, #1
 800799e:	42a1      	cmp	r1, r4
 80079a0:	d008      	beq.n	80079b4 <memmove+0x28>
 80079a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80079a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80079aa:	e7f8      	b.n	800799e <memmove+0x12>
 80079ac:	4402      	add	r2, r0
 80079ae:	4601      	mov	r1, r0
 80079b0:	428a      	cmp	r2, r1
 80079b2:	d100      	bne.n	80079b6 <memmove+0x2a>
 80079b4:	bd10      	pop	{r4, pc}
 80079b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80079ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80079be:	e7f7      	b.n	80079b0 <memmove+0x24>

080079c0 <_free_r>:
 80079c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80079c2:	2900      	cmp	r1, #0
 80079c4:	d048      	beq.n	8007a58 <_free_r+0x98>
 80079c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079ca:	9001      	str	r0, [sp, #4]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	f1a1 0404 	sub.w	r4, r1, #4
 80079d2:	bfb8      	it	lt
 80079d4:	18e4      	addlt	r4, r4, r3
 80079d6:	f000 f8d3 	bl	8007b80 <__malloc_lock>
 80079da:	4a20      	ldr	r2, [pc, #128]	; (8007a5c <_free_r+0x9c>)
 80079dc:	9801      	ldr	r0, [sp, #4]
 80079de:	6813      	ldr	r3, [r2, #0]
 80079e0:	4615      	mov	r5, r2
 80079e2:	b933      	cbnz	r3, 80079f2 <_free_r+0x32>
 80079e4:	6063      	str	r3, [r4, #4]
 80079e6:	6014      	str	r4, [r2, #0]
 80079e8:	b003      	add	sp, #12
 80079ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80079ee:	f000 b8cd 	b.w	8007b8c <__malloc_unlock>
 80079f2:	42a3      	cmp	r3, r4
 80079f4:	d90b      	bls.n	8007a0e <_free_r+0x4e>
 80079f6:	6821      	ldr	r1, [r4, #0]
 80079f8:	1862      	adds	r2, r4, r1
 80079fa:	4293      	cmp	r3, r2
 80079fc:	bf04      	itt	eq
 80079fe:	681a      	ldreq	r2, [r3, #0]
 8007a00:	685b      	ldreq	r3, [r3, #4]
 8007a02:	6063      	str	r3, [r4, #4]
 8007a04:	bf04      	itt	eq
 8007a06:	1852      	addeq	r2, r2, r1
 8007a08:	6022      	streq	r2, [r4, #0]
 8007a0a:	602c      	str	r4, [r5, #0]
 8007a0c:	e7ec      	b.n	80079e8 <_free_r+0x28>
 8007a0e:	461a      	mov	r2, r3
 8007a10:	685b      	ldr	r3, [r3, #4]
 8007a12:	b10b      	cbz	r3, 8007a18 <_free_r+0x58>
 8007a14:	42a3      	cmp	r3, r4
 8007a16:	d9fa      	bls.n	8007a0e <_free_r+0x4e>
 8007a18:	6811      	ldr	r1, [r2, #0]
 8007a1a:	1855      	adds	r5, r2, r1
 8007a1c:	42a5      	cmp	r5, r4
 8007a1e:	d10b      	bne.n	8007a38 <_free_r+0x78>
 8007a20:	6824      	ldr	r4, [r4, #0]
 8007a22:	4421      	add	r1, r4
 8007a24:	1854      	adds	r4, r2, r1
 8007a26:	42a3      	cmp	r3, r4
 8007a28:	6011      	str	r1, [r2, #0]
 8007a2a:	d1dd      	bne.n	80079e8 <_free_r+0x28>
 8007a2c:	681c      	ldr	r4, [r3, #0]
 8007a2e:	685b      	ldr	r3, [r3, #4]
 8007a30:	6053      	str	r3, [r2, #4]
 8007a32:	4421      	add	r1, r4
 8007a34:	6011      	str	r1, [r2, #0]
 8007a36:	e7d7      	b.n	80079e8 <_free_r+0x28>
 8007a38:	d902      	bls.n	8007a40 <_free_r+0x80>
 8007a3a:	230c      	movs	r3, #12
 8007a3c:	6003      	str	r3, [r0, #0]
 8007a3e:	e7d3      	b.n	80079e8 <_free_r+0x28>
 8007a40:	6825      	ldr	r5, [r4, #0]
 8007a42:	1961      	adds	r1, r4, r5
 8007a44:	428b      	cmp	r3, r1
 8007a46:	bf04      	itt	eq
 8007a48:	6819      	ldreq	r1, [r3, #0]
 8007a4a:	685b      	ldreq	r3, [r3, #4]
 8007a4c:	6063      	str	r3, [r4, #4]
 8007a4e:	bf04      	itt	eq
 8007a50:	1949      	addeq	r1, r1, r5
 8007a52:	6021      	streq	r1, [r4, #0]
 8007a54:	6054      	str	r4, [r2, #4]
 8007a56:	e7c7      	b.n	80079e8 <_free_r+0x28>
 8007a58:	b003      	add	sp, #12
 8007a5a:	bd30      	pop	{r4, r5, pc}
 8007a5c:	200049a4 	.word	0x200049a4

08007a60 <_malloc_r>:
 8007a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a62:	1ccd      	adds	r5, r1, #3
 8007a64:	f025 0503 	bic.w	r5, r5, #3
 8007a68:	3508      	adds	r5, #8
 8007a6a:	2d0c      	cmp	r5, #12
 8007a6c:	bf38      	it	cc
 8007a6e:	250c      	movcc	r5, #12
 8007a70:	2d00      	cmp	r5, #0
 8007a72:	4606      	mov	r6, r0
 8007a74:	db01      	blt.n	8007a7a <_malloc_r+0x1a>
 8007a76:	42a9      	cmp	r1, r5
 8007a78:	d903      	bls.n	8007a82 <_malloc_r+0x22>
 8007a7a:	230c      	movs	r3, #12
 8007a7c:	6033      	str	r3, [r6, #0]
 8007a7e:	2000      	movs	r0, #0
 8007a80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a82:	f000 f87d 	bl	8007b80 <__malloc_lock>
 8007a86:	4921      	ldr	r1, [pc, #132]	; (8007b0c <_malloc_r+0xac>)
 8007a88:	680a      	ldr	r2, [r1, #0]
 8007a8a:	4614      	mov	r4, r2
 8007a8c:	b99c      	cbnz	r4, 8007ab6 <_malloc_r+0x56>
 8007a8e:	4f20      	ldr	r7, [pc, #128]	; (8007b10 <_malloc_r+0xb0>)
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	b923      	cbnz	r3, 8007a9e <_malloc_r+0x3e>
 8007a94:	4621      	mov	r1, r4
 8007a96:	4630      	mov	r0, r6
 8007a98:	f000 f862 	bl	8007b60 <_sbrk_r>
 8007a9c:	6038      	str	r0, [r7, #0]
 8007a9e:	4629      	mov	r1, r5
 8007aa0:	4630      	mov	r0, r6
 8007aa2:	f000 f85d 	bl	8007b60 <_sbrk_r>
 8007aa6:	1c43      	adds	r3, r0, #1
 8007aa8:	d123      	bne.n	8007af2 <_malloc_r+0x92>
 8007aaa:	230c      	movs	r3, #12
 8007aac:	6033      	str	r3, [r6, #0]
 8007aae:	4630      	mov	r0, r6
 8007ab0:	f000 f86c 	bl	8007b8c <__malloc_unlock>
 8007ab4:	e7e3      	b.n	8007a7e <_malloc_r+0x1e>
 8007ab6:	6823      	ldr	r3, [r4, #0]
 8007ab8:	1b5b      	subs	r3, r3, r5
 8007aba:	d417      	bmi.n	8007aec <_malloc_r+0x8c>
 8007abc:	2b0b      	cmp	r3, #11
 8007abe:	d903      	bls.n	8007ac8 <_malloc_r+0x68>
 8007ac0:	6023      	str	r3, [r4, #0]
 8007ac2:	441c      	add	r4, r3
 8007ac4:	6025      	str	r5, [r4, #0]
 8007ac6:	e004      	b.n	8007ad2 <_malloc_r+0x72>
 8007ac8:	6863      	ldr	r3, [r4, #4]
 8007aca:	42a2      	cmp	r2, r4
 8007acc:	bf0c      	ite	eq
 8007ace:	600b      	streq	r3, [r1, #0]
 8007ad0:	6053      	strne	r3, [r2, #4]
 8007ad2:	4630      	mov	r0, r6
 8007ad4:	f000 f85a 	bl	8007b8c <__malloc_unlock>
 8007ad8:	f104 000b 	add.w	r0, r4, #11
 8007adc:	1d23      	adds	r3, r4, #4
 8007ade:	f020 0007 	bic.w	r0, r0, #7
 8007ae2:	1ac2      	subs	r2, r0, r3
 8007ae4:	d0cc      	beq.n	8007a80 <_malloc_r+0x20>
 8007ae6:	1a1b      	subs	r3, r3, r0
 8007ae8:	50a3      	str	r3, [r4, r2]
 8007aea:	e7c9      	b.n	8007a80 <_malloc_r+0x20>
 8007aec:	4622      	mov	r2, r4
 8007aee:	6864      	ldr	r4, [r4, #4]
 8007af0:	e7cc      	b.n	8007a8c <_malloc_r+0x2c>
 8007af2:	1cc4      	adds	r4, r0, #3
 8007af4:	f024 0403 	bic.w	r4, r4, #3
 8007af8:	42a0      	cmp	r0, r4
 8007afa:	d0e3      	beq.n	8007ac4 <_malloc_r+0x64>
 8007afc:	1a21      	subs	r1, r4, r0
 8007afe:	4630      	mov	r0, r6
 8007b00:	f000 f82e 	bl	8007b60 <_sbrk_r>
 8007b04:	3001      	adds	r0, #1
 8007b06:	d1dd      	bne.n	8007ac4 <_malloc_r+0x64>
 8007b08:	e7cf      	b.n	8007aaa <_malloc_r+0x4a>
 8007b0a:	bf00      	nop
 8007b0c:	200049a4 	.word	0x200049a4
 8007b10:	200049a8 	.word	0x200049a8

08007b14 <_realloc_r>:
 8007b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b16:	4607      	mov	r7, r0
 8007b18:	4614      	mov	r4, r2
 8007b1a:	460e      	mov	r6, r1
 8007b1c:	b921      	cbnz	r1, 8007b28 <_realloc_r+0x14>
 8007b1e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007b22:	4611      	mov	r1, r2
 8007b24:	f7ff bf9c 	b.w	8007a60 <_malloc_r>
 8007b28:	b922      	cbnz	r2, 8007b34 <_realloc_r+0x20>
 8007b2a:	f7ff ff49 	bl	80079c0 <_free_r>
 8007b2e:	4625      	mov	r5, r4
 8007b30:	4628      	mov	r0, r5
 8007b32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b34:	f000 f830 	bl	8007b98 <_malloc_usable_size_r>
 8007b38:	42a0      	cmp	r0, r4
 8007b3a:	d20f      	bcs.n	8007b5c <_realloc_r+0x48>
 8007b3c:	4621      	mov	r1, r4
 8007b3e:	4638      	mov	r0, r7
 8007b40:	f7ff ff8e 	bl	8007a60 <_malloc_r>
 8007b44:	4605      	mov	r5, r0
 8007b46:	2800      	cmp	r0, #0
 8007b48:	d0f2      	beq.n	8007b30 <_realloc_r+0x1c>
 8007b4a:	4631      	mov	r1, r6
 8007b4c:	4622      	mov	r2, r4
 8007b4e:	f7ff fbf7 	bl	8007340 <memcpy>
 8007b52:	4631      	mov	r1, r6
 8007b54:	4638      	mov	r0, r7
 8007b56:	f7ff ff33 	bl	80079c0 <_free_r>
 8007b5a:	e7e9      	b.n	8007b30 <_realloc_r+0x1c>
 8007b5c:	4635      	mov	r5, r6
 8007b5e:	e7e7      	b.n	8007b30 <_realloc_r+0x1c>

08007b60 <_sbrk_r>:
 8007b60:	b538      	push	{r3, r4, r5, lr}
 8007b62:	4d06      	ldr	r5, [pc, #24]	; (8007b7c <_sbrk_r+0x1c>)
 8007b64:	2300      	movs	r3, #0
 8007b66:	4604      	mov	r4, r0
 8007b68:	4608      	mov	r0, r1
 8007b6a:	602b      	str	r3, [r5, #0]
 8007b6c:	f7f9 fbd6 	bl	800131c <_sbrk>
 8007b70:	1c43      	adds	r3, r0, #1
 8007b72:	d102      	bne.n	8007b7a <_sbrk_r+0x1a>
 8007b74:	682b      	ldr	r3, [r5, #0]
 8007b76:	b103      	cbz	r3, 8007b7a <_sbrk_r+0x1a>
 8007b78:	6023      	str	r3, [r4, #0]
 8007b7a:	bd38      	pop	{r3, r4, r5, pc}
 8007b7c:	20004f78 	.word	0x20004f78

08007b80 <__malloc_lock>:
 8007b80:	4801      	ldr	r0, [pc, #4]	; (8007b88 <__malloc_lock+0x8>)
 8007b82:	f000 b811 	b.w	8007ba8 <__retarget_lock_acquire_recursive>
 8007b86:	bf00      	nop
 8007b88:	20004f80 	.word	0x20004f80

08007b8c <__malloc_unlock>:
 8007b8c:	4801      	ldr	r0, [pc, #4]	; (8007b94 <__malloc_unlock+0x8>)
 8007b8e:	f000 b80c 	b.w	8007baa <__retarget_lock_release_recursive>
 8007b92:	bf00      	nop
 8007b94:	20004f80 	.word	0x20004f80

08007b98 <_malloc_usable_size_r>:
 8007b98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b9c:	1f18      	subs	r0, r3, #4
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	bfbc      	itt	lt
 8007ba2:	580b      	ldrlt	r3, [r1, r0]
 8007ba4:	18c0      	addlt	r0, r0, r3
 8007ba6:	4770      	bx	lr

08007ba8 <__retarget_lock_acquire_recursive>:
 8007ba8:	4770      	bx	lr

08007baa <__retarget_lock_release_recursive>:
 8007baa:	4770      	bx	lr

08007bac <_init>:
 8007bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bae:	bf00      	nop
 8007bb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bb2:	bc08      	pop	{r3}
 8007bb4:	469e      	mov	lr, r3
 8007bb6:	4770      	bx	lr

08007bb8 <_fini>:
 8007bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bba:	bf00      	nop
 8007bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bbe:	bc08      	pop	{r3}
 8007bc0:	469e      	mov	lr, r3
 8007bc2:	4770      	bx	lr
