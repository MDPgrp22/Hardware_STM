
mdp_hardware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007824  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bd8  080079b4  080079b4  000179b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800858c  0800858c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800858c  0800858c  0001858c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008594  08008594  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008594  08008594  00018594  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008598  08008598  00018598  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800859c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00004f34  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004fa8  20004fa8  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001cef9  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000375c  00000000  00000000  0003cf9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001578  00000000  00000000  00040700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001440  00000000  00000000  00041c78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003e9d  00000000  00000000  000430b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018a11  00000000  00000000  00046f55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d576a  00000000  00000000  0005f966  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001350d0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005e20  00000000  00000000  00135124  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800799c 	.word	0x0800799c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	0800799c 	.word	0x0800799c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056c:	f000 ff40 	bl	80013f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000570:	f000 f854 	bl	800061c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000574:	f000 faca 	bl	8000b0c <MX_GPIO_Init>
  MX_TIM8_Init();
 8000578:	f000 f9f4 	bl	8000964 <MX_TIM8_Init>
  MX_TIM2_Init();
 800057c:	f000 f94a 	bl	8000814 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000580:	f000 f99c 	bl	80008bc <MX_TIM3_Init>
  MX_TIM1_Init();
 8000584:	f000 f8a8 	bl	80006d8 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8000588:	f000 fa96 	bl	8000ab8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  OLED_Init();
 800058c:	f006 fd1a 	bl	8006fc4 <OLED_Init>

  HAL_UART_Receive_IT(&huart3, (uint8_t *) aRxBuffer, 4);
 8000590:	2204      	movs	r2, #4
 8000592:	4914      	ldr	r1, [pc, #80]	; (80005e4 <main+0x7c>)
 8000594:	4814      	ldr	r0, [pc, #80]	; (80005e8 <main+0x80>)
 8000596:	f002 ff70 	bl	800347a <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800059a:	f003 fe1d 	bl	80041d8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800059e:	4a13      	ldr	r2, [pc, #76]	; (80005ec <main+0x84>)
 80005a0:	2100      	movs	r1, #0
 80005a2:	4813      	ldr	r0, [pc, #76]	; (80005f0 <main+0x88>)
 80005a4:	f003 fe62 	bl	800426c <osThreadNew>
 80005a8:	4603      	mov	r3, r0
 80005aa:	4a12      	ldr	r2, [pc, #72]	; (80005f4 <main+0x8c>)
 80005ac:	6013      	str	r3, [r2, #0]

  /* creation of MotorTask */
  MotorTaskHandle = osThreadNew(motor, NULL, &MotorTask_attributes);
 80005ae:	4a12      	ldr	r2, [pc, #72]	; (80005f8 <main+0x90>)
 80005b0:	2100      	movs	r1, #0
 80005b2:	4812      	ldr	r0, [pc, #72]	; (80005fc <main+0x94>)
 80005b4:	f003 fe5a 	bl	800426c <osThreadNew>
 80005b8:	4603      	mov	r3, r0
 80005ba:	4a11      	ldr	r2, [pc, #68]	; (8000600 <main+0x98>)
 80005bc:	6013      	str	r3, [r2, #0]

  /* creation of showOLED */
  showOLEDHandle = osThreadNew(showoled, NULL, &showOLED_attributes);
 80005be:	4a11      	ldr	r2, [pc, #68]	; (8000604 <main+0x9c>)
 80005c0:	2100      	movs	r1, #0
 80005c2:	4811      	ldr	r0, [pc, #68]	; (8000608 <main+0xa0>)
 80005c4:	f003 fe52 	bl	800426c <osThreadNew>
 80005c8:	4603      	mov	r3, r0
 80005ca:	4a10      	ldr	r2, [pc, #64]	; (800060c <main+0xa4>)
 80005cc:	6013      	str	r3, [r2, #0]

  /* creation of EncoderTask */
  EncoderTaskHandle = osThreadNew(encoder_task, NULL, &EncoderTask_attributes);
 80005ce:	4a10      	ldr	r2, [pc, #64]	; (8000610 <main+0xa8>)
 80005d0:	2100      	movs	r1, #0
 80005d2:	4810      	ldr	r0, [pc, #64]	; (8000614 <main+0xac>)
 80005d4:	f003 fe4a 	bl	800426c <osThreadNew>
 80005d8:	4603      	mov	r3, r0
 80005da:	4a0f      	ldr	r2, [pc, #60]	; (8000618 <main+0xb0>)
 80005dc:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005de:	f003 fe1f 	bl	8004220 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005e2:	e7fe      	b.n	80005e2 <main+0x7a>
 80005e4:	20004ad4 	.word	0x20004ad4
 80005e8:	200049f8 	.word	0x200049f8
 80005ec:	08007a4c 	.word	0x08007a4c
 80005f0:	08000c61 	.word	0x08000c61
 80005f4:	200049ac 	.word	0x200049ac
 80005f8:	08007a70 	.word	0x08007a70
 80005fc:	08000c75 	.word	0x08000c75
 8000600:	20004a3c 	.word	0x20004a3c
 8000604:	08007a94 	.word	0x08007a94
 8000608:	08000e51 	.word	0x08000e51
 800060c:	20004b50 	.word	0x20004b50
 8000610:	08007ab8 	.word	0x08007ab8
 8000614:	08000e99 	.word	0x08000e99
 8000618:	20004a40 	.word	0x20004a40

0800061c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b094      	sub	sp, #80	; 0x50
 8000620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000622:	f107 0320 	add.w	r3, r7, #32
 8000626:	2230      	movs	r2, #48	; 0x30
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f006 fd8e 	bl	800714c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000630:	f107 030c 	add.w	r3, r7, #12
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]
 800063e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000640:	2300      	movs	r3, #0
 8000642:	60bb      	str	r3, [r7, #8]
 8000644:	4b22      	ldr	r3, [pc, #136]	; (80006d0 <SystemClock_Config+0xb4>)
 8000646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000648:	4a21      	ldr	r2, [pc, #132]	; (80006d0 <SystemClock_Config+0xb4>)
 800064a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800064e:	6413      	str	r3, [r2, #64]	; 0x40
 8000650:	4b1f      	ldr	r3, [pc, #124]	; (80006d0 <SystemClock_Config+0xb4>)
 8000652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000654:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000658:	60bb      	str	r3, [r7, #8]
 800065a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800065c:	2300      	movs	r3, #0
 800065e:	607b      	str	r3, [r7, #4]
 8000660:	4b1c      	ldr	r3, [pc, #112]	; (80006d4 <SystemClock_Config+0xb8>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a1b      	ldr	r2, [pc, #108]	; (80006d4 <SystemClock_Config+0xb8>)
 8000666:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800066a:	6013      	str	r3, [r2, #0]
 800066c:	4b19      	ldr	r3, [pc, #100]	; (80006d4 <SystemClock_Config+0xb8>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000674:	607b      	str	r3, [r7, #4]
 8000676:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000678:	2302      	movs	r3, #2
 800067a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800067c:	2301      	movs	r3, #1
 800067e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000680:	2310      	movs	r3, #16
 8000682:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000684:	2300      	movs	r3, #0
 8000686:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000688:	f107 0320 	add.w	r3, r7, #32
 800068c:	4618      	mov	r0, r3
 800068e:	f001 fae1 	bl	8001c54 <HAL_RCC_OscConfig>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000698:	f000 fc56 	bl	8000f48 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069c:	230f      	movs	r3, #15
 800069e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006a0:	2300      	movs	r3, #0
 80006a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a4:	2300      	movs	r3, #0
 80006a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006a8:	2300      	movs	r3, #0
 80006aa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006b0:	f107 030c 	add.w	r3, r7, #12
 80006b4:	2100      	movs	r1, #0
 80006b6:	4618      	mov	r0, r3
 80006b8:	f001 fd44 	bl	8002144 <HAL_RCC_ClockConfig>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80006c2:	f000 fc41 	bl	8000f48 <Error_Handler>
  }
}
 80006c6:	bf00      	nop
 80006c8:	3750      	adds	r7, #80	; 0x50
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40023800 	.word	0x40023800
 80006d4:	40007000 	.word	0x40007000

080006d8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b096      	sub	sp, #88	; 0x58
 80006dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006de:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80006e2:	2200      	movs	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]
 80006e6:	605a      	str	r2, [r3, #4]
 80006e8:	609a      	str	r2, [r3, #8]
 80006ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006ec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
 80006fe:	605a      	str	r2, [r3, #4]
 8000700:	609a      	str	r2, [r3, #8]
 8000702:	60da      	str	r2, [r3, #12]
 8000704:	611a      	str	r2, [r3, #16]
 8000706:	615a      	str	r2, [r3, #20]
 8000708:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800070a:	1d3b      	adds	r3, r7, #4
 800070c:	2220      	movs	r2, #32
 800070e:	2100      	movs	r1, #0
 8000710:	4618      	mov	r0, r3
 8000712:	f006 fd1b 	bl	800714c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000716:	4b3d      	ldr	r3, [pc, #244]	; (800080c <MX_TIM1_Init+0x134>)
 8000718:	4a3d      	ldr	r2, [pc, #244]	; (8000810 <MX_TIM1_Init+0x138>)
 800071a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160;
 800071c:	4b3b      	ldr	r3, [pc, #236]	; (800080c <MX_TIM1_Init+0x134>)
 800071e:	22a0      	movs	r2, #160	; 0xa0
 8000720:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000722:	4b3a      	ldr	r3, [pc, #232]	; (800080c <MX_TIM1_Init+0x134>)
 8000724:	2200      	movs	r2, #0
 8000726:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8000728:	4b38      	ldr	r3, [pc, #224]	; (800080c <MX_TIM1_Init+0x134>)
 800072a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800072e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000730:	4b36      	ldr	r3, [pc, #216]	; (800080c <MX_TIM1_Init+0x134>)
 8000732:	2200      	movs	r2, #0
 8000734:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000736:	4b35      	ldr	r3, [pc, #212]	; (800080c <MX_TIM1_Init+0x134>)
 8000738:	2200      	movs	r2, #0
 800073a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800073c:	4b33      	ldr	r3, [pc, #204]	; (800080c <MX_TIM1_Init+0x134>)
 800073e:	2280      	movs	r2, #128	; 0x80
 8000740:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000742:	4832      	ldr	r0, [pc, #200]	; (800080c <MX_TIM1_Init+0x134>)
 8000744:	f001 fece 	bl	80024e4 <HAL_TIM_Base_Init>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800074e:	f000 fbfb 	bl	8000f48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000752:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000756:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000758:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800075c:	4619      	mov	r1, r3
 800075e:	482b      	ldr	r0, [pc, #172]	; (800080c <MX_TIM1_Init+0x134>)
 8000760:	f002 f998 	bl	8002a94 <HAL_TIM_ConfigClockSource>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800076a:	f000 fbed 	bl	8000f48 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800076e:	4827      	ldr	r0, [pc, #156]	; (800080c <MX_TIM1_Init+0x134>)
 8000770:	f001 ff07 	bl	8002582 <HAL_TIM_PWM_Init>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800077a:	f000 fbe5 	bl	8000f48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800077e:	2300      	movs	r3, #0
 8000780:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000782:	2300      	movs	r3, #0
 8000784:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000786:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800078a:	4619      	mov	r1, r3
 800078c:	481f      	ldr	r0, [pc, #124]	; (800080c <MX_TIM1_Init+0x134>)
 800078e:	f002 fd59 	bl	8003244 <HAL_TIMEx_MasterConfigSynchronization>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000798:	f000 fbd6 	bl	8000f48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800079c:	2360      	movs	r3, #96	; 0x60
 800079e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80007a0:	2300      	movs	r3, #0
 80007a2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007a4:	2300      	movs	r3, #0
 80007a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007a8:	2300      	movs	r3, #0
 80007aa:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007ac:	2300      	movs	r3, #0
 80007ae:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007b0:	2300      	movs	r3, #0
 80007b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80007b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007b8:	220c      	movs	r2, #12
 80007ba:	4619      	mov	r1, r3
 80007bc:	4813      	ldr	r0, [pc, #76]	; (800080c <MX_TIM1_Init+0x134>)
 80007be:	f002 f8a7 	bl	8002910 <HAL_TIM_PWM_ConfigChannel>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 80007c8:	f000 fbbe 	bl	8000f48 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007cc:	2300      	movs	r3, #0
 80007ce:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007d0:	2300      	movs	r3, #0
 80007d2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007d4:	2300      	movs	r3, #0
 80007d6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80007d8:	2300      	movs	r3, #0
 80007da:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007dc:	2300      	movs	r3, #0
 80007de:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007e4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007e6:	2300      	movs	r3, #0
 80007e8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80007ea:	1d3b      	adds	r3, r7, #4
 80007ec:	4619      	mov	r1, r3
 80007ee:	4807      	ldr	r0, [pc, #28]	; (800080c <MX_TIM1_Init+0x134>)
 80007f0:	f002 fda4 	bl	800333c <HAL_TIMEx_ConfigBreakDeadTime>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 80007fa:	f000 fba5 	bl	8000f48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80007fe:	4803      	ldr	r0, [pc, #12]	; (800080c <MX_TIM1_Init+0x134>)
 8000800:	f000 fccc 	bl	800119c <HAL_TIM_MspPostInit>

}
 8000804:	bf00      	nop
 8000806:	3758      	adds	r7, #88	; 0x58
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	20004a8c 	.word	0x20004a8c
 8000810:	40010000 	.word	0x40010000

08000814 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b08c      	sub	sp, #48	; 0x30
 8000818:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800081a:	f107 030c 	add.w	r3, r7, #12
 800081e:	2224      	movs	r2, #36	; 0x24
 8000820:	2100      	movs	r1, #0
 8000822:	4618      	mov	r0, r3
 8000824:	f006 fc92 	bl	800714c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000828:	1d3b      	adds	r3, r7, #4
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000830:	4b21      	ldr	r3, [pc, #132]	; (80008b8 <MX_TIM2_Init+0xa4>)
 8000832:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000836:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000838:	4b1f      	ldr	r3, [pc, #124]	; (80008b8 <MX_TIM2_Init+0xa4>)
 800083a:	2200      	movs	r2, #0
 800083c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800083e:	4b1e      	ldr	r3, [pc, #120]	; (80008b8 <MX_TIM2_Init+0xa4>)
 8000840:	2200      	movs	r2, #0
 8000842:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000844:	4b1c      	ldr	r3, [pc, #112]	; (80008b8 <MX_TIM2_Init+0xa4>)
 8000846:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800084a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800084c:	4b1a      	ldr	r3, [pc, #104]	; (80008b8 <MX_TIM2_Init+0xa4>)
 800084e:	2200      	movs	r2, #0
 8000850:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000852:	4b19      	ldr	r3, [pc, #100]	; (80008b8 <MX_TIM2_Init+0xa4>)
 8000854:	2200      	movs	r2, #0
 8000856:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000858:	2303      	movs	r3, #3
 800085a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800085c:	2300      	movs	r3, #0
 800085e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000860:	2301      	movs	r3, #1
 8000862:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000864:	2300      	movs	r3, #0
 8000866:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8000868:	230a      	movs	r3, #10
 800086a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800086c:	2300      	movs	r3, #0
 800086e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000870:	2301      	movs	r3, #1
 8000872:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000874:	2300      	movs	r3, #0
 8000876:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8000878:	230a      	movs	r3, #10
 800087a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800087c:	f107 030c 	add.w	r3, r7, #12
 8000880:	4619      	mov	r1, r3
 8000882:	480d      	ldr	r0, [pc, #52]	; (80008b8 <MX_TIM2_Init+0xa4>)
 8000884:	f001 ff9e 	bl	80027c4 <HAL_TIM_Encoder_Init>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800088e:	f000 fb5b 	bl	8000f48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000892:	2300      	movs	r3, #0
 8000894:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000896:	2300      	movs	r3, #0
 8000898:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800089a:	1d3b      	adds	r3, r7, #4
 800089c:	4619      	mov	r1, r3
 800089e:	4806      	ldr	r0, [pc, #24]	; (80008b8 <MX_TIM2_Init+0xa4>)
 80008a0:	f002 fcd0 	bl	8003244 <HAL_TIMEx_MasterConfigSynchronization>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80008aa:	f000 fb4d 	bl	8000f48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80008ae:	bf00      	nop
 80008b0:	3730      	adds	r7, #48	; 0x30
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	20004b08 	.word	0x20004b08

080008bc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b08c      	sub	sp, #48	; 0x30
 80008c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80008c2:	f107 030c 	add.w	r3, r7, #12
 80008c6:	2224      	movs	r2, #36	; 0x24
 80008c8:	2100      	movs	r1, #0
 80008ca:	4618      	mov	r0, r3
 80008cc:	f006 fc3e 	bl	800714c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008d0:	1d3b      	adds	r3, r7, #4
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008d8:	4b20      	ldr	r3, [pc, #128]	; (800095c <MX_TIM3_Init+0xa0>)
 80008da:	4a21      	ldr	r2, [pc, #132]	; (8000960 <MX_TIM3_Init+0xa4>)
 80008dc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80008de:	4b1f      	ldr	r3, [pc, #124]	; (800095c <MX_TIM3_Init+0xa0>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008e4:	4b1d      	ldr	r3, [pc, #116]	; (800095c <MX_TIM3_Init+0xa0>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80008ea:	4b1c      	ldr	r3, [pc, #112]	; (800095c <MX_TIM3_Init+0xa0>)
 80008ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008f0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008f2:	4b1a      	ldr	r3, [pc, #104]	; (800095c <MX_TIM3_Init+0xa0>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008f8:	4b18      	ldr	r3, [pc, #96]	; (800095c <MX_TIM3_Init+0xa0>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80008fe:	2303      	movs	r3, #3
 8000900:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000902:	2300      	movs	r3, #0
 8000904:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000906:	2301      	movs	r3, #1
 8000908:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800090a:	2300      	movs	r3, #0
 800090c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 800090e:	230a      	movs	r3, #10
 8000910:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000912:	2300      	movs	r3, #0
 8000914:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000916:	2301      	movs	r3, #1
 8000918:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800091a:	2300      	movs	r3, #0
 800091c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 800091e:	230a      	movs	r3, #10
 8000920:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000922:	f107 030c 	add.w	r3, r7, #12
 8000926:	4619      	mov	r1, r3
 8000928:	480c      	ldr	r0, [pc, #48]	; (800095c <MX_TIM3_Init+0xa0>)
 800092a:	f001 ff4b 	bl	80027c4 <HAL_TIM_Encoder_Init>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000934:	f000 fb08 	bl	8000f48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000938:	2300      	movs	r3, #0
 800093a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800093c:	2300      	movs	r3, #0
 800093e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000940:	1d3b      	adds	r3, r7, #4
 8000942:	4619      	mov	r1, r3
 8000944:	4805      	ldr	r0, [pc, #20]	; (800095c <MX_TIM3_Init+0xa0>)
 8000946:	f002 fc7d 	bl	8003244 <HAL_TIMEx_MasterConfigSynchronization>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000950:	f000 fafa 	bl	8000f48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000954:	bf00      	nop
 8000956:	3730      	adds	r7, #48	; 0x30
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	20004a44 	.word	0x20004a44
 8000960:	40000400 	.word	0x40000400

08000964 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b096      	sub	sp, #88	; 0x58
 8000968:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800096a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800096e:	2200      	movs	r2, #0
 8000970:	601a      	str	r2, [r3, #0]
 8000972:	605a      	str	r2, [r3, #4]
 8000974:	609a      	str	r2, [r3, #8]
 8000976:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000978:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800097c:	2200      	movs	r2, #0
 800097e:	601a      	str	r2, [r3, #0]
 8000980:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000982:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000986:	2200      	movs	r2, #0
 8000988:	601a      	str	r2, [r3, #0]
 800098a:	605a      	str	r2, [r3, #4]
 800098c:	609a      	str	r2, [r3, #8]
 800098e:	60da      	str	r2, [r3, #12]
 8000990:	611a      	str	r2, [r3, #16]
 8000992:	615a      	str	r2, [r3, #20]
 8000994:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000996:	1d3b      	adds	r3, r7, #4
 8000998:	2220      	movs	r2, #32
 800099a:	2100      	movs	r1, #0
 800099c:	4618      	mov	r0, r3
 800099e:	f006 fbd5 	bl	800714c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80009a2:	4b43      	ldr	r3, [pc, #268]	; (8000ab0 <MX_TIM8_Init+0x14c>)
 80009a4:	4a43      	ldr	r2, [pc, #268]	; (8000ab4 <MX_TIM8_Init+0x150>)
 80009a6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80009a8:	4b41      	ldr	r3, [pc, #260]	; (8000ab0 <MX_TIM8_Init+0x14c>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ae:	4b40      	ldr	r3, [pc, #256]	; (8000ab0 <MX_TIM8_Init+0x14c>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 80009b4:	4b3e      	ldr	r3, [pc, #248]	; (8000ab0 <MX_TIM8_Init+0x14c>)
 80009b6:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80009ba:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009bc:	4b3c      	ldr	r3, [pc, #240]	; (8000ab0 <MX_TIM8_Init+0x14c>)
 80009be:	2200      	movs	r2, #0
 80009c0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80009c2:	4b3b      	ldr	r3, [pc, #236]	; (8000ab0 <MX_TIM8_Init+0x14c>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009c8:	4b39      	ldr	r3, [pc, #228]	; (8000ab0 <MX_TIM8_Init+0x14c>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80009ce:	4838      	ldr	r0, [pc, #224]	; (8000ab0 <MX_TIM8_Init+0x14c>)
 80009d0:	f001 fd88 	bl	80024e4 <HAL_TIM_Base_Init>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80009da:	f000 fab5 	bl	8000f48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009e2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80009e4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80009e8:	4619      	mov	r1, r3
 80009ea:	4831      	ldr	r0, [pc, #196]	; (8000ab0 <MX_TIM8_Init+0x14c>)
 80009ec:	f002 f852 	bl	8002a94 <HAL_TIM_ConfigClockSource>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80009f6:	f000 faa7 	bl	8000f48 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80009fa:	482d      	ldr	r0, [pc, #180]	; (8000ab0 <MX_TIM8_Init+0x14c>)
 80009fc:	f001 fdc1 	bl	8002582 <HAL_TIM_PWM_Init>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8000a06:	f000 fa9f 	bl	8000f48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000a12:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a16:	4619      	mov	r1, r3
 8000a18:	4825      	ldr	r0, [pc, #148]	; (8000ab0 <MX_TIM8_Init+0x14c>)
 8000a1a:	f002 fc13 	bl	8003244 <HAL_TIMEx_MasterConfigSynchronization>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8000a24:	f000 fa90 	bl	8000f48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a28:	2360      	movs	r3, #96	; 0x60
 8000a2a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a30:	2300      	movs	r3, #0
 8000a32:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a34:	2300      	movs	r3, #0
 8000a36:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a40:	2300      	movs	r3, #0
 8000a42:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a48:	2200      	movs	r2, #0
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4818      	ldr	r0, [pc, #96]	; (8000ab0 <MX_TIM8_Init+0x14c>)
 8000a4e:	f001 ff5f 	bl	8002910 <HAL_TIM_PWM_ConfigChannel>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8000a58:	f000 fa76 	bl	8000f48 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a60:	2204      	movs	r2, #4
 8000a62:	4619      	mov	r1, r3
 8000a64:	4812      	ldr	r0, [pc, #72]	; (8000ab0 <MX_TIM8_Init+0x14c>)
 8000a66:	f001 ff53 	bl	8002910 <HAL_TIM_PWM_ConfigChannel>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8000a70:	f000 fa6a 	bl	8000f48 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a74:	2300      	movs	r3, #0
 8000a76:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a80:	2300      	movs	r3, #0
 8000a82:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a84:	2300      	movs	r3, #0
 8000a86:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a8c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000a92:	1d3b      	adds	r3, r7, #4
 8000a94:	4619      	mov	r1, r3
 8000a96:	4806      	ldr	r0, [pc, #24]	; (8000ab0 <MX_TIM8_Init+0x14c>)
 8000a98:	f002 fc50 	bl	800333c <HAL_TIMEx_ConfigBreakDeadTime>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8000aa2:	f000 fa51 	bl	8000f48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000aa6:	bf00      	nop
 8000aa8:	3758      	adds	r7, #88	; 0x58
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	200049b0 	.word	0x200049b0
 8000ab4:	40010400 	.word	0x40010400

08000ab8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000abc:	4b11      	ldr	r3, [pc, #68]	; (8000b04 <MX_USART3_UART_Init+0x4c>)
 8000abe:	4a12      	ldr	r2, [pc, #72]	; (8000b08 <MX_USART3_UART_Init+0x50>)
 8000ac0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ac2:	4b10      	ldr	r3, [pc, #64]	; (8000b04 <MX_USART3_UART_Init+0x4c>)
 8000ac4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ac8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000aca:	4b0e      	ldr	r3, [pc, #56]	; (8000b04 <MX_USART3_UART_Init+0x4c>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ad0:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <MX_USART3_UART_Init+0x4c>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ad6:	4b0b      	ldr	r3, [pc, #44]	; (8000b04 <MX_USART3_UART_Init+0x4c>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000adc:	4b09      	ldr	r3, [pc, #36]	; (8000b04 <MX_USART3_UART_Init+0x4c>)
 8000ade:	220c      	movs	r2, #12
 8000ae0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ae2:	4b08      	ldr	r3, [pc, #32]	; (8000b04 <MX_USART3_UART_Init+0x4c>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ae8:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <MX_USART3_UART_Init+0x4c>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000aee:	4805      	ldr	r0, [pc, #20]	; (8000b04 <MX_USART3_UART_Init+0x4c>)
 8000af0:	f002 fc76 	bl	80033e0 <HAL_UART_Init>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000afa:	f000 fa25 	bl	8000f48 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000afe:	bf00      	nop
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	200049f8 	.word	0x200049f8
 8000b08:	40004800 	.word	0x40004800

08000b0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b08a      	sub	sp, #40	; 0x28
 8000b10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b12:	f107 0314 	add.w	r3, r7, #20
 8000b16:	2200      	movs	r2, #0
 8000b18:	601a      	str	r2, [r3, #0]
 8000b1a:	605a      	str	r2, [r3, #4]
 8000b1c:	609a      	str	r2, [r3, #8]
 8000b1e:	60da      	str	r2, [r3, #12]
 8000b20:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	613b      	str	r3, [r7, #16]
 8000b26:	4b31      	ldr	r3, [pc, #196]	; (8000bec <MX_GPIO_Init+0xe0>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	4a30      	ldr	r2, [pc, #192]	; (8000bec <MX_GPIO_Init+0xe0>)
 8000b2c:	f043 0310 	orr.w	r3, r3, #16
 8000b30:	6313      	str	r3, [r2, #48]	; 0x30
 8000b32:	4b2e      	ldr	r3, [pc, #184]	; (8000bec <MX_GPIO_Init+0xe0>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	f003 0310 	and.w	r3, r3, #16
 8000b3a:	613b      	str	r3, [r7, #16]
 8000b3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	60fb      	str	r3, [r7, #12]
 8000b42:	4b2a      	ldr	r3, [pc, #168]	; (8000bec <MX_GPIO_Init+0xe0>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	4a29      	ldr	r2, [pc, #164]	; (8000bec <MX_GPIO_Init+0xe0>)
 8000b48:	f043 0301 	orr.w	r3, r3, #1
 8000b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4e:	4b27      	ldr	r3, [pc, #156]	; (8000bec <MX_GPIO_Init+0xe0>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	f003 0301 	and.w	r3, r3, #1
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	60bb      	str	r3, [r7, #8]
 8000b5e:	4b23      	ldr	r3, [pc, #140]	; (8000bec <MX_GPIO_Init+0xe0>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	4a22      	ldr	r2, [pc, #136]	; (8000bec <MX_GPIO_Init+0xe0>)
 8000b64:	f043 0304 	orr.w	r3, r3, #4
 8000b68:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6a:	4b20      	ldr	r3, [pc, #128]	; (8000bec <MX_GPIO_Init+0xe0>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	f003 0304 	and.w	r3, r3, #4
 8000b72:	60bb      	str	r3, [r7, #8]
 8000b74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	607b      	str	r3, [r7, #4]
 8000b7a:	4b1c      	ldr	r3, [pc, #112]	; (8000bec <MX_GPIO_Init+0xe0>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	4a1b      	ldr	r2, [pc, #108]	; (8000bec <MX_GPIO_Init+0xe0>)
 8000b80:	f043 0302 	orr.w	r3, r3, #2
 8000b84:	6313      	str	r3, [r2, #48]	; 0x30
 8000b86:	4b19      	ldr	r3, [pc, #100]	; (8000bec <MX_GPIO_Init+0xe0>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	f003 0302 	and.w	r3, r3, #2
 8000b8e:	607b      	str	r3, [r7, #4]
 8000b90:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 8000b92:	2200      	movs	r2, #0
 8000b94:	f44f 61bc 	mov.w	r1, #1504	; 0x5e0
 8000b98:	4815      	ldr	r0, [pc, #84]	; (8000bf0 <MX_GPIO_Init+0xe4>)
 8000b9a:	f000 ffff 	bl	8001b9c <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin, GPIO_PIN_RESET);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	213c      	movs	r1, #60	; 0x3c
 8000ba2:	4814      	ldr	r0, [pc, #80]	; (8000bf4 <MX_GPIO_Init+0xe8>)
 8000ba4:	f000 fffa 	bl	8001b9c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin
                           LED3_Pin */
  GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 8000ba8:	f44f 63bc 	mov.w	r3, #1504	; 0x5e0
 8000bac:	617b      	str	r3, [r7, #20]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bba:	f107 0314 	add.w	r3, r7, #20
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	480b      	ldr	r0, [pc, #44]	; (8000bf0 <MX_GPIO_Init+0xe4>)
 8000bc2:	f000 fe4f 	bl	8001864 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin BIN1_Pin BIN2_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin;
 8000bc6:	233c      	movs	r3, #60	; 0x3c
 8000bc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd6:	f107 0314 	add.w	r3, r7, #20
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4805      	ldr	r0, [pc, #20]	; (8000bf4 <MX_GPIO_Init+0xe8>)
 8000bde:	f000 fe41 	bl	8001864 <HAL_GPIO_Init>

}
 8000be2:	bf00      	nop
 8000be4:	3728      	adds	r7, #40	; 0x28
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40023800 	.word	0x40023800
 8000bf0:	40021000 	.word	0x40021000
 8000bf4:	40020000 	.word	0x40020000

08000bf8 <HAL_UART_RxCpltCallback>:
  * @brief  Function called during Serial interrupt
  * @param  argument: UART_HandleTypeDef
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b094      	sub	sp, #80	; 0x50
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
	int frontback;
	int fb_speed;
	int leftright;
	int lr_speed;

	frontback = (int)(aRxBuffer[0]);
 8000c00:	4b13      	ldr	r3, [pc, #76]	; (8000c50 <HAL_UART_RxCpltCallback+0x58>)
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	64fb      	str	r3, [r7, #76]	; 0x4c
	fb_speed = (int)(aRxBuffer[1]);
 8000c06:	4b12      	ldr	r3, [pc, #72]	; (8000c50 <HAL_UART_RxCpltCallback+0x58>)
 8000c08:	785b      	ldrb	r3, [r3, #1]
 8000c0a:	64bb      	str	r3, [r7, #72]	; 0x48
	leftright = (int)(aRxBuffer[2]);
 8000c0c:	4b10      	ldr	r3, [pc, #64]	; (8000c50 <HAL_UART_RxCpltCallback+0x58>)
 8000c0e:	789b      	ldrb	r3, [r3, #2]
 8000c10:	647b      	str	r3, [r7, #68]	; 0x44
	lr_speed = (int)(aRxBuffer[3]);
 8000c12:	4b0f      	ldr	r3, [pc, #60]	; (8000c50 <HAL_UART_RxCpltCallback+0x58>)
 8000c14:	78db      	ldrb	r3, [r3, #3]
 8000c16:	643b      	str	r3, [r7, #64]	; 0x40


	HAL_UART_Receive_IT(&huart3,(uint8_t *) aRxBuffer,4);
 8000c18:	2204      	movs	r2, #4
 8000c1a:	490d      	ldr	r1, [pc, #52]	; (8000c50 <HAL_UART_RxCpltCallback+0x58>)
 8000c1c:	480d      	ldr	r0, [pc, #52]	; (8000c54 <HAL_UART_RxCpltCallback+0x5c>)
 8000c1e:	f002 fc2c 	bl	800347a <HAL_UART_Receive_IT>
	sprintf(hello, "Dir %3d : %d\0", frontback, fb_speed);
 8000c22:	f107 000c 	add.w	r0, r7, #12
 8000c26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c28:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000c2a:	490b      	ldr	r1, [pc, #44]	; (8000c58 <HAL_UART_RxCpltCallback+0x60>)
 8000c2c:	f006 fa96 	bl	800715c <siprintf>
	OLED_ShowString(10, 40, hello);
 8000c30:	f107 030c 	add.w	r3, r7, #12
 8000c34:	461a      	mov	r2, r3
 8000c36:	2128      	movs	r1, #40	; 0x28
 8000c38:	200a      	movs	r0, #10
 8000c3a:	f006 f991 	bl	8006f60 <OLED_ShowString>
	HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8000c3e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c42:	4806      	ldr	r0, [pc, #24]	; (8000c5c <HAL_UART_RxCpltCallback+0x64>)
 8000c44:	f000 ffc3 	bl	8001bce <HAL_GPIO_TogglePin>
}
 8000c48:	bf00      	nop
 8000c4a:	3750      	adds	r7, #80	; 0x50
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	20004ad4 	.word	0x20004ad4
 8000c54:	200049f8 	.word	0x200049f8
 8000c58:	080079e4 	.word	0x080079e4
 8000c5c:	40021000 	.word	0x40021000

08000c60 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
//			  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
//			  aRxBuffer = NULL;
//		  }
//	  }
//	  HAL_UART_Transmit(&huart3, (uint8_t *)txData, strlen(txData), 10);
	  osDelay(5000);
 8000c68:	f241 3088 	movw	r0, #5000	; 0x1388
 8000c6c:	f003 fb90 	bl	8004390 <osDelay>
 8000c70:	e7fa      	b.n	8000c68 <StartDefaultTask+0x8>
	...

08000c74 <motor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_motor */
void motor(void *argument)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b08c      	sub	sp, #48	; 0x30
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN motor */

	uint16_t servo_min = 148;
 8000c7c:	2394      	movs	r3, #148	; 0x94
 8000c7e:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint16_t servo_max = 155;
 8000c80:	239b      	movs	r3, #155	; 0x9b
 8000c82:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t pwmVal_servo = servo_min;
 8000c84:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000c86:	85fb      	strh	r3, [r7, #46]	; 0x2e

	uint16_t pwmVal = 0;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	85bb      	strh	r3, [r7, #44]	; 0x2c
	uint16_t offset = 1;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	857b      	strh	r3, [r7, #42]	; 0x2a
	uint16_t motor_increment = 10;
 8000c90:	230a      	movs	r3, #10
 8000c92:	847b      	strh	r3, [r7, #34]	; 0x22
	uint8_t accelerate = 1;
 8000c94:	2301      	movs	r3, #1
 8000c96:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t msg [20];

	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	4866      	ldr	r0, [pc, #408]	; (8000e38 <motor+0x1c4>)
 8000c9e:	f001 fcc9 	bl	8002634 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8000ca2:	2104      	movs	r1, #4
 8000ca4:	4864      	ldr	r0, [pc, #400]	; (8000e38 <motor+0x1c4>)
 8000ca6:	f001 fcc5 	bl	8002634 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000caa:	210c      	movs	r1, #12
 8000cac:	4863      	ldr	r0, [pc, #396]	; (8000e3c <motor+0x1c8>)
 8000cae:	f001 fcc1 	bl	8002634 <HAL_TIM_PWM_Start>


	htim1.Instance->CCR4 = pwmVal_servo; //Centre
 8000cb2:	4b62      	ldr	r3, [pc, #392]	; (8000e3c <motor+0x1c8>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8000cb8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Infinite loop */
  for(;;)
  {
	  // Forward
	  sprintf(msg, "servo %d\0", pwmVal_servo);
 8000cba:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8000cbc:	f107 030c 	add.w	r3, r7, #12
 8000cc0:	495f      	ldr	r1, [pc, #380]	; (8000e40 <motor+0x1cc>)
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f006 fa4a 	bl	800715c <siprintf>
	  OLED_ShowString(10, 30, msg);
 8000cc8:	f107 030c 	add.w	r3, r7, #12
 8000ccc:	461a      	mov	r2, r3
 8000cce:	211e      	movs	r1, #30
 8000cd0:	200a      	movs	r0, #10
 8000cd2:	f006 f945 	bl	8006f60 <OLED_ShowString>
	  accelerate = 1;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

	  sprintf(msg, "forwards %d\0", pwmVal);
 8000cdc:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000cde:	f107 030c 	add.w	r3, r7, #12
 8000ce2:	4958      	ldr	r1, [pc, #352]	; (8000e44 <motor+0x1d0>)
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f006 fa39 	bl	800715c <siprintf>
	  OLED_ShowString(10, 20, msg);
 8000cea:	f107 030c 	add.w	r3, r7, #12
 8000cee:	461a      	mov	r2, r3
 8000cf0:	2114      	movs	r1, #20
 8000cf2:	200a      	movs	r0, #10
 8000cf4:	f006 f934 	bl	8006f60 <OLED_ShowString>
	  do
	  {

		  // H-Bridge Circuit for AINx; 1 turn on, the other turns off
		  // MOTOR A
		  HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8000cf8:	2201      	movs	r2, #1
 8000cfa:	2104      	movs	r1, #4
 8000cfc:	4852      	ldr	r0, [pc, #328]	; (8000e48 <motor+0x1d4>)
 8000cfe:	f000 ff4d 	bl	8001b9c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 8000d02:	2200      	movs	r2, #0
 8000d04:	2108      	movs	r1, #8
 8000d06:	4850      	ldr	r0, [pc, #320]	; (8000e48 <motor+0x1d4>)
 8000d08:	f000 ff48 	bl	8001b9c <HAL_GPIO_WritePin>

		  // MOTOR B
		  HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	2120      	movs	r1, #32
 8000d10:	484d      	ldr	r0, [pc, #308]	; (8000e48 <motor+0x1d4>)
 8000d12:	f000 ff43 	bl	8001b9c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 8000d16:	2200      	movs	r2, #0
 8000d18:	2110      	movs	r1, #16
 8000d1a:	484b      	ldr	r0, [pc, #300]	; (8000e48 <motor+0x1d4>)
 8000d1c:	f000 ff3e 	bl	8001b9c <HAL_GPIO_WritePin>

		  if(accelerate == 1){
 8000d20:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000d24:	2b01      	cmp	r3, #1
 8000d26:	d10b      	bne.n	8000d40 <motor+0xcc>
			  pwmVal+=motor_increment;	// Accelerating
 8000d28:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000d2a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000d2c:	4413      	add	r3, r2
 8000d2e:	85bb      	strh	r3, [r7, #44]	; 0x2c
			  if(pwmVal > 2000)
 8000d30:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000d32:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000d36:	d907      	bls.n	8000d48 <motor+0xd4>
				  accelerate = 0;		// Decelerating
 8000d38:	2300      	movs	r3, #0
 8000d3a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8000d3e:	e003      	b.n	8000d48 <motor+0xd4>
		  }

		  else
			  pwmVal-=motor_increment;
 8000d40:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000d42:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000d44:	1ad3      	subs	r3, r2, r3
 8000d46:	85bb      	strh	r3, [r7, #44]	; 0x2c
		  // Modify comparison value for duty cycle
		  __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmVal);
 8000d48:	4b3b      	ldr	r3, [pc, #236]	; (8000e38 <motor+0x1c4>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000d4e:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, pwmVal);
 8000d50:	4b39      	ldr	r3, [pc, #228]	; (8000e38 <motor+0x1c4>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000d56:	639a      	str	r2, [r3, #56]	; 0x38
		  osDelay(10);
 8000d58:	200a      	movs	r0, #10
 8000d5a:	f003 fb19 	bl	8004390 <osDelay>

	  }while(pwmVal >0);
 8000d5e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d1c9      	bne.n	8000cf8 <motor+0x84>

	  // Reset Values
	  pwmVal = 0; // just in case pwmVal not 0
 8000d64:	2300      	movs	r3, #0
 8000d66:	85bb      	strh	r3, [r7, #44]	; 0x2c
	  accelerate = 1;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	  osDelay(5000);
 8000d6e:	f241 3088 	movw	r0, #5000	; 0x1388
 8000d72:	f003 fb0d 	bl	8004390 <osDelay>

	  // Backwards
	  sprintf(msg, "backward %d\0", pwmVal);
 8000d76:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000d78:	f107 030c 	add.w	r3, r7, #12
 8000d7c:	4933      	ldr	r1, [pc, #204]	; (8000e4c <motor+0x1d8>)
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f006 f9ec 	bl	800715c <siprintf>
	  OLED_ShowString(10, 20, msg);
 8000d84:	f107 030c 	add.w	r3, r7, #12
 8000d88:	461a      	mov	r2, r3
 8000d8a:	2114      	movs	r1, #20
 8000d8c:	200a      	movs	r0, #10
 8000d8e:	f006 f8e7 	bl	8006f60 <OLED_ShowString>
	  do
	  {
		  // MOTOR A
		  HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8000d92:	2200      	movs	r2, #0
 8000d94:	2104      	movs	r1, #4
 8000d96:	482c      	ldr	r0, [pc, #176]	; (8000e48 <motor+0x1d4>)
 8000d98:	f000 ff00 	bl	8001b9c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	2108      	movs	r1, #8
 8000da0:	4829      	ldr	r0, [pc, #164]	; (8000e48 <motor+0x1d4>)
 8000da2:	f000 fefb 	bl	8001b9c <HAL_GPIO_WritePin>

		  // MOTOR B
		  HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 8000da6:	2200      	movs	r2, #0
 8000da8:	2120      	movs	r1, #32
 8000daa:	4827      	ldr	r0, [pc, #156]	; (8000e48 <motor+0x1d4>)
 8000dac:	f000 fef6 	bl	8001b9c <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET);
 8000db0:	2201      	movs	r2, #1
 8000db2:	2110      	movs	r1, #16
 8000db4:	4824      	ldr	r0, [pc, #144]	; (8000e48 <motor+0x1d4>)
 8000db6:	f000 fef1 	bl	8001b9c <HAL_GPIO_WritePin>

		  if(accelerate == 1){
 8000dba:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8000dbe:	2b01      	cmp	r3, #1
 8000dc0:	d10b      	bne.n	8000dda <motor+0x166>
			  pwmVal+=motor_increment;
 8000dc2:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000dc4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000dc6:	4413      	add	r3, r2
 8000dc8:	85bb      	strh	r3, [r7, #44]	; 0x2c
			  if(pwmVal > 2000)
 8000dca:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000dcc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000dd0:	d907      	bls.n	8000de2 <motor+0x16e>
				  accelerate = 0;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8000dd8:	e003      	b.n	8000de2 <motor+0x16e>
		  }

		  else
			  pwmVal-=motor_increment;
 8000dda:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000ddc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000dde:	1ad3      	subs	r3, r2, r3
 8000de0:	85bb      	strh	r3, [r7, #44]	; 0x2c

		  __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmVal);
 8000de2:	4b15      	ldr	r3, [pc, #84]	; (8000e38 <motor+0x1c4>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000de8:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, pwmVal);
 8000dea:	4b13      	ldr	r3, [pc, #76]	; (8000e38 <motor+0x1c4>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000df0:	639a      	str	r2, [r3, #56]	; 0x38
		  osDelay(10);
 8000df2:	200a      	movs	r0, #10
 8000df4:	f003 facc 	bl	8004390 <osDelay>
	  }while(pwmVal>0);
 8000df8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d1c9      	bne.n	8000d92 <motor+0x11e>

	  // just in case pwmVal not 0
	  pwmVal = 0;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	85bb      	strh	r3, [r7, #44]	; 0x2c

	  osDelay(1);
 8000e02:	2001      	movs	r0, #1
 8000e04:	f003 fac4 	bl	8004390 <osDelay>
	  if((pwmVal_servo > servo_max)||(pwmVal_servo < servo_min))
 8000e08:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8000e0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	d803      	bhi.n	8000e18 <motor+0x1a4>
 8000e10:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8000e12:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000e14:	429a      	cmp	r2, r3
 8000e16:	d202      	bcs.n	8000e1e <motor+0x1aa>
		  offset = -offset;
 8000e18:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000e1a:	425b      	negs	r3, r3
 8000e1c:	857b      	strh	r3, [r7, #42]	; 0x2a

	  pwmVal_servo += offset;
 8000e1e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8000e20:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000e22:	4413      	add	r3, r2
 8000e24:	85fb      	strh	r3, [r7, #46]	; 0x2e
	  htim1.Instance->CCR4 = pwmVal_servo;
 8000e26:	4b05      	ldr	r3, [pc, #20]	; (8000e3c <motor+0x1c8>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8000e2c:	641a      	str	r2, [r3, #64]	; 0x40
	  osDelay(5000);
 8000e2e:	f241 3088 	movw	r0, #5000	; 0x1388
 8000e32:	f003 faad 	bl	8004390 <osDelay>
  {
 8000e36:	e740      	b.n	8000cba <motor+0x46>
 8000e38:	200049b0 	.word	0x200049b0
 8000e3c:	20004a8c 	.word	0x20004a8c
 8000e40:	080079f4 	.word	0x080079f4
 8000e44:	08007a00 	.word	0x08007a00
 8000e48:	40020000 	.word	0x40020000
 8000e4c:	08007a10 	.word	0x08007a10

08000e50 <showoled>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_showoled */
void showoled(void *argument)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b088      	sub	sp, #32
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN showoled */
  /* Infinite loop */
	uint8_t hello[20] = "test\0";
 8000e58:	4a0e      	ldr	r2, [pc, #56]	; (8000e94 <showoled+0x44>)
 8000e5a:	f107 030c 	add.w	r3, r7, #12
 8000e5e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e62:	6018      	str	r0, [r3, #0]
 8000e64:	3304      	adds	r3, #4
 8000e66:	8019      	strh	r1, [r3, #0]
 8000e68:	f107 0312 	add.w	r3, r7, #18
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	605a      	str	r2, [r3, #4]
 8000e72:	609a      	str	r2, [r3, #8]
 8000e74:	819a      	strh	r2, [r3, #12]
	for(;;)
	{

		OLED_ShowString(10, 10, hello);
 8000e76:	f107 030c 	add.w	r3, r7, #12
 8000e7a:	461a      	mov	r2, r3
 8000e7c:	210a      	movs	r1, #10
 8000e7e:	200a      	movs	r0, #10
 8000e80:	f006 f86e 	bl	8006f60 <OLED_ShowString>
		OLED_Refresh_Gram();
 8000e84:	f005 fef8 	bl	8006c78 <OLED_Refresh_Gram>
		osDelay(1000);
 8000e88:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e8c:	f003 fa80 	bl	8004390 <osDelay>
		OLED_ShowString(10, 10, hello);
 8000e90:	e7f1      	b.n	8000e76 <showoled+0x26>
 8000e92:	bf00      	nop
 8000e94:	08007a20 	.word	0x08007a20

08000e98 <encoder_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_encoder_task */
void encoder_task(void *argument)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b08c      	sub	sp, #48	; 0x30
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN encoder_task */
  /* Infinite loop */
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_ALL);
 8000ea0:	213c      	movs	r1, #60	; 0x3c
 8000ea2:	4828      	ldr	r0, [pc, #160]	; (8000f44 <encoder_task+0xac>)
 8000ea4:	f001 fbc6 	bl	8002634 <HAL_TIM_PWM_Start>

	int cnt1, cnt2, diff;
	uint32_t tick;

	cnt1 = __HAL_TIM_GET_COUNTER(&htim2);
 8000ea8:	4b26      	ldr	r3, [pc, #152]	; (8000f44 <encoder_task+0xac>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000eae:	62fb      	str	r3, [r7, #44]	; 0x2c
	tick = HAL_GetTick();
 8000eb0:	f000 fb04 	bl	80014bc <HAL_GetTick>
 8000eb4:	62b8      	str	r0, [r7, #40]	; 0x28
	uint8_t msg[20];
	uint16_t dir;

	for(;;)
	{
		if(HAL_GetTick()-tick > 1000L){
 8000eb6:	f000 fb01 	bl	80014bc <HAL_GetTick>
 8000eba:	4602      	mov	r2, r0
 8000ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ebe:	1ad3      	subs	r3, r2, r3
 8000ec0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000ec4:	d9f7      	bls.n	8000eb6 <encoder_task+0x1e>
			cnt2 = __HAL_TIM_GET_COUNTER(&htim2);
 8000ec6:	4b1f      	ldr	r3, [pc, #124]	; (8000f44 <encoder_task+0xac>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ecc:	627b      	str	r3, [r7, #36]	; 0x24
			if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)){
 8000ece:	4b1d      	ldr	r3, [pc, #116]	; (8000f44 <encoder_task+0xac>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f003 0310 	and.w	r3, r3, #16
 8000ed8:	2b10      	cmp	r3, #16
 8000eda:	d110      	bne.n	8000efe <encoder_task+0x66>
				if(cnt2<cnt1)
 8000edc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	da04      	bge.n	8000eee <encoder_task+0x56>
					diff = cnt1 - cnt2;
 8000ee4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ee8:	1ad3      	subs	r3, r2, r3
 8000eea:	623b      	str	r3, [r7, #32]
 8000eec:	e017      	b.n	8000f1e <encoder_task+0x86>
				else //overflow
					diff = (65535 - cnt2) + cnt1;
 8000eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ef0:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8000ef4:	33ff      	adds	r3, #255	; 0xff
 8000ef6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ef8:	4413      	add	r3, r2
 8000efa:	623b      	str	r3, [r7, #32]
 8000efc:	e00f      	b.n	8000f1e <encoder_task+0x86>
			}
			else{
				if(cnt2 > cnt1)
 8000efe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f02:	429a      	cmp	r2, r3
 8000f04:	dd04      	ble.n	8000f10 <encoder_task+0x78>
					diff = cnt2 - cnt1;
 8000f06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f0a:	1ad3      	subs	r3, r2, r3
 8000f0c:	623b      	str	r3, [r7, #32]
 8000f0e:	e006      	b.n	8000f1e <encoder_task+0x86>
				else
					diff = (65535 - cnt1) + cnt2;
 8000f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f12:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8000f16:	33ff      	adds	r3, #255	; 0xff
 8000f18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f1a:	4413      	add	r3, r2
 8000f1c:	623b      	str	r3, [r7, #32]
			}

			dir = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2);
 8000f1e:	4b09      	ldr	r3, [pc, #36]	; (8000f44 <encoder_task+0xac>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f003 0310 	and.w	r3, r3, #16
 8000f28:	2b10      	cmp	r3, #16
 8000f2a:	bf0c      	ite	eq
 8000f2c:	2301      	moveq	r3, #1
 8000f2e:	2300      	movne	r3, #0
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	83fb      	strh	r3, [r7, #30]
//			// Display direction
//			sprintf(msg, "dir:%5d\0",dir);
//			OLED_ShowString(10,30,msg);

			// Reset base tick
			cnt1 = __HAL_TIM_GET_COUNTER(&htim2);
 8000f34:	4b03      	ldr	r3, [pc, #12]	; (8000f44 <encoder_task+0xac>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
			tick = HAL_GetTick();
 8000f3c:	f000 fabe 	bl	80014bc <HAL_GetTick>
 8000f40:	62b8      	str	r0, [r7, #40]	; 0x28
		if(HAL_GetTick()-tick > 1000L){
 8000f42:	e7b8      	b.n	8000eb6 <encoder_task+0x1e>
 8000f44:	20004b08 	.word	0x20004b08

08000f48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f4c:	b672      	cpsid	i
}
 8000f4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f50:	e7fe      	b.n	8000f50 <Error_Handler+0x8>
	...

08000f54 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	607b      	str	r3, [r7, #4]
 8000f5e:	4b12      	ldr	r3, [pc, #72]	; (8000fa8 <HAL_MspInit+0x54>)
 8000f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f62:	4a11      	ldr	r2, [pc, #68]	; (8000fa8 <HAL_MspInit+0x54>)
 8000f64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f68:	6453      	str	r3, [r2, #68]	; 0x44
 8000f6a:	4b0f      	ldr	r3, [pc, #60]	; (8000fa8 <HAL_MspInit+0x54>)
 8000f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f72:	607b      	str	r3, [r7, #4]
 8000f74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f76:	2300      	movs	r3, #0
 8000f78:	603b      	str	r3, [r7, #0]
 8000f7a:	4b0b      	ldr	r3, [pc, #44]	; (8000fa8 <HAL_MspInit+0x54>)
 8000f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7e:	4a0a      	ldr	r2, [pc, #40]	; (8000fa8 <HAL_MspInit+0x54>)
 8000f80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f84:	6413      	str	r3, [r2, #64]	; 0x40
 8000f86:	4b08      	ldr	r3, [pc, #32]	; (8000fa8 <HAL_MspInit+0x54>)
 8000f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f8e:	603b      	str	r3, [r7, #0]
 8000f90:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f92:	2200      	movs	r2, #0
 8000f94:	210f      	movs	r1, #15
 8000f96:	f06f 0001 	mvn.w	r0, #1
 8000f9a:	f000 fb9a 	bl	80016d2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40023800 	.word	0x40023800

08000fac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b08a      	sub	sp, #40	; 0x28
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb4:	f107 0314 	add.w	r3, r7, #20
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
 8000fc0:	60da      	str	r2, [r3, #12]
 8000fc2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a23      	ldr	r2, [pc, #140]	; (8001058 <HAL_TIM_Base_MspInit+0xac>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d10e      	bne.n	8000fec <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	613b      	str	r3, [r7, #16]
 8000fd2:	4b22      	ldr	r3, [pc, #136]	; (800105c <HAL_TIM_Base_MspInit+0xb0>)
 8000fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd6:	4a21      	ldr	r2, [pc, #132]	; (800105c <HAL_TIM_Base_MspInit+0xb0>)
 8000fd8:	f043 0301 	orr.w	r3, r3, #1
 8000fdc:	6453      	str	r3, [r2, #68]	; 0x44
 8000fde:	4b1f      	ldr	r3, [pc, #124]	; (800105c <HAL_TIM_Base_MspInit+0xb0>)
 8000fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	613b      	str	r3, [r7, #16]
 8000fe8:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8000fea:	e030      	b.n	800104e <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM8)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a1b      	ldr	r2, [pc, #108]	; (8001060 <HAL_TIM_Base_MspInit+0xb4>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d12b      	bne.n	800104e <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60fb      	str	r3, [r7, #12]
 8000ffa:	4b18      	ldr	r3, [pc, #96]	; (800105c <HAL_TIM_Base_MspInit+0xb0>)
 8000ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ffe:	4a17      	ldr	r2, [pc, #92]	; (800105c <HAL_TIM_Base_MspInit+0xb0>)
 8001000:	f043 0302 	orr.w	r3, r3, #2
 8001004:	6453      	str	r3, [r2, #68]	; 0x44
 8001006:	4b15      	ldr	r3, [pc, #84]	; (800105c <HAL_TIM_Base_MspInit+0xb0>)
 8001008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100a:	f003 0302 	and.w	r3, r3, #2
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001012:	2300      	movs	r3, #0
 8001014:	60bb      	str	r3, [r7, #8]
 8001016:	4b11      	ldr	r3, [pc, #68]	; (800105c <HAL_TIM_Base_MspInit+0xb0>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	4a10      	ldr	r2, [pc, #64]	; (800105c <HAL_TIM_Base_MspInit+0xb0>)
 800101c:	f043 0304 	orr.w	r3, r3, #4
 8001020:	6313      	str	r3, [r2, #48]	; 0x30
 8001022:	4b0e      	ldr	r3, [pc, #56]	; (800105c <HAL_TIM_Base_MspInit+0xb0>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	f003 0304 	and.w	r3, r3, #4
 800102a:	60bb      	str	r3, [r7, #8]
 800102c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 800102e:	23c0      	movs	r3, #192	; 0xc0
 8001030:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001032:	2302      	movs	r3, #2
 8001034:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001036:	2300      	movs	r3, #0
 8001038:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103a:	2300      	movs	r3, #0
 800103c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800103e:	2303      	movs	r3, #3
 8001040:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001042:	f107 0314 	add.w	r3, r7, #20
 8001046:	4619      	mov	r1, r3
 8001048:	4806      	ldr	r0, [pc, #24]	; (8001064 <HAL_TIM_Base_MspInit+0xb8>)
 800104a:	f000 fc0b 	bl	8001864 <HAL_GPIO_Init>
}
 800104e:	bf00      	nop
 8001050:	3728      	adds	r7, #40	; 0x28
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	40010000 	.word	0x40010000
 800105c:	40023800 	.word	0x40023800
 8001060:	40010400 	.word	0x40010400
 8001064:	40020800 	.word	0x40020800

08001068 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b08c      	sub	sp, #48	; 0x30
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001070:	f107 031c 	add.w	r3, r7, #28
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	605a      	str	r2, [r3, #4]
 800107a:	609a      	str	r2, [r3, #8]
 800107c:	60da      	str	r2, [r3, #12]
 800107e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001088:	d14b      	bne.n	8001122 <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800108a:	2300      	movs	r3, #0
 800108c:	61bb      	str	r3, [r7, #24]
 800108e:	4b3f      	ldr	r3, [pc, #252]	; (800118c <HAL_TIM_Encoder_MspInit+0x124>)
 8001090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001092:	4a3e      	ldr	r2, [pc, #248]	; (800118c <HAL_TIM_Encoder_MspInit+0x124>)
 8001094:	f043 0301 	orr.w	r3, r3, #1
 8001098:	6413      	str	r3, [r2, #64]	; 0x40
 800109a:	4b3c      	ldr	r3, [pc, #240]	; (800118c <HAL_TIM_Encoder_MspInit+0x124>)
 800109c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109e:	f003 0301 	and.w	r3, r3, #1
 80010a2:	61bb      	str	r3, [r7, #24]
 80010a4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a6:	2300      	movs	r3, #0
 80010a8:	617b      	str	r3, [r7, #20]
 80010aa:	4b38      	ldr	r3, [pc, #224]	; (800118c <HAL_TIM_Encoder_MspInit+0x124>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	4a37      	ldr	r2, [pc, #220]	; (800118c <HAL_TIM_Encoder_MspInit+0x124>)
 80010b0:	f043 0301 	orr.w	r3, r3, #1
 80010b4:	6313      	str	r3, [r2, #48]	; 0x30
 80010b6:	4b35      	ldr	r3, [pc, #212]	; (800118c <HAL_TIM_Encoder_MspInit+0x124>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	f003 0301 	and.w	r3, r3, #1
 80010be:	617b      	str	r3, [r7, #20]
 80010c0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	613b      	str	r3, [r7, #16]
 80010c6:	4b31      	ldr	r3, [pc, #196]	; (800118c <HAL_TIM_Encoder_MspInit+0x124>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	4a30      	ldr	r2, [pc, #192]	; (800118c <HAL_TIM_Encoder_MspInit+0x124>)
 80010cc:	f043 0302 	orr.w	r3, r3, #2
 80010d0:	6313      	str	r3, [r2, #48]	; 0x30
 80010d2:	4b2e      	ldr	r3, [pc, #184]	; (800118c <HAL_TIM_Encoder_MspInit+0x124>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	f003 0302 	and.w	r3, r3, #2
 80010da:	613b      	str	r3, [r7, #16]
 80010dc:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80010de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e4:	2302      	movs	r3, #2
 80010e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e8:	2300      	movs	r3, #0
 80010ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ec:	2300      	movs	r3, #0
 80010ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80010f0:	2301      	movs	r3, #1
 80010f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f4:	f107 031c 	add.w	r3, r7, #28
 80010f8:	4619      	mov	r1, r3
 80010fa:	4825      	ldr	r0, [pc, #148]	; (8001190 <HAL_TIM_Encoder_MspInit+0x128>)
 80010fc:	f000 fbb2 	bl	8001864 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001100:	2308      	movs	r3, #8
 8001102:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001104:	2302      	movs	r3, #2
 8001106:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001108:	2300      	movs	r3, #0
 800110a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110c:	2300      	movs	r3, #0
 800110e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001110:	2301      	movs	r3, #1
 8001112:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001114:	f107 031c 	add.w	r3, r7, #28
 8001118:	4619      	mov	r1, r3
 800111a:	481e      	ldr	r0, [pc, #120]	; (8001194 <HAL_TIM_Encoder_MspInit+0x12c>)
 800111c:	f000 fba2 	bl	8001864 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001120:	e030      	b.n	8001184 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM3)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a1c      	ldr	r2, [pc, #112]	; (8001198 <HAL_TIM_Encoder_MspInit+0x130>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d12b      	bne.n	8001184 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800112c:	2300      	movs	r3, #0
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	4b16      	ldr	r3, [pc, #88]	; (800118c <HAL_TIM_Encoder_MspInit+0x124>)
 8001132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001134:	4a15      	ldr	r2, [pc, #84]	; (800118c <HAL_TIM_Encoder_MspInit+0x124>)
 8001136:	f043 0302 	orr.w	r3, r3, #2
 800113a:	6413      	str	r3, [r2, #64]	; 0x40
 800113c:	4b13      	ldr	r3, [pc, #76]	; (800118c <HAL_TIM_Encoder_MspInit+0x124>)
 800113e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001140:	f003 0302 	and.w	r3, r3, #2
 8001144:	60fb      	str	r3, [r7, #12]
 8001146:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001148:	2300      	movs	r3, #0
 800114a:	60bb      	str	r3, [r7, #8]
 800114c:	4b0f      	ldr	r3, [pc, #60]	; (800118c <HAL_TIM_Encoder_MspInit+0x124>)
 800114e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001150:	4a0e      	ldr	r2, [pc, #56]	; (800118c <HAL_TIM_Encoder_MspInit+0x124>)
 8001152:	f043 0301 	orr.w	r3, r3, #1
 8001156:	6313      	str	r3, [r2, #48]	; 0x30
 8001158:	4b0c      	ldr	r3, [pc, #48]	; (800118c <HAL_TIM_Encoder_MspInit+0x124>)
 800115a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115c:	f003 0301 	and.w	r3, r3, #1
 8001160:	60bb      	str	r3, [r7, #8]
 8001162:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001164:	23c0      	movs	r3, #192	; 0xc0
 8001166:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001168:	2302      	movs	r3, #2
 800116a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116c:	2300      	movs	r3, #0
 800116e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001170:	2300      	movs	r3, #0
 8001172:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001174:	2302      	movs	r3, #2
 8001176:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001178:	f107 031c 	add.w	r3, r7, #28
 800117c:	4619      	mov	r1, r3
 800117e:	4804      	ldr	r0, [pc, #16]	; (8001190 <HAL_TIM_Encoder_MspInit+0x128>)
 8001180:	f000 fb70 	bl	8001864 <HAL_GPIO_Init>
}
 8001184:	bf00      	nop
 8001186:	3730      	adds	r7, #48	; 0x30
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	40023800 	.word	0x40023800
 8001190:	40020000 	.word	0x40020000
 8001194:	40020400 	.word	0x40020400
 8001198:	40000400 	.word	0x40000400

0800119c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b088      	sub	sp, #32
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a4:	f107 030c 	add.w	r3, r7, #12
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
 80011ae:	609a      	str	r2, [r3, #8]
 80011b0:	60da      	str	r2, [r3, #12]
 80011b2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a12      	ldr	r2, [pc, #72]	; (8001204 <HAL_TIM_MspPostInit+0x68>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d11e      	bne.n	80011fc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	60bb      	str	r3, [r7, #8]
 80011c2:	4b11      	ldr	r3, [pc, #68]	; (8001208 <HAL_TIM_MspPostInit+0x6c>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	4a10      	ldr	r2, [pc, #64]	; (8001208 <HAL_TIM_MspPostInit+0x6c>)
 80011c8:	f043 0310 	orr.w	r3, r3, #16
 80011cc:	6313      	str	r3, [r2, #48]	; 0x30
 80011ce:	4b0e      	ldr	r3, [pc, #56]	; (8001208 <HAL_TIM_MspPostInit+0x6c>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	f003 0310 	and.w	r3, r3, #16
 80011d6:	60bb      	str	r3, [r7, #8]
 80011d8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80011da:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80011de:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e0:	2302      	movs	r3, #2
 80011e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e4:	2300      	movs	r3, #0
 80011e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e8:	2300      	movs	r3, #0
 80011ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80011ec:	2301      	movs	r3, #1
 80011ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011f0:	f107 030c 	add.w	r3, r7, #12
 80011f4:	4619      	mov	r1, r3
 80011f6:	4805      	ldr	r0, [pc, #20]	; (800120c <HAL_TIM_MspPostInit+0x70>)
 80011f8:	f000 fb34 	bl	8001864 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80011fc:	bf00      	nop
 80011fe:	3720      	adds	r7, #32
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	40010000 	.word	0x40010000
 8001208:	40023800 	.word	0x40023800
 800120c:	40021000 	.word	0x40021000

08001210 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b08a      	sub	sp, #40	; 0x28
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001218:	f107 0314 	add.w	r3, r7, #20
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	605a      	str	r2, [r3, #4]
 8001222:	609a      	str	r2, [r3, #8]
 8001224:	60da      	str	r2, [r3, #12]
 8001226:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a1d      	ldr	r2, [pc, #116]	; (80012a4 <HAL_UART_MspInit+0x94>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d134      	bne.n	800129c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	613b      	str	r3, [r7, #16]
 8001236:	4b1c      	ldr	r3, [pc, #112]	; (80012a8 <HAL_UART_MspInit+0x98>)
 8001238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123a:	4a1b      	ldr	r2, [pc, #108]	; (80012a8 <HAL_UART_MspInit+0x98>)
 800123c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001240:	6413      	str	r3, [r2, #64]	; 0x40
 8001242:	4b19      	ldr	r3, [pc, #100]	; (80012a8 <HAL_UART_MspInit+0x98>)
 8001244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001246:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800124a:	613b      	str	r3, [r7, #16]
 800124c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	60fb      	str	r3, [r7, #12]
 8001252:	4b15      	ldr	r3, [pc, #84]	; (80012a8 <HAL_UART_MspInit+0x98>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	4a14      	ldr	r2, [pc, #80]	; (80012a8 <HAL_UART_MspInit+0x98>)
 8001258:	f043 0304 	orr.w	r3, r3, #4
 800125c:	6313      	str	r3, [r2, #48]	; 0x30
 800125e:	4b12      	ldr	r3, [pc, #72]	; (80012a8 <HAL_UART_MspInit+0x98>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	f003 0304 	and.w	r3, r3, #4
 8001266:	60fb      	str	r3, [r7, #12]
 8001268:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800126a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800126e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001270:	2302      	movs	r3, #2
 8001272:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001274:	2300      	movs	r3, #0
 8001276:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001278:	2303      	movs	r3, #3
 800127a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800127c:	2307      	movs	r3, #7
 800127e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001280:	f107 0314 	add.w	r3, r7, #20
 8001284:	4619      	mov	r1, r3
 8001286:	4809      	ldr	r0, [pc, #36]	; (80012ac <HAL_UART_MspInit+0x9c>)
 8001288:	f000 faec 	bl	8001864 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800128c:	2200      	movs	r2, #0
 800128e:	2105      	movs	r1, #5
 8001290:	2027      	movs	r0, #39	; 0x27
 8001292:	f000 fa1e 	bl	80016d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001296:	2027      	movs	r0, #39	; 0x27
 8001298:	f000 fa37 	bl	800170a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800129c:	bf00      	nop
 800129e:	3728      	adds	r7, #40	; 0x28
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	40004800 	.word	0x40004800
 80012a8:	40023800 	.word	0x40023800
 80012ac:	40020800 	.word	0x40020800

080012b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012b4:	e7fe      	b.n	80012b4 <NMI_Handler+0x4>

080012b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012b6:	b480      	push	{r7}
 80012b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012ba:	e7fe      	b.n	80012ba <HardFault_Handler+0x4>

080012bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012c0:	e7fe      	b.n	80012c0 <MemManage_Handler+0x4>

080012c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012c2:	b480      	push	{r7}
 80012c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012c6:	e7fe      	b.n	80012c6 <BusFault_Handler+0x4>

080012c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012cc:	e7fe      	b.n	80012cc <UsageFault_Handler+0x4>

080012ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012ce:	b480      	push	{r7}
 80012d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012d2:	bf00      	nop
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr

080012dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012e0:	f000 f8d8 	bl	8001494 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80012e4:	f005 f89a 	bl	800641c <xTaskGetSchedulerState>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d001      	beq.n	80012f2 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80012ee:	f003 fcfb 	bl	8004ce8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}
	...

080012f8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80012fc:	4802      	ldr	r0, [pc, #8]	; (8001308 <USART3_IRQHandler+0x10>)
 80012fe:	f002 f8ed 	bl	80034dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001302:	bf00      	nop
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	200049f8 	.word	0x200049f8

0800130c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b086      	sub	sp, #24
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001314:	4a14      	ldr	r2, [pc, #80]	; (8001368 <_sbrk+0x5c>)
 8001316:	4b15      	ldr	r3, [pc, #84]	; (800136c <_sbrk+0x60>)
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001320:	4b13      	ldr	r3, [pc, #76]	; (8001370 <_sbrk+0x64>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d102      	bne.n	800132e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001328:	4b11      	ldr	r3, [pc, #68]	; (8001370 <_sbrk+0x64>)
 800132a:	4a12      	ldr	r2, [pc, #72]	; (8001374 <_sbrk+0x68>)
 800132c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800132e:	4b10      	ldr	r3, [pc, #64]	; (8001370 <_sbrk+0x64>)
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4413      	add	r3, r2
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	429a      	cmp	r2, r3
 800133a:	d207      	bcs.n	800134c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800133c:	f005 fece 	bl	80070dc <__errno>
 8001340:	4603      	mov	r3, r0
 8001342:	220c      	movs	r2, #12
 8001344:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001346:	f04f 33ff 	mov.w	r3, #4294967295
 800134a:	e009      	b.n	8001360 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800134c:	4b08      	ldr	r3, [pc, #32]	; (8001370 <_sbrk+0x64>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001352:	4b07      	ldr	r3, [pc, #28]	; (8001370 <_sbrk+0x64>)
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4413      	add	r3, r2
 800135a:	4a05      	ldr	r2, [pc, #20]	; (8001370 <_sbrk+0x64>)
 800135c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800135e:	68fb      	ldr	r3, [r7, #12]
}
 8001360:	4618      	mov	r0, r3
 8001362:	3718      	adds	r7, #24
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	20020000 	.word	0x20020000
 800136c:	00000400 	.word	0x00000400
 8001370:	20000090 	.word	0x20000090
 8001374:	20004fa8 	.word	0x20004fa8

08001378 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800137c:	4b06      	ldr	r3, [pc, #24]	; (8001398 <SystemInit+0x20>)
 800137e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001382:	4a05      	ldr	r2, [pc, #20]	; (8001398 <SystemInit+0x20>)
 8001384:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001388:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800138c:	bf00      	nop
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	e000ed00 	.word	0xe000ed00

0800139c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800139c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013d4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013a0:	480d      	ldr	r0, [pc, #52]	; (80013d8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80013a2:	490e      	ldr	r1, [pc, #56]	; (80013dc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80013a4:	4a0e      	ldr	r2, [pc, #56]	; (80013e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013a8:	e002      	b.n	80013b0 <LoopCopyDataInit>

080013aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ae:	3304      	adds	r3, #4

080013b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013b4:	d3f9      	bcc.n	80013aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013b6:	4a0b      	ldr	r2, [pc, #44]	; (80013e4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80013b8:	4c0b      	ldr	r4, [pc, #44]	; (80013e8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80013ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013bc:	e001      	b.n	80013c2 <LoopFillZerobss>

080013be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013c0:	3204      	adds	r2, #4

080013c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013c4:	d3fb      	bcc.n	80013be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80013c6:	f7ff ffd7 	bl	8001378 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013ca:	f005 fe8d 	bl	80070e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013ce:	f7ff f8cb 	bl	8000568 <main>
  bx  lr    
 80013d2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80013d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013dc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80013e0:	0800859c 	.word	0x0800859c
  ldr r2, =_sbss
 80013e4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80013e8:	20004fa8 	.word	0x20004fa8

080013ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013ec:	e7fe      	b.n	80013ec <ADC_IRQHandler>
	...

080013f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013f4:	4b0e      	ldr	r3, [pc, #56]	; (8001430 <HAL_Init+0x40>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a0d      	ldr	r2, [pc, #52]	; (8001430 <HAL_Init+0x40>)
 80013fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001400:	4b0b      	ldr	r3, [pc, #44]	; (8001430 <HAL_Init+0x40>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a0a      	ldr	r2, [pc, #40]	; (8001430 <HAL_Init+0x40>)
 8001406:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800140a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800140c:	4b08      	ldr	r3, [pc, #32]	; (8001430 <HAL_Init+0x40>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a07      	ldr	r2, [pc, #28]	; (8001430 <HAL_Init+0x40>)
 8001412:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001416:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001418:	2003      	movs	r0, #3
 800141a:	f000 f94f 	bl	80016bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800141e:	200f      	movs	r0, #15
 8001420:	f000 f808 	bl	8001434 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001424:	f7ff fd96 	bl	8000f54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001428:	2300      	movs	r3, #0
}
 800142a:	4618      	mov	r0, r3
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	40023c00 	.word	0x40023c00

08001434 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800143c:	4b12      	ldr	r3, [pc, #72]	; (8001488 <HAL_InitTick+0x54>)
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	4b12      	ldr	r3, [pc, #72]	; (800148c <HAL_InitTick+0x58>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	4619      	mov	r1, r3
 8001446:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800144a:	fbb3 f3f1 	udiv	r3, r3, r1
 800144e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001452:	4618      	mov	r0, r3
 8001454:	f000 f967 	bl	8001726 <HAL_SYSTICK_Config>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e00e      	b.n	8001480 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2b0f      	cmp	r3, #15
 8001466:	d80a      	bhi.n	800147e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001468:	2200      	movs	r2, #0
 800146a:	6879      	ldr	r1, [r7, #4]
 800146c:	f04f 30ff 	mov.w	r0, #4294967295
 8001470:	f000 f92f 	bl	80016d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001474:	4a06      	ldr	r2, [pc, #24]	; (8001490 <HAL_InitTick+0x5c>)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800147a:	2300      	movs	r3, #0
 800147c:	e000      	b.n	8001480 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
}
 8001480:	4618      	mov	r0, r3
 8001482:	3708      	adds	r7, #8
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	20000000 	.word	0x20000000
 800148c:	20000008 	.word	0x20000008
 8001490:	20000004 	.word	0x20000004

08001494 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001498:	4b06      	ldr	r3, [pc, #24]	; (80014b4 <HAL_IncTick+0x20>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	461a      	mov	r2, r3
 800149e:	4b06      	ldr	r3, [pc, #24]	; (80014b8 <HAL_IncTick+0x24>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4413      	add	r3, r2
 80014a4:	4a04      	ldr	r2, [pc, #16]	; (80014b8 <HAL_IncTick+0x24>)
 80014a6:	6013      	str	r3, [r2, #0]
}
 80014a8:	bf00      	nop
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	20000008 	.word	0x20000008
 80014b8:	20004b54 	.word	0x20004b54

080014bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  return uwTick;
 80014c0:	4b03      	ldr	r3, [pc, #12]	; (80014d0 <HAL_GetTick+0x14>)
 80014c2:	681b      	ldr	r3, [r3, #0]
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	20004b54 	.word	0x20004b54

080014d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014dc:	f7ff ffee 	bl	80014bc <HAL_GetTick>
 80014e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014ec:	d005      	beq.n	80014fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014ee:	4b0a      	ldr	r3, [pc, #40]	; (8001518 <HAL_Delay+0x44>)
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	461a      	mov	r2, r3
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	4413      	add	r3, r2
 80014f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014fa:	bf00      	nop
 80014fc:	f7ff ffde 	bl	80014bc <HAL_GetTick>
 8001500:	4602      	mov	r2, r0
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	68fa      	ldr	r2, [r7, #12]
 8001508:	429a      	cmp	r2, r3
 800150a:	d8f7      	bhi.n	80014fc <HAL_Delay+0x28>
  {
  }
}
 800150c:	bf00      	nop
 800150e:	bf00      	nop
 8001510:	3710      	adds	r7, #16
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	20000008 	.word	0x20000008

0800151c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800151c:	b480      	push	{r7}
 800151e:	b085      	sub	sp, #20
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	f003 0307 	and.w	r3, r3, #7
 800152a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800152c:	4b0c      	ldr	r3, [pc, #48]	; (8001560 <__NVIC_SetPriorityGrouping+0x44>)
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001532:	68ba      	ldr	r2, [r7, #8]
 8001534:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001538:	4013      	ands	r3, r2
 800153a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001544:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001548:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800154c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800154e:	4a04      	ldr	r2, [pc, #16]	; (8001560 <__NVIC_SetPriorityGrouping+0x44>)
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	60d3      	str	r3, [r2, #12]
}
 8001554:	bf00      	nop
 8001556:	3714      	adds	r7, #20
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr
 8001560:	e000ed00 	.word	0xe000ed00

08001564 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001568:	4b04      	ldr	r3, [pc, #16]	; (800157c <__NVIC_GetPriorityGrouping+0x18>)
 800156a:	68db      	ldr	r3, [r3, #12]
 800156c:	0a1b      	lsrs	r3, r3, #8
 800156e:	f003 0307 	and.w	r3, r3, #7
}
 8001572:	4618      	mov	r0, r3
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr
 800157c:	e000ed00 	.word	0xe000ed00

08001580 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	4603      	mov	r3, r0
 8001588:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800158a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158e:	2b00      	cmp	r3, #0
 8001590:	db0b      	blt.n	80015aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001592:	79fb      	ldrb	r3, [r7, #7]
 8001594:	f003 021f 	and.w	r2, r3, #31
 8001598:	4907      	ldr	r1, [pc, #28]	; (80015b8 <__NVIC_EnableIRQ+0x38>)
 800159a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159e:	095b      	lsrs	r3, r3, #5
 80015a0:	2001      	movs	r0, #1
 80015a2:	fa00 f202 	lsl.w	r2, r0, r2
 80015a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015aa:	bf00      	nop
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	e000e100 	.word	0xe000e100

080015bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	4603      	mov	r3, r0
 80015c4:	6039      	str	r1, [r7, #0]
 80015c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	db0a      	blt.n	80015e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	b2da      	uxtb	r2, r3
 80015d4:	490c      	ldr	r1, [pc, #48]	; (8001608 <__NVIC_SetPriority+0x4c>)
 80015d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015da:	0112      	lsls	r2, r2, #4
 80015dc:	b2d2      	uxtb	r2, r2
 80015de:	440b      	add	r3, r1
 80015e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015e4:	e00a      	b.n	80015fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	b2da      	uxtb	r2, r3
 80015ea:	4908      	ldr	r1, [pc, #32]	; (800160c <__NVIC_SetPriority+0x50>)
 80015ec:	79fb      	ldrb	r3, [r7, #7]
 80015ee:	f003 030f 	and.w	r3, r3, #15
 80015f2:	3b04      	subs	r3, #4
 80015f4:	0112      	lsls	r2, r2, #4
 80015f6:	b2d2      	uxtb	r2, r2
 80015f8:	440b      	add	r3, r1
 80015fa:	761a      	strb	r2, [r3, #24]
}
 80015fc:	bf00      	nop
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr
 8001608:	e000e100 	.word	0xe000e100
 800160c:	e000ed00 	.word	0xe000ed00

08001610 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001610:	b480      	push	{r7}
 8001612:	b089      	sub	sp, #36	; 0x24
 8001614:	af00      	add	r7, sp, #0
 8001616:	60f8      	str	r0, [r7, #12]
 8001618:	60b9      	str	r1, [r7, #8]
 800161a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f003 0307 	and.w	r3, r3, #7
 8001622:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	f1c3 0307 	rsb	r3, r3, #7
 800162a:	2b04      	cmp	r3, #4
 800162c:	bf28      	it	cs
 800162e:	2304      	movcs	r3, #4
 8001630:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	3304      	adds	r3, #4
 8001636:	2b06      	cmp	r3, #6
 8001638:	d902      	bls.n	8001640 <NVIC_EncodePriority+0x30>
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	3b03      	subs	r3, #3
 800163e:	e000      	b.n	8001642 <NVIC_EncodePriority+0x32>
 8001640:	2300      	movs	r3, #0
 8001642:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001644:	f04f 32ff 	mov.w	r2, #4294967295
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	fa02 f303 	lsl.w	r3, r2, r3
 800164e:	43da      	mvns	r2, r3
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	401a      	ands	r2, r3
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001658:	f04f 31ff 	mov.w	r1, #4294967295
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	fa01 f303 	lsl.w	r3, r1, r3
 8001662:	43d9      	mvns	r1, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001668:	4313      	orrs	r3, r2
         );
}
 800166a:	4618      	mov	r0, r3
 800166c:	3724      	adds	r7, #36	; 0x24
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
	...

08001678 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	3b01      	subs	r3, #1
 8001684:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001688:	d301      	bcc.n	800168e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800168a:	2301      	movs	r3, #1
 800168c:	e00f      	b.n	80016ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800168e:	4a0a      	ldr	r2, [pc, #40]	; (80016b8 <SysTick_Config+0x40>)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	3b01      	subs	r3, #1
 8001694:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001696:	210f      	movs	r1, #15
 8001698:	f04f 30ff 	mov.w	r0, #4294967295
 800169c:	f7ff ff8e 	bl	80015bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016a0:	4b05      	ldr	r3, [pc, #20]	; (80016b8 <SysTick_Config+0x40>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016a6:	4b04      	ldr	r3, [pc, #16]	; (80016b8 <SysTick_Config+0x40>)
 80016a8:	2207      	movs	r2, #7
 80016aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	e000e010 	.word	0xe000e010

080016bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016c4:	6878      	ldr	r0, [r7, #4]
 80016c6:	f7ff ff29 	bl	800151c <__NVIC_SetPriorityGrouping>
}
 80016ca:	bf00      	nop
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b086      	sub	sp, #24
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	4603      	mov	r3, r0
 80016da:	60b9      	str	r1, [r7, #8]
 80016dc:	607a      	str	r2, [r7, #4]
 80016de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016e0:	2300      	movs	r3, #0
 80016e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016e4:	f7ff ff3e 	bl	8001564 <__NVIC_GetPriorityGrouping>
 80016e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	68b9      	ldr	r1, [r7, #8]
 80016ee:	6978      	ldr	r0, [r7, #20]
 80016f0:	f7ff ff8e 	bl	8001610 <NVIC_EncodePriority>
 80016f4:	4602      	mov	r2, r0
 80016f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016fa:	4611      	mov	r1, r2
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff ff5d 	bl	80015bc <__NVIC_SetPriority>
}
 8001702:	bf00      	nop
 8001704:	3718      	adds	r7, #24
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}

0800170a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800170a:	b580      	push	{r7, lr}
 800170c:	b082      	sub	sp, #8
 800170e:	af00      	add	r7, sp, #0
 8001710:	4603      	mov	r3, r0
 8001712:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff ff31 	bl	8001580 <__NVIC_EnableIRQ>
}
 800171e:	bf00      	nop
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}

08001726 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001726:	b580      	push	{r7, lr}
 8001728:	b082      	sub	sp, #8
 800172a:	af00      	add	r7, sp, #0
 800172c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f7ff ffa2 	bl	8001678 <SysTick_Config>
 8001734:	4603      	mov	r3, r0
}
 8001736:	4618      	mov	r0, r3
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800173e:	b580      	push	{r7, lr}
 8001740:	b084      	sub	sp, #16
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800174a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800174c:	f7ff feb6 	bl	80014bc <HAL_GetTick>
 8001750:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001758:	b2db      	uxtb	r3, r3
 800175a:	2b02      	cmp	r3, #2
 800175c:	d008      	beq.n	8001770 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2280      	movs	r2, #128	; 0x80
 8001762:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2200      	movs	r2, #0
 8001768:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	e052      	b.n	8001816 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f022 0216 	bic.w	r2, r2, #22
 800177e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	695a      	ldr	r2, [r3, #20]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800178e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001794:	2b00      	cmp	r3, #0
 8001796:	d103      	bne.n	80017a0 <HAL_DMA_Abort+0x62>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800179c:	2b00      	cmp	r3, #0
 800179e:	d007      	beq.n	80017b0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f022 0208 	bic.w	r2, r2, #8
 80017ae:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f022 0201 	bic.w	r2, r2, #1
 80017be:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017c0:	e013      	b.n	80017ea <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80017c2:	f7ff fe7b 	bl	80014bc <HAL_GetTick>
 80017c6:	4602      	mov	r2, r0
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	2b05      	cmp	r3, #5
 80017ce:	d90c      	bls.n	80017ea <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2220      	movs	r2, #32
 80017d4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2203      	movs	r2, #3
 80017da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2200      	movs	r2, #0
 80017e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e015      	b.n	8001816 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 0301 	and.w	r3, r3, #1
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d1e4      	bne.n	80017c2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017fc:	223f      	movs	r2, #63	; 0x3f
 80017fe:	409a      	lsls	r2, r3
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2201      	movs	r2, #1
 8001808:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2200      	movs	r2, #0
 8001810:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001814:	2300      	movs	r3, #0
}
 8001816:	4618      	mov	r0, r3
 8001818:	3710      	adds	r7, #16
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800181e:	b480      	push	{r7}
 8001820:	b083      	sub	sp, #12
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800182c:	b2db      	uxtb	r3, r3
 800182e:	2b02      	cmp	r3, #2
 8001830:	d004      	beq.n	800183c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2280      	movs	r2, #128	; 0x80
 8001836:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e00c      	b.n	8001856 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2205      	movs	r2, #5
 8001840:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f022 0201 	bic.w	r2, r2, #1
 8001852:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001854:	2300      	movs	r3, #0
}
 8001856:	4618      	mov	r0, r3
 8001858:	370c      	adds	r7, #12
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
	...

08001864 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001864:	b480      	push	{r7}
 8001866:	b089      	sub	sp, #36	; 0x24
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800186e:	2300      	movs	r3, #0
 8001870:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001872:	2300      	movs	r3, #0
 8001874:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001876:	2300      	movs	r3, #0
 8001878:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800187a:	2300      	movs	r3, #0
 800187c:	61fb      	str	r3, [r7, #28]
 800187e:	e16b      	b.n	8001b58 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001880:	2201      	movs	r2, #1
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	fa02 f303 	lsl.w	r3, r2, r3
 8001888:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	697a      	ldr	r2, [r7, #20]
 8001890:	4013      	ands	r3, r2
 8001892:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001894:	693a      	ldr	r2, [r7, #16]
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	429a      	cmp	r2, r3
 800189a:	f040 815a 	bne.w	8001b52 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f003 0303 	and.w	r3, r3, #3
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d005      	beq.n	80018b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d130      	bne.n	8001918 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	005b      	lsls	r3, r3, #1
 80018c0:	2203      	movs	r2, #3
 80018c2:	fa02 f303 	lsl.w	r3, r2, r3
 80018c6:	43db      	mvns	r3, r3
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	4013      	ands	r3, r2
 80018cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	68da      	ldr	r2, [r3, #12]
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	69ba      	ldr	r2, [r7, #24]
 80018dc:	4313      	orrs	r3, r2
 80018de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	69ba      	ldr	r2, [r7, #24]
 80018e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018ec:	2201      	movs	r2, #1
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	43db      	mvns	r3, r3
 80018f6:	69ba      	ldr	r2, [r7, #24]
 80018f8:	4013      	ands	r3, r2
 80018fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	091b      	lsrs	r3, r3, #4
 8001902:	f003 0201 	and.w	r2, r3, #1
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	fa02 f303 	lsl.w	r3, r2, r3
 800190c:	69ba      	ldr	r2, [r7, #24]
 800190e:	4313      	orrs	r3, r2
 8001910:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f003 0303 	and.w	r3, r3, #3
 8001920:	2b03      	cmp	r3, #3
 8001922:	d017      	beq.n	8001954 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	005b      	lsls	r3, r3, #1
 800192e:	2203      	movs	r2, #3
 8001930:	fa02 f303 	lsl.w	r3, r2, r3
 8001934:	43db      	mvns	r3, r3
 8001936:	69ba      	ldr	r2, [r7, #24]
 8001938:	4013      	ands	r3, r2
 800193a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	689a      	ldr	r2, [r3, #8]
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	005b      	lsls	r3, r3, #1
 8001944:	fa02 f303 	lsl.w	r3, r2, r3
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	4313      	orrs	r3, r2
 800194c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	69ba      	ldr	r2, [r7, #24]
 8001952:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f003 0303 	and.w	r3, r3, #3
 800195c:	2b02      	cmp	r3, #2
 800195e:	d123      	bne.n	80019a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	08da      	lsrs	r2, r3, #3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	3208      	adds	r2, #8
 8001968:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800196c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	f003 0307 	and.w	r3, r3, #7
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	220f      	movs	r2, #15
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	43db      	mvns	r3, r3
 800197e:	69ba      	ldr	r2, [r7, #24]
 8001980:	4013      	ands	r3, r2
 8001982:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	691a      	ldr	r2, [r3, #16]
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	f003 0307 	and.w	r3, r3, #7
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	4313      	orrs	r3, r2
 8001998:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	08da      	lsrs	r2, r3, #3
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	3208      	adds	r2, #8
 80019a2:	69b9      	ldr	r1, [r7, #24]
 80019a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	2203      	movs	r2, #3
 80019b4:	fa02 f303 	lsl.w	r3, r2, r3
 80019b8:	43db      	mvns	r3, r3
 80019ba:	69ba      	ldr	r2, [r7, #24]
 80019bc:	4013      	ands	r3, r2
 80019be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f003 0203 	and.w	r2, r3, #3
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	fa02 f303 	lsl.w	r3, r2, r3
 80019d0:	69ba      	ldr	r2, [r7, #24]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	69ba      	ldr	r2, [r7, #24]
 80019da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	f000 80b4 	beq.w	8001b52 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ea:	2300      	movs	r3, #0
 80019ec:	60fb      	str	r3, [r7, #12]
 80019ee:	4b60      	ldr	r3, [pc, #384]	; (8001b70 <HAL_GPIO_Init+0x30c>)
 80019f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f2:	4a5f      	ldr	r2, [pc, #380]	; (8001b70 <HAL_GPIO_Init+0x30c>)
 80019f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019f8:	6453      	str	r3, [r2, #68]	; 0x44
 80019fa:	4b5d      	ldr	r3, [pc, #372]	; (8001b70 <HAL_GPIO_Init+0x30c>)
 80019fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a02:	60fb      	str	r3, [r7, #12]
 8001a04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a06:	4a5b      	ldr	r2, [pc, #364]	; (8001b74 <HAL_GPIO_Init+0x310>)
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	089b      	lsrs	r3, r3, #2
 8001a0c:	3302      	adds	r3, #2
 8001a0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	f003 0303 	and.w	r3, r3, #3
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	220f      	movs	r2, #15
 8001a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a22:	43db      	mvns	r3, r3
 8001a24:	69ba      	ldr	r2, [r7, #24]
 8001a26:	4013      	ands	r3, r2
 8001a28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4a52      	ldr	r2, [pc, #328]	; (8001b78 <HAL_GPIO_Init+0x314>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d02b      	beq.n	8001a8a <HAL_GPIO_Init+0x226>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4a51      	ldr	r2, [pc, #324]	; (8001b7c <HAL_GPIO_Init+0x318>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d025      	beq.n	8001a86 <HAL_GPIO_Init+0x222>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4a50      	ldr	r2, [pc, #320]	; (8001b80 <HAL_GPIO_Init+0x31c>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d01f      	beq.n	8001a82 <HAL_GPIO_Init+0x21e>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4a4f      	ldr	r2, [pc, #316]	; (8001b84 <HAL_GPIO_Init+0x320>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d019      	beq.n	8001a7e <HAL_GPIO_Init+0x21a>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4a4e      	ldr	r2, [pc, #312]	; (8001b88 <HAL_GPIO_Init+0x324>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d013      	beq.n	8001a7a <HAL_GPIO_Init+0x216>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a4d      	ldr	r2, [pc, #308]	; (8001b8c <HAL_GPIO_Init+0x328>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d00d      	beq.n	8001a76 <HAL_GPIO_Init+0x212>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a4c      	ldr	r2, [pc, #304]	; (8001b90 <HAL_GPIO_Init+0x32c>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d007      	beq.n	8001a72 <HAL_GPIO_Init+0x20e>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4a4b      	ldr	r2, [pc, #300]	; (8001b94 <HAL_GPIO_Init+0x330>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d101      	bne.n	8001a6e <HAL_GPIO_Init+0x20a>
 8001a6a:	2307      	movs	r3, #7
 8001a6c:	e00e      	b.n	8001a8c <HAL_GPIO_Init+0x228>
 8001a6e:	2308      	movs	r3, #8
 8001a70:	e00c      	b.n	8001a8c <HAL_GPIO_Init+0x228>
 8001a72:	2306      	movs	r3, #6
 8001a74:	e00a      	b.n	8001a8c <HAL_GPIO_Init+0x228>
 8001a76:	2305      	movs	r3, #5
 8001a78:	e008      	b.n	8001a8c <HAL_GPIO_Init+0x228>
 8001a7a:	2304      	movs	r3, #4
 8001a7c:	e006      	b.n	8001a8c <HAL_GPIO_Init+0x228>
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e004      	b.n	8001a8c <HAL_GPIO_Init+0x228>
 8001a82:	2302      	movs	r3, #2
 8001a84:	e002      	b.n	8001a8c <HAL_GPIO_Init+0x228>
 8001a86:	2301      	movs	r3, #1
 8001a88:	e000      	b.n	8001a8c <HAL_GPIO_Init+0x228>
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	69fa      	ldr	r2, [r7, #28]
 8001a8e:	f002 0203 	and.w	r2, r2, #3
 8001a92:	0092      	lsls	r2, r2, #2
 8001a94:	4093      	lsls	r3, r2
 8001a96:	69ba      	ldr	r2, [r7, #24]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a9c:	4935      	ldr	r1, [pc, #212]	; (8001b74 <HAL_GPIO_Init+0x310>)
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	089b      	lsrs	r3, r3, #2
 8001aa2:	3302      	adds	r3, #2
 8001aa4:	69ba      	ldr	r2, [r7, #24]
 8001aa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001aaa:	4b3b      	ldr	r3, [pc, #236]	; (8001b98 <HAL_GPIO_Init+0x334>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	43db      	mvns	r3, r3
 8001ab4:	69ba      	ldr	r2, [r7, #24]
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d003      	beq.n	8001ace <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001ac6:	69ba      	ldr	r2, [r7, #24]
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	4313      	orrs	r3, r2
 8001acc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ace:	4a32      	ldr	r2, [pc, #200]	; (8001b98 <HAL_GPIO_Init+0x334>)
 8001ad0:	69bb      	ldr	r3, [r7, #24]
 8001ad2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001ad4:	4b30      	ldr	r3, [pc, #192]	; (8001b98 <HAL_GPIO_Init+0x334>)
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	43db      	mvns	r3, r3
 8001ade:	69ba      	ldr	r2, [r7, #24]
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d003      	beq.n	8001af8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001af0:	69ba      	ldr	r2, [r7, #24]
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001af8:	4a27      	ldr	r2, [pc, #156]	; (8001b98 <HAL_GPIO_Init+0x334>)
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001afe:	4b26      	ldr	r3, [pc, #152]	; (8001b98 <HAL_GPIO_Init+0x334>)
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	43db      	mvns	r3, r3
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d003      	beq.n	8001b22 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001b1a:	69ba      	ldr	r2, [r7, #24]
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b22:	4a1d      	ldr	r2, [pc, #116]	; (8001b98 <HAL_GPIO_Init+0x334>)
 8001b24:	69bb      	ldr	r3, [r7, #24]
 8001b26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b28:	4b1b      	ldr	r3, [pc, #108]	; (8001b98 <HAL_GPIO_Init+0x334>)
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	43db      	mvns	r3, r3
 8001b32:	69ba      	ldr	r2, [r7, #24]
 8001b34:	4013      	ands	r3, r2
 8001b36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d003      	beq.n	8001b4c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b4c:	4a12      	ldr	r2, [pc, #72]	; (8001b98 <HAL_GPIO_Init+0x334>)
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	3301      	adds	r3, #1
 8001b56:	61fb      	str	r3, [r7, #28]
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	2b0f      	cmp	r3, #15
 8001b5c:	f67f ae90 	bls.w	8001880 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b60:	bf00      	nop
 8001b62:	bf00      	nop
 8001b64:	3724      	adds	r7, #36	; 0x24
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	40023800 	.word	0x40023800
 8001b74:	40013800 	.word	0x40013800
 8001b78:	40020000 	.word	0x40020000
 8001b7c:	40020400 	.word	0x40020400
 8001b80:	40020800 	.word	0x40020800
 8001b84:	40020c00 	.word	0x40020c00
 8001b88:	40021000 	.word	0x40021000
 8001b8c:	40021400 	.word	0x40021400
 8001b90:	40021800 	.word	0x40021800
 8001b94:	40021c00 	.word	0x40021c00
 8001b98:	40013c00 	.word	0x40013c00

08001b9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	460b      	mov	r3, r1
 8001ba6:	807b      	strh	r3, [r7, #2]
 8001ba8:	4613      	mov	r3, r2
 8001baa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bac:	787b      	ldrb	r3, [r7, #1]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d003      	beq.n	8001bba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bb2:	887a      	ldrh	r2, [r7, #2]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bb8:	e003      	b.n	8001bc2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bba:	887b      	ldrh	r3, [r7, #2]
 8001bbc:	041a      	lsls	r2, r3, #16
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	619a      	str	r2, [r3, #24]
}
 8001bc2:	bf00      	nop
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr

08001bce <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	b085      	sub	sp, #20
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	695b      	ldr	r3, [r3, #20]
 8001bde:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001be0:	887a      	ldrh	r2, [r7, #2]
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	4013      	ands	r3, r2
 8001be6:	041a      	lsls	r2, r3, #16
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	43d9      	mvns	r1, r3
 8001bec:	887b      	ldrh	r3, [r7, #2]
 8001bee:	400b      	ands	r3, r1
 8001bf0:	431a      	orrs	r2, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	619a      	str	r2, [r3, #24]
}
 8001bf6:	bf00      	nop
 8001bf8:	3714      	adds	r7, #20
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
	...

08001c04 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8001c0a:	4b06      	ldr	r3, [pc, #24]	; (8001c24 <HAL_PWR_EnableBkUpAccess+0x20>)
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8001c10:	4b05      	ldr	r3, [pc, #20]	; (8001c28 <HAL_PWR_EnableBkUpAccess+0x24>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8001c16:	687b      	ldr	r3, [r7, #4]
}
 8001c18:	bf00      	nop
 8001c1a:	370c      	adds	r7, #12
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr
 8001c24:	420e0020 	.word	0x420e0020
 8001c28:	40007000 	.word	0x40007000

08001c2c <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8001c32:	4b06      	ldr	r3, [pc, #24]	; (8001c4c <HAL_PWR_DisableBkUpAccess+0x20>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8001c38:	4b05      	ldr	r3, [pc, #20]	; (8001c50 <HAL_PWR_DisableBkUpAccess+0x24>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8001c3e:	687b      	ldr	r3, [r7, #4]
}
 8001c40:	bf00      	nop
 8001c42:	370c      	adds	r7, #12
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr
 8001c4c:	420e0020 	.word	0x420e0020
 8001c50:	40007000 	.word	0x40007000

08001c54 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b086      	sub	sp, #24
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d101      	bne.n	8001c66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e264      	b.n	8002130 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0301 	and.w	r3, r3, #1
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d075      	beq.n	8001d5e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c72:	4ba3      	ldr	r3, [pc, #652]	; (8001f00 <HAL_RCC_OscConfig+0x2ac>)
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	f003 030c 	and.w	r3, r3, #12
 8001c7a:	2b04      	cmp	r3, #4
 8001c7c:	d00c      	beq.n	8001c98 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c7e:	4ba0      	ldr	r3, [pc, #640]	; (8001f00 <HAL_RCC_OscConfig+0x2ac>)
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c86:	2b08      	cmp	r3, #8
 8001c88:	d112      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c8a:	4b9d      	ldr	r3, [pc, #628]	; (8001f00 <HAL_RCC_OscConfig+0x2ac>)
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c96:	d10b      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c98:	4b99      	ldr	r3, [pc, #612]	; (8001f00 <HAL_RCC_OscConfig+0x2ac>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d05b      	beq.n	8001d5c <HAL_RCC_OscConfig+0x108>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d157      	bne.n	8001d5c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e23f      	b.n	8002130 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cb8:	d106      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x74>
 8001cba:	4b91      	ldr	r3, [pc, #580]	; (8001f00 <HAL_RCC_OscConfig+0x2ac>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a90      	ldr	r2, [pc, #576]	; (8001f00 <HAL_RCC_OscConfig+0x2ac>)
 8001cc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cc4:	6013      	str	r3, [r2, #0]
 8001cc6:	e01d      	b.n	8001d04 <HAL_RCC_OscConfig+0xb0>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cd0:	d10c      	bne.n	8001cec <HAL_RCC_OscConfig+0x98>
 8001cd2:	4b8b      	ldr	r3, [pc, #556]	; (8001f00 <HAL_RCC_OscConfig+0x2ac>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a8a      	ldr	r2, [pc, #552]	; (8001f00 <HAL_RCC_OscConfig+0x2ac>)
 8001cd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cdc:	6013      	str	r3, [r2, #0]
 8001cde:	4b88      	ldr	r3, [pc, #544]	; (8001f00 <HAL_RCC_OscConfig+0x2ac>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a87      	ldr	r2, [pc, #540]	; (8001f00 <HAL_RCC_OscConfig+0x2ac>)
 8001ce4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ce8:	6013      	str	r3, [r2, #0]
 8001cea:	e00b      	b.n	8001d04 <HAL_RCC_OscConfig+0xb0>
 8001cec:	4b84      	ldr	r3, [pc, #528]	; (8001f00 <HAL_RCC_OscConfig+0x2ac>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a83      	ldr	r2, [pc, #524]	; (8001f00 <HAL_RCC_OscConfig+0x2ac>)
 8001cf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cf6:	6013      	str	r3, [r2, #0]
 8001cf8:	4b81      	ldr	r3, [pc, #516]	; (8001f00 <HAL_RCC_OscConfig+0x2ac>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a80      	ldr	r2, [pc, #512]	; (8001f00 <HAL_RCC_OscConfig+0x2ac>)
 8001cfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d013      	beq.n	8001d34 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d0c:	f7ff fbd6 	bl	80014bc <HAL_GetTick>
 8001d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d12:	e008      	b.n	8001d26 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d14:	f7ff fbd2 	bl	80014bc <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	2b64      	cmp	r3, #100	; 0x64
 8001d20:	d901      	bls.n	8001d26 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e204      	b.n	8002130 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d26:	4b76      	ldr	r3, [pc, #472]	; (8001f00 <HAL_RCC_OscConfig+0x2ac>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d0f0      	beq.n	8001d14 <HAL_RCC_OscConfig+0xc0>
 8001d32:	e014      	b.n	8001d5e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d34:	f7ff fbc2 	bl	80014bc <HAL_GetTick>
 8001d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d3a:	e008      	b.n	8001d4e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d3c:	f7ff fbbe 	bl	80014bc <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b64      	cmp	r3, #100	; 0x64
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e1f0      	b.n	8002130 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d4e:	4b6c      	ldr	r3, [pc, #432]	; (8001f00 <HAL_RCC_OscConfig+0x2ac>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d1f0      	bne.n	8001d3c <HAL_RCC_OscConfig+0xe8>
 8001d5a:	e000      	b.n	8001d5e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0302 	and.w	r3, r3, #2
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d063      	beq.n	8001e32 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d6a:	4b65      	ldr	r3, [pc, #404]	; (8001f00 <HAL_RCC_OscConfig+0x2ac>)
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	f003 030c 	and.w	r3, r3, #12
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d00b      	beq.n	8001d8e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d76:	4b62      	ldr	r3, [pc, #392]	; (8001f00 <HAL_RCC_OscConfig+0x2ac>)
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d7e:	2b08      	cmp	r3, #8
 8001d80:	d11c      	bne.n	8001dbc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d82:	4b5f      	ldr	r3, [pc, #380]	; (8001f00 <HAL_RCC_OscConfig+0x2ac>)
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d116      	bne.n	8001dbc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d8e:	4b5c      	ldr	r3, [pc, #368]	; (8001f00 <HAL_RCC_OscConfig+0x2ac>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0302 	and.w	r3, r3, #2
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d005      	beq.n	8001da6 <HAL_RCC_OscConfig+0x152>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	68db      	ldr	r3, [r3, #12]
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d001      	beq.n	8001da6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e1c4      	b.n	8002130 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001da6:	4b56      	ldr	r3, [pc, #344]	; (8001f00 <HAL_RCC_OscConfig+0x2ac>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	691b      	ldr	r3, [r3, #16]
 8001db2:	00db      	lsls	r3, r3, #3
 8001db4:	4952      	ldr	r1, [pc, #328]	; (8001f00 <HAL_RCC_OscConfig+0x2ac>)
 8001db6:	4313      	orrs	r3, r2
 8001db8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dba:	e03a      	b.n	8001e32 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d020      	beq.n	8001e06 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dc4:	4b4f      	ldr	r3, [pc, #316]	; (8001f04 <HAL_RCC_OscConfig+0x2b0>)
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dca:	f7ff fb77 	bl	80014bc <HAL_GetTick>
 8001dce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dd0:	e008      	b.n	8001de4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dd2:	f7ff fb73 	bl	80014bc <HAL_GetTick>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d901      	bls.n	8001de4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001de0:	2303      	movs	r3, #3
 8001de2:	e1a5      	b.n	8002130 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001de4:	4b46      	ldr	r3, [pc, #280]	; (8001f00 <HAL_RCC_OscConfig+0x2ac>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0302 	and.w	r3, r3, #2
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d0f0      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001df0:	4b43      	ldr	r3, [pc, #268]	; (8001f00 <HAL_RCC_OscConfig+0x2ac>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	691b      	ldr	r3, [r3, #16]
 8001dfc:	00db      	lsls	r3, r3, #3
 8001dfe:	4940      	ldr	r1, [pc, #256]	; (8001f00 <HAL_RCC_OscConfig+0x2ac>)
 8001e00:	4313      	orrs	r3, r2
 8001e02:	600b      	str	r3, [r1, #0]
 8001e04:	e015      	b.n	8001e32 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e06:	4b3f      	ldr	r3, [pc, #252]	; (8001f04 <HAL_RCC_OscConfig+0x2b0>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e0c:	f7ff fb56 	bl	80014bc <HAL_GetTick>
 8001e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e12:	e008      	b.n	8001e26 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e14:	f7ff fb52 	bl	80014bc <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d901      	bls.n	8001e26 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001e22:	2303      	movs	r3, #3
 8001e24:	e184      	b.n	8002130 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e26:	4b36      	ldr	r3, [pc, #216]	; (8001f00 <HAL_RCC_OscConfig+0x2ac>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0302 	and.w	r3, r3, #2
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d1f0      	bne.n	8001e14 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0308 	and.w	r3, r3, #8
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d030      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	695b      	ldr	r3, [r3, #20]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d016      	beq.n	8001e74 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e46:	4b30      	ldr	r3, [pc, #192]	; (8001f08 <HAL_RCC_OscConfig+0x2b4>)
 8001e48:	2201      	movs	r2, #1
 8001e4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e4c:	f7ff fb36 	bl	80014bc <HAL_GetTick>
 8001e50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e52:	e008      	b.n	8001e66 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e54:	f7ff fb32 	bl	80014bc <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e164      	b.n	8002130 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e66:	4b26      	ldr	r3, [pc, #152]	; (8001f00 <HAL_RCC_OscConfig+0x2ac>)
 8001e68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d0f0      	beq.n	8001e54 <HAL_RCC_OscConfig+0x200>
 8001e72:	e015      	b.n	8001ea0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e74:	4b24      	ldr	r3, [pc, #144]	; (8001f08 <HAL_RCC_OscConfig+0x2b4>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e7a:	f7ff fb1f 	bl	80014bc <HAL_GetTick>
 8001e7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e80:	e008      	b.n	8001e94 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e82:	f7ff fb1b 	bl	80014bc <HAL_GetTick>
 8001e86:	4602      	mov	r2, r0
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d901      	bls.n	8001e94 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001e90:	2303      	movs	r3, #3
 8001e92:	e14d      	b.n	8002130 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e94:	4b1a      	ldr	r3, [pc, #104]	; (8001f00 <HAL_RCC_OscConfig+0x2ac>)
 8001e96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e98:	f003 0302 	and.w	r3, r3, #2
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d1f0      	bne.n	8001e82 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0304 	and.w	r3, r3, #4
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	f000 80a0 	beq.w	8001fee <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eb2:	4b13      	ldr	r3, [pc, #76]	; (8001f00 <HAL_RCC_OscConfig+0x2ac>)
 8001eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d10f      	bne.n	8001ede <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	60bb      	str	r3, [r7, #8]
 8001ec2:	4b0f      	ldr	r3, [pc, #60]	; (8001f00 <HAL_RCC_OscConfig+0x2ac>)
 8001ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec6:	4a0e      	ldr	r2, [pc, #56]	; (8001f00 <HAL_RCC_OscConfig+0x2ac>)
 8001ec8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ecc:	6413      	str	r3, [r2, #64]	; 0x40
 8001ece:	4b0c      	ldr	r3, [pc, #48]	; (8001f00 <HAL_RCC_OscConfig+0x2ac>)
 8001ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ed6:	60bb      	str	r3, [r7, #8]
 8001ed8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001eda:	2301      	movs	r3, #1
 8001edc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ede:	4b0b      	ldr	r3, [pc, #44]	; (8001f0c <HAL_RCC_OscConfig+0x2b8>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d121      	bne.n	8001f2e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001eea:	4b08      	ldr	r3, [pc, #32]	; (8001f0c <HAL_RCC_OscConfig+0x2b8>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a07      	ldr	r2, [pc, #28]	; (8001f0c <HAL_RCC_OscConfig+0x2b8>)
 8001ef0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ef4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ef6:	f7ff fae1 	bl	80014bc <HAL_GetTick>
 8001efa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001efc:	e011      	b.n	8001f22 <HAL_RCC_OscConfig+0x2ce>
 8001efe:	bf00      	nop
 8001f00:	40023800 	.word	0x40023800
 8001f04:	42470000 	.word	0x42470000
 8001f08:	42470e80 	.word	0x42470e80
 8001f0c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f10:	f7ff fad4 	bl	80014bc <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e106      	b.n	8002130 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f22:	4b85      	ldr	r3, [pc, #532]	; (8002138 <HAL_RCC_OscConfig+0x4e4>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d0f0      	beq.n	8001f10 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d106      	bne.n	8001f44 <HAL_RCC_OscConfig+0x2f0>
 8001f36:	4b81      	ldr	r3, [pc, #516]	; (800213c <HAL_RCC_OscConfig+0x4e8>)
 8001f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f3a:	4a80      	ldr	r2, [pc, #512]	; (800213c <HAL_RCC_OscConfig+0x4e8>)
 8001f3c:	f043 0301 	orr.w	r3, r3, #1
 8001f40:	6713      	str	r3, [r2, #112]	; 0x70
 8001f42:	e01c      	b.n	8001f7e <HAL_RCC_OscConfig+0x32a>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	2b05      	cmp	r3, #5
 8001f4a:	d10c      	bne.n	8001f66 <HAL_RCC_OscConfig+0x312>
 8001f4c:	4b7b      	ldr	r3, [pc, #492]	; (800213c <HAL_RCC_OscConfig+0x4e8>)
 8001f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f50:	4a7a      	ldr	r2, [pc, #488]	; (800213c <HAL_RCC_OscConfig+0x4e8>)
 8001f52:	f043 0304 	orr.w	r3, r3, #4
 8001f56:	6713      	str	r3, [r2, #112]	; 0x70
 8001f58:	4b78      	ldr	r3, [pc, #480]	; (800213c <HAL_RCC_OscConfig+0x4e8>)
 8001f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f5c:	4a77      	ldr	r2, [pc, #476]	; (800213c <HAL_RCC_OscConfig+0x4e8>)
 8001f5e:	f043 0301 	orr.w	r3, r3, #1
 8001f62:	6713      	str	r3, [r2, #112]	; 0x70
 8001f64:	e00b      	b.n	8001f7e <HAL_RCC_OscConfig+0x32a>
 8001f66:	4b75      	ldr	r3, [pc, #468]	; (800213c <HAL_RCC_OscConfig+0x4e8>)
 8001f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f6a:	4a74      	ldr	r2, [pc, #464]	; (800213c <HAL_RCC_OscConfig+0x4e8>)
 8001f6c:	f023 0301 	bic.w	r3, r3, #1
 8001f70:	6713      	str	r3, [r2, #112]	; 0x70
 8001f72:	4b72      	ldr	r3, [pc, #456]	; (800213c <HAL_RCC_OscConfig+0x4e8>)
 8001f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f76:	4a71      	ldr	r2, [pc, #452]	; (800213c <HAL_RCC_OscConfig+0x4e8>)
 8001f78:	f023 0304 	bic.w	r3, r3, #4
 8001f7c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d015      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f86:	f7ff fa99 	bl	80014bc <HAL_GetTick>
 8001f8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f8c:	e00a      	b.n	8001fa4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f8e:	f7ff fa95 	bl	80014bc <HAL_GetTick>
 8001f92:	4602      	mov	r2, r0
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d901      	bls.n	8001fa4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	e0c5      	b.n	8002130 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fa4:	4b65      	ldr	r3, [pc, #404]	; (800213c <HAL_RCC_OscConfig+0x4e8>)
 8001fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fa8:	f003 0302 	and.w	r3, r3, #2
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d0ee      	beq.n	8001f8e <HAL_RCC_OscConfig+0x33a>
 8001fb0:	e014      	b.n	8001fdc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fb2:	f7ff fa83 	bl	80014bc <HAL_GetTick>
 8001fb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fb8:	e00a      	b.n	8001fd0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fba:	f7ff fa7f 	bl	80014bc <HAL_GetTick>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d901      	bls.n	8001fd0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	e0af      	b.n	8002130 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fd0:	4b5a      	ldr	r3, [pc, #360]	; (800213c <HAL_RCC_OscConfig+0x4e8>)
 8001fd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fd4:	f003 0302 	and.w	r3, r3, #2
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d1ee      	bne.n	8001fba <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fdc:	7dfb      	ldrb	r3, [r7, #23]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d105      	bne.n	8001fee <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fe2:	4b56      	ldr	r3, [pc, #344]	; (800213c <HAL_RCC_OscConfig+0x4e8>)
 8001fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe6:	4a55      	ldr	r2, [pc, #340]	; (800213c <HAL_RCC_OscConfig+0x4e8>)
 8001fe8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	699b      	ldr	r3, [r3, #24]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	f000 809b 	beq.w	800212e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ff8:	4b50      	ldr	r3, [pc, #320]	; (800213c <HAL_RCC_OscConfig+0x4e8>)
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	f003 030c 	and.w	r3, r3, #12
 8002000:	2b08      	cmp	r3, #8
 8002002:	d05c      	beq.n	80020be <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	699b      	ldr	r3, [r3, #24]
 8002008:	2b02      	cmp	r3, #2
 800200a:	d141      	bne.n	8002090 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800200c:	4b4c      	ldr	r3, [pc, #304]	; (8002140 <HAL_RCC_OscConfig+0x4ec>)
 800200e:	2200      	movs	r2, #0
 8002010:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002012:	f7ff fa53 	bl	80014bc <HAL_GetTick>
 8002016:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002018:	e008      	b.n	800202c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800201a:	f7ff fa4f 	bl	80014bc <HAL_GetTick>
 800201e:	4602      	mov	r2, r0
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	2b02      	cmp	r3, #2
 8002026:	d901      	bls.n	800202c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	e081      	b.n	8002130 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800202c:	4b43      	ldr	r3, [pc, #268]	; (800213c <HAL_RCC_OscConfig+0x4e8>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d1f0      	bne.n	800201a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	69da      	ldr	r2, [r3, #28]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6a1b      	ldr	r3, [r3, #32]
 8002040:	431a      	orrs	r2, r3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002046:	019b      	lsls	r3, r3, #6
 8002048:	431a      	orrs	r2, r3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800204e:	085b      	lsrs	r3, r3, #1
 8002050:	3b01      	subs	r3, #1
 8002052:	041b      	lsls	r3, r3, #16
 8002054:	431a      	orrs	r2, r3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800205a:	061b      	lsls	r3, r3, #24
 800205c:	4937      	ldr	r1, [pc, #220]	; (800213c <HAL_RCC_OscConfig+0x4e8>)
 800205e:	4313      	orrs	r3, r2
 8002060:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002062:	4b37      	ldr	r3, [pc, #220]	; (8002140 <HAL_RCC_OscConfig+0x4ec>)
 8002064:	2201      	movs	r2, #1
 8002066:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002068:	f7ff fa28 	bl	80014bc <HAL_GetTick>
 800206c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800206e:	e008      	b.n	8002082 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002070:	f7ff fa24 	bl	80014bc <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	2b02      	cmp	r3, #2
 800207c:	d901      	bls.n	8002082 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800207e:	2303      	movs	r3, #3
 8002080:	e056      	b.n	8002130 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002082:	4b2e      	ldr	r3, [pc, #184]	; (800213c <HAL_RCC_OscConfig+0x4e8>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d0f0      	beq.n	8002070 <HAL_RCC_OscConfig+0x41c>
 800208e:	e04e      	b.n	800212e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002090:	4b2b      	ldr	r3, [pc, #172]	; (8002140 <HAL_RCC_OscConfig+0x4ec>)
 8002092:	2200      	movs	r2, #0
 8002094:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002096:	f7ff fa11 	bl	80014bc <HAL_GetTick>
 800209a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800209c:	e008      	b.n	80020b0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800209e:	f7ff fa0d 	bl	80014bc <HAL_GetTick>
 80020a2:	4602      	mov	r2, r0
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d901      	bls.n	80020b0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80020ac:	2303      	movs	r3, #3
 80020ae:	e03f      	b.n	8002130 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020b0:	4b22      	ldr	r3, [pc, #136]	; (800213c <HAL_RCC_OscConfig+0x4e8>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d1f0      	bne.n	800209e <HAL_RCC_OscConfig+0x44a>
 80020bc:	e037      	b.n	800212e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	699b      	ldr	r3, [r3, #24]
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d101      	bne.n	80020ca <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e032      	b.n	8002130 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80020ca:	4b1c      	ldr	r3, [pc, #112]	; (800213c <HAL_RCC_OscConfig+0x4e8>)
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	699b      	ldr	r3, [r3, #24]
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d028      	beq.n	800212a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d121      	bne.n	800212a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d11a      	bne.n	800212a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020f4:	68fa      	ldr	r2, [r7, #12]
 80020f6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80020fa:	4013      	ands	r3, r2
 80020fc:	687a      	ldr	r2, [r7, #4]
 80020fe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002100:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002102:	4293      	cmp	r3, r2
 8002104:	d111      	bne.n	800212a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002110:	085b      	lsrs	r3, r3, #1
 8002112:	3b01      	subs	r3, #1
 8002114:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002116:	429a      	cmp	r2, r3
 8002118:	d107      	bne.n	800212a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002124:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002126:	429a      	cmp	r2, r3
 8002128:	d001      	beq.n	800212e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	e000      	b.n	8002130 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800212e:	2300      	movs	r3, #0
}
 8002130:	4618      	mov	r0, r3
 8002132:	3718      	adds	r7, #24
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	40007000 	.word	0x40007000
 800213c:	40023800 	.word	0x40023800
 8002140:	42470060 	.word	0x42470060

08002144 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b084      	sub	sp, #16
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d101      	bne.n	8002158 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e0cc      	b.n	80022f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002158:	4b68      	ldr	r3, [pc, #416]	; (80022fc <HAL_RCC_ClockConfig+0x1b8>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0307 	and.w	r3, r3, #7
 8002160:	683a      	ldr	r2, [r7, #0]
 8002162:	429a      	cmp	r2, r3
 8002164:	d90c      	bls.n	8002180 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002166:	4b65      	ldr	r3, [pc, #404]	; (80022fc <HAL_RCC_ClockConfig+0x1b8>)
 8002168:	683a      	ldr	r2, [r7, #0]
 800216a:	b2d2      	uxtb	r2, r2
 800216c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800216e:	4b63      	ldr	r3, [pc, #396]	; (80022fc <HAL_RCC_ClockConfig+0x1b8>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0307 	and.w	r3, r3, #7
 8002176:	683a      	ldr	r2, [r7, #0]
 8002178:	429a      	cmp	r2, r3
 800217a:	d001      	beq.n	8002180 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e0b8      	b.n	80022f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0302 	and.w	r3, r3, #2
 8002188:	2b00      	cmp	r3, #0
 800218a:	d020      	beq.n	80021ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0304 	and.w	r3, r3, #4
 8002194:	2b00      	cmp	r3, #0
 8002196:	d005      	beq.n	80021a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002198:	4b59      	ldr	r3, [pc, #356]	; (8002300 <HAL_RCC_ClockConfig+0x1bc>)
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	4a58      	ldr	r2, [pc, #352]	; (8002300 <HAL_RCC_ClockConfig+0x1bc>)
 800219e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80021a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0308 	and.w	r3, r3, #8
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d005      	beq.n	80021bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021b0:	4b53      	ldr	r3, [pc, #332]	; (8002300 <HAL_RCC_ClockConfig+0x1bc>)
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	4a52      	ldr	r2, [pc, #328]	; (8002300 <HAL_RCC_ClockConfig+0x1bc>)
 80021b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80021ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021bc:	4b50      	ldr	r3, [pc, #320]	; (8002300 <HAL_RCC_ClockConfig+0x1bc>)
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	494d      	ldr	r1, [pc, #308]	; (8002300 <HAL_RCC_ClockConfig+0x1bc>)
 80021ca:	4313      	orrs	r3, r2
 80021cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0301 	and.w	r3, r3, #1
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d044      	beq.n	8002264 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d107      	bne.n	80021f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021e2:	4b47      	ldr	r3, [pc, #284]	; (8002300 <HAL_RCC_ClockConfig+0x1bc>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d119      	bne.n	8002222 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e07f      	b.n	80022f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d003      	beq.n	8002202 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021fe:	2b03      	cmp	r3, #3
 8002200:	d107      	bne.n	8002212 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002202:	4b3f      	ldr	r3, [pc, #252]	; (8002300 <HAL_RCC_ClockConfig+0x1bc>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d109      	bne.n	8002222 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e06f      	b.n	80022f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002212:	4b3b      	ldr	r3, [pc, #236]	; (8002300 <HAL_RCC_ClockConfig+0x1bc>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0302 	and.w	r3, r3, #2
 800221a:	2b00      	cmp	r3, #0
 800221c:	d101      	bne.n	8002222 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e067      	b.n	80022f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002222:	4b37      	ldr	r3, [pc, #220]	; (8002300 <HAL_RCC_ClockConfig+0x1bc>)
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	f023 0203 	bic.w	r2, r3, #3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	4934      	ldr	r1, [pc, #208]	; (8002300 <HAL_RCC_ClockConfig+0x1bc>)
 8002230:	4313      	orrs	r3, r2
 8002232:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002234:	f7ff f942 	bl	80014bc <HAL_GetTick>
 8002238:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800223a:	e00a      	b.n	8002252 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800223c:	f7ff f93e 	bl	80014bc <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	f241 3288 	movw	r2, #5000	; 0x1388
 800224a:	4293      	cmp	r3, r2
 800224c:	d901      	bls.n	8002252 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e04f      	b.n	80022f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002252:	4b2b      	ldr	r3, [pc, #172]	; (8002300 <HAL_RCC_ClockConfig+0x1bc>)
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	f003 020c 	and.w	r2, r3, #12
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	429a      	cmp	r2, r3
 8002262:	d1eb      	bne.n	800223c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002264:	4b25      	ldr	r3, [pc, #148]	; (80022fc <HAL_RCC_ClockConfig+0x1b8>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 0307 	and.w	r3, r3, #7
 800226c:	683a      	ldr	r2, [r7, #0]
 800226e:	429a      	cmp	r2, r3
 8002270:	d20c      	bcs.n	800228c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002272:	4b22      	ldr	r3, [pc, #136]	; (80022fc <HAL_RCC_ClockConfig+0x1b8>)
 8002274:	683a      	ldr	r2, [r7, #0]
 8002276:	b2d2      	uxtb	r2, r2
 8002278:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800227a:	4b20      	ldr	r3, [pc, #128]	; (80022fc <HAL_RCC_ClockConfig+0x1b8>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0307 	and.w	r3, r3, #7
 8002282:	683a      	ldr	r2, [r7, #0]
 8002284:	429a      	cmp	r2, r3
 8002286:	d001      	beq.n	800228c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e032      	b.n	80022f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0304 	and.w	r3, r3, #4
 8002294:	2b00      	cmp	r3, #0
 8002296:	d008      	beq.n	80022aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002298:	4b19      	ldr	r3, [pc, #100]	; (8002300 <HAL_RCC_ClockConfig+0x1bc>)
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	4916      	ldr	r1, [pc, #88]	; (8002300 <HAL_RCC_ClockConfig+0x1bc>)
 80022a6:	4313      	orrs	r3, r2
 80022a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0308 	and.w	r3, r3, #8
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d009      	beq.n	80022ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022b6:	4b12      	ldr	r3, [pc, #72]	; (8002300 <HAL_RCC_ClockConfig+0x1bc>)
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	691b      	ldr	r3, [r3, #16]
 80022c2:	00db      	lsls	r3, r3, #3
 80022c4:	490e      	ldr	r1, [pc, #56]	; (8002300 <HAL_RCC_ClockConfig+0x1bc>)
 80022c6:	4313      	orrs	r3, r2
 80022c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80022ca:	f000 f821 	bl	8002310 <HAL_RCC_GetSysClockFreq>
 80022ce:	4602      	mov	r2, r0
 80022d0:	4b0b      	ldr	r3, [pc, #44]	; (8002300 <HAL_RCC_ClockConfig+0x1bc>)
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	091b      	lsrs	r3, r3, #4
 80022d6:	f003 030f 	and.w	r3, r3, #15
 80022da:	490a      	ldr	r1, [pc, #40]	; (8002304 <HAL_RCC_ClockConfig+0x1c0>)
 80022dc:	5ccb      	ldrb	r3, [r1, r3]
 80022de:	fa22 f303 	lsr.w	r3, r2, r3
 80022e2:	4a09      	ldr	r2, [pc, #36]	; (8002308 <HAL_RCC_ClockConfig+0x1c4>)
 80022e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80022e6:	4b09      	ldr	r3, [pc, #36]	; (800230c <HAL_RCC_ClockConfig+0x1c8>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7ff f8a2 	bl	8001434 <HAL_InitTick>

  return HAL_OK;
 80022f0:	2300      	movs	r3, #0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3710      	adds	r7, #16
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	40023c00 	.word	0x40023c00
 8002300:	40023800 	.word	0x40023800
 8002304:	08007adc 	.word	0x08007adc
 8002308:	20000000 	.word	0x20000000
 800230c:	20000004 	.word	0x20000004

08002310 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002310:	b5b0      	push	{r4, r5, r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002316:	2100      	movs	r1, #0
 8002318:	6079      	str	r1, [r7, #4]
 800231a:	2100      	movs	r1, #0
 800231c:	60f9      	str	r1, [r7, #12]
 800231e:	2100      	movs	r1, #0
 8002320:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002322:	2100      	movs	r1, #0
 8002324:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002326:	4952      	ldr	r1, [pc, #328]	; (8002470 <HAL_RCC_GetSysClockFreq+0x160>)
 8002328:	6889      	ldr	r1, [r1, #8]
 800232a:	f001 010c 	and.w	r1, r1, #12
 800232e:	2908      	cmp	r1, #8
 8002330:	d00d      	beq.n	800234e <HAL_RCC_GetSysClockFreq+0x3e>
 8002332:	2908      	cmp	r1, #8
 8002334:	f200 8094 	bhi.w	8002460 <HAL_RCC_GetSysClockFreq+0x150>
 8002338:	2900      	cmp	r1, #0
 800233a:	d002      	beq.n	8002342 <HAL_RCC_GetSysClockFreq+0x32>
 800233c:	2904      	cmp	r1, #4
 800233e:	d003      	beq.n	8002348 <HAL_RCC_GetSysClockFreq+0x38>
 8002340:	e08e      	b.n	8002460 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002342:	4b4c      	ldr	r3, [pc, #304]	; (8002474 <HAL_RCC_GetSysClockFreq+0x164>)
 8002344:	60bb      	str	r3, [r7, #8]
       break;
 8002346:	e08e      	b.n	8002466 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002348:	4b4b      	ldr	r3, [pc, #300]	; (8002478 <HAL_RCC_GetSysClockFreq+0x168>)
 800234a:	60bb      	str	r3, [r7, #8]
      break;
 800234c:	e08b      	b.n	8002466 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800234e:	4948      	ldr	r1, [pc, #288]	; (8002470 <HAL_RCC_GetSysClockFreq+0x160>)
 8002350:	6849      	ldr	r1, [r1, #4]
 8002352:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002356:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002358:	4945      	ldr	r1, [pc, #276]	; (8002470 <HAL_RCC_GetSysClockFreq+0x160>)
 800235a:	6849      	ldr	r1, [r1, #4]
 800235c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002360:	2900      	cmp	r1, #0
 8002362:	d024      	beq.n	80023ae <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002364:	4942      	ldr	r1, [pc, #264]	; (8002470 <HAL_RCC_GetSysClockFreq+0x160>)
 8002366:	6849      	ldr	r1, [r1, #4]
 8002368:	0989      	lsrs	r1, r1, #6
 800236a:	4608      	mov	r0, r1
 800236c:	f04f 0100 	mov.w	r1, #0
 8002370:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002374:	f04f 0500 	mov.w	r5, #0
 8002378:	ea00 0204 	and.w	r2, r0, r4
 800237c:	ea01 0305 	and.w	r3, r1, r5
 8002380:	493d      	ldr	r1, [pc, #244]	; (8002478 <HAL_RCC_GetSysClockFreq+0x168>)
 8002382:	fb01 f003 	mul.w	r0, r1, r3
 8002386:	2100      	movs	r1, #0
 8002388:	fb01 f102 	mul.w	r1, r1, r2
 800238c:	1844      	adds	r4, r0, r1
 800238e:	493a      	ldr	r1, [pc, #232]	; (8002478 <HAL_RCC_GetSysClockFreq+0x168>)
 8002390:	fba2 0101 	umull	r0, r1, r2, r1
 8002394:	1863      	adds	r3, r4, r1
 8002396:	4619      	mov	r1, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	461a      	mov	r2, r3
 800239c:	f04f 0300 	mov.w	r3, #0
 80023a0:	f7fd ff66 	bl	8000270 <__aeabi_uldivmod>
 80023a4:	4602      	mov	r2, r0
 80023a6:	460b      	mov	r3, r1
 80023a8:	4613      	mov	r3, r2
 80023aa:	60fb      	str	r3, [r7, #12]
 80023ac:	e04a      	b.n	8002444 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023ae:	4b30      	ldr	r3, [pc, #192]	; (8002470 <HAL_RCC_GetSysClockFreq+0x160>)
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	099b      	lsrs	r3, r3, #6
 80023b4:	461a      	mov	r2, r3
 80023b6:	f04f 0300 	mov.w	r3, #0
 80023ba:	f240 10ff 	movw	r0, #511	; 0x1ff
 80023be:	f04f 0100 	mov.w	r1, #0
 80023c2:	ea02 0400 	and.w	r4, r2, r0
 80023c6:	ea03 0501 	and.w	r5, r3, r1
 80023ca:	4620      	mov	r0, r4
 80023cc:	4629      	mov	r1, r5
 80023ce:	f04f 0200 	mov.w	r2, #0
 80023d2:	f04f 0300 	mov.w	r3, #0
 80023d6:	014b      	lsls	r3, r1, #5
 80023d8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80023dc:	0142      	lsls	r2, r0, #5
 80023de:	4610      	mov	r0, r2
 80023e0:	4619      	mov	r1, r3
 80023e2:	1b00      	subs	r0, r0, r4
 80023e4:	eb61 0105 	sbc.w	r1, r1, r5
 80023e8:	f04f 0200 	mov.w	r2, #0
 80023ec:	f04f 0300 	mov.w	r3, #0
 80023f0:	018b      	lsls	r3, r1, #6
 80023f2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80023f6:	0182      	lsls	r2, r0, #6
 80023f8:	1a12      	subs	r2, r2, r0
 80023fa:	eb63 0301 	sbc.w	r3, r3, r1
 80023fe:	f04f 0000 	mov.w	r0, #0
 8002402:	f04f 0100 	mov.w	r1, #0
 8002406:	00d9      	lsls	r1, r3, #3
 8002408:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800240c:	00d0      	lsls	r0, r2, #3
 800240e:	4602      	mov	r2, r0
 8002410:	460b      	mov	r3, r1
 8002412:	1912      	adds	r2, r2, r4
 8002414:	eb45 0303 	adc.w	r3, r5, r3
 8002418:	f04f 0000 	mov.w	r0, #0
 800241c:	f04f 0100 	mov.w	r1, #0
 8002420:	0299      	lsls	r1, r3, #10
 8002422:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002426:	0290      	lsls	r0, r2, #10
 8002428:	4602      	mov	r2, r0
 800242a:	460b      	mov	r3, r1
 800242c:	4610      	mov	r0, r2
 800242e:	4619      	mov	r1, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	461a      	mov	r2, r3
 8002434:	f04f 0300 	mov.w	r3, #0
 8002438:	f7fd ff1a 	bl	8000270 <__aeabi_uldivmod>
 800243c:	4602      	mov	r2, r0
 800243e:	460b      	mov	r3, r1
 8002440:	4613      	mov	r3, r2
 8002442:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002444:	4b0a      	ldr	r3, [pc, #40]	; (8002470 <HAL_RCC_GetSysClockFreq+0x160>)
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	0c1b      	lsrs	r3, r3, #16
 800244a:	f003 0303 	and.w	r3, r3, #3
 800244e:	3301      	adds	r3, #1
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002454:	68fa      	ldr	r2, [r7, #12]
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	fbb2 f3f3 	udiv	r3, r2, r3
 800245c:	60bb      	str	r3, [r7, #8]
      break;
 800245e:	e002      	b.n	8002466 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002460:	4b04      	ldr	r3, [pc, #16]	; (8002474 <HAL_RCC_GetSysClockFreq+0x164>)
 8002462:	60bb      	str	r3, [r7, #8]
      break;
 8002464:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002466:	68bb      	ldr	r3, [r7, #8]
}
 8002468:	4618      	mov	r0, r3
 800246a:	3710      	adds	r7, #16
 800246c:	46bd      	mov	sp, r7
 800246e:	bdb0      	pop	{r4, r5, r7, pc}
 8002470:	40023800 	.word	0x40023800
 8002474:	00f42400 	.word	0x00f42400
 8002478:	017d7840 	.word	0x017d7840

0800247c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002480:	4b03      	ldr	r3, [pc, #12]	; (8002490 <HAL_RCC_GetHCLKFreq+0x14>)
 8002482:	681b      	ldr	r3, [r3, #0]
}
 8002484:	4618      	mov	r0, r3
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
 800248e:	bf00      	nop
 8002490:	20000000 	.word	0x20000000

08002494 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002498:	f7ff fff0 	bl	800247c <HAL_RCC_GetHCLKFreq>
 800249c:	4602      	mov	r2, r0
 800249e:	4b05      	ldr	r3, [pc, #20]	; (80024b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	0a9b      	lsrs	r3, r3, #10
 80024a4:	f003 0307 	and.w	r3, r3, #7
 80024a8:	4903      	ldr	r1, [pc, #12]	; (80024b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024aa:	5ccb      	ldrb	r3, [r1, r3]
 80024ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	40023800 	.word	0x40023800
 80024b8:	08007aec 	.word	0x08007aec

080024bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80024c0:	f7ff ffdc 	bl	800247c <HAL_RCC_GetHCLKFreq>
 80024c4:	4602      	mov	r2, r0
 80024c6:	4b05      	ldr	r3, [pc, #20]	; (80024dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	0b5b      	lsrs	r3, r3, #13
 80024cc:	f003 0307 	and.w	r3, r3, #7
 80024d0:	4903      	ldr	r1, [pc, #12]	; (80024e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024d2:	5ccb      	ldrb	r3, [r1, r3]
 80024d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024d8:	4618      	mov	r0, r3
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	40023800 	.word	0x40023800
 80024e0:	08007aec 	.word	0x08007aec

080024e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d101      	bne.n	80024f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e041      	b.n	800257a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d106      	bne.n	8002510 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f7fe fd4e 	bl	8000fac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2202      	movs	r2, #2
 8002514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	3304      	adds	r3, #4
 8002520:	4619      	mov	r1, r3
 8002522:	4610      	mov	r0, r2
 8002524:	f000 fb7e 	bl	8002c24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2201      	movs	r2, #1
 8002534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2201      	movs	r2, #1
 8002544:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2201      	movs	r2, #1
 8002554:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2201      	movs	r2, #1
 8002564:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2201      	movs	r2, #1
 800256c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2201      	movs	r2, #1
 8002574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002578:	2300      	movs	r3, #0
}
 800257a:	4618      	mov	r0, r3
 800257c:	3708      	adds	r7, #8
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}

08002582 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002582:	b580      	push	{r7, lr}
 8002584:	b082      	sub	sp, #8
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d101      	bne.n	8002594 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e041      	b.n	8002618 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800259a:	b2db      	uxtb	r3, r3
 800259c:	2b00      	cmp	r3, #0
 800259e:	d106      	bne.n	80025ae <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2200      	movs	r2, #0
 80025a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f000 f839 	bl	8002620 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2202      	movs	r2, #2
 80025b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	3304      	adds	r3, #4
 80025be:	4619      	mov	r1, r3
 80025c0:	4610      	mov	r0, r2
 80025c2:	f000 fb2f 	bl	8002c24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2201      	movs	r2, #1
 80025ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2201      	movs	r2, #1
 80025d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2201      	movs	r2, #1
 80025da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2201      	movs	r2, #1
 80025e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2201      	movs	r2, #1
 80025ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2201      	movs	r2, #1
 80025f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2201      	movs	r2, #1
 80025fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2201      	movs	r2, #1
 8002602:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2201      	movs	r2, #1
 800260a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2201      	movs	r2, #1
 8002612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002616:	2300      	movs	r3, #0
}
 8002618:	4618      	mov	r0, r3
 800261a:	3708      	adds	r7, #8
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}

08002620 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002628:	bf00      	nop
 800262a:	370c      	adds	r7, #12
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr

08002634 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b084      	sub	sp, #16
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d109      	bne.n	8002658 <HAL_TIM_PWM_Start+0x24>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800264a:	b2db      	uxtb	r3, r3
 800264c:	2b01      	cmp	r3, #1
 800264e:	bf14      	ite	ne
 8002650:	2301      	movne	r3, #1
 8002652:	2300      	moveq	r3, #0
 8002654:	b2db      	uxtb	r3, r3
 8002656:	e022      	b.n	800269e <HAL_TIM_PWM_Start+0x6a>
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	2b04      	cmp	r3, #4
 800265c:	d109      	bne.n	8002672 <HAL_TIM_PWM_Start+0x3e>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002664:	b2db      	uxtb	r3, r3
 8002666:	2b01      	cmp	r3, #1
 8002668:	bf14      	ite	ne
 800266a:	2301      	movne	r3, #1
 800266c:	2300      	moveq	r3, #0
 800266e:	b2db      	uxtb	r3, r3
 8002670:	e015      	b.n	800269e <HAL_TIM_PWM_Start+0x6a>
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	2b08      	cmp	r3, #8
 8002676:	d109      	bne.n	800268c <HAL_TIM_PWM_Start+0x58>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800267e:	b2db      	uxtb	r3, r3
 8002680:	2b01      	cmp	r3, #1
 8002682:	bf14      	ite	ne
 8002684:	2301      	movne	r3, #1
 8002686:	2300      	moveq	r3, #0
 8002688:	b2db      	uxtb	r3, r3
 800268a:	e008      	b.n	800269e <HAL_TIM_PWM_Start+0x6a>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002692:	b2db      	uxtb	r3, r3
 8002694:	2b01      	cmp	r3, #1
 8002696:	bf14      	ite	ne
 8002698:	2301      	movne	r3, #1
 800269a:	2300      	moveq	r3, #0
 800269c:	b2db      	uxtb	r3, r3
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e07c      	b.n	80027a0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d104      	bne.n	80026b6 <HAL_TIM_PWM_Start+0x82>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2202      	movs	r2, #2
 80026b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80026b4:	e013      	b.n	80026de <HAL_TIM_PWM_Start+0xaa>
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	2b04      	cmp	r3, #4
 80026ba:	d104      	bne.n	80026c6 <HAL_TIM_PWM_Start+0x92>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2202      	movs	r2, #2
 80026c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80026c4:	e00b      	b.n	80026de <HAL_TIM_PWM_Start+0xaa>
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	2b08      	cmp	r3, #8
 80026ca:	d104      	bne.n	80026d6 <HAL_TIM_PWM_Start+0xa2>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2202      	movs	r2, #2
 80026d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80026d4:	e003      	b.n	80026de <HAL_TIM_PWM_Start+0xaa>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2202      	movs	r2, #2
 80026da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2201      	movs	r2, #1
 80026e4:	6839      	ldr	r1, [r7, #0]
 80026e6:	4618      	mov	r0, r3
 80026e8:	f000 fd86 	bl	80031f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a2d      	ldr	r2, [pc, #180]	; (80027a8 <HAL_TIM_PWM_Start+0x174>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d004      	beq.n	8002700 <HAL_TIM_PWM_Start+0xcc>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a2c      	ldr	r2, [pc, #176]	; (80027ac <HAL_TIM_PWM_Start+0x178>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d101      	bne.n	8002704 <HAL_TIM_PWM_Start+0xd0>
 8002700:	2301      	movs	r3, #1
 8002702:	e000      	b.n	8002706 <HAL_TIM_PWM_Start+0xd2>
 8002704:	2300      	movs	r3, #0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d007      	beq.n	800271a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002718:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a22      	ldr	r2, [pc, #136]	; (80027a8 <HAL_TIM_PWM_Start+0x174>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d022      	beq.n	800276a <HAL_TIM_PWM_Start+0x136>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800272c:	d01d      	beq.n	800276a <HAL_TIM_PWM_Start+0x136>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a1f      	ldr	r2, [pc, #124]	; (80027b0 <HAL_TIM_PWM_Start+0x17c>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d018      	beq.n	800276a <HAL_TIM_PWM_Start+0x136>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a1d      	ldr	r2, [pc, #116]	; (80027b4 <HAL_TIM_PWM_Start+0x180>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d013      	beq.n	800276a <HAL_TIM_PWM_Start+0x136>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a1c      	ldr	r2, [pc, #112]	; (80027b8 <HAL_TIM_PWM_Start+0x184>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d00e      	beq.n	800276a <HAL_TIM_PWM_Start+0x136>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a16      	ldr	r2, [pc, #88]	; (80027ac <HAL_TIM_PWM_Start+0x178>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d009      	beq.n	800276a <HAL_TIM_PWM_Start+0x136>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a18      	ldr	r2, [pc, #96]	; (80027bc <HAL_TIM_PWM_Start+0x188>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d004      	beq.n	800276a <HAL_TIM_PWM_Start+0x136>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a16      	ldr	r2, [pc, #88]	; (80027c0 <HAL_TIM_PWM_Start+0x18c>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d111      	bne.n	800278e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	f003 0307 	and.w	r3, r3, #7
 8002774:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2b06      	cmp	r3, #6
 800277a:	d010      	beq.n	800279e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f042 0201 	orr.w	r2, r2, #1
 800278a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800278c:	e007      	b.n	800279e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f042 0201 	orr.w	r2, r2, #1
 800279c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800279e:	2300      	movs	r3, #0
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3710      	adds	r7, #16
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	40010000 	.word	0x40010000
 80027ac:	40010400 	.word	0x40010400
 80027b0:	40000400 	.word	0x40000400
 80027b4:	40000800 	.word	0x40000800
 80027b8:	40000c00 	.word	0x40000c00
 80027bc:	40014000 	.word	0x40014000
 80027c0:	40001800 	.word	0x40001800

080027c4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b086      	sub	sp, #24
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d101      	bne.n	80027d8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e097      	b.n	8002908 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027de:	b2db      	uxtb	r3, r3
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d106      	bne.n	80027f2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2200      	movs	r2, #0
 80027e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f7fe fc3b 	bl	8001068 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2202      	movs	r2, #2
 80027f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	687a      	ldr	r2, [r7, #4]
 8002802:	6812      	ldr	r2, [r2, #0]
 8002804:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002808:	f023 0307 	bic.w	r3, r3, #7
 800280c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	3304      	adds	r3, #4
 8002816:	4619      	mov	r1, r3
 8002818:	4610      	mov	r0, r2
 800281a:	f000 fa03 	bl	8002c24 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	699b      	ldr	r3, [r3, #24]
 800282c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	6a1b      	ldr	r3, [r3, #32]
 8002834:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	697a      	ldr	r2, [r7, #20]
 800283c:	4313      	orrs	r3, r2
 800283e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002846:	f023 0303 	bic.w	r3, r3, #3
 800284a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	689a      	ldr	r2, [r3, #8]
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	699b      	ldr	r3, [r3, #24]
 8002854:	021b      	lsls	r3, r3, #8
 8002856:	4313      	orrs	r3, r2
 8002858:	693a      	ldr	r2, [r7, #16]
 800285a:	4313      	orrs	r3, r2
 800285c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002864:	f023 030c 	bic.w	r3, r3, #12
 8002868:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002870:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002874:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	68da      	ldr	r2, [r3, #12]
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	69db      	ldr	r3, [r3, #28]
 800287e:	021b      	lsls	r3, r3, #8
 8002880:	4313      	orrs	r3, r2
 8002882:	693a      	ldr	r2, [r7, #16]
 8002884:	4313      	orrs	r3, r2
 8002886:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	691b      	ldr	r3, [r3, #16]
 800288c:	011a      	lsls	r2, r3, #4
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	6a1b      	ldr	r3, [r3, #32]
 8002892:	031b      	lsls	r3, r3, #12
 8002894:	4313      	orrs	r3, r2
 8002896:	693a      	ldr	r2, [r7, #16]
 8002898:	4313      	orrs	r3, r2
 800289a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80028a2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80028aa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	685a      	ldr	r2, [r3, #4]
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	695b      	ldr	r3, [r3, #20]
 80028b4:	011b      	lsls	r3, r3, #4
 80028b6:	4313      	orrs	r3, r2
 80028b8:	68fa      	ldr	r2, [r7, #12]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	697a      	ldr	r2, [r7, #20]
 80028c4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	693a      	ldr	r2, [r7, #16]
 80028cc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	68fa      	ldr	r2, [r7, #12]
 80028d4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2201      	movs	r2, #1
 80028da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2201      	movs	r2, #1
 80028e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2201      	movs	r2, #1
 80028ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2201      	movs	r2, #1
 80028f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2201      	movs	r2, #1
 80028fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2201      	movs	r2, #1
 8002902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002906:	2300      	movs	r3, #0
}
 8002908:	4618      	mov	r0, r3
 800290a:	3718      	adds	r7, #24
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b086      	sub	sp, #24
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800291c:	2300      	movs	r3, #0
 800291e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002926:	2b01      	cmp	r3, #1
 8002928:	d101      	bne.n	800292e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800292a:	2302      	movs	r3, #2
 800292c:	e0ae      	b.n	8002a8c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2201      	movs	r2, #1
 8002932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2b0c      	cmp	r3, #12
 800293a:	f200 809f 	bhi.w	8002a7c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800293e:	a201      	add	r2, pc, #4	; (adr r2, 8002944 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002944:	08002979 	.word	0x08002979
 8002948:	08002a7d 	.word	0x08002a7d
 800294c:	08002a7d 	.word	0x08002a7d
 8002950:	08002a7d 	.word	0x08002a7d
 8002954:	080029b9 	.word	0x080029b9
 8002958:	08002a7d 	.word	0x08002a7d
 800295c:	08002a7d 	.word	0x08002a7d
 8002960:	08002a7d 	.word	0x08002a7d
 8002964:	080029fb 	.word	0x080029fb
 8002968:	08002a7d 	.word	0x08002a7d
 800296c:	08002a7d 	.word	0x08002a7d
 8002970:	08002a7d 	.word	0x08002a7d
 8002974:	08002a3b 	.word	0x08002a3b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	68b9      	ldr	r1, [r7, #8]
 800297e:	4618      	mov	r0, r3
 8002980:	f000 f9f0 	bl	8002d64 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	699a      	ldr	r2, [r3, #24]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f042 0208 	orr.w	r2, r2, #8
 8002992:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	699a      	ldr	r2, [r3, #24]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f022 0204 	bic.w	r2, r2, #4
 80029a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	6999      	ldr	r1, [r3, #24]
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	691a      	ldr	r2, [r3, #16]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	430a      	orrs	r2, r1
 80029b4:	619a      	str	r2, [r3, #24]
      break;
 80029b6:	e064      	b.n	8002a82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	68b9      	ldr	r1, [r7, #8]
 80029be:	4618      	mov	r0, r3
 80029c0:	f000 fa40 	bl	8002e44 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	699a      	ldr	r2, [r3, #24]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	699a      	ldr	r2, [r3, #24]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	6999      	ldr	r1, [r3, #24]
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	691b      	ldr	r3, [r3, #16]
 80029ee:	021a      	lsls	r2, r3, #8
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	430a      	orrs	r2, r1
 80029f6:	619a      	str	r2, [r3, #24]
      break;
 80029f8:	e043      	b.n	8002a82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	68b9      	ldr	r1, [r7, #8]
 8002a00:	4618      	mov	r0, r3
 8002a02:	f000 fa95 	bl	8002f30 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	69da      	ldr	r2, [r3, #28]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f042 0208 	orr.w	r2, r2, #8
 8002a14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	69da      	ldr	r2, [r3, #28]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f022 0204 	bic.w	r2, r2, #4
 8002a24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	69d9      	ldr	r1, [r3, #28]
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	691a      	ldr	r2, [r3, #16]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	430a      	orrs	r2, r1
 8002a36:	61da      	str	r2, [r3, #28]
      break;
 8002a38:	e023      	b.n	8002a82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	68b9      	ldr	r1, [r7, #8]
 8002a40:	4618      	mov	r0, r3
 8002a42:	f000 fae9 	bl	8003018 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	69da      	ldr	r2, [r3, #28]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	69da      	ldr	r2, [r3, #28]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	69d9      	ldr	r1, [r3, #28]
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	691b      	ldr	r3, [r3, #16]
 8002a70:	021a      	lsls	r2, r3, #8
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	430a      	orrs	r2, r1
 8002a78:	61da      	str	r2, [r3, #28]
      break;
 8002a7a:	e002      	b.n	8002a82 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	75fb      	strb	r3, [r7, #23]
      break;
 8002a80:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2200      	movs	r2, #0
 8002a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002a8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	3718      	adds	r7, #24
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}

08002a94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b084      	sub	sp, #16
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d101      	bne.n	8002ab0 <HAL_TIM_ConfigClockSource+0x1c>
 8002aac:	2302      	movs	r3, #2
 8002aae:	e0b4      	b.n	8002c1a <HAL_TIM_ConfigClockSource+0x186>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2202      	movs	r2, #2
 8002abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002ace:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ad6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	68ba      	ldr	r2, [r7, #8]
 8002ade:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ae8:	d03e      	beq.n	8002b68 <HAL_TIM_ConfigClockSource+0xd4>
 8002aea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002aee:	f200 8087 	bhi.w	8002c00 <HAL_TIM_ConfigClockSource+0x16c>
 8002af2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002af6:	f000 8086 	beq.w	8002c06 <HAL_TIM_ConfigClockSource+0x172>
 8002afa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002afe:	d87f      	bhi.n	8002c00 <HAL_TIM_ConfigClockSource+0x16c>
 8002b00:	2b70      	cmp	r3, #112	; 0x70
 8002b02:	d01a      	beq.n	8002b3a <HAL_TIM_ConfigClockSource+0xa6>
 8002b04:	2b70      	cmp	r3, #112	; 0x70
 8002b06:	d87b      	bhi.n	8002c00 <HAL_TIM_ConfigClockSource+0x16c>
 8002b08:	2b60      	cmp	r3, #96	; 0x60
 8002b0a:	d050      	beq.n	8002bae <HAL_TIM_ConfigClockSource+0x11a>
 8002b0c:	2b60      	cmp	r3, #96	; 0x60
 8002b0e:	d877      	bhi.n	8002c00 <HAL_TIM_ConfigClockSource+0x16c>
 8002b10:	2b50      	cmp	r3, #80	; 0x50
 8002b12:	d03c      	beq.n	8002b8e <HAL_TIM_ConfigClockSource+0xfa>
 8002b14:	2b50      	cmp	r3, #80	; 0x50
 8002b16:	d873      	bhi.n	8002c00 <HAL_TIM_ConfigClockSource+0x16c>
 8002b18:	2b40      	cmp	r3, #64	; 0x40
 8002b1a:	d058      	beq.n	8002bce <HAL_TIM_ConfigClockSource+0x13a>
 8002b1c:	2b40      	cmp	r3, #64	; 0x40
 8002b1e:	d86f      	bhi.n	8002c00 <HAL_TIM_ConfigClockSource+0x16c>
 8002b20:	2b30      	cmp	r3, #48	; 0x30
 8002b22:	d064      	beq.n	8002bee <HAL_TIM_ConfigClockSource+0x15a>
 8002b24:	2b30      	cmp	r3, #48	; 0x30
 8002b26:	d86b      	bhi.n	8002c00 <HAL_TIM_ConfigClockSource+0x16c>
 8002b28:	2b20      	cmp	r3, #32
 8002b2a:	d060      	beq.n	8002bee <HAL_TIM_ConfigClockSource+0x15a>
 8002b2c:	2b20      	cmp	r3, #32
 8002b2e:	d867      	bhi.n	8002c00 <HAL_TIM_ConfigClockSource+0x16c>
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d05c      	beq.n	8002bee <HAL_TIM_ConfigClockSource+0x15a>
 8002b34:	2b10      	cmp	r3, #16
 8002b36:	d05a      	beq.n	8002bee <HAL_TIM_ConfigClockSource+0x15a>
 8002b38:	e062      	b.n	8002c00 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6818      	ldr	r0, [r3, #0]
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	6899      	ldr	r1, [r3, #8]
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	685a      	ldr	r2, [r3, #4]
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	f000 fb35 	bl	80031b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002b5c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	68ba      	ldr	r2, [r7, #8]
 8002b64:	609a      	str	r2, [r3, #8]
      break;
 8002b66:	e04f      	b.n	8002c08 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6818      	ldr	r0, [r3, #0]
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	6899      	ldr	r1, [r3, #8]
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	685a      	ldr	r2, [r3, #4]
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	f000 fb1e 	bl	80031b8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	689a      	ldr	r2, [r3, #8]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b8a:	609a      	str	r2, [r3, #8]
      break;
 8002b8c:	e03c      	b.n	8002c08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6818      	ldr	r0, [r3, #0]
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	6859      	ldr	r1, [r3, #4]
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	f000 fa92 	bl	80030c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2150      	movs	r1, #80	; 0x50
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f000 faeb 	bl	8003182 <TIM_ITRx_SetConfig>
      break;
 8002bac:	e02c      	b.n	8002c08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6818      	ldr	r0, [r3, #0]
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	6859      	ldr	r1, [r3, #4]
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	461a      	mov	r2, r3
 8002bbc:	f000 fab1 	bl	8003122 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2160      	movs	r1, #96	; 0x60
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f000 fadb 	bl	8003182 <TIM_ITRx_SetConfig>
      break;
 8002bcc:	e01c      	b.n	8002c08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6818      	ldr	r0, [r3, #0]
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	6859      	ldr	r1, [r3, #4]
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	461a      	mov	r2, r3
 8002bdc:	f000 fa72 	bl	80030c4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2140      	movs	r1, #64	; 0x40
 8002be6:	4618      	mov	r0, r3
 8002be8:	f000 facb 	bl	8003182 <TIM_ITRx_SetConfig>
      break;
 8002bec:	e00c      	b.n	8002c08 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	4610      	mov	r0, r2
 8002bfa:	f000 fac2 	bl	8003182 <TIM_ITRx_SetConfig>
      break;
 8002bfe:	e003      	b.n	8002c08 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	73fb      	strb	r3, [r7, #15]
      break;
 8002c04:	e000      	b.n	8002c08 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002c06:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3710      	adds	r7, #16
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
	...

08002c24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b085      	sub	sp, #20
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	4a40      	ldr	r2, [pc, #256]	; (8002d38 <TIM_Base_SetConfig+0x114>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d013      	beq.n	8002c64 <TIM_Base_SetConfig+0x40>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c42:	d00f      	beq.n	8002c64 <TIM_Base_SetConfig+0x40>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	4a3d      	ldr	r2, [pc, #244]	; (8002d3c <TIM_Base_SetConfig+0x118>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d00b      	beq.n	8002c64 <TIM_Base_SetConfig+0x40>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	4a3c      	ldr	r2, [pc, #240]	; (8002d40 <TIM_Base_SetConfig+0x11c>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d007      	beq.n	8002c64 <TIM_Base_SetConfig+0x40>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	4a3b      	ldr	r2, [pc, #236]	; (8002d44 <TIM_Base_SetConfig+0x120>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d003      	beq.n	8002c64 <TIM_Base_SetConfig+0x40>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	4a3a      	ldr	r2, [pc, #232]	; (8002d48 <TIM_Base_SetConfig+0x124>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d108      	bne.n	8002c76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	68fa      	ldr	r2, [r7, #12]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a2f      	ldr	r2, [pc, #188]	; (8002d38 <TIM_Base_SetConfig+0x114>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d02b      	beq.n	8002cd6 <TIM_Base_SetConfig+0xb2>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c84:	d027      	beq.n	8002cd6 <TIM_Base_SetConfig+0xb2>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a2c      	ldr	r2, [pc, #176]	; (8002d3c <TIM_Base_SetConfig+0x118>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d023      	beq.n	8002cd6 <TIM_Base_SetConfig+0xb2>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a2b      	ldr	r2, [pc, #172]	; (8002d40 <TIM_Base_SetConfig+0x11c>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d01f      	beq.n	8002cd6 <TIM_Base_SetConfig+0xb2>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a2a      	ldr	r2, [pc, #168]	; (8002d44 <TIM_Base_SetConfig+0x120>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d01b      	beq.n	8002cd6 <TIM_Base_SetConfig+0xb2>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a29      	ldr	r2, [pc, #164]	; (8002d48 <TIM_Base_SetConfig+0x124>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d017      	beq.n	8002cd6 <TIM_Base_SetConfig+0xb2>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a28      	ldr	r2, [pc, #160]	; (8002d4c <TIM_Base_SetConfig+0x128>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d013      	beq.n	8002cd6 <TIM_Base_SetConfig+0xb2>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a27      	ldr	r2, [pc, #156]	; (8002d50 <TIM_Base_SetConfig+0x12c>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d00f      	beq.n	8002cd6 <TIM_Base_SetConfig+0xb2>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4a26      	ldr	r2, [pc, #152]	; (8002d54 <TIM_Base_SetConfig+0x130>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d00b      	beq.n	8002cd6 <TIM_Base_SetConfig+0xb2>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a25      	ldr	r2, [pc, #148]	; (8002d58 <TIM_Base_SetConfig+0x134>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d007      	beq.n	8002cd6 <TIM_Base_SetConfig+0xb2>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a24      	ldr	r2, [pc, #144]	; (8002d5c <TIM_Base_SetConfig+0x138>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d003      	beq.n	8002cd6 <TIM_Base_SetConfig+0xb2>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a23      	ldr	r2, [pc, #140]	; (8002d60 <TIM_Base_SetConfig+0x13c>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d108      	bne.n	8002ce8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	68fa      	ldr	r2, [r7, #12]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	695b      	ldr	r3, [r3, #20]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	68fa      	ldr	r2, [r7, #12]
 8002cfa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	689a      	ldr	r2, [r3, #8]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	4a0a      	ldr	r2, [pc, #40]	; (8002d38 <TIM_Base_SetConfig+0x114>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d003      	beq.n	8002d1c <TIM_Base_SetConfig+0xf8>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	4a0c      	ldr	r2, [pc, #48]	; (8002d48 <TIM_Base_SetConfig+0x124>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d103      	bne.n	8002d24 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	691a      	ldr	r2, [r3, #16]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2201      	movs	r2, #1
 8002d28:	615a      	str	r2, [r3, #20]
}
 8002d2a:	bf00      	nop
 8002d2c:	3714      	adds	r7, #20
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr
 8002d36:	bf00      	nop
 8002d38:	40010000 	.word	0x40010000
 8002d3c:	40000400 	.word	0x40000400
 8002d40:	40000800 	.word	0x40000800
 8002d44:	40000c00 	.word	0x40000c00
 8002d48:	40010400 	.word	0x40010400
 8002d4c:	40014000 	.word	0x40014000
 8002d50:	40014400 	.word	0x40014400
 8002d54:	40014800 	.word	0x40014800
 8002d58:	40001800 	.word	0x40001800
 8002d5c:	40001c00 	.word	0x40001c00
 8002d60:	40002000 	.word	0x40002000

08002d64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b087      	sub	sp, #28
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6a1b      	ldr	r3, [r3, #32]
 8002d72:	f023 0201 	bic.w	r2, r3, #1
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a1b      	ldr	r3, [r3, #32]
 8002d7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	699b      	ldr	r3, [r3, #24]
 8002d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f023 0303 	bic.w	r3, r3, #3
 8002d9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	68fa      	ldr	r2, [r7, #12]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	f023 0302 	bic.w	r3, r3, #2
 8002dac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	697a      	ldr	r2, [r7, #20]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	4a20      	ldr	r2, [pc, #128]	; (8002e3c <TIM_OC1_SetConfig+0xd8>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d003      	beq.n	8002dc8 <TIM_OC1_SetConfig+0x64>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	4a1f      	ldr	r2, [pc, #124]	; (8002e40 <TIM_OC1_SetConfig+0xdc>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d10c      	bne.n	8002de2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002dc8:	697b      	ldr	r3, [r7, #20]
 8002dca:	f023 0308 	bic.w	r3, r3, #8
 8002dce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	697a      	ldr	r2, [r7, #20]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	f023 0304 	bic.w	r3, r3, #4
 8002de0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4a15      	ldr	r2, [pc, #84]	; (8002e3c <TIM_OC1_SetConfig+0xd8>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d003      	beq.n	8002df2 <TIM_OC1_SetConfig+0x8e>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4a14      	ldr	r2, [pc, #80]	; (8002e40 <TIM_OC1_SetConfig+0xdc>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d111      	bne.n	8002e16 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002df8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002e00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	695b      	ldr	r3, [r3, #20]
 8002e06:	693a      	ldr	r2, [r7, #16]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	699b      	ldr	r3, [r3, #24]
 8002e10:	693a      	ldr	r2, [r7, #16]
 8002e12:	4313      	orrs	r3, r2
 8002e14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	693a      	ldr	r2, [r7, #16]
 8002e1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	68fa      	ldr	r2, [r7, #12]
 8002e20:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	685a      	ldr	r2, [r3, #4]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	697a      	ldr	r2, [r7, #20]
 8002e2e:	621a      	str	r2, [r3, #32]
}
 8002e30:	bf00      	nop
 8002e32:	371c      	adds	r7, #28
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr
 8002e3c:	40010000 	.word	0x40010000
 8002e40:	40010400 	.word	0x40010400

08002e44 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b087      	sub	sp, #28
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a1b      	ldr	r3, [r3, #32]
 8002e52:	f023 0210 	bic.w	r2, r3, #16
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6a1b      	ldr	r3, [r3, #32]
 8002e5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	699b      	ldr	r3, [r3, #24]
 8002e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	021b      	lsls	r3, r3, #8
 8002e82:	68fa      	ldr	r2, [r7, #12]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	f023 0320 	bic.w	r3, r3, #32
 8002e8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	011b      	lsls	r3, r3, #4
 8002e96:	697a      	ldr	r2, [r7, #20]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	4a22      	ldr	r2, [pc, #136]	; (8002f28 <TIM_OC2_SetConfig+0xe4>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d003      	beq.n	8002eac <TIM_OC2_SetConfig+0x68>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	4a21      	ldr	r2, [pc, #132]	; (8002f2c <TIM_OC2_SetConfig+0xe8>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d10d      	bne.n	8002ec8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002eb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	011b      	lsls	r3, r3, #4
 8002eba:	697a      	ldr	r2, [r7, #20]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ec6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	4a17      	ldr	r2, [pc, #92]	; (8002f28 <TIM_OC2_SetConfig+0xe4>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d003      	beq.n	8002ed8 <TIM_OC2_SetConfig+0x94>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	4a16      	ldr	r2, [pc, #88]	; (8002f2c <TIM_OC2_SetConfig+0xe8>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d113      	bne.n	8002f00 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ede:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002ee6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	695b      	ldr	r3, [r3, #20]
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	693a      	ldr	r2, [r7, #16]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	699b      	ldr	r3, [r3, #24]
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	693a      	ldr	r2, [r7, #16]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	693a      	ldr	r2, [r7, #16]
 8002f04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	68fa      	ldr	r2, [r7, #12]
 8002f0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	685a      	ldr	r2, [r3, #4]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	697a      	ldr	r2, [r7, #20]
 8002f18:	621a      	str	r2, [r3, #32]
}
 8002f1a:	bf00      	nop
 8002f1c:	371c      	adds	r7, #28
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	40010000 	.word	0x40010000
 8002f2c:	40010400 	.word	0x40010400

08002f30 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b087      	sub	sp, #28
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6a1b      	ldr	r3, [r3, #32]
 8002f3e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a1b      	ldr	r3, [r3, #32]
 8002f4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	69db      	ldr	r3, [r3, #28]
 8002f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f023 0303 	bic.w	r3, r3, #3
 8002f66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	68fa      	ldr	r2, [r7, #12]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002f78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	021b      	lsls	r3, r3, #8
 8002f80:	697a      	ldr	r2, [r7, #20]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a21      	ldr	r2, [pc, #132]	; (8003010 <TIM_OC3_SetConfig+0xe0>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d003      	beq.n	8002f96 <TIM_OC3_SetConfig+0x66>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a20      	ldr	r2, [pc, #128]	; (8003014 <TIM_OC3_SetConfig+0xe4>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d10d      	bne.n	8002fb2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002f9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	021b      	lsls	r3, r3, #8
 8002fa4:	697a      	ldr	r2, [r7, #20]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002fb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a16      	ldr	r2, [pc, #88]	; (8003010 <TIM_OC3_SetConfig+0xe0>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d003      	beq.n	8002fc2 <TIM_OC3_SetConfig+0x92>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a15      	ldr	r2, [pc, #84]	; (8003014 <TIM_OC3_SetConfig+0xe4>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d113      	bne.n	8002fea <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002fc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002fd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	695b      	ldr	r3, [r3, #20]
 8002fd6:	011b      	lsls	r3, r3, #4
 8002fd8:	693a      	ldr	r2, [r7, #16]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	699b      	ldr	r3, [r3, #24]
 8002fe2:	011b      	lsls	r3, r3, #4
 8002fe4:	693a      	ldr	r2, [r7, #16]
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	693a      	ldr	r2, [r7, #16]
 8002fee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	68fa      	ldr	r2, [r7, #12]
 8002ff4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	685a      	ldr	r2, [r3, #4]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	697a      	ldr	r2, [r7, #20]
 8003002:	621a      	str	r2, [r3, #32]
}
 8003004:	bf00      	nop
 8003006:	371c      	adds	r7, #28
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr
 8003010:	40010000 	.word	0x40010000
 8003014:	40010400 	.word	0x40010400

08003018 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003018:	b480      	push	{r7}
 800301a:	b087      	sub	sp, #28
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6a1b      	ldr	r3, [r3, #32]
 8003026:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6a1b      	ldr	r3, [r3, #32]
 8003032:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	69db      	ldr	r3, [r3, #28]
 800303e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003046:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800304e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	021b      	lsls	r3, r3, #8
 8003056:	68fa      	ldr	r2, [r7, #12]
 8003058:	4313      	orrs	r3, r2
 800305a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003062:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	031b      	lsls	r3, r3, #12
 800306a:	693a      	ldr	r2, [r7, #16]
 800306c:	4313      	orrs	r3, r2
 800306e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	4a12      	ldr	r2, [pc, #72]	; (80030bc <TIM_OC4_SetConfig+0xa4>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d003      	beq.n	8003080 <TIM_OC4_SetConfig+0x68>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	4a11      	ldr	r2, [pc, #68]	; (80030c0 <TIM_OC4_SetConfig+0xa8>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d109      	bne.n	8003094 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003086:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	695b      	ldr	r3, [r3, #20]
 800308c:	019b      	lsls	r3, r3, #6
 800308e:	697a      	ldr	r2, [r7, #20]
 8003090:	4313      	orrs	r3, r2
 8003092:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	697a      	ldr	r2, [r7, #20]
 8003098:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	68fa      	ldr	r2, [r7, #12]
 800309e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	685a      	ldr	r2, [r3, #4]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	693a      	ldr	r2, [r7, #16]
 80030ac:	621a      	str	r2, [r3, #32]
}
 80030ae:	bf00      	nop
 80030b0:	371c      	adds	r7, #28
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	40010000 	.word	0x40010000
 80030c0:	40010400 	.word	0x40010400

080030c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b087      	sub	sp, #28
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	60f8      	str	r0, [r7, #12]
 80030cc:	60b9      	str	r1, [r7, #8]
 80030ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6a1b      	ldr	r3, [r3, #32]
 80030d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	6a1b      	ldr	r3, [r3, #32]
 80030da:	f023 0201 	bic.w	r2, r3, #1
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	699b      	ldr	r3, [r3, #24]
 80030e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80030ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	011b      	lsls	r3, r3, #4
 80030f4:	693a      	ldr	r2, [r7, #16]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	f023 030a 	bic.w	r3, r3, #10
 8003100:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003102:	697a      	ldr	r2, [r7, #20]
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	4313      	orrs	r3, r2
 8003108:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	693a      	ldr	r2, [r7, #16]
 800310e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	697a      	ldr	r2, [r7, #20]
 8003114:	621a      	str	r2, [r3, #32]
}
 8003116:	bf00      	nop
 8003118:	371c      	adds	r7, #28
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr

08003122 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003122:	b480      	push	{r7}
 8003124:	b087      	sub	sp, #28
 8003126:	af00      	add	r7, sp, #0
 8003128:	60f8      	str	r0, [r7, #12]
 800312a:	60b9      	str	r1, [r7, #8]
 800312c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6a1b      	ldr	r3, [r3, #32]
 8003132:	f023 0210 	bic.w	r2, r3, #16
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	699b      	ldr	r3, [r3, #24]
 800313e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	6a1b      	ldr	r3, [r3, #32]
 8003144:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800314c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	031b      	lsls	r3, r3, #12
 8003152:	697a      	ldr	r2, [r7, #20]
 8003154:	4313      	orrs	r3, r2
 8003156:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800315e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	011b      	lsls	r3, r3, #4
 8003164:	693a      	ldr	r2, [r7, #16]
 8003166:	4313      	orrs	r3, r2
 8003168:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	697a      	ldr	r2, [r7, #20]
 800316e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	693a      	ldr	r2, [r7, #16]
 8003174:	621a      	str	r2, [r3, #32]
}
 8003176:	bf00      	nop
 8003178:	371c      	adds	r7, #28
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr

08003182 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003182:	b480      	push	{r7}
 8003184:	b085      	sub	sp, #20
 8003186:	af00      	add	r7, sp, #0
 8003188:	6078      	str	r0, [r7, #4]
 800318a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003198:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800319a:	683a      	ldr	r2, [r7, #0]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	4313      	orrs	r3, r2
 80031a0:	f043 0307 	orr.w	r3, r3, #7
 80031a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	68fa      	ldr	r2, [r7, #12]
 80031aa:	609a      	str	r2, [r3, #8]
}
 80031ac:	bf00      	nop
 80031ae:	3714      	adds	r7, #20
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr

080031b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b087      	sub	sp, #28
 80031bc:	af00      	add	r7, sp, #0
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	60b9      	str	r1, [r7, #8]
 80031c2:	607a      	str	r2, [r7, #4]
 80031c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80031d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	021a      	lsls	r2, r3, #8
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	431a      	orrs	r2, r3
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	4313      	orrs	r3, r2
 80031e0:	697a      	ldr	r2, [r7, #20]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	697a      	ldr	r2, [r7, #20]
 80031ea:	609a      	str	r2, [r3, #8]
}
 80031ec:	bf00      	nop
 80031ee:	371c      	adds	r7, #28
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr

080031f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b087      	sub	sp, #28
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	f003 031f 	and.w	r3, r3, #31
 800320a:	2201      	movs	r2, #1
 800320c:	fa02 f303 	lsl.w	r3, r2, r3
 8003210:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6a1a      	ldr	r2, [r3, #32]
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	43db      	mvns	r3, r3
 800321a:	401a      	ands	r2, r3
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6a1a      	ldr	r2, [r3, #32]
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	f003 031f 	and.w	r3, r3, #31
 800322a:	6879      	ldr	r1, [r7, #4]
 800322c:	fa01 f303 	lsl.w	r3, r1, r3
 8003230:	431a      	orrs	r2, r3
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	621a      	str	r2, [r3, #32]
}
 8003236:	bf00      	nop
 8003238:	371c      	adds	r7, #28
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr
	...

08003244 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003244:	b480      	push	{r7}
 8003246:	b085      	sub	sp, #20
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003254:	2b01      	cmp	r3, #1
 8003256:	d101      	bne.n	800325c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003258:	2302      	movs	r3, #2
 800325a:	e05a      	b.n	8003312 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2202      	movs	r2, #2
 8003268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003282:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	68fa      	ldr	r2, [r7, #12]
 800328a:	4313      	orrs	r3, r2
 800328c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	68fa      	ldr	r2, [r7, #12]
 8003294:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a21      	ldr	r2, [pc, #132]	; (8003320 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d022      	beq.n	80032e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032a8:	d01d      	beq.n	80032e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a1d      	ldr	r2, [pc, #116]	; (8003324 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d018      	beq.n	80032e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a1b      	ldr	r2, [pc, #108]	; (8003328 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d013      	beq.n	80032e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a1a      	ldr	r2, [pc, #104]	; (800332c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d00e      	beq.n	80032e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a18      	ldr	r2, [pc, #96]	; (8003330 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d009      	beq.n	80032e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a17      	ldr	r2, [pc, #92]	; (8003334 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d004      	beq.n	80032e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a15      	ldr	r2, [pc, #84]	; (8003338 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d10c      	bne.n	8003300 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	68ba      	ldr	r2, [r7, #8]
 80032f4:	4313      	orrs	r3, r2
 80032f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	68ba      	ldr	r2, [r7, #8]
 80032fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003310:	2300      	movs	r3, #0
}
 8003312:	4618      	mov	r0, r3
 8003314:	3714      	adds	r7, #20
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	40010000 	.word	0x40010000
 8003324:	40000400 	.word	0x40000400
 8003328:	40000800 	.word	0x40000800
 800332c:	40000c00 	.word	0x40000c00
 8003330:	40010400 	.word	0x40010400
 8003334:	40014000 	.word	0x40014000
 8003338:	40001800 	.word	0x40001800

0800333c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800333c:	b480      	push	{r7}
 800333e:	b085      	sub	sp, #20
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003346:	2300      	movs	r3, #0
 8003348:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003350:	2b01      	cmp	r3, #1
 8003352:	d101      	bne.n	8003358 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003354:	2302      	movs	r3, #2
 8003356:	e03d      	b.n	80033d4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	4313      	orrs	r3, r2
 800336c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	4313      	orrs	r3, r2
 800337a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	4313      	orrs	r3, r2
 8003388:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4313      	orrs	r3, r2
 8003396:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	691b      	ldr	r3, [r3, #16]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	695b      	ldr	r3, [r3, #20]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	69db      	ldr	r3, [r3, #28]
 80033be:	4313      	orrs	r3, r2
 80033c0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	68fa      	ldr	r2, [r7, #12]
 80033c8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033d2:	2300      	movs	r3, #0
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3714      	adds	r7, #20
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr

080033e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b082      	sub	sp, #8
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d101      	bne.n	80033f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e03f      	b.n	8003472 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d106      	bne.n	800340c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f7fd ff02 	bl	8001210 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2224      	movs	r2, #36	; 0x24
 8003410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	68da      	ldr	r2, [r3, #12]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003422:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f000 fcdb 	bl	8003de0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	691a      	ldr	r2, [r3, #16]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003438:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	695a      	ldr	r2, [r3, #20]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003448:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	68da      	ldr	r2, [r3, #12]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003458:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2220      	movs	r2, #32
 8003464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2220      	movs	r2, #32
 800346c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003470:	2300      	movs	r3, #0
}
 8003472:	4618      	mov	r0, r3
 8003474:	3708      	adds	r7, #8
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}

0800347a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800347a:	b580      	push	{r7, lr}
 800347c:	b084      	sub	sp, #16
 800347e:	af00      	add	r7, sp, #0
 8003480:	60f8      	str	r0, [r7, #12]
 8003482:	60b9      	str	r1, [r7, #8]
 8003484:	4613      	mov	r3, r2
 8003486:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800348e:	b2db      	uxtb	r3, r3
 8003490:	2b20      	cmp	r3, #32
 8003492:	d11d      	bne.n	80034d0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d002      	beq.n	80034a0 <HAL_UART_Receive_IT+0x26>
 800349a:	88fb      	ldrh	r3, [r7, #6]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d101      	bne.n	80034a4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e016      	b.n	80034d2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d101      	bne.n	80034b2 <HAL_UART_Receive_IT+0x38>
 80034ae:	2302      	movs	r3, #2
 80034b0:	e00f      	b.n	80034d2 <HAL_UART_Receive_IT+0x58>
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2201      	movs	r2, #1
 80034b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2200      	movs	r2, #0
 80034be:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80034c0:	88fb      	ldrh	r3, [r7, #6]
 80034c2:	461a      	mov	r2, r3
 80034c4:	68b9      	ldr	r1, [r7, #8]
 80034c6:	68f8      	ldr	r0, [r7, #12]
 80034c8:	f000 fab6 	bl	8003a38 <UART_Start_Receive_IT>
 80034cc:	4603      	mov	r3, r0
 80034ce:	e000      	b.n	80034d2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80034d0:	2302      	movs	r3, #2
  }
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3710      	adds	r7, #16
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
	...

080034dc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b0ba      	sub	sp, #232	; 0xe8
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	695b      	ldr	r3, [r3, #20]
 80034fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003502:	2300      	movs	r3, #0
 8003504:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003508:	2300      	movs	r3, #0
 800350a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800350e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003512:	f003 030f 	and.w	r3, r3, #15
 8003516:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800351a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800351e:	2b00      	cmp	r3, #0
 8003520:	d10f      	bne.n	8003542 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003522:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003526:	f003 0320 	and.w	r3, r3, #32
 800352a:	2b00      	cmp	r3, #0
 800352c:	d009      	beq.n	8003542 <HAL_UART_IRQHandler+0x66>
 800352e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003532:	f003 0320 	and.w	r3, r3, #32
 8003536:	2b00      	cmp	r3, #0
 8003538:	d003      	beq.n	8003542 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f000 fb95 	bl	8003c6a <UART_Receive_IT>
      return;
 8003540:	e256      	b.n	80039f0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003542:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003546:	2b00      	cmp	r3, #0
 8003548:	f000 80de 	beq.w	8003708 <HAL_UART_IRQHandler+0x22c>
 800354c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003550:	f003 0301 	and.w	r3, r3, #1
 8003554:	2b00      	cmp	r3, #0
 8003556:	d106      	bne.n	8003566 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003558:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800355c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003560:	2b00      	cmp	r3, #0
 8003562:	f000 80d1 	beq.w	8003708 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003566:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800356a:	f003 0301 	and.w	r3, r3, #1
 800356e:	2b00      	cmp	r3, #0
 8003570:	d00b      	beq.n	800358a <HAL_UART_IRQHandler+0xae>
 8003572:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800357a:	2b00      	cmp	r3, #0
 800357c:	d005      	beq.n	800358a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003582:	f043 0201 	orr.w	r2, r3, #1
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800358a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800358e:	f003 0304 	and.w	r3, r3, #4
 8003592:	2b00      	cmp	r3, #0
 8003594:	d00b      	beq.n	80035ae <HAL_UART_IRQHandler+0xd2>
 8003596:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800359a:	f003 0301 	and.w	r3, r3, #1
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d005      	beq.n	80035ae <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a6:	f043 0202 	orr.w	r2, r3, #2
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80035ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035b2:	f003 0302 	and.w	r3, r3, #2
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d00b      	beq.n	80035d2 <HAL_UART_IRQHandler+0xf6>
 80035ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035be:	f003 0301 	and.w	r3, r3, #1
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d005      	beq.n	80035d2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ca:	f043 0204 	orr.w	r2, r3, #4
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80035d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035d6:	f003 0308 	and.w	r3, r3, #8
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d011      	beq.n	8003602 <HAL_UART_IRQHandler+0x126>
 80035de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035e2:	f003 0320 	and.w	r3, r3, #32
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d105      	bne.n	80035f6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80035ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035ee:	f003 0301 	and.w	r3, r3, #1
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d005      	beq.n	8003602 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fa:	f043 0208 	orr.w	r2, r3, #8
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003606:	2b00      	cmp	r3, #0
 8003608:	f000 81ed 	beq.w	80039e6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800360c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003610:	f003 0320 	and.w	r3, r3, #32
 8003614:	2b00      	cmp	r3, #0
 8003616:	d008      	beq.n	800362a <HAL_UART_IRQHandler+0x14e>
 8003618:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800361c:	f003 0320 	and.w	r3, r3, #32
 8003620:	2b00      	cmp	r3, #0
 8003622:	d002      	beq.n	800362a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f000 fb20 	bl	8003c6a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	695b      	ldr	r3, [r3, #20]
 8003630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003634:	2b40      	cmp	r3, #64	; 0x40
 8003636:	bf0c      	ite	eq
 8003638:	2301      	moveq	r3, #1
 800363a:	2300      	movne	r3, #0
 800363c:	b2db      	uxtb	r3, r3
 800363e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003646:	f003 0308 	and.w	r3, r3, #8
 800364a:	2b00      	cmp	r3, #0
 800364c:	d103      	bne.n	8003656 <HAL_UART_IRQHandler+0x17a>
 800364e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003652:	2b00      	cmp	r3, #0
 8003654:	d04f      	beq.n	80036f6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f000 fa28 	bl	8003aac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	695b      	ldr	r3, [r3, #20]
 8003662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003666:	2b40      	cmp	r3, #64	; 0x40
 8003668:	d141      	bne.n	80036ee <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	3314      	adds	r3, #20
 8003670:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003674:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003678:	e853 3f00 	ldrex	r3, [r3]
 800367c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003680:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003684:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003688:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	3314      	adds	r3, #20
 8003692:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003696:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800369a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800369e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80036a2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80036a6:	e841 2300 	strex	r3, r2, [r1]
 80036aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80036ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d1d9      	bne.n	800366a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d013      	beq.n	80036e6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c2:	4a7d      	ldr	r2, [pc, #500]	; (80038b8 <HAL_UART_IRQHandler+0x3dc>)
 80036c4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ca:	4618      	mov	r0, r3
 80036cc:	f7fe f8a7 	bl	800181e <HAL_DMA_Abort_IT>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d016      	beq.n	8003704 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80036e0:	4610      	mov	r0, r2
 80036e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036e4:	e00e      	b.n	8003704 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f000 f990 	bl	8003a0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036ec:	e00a      	b.n	8003704 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f000 f98c 	bl	8003a0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036f4:	e006      	b.n	8003704 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f000 f988 	bl	8003a0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003702:	e170      	b.n	80039e6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003704:	bf00      	nop
    return;
 8003706:	e16e      	b.n	80039e6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370c:	2b01      	cmp	r3, #1
 800370e:	f040 814a 	bne.w	80039a6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003712:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003716:	f003 0310 	and.w	r3, r3, #16
 800371a:	2b00      	cmp	r3, #0
 800371c:	f000 8143 	beq.w	80039a6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003720:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003724:	f003 0310 	and.w	r3, r3, #16
 8003728:	2b00      	cmp	r3, #0
 800372a:	f000 813c 	beq.w	80039a6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800372e:	2300      	movs	r3, #0
 8003730:	60bb      	str	r3, [r7, #8]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	60bb      	str	r3, [r7, #8]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	60bb      	str	r3, [r7, #8]
 8003742:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	695b      	ldr	r3, [r3, #20]
 800374a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800374e:	2b40      	cmp	r3, #64	; 0x40
 8003750:	f040 80b4 	bne.w	80038bc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003760:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003764:	2b00      	cmp	r3, #0
 8003766:	f000 8140 	beq.w	80039ea <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800376e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003772:	429a      	cmp	r2, r3
 8003774:	f080 8139 	bcs.w	80039ea <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800377e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003784:	69db      	ldr	r3, [r3, #28]
 8003786:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800378a:	f000 8088 	beq.w	800389e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	330c      	adds	r3, #12
 8003794:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003798:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800379c:	e853 3f00 	ldrex	r3, [r3]
 80037a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80037a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80037a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	330c      	adds	r3, #12
 80037b6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80037ba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80037be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037c2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80037c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80037ca:	e841 2300 	strex	r3, r2, [r1]
 80037ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80037d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d1d9      	bne.n	800378e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	3314      	adds	r3, #20
 80037e0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037e4:	e853 3f00 	ldrex	r3, [r3]
 80037e8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80037ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037ec:	f023 0301 	bic.w	r3, r3, #1
 80037f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	3314      	adds	r3, #20
 80037fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80037fe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003802:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003804:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003806:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800380a:	e841 2300 	strex	r3, r2, [r1]
 800380e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003810:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003812:	2b00      	cmp	r3, #0
 8003814:	d1e1      	bne.n	80037da <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	3314      	adds	r3, #20
 800381c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800381e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003820:	e853 3f00 	ldrex	r3, [r3]
 8003824:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003826:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003828:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800382c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	3314      	adds	r3, #20
 8003836:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800383a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800383c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800383e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003840:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003842:	e841 2300 	strex	r3, r2, [r1]
 8003846:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003848:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800384a:	2b00      	cmp	r3, #0
 800384c:	d1e3      	bne.n	8003816 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2220      	movs	r2, #32
 8003852:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	330c      	adds	r3, #12
 8003862:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003864:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003866:	e853 3f00 	ldrex	r3, [r3]
 800386a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800386c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800386e:	f023 0310 	bic.w	r3, r3, #16
 8003872:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	330c      	adds	r3, #12
 800387c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003880:	65ba      	str	r2, [r7, #88]	; 0x58
 8003882:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003884:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003886:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003888:	e841 2300 	strex	r3, r2, [r1]
 800388c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800388e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003890:	2b00      	cmp	r3, #0
 8003892:	d1e3      	bne.n	800385c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003898:	4618      	mov	r0, r3
 800389a:	f7fd ff50 	bl	800173e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	4619      	mov	r1, r3
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f000 f8b6 	bl	8003a20 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80038b4:	e099      	b.n	80039ea <HAL_UART_IRQHandler+0x50e>
 80038b6:	bf00      	nop
 80038b8:	08003b73 	.word	0x08003b73
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	1ad3      	subs	r3, r2, r3
 80038c8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	f000 808b 	beq.w	80039ee <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80038d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80038dc:	2b00      	cmp	r3, #0
 80038de:	f000 8086 	beq.w	80039ee <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	330c      	adds	r3, #12
 80038e8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038ec:	e853 3f00 	ldrex	r3, [r3]
 80038f0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80038f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80038f8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	330c      	adds	r3, #12
 8003902:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003906:	647a      	str	r2, [r7, #68]	; 0x44
 8003908:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800390a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800390c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800390e:	e841 2300 	strex	r3, r2, [r1]
 8003912:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003914:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003916:	2b00      	cmp	r3, #0
 8003918:	d1e3      	bne.n	80038e2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	3314      	adds	r3, #20
 8003920:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003924:	e853 3f00 	ldrex	r3, [r3]
 8003928:	623b      	str	r3, [r7, #32]
   return(result);
 800392a:	6a3b      	ldr	r3, [r7, #32]
 800392c:	f023 0301 	bic.w	r3, r3, #1
 8003930:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	3314      	adds	r3, #20
 800393a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800393e:	633a      	str	r2, [r7, #48]	; 0x30
 8003940:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003942:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003944:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003946:	e841 2300 	strex	r3, r2, [r1]
 800394a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800394c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800394e:	2b00      	cmp	r3, #0
 8003950:	d1e3      	bne.n	800391a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2220      	movs	r2, #32
 8003956:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	330c      	adds	r3, #12
 8003966:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	e853 3f00 	ldrex	r3, [r3]
 800396e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f023 0310 	bic.w	r3, r3, #16
 8003976:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	330c      	adds	r3, #12
 8003980:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003984:	61fa      	str	r2, [r7, #28]
 8003986:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003988:	69b9      	ldr	r1, [r7, #24]
 800398a:	69fa      	ldr	r2, [r7, #28]
 800398c:	e841 2300 	strex	r3, r2, [r1]
 8003990:	617b      	str	r3, [r7, #20]
   return(result);
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d1e3      	bne.n	8003960 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003998:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800399c:	4619      	mov	r1, r3
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f000 f83e 	bl	8003a20 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80039a4:	e023      	b.n	80039ee <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80039a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d009      	beq.n	80039c6 <HAL_UART_IRQHandler+0x4ea>
 80039b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d003      	beq.n	80039c6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f000 f8eb 	bl	8003b9a <UART_Transmit_IT>
    return;
 80039c4:	e014      	b.n	80039f0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80039c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d00e      	beq.n	80039f0 <HAL_UART_IRQHandler+0x514>
 80039d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d008      	beq.n	80039f0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f000 f92b 	bl	8003c3a <UART_EndTransmit_IT>
    return;
 80039e4:	e004      	b.n	80039f0 <HAL_UART_IRQHandler+0x514>
    return;
 80039e6:	bf00      	nop
 80039e8:	e002      	b.n	80039f0 <HAL_UART_IRQHandler+0x514>
      return;
 80039ea:	bf00      	nop
 80039ec:	e000      	b.n	80039f0 <HAL_UART_IRQHandler+0x514>
      return;
 80039ee:	bf00      	nop
  }
}
 80039f0:	37e8      	adds	r7, #232	; 0xe8
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop

080039f8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003a00:	bf00      	nop
 8003a02:	370c      	adds	r7, #12
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003a14:	bf00      	nop
 8003a16:	370c      	adds	r7, #12
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr

08003a20 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b083      	sub	sp, #12
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	460b      	mov	r3, r1
 8003a2a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003a2c:	bf00      	nop
 8003a2e:	370c      	adds	r7, #12
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr

08003a38 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b085      	sub	sp, #20
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	60f8      	str	r0, [r7, #12]
 8003a40:	60b9      	str	r1, [r7, #8]
 8003a42:	4613      	mov	r3, r2
 8003a44:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	68ba      	ldr	r2, [r7, #8]
 8003a4a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	88fa      	ldrh	r2, [r7, #6]
 8003a50:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	88fa      	ldrh	r2, [r7, #6]
 8003a56:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2222      	movs	r2, #34	; 0x22
 8003a62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	68da      	ldr	r2, [r3, #12]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a7c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	695a      	ldr	r2, [r3, #20]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f042 0201 	orr.w	r2, r2, #1
 8003a8c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	68da      	ldr	r2, [r3, #12]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f042 0220 	orr.w	r2, r2, #32
 8003a9c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003a9e:	2300      	movs	r3, #0
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3714      	adds	r7, #20
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr

08003aac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b095      	sub	sp, #84	; 0x54
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	330c      	adds	r3, #12
 8003aba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003abc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003abe:	e853 3f00 	ldrex	r3, [r3]
 8003ac2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003aca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	330c      	adds	r3, #12
 8003ad2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ad4:	643a      	str	r2, [r7, #64]	; 0x40
 8003ad6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ad8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003ada:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003adc:	e841 2300 	strex	r3, r2, [r1]
 8003ae0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d1e5      	bne.n	8003ab4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	3314      	adds	r3, #20
 8003aee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003af0:	6a3b      	ldr	r3, [r7, #32]
 8003af2:	e853 3f00 	ldrex	r3, [r3]
 8003af6:	61fb      	str	r3, [r7, #28]
   return(result);
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	f023 0301 	bic.w	r3, r3, #1
 8003afe:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	3314      	adds	r3, #20
 8003b06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b08:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b10:	e841 2300 	strex	r3, r2, [r1]
 8003b14:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d1e5      	bne.n	8003ae8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d119      	bne.n	8003b58 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	330c      	adds	r3, #12
 8003b2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	e853 3f00 	ldrex	r3, [r3]
 8003b32:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	f023 0310 	bic.w	r3, r3, #16
 8003b3a:	647b      	str	r3, [r7, #68]	; 0x44
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	330c      	adds	r3, #12
 8003b42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003b44:	61ba      	str	r2, [r7, #24]
 8003b46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b48:	6979      	ldr	r1, [r7, #20]
 8003b4a:	69ba      	ldr	r2, [r7, #24]
 8003b4c:	e841 2300 	strex	r3, r2, [r1]
 8003b50:	613b      	str	r3, [r7, #16]
   return(result);
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d1e5      	bne.n	8003b24 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2220      	movs	r2, #32
 8003b5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003b66:	bf00      	nop
 8003b68:	3754      	adds	r7, #84	; 0x54
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr

08003b72 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b72:	b580      	push	{r7, lr}
 8003b74:	b084      	sub	sp, #16
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b7e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2200      	movs	r2, #0
 8003b84:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b8c:	68f8      	ldr	r0, [r7, #12]
 8003b8e:	f7ff ff3d 	bl	8003a0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b92:	bf00      	nop
 8003b94:	3710      	adds	r7, #16
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}

08003b9a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003b9a:	b480      	push	{r7}
 8003b9c:	b085      	sub	sp, #20
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	2b21      	cmp	r3, #33	; 0x21
 8003bac:	d13e      	bne.n	8003c2c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bb6:	d114      	bne.n	8003be2 <UART_Transmit_IT+0x48>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	691b      	ldr	r3, [r3, #16]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d110      	bne.n	8003be2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6a1b      	ldr	r3, [r3, #32]
 8003bc4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	881b      	ldrh	r3, [r3, #0]
 8003bca:	461a      	mov	r2, r3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bd4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6a1b      	ldr	r3, [r3, #32]
 8003bda:	1c9a      	adds	r2, r3, #2
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	621a      	str	r2, [r3, #32]
 8003be0:	e008      	b.n	8003bf4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6a1b      	ldr	r3, [r3, #32]
 8003be6:	1c59      	adds	r1, r3, #1
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	6211      	str	r1, [r2, #32]
 8003bec:	781a      	ldrb	r2, [r3, #0]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	3b01      	subs	r3, #1
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	4619      	mov	r1, r3
 8003c02:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d10f      	bne.n	8003c28 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	68da      	ldr	r2, [r3, #12]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c16:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	68da      	ldr	r2, [r3, #12]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c26:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	e000      	b.n	8003c2e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003c2c:	2302      	movs	r3, #2
  }
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3714      	adds	r7, #20
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr

08003c3a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003c3a:	b580      	push	{r7, lr}
 8003c3c:	b082      	sub	sp, #8
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	68da      	ldr	r2, [r3, #12]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c50:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2220      	movs	r2, #32
 8003c56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f7ff fecc 	bl	80039f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003c60:	2300      	movs	r3, #0
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3708      	adds	r7, #8
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}

08003c6a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003c6a:	b580      	push	{r7, lr}
 8003c6c:	b08c      	sub	sp, #48	; 0x30
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	2b22      	cmp	r3, #34	; 0x22
 8003c7c:	f040 80ab 	bne.w	8003dd6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c88:	d117      	bne.n	8003cba <UART_Receive_IT+0x50>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	691b      	ldr	r3, [r3, #16]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d113      	bne.n	8003cba <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003c92:	2300      	movs	r3, #0
 8003c94:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c9a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ca8:	b29a      	uxth	r2, r3
 8003caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cac:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb2:	1c9a      	adds	r2, r3, #2
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	629a      	str	r2, [r3, #40]	; 0x28
 8003cb8:	e026      	b.n	8003d08 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ccc:	d007      	beq.n	8003cde <UART_Receive_IT+0x74>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d10a      	bne.n	8003cec <UART_Receive_IT+0x82>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	691b      	ldr	r3, [r3, #16]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d106      	bne.n	8003cec <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	b2da      	uxtb	r2, r3
 8003ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ce8:	701a      	strb	r2, [r3, #0]
 8003cea:	e008      	b.n	8003cfe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cf8:	b2da      	uxtb	r2, r3
 8003cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cfc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d02:	1c5a      	adds	r2, r3, #1
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	3b01      	subs	r3, #1
 8003d10:	b29b      	uxth	r3, r3
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	4619      	mov	r1, r3
 8003d16:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d15a      	bne.n	8003dd2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	68da      	ldr	r2, [r3, #12]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f022 0220 	bic.w	r2, r2, #32
 8003d2a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	68da      	ldr	r2, [r3, #12]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d3a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	695a      	ldr	r2, [r3, #20]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f022 0201 	bic.w	r2, r2, #1
 8003d4a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2220      	movs	r2, #32
 8003d50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d135      	bne.n	8003dc8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	330c      	adds	r3, #12
 8003d68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	e853 3f00 	ldrex	r3, [r3]
 8003d70:	613b      	str	r3, [r7, #16]
   return(result);
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	f023 0310 	bic.w	r3, r3, #16
 8003d78:	627b      	str	r3, [r7, #36]	; 0x24
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	330c      	adds	r3, #12
 8003d80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d82:	623a      	str	r2, [r7, #32]
 8003d84:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d86:	69f9      	ldr	r1, [r7, #28]
 8003d88:	6a3a      	ldr	r2, [r7, #32]
 8003d8a:	e841 2300 	strex	r3, r2, [r1]
 8003d8e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d90:	69bb      	ldr	r3, [r7, #24]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d1e5      	bne.n	8003d62 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f003 0310 	and.w	r3, r3, #16
 8003da0:	2b10      	cmp	r3, #16
 8003da2:	d10a      	bne.n	8003dba <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003da4:	2300      	movs	r3, #0
 8003da6:	60fb      	str	r3, [r7, #12]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	60fb      	str	r3, [r7, #12]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	60fb      	str	r3, [r7, #12]
 8003db8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003dbe:	4619      	mov	r1, r3
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f7ff fe2d 	bl	8003a20 <HAL_UARTEx_RxEventCallback>
 8003dc6:	e002      	b.n	8003dce <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f7fc ff15 	bl	8000bf8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	e002      	b.n	8003dd8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	e000      	b.n	8003dd8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003dd6:	2302      	movs	r3, #2
  }
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3730      	adds	r7, #48	; 0x30
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003de4:	b09f      	sub	sp, #124	; 0x7c
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003dea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	691b      	ldr	r3, [r3, #16]
 8003df0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003df4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003df6:	68d9      	ldr	r1, [r3, #12]
 8003df8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	ea40 0301 	orr.w	r3, r0, r1
 8003e00:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003e02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e04:	689a      	ldr	r2, [r3, #8]
 8003e06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e08:	691b      	ldr	r3, [r3, #16]
 8003e0a:	431a      	orrs	r2, r3
 8003e0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e0e:	695b      	ldr	r3, [r3, #20]
 8003e10:	431a      	orrs	r2, r3
 8003e12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e14:	69db      	ldr	r3, [r3, #28]
 8003e16:	4313      	orrs	r3, r2
 8003e18:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003e1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003e24:	f021 010c 	bic.w	r1, r1, #12
 8003e28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003e2e:	430b      	orrs	r3, r1
 8003e30:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	695b      	ldr	r3, [r3, #20]
 8003e38:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003e3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e3e:	6999      	ldr	r1, [r3, #24]
 8003e40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	ea40 0301 	orr.w	r3, r0, r1
 8003e48:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003e4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	4bc5      	ldr	r3, [pc, #788]	; (8004164 <UART_SetConfig+0x384>)
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d004      	beq.n	8003e5e <UART_SetConfig+0x7e>
 8003e54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	4bc3      	ldr	r3, [pc, #780]	; (8004168 <UART_SetConfig+0x388>)
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d103      	bne.n	8003e66 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e5e:	f7fe fb2d 	bl	80024bc <HAL_RCC_GetPCLK2Freq>
 8003e62:	6778      	str	r0, [r7, #116]	; 0x74
 8003e64:	e002      	b.n	8003e6c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003e66:	f7fe fb15 	bl	8002494 <HAL_RCC_GetPCLK1Freq>
 8003e6a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e6e:	69db      	ldr	r3, [r3, #28]
 8003e70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e74:	f040 80b6 	bne.w	8003fe4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e7a:	461c      	mov	r4, r3
 8003e7c:	f04f 0500 	mov.w	r5, #0
 8003e80:	4622      	mov	r2, r4
 8003e82:	462b      	mov	r3, r5
 8003e84:	1891      	adds	r1, r2, r2
 8003e86:	6439      	str	r1, [r7, #64]	; 0x40
 8003e88:	415b      	adcs	r3, r3
 8003e8a:	647b      	str	r3, [r7, #68]	; 0x44
 8003e8c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003e90:	1912      	adds	r2, r2, r4
 8003e92:	eb45 0303 	adc.w	r3, r5, r3
 8003e96:	f04f 0000 	mov.w	r0, #0
 8003e9a:	f04f 0100 	mov.w	r1, #0
 8003e9e:	00d9      	lsls	r1, r3, #3
 8003ea0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003ea4:	00d0      	lsls	r0, r2, #3
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	460b      	mov	r3, r1
 8003eaa:	1911      	adds	r1, r2, r4
 8003eac:	6639      	str	r1, [r7, #96]	; 0x60
 8003eae:	416b      	adcs	r3, r5
 8003eb0:	667b      	str	r3, [r7, #100]	; 0x64
 8003eb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	f04f 0300 	mov.w	r3, #0
 8003ebc:	1891      	adds	r1, r2, r2
 8003ebe:	63b9      	str	r1, [r7, #56]	; 0x38
 8003ec0:	415b      	adcs	r3, r3
 8003ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ec4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003ec8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003ecc:	f7fc f9d0 	bl	8000270 <__aeabi_uldivmod>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	460b      	mov	r3, r1
 8003ed4:	4ba5      	ldr	r3, [pc, #660]	; (800416c <UART_SetConfig+0x38c>)
 8003ed6:	fba3 2302 	umull	r2, r3, r3, r2
 8003eda:	095b      	lsrs	r3, r3, #5
 8003edc:	011e      	lsls	r6, r3, #4
 8003ede:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ee0:	461c      	mov	r4, r3
 8003ee2:	f04f 0500 	mov.w	r5, #0
 8003ee6:	4622      	mov	r2, r4
 8003ee8:	462b      	mov	r3, r5
 8003eea:	1891      	adds	r1, r2, r2
 8003eec:	6339      	str	r1, [r7, #48]	; 0x30
 8003eee:	415b      	adcs	r3, r3
 8003ef0:	637b      	str	r3, [r7, #52]	; 0x34
 8003ef2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003ef6:	1912      	adds	r2, r2, r4
 8003ef8:	eb45 0303 	adc.w	r3, r5, r3
 8003efc:	f04f 0000 	mov.w	r0, #0
 8003f00:	f04f 0100 	mov.w	r1, #0
 8003f04:	00d9      	lsls	r1, r3, #3
 8003f06:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003f0a:	00d0      	lsls	r0, r2, #3
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	460b      	mov	r3, r1
 8003f10:	1911      	adds	r1, r2, r4
 8003f12:	65b9      	str	r1, [r7, #88]	; 0x58
 8003f14:	416b      	adcs	r3, r5
 8003f16:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	f04f 0300 	mov.w	r3, #0
 8003f22:	1891      	adds	r1, r2, r2
 8003f24:	62b9      	str	r1, [r7, #40]	; 0x28
 8003f26:	415b      	adcs	r3, r3
 8003f28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f2a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003f2e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003f32:	f7fc f99d 	bl	8000270 <__aeabi_uldivmod>
 8003f36:	4602      	mov	r2, r0
 8003f38:	460b      	mov	r3, r1
 8003f3a:	4b8c      	ldr	r3, [pc, #560]	; (800416c <UART_SetConfig+0x38c>)
 8003f3c:	fba3 1302 	umull	r1, r3, r3, r2
 8003f40:	095b      	lsrs	r3, r3, #5
 8003f42:	2164      	movs	r1, #100	; 0x64
 8003f44:	fb01 f303 	mul.w	r3, r1, r3
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	00db      	lsls	r3, r3, #3
 8003f4c:	3332      	adds	r3, #50	; 0x32
 8003f4e:	4a87      	ldr	r2, [pc, #540]	; (800416c <UART_SetConfig+0x38c>)
 8003f50:	fba2 2303 	umull	r2, r3, r2, r3
 8003f54:	095b      	lsrs	r3, r3, #5
 8003f56:	005b      	lsls	r3, r3, #1
 8003f58:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003f5c:	441e      	add	r6, r3
 8003f5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f60:	4618      	mov	r0, r3
 8003f62:	f04f 0100 	mov.w	r1, #0
 8003f66:	4602      	mov	r2, r0
 8003f68:	460b      	mov	r3, r1
 8003f6a:	1894      	adds	r4, r2, r2
 8003f6c:	623c      	str	r4, [r7, #32]
 8003f6e:	415b      	adcs	r3, r3
 8003f70:	627b      	str	r3, [r7, #36]	; 0x24
 8003f72:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003f76:	1812      	adds	r2, r2, r0
 8003f78:	eb41 0303 	adc.w	r3, r1, r3
 8003f7c:	f04f 0400 	mov.w	r4, #0
 8003f80:	f04f 0500 	mov.w	r5, #0
 8003f84:	00dd      	lsls	r5, r3, #3
 8003f86:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003f8a:	00d4      	lsls	r4, r2, #3
 8003f8c:	4622      	mov	r2, r4
 8003f8e:	462b      	mov	r3, r5
 8003f90:	1814      	adds	r4, r2, r0
 8003f92:	653c      	str	r4, [r7, #80]	; 0x50
 8003f94:	414b      	adcs	r3, r1
 8003f96:	657b      	str	r3, [r7, #84]	; 0x54
 8003f98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	f04f 0300 	mov.w	r3, #0
 8003fa2:	1891      	adds	r1, r2, r2
 8003fa4:	61b9      	str	r1, [r7, #24]
 8003fa6:	415b      	adcs	r3, r3
 8003fa8:	61fb      	str	r3, [r7, #28]
 8003faa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003fae:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003fb2:	f7fc f95d 	bl	8000270 <__aeabi_uldivmod>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	460b      	mov	r3, r1
 8003fba:	4b6c      	ldr	r3, [pc, #432]	; (800416c <UART_SetConfig+0x38c>)
 8003fbc:	fba3 1302 	umull	r1, r3, r3, r2
 8003fc0:	095b      	lsrs	r3, r3, #5
 8003fc2:	2164      	movs	r1, #100	; 0x64
 8003fc4:	fb01 f303 	mul.w	r3, r1, r3
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	00db      	lsls	r3, r3, #3
 8003fcc:	3332      	adds	r3, #50	; 0x32
 8003fce:	4a67      	ldr	r2, [pc, #412]	; (800416c <UART_SetConfig+0x38c>)
 8003fd0:	fba2 2303 	umull	r2, r3, r2, r3
 8003fd4:	095b      	lsrs	r3, r3, #5
 8003fd6:	f003 0207 	and.w	r2, r3, #7
 8003fda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4432      	add	r2, r6
 8003fe0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003fe2:	e0b9      	b.n	8004158 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003fe4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fe6:	461c      	mov	r4, r3
 8003fe8:	f04f 0500 	mov.w	r5, #0
 8003fec:	4622      	mov	r2, r4
 8003fee:	462b      	mov	r3, r5
 8003ff0:	1891      	adds	r1, r2, r2
 8003ff2:	6139      	str	r1, [r7, #16]
 8003ff4:	415b      	adcs	r3, r3
 8003ff6:	617b      	str	r3, [r7, #20]
 8003ff8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003ffc:	1912      	adds	r2, r2, r4
 8003ffe:	eb45 0303 	adc.w	r3, r5, r3
 8004002:	f04f 0000 	mov.w	r0, #0
 8004006:	f04f 0100 	mov.w	r1, #0
 800400a:	00d9      	lsls	r1, r3, #3
 800400c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004010:	00d0      	lsls	r0, r2, #3
 8004012:	4602      	mov	r2, r0
 8004014:	460b      	mov	r3, r1
 8004016:	eb12 0804 	adds.w	r8, r2, r4
 800401a:	eb43 0905 	adc.w	r9, r3, r5
 800401e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	4618      	mov	r0, r3
 8004024:	f04f 0100 	mov.w	r1, #0
 8004028:	f04f 0200 	mov.w	r2, #0
 800402c:	f04f 0300 	mov.w	r3, #0
 8004030:	008b      	lsls	r3, r1, #2
 8004032:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004036:	0082      	lsls	r2, r0, #2
 8004038:	4640      	mov	r0, r8
 800403a:	4649      	mov	r1, r9
 800403c:	f7fc f918 	bl	8000270 <__aeabi_uldivmod>
 8004040:	4602      	mov	r2, r0
 8004042:	460b      	mov	r3, r1
 8004044:	4b49      	ldr	r3, [pc, #292]	; (800416c <UART_SetConfig+0x38c>)
 8004046:	fba3 2302 	umull	r2, r3, r3, r2
 800404a:	095b      	lsrs	r3, r3, #5
 800404c:	011e      	lsls	r6, r3, #4
 800404e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004050:	4618      	mov	r0, r3
 8004052:	f04f 0100 	mov.w	r1, #0
 8004056:	4602      	mov	r2, r0
 8004058:	460b      	mov	r3, r1
 800405a:	1894      	adds	r4, r2, r2
 800405c:	60bc      	str	r4, [r7, #8]
 800405e:	415b      	adcs	r3, r3
 8004060:	60fb      	str	r3, [r7, #12]
 8004062:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004066:	1812      	adds	r2, r2, r0
 8004068:	eb41 0303 	adc.w	r3, r1, r3
 800406c:	f04f 0400 	mov.w	r4, #0
 8004070:	f04f 0500 	mov.w	r5, #0
 8004074:	00dd      	lsls	r5, r3, #3
 8004076:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800407a:	00d4      	lsls	r4, r2, #3
 800407c:	4622      	mov	r2, r4
 800407e:	462b      	mov	r3, r5
 8004080:	1814      	adds	r4, r2, r0
 8004082:	64bc      	str	r4, [r7, #72]	; 0x48
 8004084:	414b      	adcs	r3, r1
 8004086:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004088:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	4618      	mov	r0, r3
 800408e:	f04f 0100 	mov.w	r1, #0
 8004092:	f04f 0200 	mov.w	r2, #0
 8004096:	f04f 0300 	mov.w	r3, #0
 800409a:	008b      	lsls	r3, r1, #2
 800409c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80040a0:	0082      	lsls	r2, r0, #2
 80040a2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80040a6:	f7fc f8e3 	bl	8000270 <__aeabi_uldivmod>
 80040aa:	4602      	mov	r2, r0
 80040ac:	460b      	mov	r3, r1
 80040ae:	4b2f      	ldr	r3, [pc, #188]	; (800416c <UART_SetConfig+0x38c>)
 80040b0:	fba3 1302 	umull	r1, r3, r3, r2
 80040b4:	095b      	lsrs	r3, r3, #5
 80040b6:	2164      	movs	r1, #100	; 0x64
 80040b8:	fb01 f303 	mul.w	r3, r1, r3
 80040bc:	1ad3      	subs	r3, r2, r3
 80040be:	011b      	lsls	r3, r3, #4
 80040c0:	3332      	adds	r3, #50	; 0x32
 80040c2:	4a2a      	ldr	r2, [pc, #168]	; (800416c <UART_SetConfig+0x38c>)
 80040c4:	fba2 2303 	umull	r2, r3, r2, r3
 80040c8:	095b      	lsrs	r3, r3, #5
 80040ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040ce:	441e      	add	r6, r3
 80040d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040d2:	4618      	mov	r0, r3
 80040d4:	f04f 0100 	mov.w	r1, #0
 80040d8:	4602      	mov	r2, r0
 80040da:	460b      	mov	r3, r1
 80040dc:	1894      	adds	r4, r2, r2
 80040de:	603c      	str	r4, [r7, #0]
 80040e0:	415b      	adcs	r3, r3
 80040e2:	607b      	str	r3, [r7, #4]
 80040e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80040e8:	1812      	adds	r2, r2, r0
 80040ea:	eb41 0303 	adc.w	r3, r1, r3
 80040ee:	f04f 0400 	mov.w	r4, #0
 80040f2:	f04f 0500 	mov.w	r5, #0
 80040f6:	00dd      	lsls	r5, r3, #3
 80040f8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80040fc:	00d4      	lsls	r4, r2, #3
 80040fe:	4622      	mov	r2, r4
 8004100:	462b      	mov	r3, r5
 8004102:	eb12 0a00 	adds.w	sl, r2, r0
 8004106:	eb43 0b01 	adc.w	fp, r3, r1
 800410a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	4618      	mov	r0, r3
 8004110:	f04f 0100 	mov.w	r1, #0
 8004114:	f04f 0200 	mov.w	r2, #0
 8004118:	f04f 0300 	mov.w	r3, #0
 800411c:	008b      	lsls	r3, r1, #2
 800411e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004122:	0082      	lsls	r2, r0, #2
 8004124:	4650      	mov	r0, sl
 8004126:	4659      	mov	r1, fp
 8004128:	f7fc f8a2 	bl	8000270 <__aeabi_uldivmod>
 800412c:	4602      	mov	r2, r0
 800412e:	460b      	mov	r3, r1
 8004130:	4b0e      	ldr	r3, [pc, #56]	; (800416c <UART_SetConfig+0x38c>)
 8004132:	fba3 1302 	umull	r1, r3, r3, r2
 8004136:	095b      	lsrs	r3, r3, #5
 8004138:	2164      	movs	r1, #100	; 0x64
 800413a:	fb01 f303 	mul.w	r3, r1, r3
 800413e:	1ad3      	subs	r3, r2, r3
 8004140:	011b      	lsls	r3, r3, #4
 8004142:	3332      	adds	r3, #50	; 0x32
 8004144:	4a09      	ldr	r2, [pc, #36]	; (800416c <UART_SetConfig+0x38c>)
 8004146:	fba2 2303 	umull	r2, r3, r2, r3
 800414a:	095b      	lsrs	r3, r3, #5
 800414c:	f003 020f 	and.w	r2, r3, #15
 8004150:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4432      	add	r2, r6
 8004156:	609a      	str	r2, [r3, #8]
}
 8004158:	bf00      	nop
 800415a:	377c      	adds	r7, #124	; 0x7c
 800415c:	46bd      	mov	sp, r7
 800415e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004162:	bf00      	nop
 8004164:	40011000 	.word	0x40011000
 8004168:	40011400 	.word	0x40011400
 800416c:	51eb851f 	.word	0x51eb851f

08004170 <__NVIC_SetPriority>:
{
 8004170:	b480      	push	{r7}
 8004172:	b083      	sub	sp, #12
 8004174:	af00      	add	r7, sp, #0
 8004176:	4603      	mov	r3, r0
 8004178:	6039      	str	r1, [r7, #0]
 800417a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800417c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004180:	2b00      	cmp	r3, #0
 8004182:	db0a      	blt.n	800419a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	b2da      	uxtb	r2, r3
 8004188:	490c      	ldr	r1, [pc, #48]	; (80041bc <__NVIC_SetPriority+0x4c>)
 800418a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800418e:	0112      	lsls	r2, r2, #4
 8004190:	b2d2      	uxtb	r2, r2
 8004192:	440b      	add	r3, r1
 8004194:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004198:	e00a      	b.n	80041b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	b2da      	uxtb	r2, r3
 800419e:	4908      	ldr	r1, [pc, #32]	; (80041c0 <__NVIC_SetPriority+0x50>)
 80041a0:	79fb      	ldrb	r3, [r7, #7]
 80041a2:	f003 030f 	and.w	r3, r3, #15
 80041a6:	3b04      	subs	r3, #4
 80041a8:	0112      	lsls	r2, r2, #4
 80041aa:	b2d2      	uxtb	r2, r2
 80041ac:	440b      	add	r3, r1
 80041ae:	761a      	strb	r2, [r3, #24]
}
 80041b0:	bf00      	nop
 80041b2:	370c      	adds	r7, #12
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr
 80041bc:	e000e100 	.word	0xe000e100
 80041c0:	e000ed00 	.word	0xe000ed00

080041c4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80041c4:	b580      	push	{r7, lr}
 80041c6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80041c8:	2100      	movs	r1, #0
 80041ca:	f06f 0004 	mvn.w	r0, #4
 80041ce:	f7ff ffcf 	bl	8004170 <__NVIC_SetPriority>
#endif
}
 80041d2:	bf00      	nop
 80041d4:	bd80      	pop	{r7, pc}
	...

080041d8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80041de:	f3ef 8305 	mrs	r3, IPSR
 80041e2:	603b      	str	r3, [r7, #0]
  return(result);
 80041e4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d003      	beq.n	80041f2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80041ea:	f06f 0305 	mvn.w	r3, #5
 80041ee:	607b      	str	r3, [r7, #4]
 80041f0:	e00c      	b.n	800420c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80041f2:	4b0a      	ldr	r3, [pc, #40]	; (800421c <osKernelInitialize+0x44>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d105      	bne.n	8004206 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80041fa:	4b08      	ldr	r3, [pc, #32]	; (800421c <osKernelInitialize+0x44>)
 80041fc:	2201      	movs	r2, #1
 80041fe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004200:	2300      	movs	r3, #0
 8004202:	607b      	str	r3, [r7, #4]
 8004204:	e002      	b.n	800420c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004206:	f04f 33ff 	mov.w	r3, #4294967295
 800420a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800420c:	687b      	ldr	r3, [r7, #4]
}
 800420e:	4618      	mov	r0, r3
 8004210:	370c      	adds	r7, #12
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr
 800421a:	bf00      	nop
 800421c:	20000094 	.word	0x20000094

08004220 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004220:	b580      	push	{r7, lr}
 8004222:	b082      	sub	sp, #8
 8004224:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004226:	f3ef 8305 	mrs	r3, IPSR
 800422a:	603b      	str	r3, [r7, #0]
  return(result);
 800422c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800422e:	2b00      	cmp	r3, #0
 8004230:	d003      	beq.n	800423a <osKernelStart+0x1a>
    stat = osErrorISR;
 8004232:	f06f 0305 	mvn.w	r3, #5
 8004236:	607b      	str	r3, [r7, #4]
 8004238:	e010      	b.n	800425c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800423a:	4b0b      	ldr	r3, [pc, #44]	; (8004268 <osKernelStart+0x48>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	2b01      	cmp	r3, #1
 8004240:	d109      	bne.n	8004256 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004242:	f7ff ffbf 	bl	80041c4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004246:	4b08      	ldr	r3, [pc, #32]	; (8004268 <osKernelStart+0x48>)
 8004248:	2202      	movs	r2, #2
 800424a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800424c:	f001 fc9e 	bl	8005b8c <vTaskStartScheduler>
      stat = osOK;
 8004250:	2300      	movs	r3, #0
 8004252:	607b      	str	r3, [r7, #4]
 8004254:	e002      	b.n	800425c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004256:	f04f 33ff 	mov.w	r3, #4294967295
 800425a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800425c:	687b      	ldr	r3, [r7, #4]
}
 800425e:	4618      	mov	r0, r3
 8004260:	3708      	adds	r7, #8
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop
 8004268:	20000094 	.word	0x20000094

0800426c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800426c:	b580      	push	{r7, lr}
 800426e:	b08e      	sub	sp, #56	; 0x38
 8004270:	af04      	add	r7, sp, #16
 8004272:	60f8      	str	r0, [r7, #12]
 8004274:	60b9      	str	r1, [r7, #8]
 8004276:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004278:	2300      	movs	r3, #0
 800427a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800427c:	f3ef 8305 	mrs	r3, IPSR
 8004280:	617b      	str	r3, [r7, #20]
  return(result);
 8004282:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004284:	2b00      	cmp	r3, #0
 8004286:	d17e      	bne.n	8004386 <osThreadNew+0x11a>
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d07b      	beq.n	8004386 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800428e:	2380      	movs	r3, #128	; 0x80
 8004290:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004292:	2318      	movs	r3, #24
 8004294:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004296:	2300      	movs	r3, #0
 8004298:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800429a:	f04f 33ff 	mov.w	r3, #4294967295
 800429e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d045      	beq.n	8004332 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d002      	beq.n	80042b4 <osThreadNew+0x48>
        name = attr->name;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	699b      	ldr	r3, [r3, #24]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d002      	beq.n	80042c2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	699b      	ldr	r3, [r3, #24]
 80042c0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80042c2:	69fb      	ldr	r3, [r7, #28]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d008      	beq.n	80042da <osThreadNew+0x6e>
 80042c8:	69fb      	ldr	r3, [r7, #28]
 80042ca:	2b38      	cmp	r3, #56	; 0x38
 80042cc:	d805      	bhi.n	80042da <osThreadNew+0x6e>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	f003 0301 	and.w	r3, r3, #1
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d001      	beq.n	80042de <osThreadNew+0x72>
        return (NULL);
 80042da:	2300      	movs	r3, #0
 80042dc:	e054      	b.n	8004388 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	695b      	ldr	r3, [r3, #20]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d003      	beq.n	80042ee <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	695b      	ldr	r3, [r3, #20]
 80042ea:	089b      	lsrs	r3, r3, #2
 80042ec:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d00e      	beq.n	8004314 <osThreadNew+0xa8>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	68db      	ldr	r3, [r3, #12]
 80042fa:	2b5b      	cmp	r3, #91	; 0x5b
 80042fc:	d90a      	bls.n	8004314 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004302:	2b00      	cmp	r3, #0
 8004304:	d006      	beq.n	8004314 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	695b      	ldr	r3, [r3, #20]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d002      	beq.n	8004314 <osThreadNew+0xa8>
        mem = 1;
 800430e:	2301      	movs	r3, #1
 8004310:	61bb      	str	r3, [r7, #24]
 8004312:	e010      	b.n	8004336 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d10c      	bne.n	8004336 <osThreadNew+0xca>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d108      	bne.n	8004336 <osThreadNew+0xca>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	691b      	ldr	r3, [r3, #16]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d104      	bne.n	8004336 <osThreadNew+0xca>
          mem = 0;
 800432c:	2300      	movs	r3, #0
 800432e:	61bb      	str	r3, [r7, #24]
 8004330:	e001      	b.n	8004336 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004332:	2300      	movs	r3, #0
 8004334:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004336:	69bb      	ldr	r3, [r7, #24]
 8004338:	2b01      	cmp	r3, #1
 800433a:	d110      	bne.n	800435e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004344:	9202      	str	r2, [sp, #8]
 8004346:	9301      	str	r3, [sp, #4]
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	9300      	str	r3, [sp, #0]
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	6a3a      	ldr	r2, [r7, #32]
 8004350:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004352:	68f8      	ldr	r0, [r7, #12]
 8004354:	f001 fa44 	bl	80057e0 <xTaskCreateStatic>
 8004358:	4603      	mov	r3, r0
 800435a:	613b      	str	r3, [r7, #16]
 800435c:	e013      	b.n	8004386 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800435e:	69bb      	ldr	r3, [r7, #24]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d110      	bne.n	8004386 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004364:	6a3b      	ldr	r3, [r7, #32]
 8004366:	b29a      	uxth	r2, r3
 8004368:	f107 0310 	add.w	r3, r7, #16
 800436c:	9301      	str	r3, [sp, #4]
 800436e:	69fb      	ldr	r3, [r7, #28]
 8004370:	9300      	str	r3, [sp, #0]
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004376:	68f8      	ldr	r0, [r7, #12]
 8004378:	f001 fa8f 	bl	800589a <xTaskCreate>
 800437c:	4603      	mov	r3, r0
 800437e:	2b01      	cmp	r3, #1
 8004380:	d001      	beq.n	8004386 <osThreadNew+0x11a>
            hTask = NULL;
 8004382:	2300      	movs	r3, #0
 8004384:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004386:	693b      	ldr	r3, [r7, #16]
}
 8004388:	4618      	mov	r0, r3
 800438a:	3728      	adds	r7, #40	; 0x28
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}

08004390 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004390:	b580      	push	{r7, lr}
 8004392:	b084      	sub	sp, #16
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004398:	f3ef 8305 	mrs	r3, IPSR
 800439c:	60bb      	str	r3, [r7, #8]
  return(result);
 800439e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d003      	beq.n	80043ac <osDelay+0x1c>
    stat = osErrorISR;
 80043a4:	f06f 0305 	mvn.w	r3, #5
 80043a8:	60fb      	str	r3, [r7, #12]
 80043aa:	e007      	b.n	80043bc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80043ac:	2300      	movs	r3, #0
 80043ae:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d002      	beq.n	80043bc <osDelay+0x2c>
      vTaskDelay(ticks);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f001 fbb4 	bl	8005b24 <vTaskDelay>
    }
  }

  return (stat);
 80043bc:	68fb      	ldr	r3, [r7, #12]
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3710      	adds	r7, #16
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}
	...

080043c8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80043c8:	b480      	push	{r7}
 80043ca:	b085      	sub	sp, #20
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	60b9      	str	r1, [r7, #8]
 80043d2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	4a07      	ldr	r2, [pc, #28]	; (80043f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80043d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	4a06      	ldr	r2, [pc, #24]	; (80043f8 <vApplicationGetIdleTaskMemory+0x30>)
 80043de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2280      	movs	r2, #128	; 0x80
 80043e4:	601a      	str	r2, [r3, #0]
}
 80043e6:	bf00      	nop
 80043e8:	3714      	adds	r7, #20
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr
 80043f2:	bf00      	nop
 80043f4:	20000098 	.word	0x20000098
 80043f8:	200000f4 	.word	0x200000f4

080043fc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80043fc:	b480      	push	{r7}
 80043fe:	b085      	sub	sp, #20
 8004400:	af00      	add	r7, sp, #0
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	60b9      	str	r1, [r7, #8]
 8004406:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	4a07      	ldr	r2, [pc, #28]	; (8004428 <vApplicationGetTimerTaskMemory+0x2c>)
 800440c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	4a06      	ldr	r2, [pc, #24]	; (800442c <vApplicationGetTimerTaskMemory+0x30>)
 8004412:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f44f 7280 	mov.w	r2, #256	; 0x100
 800441a:	601a      	str	r2, [r3, #0]
}
 800441c:	bf00      	nop
 800441e:	3714      	adds	r7, #20
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr
 8004428:	200002f4 	.word	0x200002f4
 800442c:	20000350 	.word	0x20000350

08004430 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b08a      	sub	sp, #40	; 0x28
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004438:	2300      	movs	r3, #0
 800443a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800443c:	f001 fc0c 	bl	8005c58 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004440:	4b5b      	ldr	r3, [pc, #364]	; (80045b0 <pvPortMalloc+0x180>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d101      	bne.n	800444c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004448:	f000 f920 	bl	800468c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800444c:	4b59      	ldr	r3, [pc, #356]	; (80045b4 <pvPortMalloc+0x184>)
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	4013      	ands	r3, r2
 8004454:	2b00      	cmp	r3, #0
 8004456:	f040 8093 	bne.w	8004580 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d01d      	beq.n	800449c <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004460:	2208      	movs	r2, #8
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	4413      	add	r3, r2
 8004466:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	f003 0307 	and.w	r3, r3, #7
 800446e:	2b00      	cmp	r3, #0
 8004470:	d014      	beq.n	800449c <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f023 0307 	bic.w	r3, r3, #7
 8004478:	3308      	adds	r3, #8
 800447a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f003 0307 	and.w	r3, r3, #7
 8004482:	2b00      	cmp	r3, #0
 8004484:	d00a      	beq.n	800449c <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800448a:	f383 8811 	msr	BASEPRI, r3
 800448e:	f3bf 8f6f 	isb	sy
 8004492:	f3bf 8f4f 	dsb	sy
 8004496:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004498:	bf00      	nop
 800449a:	e7fe      	b.n	800449a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d06e      	beq.n	8004580 <pvPortMalloc+0x150>
 80044a2:	4b45      	ldr	r3, [pc, #276]	; (80045b8 <pvPortMalloc+0x188>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d869      	bhi.n	8004580 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80044ac:	4b43      	ldr	r3, [pc, #268]	; (80045bc <pvPortMalloc+0x18c>)
 80044ae:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80044b0:	4b42      	ldr	r3, [pc, #264]	; (80045bc <pvPortMalloc+0x18c>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80044b6:	e004      	b.n	80044c2 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80044b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ba:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80044bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80044c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d903      	bls.n	80044d4 <pvPortMalloc+0xa4>
 80044cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d1f1      	bne.n	80044b8 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80044d4:	4b36      	ldr	r3, [pc, #216]	; (80045b0 <pvPortMalloc+0x180>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044da:	429a      	cmp	r2, r3
 80044dc:	d050      	beq.n	8004580 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80044de:	6a3b      	ldr	r3, [r7, #32]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	2208      	movs	r2, #8
 80044e4:	4413      	add	r3, r2
 80044e6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80044e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	6a3b      	ldr	r3, [r7, #32]
 80044ee:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80044f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f2:	685a      	ldr	r2, [r3, #4]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	1ad2      	subs	r2, r2, r3
 80044f8:	2308      	movs	r3, #8
 80044fa:	005b      	lsls	r3, r3, #1
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d91f      	bls.n	8004540 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004500:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4413      	add	r3, r2
 8004506:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004508:	69bb      	ldr	r3, [r7, #24]
 800450a:	f003 0307 	and.w	r3, r3, #7
 800450e:	2b00      	cmp	r3, #0
 8004510:	d00a      	beq.n	8004528 <pvPortMalloc+0xf8>
	__asm volatile
 8004512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004516:	f383 8811 	msr	BASEPRI, r3
 800451a:	f3bf 8f6f 	isb	sy
 800451e:	f3bf 8f4f 	dsb	sy
 8004522:	613b      	str	r3, [r7, #16]
}
 8004524:	bf00      	nop
 8004526:	e7fe      	b.n	8004526 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452a:	685a      	ldr	r2, [r3, #4]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	1ad2      	subs	r2, r2, r3
 8004530:	69bb      	ldr	r3, [r7, #24]
 8004532:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800453a:	69b8      	ldr	r0, [r7, #24]
 800453c:	f000 f908 	bl	8004750 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004540:	4b1d      	ldr	r3, [pc, #116]	; (80045b8 <pvPortMalloc+0x188>)
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	1ad3      	subs	r3, r2, r3
 800454a:	4a1b      	ldr	r2, [pc, #108]	; (80045b8 <pvPortMalloc+0x188>)
 800454c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800454e:	4b1a      	ldr	r3, [pc, #104]	; (80045b8 <pvPortMalloc+0x188>)
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	4b1b      	ldr	r3, [pc, #108]	; (80045c0 <pvPortMalloc+0x190>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	429a      	cmp	r2, r3
 8004558:	d203      	bcs.n	8004562 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800455a:	4b17      	ldr	r3, [pc, #92]	; (80045b8 <pvPortMalloc+0x188>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a18      	ldr	r2, [pc, #96]	; (80045c0 <pvPortMalloc+0x190>)
 8004560:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004564:	685a      	ldr	r2, [r3, #4]
 8004566:	4b13      	ldr	r3, [pc, #76]	; (80045b4 <pvPortMalloc+0x184>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	431a      	orrs	r2, r3
 800456c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004572:	2200      	movs	r2, #0
 8004574:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004576:	4b13      	ldr	r3, [pc, #76]	; (80045c4 <pvPortMalloc+0x194>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	3301      	adds	r3, #1
 800457c:	4a11      	ldr	r2, [pc, #68]	; (80045c4 <pvPortMalloc+0x194>)
 800457e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004580:	f001 fb78 	bl	8005c74 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004584:	69fb      	ldr	r3, [r7, #28]
 8004586:	f003 0307 	and.w	r3, r3, #7
 800458a:	2b00      	cmp	r3, #0
 800458c:	d00a      	beq.n	80045a4 <pvPortMalloc+0x174>
	__asm volatile
 800458e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004592:	f383 8811 	msr	BASEPRI, r3
 8004596:	f3bf 8f6f 	isb	sy
 800459a:	f3bf 8f4f 	dsb	sy
 800459e:	60fb      	str	r3, [r7, #12]
}
 80045a0:	bf00      	nop
 80045a2:	e7fe      	b.n	80045a2 <pvPortMalloc+0x172>
	return pvReturn;
 80045a4:	69fb      	ldr	r3, [r7, #28]
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3728      	adds	r7, #40	; 0x28
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop
 80045b0:	20004358 	.word	0x20004358
 80045b4:	2000436c 	.word	0x2000436c
 80045b8:	2000435c 	.word	0x2000435c
 80045bc:	20004350 	.word	0x20004350
 80045c0:	20004360 	.word	0x20004360
 80045c4:	20004364 	.word	0x20004364

080045c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b086      	sub	sp, #24
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d04d      	beq.n	8004676 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80045da:	2308      	movs	r3, #8
 80045dc:	425b      	negs	r3, r3
 80045de:	697a      	ldr	r2, [r7, #20]
 80045e0:	4413      	add	r3, r2
 80045e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	685a      	ldr	r2, [r3, #4]
 80045ec:	4b24      	ldr	r3, [pc, #144]	; (8004680 <vPortFree+0xb8>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4013      	ands	r3, r2
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d10a      	bne.n	800460c <vPortFree+0x44>
	__asm volatile
 80045f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045fa:	f383 8811 	msr	BASEPRI, r3
 80045fe:	f3bf 8f6f 	isb	sy
 8004602:	f3bf 8f4f 	dsb	sy
 8004606:	60fb      	str	r3, [r7, #12]
}
 8004608:	bf00      	nop
 800460a:	e7fe      	b.n	800460a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d00a      	beq.n	800462a <vPortFree+0x62>
	__asm volatile
 8004614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004618:	f383 8811 	msr	BASEPRI, r3
 800461c:	f3bf 8f6f 	isb	sy
 8004620:	f3bf 8f4f 	dsb	sy
 8004624:	60bb      	str	r3, [r7, #8]
}
 8004626:	bf00      	nop
 8004628:	e7fe      	b.n	8004628 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	685a      	ldr	r2, [r3, #4]
 800462e:	4b14      	ldr	r3, [pc, #80]	; (8004680 <vPortFree+0xb8>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4013      	ands	r3, r2
 8004634:	2b00      	cmp	r3, #0
 8004636:	d01e      	beq.n	8004676 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d11a      	bne.n	8004676 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	685a      	ldr	r2, [r3, #4]
 8004644:	4b0e      	ldr	r3, [pc, #56]	; (8004680 <vPortFree+0xb8>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	43db      	mvns	r3, r3
 800464a:	401a      	ands	r2, r3
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004650:	f001 fb02 	bl	8005c58 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	685a      	ldr	r2, [r3, #4]
 8004658:	4b0a      	ldr	r3, [pc, #40]	; (8004684 <vPortFree+0xbc>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4413      	add	r3, r2
 800465e:	4a09      	ldr	r2, [pc, #36]	; (8004684 <vPortFree+0xbc>)
 8004660:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004662:	6938      	ldr	r0, [r7, #16]
 8004664:	f000 f874 	bl	8004750 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004668:	4b07      	ldr	r3, [pc, #28]	; (8004688 <vPortFree+0xc0>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	3301      	adds	r3, #1
 800466e:	4a06      	ldr	r2, [pc, #24]	; (8004688 <vPortFree+0xc0>)
 8004670:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004672:	f001 faff 	bl	8005c74 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004676:	bf00      	nop
 8004678:	3718      	adds	r7, #24
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}
 800467e:	bf00      	nop
 8004680:	2000436c 	.word	0x2000436c
 8004684:	2000435c 	.word	0x2000435c
 8004688:	20004368 	.word	0x20004368

0800468c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800468c:	b480      	push	{r7}
 800468e:	b085      	sub	sp, #20
 8004690:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004692:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004696:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004698:	4b27      	ldr	r3, [pc, #156]	; (8004738 <prvHeapInit+0xac>)
 800469a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f003 0307 	and.w	r3, r3, #7
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d00c      	beq.n	80046c0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	3307      	adds	r3, #7
 80046aa:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f023 0307 	bic.w	r3, r3, #7
 80046b2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80046b4:	68ba      	ldr	r2, [r7, #8]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	4a1f      	ldr	r2, [pc, #124]	; (8004738 <prvHeapInit+0xac>)
 80046bc:	4413      	add	r3, r2
 80046be:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80046c4:	4a1d      	ldr	r2, [pc, #116]	; (800473c <prvHeapInit+0xb0>)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80046ca:	4b1c      	ldr	r3, [pc, #112]	; (800473c <prvHeapInit+0xb0>)
 80046cc:	2200      	movs	r2, #0
 80046ce:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	68ba      	ldr	r2, [r7, #8]
 80046d4:	4413      	add	r3, r2
 80046d6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80046d8:	2208      	movs	r2, #8
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	1a9b      	subs	r3, r3, r2
 80046de:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f023 0307 	bic.w	r3, r3, #7
 80046e6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	4a15      	ldr	r2, [pc, #84]	; (8004740 <prvHeapInit+0xb4>)
 80046ec:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80046ee:	4b14      	ldr	r3, [pc, #80]	; (8004740 <prvHeapInit+0xb4>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	2200      	movs	r2, #0
 80046f4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80046f6:	4b12      	ldr	r3, [pc, #72]	; (8004740 <prvHeapInit+0xb4>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2200      	movs	r2, #0
 80046fc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	68fa      	ldr	r2, [r7, #12]
 8004706:	1ad2      	subs	r2, r2, r3
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800470c:	4b0c      	ldr	r3, [pc, #48]	; (8004740 <prvHeapInit+0xb4>)
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	4a0a      	ldr	r2, [pc, #40]	; (8004744 <prvHeapInit+0xb8>)
 800471a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	4a09      	ldr	r2, [pc, #36]	; (8004748 <prvHeapInit+0xbc>)
 8004722:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004724:	4b09      	ldr	r3, [pc, #36]	; (800474c <prvHeapInit+0xc0>)
 8004726:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800472a:	601a      	str	r2, [r3, #0]
}
 800472c:	bf00      	nop
 800472e:	3714      	adds	r7, #20
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr
 8004738:	20000750 	.word	0x20000750
 800473c:	20004350 	.word	0x20004350
 8004740:	20004358 	.word	0x20004358
 8004744:	20004360 	.word	0x20004360
 8004748:	2000435c 	.word	0x2000435c
 800474c:	2000436c 	.word	0x2000436c

08004750 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004750:	b480      	push	{r7}
 8004752:	b085      	sub	sp, #20
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004758:	4b28      	ldr	r3, [pc, #160]	; (80047fc <prvInsertBlockIntoFreeList+0xac>)
 800475a:	60fb      	str	r3, [r7, #12]
 800475c:	e002      	b.n	8004764 <prvInsertBlockIntoFreeList+0x14>
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	60fb      	str	r3, [r7, #12]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	429a      	cmp	r2, r3
 800476c:	d8f7      	bhi.n	800475e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	68ba      	ldr	r2, [r7, #8]
 8004778:	4413      	add	r3, r2
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	429a      	cmp	r2, r3
 800477e:	d108      	bne.n	8004792 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	685a      	ldr	r2, [r3, #4]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	441a      	add	r2, r3
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	68ba      	ldr	r2, [r7, #8]
 800479c:	441a      	add	r2, r3
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d118      	bne.n	80047d8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	4b15      	ldr	r3, [pc, #84]	; (8004800 <prvInsertBlockIntoFreeList+0xb0>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d00d      	beq.n	80047ce <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	685a      	ldr	r2, [r3, #4]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	441a      	add	r2, r3
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	601a      	str	r2, [r3, #0]
 80047cc:	e008      	b.n	80047e0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80047ce:	4b0c      	ldr	r3, [pc, #48]	; (8004800 <prvInsertBlockIntoFreeList+0xb0>)
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	601a      	str	r2, [r3, #0]
 80047d6:	e003      	b.n	80047e0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80047e0:	68fa      	ldr	r2, [r7, #12]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d002      	beq.n	80047ee <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80047ee:	bf00      	nop
 80047f0:	3714      	adds	r7, #20
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr
 80047fa:	bf00      	nop
 80047fc:	20004350 	.word	0x20004350
 8004800:	20004358 	.word	0x20004358

08004804 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004804:	b480      	push	{r7}
 8004806:	b083      	sub	sp, #12
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	f103 0208 	add.w	r2, r3, #8
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f04f 32ff 	mov.w	r2, #4294967295
 800481c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f103 0208 	add.w	r2, r3, #8
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f103 0208 	add.w	r2, r3, #8
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2200      	movs	r2, #0
 8004836:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004838:	bf00      	nop
 800483a:	370c      	adds	r7, #12
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr

08004844 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004844:	b480      	push	{r7}
 8004846:	b083      	sub	sp, #12
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004852:	bf00      	nop
 8004854:	370c      	adds	r7, #12
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr

0800485e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800485e:	b480      	push	{r7}
 8004860:	b085      	sub	sp, #20
 8004862:	af00      	add	r7, sp, #0
 8004864:	6078      	str	r0, [r7, #4]
 8004866:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	68fa      	ldr	r2, [r7, #12]
 8004872:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	689a      	ldr	r2, [r3, #8]
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	683a      	ldr	r2, [r7, #0]
 8004882:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	683a      	ldr	r2, [r7, #0]
 8004888:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	1c5a      	adds	r2, r3, #1
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	601a      	str	r2, [r3, #0]
}
 800489a:	bf00      	nop
 800489c:	3714      	adds	r7, #20
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr

080048a6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80048a6:	b480      	push	{r7}
 80048a8:	b085      	sub	sp, #20
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	6078      	str	r0, [r7, #4]
 80048ae:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048bc:	d103      	bne.n	80048c6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	691b      	ldr	r3, [r3, #16]
 80048c2:	60fb      	str	r3, [r7, #12]
 80048c4:	e00c      	b.n	80048e0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	3308      	adds	r3, #8
 80048ca:	60fb      	str	r3, [r7, #12]
 80048cc:	e002      	b.n	80048d4 <vListInsert+0x2e>
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	60fb      	str	r3, [r7, #12]
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	68ba      	ldr	r2, [r7, #8]
 80048dc:	429a      	cmp	r2, r3
 80048de:	d2f6      	bcs.n	80048ce <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	685a      	ldr	r2, [r3, #4]
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	683a      	ldr	r2, [r7, #0]
 80048ee:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	68fa      	ldr	r2, [r7, #12]
 80048f4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	683a      	ldr	r2, [r7, #0]
 80048fa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	1c5a      	adds	r2, r3, #1
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	601a      	str	r2, [r3, #0]
}
 800490c:	bf00      	nop
 800490e:	3714      	adds	r7, #20
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr

08004918 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004918:	b480      	push	{r7}
 800491a:	b085      	sub	sp, #20
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	691b      	ldr	r3, [r3, #16]
 8004924:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	6892      	ldr	r2, [r2, #8]
 800492e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	6852      	ldr	r2, [r2, #4]
 8004938:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	429a      	cmp	r2, r3
 8004942:	d103      	bne.n	800494c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	689a      	ldr	r2, [r3, #8]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2200      	movs	r2, #0
 8004950:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	1e5a      	subs	r2, r3, #1
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
}
 8004960:	4618      	mov	r0, r3
 8004962:	3714      	adds	r7, #20
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr

0800496c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800496c:	b480      	push	{r7}
 800496e:	b085      	sub	sp, #20
 8004970:	af00      	add	r7, sp, #0
 8004972:	60f8      	str	r0, [r7, #12]
 8004974:	60b9      	str	r1, [r7, #8]
 8004976:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	3b04      	subs	r3, #4
 800497c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004984:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	3b04      	subs	r3, #4
 800498a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	f023 0201 	bic.w	r2, r3, #1
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	3b04      	subs	r3, #4
 800499a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800499c:	4a0c      	ldr	r2, [pc, #48]	; (80049d0 <pxPortInitialiseStack+0x64>)
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	3b14      	subs	r3, #20
 80049a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	3b04      	subs	r3, #4
 80049b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f06f 0202 	mvn.w	r2, #2
 80049ba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	3b20      	subs	r3, #32
 80049c0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80049c2:	68fb      	ldr	r3, [r7, #12]
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3714      	adds	r7, #20
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr
 80049d0:	080049d5 	.word	0x080049d5

080049d4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80049d4:	b480      	push	{r7}
 80049d6:	b085      	sub	sp, #20
 80049d8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80049da:	2300      	movs	r3, #0
 80049dc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80049de:	4b12      	ldr	r3, [pc, #72]	; (8004a28 <prvTaskExitError+0x54>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049e6:	d00a      	beq.n	80049fe <prvTaskExitError+0x2a>
	__asm volatile
 80049e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ec:	f383 8811 	msr	BASEPRI, r3
 80049f0:	f3bf 8f6f 	isb	sy
 80049f4:	f3bf 8f4f 	dsb	sy
 80049f8:	60fb      	str	r3, [r7, #12]
}
 80049fa:	bf00      	nop
 80049fc:	e7fe      	b.n	80049fc <prvTaskExitError+0x28>
	__asm volatile
 80049fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a02:	f383 8811 	msr	BASEPRI, r3
 8004a06:	f3bf 8f6f 	isb	sy
 8004a0a:	f3bf 8f4f 	dsb	sy
 8004a0e:	60bb      	str	r3, [r7, #8]
}
 8004a10:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004a12:	bf00      	nop
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d0fc      	beq.n	8004a14 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004a1a:	bf00      	nop
 8004a1c:	bf00      	nop
 8004a1e:	3714      	adds	r7, #20
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr
 8004a28:	2000000c 	.word	0x2000000c
 8004a2c:	00000000 	.word	0x00000000

08004a30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004a30:	4b07      	ldr	r3, [pc, #28]	; (8004a50 <pxCurrentTCBConst2>)
 8004a32:	6819      	ldr	r1, [r3, #0]
 8004a34:	6808      	ldr	r0, [r1, #0]
 8004a36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a3a:	f380 8809 	msr	PSP, r0
 8004a3e:	f3bf 8f6f 	isb	sy
 8004a42:	f04f 0000 	mov.w	r0, #0
 8004a46:	f380 8811 	msr	BASEPRI, r0
 8004a4a:	4770      	bx	lr
 8004a4c:	f3af 8000 	nop.w

08004a50 <pxCurrentTCBConst2>:
 8004a50:	20004378 	.word	0x20004378
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004a54:	bf00      	nop
 8004a56:	bf00      	nop

08004a58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004a58:	4808      	ldr	r0, [pc, #32]	; (8004a7c <prvPortStartFirstTask+0x24>)
 8004a5a:	6800      	ldr	r0, [r0, #0]
 8004a5c:	6800      	ldr	r0, [r0, #0]
 8004a5e:	f380 8808 	msr	MSP, r0
 8004a62:	f04f 0000 	mov.w	r0, #0
 8004a66:	f380 8814 	msr	CONTROL, r0
 8004a6a:	b662      	cpsie	i
 8004a6c:	b661      	cpsie	f
 8004a6e:	f3bf 8f4f 	dsb	sy
 8004a72:	f3bf 8f6f 	isb	sy
 8004a76:	df00      	svc	0
 8004a78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004a7a:	bf00      	nop
 8004a7c:	e000ed08 	.word	0xe000ed08

08004a80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b086      	sub	sp, #24
 8004a84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004a86:	4b46      	ldr	r3, [pc, #280]	; (8004ba0 <xPortStartScheduler+0x120>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a46      	ldr	r2, [pc, #280]	; (8004ba4 <xPortStartScheduler+0x124>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d10a      	bne.n	8004aa6 <xPortStartScheduler+0x26>
	__asm volatile
 8004a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a94:	f383 8811 	msr	BASEPRI, r3
 8004a98:	f3bf 8f6f 	isb	sy
 8004a9c:	f3bf 8f4f 	dsb	sy
 8004aa0:	613b      	str	r3, [r7, #16]
}
 8004aa2:	bf00      	nop
 8004aa4:	e7fe      	b.n	8004aa4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004aa6:	4b3e      	ldr	r3, [pc, #248]	; (8004ba0 <xPortStartScheduler+0x120>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a3f      	ldr	r2, [pc, #252]	; (8004ba8 <xPortStartScheduler+0x128>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d10a      	bne.n	8004ac6 <xPortStartScheduler+0x46>
	__asm volatile
 8004ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab4:	f383 8811 	msr	BASEPRI, r3
 8004ab8:	f3bf 8f6f 	isb	sy
 8004abc:	f3bf 8f4f 	dsb	sy
 8004ac0:	60fb      	str	r3, [r7, #12]
}
 8004ac2:	bf00      	nop
 8004ac4:	e7fe      	b.n	8004ac4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004ac6:	4b39      	ldr	r3, [pc, #228]	; (8004bac <xPortStartScheduler+0x12c>)
 8004ac8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	781b      	ldrb	r3, [r3, #0]
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	22ff      	movs	r2, #255	; 0xff
 8004ad6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	781b      	ldrb	r3, [r3, #0]
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004ae0:	78fb      	ldrb	r3, [r7, #3]
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004ae8:	b2da      	uxtb	r2, r3
 8004aea:	4b31      	ldr	r3, [pc, #196]	; (8004bb0 <xPortStartScheduler+0x130>)
 8004aec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004aee:	4b31      	ldr	r3, [pc, #196]	; (8004bb4 <xPortStartScheduler+0x134>)
 8004af0:	2207      	movs	r2, #7
 8004af2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004af4:	e009      	b.n	8004b0a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004af6:	4b2f      	ldr	r3, [pc, #188]	; (8004bb4 <xPortStartScheduler+0x134>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	3b01      	subs	r3, #1
 8004afc:	4a2d      	ldr	r2, [pc, #180]	; (8004bb4 <xPortStartScheduler+0x134>)
 8004afe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004b00:	78fb      	ldrb	r3, [r7, #3]
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	005b      	lsls	r3, r3, #1
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004b0a:	78fb      	ldrb	r3, [r7, #3]
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b12:	2b80      	cmp	r3, #128	; 0x80
 8004b14:	d0ef      	beq.n	8004af6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004b16:	4b27      	ldr	r3, [pc, #156]	; (8004bb4 <xPortStartScheduler+0x134>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f1c3 0307 	rsb	r3, r3, #7
 8004b1e:	2b04      	cmp	r3, #4
 8004b20:	d00a      	beq.n	8004b38 <xPortStartScheduler+0xb8>
	__asm volatile
 8004b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b26:	f383 8811 	msr	BASEPRI, r3
 8004b2a:	f3bf 8f6f 	isb	sy
 8004b2e:	f3bf 8f4f 	dsb	sy
 8004b32:	60bb      	str	r3, [r7, #8]
}
 8004b34:	bf00      	nop
 8004b36:	e7fe      	b.n	8004b36 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004b38:	4b1e      	ldr	r3, [pc, #120]	; (8004bb4 <xPortStartScheduler+0x134>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	021b      	lsls	r3, r3, #8
 8004b3e:	4a1d      	ldr	r2, [pc, #116]	; (8004bb4 <xPortStartScheduler+0x134>)
 8004b40:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004b42:	4b1c      	ldr	r3, [pc, #112]	; (8004bb4 <xPortStartScheduler+0x134>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004b4a:	4a1a      	ldr	r2, [pc, #104]	; (8004bb4 <xPortStartScheduler+0x134>)
 8004b4c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	b2da      	uxtb	r2, r3
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004b56:	4b18      	ldr	r3, [pc, #96]	; (8004bb8 <xPortStartScheduler+0x138>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a17      	ldr	r2, [pc, #92]	; (8004bb8 <xPortStartScheduler+0x138>)
 8004b5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004b60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004b62:	4b15      	ldr	r3, [pc, #84]	; (8004bb8 <xPortStartScheduler+0x138>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a14      	ldr	r2, [pc, #80]	; (8004bb8 <xPortStartScheduler+0x138>)
 8004b68:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004b6c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004b6e:	f000 f8dd 	bl	8004d2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004b72:	4b12      	ldr	r3, [pc, #72]	; (8004bbc <xPortStartScheduler+0x13c>)
 8004b74:	2200      	movs	r2, #0
 8004b76:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004b78:	f000 f8fc 	bl	8004d74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004b7c:	4b10      	ldr	r3, [pc, #64]	; (8004bc0 <xPortStartScheduler+0x140>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a0f      	ldr	r2, [pc, #60]	; (8004bc0 <xPortStartScheduler+0x140>)
 8004b82:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004b86:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004b88:	f7ff ff66 	bl	8004a58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004b8c:	f001 f9da 	bl	8005f44 <vTaskSwitchContext>
	prvTaskExitError();
 8004b90:	f7ff ff20 	bl	80049d4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004b94:	2300      	movs	r3, #0
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3718      	adds	r7, #24
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	bf00      	nop
 8004ba0:	e000ed00 	.word	0xe000ed00
 8004ba4:	410fc271 	.word	0x410fc271
 8004ba8:	410fc270 	.word	0x410fc270
 8004bac:	e000e400 	.word	0xe000e400
 8004bb0:	20004370 	.word	0x20004370
 8004bb4:	20004374 	.word	0x20004374
 8004bb8:	e000ed20 	.word	0xe000ed20
 8004bbc:	2000000c 	.word	0x2000000c
 8004bc0:	e000ef34 	.word	0xe000ef34

08004bc4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b083      	sub	sp, #12
 8004bc8:	af00      	add	r7, sp, #0
	__asm volatile
 8004bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bce:	f383 8811 	msr	BASEPRI, r3
 8004bd2:	f3bf 8f6f 	isb	sy
 8004bd6:	f3bf 8f4f 	dsb	sy
 8004bda:	607b      	str	r3, [r7, #4]
}
 8004bdc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004bde:	4b0f      	ldr	r3, [pc, #60]	; (8004c1c <vPortEnterCritical+0x58>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	3301      	adds	r3, #1
 8004be4:	4a0d      	ldr	r2, [pc, #52]	; (8004c1c <vPortEnterCritical+0x58>)
 8004be6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004be8:	4b0c      	ldr	r3, [pc, #48]	; (8004c1c <vPortEnterCritical+0x58>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d10f      	bne.n	8004c10 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004bf0:	4b0b      	ldr	r3, [pc, #44]	; (8004c20 <vPortEnterCritical+0x5c>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d00a      	beq.n	8004c10 <vPortEnterCritical+0x4c>
	__asm volatile
 8004bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bfe:	f383 8811 	msr	BASEPRI, r3
 8004c02:	f3bf 8f6f 	isb	sy
 8004c06:	f3bf 8f4f 	dsb	sy
 8004c0a:	603b      	str	r3, [r7, #0]
}
 8004c0c:	bf00      	nop
 8004c0e:	e7fe      	b.n	8004c0e <vPortEnterCritical+0x4a>
	}
}
 8004c10:	bf00      	nop
 8004c12:	370c      	adds	r7, #12
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr
 8004c1c:	2000000c 	.word	0x2000000c
 8004c20:	e000ed04 	.word	0xe000ed04

08004c24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004c24:	b480      	push	{r7}
 8004c26:	b083      	sub	sp, #12
 8004c28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004c2a:	4b12      	ldr	r3, [pc, #72]	; (8004c74 <vPortExitCritical+0x50>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d10a      	bne.n	8004c48 <vPortExitCritical+0x24>
	__asm volatile
 8004c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c36:	f383 8811 	msr	BASEPRI, r3
 8004c3a:	f3bf 8f6f 	isb	sy
 8004c3e:	f3bf 8f4f 	dsb	sy
 8004c42:	607b      	str	r3, [r7, #4]
}
 8004c44:	bf00      	nop
 8004c46:	e7fe      	b.n	8004c46 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004c48:	4b0a      	ldr	r3, [pc, #40]	; (8004c74 <vPortExitCritical+0x50>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	3b01      	subs	r3, #1
 8004c4e:	4a09      	ldr	r2, [pc, #36]	; (8004c74 <vPortExitCritical+0x50>)
 8004c50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004c52:	4b08      	ldr	r3, [pc, #32]	; (8004c74 <vPortExitCritical+0x50>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d105      	bne.n	8004c66 <vPortExitCritical+0x42>
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004c64:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004c66:	bf00      	nop
 8004c68:	370c      	adds	r7, #12
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr
 8004c72:	bf00      	nop
 8004c74:	2000000c 	.word	0x2000000c
	...

08004c80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004c80:	f3ef 8009 	mrs	r0, PSP
 8004c84:	f3bf 8f6f 	isb	sy
 8004c88:	4b15      	ldr	r3, [pc, #84]	; (8004ce0 <pxCurrentTCBConst>)
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	f01e 0f10 	tst.w	lr, #16
 8004c90:	bf08      	it	eq
 8004c92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004c96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c9a:	6010      	str	r0, [r2, #0]
 8004c9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004ca0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004ca4:	f380 8811 	msr	BASEPRI, r0
 8004ca8:	f3bf 8f4f 	dsb	sy
 8004cac:	f3bf 8f6f 	isb	sy
 8004cb0:	f001 f948 	bl	8005f44 <vTaskSwitchContext>
 8004cb4:	f04f 0000 	mov.w	r0, #0
 8004cb8:	f380 8811 	msr	BASEPRI, r0
 8004cbc:	bc09      	pop	{r0, r3}
 8004cbe:	6819      	ldr	r1, [r3, #0]
 8004cc0:	6808      	ldr	r0, [r1, #0]
 8004cc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cc6:	f01e 0f10 	tst.w	lr, #16
 8004cca:	bf08      	it	eq
 8004ccc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004cd0:	f380 8809 	msr	PSP, r0
 8004cd4:	f3bf 8f6f 	isb	sy
 8004cd8:	4770      	bx	lr
 8004cda:	bf00      	nop
 8004cdc:	f3af 8000 	nop.w

08004ce0 <pxCurrentTCBConst>:
 8004ce0:	20004378 	.word	0x20004378
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004ce4:	bf00      	nop
 8004ce6:	bf00      	nop

08004ce8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b082      	sub	sp, #8
 8004cec:	af00      	add	r7, sp, #0
	__asm volatile
 8004cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cf2:	f383 8811 	msr	BASEPRI, r3
 8004cf6:	f3bf 8f6f 	isb	sy
 8004cfa:	f3bf 8f4f 	dsb	sy
 8004cfe:	607b      	str	r3, [r7, #4]
}
 8004d00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004d02:	f001 f865 	bl	8005dd0 <xTaskIncrementTick>
 8004d06:	4603      	mov	r3, r0
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d003      	beq.n	8004d14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004d0c:	4b06      	ldr	r3, [pc, #24]	; (8004d28 <xPortSysTickHandler+0x40>)
 8004d0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d12:	601a      	str	r2, [r3, #0]
 8004d14:	2300      	movs	r3, #0
 8004d16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	f383 8811 	msr	BASEPRI, r3
}
 8004d1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004d20:	bf00      	nop
 8004d22:	3708      	adds	r7, #8
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}
 8004d28:	e000ed04 	.word	0xe000ed04

08004d2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004d30:	4b0b      	ldr	r3, [pc, #44]	; (8004d60 <vPortSetupTimerInterrupt+0x34>)
 8004d32:	2200      	movs	r2, #0
 8004d34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004d36:	4b0b      	ldr	r3, [pc, #44]	; (8004d64 <vPortSetupTimerInterrupt+0x38>)
 8004d38:	2200      	movs	r2, #0
 8004d3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004d3c:	4b0a      	ldr	r3, [pc, #40]	; (8004d68 <vPortSetupTimerInterrupt+0x3c>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a0a      	ldr	r2, [pc, #40]	; (8004d6c <vPortSetupTimerInterrupt+0x40>)
 8004d42:	fba2 2303 	umull	r2, r3, r2, r3
 8004d46:	099b      	lsrs	r3, r3, #6
 8004d48:	4a09      	ldr	r2, [pc, #36]	; (8004d70 <vPortSetupTimerInterrupt+0x44>)
 8004d4a:	3b01      	subs	r3, #1
 8004d4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004d4e:	4b04      	ldr	r3, [pc, #16]	; (8004d60 <vPortSetupTimerInterrupt+0x34>)
 8004d50:	2207      	movs	r2, #7
 8004d52:	601a      	str	r2, [r3, #0]
}
 8004d54:	bf00      	nop
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr
 8004d5e:	bf00      	nop
 8004d60:	e000e010 	.word	0xe000e010
 8004d64:	e000e018 	.word	0xe000e018
 8004d68:	20000000 	.word	0x20000000
 8004d6c:	10624dd3 	.word	0x10624dd3
 8004d70:	e000e014 	.word	0xe000e014

08004d74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004d74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004d84 <vPortEnableVFP+0x10>
 8004d78:	6801      	ldr	r1, [r0, #0]
 8004d7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004d7e:	6001      	str	r1, [r0, #0]
 8004d80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004d82:	bf00      	nop
 8004d84:	e000ed88 	.word	0xe000ed88

08004d88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004d88:	b480      	push	{r7}
 8004d8a:	b085      	sub	sp, #20
 8004d8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004d8e:	f3ef 8305 	mrs	r3, IPSR
 8004d92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2b0f      	cmp	r3, #15
 8004d98:	d914      	bls.n	8004dc4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004d9a:	4a17      	ldr	r2, [pc, #92]	; (8004df8 <vPortValidateInterruptPriority+0x70>)
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	4413      	add	r3, r2
 8004da0:	781b      	ldrb	r3, [r3, #0]
 8004da2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004da4:	4b15      	ldr	r3, [pc, #84]	; (8004dfc <vPortValidateInterruptPriority+0x74>)
 8004da6:	781b      	ldrb	r3, [r3, #0]
 8004da8:	7afa      	ldrb	r2, [r7, #11]
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d20a      	bcs.n	8004dc4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db2:	f383 8811 	msr	BASEPRI, r3
 8004db6:	f3bf 8f6f 	isb	sy
 8004dba:	f3bf 8f4f 	dsb	sy
 8004dbe:	607b      	str	r3, [r7, #4]
}
 8004dc0:	bf00      	nop
 8004dc2:	e7fe      	b.n	8004dc2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004dc4:	4b0e      	ldr	r3, [pc, #56]	; (8004e00 <vPortValidateInterruptPriority+0x78>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004dcc:	4b0d      	ldr	r3, [pc, #52]	; (8004e04 <vPortValidateInterruptPriority+0x7c>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d90a      	bls.n	8004dea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd8:	f383 8811 	msr	BASEPRI, r3
 8004ddc:	f3bf 8f6f 	isb	sy
 8004de0:	f3bf 8f4f 	dsb	sy
 8004de4:	603b      	str	r3, [r7, #0]
}
 8004de6:	bf00      	nop
 8004de8:	e7fe      	b.n	8004de8 <vPortValidateInterruptPriority+0x60>
	}
 8004dea:	bf00      	nop
 8004dec:	3714      	adds	r7, #20
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr
 8004df6:	bf00      	nop
 8004df8:	e000e3f0 	.word	0xe000e3f0
 8004dfc:	20004370 	.word	0x20004370
 8004e00:	e000ed0c 	.word	0xe000ed0c
 8004e04:	20004374 	.word	0x20004374

08004e08 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b084      	sub	sp, #16
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d10a      	bne.n	8004e32 <xQueueGenericReset+0x2a>
	__asm volatile
 8004e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e20:	f383 8811 	msr	BASEPRI, r3
 8004e24:	f3bf 8f6f 	isb	sy
 8004e28:	f3bf 8f4f 	dsb	sy
 8004e2c:	60bb      	str	r3, [r7, #8]
}
 8004e2e:	bf00      	nop
 8004e30:	e7fe      	b.n	8004e30 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004e32:	f7ff fec7 	bl	8004bc4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e3e:	68f9      	ldr	r1, [r7, #12]
 8004e40:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004e42:	fb01 f303 	mul.w	r3, r1, r3
 8004e46:	441a      	add	r2, r3
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e62:	3b01      	subs	r3, #1
 8004e64:	68f9      	ldr	r1, [r7, #12]
 8004e66:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004e68:	fb01 f303 	mul.w	r3, r1, r3
 8004e6c:	441a      	add	r2, r3
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	22ff      	movs	r2, #255	; 0xff
 8004e76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	22ff      	movs	r2, #255	; 0xff
 8004e7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d114      	bne.n	8004eb2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	691b      	ldr	r3, [r3, #16]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d01a      	beq.n	8004ec6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	3310      	adds	r3, #16
 8004e94:	4618      	mov	r0, r3
 8004e96:	f001 f903 	bl	80060a0 <xTaskRemoveFromEventList>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d012      	beq.n	8004ec6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004ea0:	4b0c      	ldr	r3, [pc, #48]	; (8004ed4 <xQueueGenericReset+0xcc>)
 8004ea2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ea6:	601a      	str	r2, [r3, #0]
 8004ea8:	f3bf 8f4f 	dsb	sy
 8004eac:	f3bf 8f6f 	isb	sy
 8004eb0:	e009      	b.n	8004ec6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	3310      	adds	r3, #16
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f7ff fca4 	bl	8004804 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	3324      	adds	r3, #36	; 0x24
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f7ff fc9f 	bl	8004804 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004ec6:	f7ff fead 	bl	8004c24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004eca:	2301      	movs	r3, #1
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3710      	adds	r7, #16
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}
 8004ed4:	e000ed04 	.word	0xe000ed04

08004ed8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b08e      	sub	sp, #56	; 0x38
 8004edc:	af02      	add	r7, sp, #8
 8004ede:	60f8      	str	r0, [r7, #12]
 8004ee0:	60b9      	str	r1, [r7, #8]
 8004ee2:	607a      	str	r2, [r7, #4]
 8004ee4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d10a      	bne.n	8004f02 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ef0:	f383 8811 	msr	BASEPRI, r3
 8004ef4:	f3bf 8f6f 	isb	sy
 8004ef8:	f3bf 8f4f 	dsb	sy
 8004efc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004efe:	bf00      	nop
 8004f00:	e7fe      	b.n	8004f00 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d10a      	bne.n	8004f1e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f0c:	f383 8811 	msr	BASEPRI, r3
 8004f10:	f3bf 8f6f 	isb	sy
 8004f14:	f3bf 8f4f 	dsb	sy
 8004f18:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004f1a:	bf00      	nop
 8004f1c:	e7fe      	b.n	8004f1c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d002      	beq.n	8004f2a <xQueueGenericCreateStatic+0x52>
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d001      	beq.n	8004f2e <xQueueGenericCreateStatic+0x56>
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e000      	b.n	8004f30 <xQueueGenericCreateStatic+0x58>
 8004f2e:	2300      	movs	r3, #0
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d10a      	bne.n	8004f4a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f38:	f383 8811 	msr	BASEPRI, r3
 8004f3c:	f3bf 8f6f 	isb	sy
 8004f40:	f3bf 8f4f 	dsb	sy
 8004f44:	623b      	str	r3, [r7, #32]
}
 8004f46:	bf00      	nop
 8004f48:	e7fe      	b.n	8004f48 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d102      	bne.n	8004f56 <xQueueGenericCreateStatic+0x7e>
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d101      	bne.n	8004f5a <xQueueGenericCreateStatic+0x82>
 8004f56:	2301      	movs	r3, #1
 8004f58:	e000      	b.n	8004f5c <xQueueGenericCreateStatic+0x84>
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d10a      	bne.n	8004f76 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f64:	f383 8811 	msr	BASEPRI, r3
 8004f68:	f3bf 8f6f 	isb	sy
 8004f6c:	f3bf 8f4f 	dsb	sy
 8004f70:	61fb      	str	r3, [r7, #28]
}
 8004f72:	bf00      	nop
 8004f74:	e7fe      	b.n	8004f74 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004f76:	2350      	movs	r3, #80	; 0x50
 8004f78:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	2b50      	cmp	r3, #80	; 0x50
 8004f7e:	d00a      	beq.n	8004f96 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f84:	f383 8811 	msr	BASEPRI, r3
 8004f88:	f3bf 8f6f 	isb	sy
 8004f8c:	f3bf 8f4f 	dsb	sy
 8004f90:	61bb      	str	r3, [r7, #24]
}
 8004f92:	bf00      	nop
 8004f94:	e7fe      	b.n	8004f94 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004f96:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d00d      	beq.n	8004fbe <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004faa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fb0:	9300      	str	r3, [sp, #0]
 8004fb2:	4613      	mov	r3, r2
 8004fb4:	687a      	ldr	r2, [r7, #4]
 8004fb6:	68b9      	ldr	r1, [r7, #8]
 8004fb8:	68f8      	ldr	r0, [r7, #12]
 8004fba:	f000 f805 	bl	8004fc8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3730      	adds	r7, #48	; 0x30
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}

08004fc8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b084      	sub	sp, #16
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	60b9      	str	r1, [r7, #8]
 8004fd2:	607a      	str	r2, [r7, #4]
 8004fd4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d103      	bne.n	8004fe4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004fdc:	69bb      	ldr	r3, [r7, #24]
 8004fde:	69ba      	ldr	r2, [r7, #24]
 8004fe0:	601a      	str	r2, [r3, #0]
 8004fe2:	e002      	b.n	8004fea <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004fe4:	69bb      	ldr	r3, [r7, #24]
 8004fe6:	687a      	ldr	r2, [r7, #4]
 8004fe8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004fea:	69bb      	ldr	r3, [r7, #24]
 8004fec:	68fa      	ldr	r2, [r7, #12]
 8004fee:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004ff0:	69bb      	ldr	r3, [r7, #24]
 8004ff2:	68ba      	ldr	r2, [r7, #8]
 8004ff4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004ff6:	2101      	movs	r1, #1
 8004ff8:	69b8      	ldr	r0, [r7, #24]
 8004ffa:	f7ff ff05 	bl	8004e08 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004ffe:	69bb      	ldr	r3, [r7, #24]
 8005000:	78fa      	ldrb	r2, [r7, #3]
 8005002:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005006:	bf00      	nop
 8005008:	3710      	adds	r7, #16
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}
	...

08005010 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b08e      	sub	sp, #56	; 0x38
 8005014:	af00      	add	r7, sp, #0
 8005016:	60f8      	str	r0, [r7, #12]
 8005018:	60b9      	str	r1, [r7, #8]
 800501a:	607a      	str	r2, [r7, #4]
 800501c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800501e:	2300      	movs	r3, #0
 8005020:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005028:	2b00      	cmp	r3, #0
 800502a:	d10a      	bne.n	8005042 <xQueueGenericSend+0x32>
	__asm volatile
 800502c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005030:	f383 8811 	msr	BASEPRI, r3
 8005034:	f3bf 8f6f 	isb	sy
 8005038:	f3bf 8f4f 	dsb	sy
 800503c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800503e:	bf00      	nop
 8005040:	e7fe      	b.n	8005040 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d103      	bne.n	8005050 <xQueueGenericSend+0x40>
 8005048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800504a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800504c:	2b00      	cmp	r3, #0
 800504e:	d101      	bne.n	8005054 <xQueueGenericSend+0x44>
 8005050:	2301      	movs	r3, #1
 8005052:	e000      	b.n	8005056 <xQueueGenericSend+0x46>
 8005054:	2300      	movs	r3, #0
 8005056:	2b00      	cmp	r3, #0
 8005058:	d10a      	bne.n	8005070 <xQueueGenericSend+0x60>
	__asm volatile
 800505a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800505e:	f383 8811 	msr	BASEPRI, r3
 8005062:	f3bf 8f6f 	isb	sy
 8005066:	f3bf 8f4f 	dsb	sy
 800506a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800506c:	bf00      	nop
 800506e:	e7fe      	b.n	800506e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	2b02      	cmp	r3, #2
 8005074:	d103      	bne.n	800507e <xQueueGenericSend+0x6e>
 8005076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800507a:	2b01      	cmp	r3, #1
 800507c:	d101      	bne.n	8005082 <xQueueGenericSend+0x72>
 800507e:	2301      	movs	r3, #1
 8005080:	e000      	b.n	8005084 <xQueueGenericSend+0x74>
 8005082:	2300      	movs	r3, #0
 8005084:	2b00      	cmp	r3, #0
 8005086:	d10a      	bne.n	800509e <xQueueGenericSend+0x8e>
	__asm volatile
 8005088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800508c:	f383 8811 	msr	BASEPRI, r3
 8005090:	f3bf 8f6f 	isb	sy
 8005094:	f3bf 8f4f 	dsb	sy
 8005098:	623b      	str	r3, [r7, #32]
}
 800509a:	bf00      	nop
 800509c:	e7fe      	b.n	800509c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800509e:	f001 f9bd 	bl	800641c <xTaskGetSchedulerState>
 80050a2:	4603      	mov	r3, r0
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d102      	bne.n	80050ae <xQueueGenericSend+0x9e>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d101      	bne.n	80050b2 <xQueueGenericSend+0xa2>
 80050ae:	2301      	movs	r3, #1
 80050b0:	e000      	b.n	80050b4 <xQueueGenericSend+0xa4>
 80050b2:	2300      	movs	r3, #0
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d10a      	bne.n	80050ce <xQueueGenericSend+0xbe>
	__asm volatile
 80050b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050bc:	f383 8811 	msr	BASEPRI, r3
 80050c0:	f3bf 8f6f 	isb	sy
 80050c4:	f3bf 8f4f 	dsb	sy
 80050c8:	61fb      	str	r3, [r7, #28]
}
 80050ca:	bf00      	nop
 80050cc:	e7fe      	b.n	80050cc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80050ce:	f7ff fd79 	bl	8004bc4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80050d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050da:	429a      	cmp	r2, r3
 80050dc:	d302      	bcc.n	80050e4 <xQueueGenericSend+0xd4>
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	2b02      	cmp	r3, #2
 80050e2:	d129      	bne.n	8005138 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80050e4:	683a      	ldr	r2, [r7, #0]
 80050e6:	68b9      	ldr	r1, [r7, #8]
 80050e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80050ea:	f000 fa0b 	bl	8005504 <prvCopyDataToQueue>
 80050ee:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80050f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d010      	beq.n	800511a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80050f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050fa:	3324      	adds	r3, #36	; 0x24
 80050fc:	4618      	mov	r0, r3
 80050fe:	f000 ffcf 	bl	80060a0 <xTaskRemoveFromEventList>
 8005102:	4603      	mov	r3, r0
 8005104:	2b00      	cmp	r3, #0
 8005106:	d013      	beq.n	8005130 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005108:	4b3f      	ldr	r3, [pc, #252]	; (8005208 <xQueueGenericSend+0x1f8>)
 800510a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800510e:	601a      	str	r2, [r3, #0]
 8005110:	f3bf 8f4f 	dsb	sy
 8005114:	f3bf 8f6f 	isb	sy
 8005118:	e00a      	b.n	8005130 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800511a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800511c:	2b00      	cmp	r3, #0
 800511e:	d007      	beq.n	8005130 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005120:	4b39      	ldr	r3, [pc, #228]	; (8005208 <xQueueGenericSend+0x1f8>)
 8005122:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005126:	601a      	str	r2, [r3, #0]
 8005128:	f3bf 8f4f 	dsb	sy
 800512c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005130:	f7ff fd78 	bl	8004c24 <vPortExitCritical>
				return pdPASS;
 8005134:	2301      	movs	r3, #1
 8005136:	e063      	b.n	8005200 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d103      	bne.n	8005146 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800513e:	f7ff fd71 	bl	8004c24 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005142:	2300      	movs	r3, #0
 8005144:	e05c      	b.n	8005200 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005146:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005148:	2b00      	cmp	r3, #0
 800514a:	d106      	bne.n	800515a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800514c:	f107 0314 	add.w	r3, r7, #20
 8005150:	4618      	mov	r0, r3
 8005152:	f001 f809 	bl	8006168 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005156:	2301      	movs	r3, #1
 8005158:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800515a:	f7ff fd63 	bl	8004c24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800515e:	f000 fd7b 	bl	8005c58 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005162:	f7ff fd2f 	bl	8004bc4 <vPortEnterCritical>
 8005166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005168:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800516c:	b25b      	sxtb	r3, r3
 800516e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005172:	d103      	bne.n	800517c <xQueueGenericSend+0x16c>
 8005174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005176:	2200      	movs	r2, #0
 8005178:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800517c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800517e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005182:	b25b      	sxtb	r3, r3
 8005184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005188:	d103      	bne.n	8005192 <xQueueGenericSend+0x182>
 800518a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800518c:	2200      	movs	r2, #0
 800518e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005192:	f7ff fd47 	bl	8004c24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005196:	1d3a      	adds	r2, r7, #4
 8005198:	f107 0314 	add.w	r3, r7, #20
 800519c:	4611      	mov	r1, r2
 800519e:	4618      	mov	r0, r3
 80051a0:	f000 fff8 	bl	8006194 <xTaskCheckForTimeOut>
 80051a4:	4603      	mov	r3, r0
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d124      	bne.n	80051f4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80051aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80051ac:	f000 faa2 	bl	80056f4 <prvIsQueueFull>
 80051b0:	4603      	mov	r3, r0
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d018      	beq.n	80051e8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80051b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b8:	3310      	adds	r3, #16
 80051ba:	687a      	ldr	r2, [r7, #4]
 80051bc:	4611      	mov	r1, r2
 80051be:	4618      	mov	r0, r3
 80051c0:	f000 ff1e 	bl	8006000 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80051c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80051c6:	f000 fa2d 	bl	8005624 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80051ca:	f000 fd53 	bl	8005c74 <xTaskResumeAll>
 80051ce:	4603      	mov	r3, r0
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	f47f af7c 	bne.w	80050ce <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80051d6:	4b0c      	ldr	r3, [pc, #48]	; (8005208 <xQueueGenericSend+0x1f8>)
 80051d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051dc:	601a      	str	r2, [r3, #0]
 80051de:	f3bf 8f4f 	dsb	sy
 80051e2:	f3bf 8f6f 	isb	sy
 80051e6:	e772      	b.n	80050ce <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80051e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80051ea:	f000 fa1b 	bl	8005624 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80051ee:	f000 fd41 	bl	8005c74 <xTaskResumeAll>
 80051f2:	e76c      	b.n	80050ce <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80051f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80051f6:	f000 fa15 	bl	8005624 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80051fa:	f000 fd3b 	bl	8005c74 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80051fe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005200:	4618      	mov	r0, r3
 8005202:	3738      	adds	r7, #56	; 0x38
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}
 8005208:	e000ed04 	.word	0xe000ed04

0800520c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b090      	sub	sp, #64	; 0x40
 8005210:	af00      	add	r7, sp, #0
 8005212:	60f8      	str	r0, [r7, #12]
 8005214:	60b9      	str	r1, [r7, #8]
 8005216:	607a      	str	r2, [r7, #4]
 8005218:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800521e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005220:	2b00      	cmp	r3, #0
 8005222:	d10a      	bne.n	800523a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005228:	f383 8811 	msr	BASEPRI, r3
 800522c:	f3bf 8f6f 	isb	sy
 8005230:	f3bf 8f4f 	dsb	sy
 8005234:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005236:	bf00      	nop
 8005238:	e7fe      	b.n	8005238 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d103      	bne.n	8005248 <xQueueGenericSendFromISR+0x3c>
 8005240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005244:	2b00      	cmp	r3, #0
 8005246:	d101      	bne.n	800524c <xQueueGenericSendFromISR+0x40>
 8005248:	2301      	movs	r3, #1
 800524a:	e000      	b.n	800524e <xQueueGenericSendFromISR+0x42>
 800524c:	2300      	movs	r3, #0
 800524e:	2b00      	cmp	r3, #0
 8005250:	d10a      	bne.n	8005268 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005256:	f383 8811 	msr	BASEPRI, r3
 800525a:	f3bf 8f6f 	isb	sy
 800525e:	f3bf 8f4f 	dsb	sy
 8005262:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005264:	bf00      	nop
 8005266:	e7fe      	b.n	8005266 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	2b02      	cmp	r3, #2
 800526c:	d103      	bne.n	8005276 <xQueueGenericSendFromISR+0x6a>
 800526e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005272:	2b01      	cmp	r3, #1
 8005274:	d101      	bne.n	800527a <xQueueGenericSendFromISR+0x6e>
 8005276:	2301      	movs	r3, #1
 8005278:	e000      	b.n	800527c <xQueueGenericSendFromISR+0x70>
 800527a:	2300      	movs	r3, #0
 800527c:	2b00      	cmp	r3, #0
 800527e:	d10a      	bne.n	8005296 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005284:	f383 8811 	msr	BASEPRI, r3
 8005288:	f3bf 8f6f 	isb	sy
 800528c:	f3bf 8f4f 	dsb	sy
 8005290:	623b      	str	r3, [r7, #32]
}
 8005292:	bf00      	nop
 8005294:	e7fe      	b.n	8005294 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005296:	f7ff fd77 	bl	8004d88 <vPortValidateInterruptPriority>
	__asm volatile
 800529a:	f3ef 8211 	mrs	r2, BASEPRI
 800529e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a2:	f383 8811 	msr	BASEPRI, r3
 80052a6:	f3bf 8f6f 	isb	sy
 80052aa:	f3bf 8f4f 	dsb	sy
 80052ae:	61fa      	str	r2, [r7, #28]
 80052b0:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 80052b2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80052b4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80052b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052be:	429a      	cmp	r2, r3
 80052c0:	d302      	bcc.n	80052c8 <xQueueGenericSendFromISR+0xbc>
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	2b02      	cmp	r3, #2
 80052c6:	d12f      	bne.n	8005328 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80052c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80052ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80052d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80052d8:	683a      	ldr	r2, [r7, #0]
 80052da:	68b9      	ldr	r1, [r7, #8]
 80052dc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80052de:	f000 f911 	bl	8005504 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80052e2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80052e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ea:	d112      	bne.n	8005312 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80052ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d016      	beq.n	8005322 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80052f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052f6:	3324      	adds	r3, #36	; 0x24
 80052f8:	4618      	mov	r0, r3
 80052fa:	f000 fed1 	bl	80060a0 <xTaskRemoveFromEventList>
 80052fe:	4603      	mov	r3, r0
 8005300:	2b00      	cmp	r3, #0
 8005302:	d00e      	beq.n	8005322 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d00b      	beq.n	8005322 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2201      	movs	r2, #1
 800530e:	601a      	str	r2, [r3, #0]
 8005310:	e007      	b.n	8005322 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005312:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005316:	3301      	adds	r3, #1
 8005318:	b2db      	uxtb	r3, r3
 800531a:	b25a      	sxtb	r2, r3
 800531c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800531e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005322:	2301      	movs	r3, #1
 8005324:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005326:	e001      	b.n	800532c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005328:	2300      	movs	r3, #0
 800532a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800532c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800532e:	617b      	str	r3, [r7, #20]
	__asm volatile
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	f383 8811 	msr	BASEPRI, r3
}
 8005336:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005338:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800533a:	4618      	mov	r0, r3
 800533c:	3740      	adds	r7, #64	; 0x40
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}
	...

08005344 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b08c      	sub	sp, #48	; 0x30
 8005348:	af00      	add	r7, sp, #0
 800534a:	60f8      	str	r0, [r7, #12]
 800534c:	60b9      	str	r1, [r7, #8]
 800534e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005350:	2300      	movs	r3, #0
 8005352:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800535a:	2b00      	cmp	r3, #0
 800535c:	d10a      	bne.n	8005374 <xQueueReceive+0x30>
	__asm volatile
 800535e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005362:	f383 8811 	msr	BASEPRI, r3
 8005366:	f3bf 8f6f 	isb	sy
 800536a:	f3bf 8f4f 	dsb	sy
 800536e:	623b      	str	r3, [r7, #32]
}
 8005370:	bf00      	nop
 8005372:	e7fe      	b.n	8005372 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d103      	bne.n	8005382 <xQueueReceive+0x3e>
 800537a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800537c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800537e:	2b00      	cmp	r3, #0
 8005380:	d101      	bne.n	8005386 <xQueueReceive+0x42>
 8005382:	2301      	movs	r3, #1
 8005384:	e000      	b.n	8005388 <xQueueReceive+0x44>
 8005386:	2300      	movs	r3, #0
 8005388:	2b00      	cmp	r3, #0
 800538a:	d10a      	bne.n	80053a2 <xQueueReceive+0x5e>
	__asm volatile
 800538c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005390:	f383 8811 	msr	BASEPRI, r3
 8005394:	f3bf 8f6f 	isb	sy
 8005398:	f3bf 8f4f 	dsb	sy
 800539c:	61fb      	str	r3, [r7, #28]
}
 800539e:	bf00      	nop
 80053a0:	e7fe      	b.n	80053a0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80053a2:	f001 f83b 	bl	800641c <xTaskGetSchedulerState>
 80053a6:	4603      	mov	r3, r0
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d102      	bne.n	80053b2 <xQueueReceive+0x6e>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d101      	bne.n	80053b6 <xQueueReceive+0x72>
 80053b2:	2301      	movs	r3, #1
 80053b4:	e000      	b.n	80053b8 <xQueueReceive+0x74>
 80053b6:	2300      	movs	r3, #0
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d10a      	bne.n	80053d2 <xQueueReceive+0x8e>
	__asm volatile
 80053bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053c0:	f383 8811 	msr	BASEPRI, r3
 80053c4:	f3bf 8f6f 	isb	sy
 80053c8:	f3bf 8f4f 	dsb	sy
 80053cc:	61bb      	str	r3, [r7, #24]
}
 80053ce:	bf00      	nop
 80053d0:	e7fe      	b.n	80053d0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80053d2:	f7ff fbf7 	bl	8004bc4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80053d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053da:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80053dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d01f      	beq.n	8005422 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80053e2:	68b9      	ldr	r1, [r7, #8]
 80053e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053e6:	f000 f8f7 	bl	80055d8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80053ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ec:	1e5a      	subs	r2, r3, #1
 80053ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80053f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f4:	691b      	ldr	r3, [r3, #16]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d00f      	beq.n	800541a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80053fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053fc:	3310      	adds	r3, #16
 80053fe:	4618      	mov	r0, r3
 8005400:	f000 fe4e 	bl	80060a0 <xTaskRemoveFromEventList>
 8005404:	4603      	mov	r3, r0
 8005406:	2b00      	cmp	r3, #0
 8005408:	d007      	beq.n	800541a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800540a:	4b3d      	ldr	r3, [pc, #244]	; (8005500 <xQueueReceive+0x1bc>)
 800540c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005410:	601a      	str	r2, [r3, #0]
 8005412:	f3bf 8f4f 	dsb	sy
 8005416:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800541a:	f7ff fc03 	bl	8004c24 <vPortExitCritical>
				return pdPASS;
 800541e:	2301      	movs	r3, #1
 8005420:	e069      	b.n	80054f6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d103      	bne.n	8005430 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005428:	f7ff fbfc 	bl	8004c24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800542c:	2300      	movs	r3, #0
 800542e:	e062      	b.n	80054f6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005432:	2b00      	cmp	r3, #0
 8005434:	d106      	bne.n	8005444 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005436:	f107 0310 	add.w	r3, r7, #16
 800543a:	4618      	mov	r0, r3
 800543c:	f000 fe94 	bl	8006168 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005440:	2301      	movs	r3, #1
 8005442:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005444:	f7ff fbee 	bl	8004c24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005448:	f000 fc06 	bl	8005c58 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800544c:	f7ff fbba 	bl	8004bc4 <vPortEnterCritical>
 8005450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005452:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005456:	b25b      	sxtb	r3, r3
 8005458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800545c:	d103      	bne.n	8005466 <xQueueReceive+0x122>
 800545e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005460:	2200      	movs	r2, #0
 8005462:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005468:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800546c:	b25b      	sxtb	r3, r3
 800546e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005472:	d103      	bne.n	800547c <xQueueReceive+0x138>
 8005474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005476:	2200      	movs	r2, #0
 8005478:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800547c:	f7ff fbd2 	bl	8004c24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005480:	1d3a      	adds	r2, r7, #4
 8005482:	f107 0310 	add.w	r3, r7, #16
 8005486:	4611      	mov	r1, r2
 8005488:	4618      	mov	r0, r3
 800548a:	f000 fe83 	bl	8006194 <xTaskCheckForTimeOut>
 800548e:	4603      	mov	r3, r0
 8005490:	2b00      	cmp	r3, #0
 8005492:	d123      	bne.n	80054dc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005494:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005496:	f000 f917 	bl	80056c8 <prvIsQueueEmpty>
 800549a:	4603      	mov	r3, r0
 800549c:	2b00      	cmp	r3, #0
 800549e:	d017      	beq.n	80054d0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80054a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054a2:	3324      	adds	r3, #36	; 0x24
 80054a4:	687a      	ldr	r2, [r7, #4]
 80054a6:	4611      	mov	r1, r2
 80054a8:	4618      	mov	r0, r3
 80054aa:	f000 fda9 	bl	8006000 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80054ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054b0:	f000 f8b8 	bl	8005624 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80054b4:	f000 fbde 	bl	8005c74 <xTaskResumeAll>
 80054b8:	4603      	mov	r3, r0
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d189      	bne.n	80053d2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80054be:	4b10      	ldr	r3, [pc, #64]	; (8005500 <xQueueReceive+0x1bc>)
 80054c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054c4:	601a      	str	r2, [r3, #0]
 80054c6:	f3bf 8f4f 	dsb	sy
 80054ca:	f3bf 8f6f 	isb	sy
 80054ce:	e780      	b.n	80053d2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80054d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054d2:	f000 f8a7 	bl	8005624 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80054d6:	f000 fbcd 	bl	8005c74 <xTaskResumeAll>
 80054da:	e77a      	b.n	80053d2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80054dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054de:	f000 f8a1 	bl	8005624 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80054e2:	f000 fbc7 	bl	8005c74 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80054e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80054e8:	f000 f8ee 	bl	80056c8 <prvIsQueueEmpty>
 80054ec:	4603      	mov	r3, r0
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	f43f af6f 	beq.w	80053d2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80054f4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3730      	adds	r7, #48	; 0x30
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}
 80054fe:	bf00      	nop
 8005500:	e000ed04 	.word	0xe000ed04

08005504 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b086      	sub	sp, #24
 8005508:	af00      	add	r7, sp, #0
 800550a:	60f8      	str	r0, [r7, #12]
 800550c:	60b9      	str	r1, [r7, #8]
 800550e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005510:	2300      	movs	r3, #0
 8005512:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005518:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800551e:	2b00      	cmp	r3, #0
 8005520:	d10d      	bne.n	800553e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d14d      	bne.n	80055c6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	689b      	ldr	r3, [r3, #8]
 800552e:	4618      	mov	r0, r3
 8005530:	f000 ff92 	bl	8006458 <xTaskPriorityDisinherit>
 8005534:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2200      	movs	r2, #0
 800553a:	609a      	str	r2, [r3, #8]
 800553c:	e043      	b.n	80055c6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d119      	bne.n	8005578 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	6858      	ldr	r0, [r3, #4]
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800554c:	461a      	mov	r2, r3
 800554e:	68b9      	ldr	r1, [r7, #8]
 8005550:	f001 fdee 	bl	8007130 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	685a      	ldr	r2, [r3, #4]
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800555c:	441a      	add	r2, r3
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	685a      	ldr	r2, [r3, #4]
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	429a      	cmp	r2, r3
 800556c:	d32b      	bcc.n	80055c6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681a      	ldr	r2, [r3, #0]
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	605a      	str	r2, [r3, #4]
 8005576:	e026      	b.n	80055c6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	68d8      	ldr	r0, [r3, #12]
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005580:	461a      	mov	r2, r3
 8005582:	68b9      	ldr	r1, [r7, #8]
 8005584:	f001 fdd4 	bl	8007130 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	68da      	ldr	r2, [r3, #12]
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005590:	425b      	negs	r3, r3
 8005592:	441a      	add	r2, r3
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	68da      	ldr	r2, [r3, #12]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d207      	bcs.n	80055b4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	689a      	ldr	r2, [r3, #8]
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ac:	425b      	negs	r3, r3
 80055ae:	441a      	add	r2, r3
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2b02      	cmp	r3, #2
 80055b8:	d105      	bne.n	80055c6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d002      	beq.n	80055c6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	3b01      	subs	r3, #1
 80055c4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	1c5a      	adds	r2, r3, #1
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80055ce:	697b      	ldr	r3, [r7, #20]
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	3718      	adds	r7, #24
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}

080055d8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b082      	sub	sp, #8
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
 80055e0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d018      	beq.n	800561c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	68da      	ldr	r2, [r3, #12]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f2:	441a      	add	r2, r3
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	68da      	ldr	r2, [r3, #12]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	429a      	cmp	r2, r3
 8005602:	d303      	bcc.n	800560c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	68d9      	ldr	r1, [r3, #12]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005614:	461a      	mov	r2, r3
 8005616:	6838      	ldr	r0, [r7, #0]
 8005618:	f001 fd8a 	bl	8007130 <memcpy>
	}
}
 800561c:	bf00      	nop
 800561e:	3708      	adds	r7, #8
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}

08005624 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b084      	sub	sp, #16
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800562c:	f7ff faca 	bl	8004bc4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005636:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005638:	e011      	b.n	800565e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800563e:	2b00      	cmp	r3, #0
 8005640:	d012      	beq.n	8005668 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	3324      	adds	r3, #36	; 0x24
 8005646:	4618      	mov	r0, r3
 8005648:	f000 fd2a 	bl	80060a0 <xTaskRemoveFromEventList>
 800564c:	4603      	mov	r3, r0
 800564e:	2b00      	cmp	r3, #0
 8005650:	d001      	beq.n	8005656 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005652:	f000 fe01 	bl	8006258 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005656:	7bfb      	ldrb	r3, [r7, #15]
 8005658:	3b01      	subs	r3, #1
 800565a:	b2db      	uxtb	r3, r3
 800565c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800565e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005662:	2b00      	cmp	r3, #0
 8005664:	dce9      	bgt.n	800563a <prvUnlockQueue+0x16>
 8005666:	e000      	b.n	800566a <prvUnlockQueue+0x46>
					break;
 8005668:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	22ff      	movs	r2, #255	; 0xff
 800566e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005672:	f7ff fad7 	bl	8004c24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005676:	f7ff faa5 	bl	8004bc4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005680:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005682:	e011      	b.n	80056a8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	691b      	ldr	r3, [r3, #16]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d012      	beq.n	80056b2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	3310      	adds	r3, #16
 8005690:	4618      	mov	r0, r3
 8005692:	f000 fd05 	bl	80060a0 <xTaskRemoveFromEventList>
 8005696:	4603      	mov	r3, r0
 8005698:	2b00      	cmp	r3, #0
 800569a:	d001      	beq.n	80056a0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800569c:	f000 fddc 	bl	8006258 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80056a0:	7bbb      	ldrb	r3, [r7, #14]
 80056a2:	3b01      	subs	r3, #1
 80056a4:	b2db      	uxtb	r3, r3
 80056a6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80056a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	dce9      	bgt.n	8005684 <prvUnlockQueue+0x60>
 80056b0:	e000      	b.n	80056b4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80056b2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	22ff      	movs	r2, #255	; 0xff
 80056b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80056bc:	f7ff fab2 	bl	8004c24 <vPortExitCritical>
}
 80056c0:	bf00      	nop
 80056c2:	3710      	adds	r7, #16
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}

080056c8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b084      	sub	sp, #16
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80056d0:	f7ff fa78 	bl	8004bc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d102      	bne.n	80056e2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80056dc:	2301      	movs	r3, #1
 80056de:	60fb      	str	r3, [r7, #12]
 80056e0:	e001      	b.n	80056e6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80056e2:	2300      	movs	r3, #0
 80056e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80056e6:	f7ff fa9d 	bl	8004c24 <vPortExitCritical>

	return xReturn;
 80056ea:	68fb      	ldr	r3, [r7, #12]
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3710      	adds	r7, #16
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}

080056f4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b084      	sub	sp, #16
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80056fc:	f7ff fa62 	bl	8004bc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005708:	429a      	cmp	r2, r3
 800570a:	d102      	bne.n	8005712 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800570c:	2301      	movs	r3, #1
 800570e:	60fb      	str	r3, [r7, #12]
 8005710:	e001      	b.n	8005716 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005712:	2300      	movs	r3, #0
 8005714:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005716:	f7ff fa85 	bl	8004c24 <vPortExitCritical>

	return xReturn;
 800571a:	68fb      	ldr	r3, [r7, #12]
}
 800571c:	4618      	mov	r0, r3
 800571e:	3710      	adds	r7, #16
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}

08005724 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005724:	b480      	push	{r7}
 8005726:	b085      	sub	sp, #20
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800572e:	2300      	movs	r3, #0
 8005730:	60fb      	str	r3, [r7, #12]
 8005732:	e014      	b.n	800575e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005734:	4a0f      	ldr	r2, [pc, #60]	; (8005774 <vQueueAddToRegistry+0x50>)
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d10b      	bne.n	8005758 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005740:	490c      	ldr	r1, [pc, #48]	; (8005774 <vQueueAddToRegistry+0x50>)
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	683a      	ldr	r2, [r7, #0]
 8005746:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800574a:	4a0a      	ldr	r2, [pc, #40]	; (8005774 <vQueueAddToRegistry+0x50>)
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	00db      	lsls	r3, r3, #3
 8005750:	4413      	add	r3, r2
 8005752:	687a      	ldr	r2, [r7, #4]
 8005754:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005756:	e006      	b.n	8005766 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	3301      	adds	r3, #1
 800575c:	60fb      	str	r3, [r7, #12]
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2b07      	cmp	r3, #7
 8005762:	d9e7      	bls.n	8005734 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005764:	bf00      	nop
 8005766:	bf00      	nop
 8005768:	3714      	adds	r7, #20
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr
 8005772:	bf00      	nop
 8005774:	20004b58 	.word	0x20004b58

08005778 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005778:	b580      	push	{r7, lr}
 800577a:	b086      	sub	sp, #24
 800577c:	af00      	add	r7, sp, #0
 800577e:	60f8      	str	r0, [r7, #12]
 8005780:	60b9      	str	r1, [r7, #8]
 8005782:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005788:	f7ff fa1c 	bl	8004bc4 <vPortEnterCritical>
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005792:	b25b      	sxtb	r3, r3
 8005794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005798:	d103      	bne.n	80057a2 <vQueueWaitForMessageRestricted+0x2a>
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	2200      	movs	r2, #0
 800579e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80057a8:	b25b      	sxtb	r3, r3
 80057aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ae:	d103      	bne.n	80057b8 <vQueueWaitForMessageRestricted+0x40>
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	2200      	movs	r2, #0
 80057b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80057b8:	f7ff fa34 	bl	8004c24 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d106      	bne.n	80057d2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	3324      	adds	r3, #36	; 0x24
 80057c8:	687a      	ldr	r2, [r7, #4]
 80057ca:	68b9      	ldr	r1, [r7, #8]
 80057cc:	4618      	mov	r0, r3
 80057ce:	f000 fc3b 	bl	8006048 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80057d2:	6978      	ldr	r0, [r7, #20]
 80057d4:	f7ff ff26 	bl	8005624 <prvUnlockQueue>
	}
 80057d8:	bf00      	nop
 80057da:	3718      	adds	r7, #24
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}

080057e0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b08e      	sub	sp, #56	; 0x38
 80057e4:	af04      	add	r7, sp, #16
 80057e6:	60f8      	str	r0, [r7, #12]
 80057e8:	60b9      	str	r1, [r7, #8]
 80057ea:	607a      	str	r2, [r7, #4]
 80057ec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80057ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d10a      	bne.n	800580a <xTaskCreateStatic+0x2a>
	__asm volatile
 80057f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f8:	f383 8811 	msr	BASEPRI, r3
 80057fc:	f3bf 8f6f 	isb	sy
 8005800:	f3bf 8f4f 	dsb	sy
 8005804:	623b      	str	r3, [r7, #32]
}
 8005806:	bf00      	nop
 8005808:	e7fe      	b.n	8005808 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800580a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800580c:	2b00      	cmp	r3, #0
 800580e:	d10a      	bne.n	8005826 <xTaskCreateStatic+0x46>
	__asm volatile
 8005810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005814:	f383 8811 	msr	BASEPRI, r3
 8005818:	f3bf 8f6f 	isb	sy
 800581c:	f3bf 8f4f 	dsb	sy
 8005820:	61fb      	str	r3, [r7, #28]
}
 8005822:	bf00      	nop
 8005824:	e7fe      	b.n	8005824 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005826:	235c      	movs	r3, #92	; 0x5c
 8005828:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	2b5c      	cmp	r3, #92	; 0x5c
 800582e:	d00a      	beq.n	8005846 <xTaskCreateStatic+0x66>
	__asm volatile
 8005830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005834:	f383 8811 	msr	BASEPRI, r3
 8005838:	f3bf 8f6f 	isb	sy
 800583c:	f3bf 8f4f 	dsb	sy
 8005840:	61bb      	str	r3, [r7, #24]
}
 8005842:	bf00      	nop
 8005844:	e7fe      	b.n	8005844 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005846:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800584a:	2b00      	cmp	r3, #0
 800584c:	d01e      	beq.n	800588c <xTaskCreateStatic+0xac>
 800584e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005850:	2b00      	cmp	r3, #0
 8005852:	d01b      	beq.n	800588c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005856:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800585c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800585e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005860:	2202      	movs	r2, #2
 8005862:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005866:	2300      	movs	r3, #0
 8005868:	9303      	str	r3, [sp, #12]
 800586a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586c:	9302      	str	r3, [sp, #8]
 800586e:	f107 0314 	add.w	r3, r7, #20
 8005872:	9301      	str	r3, [sp, #4]
 8005874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005876:	9300      	str	r3, [sp, #0]
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	687a      	ldr	r2, [r7, #4]
 800587c:	68b9      	ldr	r1, [r7, #8]
 800587e:	68f8      	ldr	r0, [r7, #12]
 8005880:	f000 f850 	bl	8005924 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005884:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005886:	f000 f8dd 	bl	8005a44 <prvAddNewTaskToReadyList>
 800588a:	e001      	b.n	8005890 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800588c:	2300      	movs	r3, #0
 800588e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005890:	697b      	ldr	r3, [r7, #20]
	}
 8005892:	4618      	mov	r0, r3
 8005894:	3728      	adds	r7, #40	; 0x28
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}

0800589a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800589a:	b580      	push	{r7, lr}
 800589c:	b08c      	sub	sp, #48	; 0x30
 800589e:	af04      	add	r7, sp, #16
 80058a0:	60f8      	str	r0, [r7, #12]
 80058a2:	60b9      	str	r1, [r7, #8]
 80058a4:	603b      	str	r3, [r7, #0]
 80058a6:	4613      	mov	r3, r2
 80058a8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80058aa:	88fb      	ldrh	r3, [r7, #6]
 80058ac:	009b      	lsls	r3, r3, #2
 80058ae:	4618      	mov	r0, r3
 80058b0:	f7fe fdbe 	bl	8004430 <pvPortMalloc>
 80058b4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d00e      	beq.n	80058da <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80058bc:	205c      	movs	r0, #92	; 0x5c
 80058be:	f7fe fdb7 	bl	8004430 <pvPortMalloc>
 80058c2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80058c4:	69fb      	ldr	r3, [r7, #28]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d003      	beq.n	80058d2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80058ca:	69fb      	ldr	r3, [r7, #28]
 80058cc:	697a      	ldr	r2, [r7, #20]
 80058ce:	631a      	str	r2, [r3, #48]	; 0x30
 80058d0:	e005      	b.n	80058de <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80058d2:	6978      	ldr	r0, [r7, #20]
 80058d4:	f7fe fe78 	bl	80045c8 <vPortFree>
 80058d8:	e001      	b.n	80058de <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80058da:	2300      	movs	r3, #0
 80058dc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80058de:	69fb      	ldr	r3, [r7, #28]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d017      	beq.n	8005914 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80058e4:	69fb      	ldr	r3, [r7, #28]
 80058e6:	2200      	movs	r2, #0
 80058e8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80058ec:	88fa      	ldrh	r2, [r7, #6]
 80058ee:	2300      	movs	r3, #0
 80058f0:	9303      	str	r3, [sp, #12]
 80058f2:	69fb      	ldr	r3, [r7, #28]
 80058f4:	9302      	str	r3, [sp, #8]
 80058f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058f8:	9301      	str	r3, [sp, #4]
 80058fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058fc:	9300      	str	r3, [sp, #0]
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	68b9      	ldr	r1, [r7, #8]
 8005902:	68f8      	ldr	r0, [r7, #12]
 8005904:	f000 f80e 	bl	8005924 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005908:	69f8      	ldr	r0, [r7, #28]
 800590a:	f000 f89b 	bl	8005a44 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800590e:	2301      	movs	r3, #1
 8005910:	61bb      	str	r3, [r7, #24]
 8005912:	e002      	b.n	800591a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005914:	f04f 33ff 	mov.w	r3, #4294967295
 8005918:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800591a:	69bb      	ldr	r3, [r7, #24]
	}
 800591c:	4618      	mov	r0, r3
 800591e:	3720      	adds	r7, #32
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}

08005924 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b088      	sub	sp, #32
 8005928:	af00      	add	r7, sp, #0
 800592a:	60f8      	str	r0, [r7, #12]
 800592c:	60b9      	str	r1, [r7, #8]
 800592e:	607a      	str	r2, [r7, #4]
 8005930:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005934:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	009b      	lsls	r3, r3, #2
 800593a:	461a      	mov	r2, r3
 800593c:	21a5      	movs	r1, #165	; 0xa5
 800593e:	f001 fc05 	bl	800714c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005944:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800594c:	3b01      	subs	r3, #1
 800594e:	009b      	lsls	r3, r3, #2
 8005950:	4413      	add	r3, r2
 8005952:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005954:	69bb      	ldr	r3, [r7, #24]
 8005956:	f023 0307 	bic.w	r3, r3, #7
 800595a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800595c:	69bb      	ldr	r3, [r7, #24]
 800595e:	f003 0307 	and.w	r3, r3, #7
 8005962:	2b00      	cmp	r3, #0
 8005964:	d00a      	beq.n	800597c <prvInitialiseNewTask+0x58>
	__asm volatile
 8005966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800596a:	f383 8811 	msr	BASEPRI, r3
 800596e:	f3bf 8f6f 	isb	sy
 8005972:	f3bf 8f4f 	dsb	sy
 8005976:	617b      	str	r3, [r7, #20]
}
 8005978:	bf00      	nop
 800597a:	e7fe      	b.n	800597a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d01f      	beq.n	80059c2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005982:	2300      	movs	r3, #0
 8005984:	61fb      	str	r3, [r7, #28]
 8005986:	e012      	b.n	80059ae <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005988:	68ba      	ldr	r2, [r7, #8]
 800598a:	69fb      	ldr	r3, [r7, #28]
 800598c:	4413      	add	r3, r2
 800598e:	7819      	ldrb	r1, [r3, #0]
 8005990:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005992:	69fb      	ldr	r3, [r7, #28]
 8005994:	4413      	add	r3, r2
 8005996:	3334      	adds	r3, #52	; 0x34
 8005998:	460a      	mov	r2, r1
 800599a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800599c:	68ba      	ldr	r2, [r7, #8]
 800599e:	69fb      	ldr	r3, [r7, #28]
 80059a0:	4413      	add	r3, r2
 80059a2:	781b      	ldrb	r3, [r3, #0]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d006      	beq.n	80059b6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80059a8:	69fb      	ldr	r3, [r7, #28]
 80059aa:	3301      	adds	r3, #1
 80059ac:	61fb      	str	r3, [r7, #28]
 80059ae:	69fb      	ldr	r3, [r7, #28]
 80059b0:	2b0f      	cmp	r3, #15
 80059b2:	d9e9      	bls.n	8005988 <prvInitialiseNewTask+0x64>
 80059b4:	e000      	b.n	80059b8 <prvInitialiseNewTask+0x94>
			{
				break;
 80059b6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80059b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ba:	2200      	movs	r2, #0
 80059bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80059c0:	e003      	b.n	80059ca <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80059c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059c4:	2200      	movs	r2, #0
 80059c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80059ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059cc:	2b37      	cmp	r3, #55	; 0x37
 80059ce:	d901      	bls.n	80059d4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80059d0:	2337      	movs	r3, #55	; 0x37
 80059d2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80059d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059d8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80059da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059de:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80059e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059e2:	2200      	movs	r2, #0
 80059e4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80059e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059e8:	3304      	adds	r3, #4
 80059ea:	4618      	mov	r0, r3
 80059ec:	f7fe ff2a 	bl	8004844 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80059f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059f2:	3318      	adds	r3, #24
 80059f4:	4618      	mov	r0, r3
 80059f6:	f7fe ff25 	bl	8004844 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80059fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059fe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a02:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a08:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a0e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a12:	2200      	movs	r2, #0
 8005a14:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a18:	2200      	movs	r2, #0
 8005a1a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005a1e:	683a      	ldr	r2, [r7, #0]
 8005a20:	68f9      	ldr	r1, [r7, #12]
 8005a22:	69b8      	ldr	r0, [r7, #24]
 8005a24:	f7fe ffa2 	bl	800496c <pxPortInitialiseStack>
 8005a28:	4602      	mov	r2, r0
 8005a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a2c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d002      	beq.n	8005a3a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a38:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a3a:	bf00      	nop
 8005a3c:	3720      	adds	r7, #32
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}
	...

08005a44 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b082      	sub	sp, #8
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005a4c:	f7ff f8ba 	bl	8004bc4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005a50:	4b2d      	ldr	r3, [pc, #180]	; (8005b08 <prvAddNewTaskToReadyList+0xc4>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	3301      	adds	r3, #1
 8005a56:	4a2c      	ldr	r2, [pc, #176]	; (8005b08 <prvAddNewTaskToReadyList+0xc4>)
 8005a58:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005a5a:	4b2c      	ldr	r3, [pc, #176]	; (8005b0c <prvAddNewTaskToReadyList+0xc8>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d109      	bne.n	8005a76 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005a62:	4a2a      	ldr	r2, [pc, #168]	; (8005b0c <prvAddNewTaskToReadyList+0xc8>)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005a68:	4b27      	ldr	r3, [pc, #156]	; (8005b08 <prvAddNewTaskToReadyList+0xc4>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d110      	bne.n	8005a92 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005a70:	f000 fc16 	bl	80062a0 <prvInitialiseTaskLists>
 8005a74:	e00d      	b.n	8005a92 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005a76:	4b26      	ldr	r3, [pc, #152]	; (8005b10 <prvAddNewTaskToReadyList+0xcc>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d109      	bne.n	8005a92 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005a7e:	4b23      	ldr	r3, [pc, #140]	; (8005b0c <prvAddNewTaskToReadyList+0xc8>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d802      	bhi.n	8005a92 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005a8c:	4a1f      	ldr	r2, [pc, #124]	; (8005b0c <prvAddNewTaskToReadyList+0xc8>)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005a92:	4b20      	ldr	r3, [pc, #128]	; (8005b14 <prvAddNewTaskToReadyList+0xd0>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	3301      	adds	r3, #1
 8005a98:	4a1e      	ldr	r2, [pc, #120]	; (8005b14 <prvAddNewTaskToReadyList+0xd0>)
 8005a9a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005a9c:	4b1d      	ldr	r3, [pc, #116]	; (8005b14 <prvAddNewTaskToReadyList+0xd0>)
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005aa8:	4b1b      	ldr	r3, [pc, #108]	; (8005b18 <prvAddNewTaskToReadyList+0xd4>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d903      	bls.n	8005ab8 <prvAddNewTaskToReadyList+0x74>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab4:	4a18      	ldr	r2, [pc, #96]	; (8005b18 <prvAddNewTaskToReadyList+0xd4>)
 8005ab6:	6013      	str	r3, [r2, #0]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005abc:	4613      	mov	r3, r2
 8005abe:	009b      	lsls	r3, r3, #2
 8005ac0:	4413      	add	r3, r2
 8005ac2:	009b      	lsls	r3, r3, #2
 8005ac4:	4a15      	ldr	r2, [pc, #84]	; (8005b1c <prvAddNewTaskToReadyList+0xd8>)
 8005ac6:	441a      	add	r2, r3
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	3304      	adds	r3, #4
 8005acc:	4619      	mov	r1, r3
 8005ace:	4610      	mov	r0, r2
 8005ad0:	f7fe fec5 	bl	800485e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005ad4:	f7ff f8a6 	bl	8004c24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005ad8:	4b0d      	ldr	r3, [pc, #52]	; (8005b10 <prvAddNewTaskToReadyList+0xcc>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d00e      	beq.n	8005afe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005ae0:	4b0a      	ldr	r3, [pc, #40]	; (8005b0c <prvAddNewTaskToReadyList+0xc8>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d207      	bcs.n	8005afe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005aee:	4b0c      	ldr	r3, [pc, #48]	; (8005b20 <prvAddNewTaskToReadyList+0xdc>)
 8005af0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005af4:	601a      	str	r2, [r3, #0]
 8005af6:	f3bf 8f4f 	dsb	sy
 8005afa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005afe:	bf00      	nop
 8005b00:	3708      	adds	r7, #8
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}
 8005b06:	bf00      	nop
 8005b08:	2000484c 	.word	0x2000484c
 8005b0c:	20004378 	.word	0x20004378
 8005b10:	20004858 	.word	0x20004858
 8005b14:	20004868 	.word	0x20004868
 8005b18:	20004854 	.word	0x20004854
 8005b1c:	2000437c 	.word	0x2000437c
 8005b20:	e000ed04 	.word	0xe000ed04

08005b24 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b084      	sub	sp, #16
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d017      	beq.n	8005b66 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005b36:	4b13      	ldr	r3, [pc, #76]	; (8005b84 <vTaskDelay+0x60>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d00a      	beq.n	8005b54 <vTaskDelay+0x30>
	__asm volatile
 8005b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b42:	f383 8811 	msr	BASEPRI, r3
 8005b46:	f3bf 8f6f 	isb	sy
 8005b4a:	f3bf 8f4f 	dsb	sy
 8005b4e:	60bb      	str	r3, [r7, #8]
}
 8005b50:	bf00      	nop
 8005b52:	e7fe      	b.n	8005b52 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005b54:	f000 f880 	bl	8005c58 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005b58:	2100      	movs	r1, #0
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f000 fcea 	bl	8006534 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005b60:	f000 f888 	bl	8005c74 <xTaskResumeAll>
 8005b64:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d107      	bne.n	8005b7c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005b6c:	4b06      	ldr	r3, [pc, #24]	; (8005b88 <vTaskDelay+0x64>)
 8005b6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b72:	601a      	str	r2, [r3, #0]
 8005b74:	f3bf 8f4f 	dsb	sy
 8005b78:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005b7c:	bf00      	nop
 8005b7e:	3710      	adds	r7, #16
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}
 8005b84:	20004874 	.word	0x20004874
 8005b88:	e000ed04 	.word	0xe000ed04

08005b8c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b08a      	sub	sp, #40	; 0x28
 8005b90:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005b92:	2300      	movs	r3, #0
 8005b94:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005b96:	2300      	movs	r3, #0
 8005b98:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005b9a:	463a      	mov	r2, r7
 8005b9c:	1d39      	adds	r1, r7, #4
 8005b9e:	f107 0308 	add.w	r3, r7, #8
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f7fe fc10 	bl	80043c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005ba8:	6839      	ldr	r1, [r7, #0]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	68ba      	ldr	r2, [r7, #8]
 8005bae:	9202      	str	r2, [sp, #8]
 8005bb0:	9301      	str	r3, [sp, #4]
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	9300      	str	r3, [sp, #0]
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	460a      	mov	r2, r1
 8005bba:	4921      	ldr	r1, [pc, #132]	; (8005c40 <vTaskStartScheduler+0xb4>)
 8005bbc:	4821      	ldr	r0, [pc, #132]	; (8005c44 <vTaskStartScheduler+0xb8>)
 8005bbe:	f7ff fe0f 	bl	80057e0 <xTaskCreateStatic>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	4a20      	ldr	r2, [pc, #128]	; (8005c48 <vTaskStartScheduler+0xbc>)
 8005bc6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005bc8:	4b1f      	ldr	r3, [pc, #124]	; (8005c48 <vTaskStartScheduler+0xbc>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d002      	beq.n	8005bd6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	617b      	str	r3, [r7, #20]
 8005bd4:	e001      	b.n	8005bda <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d102      	bne.n	8005be6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005be0:	f000 fcfc 	bl	80065dc <xTimerCreateTimerTask>
 8005be4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d116      	bne.n	8005c1a <vTaskStartScheduler+0x8e>
	__asm volatile
 8005bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf0:	f383 8811 	msr	BASEPRI, r3
 8005bf4:	f3bf 8f6f 	isb	sy
 8005bf8:	f3bf 8f4f 	dsb	sy
 8005bfc:	613b      	str	r3, [r7, #16]
}
 8005bfe:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005c00:	4b12      	ldr	r3, [pc, #72]	; (8005c4c <vTaskStartScheduler+0xc0>)
 8005c02:	f04f 32ff 	mov.w	r2, #4294967295
 8005c06:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005c08:	4b11      	ldr	r3, [pc, #68]	; (8005c50 <vTaskStartScheduler+0xc4>)
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005c0e:	4b11      	ldr	r3, [pc, #68]	; (8005c54 <vTaskStartScheduler+0xc8>)
 8005c10:	2200      	movs	r2, #0
 8005c12:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005c14:	f7fe ff34 	bl	8004a80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005c18:	e00e      	b.n	8005c38 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c20:	d10a      	bne.n	8005c38 <vTaskStartScheduler+0xac>
	__asm volatile
 8005c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c26:	f383 8811 	msr	BASEPRI, r3
 8005c2a:	f3bf 8f6f 	isb	sy
 8005c2e:	f3bf 8f4f 	dsb	sy
 8005c32:	60fb      	str	r3, [r7, #12]
}
 8005c34:	bf00      	nop
 8005c36:	e7fe      	b.n	8005c36 <vTaskStartScheduler+0xaa>
}
 8005c38:	bf00      	nop
 8005c3a:	3718      	adds	r7, #24
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}
 8005c40:	08007a34 	.word	0x08007a34
 8005c44:	08006271 	.word	0x08006271
 8005c48:	20004870 	.word	0x20004870
 8005c4c:	2000486c 	.word	0x2000486c
 8005c50:	20004858 	.word	0x20004858
 8005c54:	20004850 	.word	0x20004850

08005c58 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005c58:	b480      	push	{r7}
 8005c5a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005c5c:	4b04      	ldr	r3, [pc, #16]	; (8005c70 <vTaskSuspendAll+0x18>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	3301      	adds	r3, #1
 8005c62:	4a03      	ldr	r2, [pc, #12]	; (8005c70 <vTaskSuspendAll+0x18>)
 8005c64:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005c66:	bf00      	nop
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6e:	4770      	bx	lr
 8005c70:	20004874 	.word	0x20004874

08005c74 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b084      	sub	sp, #16
 8005c78:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005c82:	4b42      	ldr	r3, [pc, #264]	; (8005d8c <xTaskResumeAll+0x118>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d10a      	bne.n	8005ca0 <xTaskResumeAll+0x2c>
	__asm volatile
 8005c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c8e:	f383 8811 	msr	BASEPRI, r3
 8005c92:	f3bf 8f6f 	isb	sy
 8005c96:	f3bf 8f4f 	dsb	sy
 8005c9a:	603b      	str	r3, [r7, #0]
}
 8005c9c:	bf00      	nop
 8005c9e:	e7fe      	b.n	8005c9e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005ca0:	f7fe ff90 	bl	8004bc4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005ca4:	4b39      	ldr	r3, [pc, #228]	; (8005d8c <xTaskResumeAll+0x118>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	3b01      	subs	r3, #1
 8005caa:	4a38      	ldr	r2, [pc, #224]	; (8005d8c <xTaskResumeAll+0x118>)
 8005cac:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005cae:	4b37      	ldr	r3, [pc, #220]	; (8005d8c <xTaskResumeAll+0x118>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d162      	bne.n	8005d7c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005cb6:	4b36      	ldr	r3, [pc, #216]	; (8005d90 <xTaskResumeAll+0x11c>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d05e      	beq.n	8005d7c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005cbe:	e02f      	b.n	8005d20 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005cc0:	4b34      	ldr	r3, [pc, #208]	; (8005d94 <xTaskResumeAll+0x120>)
 8005cc2:	68db      	ldr	r3, [r3, #12]
 8005cc4:	68db      	ldr	r3, [r3, #12]
 8005cc6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	3318      	adds	r3, #24
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f7fe fe23 	bl	8004918 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	3304      	adds	r3, #4
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f7fe fe1e 	bl	8004918 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ce0:	4b2d      	ldr	r3, [pc, #180]	; (8005d98 <xTaskResumeAll+0x124>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d903      	bls.n	8005cf0 <xTaskResumeAll+0x7c>
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cec:	4a2a      	ldr	r2, [pc, #168]	; (8005d98 <xTaskResumeAll+0x124>)
 8005cee:	6013      	str	r3, [r2, #0]
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cf4:	4613      	mov	r3, r2
 8005cf6:	009b      	lsls	r3, r3, #2
 8005cf8:	4413      	add	r3, r2
 8005cfa:	009b      	lsls	r3, r3, #2
 8005cfc:	4a27      	ldr	r2, [pc, #156]	; (8005d9c <xTaskResumeAll+0x128>)
 8005cfe:	441a      	add	r2, r3
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	3304      	adds	r3, #4
 8005d04:	4619      	mov	r1, r3
 8005d06:	4610      	mov	r0, r2
 8005d08:	f7fe fda9 	bl	800485e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d10:	4b23      	ldr	r3, [pc, #140]	; (8005da0 <xTaskResumeAll+0x12c>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d16:	429a      	cmp	r2, r3
 8005d18:	d302      	bcc.n	8005d20 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005d1a:	4b22      	ldr	r3, [pc, #136]	; (8005da4 <xTaskResumeAll+0x130>)
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005d20:	4b1c      	ldr	r3, [pc, #112]	; (8005d94 <xTaskResumeAll+0x120>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d1cb      	bne.n	8005cc0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d001      	beq.n	8005d32 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005d2e:	f000 fb55 	bl	80063dc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005d32:	4b1d      	ldr	r3, [pc, #116]	; (8005da8 <xTaskResumeAll+0x134>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d010      	beq.n	8005d60 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005d3e:	f000 f847 	bl	8005dd0 <xTaskIncrementTick>
 8005d42:	4603      	mov	r3, r0
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d002      	beq.n	8005d4e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005d48:	4b16      	ldr	r3, [pc, #88]	; (8005da4 <xTaskResumeAll+0x130>)
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	3b01      	subs	r3, #1
 8005d52:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d1f1      	bne.n	8005d3e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005d5a:	4b13      	ldr	r3, [pc, #76]	; (8005da8 <xTaskResumeAll+0x134>)
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005d60:	4b10      	ldr	r3, [pc, #64]	; (8005da4 <xTaskResumeAll+0x130>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d009      	beq.n	8005d7c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005d6c:	4b0f      	ldr	r3, [pc, #60]	; (8005dac <xTaskResumeAll+0x138>)
 8005d6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d72:	601a      	str	r2, [r3, #0]
 8005d74:	f3bf 8f4f 	dsb	sy
 8005d78:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005d7c:	f7fe ff52 	bl	8004c24 <vPortExitCritical>

	return xAlreadyYielded;
 8005d80:	68bb      	ldr	r3, [r7, #8]
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3710      	adds	r7, #16
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}
 8005d8a:	bf00      	nop
 8005d8c:	20004874 	.word	0x20004874
 8005d90:	2000484c 	.word	0x2000484c
 8005d94:	2000480c 	.word	0x2000480c
 8005d98:	20004854 	.word	0x20004854
 8005d9c:	2000437c 	.word	0x2000437c
 8005da0:	20004378 	.word	0x20004378
 8005da4:	20004860 	.word	0x20004860
 8005da8:	2000485c 	.word	0x2000485c
 8005dac:	e000ed04 	.word	0xe000ed04

08005db0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005db0:	b480      	push	{r7}
 8005db2:	b083      	sub	sp, #12
 8005db4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005db6:	4b05      	ldr	r3, [pc, #20]	; (8005dcc <xTaskGetTickCount+0x1c>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005dbc:	687b      	ldr	r3, [r7, #4]
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	370c      	adds	r7, #12
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc8:	4770      	bx	lr
 8005dca:	bf00      	nop
 8005dcc:	20004850 	.word	0x20004850

08005dd0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b086      	sub	sp, #24
 8005dd4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005dda:	4b4f      	ldr	r3, [pc, #316]	; (8005f18 <xTaskIncrementTick+0x148>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	f040 808f 	bne.w	8005f02 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005de4:	4b4d      	ldr	r3, [pc, #308]	; (8005f1c <xTaskIncrementTick+0x14c>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	3301      	adds	r3, #1
 8005dea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005dec:	4a4b      	ldr	r2, [pc, #300]	; (8005f1c <xTaskIncrementTick+0x14c>)
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d120      	bne.n	8005e3a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005df8:	4b49      	ldr	r3, [pc, #292]	; (8005f20 <xTaskIncrementTick+0x150>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d00a      	beq.n	8005e18 <xTaskIncrementTick+0x48>
	__asm volatile
 8005e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e06:	f383 8811 	msr	BASEPRI, r3
 8005e0a:	f3bf 8f6f 	isb	sy
 8005e0e:	f3bf 8f4f 	dsb	sy
 8005e12:	603b      	str	r3, [r7, #0]
}
 8005e14:	bf00      	nop
 8005e16:	e7fe      	b.n	8005e16 <xTaskIncrementTick+0x46>
 8005e18:	4b41      	ldr	r3, [pc, #260]	; (8005f20 <xTaskIncrementTick+0x150>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	60fb      	str	r3, [r7, #12]
 8005e1e:	4b41      	ldr	r3, [pc, #260]	; (8005f24 <xTaskIncrementTick+0x154>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a3f      	ldr	r2, [pc, #252]	; (8005f20 <xTaskIncrementTick+0x150>)
 8005e24:	6013      	str	r3, [r2, #0]
 8005e26:	4a3f      	ldr	r2, [pc, #252]	; (8005f24 <xTaskIncrementTick+0x154>)
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	6013      	str	r3, [r2, #0]
 8005e2c:	4b3e      	ldr	r3, [pc, #248]	; (8005f28 <xTaskIncrementTick+0x158>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	3301      	adds	r3, #1
 8005e32:	4a3d      	ldr	r2, [pc, #244]	; (8005f28 <xTaskIncrementTick+0x158>)
 8005e34:	6013      	str	r3, [r2, #0]
 8005e36:	f000 fad1 	bl	80063dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005e3a:	4b3c      	ldr	r3, [pc, #240]	; (8005f2c <xTaskIncrementTick+0x15c>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	693a      	ldr	r2, [r7, #16]
 8005e40:	429a      	cmp	r2, r3
 8005e42:	d349      	bcc.n	8005ed8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e44:	4b36      	ldr	r3, [pc, #216]	; (8005f20 <xTaskIncrementTick+0x150>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d104      	bne.n	8005e58 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e4e:	4b37      	ldr	r3, [pc, #220]	; (8005f2c <xTaskIncrementTick+0x15c>)
 8005e50:	f04f 32ff 	mov.w	r2, #4294967295
 8005e54:	601a      	str	r2, [r3, #0]
					break;
 8005e56:	e03f      	b.n	8005ed8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e58:	4b31      	ldr	r3, [pc, #196]	; (8005f20 <xTaskIncrementTick+0x150>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	68db      	ldr	r3, [r3, #12]
 8005e5e:	68db      	ldr	r3, [r3, #12]
 8005e60:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005e68:	693a      	ldr	r2, [r7, #16]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	429a      	cmp	r2, r3
 8005e6e:	d203      	bcs.n	8005e78 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005e70:	4a2e      	ldr	r2, [pc, #184]	; (8005f2c <xTaskIncrementTick+0x15c>)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005e76:	e02f      	b.n	8005ed8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	3304      	adds	r3, #4
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f7fe fd4b 	bl	8004918 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d004      	beq.n	8005e94 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	3318      	adds	r3, #24
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f7fe fd42 	bl	8004918 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e98:	4b25      	ldr	r3, [pc, #148]	; (8005f30 <xTaskIncrementTick+0x160>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d903      	bls.n	8005ea8 <xTaskIncrementTick+0xd8>
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea4:	4a22      	ldr	r2, [pc, #136]	; (8005f30 <xTaskIncrementTick+0x160>)
 8005ea6:	6013      	str	r3, [r2, #0]
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005eac:	4613      	mov	r3, r2
 8005eae:	009b      	lsls	r3, r3, #2
 8005eb0:	4413      	add	r3, r2
 8005eb2:	009b      	lsls	r3, r3, #2
 8005eb4:	4a1f      	ldr	r2, [pc, #124]	; (8005f34 <xTaskIncrementTick+0x164>)
 8005eb6:	441a      	add	r2, r3
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	3304      	adds	r3, #4
 8005ebc:	4619      	mov	r1, r3
 8005ebe:	4610      	mov	r0, r2
 8005ec0:	f7fe fccd 	bl	800485e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ec8:	4b1b      	ldr	r3, [pc, #108]	; (8005f38 <xTaskIncrementTick+0x168>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ece:	429a      	cmp	r2, r3
 8005ed0:	d3b8      	bcc.n	8005e44 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ed6:	e7b5      	b.n	8005e44 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005ed8:	4b17      	ldr	r3, [pc, #92]	; (8005f38 <xTaskIncrementTick+0x168>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ede:	4915      	ldr	r1, [pc, #84]	; (8005f34 <xTaskIncrementTick+0x164>)
 8005ee0:	4613      	mov	r3, r2
 8005ee2:	009b      	lsls	r3, r3, #2
 8005ee4:	4413      	add	r3, r2
 8005ee6:	009b      	lsls	r3, r3, #2
 8005ee8:	440b      	add	r3, r1
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	2b01      	cmp	r3, #1
 8005eee:	d901      	bls.n	8005ef4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005ef4:	4b11      	ldr	r3, [pc, #68]	; (8005f3c <xTaskIncrementTick+0x16c>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d007      	beq.n	8005f0c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005efc:	2301      	movs	r3, #1
 8005efe:	617b      	str	r3, [r7, #20]
 8005f00:	e004      	b.n	8005f0c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005f02:	4b0f      	ldr	r3, [pc, #60]	; (8005f40 <xTaskIncrementTick+0x170>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	3301      	adds	r3, #1
 8005f08:	4a0d      	ldr	r2, [pc, #52]	; (8005f40 <xTaskIncrementTick+0x170>)
 8005f0a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005f0c:	697b      	ldr	r3, [r7, #20]
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3718      	adds	r7, #24
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}
 8005f16:	bf00      	nop
 8005f18:	20004874 	.word	0x20004874
 8005f1c:	20004850 	.word	0x20004850
 8005f20:	20004804 	.word	0x20004804
 8005f24:	20004808 	.word	0x20004808
 8005f28:	20004864 	.word	0x20004864
 8005f2c:	2000486c 	.word	0x2000486c
 8005f30:	20004854 	.word	0x20004854
 8005f34:	2000437c 	.word	0x2000437c
 8005f38:	20004378 	.word	0x20004378
 8005f3c:	20004860 	.word	0x20004860
 8005f40:	2000485c 	.word	0x2000485c

08005f44 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005f44:	b480      	push	{r7}
 8005f46:	b085      	sub	sp, #20
 8005f48:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005f4a:	4b28      	ldr	r3, [pc, #160]	; (8005fec <vTaskSwitchContext+0xa8>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d003      	beq.n	8005f5a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005f52:	4b27      	ldr	r3, [pc, #156]	; (8005ff0 <vTaskSwitchContext+0xac>)
 8005f54:	2201      	movs	r2, #1
 8005f56:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005f58:	e041      	b.n	8005fde <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8005f5a:	4b25      	ldr	r3, [pc, #148]	; (8005ff0 <vTaskSwitchContext+0xac>)
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f60:	4b24      	ldr	r3, [pc, #144]	; (8005ff4 <vTaskSwitchContext+0xb0>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	60fb      	str	r3, [r7, #12]
 8005f66:	e010      	b.n	8005f8a <vTaskSwitchContext+0x46>
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d10a      	bne.n	8005f84 <vTaskSwitchContext+0x40>
	__asm volatile
 8005f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f72:	f383 8811 	msr	BASEPRI, r3
 8005f76:	f3bf 8f6f 	isb	sy
 8005f7a:	f3bf 8f4f 	dsb	sy
 8005f7e:	607b      	str	r3, [r7, #4]
}
 8005f80:	bf00      	nop
 8005f82:	e7fe      	b.n	8005f82 <vTaskSwitchContext+0x3e>
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	3b01      	subs	r3, #1
 8005f88:	60fb      	str	r3, [r7, #12]
 8005f8a:	491b      	ldr	r1, [pc, #108]	; (8005ff8 <vTaskSwitchContext+0xb4>)
 8005f8c:	68fa      	ldr	r2, [r7, #12]
 8005f8e:	4613      	mov	r3, r2
 8005f90:	009b      	lsls	r3, r3, #2
 8005f92:	4413      	add	r3, r2
 8005f94:	009b      	lsls	r3, r3, #2
 8005f96:	440b      	add	r3, r1
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d0e4      	beq.n	8005f68 <vTaskSwitchContext+0x24>
 8005f9e:	68fa      	ldr	r2, [r7, #12]
 8005fa0:	4613      	mov	r3, r2
 8005fa2:	009b      	lsls	r3, r3, #2
 8005fa4:	4413      	add	r3, r2
 8005fa6:	009b      	lsls	r3, r3, #2
 8005fa8:	4a13      	ldr	r2, [pc, #76]	; (8005ff8 <vTaskSwitchContext+0xb4>)
 8005faa:	4413      	add	r3, r2
 8005fac:	60bb      	str	r3, [r7, #8]
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	685a      	ldr	r2, [r3, #4]
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	605a      	str	r2, [r3, #4]
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	685a      	ldr	r2, [r3, #4]
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	3308      	adds	r3, #8
 8005fc0:	429a      	cmp	r2, r3
 8005fc2:	d104      	bne.n	8005fce <vTaskSwitchContext+0x8a>
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	685a      	ldr	r2, [r3, #4]
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	605a      	str	r2, [r3, #4]
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	68db      	ldr	r3, [r3, #12]
 8005fd4:	4a09      	ldr	r2, [pc, #36]	; (8005ffc <vTaskSwitchContext+0xb8>)
 8005fd6:	6013      	str	r3, [r2, #0]
 8005fd8:	4a06      	ldr	r2, [pc, #24]	; (8005ff4 <vTaskSwitchContext+0xb0>)
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	6013      	str	r3, [r2, #0]
}
 8005fde:	bf00      	nop
 8005fe0:	3714      	adds	r7, #20
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe8:	4770      	bx	lr
 8005fea:	bf00      	nop
 8005fec:	20004874 	.word	0x20004874
 8005ff0:	20004860 	.word	0x20004860
 8005ff4:	20004854 	.word	0x20004854
 8005ff8:	2000437c 	.word	0x2000437c
 8005ffc:	20004378 	.word	0x20004378

08006000 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b084      	sub	sp, #16
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
 8006008:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d10a      	bne.n	8006026 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006014:	f383 8811 	msr	BASEPRI, r3
 8006018:	f3bf 8f6f 	isb	sy
 800601c:	f3bf 8f4f 	dsb	sy
 8006020:	60fb      	str	r3, [r7, #12]
}
 8006022:	bf00      	nop
 8006024:	e7fe      	b.n	8006024 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006026:	4b07      	ldr	r3, [pc, #28]	; (8006044 <vTaskPlaceOnEventList+0x44>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	3318      	adds	r3, #24
 800602c:	4619      	mov	r1, r3
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f7fe fc39 	bl	80048a6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006034:	2101      	movs	r1, #1
 8006036:	6838      	ldr	r0, [r7, #0]
 8006038:	f000 fa7c 	bl	8006534 <prvAddCurrentTaskToDelayedList>
}
 800603c:	bf00      	nop
 800603e:	3710      	adds	r7, #16
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}
 8006044:	20004378 	.word	0x20004378

08006048 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006048:	b580      	push	{r7, lr}
 800604a:	b086      	sub	sp, #24
 800604c:	af00      	add	r7, sp, #0
 800604e:	60f8      	str	r0, [r7, #12]
 8006050:	60b9      	str	r1, [r7, #8]
 8006052:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d10a      	bne.n	8006070 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800605a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800605e:	f383 8811 	msr	BASEPRI, r3
 8006062:	f3bf 8f6f 	isb	sy
 8006066:	f3bf 8f4f 	dsb	sy
 800606a:	617b      	str	r3, [r7, #20]
}
 800606c:	bf00      	nop
 800606e:	e7fe      	b.n	800606e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006070:	4b0a      	ldr	r3, [pc, #40]	; (800609c <vTaskPlaceOnEventListRestricted+0x54>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	3318      	adds	r3, #24
 8006076:	4619      	mov	r1, r3
 8006078:	68f8      	ldr	r0, [r7, #12]
 800607a:	f7fe fbf0 	bl	800485e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d002      	beq.n	800608a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006084:	f04f 33ff 	mov.w	r3, #4294967295
 8006088:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800608a:	6879      	ldr	r1, [r7, #4]
 800608c:	68b8      	ldr	r0, [r7, #8]
 800608e:	f000 fa51 	bl	8006534 <prvAddCurrentTaskToDelayedList>
	}
 8006092:	bf00      	nop
 8006094:	3718      	adds	r7, #24
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}
 800609a:	bf00      	nop
 800609c:	20004378 	.word	0x20004378

080060a0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b086      	sub	sp, #24
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	68db      	ldr	r3, [r3, #12]
 80060ac:	68db      	ldr	r3, [r3, #12]
 80060ae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d10a      	bne.n	80060cc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80060b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ba:	f383 8811 	msr	BASEPRI, r3
 80060be:	f3bf 8f6f 	isb	sy
 80060c2:	f3bf 8f4f 	dsb	sy
 80060c6:	60fb      	str	r3, [r7, #12]
}
 80060c8:	bf00      	nop
 80060ca:	e7fe      	b.n	80060ca <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	3318      	adds	r3, #24
 80060d0:	4618      	mov	r0, r3
 80060d2:	f7fe fc21 	bl	8004918 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060d6:	4b1e      	ldr	r3, [pc, #120]	; (8006150 <xTaskRemoveFromEventList+0xb0>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d11d      	bne.n	800611a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	3304      	adds	r3, #4
 80060e2:	4618      	mov	r0, r3
 80060e4:	f7fe fc18 	bl	8004918 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060ec:	4b19      	ldr	r3, [pc, #100]	; (8006154 <xTaskRemoveFromEventList+0xb4>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d903      	bls.n	80060fc <xTaskRemoveFromEventList+0x5c>
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060f8:	4a16      	ldr	r2, [pc, #88]	; (8006154 <xTaskRemoveFromEventList+0xb4>)
 80060fa:	6013      	str	r3, [r2, #0]
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006100:	4613      	mov	r3, r2
 8006102:	009b      	lsls	r3, r3, #2
 8006104:	4413      	add	r3, r2
 8006106:	009b      	lsls	r3, r3, #2
 8006108:	4a13      	ldr	r2, [pc, #76]	; (8006158 <xTaskRemoveFromEventList+0xb8>)
 800610a:	441a      	add	r2, r3
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	3304      	adds	r3, #4
 8006110:	4619      	mov	r1, r3
 8006112:	4610      	mov	r0, r2
 8006114:	f7fe fba3 	bl	800485e <vListInsertEnd>
 8006118:	e005      	b.n	8006126 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	3318      	adds	r3, #24
 800611e:	4619      	mov	r1, r3
 8006120:	480e      	ldr	r0, [pc, #56]	; (800615c <xTaskRemoveFromEventList+0xbc>)
 8006122:	f7fe fb9c 	bl	800485e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800612a:	4b0d      	ldr	r3, [pc, #52]	; (8006160 <xTaskRemoveFromEventList+0xc0>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006130:	429a      	cmp	r2, r3
 8006132:	d905      	bls.n	8006140 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006134:	2301      	movs	r3, #1
 8006136:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006138:	4b0a      	ldr	r3, [pc, #40]	; (8006164 <xTaskRemoveFromEventList+0xc4>)
 800613a:	2201      	movs	r2, #1
 800613c:	601a      	str	r2, [r3, #0]
 800613e:	e001      	b.n	8006144 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006140:	2300      	movs	r3, #0
 8006142:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006144:	697b      	ldr	r3, [r7, #20]
}
 8006146:	4618      	mov	r0, r3
 8006148:	3718      	adds	r7, #24
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}
 800614e:	bf00      	nop
 8006150:	20004874 	.word	0x20004874
 8006154:	20004854 	.word	0x20004854
 8006158:	2000437c 	.word	0x2000437c
 800615c:	2000480c 	.word	0x2000480c
 8006160:	20004378 	.word	0x20004378
 8006164:	20004860 	.word	0x20004860

08006168 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006168:	b480      	push	{r7}
 800616a:	b083      	sub	sp, #12
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006170:	4b06      	ldr	r3, [pc, #24]	; (800618c <vTaskInternalSetTimeOutState+0x24>)
 8006172:	681a      	ldr	r2, [r3, #0]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006178:	4b05      	ldr	r3, [pc, #20]	; (8006190 <vTaskInternalSetTimeOutState+0x28>)
 800617a:	681a      	ldr	r2, [r3, #0]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	605a      	str	r2, [r3, #4]
}
 8006180:	bf00      	nop
 8006182:	370c      	adds	r7, #12
 8006184:	46bd      	mov	sp, r7
 8006186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618a:	4770      	bx	lr
 800618c:	20004864 	.word	0x20004864
 8006190:	20004850 	.word	0x20004850

08006194 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b088      	sub	sp, #32
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
 800619c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d10a      	bne.n	80061ba <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80061a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061a8:	f383 8811 	msr	BASEPRI, r3
 80061ac:	f3bf 8f6f 	isb	sy
 80061b0:	f3bf 8f4f 	dsb	sy
 80061b4:	613b      	str	r3, [r7, #16]
}
 80061b6:	bf00      	nop
 80061b8:	e7fe      	b.n	80061b8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d10a      	bne.n	80061d6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80061c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061c4:	f383 8811 	msr	BASEPRI, r3
 80061c8:	f3bf 8f6f 	isb	sy
 80061cc:	f3bf 8f4f 	dsb	sy
 80061d0:	60fb      	str	r3, [r7, #12]
}
 80061d2:	bf00      	nop
 80061d4:	e7fe      	b.n	80061d4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80061d6:	f7fe fcf5 	bl	8004bc4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80061da:	4b1d      	ldr	r3, [pc, #116]	; (8006250 <xTaskCheckForTimeOut+0xbc>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	69ba      	ldr	r2, [r7, #24]
 80061e6:	1ad3      	subs	r3, r2, r3
 80061e8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061f2:	d102      	bne.n	80061fa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80061f4:	2300      	movs	r3, #0
 80061f6:	61fb      	str	r3, [r7, #28]
 80061f8:	e023      	b.n	8006242 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681a      	ldr	r2, [r3, #0]
 80061fe:	4b15      	ldr	r3, [pc, #84]	; (8006254 <xTaskCheckForTimeOut+0xc0>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	429a      	cmp	r2, r3
 8006204:	d007      	beq.n	8006216 <xTaskCheckForTimeOut+0x82>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	69ba      	ldr	r2, [r7, #24]
 800620c:	429a      	cmp	r2, r3
 800620e:	d302      	bcc.n	8006216 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006210:	2301      	movs	r3, #1
 8006212:	61fb      	str	r3, [r7, #28]
 8006214:	e015      	b.n	8006242 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	697a      	ldr	r2, [r7, #20]
 800621c:	429a      	cmp	r2, r3
 800621e:	d20b      	bcs.n	8006238 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	681a      	ldr	r2, [r3, #0]
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	1ad2      	subs	r2, r2, r3
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f7ff ff9b 	bl	8006168 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006232:	2300      	movs	r3, #0
 8006234:	61fb      	str	r3, [r7, #28]
 8006236:	e004      	b.n	8006242 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	2200      	movs	r2, #0
 800623c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800623e:	2301      	movs	r3, #1
 8006240:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006242:	f7fe fcef 	bl	8004c24 <vPortExitCritical>

	return xReturn;
 8006246:	69fb      	ldr	r3, [r7, #28]
}
 8006248:	4618      	mov	r0, r3
 800624a:	3720      	adds	r7, #32
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}
 8006250:	20004850 	.word	0x20004850
 8006254:	20004864 	.word	0x20004864

08006258 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006258:	b480      	push	{r7}
 800625a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800625c:	4b03      	ldr	r3, [pc, #12]	; (800626c <vTaskMissedYield+0x14>)
 800625e:	2201      	movs	r2, #1
 8006260:	601a      	str	r2, [r3, #0]
}
 8006262:	bf00      	nop
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr
 800626c:	20004860 	.word	0x20004860

08006270 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b082      	sub	sp, #8
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006278:	f000 f852 	bl	8006320 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800627c:	4b06      	ldr	r3, [pc, #24]	; (8006298 <prvIdleTask+0x28>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	2b01      	cmp	r3, #1
 8006282:	d9f9      	bls.n	8006278 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006284:	4b05      	ldr	r3, [pc, #20]	; (800629c <prvIdleTask+0x2c>)
 8006286:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800628a:	601a      	str	r2, [r3, #0]
 800628c:	f3bf 8f4f 	dsb	sy
 8006290:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006294:	e7f0      	b.n	8006278 <prvIdleTask+0x8>
 8006296:	bf00      	nop
 8006298:	2000437c 	.word	0x2000437c
 800629c:	e000ed04 	.word	0xe000ed04

080062a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b082      	sub	sp, #8
 80062a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80062a6:	2300      	movs	r3, #0
 80062a8:	607b      	str	r3, [r7, #4]
 80062aa:	e00c      	b.n	80062c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80062ac:	687a      	ldr	r2, [r7, #4]
 80062ae:	4613      	mov	r3, r2
 80062b0:	009b      	lsls	r3, r3, #2
 80062b2:	4413      	add	r3, r2
 80062b4:	009b      	lsls	r3, r3, #2
 80062b6:	4a12      	ldr	r2, [pc, #72]	; (8006300 <prvInitialiseTaskLists+0x60>)
 80062b8:	4413      	add	r3, r2
 80062ba:	4618      	mov	r0, r3
 80062bc:	f7fe faa2 	bl	8004804 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	3301      	adds	r3, #1
 80062c4:	607b      	str	r3, [r7, #4]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2b37      	cmp	r3, #55	; 0x37
 80062ca:	d9ef      	bls.n	80062ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80062cc:	480d      	ldr	r0, [pc, #52]	; (8006304 <prvInitialiseTaskLists+0x64>)
 80062ce:	f7fe fa99 	bl	8004804 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80062d2:	480d      	ldr	r0, [pc, #52]	; (8006308 <prvInitialiseTaskLists+0x68>)
 80062d4:	f7fe fa96 	bl	8004804 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80062d8:	480c      	ldr	r0, [pc, #48]	; (800630c <prvInitialiseTaskLists+0x6c>)
 80062da:	f7fe fa93 	bl	8004804 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80062de:	480c      	ldr	r0, [pc, #48]	; (8006310 <prvInitialiseTaskLists+0x70>)
 80062e0:	f7fe fa90 	bl	8004804 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80062e4:	480b      	ldr	r0, [pc, #44]	; (8006314 <prvInitialiseTaskLists+0x74>)
 80062e6:	f7fe fa8d 	bl	8004804 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80062ea:	4b0b      	ldr	r3, [pc, #44]	; (8006318 <prvInitialiseTaskLists+0x78>)
 80062ec:	4a05      	ldr	r2, [pc, #20]	; (8006304 <prvInitialiseTaskLists+0x64>)
 80062ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80062f0:	4b0a      	ldr	r3, [pc, #40]	; (800631c <prvInitialiseTaskLists+0x7c>)
 80062f2:	4a05      	ldr	r2, [pc, #20]	; (8006308 <prvInitialiseTaskLists+0x68>)
 80062f4:	601a      	str	r2, [r3, #0]
}
 80062f6:	bf00      	nop
 80062f8:	3708      	adds	r7, #8
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}
 80062fe:	bf00      	nop
 8006300:	2000437c 	.word	0x2000437c
 8006304:	200047dc 	.word	0x200047dc
 8006308:	200047f0 	.word	0x200047f0
 800630c:	2000480c 	.word	0x2000480c
 8006310:	20004820 	.word	0x20004820
 8006314:	20004838 	.word	0x20004838
 8006318:	20004804 	.word	0x20004804
 800631c:	20004808 	.word	0x20004808

08006320 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b082      	sub	sp, #8
 8006324:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006326:	e019      	b.n	800635c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006328:	f7fe fc4c 	bl	8004bc4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800632c:	4b10      	ldr	r3, [pc, #64]	; (8006370 <prvCheckTasksWaitingTermination+0x50>)
 800632e:	68db      	ldr	r3, [r3, #12]
 8006330:	68db      	ldr	r3, [r3, #12]
 8006332:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	3304      	adds	r3, #4
 8006338:	4618      	mov	r0, r3
 800633a:	f7fe faed 	bl	8004918 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800633e:	4b0d      	ldr	r3, [pc, #52]	; (8006374 <prvCheckTasksWaitingTermination+0x54>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	3b01      	subs	r3, #1
 8006344:	4a0b      	ldr	r2, [pc, #44]	; (8006374 <prvCheckTasksWaitingTermination+0x54>)
 8006346:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006348:	4b0b      	ldr	r3, [pc, #44]	; (8006378 <prvCheckTasksWaitingTermination+0x58>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	3b01      	subs	r3, #1
 800634e:	4a0a      	ldr	r2, [pc, #40]	; (8006378 <prvCheckTasksWaitingTermination+0x58>)
 8006350:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006352:	f7fe fc67 	bl	8004c24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f000 f810 	bl	800637c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800635c:	4b06      	ldr	r3, [pc, #24]	; (8006378 <prvCheckTasksWaitingTermination+0x58>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d1e1      	bne.n	8006328 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006364:	bf00      	nop
 8006366:	bf00      	nop
 8006368:	3708      	adds	r7, #8
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}
 800636e:	bf00      	nop
 8006370:	20004820 	.word	0x20004820
 8006374:	2000484c 	.word	0x2000484c
 8006378:	20004834 	.word	0x20004834

0800637c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800637c:	b580      	push	{r7, lr}
 800637e:	b084      	sub	sp, #16
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800638a:	2b00      	cmp	r3, #0
 800638c:	d108      	bne.n	80063a0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006392:	4618      	mov	r0, r3
 8006394:	f7fe f918 	bl	80045c8 <vPortFree>
				vPortFree( pxTCB );
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	f7fe f915 	bl	80045c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800639e:	e018      	b.n	80063d2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80063a6:	2b01      	cmp	r3, #1
 80063a8:	d103      	bne.n	80063b2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f7fe f90c 	bl	80045c8 <vPortFree>
	}
 80063b0:	e00f      	b.n	80063d2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80063b8:	2b02      	cmp	r3, #2
 80063ba:	d00a      	beq.n	80063d2 <prvDeleteTCB+0x56>
	__asm volatile
 80063bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c0:	f383 8811 	msr	BASEPRI, r3
 80063c4:	f3bf 8f6f 	isb	sy
 80063c8:	f3bf 8f4f 	dsb	sy
 80063cc:	60fb      	str	r3, [r7, #12]
}
 80063ce:	bf00      	nop
 80063d0:	e7fe      	b.n	80063d0 <prvDeleteTCB+0x54>
	}
 80063d2:	bf00      	nop
 80063d4:	3710      	adds	r7, #16
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}
	...

080063dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80063dc:	b480      	push	{r7}
 80063de:	b083      	sub	sp, #12
 80063e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80063e2:	4b0c      	ldr	r3, [pc, #48]	; (8006414 <prvResetNextTaskUnblockTime+0x38>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d104      	bne.n	80063f6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80063ec:	4b0a      	ldr	r3, [pc, #40]	; (8006418 <prvResetNextTaskUnblockTime+0x3c>)
 80063ee:	f04f 32ff 	mov.w	r2, #4294967295
 80063f2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80063f4:	e008      	b.n	8006408 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063f6:	4b07      	ldr	r3, [pc, #28]	; (8006414 <prvResetNextTaskUnblockTime+0x38>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	68db      	ldr	r3, [r3, #12]
 80063fc:	68db      	ldr	r3, [r3, #12]
 80063fe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	4a04      	ldr	r2, [pc, #16]	; (8006418 <prvResetNextTaskUnblockTime+0x3c>)
 8006406:	6013      	str	r3, [r2, #0]
}
 8006408:	bf00      	nop
 800640a:	370c      	adds	r7, #12
 800640c:	46bd      	mov	sp, r7
 800640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006412:	4770      	bx	lr
 8006414:	20004804 	.word	0x20004804
 8006418:	2000486c 	.word	0x2000486c

0800641c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800641c:	b480      	push	{r7}
 800641e:	b083      	sub	sp, #12
 8006420:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006422:	4b0b      	ldr	r3, [pc, #44]	; (8006450 <xTaskGetSchedulerState+0x34>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d102      	bne.n	8006430 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800642a:	2301      	movs	r3, #1
 800642c:	607b      	str	r3, [r7, #4]
 800642e:	e008      	b.n	8006442 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006430:	4b08      	ldr	r3, [pc, #32]	; (8006454 <xTaskGetSchedulerState+0x38>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d102      	bne.n	800643e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006438:	2302      	movs	r3, #2
 800643a:	607b      	str	r3, [r7, #4]
 800643c:	e001      	b.n	8006442 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800643e:	2300      	movs	r3, #0
 8006440:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006442:	687b      	ldr	r3, [r7, #4]
	}
 8006444:	4618      	mov	r0, r3
 8006446:	370c      	adds	r7, #12
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr
 8006450:	20004858 	.word	0x20004858
 8006454:	20004874 	.word	0x20004874

08006458 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006458:	b580      	push	{r7, lr}
 800645a:	b086      	sub	sp, #24
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006464:	2300      	movs	r3, #0
 8006466:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d056      	beq.n	800651c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800646e:	4b2e      	ldr	r3, [pc, #184]	; (8006528 <xTaskPriorityDisinherit+0xd0>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	693a      	ldr	r2, [r7, #16]
 8006474:	429a      	cmp	r2, r3
 8006476:	d00a      	beq.n	800648e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800647c:	f383 8811 	msr	BASEPRI, r3
 8006480:	f3bf 8f6f 	isb	sy
 8006484:	f3bf 8f4f 	dsb	sy
 8006488:	60fb      	str	r3, [r7, #12]
}
 800648a:	bf00      	nop
 800648c:	e7fe      	b.n	800648c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006492:	2b00      	cmp	r3, #0
 8006494:	d10a      	bne.n	80064ac <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800649a:	f383 8811 	msr	BASEPRI, r3
 800649e:	f3bf 8f6f 	isb	sy
 80064a2:	f3bf 8f4f 	dsb	sy
 80064a6:	60bb      	str	r3, [r7, #8]
}
 80064a8:	bf00      	nop
 80064aa:	e7fe      	b.n	80064aa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064b0:	1e5a      	subs	r2, r3, #1
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80064b6:	693b      	ldr	r3, [r7, #16]
 80064b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064be:	429a      	cmp	r2, r3
 80064c0:	d02c      	beq.n	800651c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80064c2:	693b      	ldr	r3, [r7, #16]
 80064c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d128      	bne.n	800651c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	3304      	adds	r3, #4
 80064ce:	4618      	mov	r0, r3
 80064d0:	f7fe fa22 	bl	8004918 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064e0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064ec:	4b0f      	ldr	r3, [pc, #60]	; (800652c <xTaskPriorityDisinherit+0xd4>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	429a      	cmp	r2, r3
 80064f2:	d903      	bls.n	80064fc <xTaskPriorityDisinherit+0xa4>
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064f8:	4a0c      	ldr	r2, [pc, #48]	; (800652c <xTaskPriorityDisinherit+0xd4>)
 80064fa:	6013      	str	r3, [r2, #0]
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006500:	4613      	mov	r3, r2
 8006502:	009b      	lsls	r3, r3, #2
 8006504:	4413      	add	r3, r2
 8006506:	009b      	lsls	r3, r3, #2
 8006508:	4a09      	ldr	r2, [pc, #36]	; (8006530 <xTaskPriorityDisinherit+0xd8>)
 800650a:	441a      	add	r2, r3
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	3304      	adds	r3, #4
 8006510:	4619      	mov	r1, r3
 8006512:	4610      	mov	r0, r2
 8006514:	f7fe f9a3 	bl	800485e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006518:	2301      	movs	r3, #1
 800651a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800651c:	697b      	ldr	r3, [r7, #20]
	}
 800651e:	4618      	mov	r0, r3
 8006520:	3718      	adds	r7, #24
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}
 8006526:	bf00      	nop
 8006528:	20004378 	.word	0x20004378
 800652c:	20004854 	.word	0x20004854
 8006530:	2000437c 	.word	0x2000437c

08006534 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b084      	sub	sp, #16
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
 800653c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800653e:	4b21      	ldr	r3, [pc, #132]	; (80065c4 <prvAddCurrentTaskToDelayedList+0x90>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006544:	4b20      	ldr	r3, [pc, #128]	; (80065c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	3304      	adds	r3, #4
 800654a:	4618      	mov	r0, r3
 800654c:	f7fe f9e4 	bl	8004918 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006556:	d10a      	bne.n	800656e <prvAddCurrentTaskToDelayedList+0x3a>
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d007      	beq.n	800656e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800655e:	4b1a      	ldr	r3, [pc, #104]	; (80065c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	3304      	adds	r3, #4
 8006564:	4619      	mov	r1, r3
 8006566:	4819      	ldr	r0, [pc, #100]	; (80065cc <prvAddCurrentTaskToDelayedList+0x98>)
 8006568:	f7fe f979 	bl	800485e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800656c:	e026      	b.n	80065bc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800656e:	68fa      	ldr	r2, [r7, #12]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	4413      	add	r3, r2
 8006574:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006576:	4b14      	ldr	r3, [pc, #80]	; (80065c8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	68ba      	ldr	r2, [r7, #8]
 800657c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800657e:	68ba      	ldr	r2, [r7, #8]
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	429a      	cmp	r2, r3
 8006584:	d209      	bcs.n	800659a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006586:	4b12      	ldr	r3, [pc, #72]	; (80065d0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006588:	681a      	ldr	r2, [r3, #0]
 800658a:	4b0f      	ldr	r3, [pc, #60]	; (80065c8 <prvAddCurrentTaskToDelayedList+0x94>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	3304      	adds	r3, #4
 8006590:	4619      	mov	r1, r3
 8006592:	4610      	mov	r0, r2
 8006594:	f7fe f987 	bl	80048a6 <vListInsert>
}
 8006598:	e010      	b.n	80065bc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800659a:	4b0e      	ldr	r3, [pc, #56]	; (80065d4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800659c:	681a      	ldr	r2, [r3, #0]
 800659e:	4b0a      	ldr	r3, [pc, #40]	; (80065c8 <prvAddCurrentTaskToDelayedList+0x94>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	3304      	adds	r3, #4
 80065a4:	4619      	mov	r1, r3
 80065a6:	4610      	mov	r0, r2
 80065a8:	f7fe f97d 	bl	80048a6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80065ac:	4b0a      	ldr	r3, [pc, #40]	; (80065d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	68ba      	ldr	r2, [r7, #8]
 80065b2:	429a      	cmp	r2, r3
 80065b4:	d202      	bcs.n	80065bc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80065b6:	4a08      	ldr	r2, [pc, #32]	; (80065d8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	6013      	str	r3, [r2, #0]
}
 80065bc:	bf00      	nop
 80065be:	3710      	adds	r7, #16
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}
 80065c4:	20004850 	.word	0x20004850
 80065c8:	20004378 	.word	0x20004378
 80065cc:	20004838 	.word	0x20004838
 80065d0:	20004808 	.word	0x20004808
 80065d4:	20004804 	.word	0x20004804
 80065d8:	2000486c 	.word	0x2000486c

080065dc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b08a      	sub	sp, #40	; 0x28
 80065e0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80065e2:	2300      	movs	r3, #0
 80065e4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80065e6:	f000 fb07 	bl	8006bf8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80065ea:	4b1c      	ldr	r3, [pc, #112]	; (800665c <xTimerCreateTimerTask+0x80>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d021      	beq.n	8006636 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80065f2:	2300      	movs	r3, #0
 80065f4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80065f6:	2300      	movs	r3, #0
 80065f8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80065fa:	1d3a      	adds	r2, r7, #4
 80065fc:	f107 0108 	add.w	r1, r7, #8
 8006600:	f107 030c 	add.w	r3, r7, #12
 8006604:	4618      	mov	r0, r3
 8006606:	f7fd fef9 	bl	80043fc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800660a:	6879      	ldr	r1, [r7, #4]
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	68fa      	ldr	r2, [r7, #12]
 8006610:	9202      	str	r2, [sp, #8]
 8006612:	9301      	str	r3, [sp, #4]
 8006614:	2302      	movs	r3, #2
 8006616:	9300      	str	r3, [sp, #0]
 8006618:	2300      	movs	r3, #0
 800661a:	460a      	mov	r2, r1
 800661c:	4910      	ldr	r1, [pc, #64]	; (8006660 <xTimerCreateTimerTask+0x84>)
 800661e:	4811      	ldr	r0, [pc, #68]	; (8006664 <xTimerCreateTimerTask+0x88>)
 8006620:	f7ff f8de 	bl	80057e0 <xTaskCreateStatic>
 8006624:	4603      	mov	r3, r0
 8006626:	4a10      	ldr	r2, [pc, #64]	; (8006668 <xTimerCreateTimerTask+0x8c>)
 8006628:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800662a:	4b0f      	ldr	r3, [pc, #60]	; (8006668 <xTimerCreateTimerTask+0x8c>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d001      	beq.n	8006636 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006632:	2301      	movs	r3, #1
 8006634:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d10a      	bne.n	8006652 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800663c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006640:	f383 8811 	msr	BASEPRI, r3
 8006644:	f3bf 8f6f 	isb	sy
 8006648:	f3bf 8f4f 	dsb	sy
 800664c:	613b      	str	r3, [r7, #16]
}
 800664e:	bf00      	nop
 8006650:	e7fe      	b.n	8006650 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006652:	697b      	ldr	r3, [r7, #20]
}
 8006654:	4618      	mov	r0, r3
 8006656:	3718      	adds	r7, #24
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}
 800665c:	200048a8 	.word	0x200048a8
 8006660:	08007a3c 	.word	0x08007a3c
 8006664:	080067a1 	.word	0x080067a1
 8006668:	200048ac 	.word	0x200048ac

0800666c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b08a      	sub	sp, #40	; 0x28
 8006670:	af00      	add	r7, sp, #0
 8006672:	60f8      	str	r0, [r7, #12]
 8006674:	60b9      	str	r1, [r7, #8]
 8006676:	607a      	str	r2, [r7, #4]
 8006678:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800667a:	2300      	movs	r3, #0
 800667c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d10a      	bne.n	800669a <xTimerGenericCommand+0x2e>
	__asm volatile
 8006684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006688:	f383 8811 	msr	BASEPRI, r3
 800668c:	f3bf 8f6f 	isb	sy
 8006690:	f3bf 8f4f 	dsb	sy
 8006694:	623b      	str	r3, [r7, #32]
}
 8006696:	bf00      	nop
 8006698:	e7fe      	b.n	8006698 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800669a:	4b1a      	ldr	r3, [pc, #104]	; (8006704 <xTimerGenericCommand+0x98>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d02a      	beq.n	80066f8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	2b05      	cmp	r3, #5
 80066b2:	dc18      	bgt.n	80066e6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80066b4:	f7ff feb2 	bl	800641c <xTaskGetSchedulerState>
 80066b8:	4603      	mov	r3, r0
 80066ba:	2b02      	cmp	r3, #2
 80066bc:	d109      	bne.n	80066d2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80066be:	4b11      	ldr	r3, [pc, #68]	; (8006704 <xTimerGenericCommand+0x98>)
 80066c0:	6818      	ldr	r0, [r3, #0]
 80066c2:	f107 0110 	add.w	r1, r7, #16
 80066c6:	2300      	movs	r3, #0
 80066c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066ca:	f7fe fca1 	bl	8005010 <xQueueGenericSend>
 80066ce:	6278      	str	r0, [r7, #36]	; 0x24
 80066d0:	e012      	b.n	80066f8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80066d2:	4b0c      	ldr	r3, [pc, #48]	; (8006704 <xTimerGenericCommand+0x98>)
 80066d4:	6818      	ldr	r0, [r3, #0]
 80066d6:	f107 0110 	add.w	r1, r7, #16
 80066da:	2300      	movs	r3, #0
 80066dc:	2200      	movs	r2, #0
 80066de:	f7fe fc97 	bl	8005010 <xQueueGenericSend>
 80066e2:	6278      	str	r0, [r7, #36]	; 0x24
 80066e4:	e008      	b.n	80066f8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80066e6:	4b07      	ldr	r3, [pc, #28]	; (8006704 <xTimerGenericCommand+0x98>)
 80066e8:	6818      	ldr	r0, [r3, #0]
 80066ea:	f107 0110 	add.w	r1, r7, #16
 80066ee:	2300      	movs	r3, #0
 80066f0:	683a      	ldr	r2, [r7, #0]
 80066f2:	f7fe fd8b 	bl	800520c <xQueueGenericSendFromISR>
 80066f6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80066f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3728      	adds	r7, #40	; 0x28
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}
 8006702:	bf00      	nop
 8006704:	200048a8 	.word	0x200048a8

08006708 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b088      	sub	sp, #32
 800670c:	af02      	add	r7, sp, #8
 800670e:	6078      	str	r0, [r7, #4]
 8006710:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006712:	4b22      	ldr	r3, [pc, #136]	; (800679c <prvProcessExpiredTimer+0x94>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	68db      	ldr	r3, [r3, #12]
 8006718:	68db      	ldr	r3, [r3, #12]
 800671a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	3304      	adds	r3, #4
 8006720:	4618      	mov	r0, r3
 8006722:	f7fe f8f9 	bl	8004918 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800672c:	f003 0304 	and.w	r3, r3, #4
 8006730:	2b00      	cmp	r3, #0
 8006732:	d022      	beq.n	800677a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	699a      	ldr	r2, [r3, #24]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	18d1      	adds	r1, r2, r3
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	683a      	ldr	r2, [r7, #0]
 8006740:	6978      	ldr	r0, [r7, #20]
 8006742:	f000 f8d1 	bl	80068e8 <prvInsertTimerInActiveList>
 8006746:	4603      	mov	r3, r0
 8006748:	2b00      	cmp	r3, #0
 800674a:	d01f      	beq.n	800678c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800674c:	2300      	movs	r3, #0
 800674e:	9300      	str	r3, [sp, #0]
 8006750:	2300      	movs	r3, #0
 8006752:	687a      	ldr	r2, [r7, #4]
 8006754:	2100      	movs	r1, #0
 8006756:	6978      	ldr	r0, [r7, #20]
 8006758:	f7ff ff88 	bl	800666c <xTimerGenericCommand>
 800675c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d113      	bne.n	800678c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006768:	f383 8811 	msr	BASEPRI, r3
 800676c:	f3bf 8f6f 	isb	sy
 8006770:	f3bf 8f4f 	dsb	sy
 8006774:	60fb      	str	r3, [r7, #12]
}
 8006776:	bf00      	nop
 8006778:	e7fe      	b.n	8006778 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006780:	f023 0301 	bic.w	r3, r3, #1
 8006784:	b2da      	uxtb	r2, r3
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	6a1b      	ldr	r3, [r3, #32]
 8006790:	6978      	ldr	r0, [r7, #20]
 8006792:	4798      	blx	r3
}
 8006794:	bf00      	nop
 8006796:	3718      	adds	r7, #24
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}
 800679c:	200048a0 	.word	0x200048a0

080067a0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b084      	sub	sp, #16
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80067a8:	f107 0308 	add.w	r3, r7, #8
 80067ac:	4618      	mov	r0, r3
 80067ae:	f000 f857 	bl	8006860 <prvGetNextExpireTime>
 80067b2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	4619      	mov	r1, r3
 80067b8:	68f8      	ldr	r0, [r7, #12]
 80067ba:	f000 f803 	bl	80067c4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80067be:	f000 f8d5 	bl	800696c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80067c2:	e7f1      	b.n	80067a8 <prvTimerTask+0x8>

080067c4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b084      	sub	sp, #16
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
 80067cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80067ce:	f7ff fa43 	bl	8005c58 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80067d2:	f107 0308 	add.w	r3, r7, #8
 80067d6:	4618      	mov	r0, r3
 80067d8:	f000 f866 	bl	80068a8 <prvSampleTimeNow>
 80067dc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d130      	bne.n	8006846 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d10a      	bne.n	8006800 <prvProcessTimerOrBlockTask+0x3c>
 80067ea:	687a      	ldr	r2, [r7, #4]
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	429a      	cmp	r2, r3
 80067f0:	d806      	bhi.n	8006800 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80067f2:	f7ff fa3f 	bl	8005c74 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80067f6:	68f9      	ldr	r1, [r7, #12]
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f7ff ff85 	bl	8006708 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80067fe:	e024      	b.n	800684a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d008      	beq.n	8006818 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006806:	4b13      	ldr	r3, [pc, #76]	; (8006854 <prvProcessTimerOrBlockTask+0x90>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d101      	bne.n	8006814 <prvProcessTimerOrBlockTask+0x50>
 8006810:	2301      	movs	r3, #1
 8006812:	e000      	b.n	8006816 <prvProcessTimerOrBlockTask+0x52>
 8006814:	2300      	movs	r3, #0
 8006816:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006818:	4b0f      	ldr	r3, [pc, #60]	; (8006858 <prvProcessTimerOrBlockTask+0x94>)
 800681a:	6818      	ldr	r0, [r3, #0]
 800681c:	687a      	ldr	r2, [r7, #4]
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	1ad3      	subs	r3, r2, r3
 8006822:	683a      	ldr	r2, [r7, #0]
 8006824:	4619      	mov	r1, r3
 8006826:	f7fe ffa7 	bl	8005778 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800682a:	f7ff fa23 	bl	8005c74 <xTaskResumeAll>
 800682e:	4603      	mov	r3, r0
 8006830:	2b00      	cmp	r3, #0
 8006832:	d10a      	bne.n	800684a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006834:	4b09      	ldr	r3, [pc, #36]	; (800685c <prvProcessTimerOrBlockTask+0x98>)
 8006836:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800683a:	601a      	str	r2, [r3, #0]
 800683c:	f3bf 8f4f 	dsb	sy
 8006840:	f3bf 8f6f 	isb	sy
}
 8006844:	e001      	b.n	800684a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006846:	f7ff fa15 	bl	8005c74 <xTaskResumeAll>
}
 800684a:	bf00      	nop
 800684c:	3710      	adds	r7, #16
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}
 8006852:	bf00      	nop
 8006854:	200048a4 	.word	0x200048a4
 8006858:	200048a8 	.word	0x200048a8
 800685c:	e000ed04 	.word	0xe000ed04

08006860 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006860:	b480      	push	{r7}
 8006862:	b085      	sub	sp, #20
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006868:	4b0e      	ldr	r3, [pc, #56]	; (80068a4 <prvGetNextExpireTime+0x44>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d101      	bne.n	8006876 <prvGetNextExpireTime+0x16>
 8006872:	2201      	movs	r2, #1
 8006874:	e000      	b.n	8006878 <prvGetNextExpireTime+0x18>
 8006876:	2200      	movs	r2, #0
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d105      	bne.n	8006890 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006884:	4b07      	ldr	r3, [pc, #28]	; (80068a4 <prvGetNextExpireTime+0x44>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	68db      	ldr	r3, [r3, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	60fb      	str	r3, [r7, #12]
 800688e:	e001      	b.n	8006894 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006890:	2300      	movs	r3, #0
 8006892:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006894:	68fb      	ldr	r3, [r7, #12]
}
 8006896:	4618      	mov	r0, r3
 8006898:	3714      	adds	r7, #20
 800689a:	46bd      	mov	sp, r7
 800689c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a0:	4770      	bx	lr
 80068a2:	bf00      	nop
 80068a4:	200048a0 	.word	0x200048a0

080068a8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b084      	sub	sp, #16
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80068b0:	f7ff fa7e 	bl	8005db0 <xTaskGetTickCount>
 80068b4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80068b6:	4b0b      	ldr	r3, [pc, #44]	; (80068e4 <prvSampleTimeNow+0x3c>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	68fa      	ldr	r2, [r7, #12]
 80068bc:	429a      	cmp	r2, r3
 80068be:	d205      	bcs.n	80068cc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80068c0:	f000 f936 	bl	8006b30 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2201      	movs	r2, #1
 80068c8:	601a      	str	r2, [r3, #0]
 80068ca:	e002      	b.n	80068d2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2200      	movs	r2, #0
 80068d0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80068d2:	4a04      	ldr	r2, [pc, #16]	; (80068e4 <prvSampleTimeNow+0x3c>)
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80068d8:	68fb      	ldr	r3, [r7, #12]
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3710      	adds	r7, #16
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}
 80068e2:	bf00      	nop
 80068e4:	200048b0 	.word	0x200048b0

080068e8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b086      	sub	sp, #24
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	60f8      	str	r0, [r7, #12]
 80068f0:	60b9      	str	r1, [r7, #8]
 80068f2:	607a      	str	r2, [r7, #4]
 80068f4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80068f6:	2300      	movs	r3, #0
 80068f8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	68ba      	ldr	r2, [r7, #8]
 80068fe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	68fa      	ldr	r2, [r7, #12]
 8006904:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006906:	68ba      	ldr	r2, [r7, #8]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	429a      	cmp	r2, r3
 800690c:	d812      	bhi.n	8006934 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800690e:	687a      	ldr	r2, [r7, #4]
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	1ad2      	subs	r2, r2, r3
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	699b      	ldr	r3, [r3, #24]
 8006918:	429a      	cmp	r2, r3
 800691a:	d302      	bcc.n	8006922 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800691c:	2301      	movs	r3, #1
 800691e:	617b      	str	r3, [r7, #20]
 8006920:	e01b      	b.n	800695a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006922:	4b10      	ldr	r3, [pc, #64]	; (8006964 <prvInsertTimerInActiveList+0x7c>)
 8006924:	681a      	ldr	r2, [r3, #0]
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	3304      	adds	r3, #4
 800692a:	4619      	mov	r1, r3
 800692c:	4610      	mov	r0, r2
 800692e:	f7fd ffba 	bl	80048a6 <vListInsert>
 8006932:	e012      	b.n	800695a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006934:	687a      	ldr	r2, [r7, #4]
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	429a      	cmp	r2, r3
 800693a:	d206      	bcs.n	800694a <prvInsertTimerInActiveList+0x62>
 800693c:	68ba      	ldr	r2, [r7, #8]
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	429a      	cmp	r2, r3
 8006942:	d302      	bcc.n	800694a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006944:	2301      	movs	r3, #1
 8006946:	617b      	str	r3, [r7, #20]
 8006948:	e007      	b.n	800695a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800694a:	4b07      	ldr	r3, [pc, #28]	; (8006968 <prvInsertTimerInActiveList+0x80>)
 800694c:	681a      	ldr	r2, [r3, #0]
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	3304      	adds	r3, #4
 8006952:	4619      	mov	r1, r3
 8006954:	4610      	mov	r0, r2
 8006956:	f7fd ffa6 	bl	80048a6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800695a:	697b      	ldr	r3, [r7, #20]
}
 800695c:	4618      	mov	r0, r3
 800695e:	3718      	adds	r7, #24
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}
 8006964:	200048a4 	.word	0x200048a4
 8006968:	200048a0 	.word	0x200048a0

0800696c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b08e      	sub	sp, #56	; 0x38
 8006970:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006972:	e0ca      	b.n	8006b0a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2b00      	cmp	r3, #0
 8006978:	da18      	bge.n	80069ac <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800697a:	1d3b      	adds	r3, r7, #4
 800697c:	3304      	adds	r3, #4
 800697e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006982:	2b00      	cmp	r3, #0
 8006984:	d10a      	bne.n	800699c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800698a:	f383 8811 	msr	BASEPRI, r3
 800698e:	f3bf 8f6f 	isb	sy
 8006992:	f3bf 8f4f 	dsb	sy
 8006996:	61fb      	str	r3, [r7, #28]
}
 8006998:	bf00      	nop
 800699a:	e7fe      	b.n	800699a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800699c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069a2:	6850      	ldr	r0, [r2, #4]
 80069a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069a6:	6892      	ldr	r2, [r2, #8]
 80069a8:	4611      	mov	r1, r2
 80069aa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	f2c0 80aa 	blt.w	8006b08 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80069b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ba:	695b      	ldr	r3, [r3, #20]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d004      	beq.n	80069ca <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80069c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069c2:	3304      	adds	r3, #4
 80069c4:	4618      	mov	r0, r3
 80069c6:	f7fd ffa7 	bl	8004918 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80069ca:	463b      	mov	r3, r7
 80069cc:	4618      	mov	r0, r3
 80069ce:	f7ff ff6b 	bl	80068a8 <prvSampleTimeNow>
 80069d2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2b09      	cmp	r3, #9
 80069d8:	f200 8097 	bhi.w	8006b0a <prvProcessReceivedCommands+0x19e>
 80069dc:	a201      	add	r2, pc, #4	; (adr r2, 80069e4 <prvProcessReceivedCommands+0x78>)
 80069de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069e2:	bf00      	nop
 80069e4:	08006a0d 	.word	0x08006a0d
 80069e8:	08006a0d 	.word	0x08006a0d
 80069ec:	08006a0d 	.word	0x08006a0d
 80069f0:	08006a81 	.word	0x08006a81
 80069f4:	08006a95 	.word	0x08006a95
 80069f8:	08006adf 	.word	0x08006adf
 80069fc:	08006a0d 	.word	0x08006a0d
 8006a00:	08006a0d 	.word	0x08006a0d
 8006a04:	08006a81 	.word	0x08006a81
 8006a08:	08006a95 	.word	0x08006a95
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a0e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a12:	f043 0301 	orr.w	r3, r3, #1
 8006a16:	b2da      	uxtb	r2, r3
 8006a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006a1e:	68ba      	ldr	r2, [r7, #8]
 8006a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a22:	699b      	ldr	r3, [r3, #24]
 8006a24:	18d1      	adds	r1, r2, r3
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a2c:	f7ff ff5c 	bl	80068e8 <prvInsertTimerInActiveList>
 8006a30:	4603      	mov	r3, r0
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d069      	beq.n	8006b0a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a38:	6a1b      	ldr	r3, [r3, #32]
 8006a3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a3c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a44:	f003 0304 	and.w	r3, r3, #4
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d05e      	beq.n	8006b0a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006a4c:	68ba      	ldr	r2, [r7, #8]
 8006a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a50:	699b      	ldr	r3, [r3, #24]
 8006a52:	441a      	add	r2, r3
 8006a54:	2300      	movs	r3, #0
 8006a56:	9300      	str	r3, [sp, #0]
 8006a58:	2300      	movs	r3, #0
 8006a5a:	2100      	movs	r1, #0
 8006a5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006a5e:	f7ff fe05 	bl	800666c <xTimerGenericCommand>
 8006a62:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006a64:	6a3b      	ldr	r3, [r7, #32]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d14f      	bne.n	8006b0a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a6e:	f383 8811 	msr	BASEPRI, r3
 8006a72:	f3bf 8f6f 	isb	sy
 8006a76:	f3bf 8f4f 	dsb	sy
 8006a7a:	61bb      	str	r3, [r7, #24]
}
 8006a7c:	bf00      	nop
 8006a7e:	e7fe      	b.n	8006a7e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a86:	f023 0301 	bic.w	r3, r3, #1
 8006a8a:	b2da      	uxtb	r2, r3
 8006a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006a92:	e03a      	b.n	8006b0a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a96:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a9a:	f043 0301 	orr.w	r3, r3, #1
 8006a9e:	b2da      	uxtb	r2, r3
 8006aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aa2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006aa6:	68ba      	ldr	r2, [r7, #8]
 8006aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aaa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aae:	699b      	ldr	r3, [r3, #24]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d10a      	bne.n	8006aca <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab8:	f383 8811 	msr	BASEPRI, r3
 8006abc:	f3bf 8f6f 	isb	sy
 8006ac0:	f3bf 8f4f 	dsb	sy
 8006ac4:	617b      	str	r3, [r7, #20]
}
 8006ac6:	bf00      	nop
 8006ac8:	e7fe      	b.n	8006ac8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006acc:	699a      	ldr	r2, [r3, #24]
 8006ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad0:	18d1      	adds	r1, r2, r3
 8006ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ad6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ad8:	f7ff ff06 	bl	80068e8 <prvInsertTimerInActiveList>
					break;
 8006adc:	e015      	b.n	8006b0a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ae0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ae4:	f003 0302 	and.w	r3, r3, #2
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d103      	bne.n	8006af4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006aec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006aee:	f7fd fd6b 	bl	80045c8 <vPortFree>
 8006af2:	e00a      	b.n	8006b0a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006af6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006afa:	f023 0301 	bic.w	r3, r3, #1
 8006afe:	b2da      	uxtb	r2, r3
 8006b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006b06:	e000      	b.n	8006b0a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006b08:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006b0a:	4b08      	ldr	r3, [pc, #32]	; (8006b2c <prvProcessReceivedCommands+0x1c0>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	1d39      	adds	r1, r7, #4
 8006b10:	2200      	movs	r2, #0
 8006b12:	4618      	mov	r0, r3
 8006b14:	f7fe fc16 	bl	8005344 <xQueueReceive>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	f47f af2a 	bne.w	8006974 <prvProcessReceivedCommands+0x8>
	}
}
 8006b20:	bf00      	nop
 8006b22:	bf00      	nop
 8006b24:	3730      	adds	r7, #48	; 0x30
 8006b26:	46bd      	mov	sp, r7
 8006b28:	bd80      	pop	{r7, pc}
 8006b2a:	bf00      	nop
 8006b2c:	200048a8 	.word	0x200048a8

08006b30 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b088      	sub	sp, #32
 8006b34:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006b36:	e048      	b.n	8006bca <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006b38:	4b2d      	ldr	r3, [pc, #180]	; (8006bf0 <prvSwitchTimerLists+0xc0>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	68db      	ldr	r3, [r3, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b42:	4b2b      	ldr	r3, [pc, #172]	; (8006bf0 <prvSwitchTimerLists+0xc0>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	68db      	ldr	r3, [r3, #12]
 8006b48:	68db      	ldr	r3, [r3, #12]
 8006b4a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	3304      	adds	r3, #4
 8006b50:	4618      	mov	r0, r3
 8006b52:	f7fd fee1 	bl	8004918 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	6a1b      	ldr	r3, [r3, #32]
 8006b5a:	68f8      	ldr	r0, [r7, #12]
 8006b5c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b64:	f003 0304 	and.w	r3, r3, #4
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d02e      	beq.n	8006bca <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	699b      	ldr	r3, [r3, #24]
 8006b70:	693a      	ldr	r2, [r7, #16]
 8006b72:	4413      	add	r3, r2
 8006b74:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006b76:	68ba      	ldr	r2, [r7, #8]
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	d90e      	bls.n	8006b9c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	68ba      	ldr	r2, [r7, #8]
 8006b82:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	68fa      	ldr	r2, [r7, #12]
 8006b88:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006b8a:	4b19      	ldr	r3, [pc, #100]	; (8006bf0 <prvSwitchTimerLists+0xc0>)
 8006b8c:	681a      	ldr	r2, [r3, #0]
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	3304      	adds	r3, #4
 8006b92:	4619      	mov	r1, r3
 8006b94:	4610      	mov	r0, r2
 8006b96:	f7fd fe86 	bl	80048a6 <vListInsert>
 8006b9a:	e016      	b.n	8006bca <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	9300      	str	r3, [sp, #0]
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	693a      	ldr	r2, [r7, #16]
 8006ba4:	2100      	movs	r1, #0
 8006ba6:	68f8      	ldr	r0, [r7, #12]
 8006ba8:	f7ff fd60 	bl	800666c <xTimerGenericCommand>
 8006bac:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d10a      	bne.n	8006bca <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bb8:	f383 8811 	msr	BASEPRI, r3
 8006bbc:	f3bf 8f6f 	isb	sy
 8006bc0:	f3bf 8f4f 	dsb	sy
 8006bc4:	603b      	str	r3, [r7, #0]
}
 8006bc6:	bf00      	nop
 8006bc8:	e7fe      	b.n	8006bc8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006bca:	4b09      	ldr	r3, [pc, #36]	; (8006bf0 <prvSwitchTimerLists+0xc0>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d1b1      	bne.n	8006b38 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006bd4:	4b06      	ldr	r3, [pc, #24]	; (8006bf0 <prvSwitchTimerLists+0xc0>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006bda:	4b06      	ldr	r3, [pc, #24]	; (8006bf4 <prvSwitchTimerLists+0xc4>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a04      	ldr	r2, [pc, #16]	; (8006bf0 <prvSwitchTimerLists+0xc0>)
 8006be0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006be2:	4a04      	ldr	r2, [pc, #16]	; (8006bf4 <prvSwitchTimerLists+0xc4>)
 8006be4:	697b      	ldr	r3, [r7, #20]
 8006be6:	6013      	str	r3, [r2, #0]
}
 8006be8:	bf00      	nop
 8006bea:	3718      	adds	r7, #24
 8006bec:	46bd      	mov	sp, r7
 8006bee:	bd80      	pop	{r7, pc}
 8006bf0:	200048a0 	.word	0x200048a0
 8006bf4:	200048a4 	.word	0x200048a4

08006bf8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b082      	sub	sp, #8
 8006bfc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006bfe:	f7fd ffe1 	bl	8004bc4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006c02:	4b15      	ldr	r3, [pc, #84]	; (8006c58 <prvCheckForValidListAndQueue+0x60>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d120      	bne.n	8006c4c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006c0a:	4814      	ldr	r0, [pc, #80]	; (8006c5c <prvCheckForValidListAndQueue+0x64>)
 8006c0c:	f7fd fdfa 	bl	8004804 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006c10:	4813      	ldr	r0, [pc, #76]	; (8006c60 <prvCheckForValidListAndQueue+0x68>)
 8006c12:	f7fd fdf7 	bl	8004804 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006c16:	4b13      	ldr	r3, [pc, #76]	; (8006c64 <prvCheckForValidListAndQueue+0x6c>)
 8006c18:	4a10      	ldr	r2, [pc, #64]	; (8006c5c <prvCheckForValidListAndQueue+0x64>)
 8006c1a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006c1c:	4b12      	ldr	r3, [pc, #72]	; (8006c68 <prvCheckForValidListAndQueue+0x70>)
 8006c1e:	4a10      	ldr	r2, [pc, #64]	; (8006c60 <prvCheckForValidListAndQueue+0x68>)
 8006c20:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006c22:	2300      	movs	r3, #0
 8006c24:	9300      	str	r3, [sp, #0]
 8006c26:	4b11      	ldr	r3, [pc, #68]	; (8006c6c <prvCheckForValidListAndQueue+0x74>)
 8006c28:	4a11      	ldr	r2, [pc, #68]	; (8006c70 <prvCheckForValidListAndQueue+0x78>)
 8006c2a:	2110      	movs	r1, #16
 8006c2c:	200a      	movs	r0, #10
 8006c2e:	f7fe f953 	bl	8004ed8 <xQueueGenericCreateStatic>
 8006c32:	4603      	mov	r3, r0
 8006c34:	4a08      	ldr	r2, [pc, #32]	; (8006c58 <prvCheckForValidListAndQueue+0x60>)
 8006c36:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006c38:	4b07      	ldr	r3, [pc, #28]	; (8006c58 <prvCheckForValidListAndQueue+0x60>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d005      	beq.n	8006c4c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006c40:	4b05      	ldr	r3, [pc, #20]	; (8006c58 <prvCheckForValidListAndQueue+0x60>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	490b      	ldr	r1, [pc, #44]	; (8006c74 <prvCheckForValidListAndQueue+0x7c>)
 8006c46:	4618      	mov	r0, r3
 8006c48:	f7fe fd6c 	bl	8005724 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006c4c:	f7fd ffea 	bl	8004c24 <vPortExitCritical>
}
 8006c50:	bf00      	nop
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}
 8006c56:	bf00      	nop
 8006c58:	200048a8 	.word	0x200048a8
 8006c5c:	20004878 	.word	0x20004878
 8006c60:	2000488c 	.word	0x2000488c
 8006c64:	200048a0 	.word	0x200048a0
 8006c68:	200048a4 	.word	0x200048a4
 8006c6c:	20004954 	.word	0x20004954
 8006c70:	200048b4 	.word	0x200048b4
 8006c74:	08007a44 	.word	0x08007a44

08006c78 <OLED_Refresh_Gram>:

#include "../../PeripheralDriver/Inc/oledfont.h"

uint8_t OLED_GRAM[128][8];	 
void OLED_Refresh_Gram(void)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b082      	sub	sp, #8
 8006c7c:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 8006c7e:	2300      	movs	r3, #0
 8006c80:	71fb      	strb	r3, [r7, #7]
 8006c82:	e026      	b.n	8006cd2 <OLED_Refresh_Gram+0x5a>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    
 8006c84:	79fb      	ldrb	r3, [r7, #7]
 8006c86:	3b50      	subs	r3, #80	; 0x50
 8006c88:	b2db      	uxtb	r3, r3
 8006c8a:	2100      	movs	r1, #0
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	f000 f82b 	bl	8006ce8 <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      
 8006c92:	2100      	movs	r1, #0
 8006c94:	2000      	movs	r0, #0
 8006c96:	f000 f827 	bl	8006ce8 <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);        
 8006c9a:	2100      	movs	r1, #0
 8006c9c:	2010      	movs	r0, #16
 8006c9e:	f000 f823 	bl	8006ce8 <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA); 
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	71bb      	strb	r3, [r7, #6]
 8006ca6:	e00d      	b.n	8006cc4 <OLED_Refresh_Gram+0x4c>
 8006ca8:	79ba      	ldrb	r2, [r7, #6]
 8006caa:	79fb      	ldrb	r3, [r7, #7]
 8006cac:	490d      	ldr	r1, [pc, #52]	; (8006ce4 <OLED_Refresh_Gram+0x6c>)
 8006cae:	00d2      	lsls	r2, r2, #3
 8006cb0:	440a      	add	r2, r1
 8006cb2:	4413      	add	r3, r2
 8006cb4:	781b      	ldrb	r3, [r3, #0]
 8006cb6:	2101      	movs	r1, #1
 8006cb8:	4618      	mov	r0, r3
 8006cba:	f000 f815 	bl	8006ce8 <OLED_WR_Byte>
 8006cbe:	79bb      	ldrb	r3, [r7, #6]
 8006cc0:	3301      	adds	r3, #1
 8006cc2:	71bb      	strb	r3, [r7, #6]
 8006cc4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	daed      	bge.n	8006ca8 <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)  
 8006ccc:	79fb      	ldrb	r3, [r7, #7]
 8006cce:	3301      	adds	r3, #1
 8006cd0:	71fb      	strb	r3, [r7, #7]
 8006cd2:	79fb      	ldrb	r3, [r7, #7]
 8006cd4:	2b07      	cmp	r3, #7
 8006cd6:	d9d5      	bls.n	8006c84 <OLED_Refresh_Gram+0xc>
	}   
}
 8006cd8:	bf00      	nop
 8006cda:	bf00      	nop
 8006cdc:	3708      	adds	r7, #8
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}
 8006ce2:	bf00      	nop
 8006ce4:	20004b98 	.word	0x20004b98

08006ce8 <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{	
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b084      	sub	sp, #16
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	4603      	mov	r3, r0
 8006cf0:	460a      	mov	r2, r1
 8006cf2:	71fb      	strb	r3, [r7, #7]
 8006cf4:	4613      	mov	r3, r2
 8006cf6:	71bb      	strb	r3, [r7, #6]
	uint8_t i;			  
	if(cmd)
 8006cf8:	79bb      	ldrb	r3, [r7, #6]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d006      	beq.n	8006d0c <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 8006cfe:	2201      	movs	r2, #1
 8006d00:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006d04:	481c      	ldr	r0, [pc, #112]	; (8006d78 <OLED_WR_Byte+0x90>)
 8006d06:	f7fa ff49 	bl	8001b9c <HAL_GPIO_WritePin>
 8006d0a:	e005      	b.n	8006d18 <OLED_WR_Byte+0x30>
	else 
	  OLED_RS_Clr();		  
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006d12:	4819      	ldr	r0, [pc, #100]	; (8006d78 <OLED_WR_Byte+0x90>)
 8006d14:	f7fa ff42 	bl	8001b9c <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 8006d18:	2300      	movs	r3, #0
 8006d1a:	73fb      	strb	r3, [r7, #15]
 8006d1c:	e01e      	b.n	8006d5c <OLED_WR_Byte+0x74>
	{			  
		OLED_SCLK_Clr();
 8006d1e:	2200      	movs	r2, #0
 8006d20:	2120      	movs	r1, #32
 8006d22:	4815      	ldr	r0, [pc, #84]	; (8006d78 <OLED_WR_Byte+0x90>)
 8006d24:	f7fa ff3a 	bl	8001b9c <HAL_GPIO_WritePin>
		if(dat&0x80)
 8006d28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	da05      	bge.n	8006d3c <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 8006d30:	2201      	movs	r2, #1
 8006d32:	2140      	movs	r1, #64	; 0x40
 8006d34:	4810      	ldr	r0, [pc, #64]	; (8006d78 <OLED_WR_Byte+0x90>)
 8006d36:	f7fa ff31 	bl	8001b9c <HAL_GPIO_WritePin>
 8006d3a:	e004      	b.n	8006d46 <OLED_WR_Byte+0x5e>
		else 
		   OLED_SDIN_Clr();
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	2140      	movs	r1, #64	; 0x40
 8006d40:	480d      	ldr	r0, [pc, #52]	; (8006d78 <OLED_WR_Byte+0x90>)
 8006d42:	f7fa ff2b 	bl	8001b9c <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 8006d46:	2201      	movs	r2, #1
 8006d48:	2120      	movs	r1, #32
 8006d4a:	480b      	ldr	r0, [pc, #44]	; (8006d78 <OLED_WR_Byte+0x90>)
 8006d4c:	f7fa ff26 	bl	8001b9c <HAL_GPIO_WritePin>
		dat<<=1;   
 8006d50:	79fb      	ldrb	r3, [r7, #7]
 8006d52:	005b      	lsls	r3, r3, #1
 8006d54:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 8006d56:	7bfb      	ldrb	r3, [r7, #15]
 8006d58:	3301      	adds	r3, #1
 8006d5a:	73fb      	strb	r3, [r7, #15]
 8006d5c:	7bfb      	ldrb	r3, [r7, #15]
 8006d5e:	2b07      	cmp	r3, #7
 8006d60:	d9dd      	bls.n	8006d1e <OLED_WR_Byte+0x36>
	}				 		  
	OLED_RS_Set();   	  
 8006d62:	2201      	movs	r2, #1
 8006d64:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006d68:	4803      	ldr	r0, [pc, #12]	; (8006d78 <OLED_WR_Byte+0x90>)
 8006d6a:	f7fa ff17 	bl	8001b9c <HAL_GPIO_WritePin>
} 
 8006d6e:	bf00      	nop
 8006d70:	3710      	adds	r7, #16
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}
 8006d76:	bf00      	nop
 8006d78:	40021000 	.word	0x40021000

08006d7c <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b082      	sub	sp, #8
 8006d80:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 8006d82:	2300      	movs	r3, #0
 8006d84:	71fb      	strb	r3, [r7, #7]
 8006d86:	e014      	b.n	8006db2 <OLED_Clear+0x36>
 8006d88:	2300      	movs	r3, #0
 8006d8a:	71bb      	strb	r3, [r7, #6]
 8006d8c:	e00a      	b.n	8006da4 <OLED_Clear+0x28>
 8006d8e:	79ba      	ldrb	r2, [r7, #6]
 8006d90:	79fb      	ldrb	r3, [r7, #7]
 8006d92:	490c      	ldr	r1, [pc, #48]	; (8006dc4 <OLED_Clear+0x48>)
 8006d94:	00d2      	lsls	r2, r2, #3
 8006d96:	440a      	add	r2, r1
 8006d98:	4413      	add	r3, r2
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	701a      	strb	r2, [r3, #0]
 8006d9e:	79bb      	ldrb	r3, [r7, #6]
 8006da0:	3301      	adds	r3, #1
 8006da2:	71bb      	strb	r3, [r7, #6]
 8006da4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	daf0      	bge.n	8006d8e <OLED_Clear+0x12>
 8006dac:	79fb      	ldrb	r3, [r7, #7]
 8006dae:	3301      	adds	r3, #1
 8006db0:	71fb      	strb	r3, [r7, #7]
 8006db2:	79fb      	ldrb	r3, [r7, #7]
 8006db4:	2b07      	cmp	r3, #7
 8006db6:	d9e7      	bls.n	8006d88 <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 8006db8:	f7ff ff5e 	bl	8006c78 <OLED_Refresh_Gram>
}
 8006dbc:	bf00      	nop
 8006dbe:	3708      	adds	r7, #8
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}
 8006dc4:	20004b98 	.word	0x20004b98

08006dc8 <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b085      	sub	sp, #20
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	4603      	mov	r3, r0
 8006dd0:	71fb      	strb	r3, [r7, #7]
 8006dd2:	460b      	mov	r3, r1
 8006dd4:	71bb      	strb	r3, [r7, #6]
 8006dd6:	4613      	mov	r3, r2
 8006dd8:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 8006dde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	db41      	blt.n	8006e6a <OLED_DrawPoint+0xa2>
 8006de6:	79bb      	ldrb	r3, [r7, #6]
 8006de8:	2b3f      	cmp	r3, #63	; 0x3f
 8006dea:	d83e      	bhi.n	8006e6a <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 8006dec:	79bb      	ldrb	r3, [r7, #6]
 8006dee:	08db      	lsrs	r3, r3, #3
 8006df0:	b2db      	uxtb	r3, r3
 8006df2:	f1c3 0307 	rsb	r3, r3, #7
 8006df6:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 8006df8:	79bb      	ldrb	r3, [r7, #6]
 8006dfa:	f003 0307 	and.w	r3, r3, #7
 8006dfe:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 8006e00:	7b7b      	ldrb	r3, [r7, #13]
 8006e02:	f1c3 0307 	rsb	r3, r3, #7
 8006e06:	2201      	movs	r2, #1
 8006e08:	fa02 f303 	lsl.w	r3, r2, r3
 8006e0c:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 8006e0e:	797b      	ldrb	r3, [r7, #5]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d012      	beq.n	8006e3a <OLED_DrawPoint+0x72>
 8006e14:	79fa      	ldrb	r2, [r7, #7]
 8006e16:	7bbb      	ldrb	r3, [r7, #14]
 8006e18:	4917      	ldr	r1, [pc, #92]	; (8006e78 <OLED_DrawPoint+0xb0>)
 8006e1a:	00d2      	lsls	r2, r2, #3
 8006e1c:	440a      	add	r2, r1
 8006e1e:	4413      	add	r3, r2
 8006e20:	7818      	ldrb	r0, [r3, #0]
 8006e22:	79fa      	ldrb	r2, [r7, #7]
 8006e24:	7bbb      	ldrb	r3, [r7, #14]
 8006e26:	7bf9      	ldrb	r1, [r7, #15]
 8006e28:	4301      	orrs	r1, r0
 8006e2a:	b2c8      	uxtb	r0, r1
 8006e2c:	4912      	ldr	r1, [pc, #72]	; (8006e78 <OLED_DrawPoint+0xb0>)
 8006e2e:	00d2      	lsls	r2, r2, #3
 8006e30:	440a      	add	r2, r1
 8006e32:	4413      	add	r3, r2
 8006e34:	4602      	mov	r2, r0
 8006e36:	701a      	strb	r2, [r3, #0]
 8006e38:	e018      	b.n	8006e6c <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 8006e3a:	79fa      	ldrb	r2, [r7, #7]
 8006e3c:	7bbb      	ldrb	r3, [r7, #14]
 8006e3e:	490e      	ldr	r1, [pc, #56]	; (8006e78 <OLED_DrawPoint+0xb0>)
 8006e40:	00d2      	lsls	r2, r2, #3
 8006e42:	440a      	add	r2, r1
 8006e44:	4413      	add	r3, r2
 8006e46:	781b      	ldrb	r3, [r3, #0]
 8006e48:	b25a      	sxtb	r2, r3
 8006e4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e4e:	43db      	mvns	r3, r3
 8006e50:	b25b      	sxtb	r3, r3
 8006e52:	4013      	ands	r3, r2
 8006e54:	b259      	sxtb	r1, r3
 8006e56:	79fa      	ldrb	r2, [r7, #7]
 8006e58:	7bbb      	ldrb	r3, [r7, #14]
 8006e5a:	b2c8      	uxtb	r0, r1
 8006e5c:	4906      	ldr	r1, [pc, #24]	; (8006e78 <OLED_DrawPoint+0xb0>)
 8006e5e:	00d2      	lsls	r2, r2, #3
 8006e60:	440a      	add	r2, r1
 8006e62:	4413      	add	r3, r2
 8006e64:	4602      	mov	r2, r0
 8006e66:	701a      	strb	r2, [r3, #0]
 8006e68:	e000      	b.n	8006e6c <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 8006e6a:	bf00      	nop
}
 8006e6c:	3714      	adds	r7, #20
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e74:	4770      	bx	lr
 8006e76:	bf00      	nop
 8006e78:	20004b98 	.word	0x20004b98

08006e7c <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 8006e7c:	b590      	push	{r4, r7, lr}
 8006e7e:	b085      	sub	sp, #20
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	4604      	mov	r4, r0
 8006e84:	4608      	mov	r0, r1
 8006e86:	4611      	mov	r1, r2
 8006e88:	461a      	mov	r2, r3
 8006e8a:	4623      	mov	r3, r4
 8006e8c:	71fb      	strb	r3, [r7, #7]
 8006e8e:	4603      	mov	r3, r0
 8006e90:	71bb      	strb	r3, [r7, #6]
 8006e92:	460b      	mov	r3, r1
 8006e94:	717b      	strb	r3, [r7, #5]
 8006e96:	4613      	mov	r3, r2
 8006e98:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 8006e9a:	79bb      	ldrb	r3, [r7, #6]
 8006e9c:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 8006e9e:	797b      	ldrb	r3, [r7, #5]
 8006ea0:	3b20      	subs	r3, #32
 8006ea2:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	73bb      	strb	r3, [r7, #14]
 8006ea8:	e04d      	b.n	8006f46 <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 8006eaa:	793b      	ldrb	r3, [r7, #4]
 8006eac:	2b0c      	cmp	r3, #12
 8006eae:	d10b      	bne.n	8006ec8 <OLED_ShowChar+0x4c>
 8006eb0:	797a      	ldrb	r2, [r7, #5]
 8006eb2:	7bb9      	ldrb	r1, [r7, #14]
 8006eb4:	4828      	ldr	r0, [pc, #160]	; (8006f58 <OLED_ShowChar+0xdc>)
 8006eb6:	4613      	mov	r3, r2
 8006eb8:	005b      	lsls	r3, r3, #1
 8006eba:	4413      	add	r3, r2
 8006ebc:	009b      	lsls	r3, r3, #2
 8006ebe:	4403      	add	r3, r0
 8006ec0:	440b      	add	r3, r1
 8006ec2:	781b      	ldrb	r3, [r3, #0]
 8006ec4:	73fb      	strb	r3, [r7, #15]
 8006ec6:	e007      	b.n	8006ed8 <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 8006ec8:	797a      	ldrb	r2, [r7, #5]
 8006eca:	7bbb      	ldrb	r3, [r7, #14]
 8006ecc:	4923      	ldr	r1, [pc, #140]	; (8006f5c <OLED_ShowChar+0xe0>)
 8006ece:	0112      	lsls	r2, r2, #4
 8006ed0:	440a      	add	r2, r1
 8006ed2:	4413      	add	r3, r2
 8006ed4:	781b      	ldrb	r3, [r3, #0]
 8006ed6:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 8006ed8:	2300      	movs	r3, #0
 8006eda:	737b      	strb	r3, [r7, #13]
 8006edc:	e02d      	b.n	8006f3a <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 8006ede:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	da07      	bge.n	8006ef6 <OLED_ShowChar+0x7a>
 8006ee6:	f897 2020 	ldrb.w	r2, [r7, #32]
 8006eea:	79b9      	ldrb	r1, [r7, #6]
 8006eec:	79fb      	ldrb	r3, [r7, #7]
 8006eee:	4618      	mov	r0, r3
 8006ef0:	f7ff ff6a 	bl	8006dc8 <OLED_DrawPoint>
 8006ef4:	e00c      	b.n	8006f10 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 8006ef6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	bf0c      	ite	eq
 8006efe:	2301      	moveq	r3, #1
 8006f00:	2300      	movne	r3, #0
 8006f02:	b2db      	uxtb	r3, r3
 8006f04:	461a      	mov	r2, r3
 8006f06:	79b9      	ldrb	r1, [r7, #6]
 8006f08:	79fb      	ldrb	r3, [r7, #7]
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	f7ff ff5c 	bl	8006dc8 <OLED_DrawPoint>
			temp<<=1;
 8006f10:	7bfb      	ldrb	r3, [r7, #15]
 8006f12:	005b      	lsls	r3, r3, #1
 8006f14:	73fb      	strb	r3, [r7, #15]
			y++;
 8006f16:	79bb      	ldrb	r3, [r7, #6]
 8006f18:	3301      	adds	r3, #1
 8006f1a:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 8006f1c:	79ba      	ldrb	r2, [r7, #6]
 8006f1e:	7b3b      	ldrb	r3, [r7, #12]
 8006f20:	1ad2      	subs	r2, r2, r3
 8006f22:	793b      	ldrb	r3, [r7, #4]
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d105      	bne.n	8006f34 <OLED_ShowChar+0xb8>
			{
				y=y0;
 8006f28:	7b3b      	ldrb	r3, [r7, #12]
 8006f2a:	71bb      	strb	r3, [r7, #6]
				x++;
 8006f2c:	79fb      	ldrb	r3, [r7, #7]
 8006f2e:	3301      	adds	r3, #1
 8006f30:	71fb      	strb	r3, [r7, #7]
				break;
 8006f32:	e005      	b.n	8006f40 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 8006f34:	7b7b      	ldrb	r3, [r7, #13]
 8006f36:	3301      	adds	r3, #1
 8006f38:	737b      	strb	r3, [r7, #13]
 8006f3a:	7b7b      	ldrb	r3, [r7, #13]
 8006f3c:	2b07      	cmp	r3, #7
 8006f3e:	d9ce      	bls.n	8006ede <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 8006f40:	7bbb      	ldrb	r3, [r7, #14]
 8006f42:	3301      	adds	r3, #1
 8006f44:	73bb      	strb	r3, [r7, #14]
 8006f46:	7bba      	ldrb	r2, [r7, #14]
 8006f48:	793b      	ldrb	r3, [r7, #4]
 8006f4a:	429a      	cmp	r2, r3
 8006f4c:	d3ad      	bcc.n	8006eaa <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 8006f4e:	bf00      	nop
 8006f50:	bf00      	nop
 8006f52:	3714      	adds	r7, #20
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd90      	pop	{r4, r7, pc}
 8006f58:	08007af4 	.word	0x08007af4
 8006f5c:	08007f68 	.word	0x08007f68

08006f60 <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b084      	sub	sp, #16
 8006f64:	af02      	add	r7, sp, #8
 8006f66:	4603      	mov	r3, r0
 8006f68:	603a      	str	r2, [r7, #0]
 8006f6a:	71fb      	strb	r3, [r7, #7]
 8006f6c:	460b      	mov	r3, r1
 8006f6e:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 8006f70:	e01f      	b.n	8006fb2 <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 8006f72:	79fb      	ldrb	r3, [r7, #7]
 8006f74:	2b7a      	cmp	r3, #122	; 0x7a
 8006f76:	d904      	bls.n	8006f82 <OLED_ShowString+0x22>
 8006f78:	2300      	movs	r3, #0
 8006f7a:	71fb      	strb	r3, [r7, #7]
 8006f7c:	79bb      	ldrb	r3, [r7, #6]
 8006f7e:	3310      	adds	r3, #16
 8006f80:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 8006f82:	79bb      	ldrb	r3, [r7, #6]
 8006f84:	2b3a      	cmp	r3, #58	; 0x3a
 8006f86:	d905      	bls.n	8006f94 <OLED_ShowString+0x34>
 8006f88:	2300      	movs	r3, #0
 8006f8a:	71fb      	strb	r3, [r7, #7]
 8006f8c:	79fb      	ldrb	r3, [r7, #7]
 8006f8e:	71bb      	strb	r3, [r7, #6]
 8006f90:	f7ff fef4 	bl	8006d7c <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	781a      	ldrb	r2, [r3, #0]
 8006f98:	79b9      	ldrb	r1, [r7, #6]
 8006f9a:	79f8      	ldrb	r0, [r7, #7]
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	9300      	str	r3, [sp, #0]
 8006fa0:	230c      	movs	r3, #12
 8006fa2:	f7ff ff6b 	bl	8006e7c <OLED_ShowChar>
        x+=8;
 8006fa6:	79fb      	ldrb	r3, [r7, #7]
 8006fa8:	3308      	adds	r3, #8
 8006faa:	71fb      	strb	r3, [r7, #7]
        p++;
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	3301      	adds	r3, #1
 8006fb0:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	781b      	ldrb	r3, [r3, #0]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d1db      	bne.n	8006f72 <OLED_ShowString+0x12>
    }  
}	 
 8006fba:	bf00      	nop
 8006fbc:	bf00      	nop
 8006fbe:	3708      	adds	r7, #8
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}

08006fc4 <OLED_Init>:

void OLED_Init(void)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 8006fc8:	f7fa fe1c 	bl	8001c04 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 8006fcc:	4b41      	ldr	r3, [pc, #260]	; (80070d4 <OLED_Init+0x110>)
 8006fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fd0:	4a40      	ldr	r2, [pc, #256]	; (80070d4 <OLED_Init+0x110>)
 8006fd2:	f023 0301 	bic.w	r3, r3, #1
 8006fd6:	6713      	str	r3, [r2, #112]	; 0x70
 8006fd8:	4b3e      	ldr	r3, [pc, #248]	; (80070d4 <OLED_Init+0x110>)
 8006fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fdc:	4a3d      	ldr	r2, [pc, #244]	; (80070d4 <OLED_Init+0x110>)
 8006fde:	f023 0304 	bic.w	r3, r3, #4
 8006fe2:	6713      	str	r3, [r2, #112]	; 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 8006fe4:	f7fa fe22 	bl	8001c2c <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 8006fe8:	2200      	movs	r2, #0
 8006fea:	2180      	movs	r1, #128	; 0x80
 8006fec:	483a      	ldr	r0, [pc, #232]	; (80070d8 <OLED_Init+0x114>)
 8006fee:	f7fa fdd5 	bl	8001b9c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8006ff2:	2064      	movs	r0, #100	; 0x64
 8006ff4:	f7fa fa6e 	bl	80014d4 <HAL_Delay>
	OLED_RST_Set();
 8006ff8:	2201      	movs	r2, #1
 8006ffa:	2180      	movs	r1, #128	; 0x80
 8006ffc:	4836      	ldr	r0, [pc, #216]	; (80070d8 <OLED_Init+0x114>)
 8006ffe:	f7fa fdcd 	bl	8001b9c <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 8007002:	2100      	movs	r1, #0
 8007004:	20ae      	movs	r0, #174	; 0xae
 8007006:	f7ff fe6f 	bl	8006ce8 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 800700a:	2100      	movs	r1, #0
 800700c:	20d5      	movs	r0, #213	; 0xd5
 800700e:	f7ff fe6b 	bl	8006ce8 <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 8007012:	2100      	movs	r1, #0
 8007014:	2050      	movs	r0, #80	; 0x50
 8007016:	f7ff fe67 	bl	8006ce8 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 800701a:	2100      	movs	r1, #0
 800701c:	20a8      	movs	r0, #168	; 0xa8
 800701e:	f7ff fe63 	bl	8006ce8 <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 8007022:	2100      	movs	r1, #0
 8007024:	203f      	movs	r0, #63	; 0x3f
 8007026:	f7ff fe5f 	bl	8006ce8 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 800702a:	2100      	movs	r1, #0
 800702c:	20d3      	movs	r0, #211	; 0xd3
 800702e:	f7ff fe5b 	bl	8006ce8 <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 8007032:	2100      	movs	r1, #0
 8007034:	2000      	movs	r0, #0
 8007036:	f7ff fe57 	bl	8006ce8 <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 800703a:	2100      	movs	r1, #0
 800703c:	2040      	movs	r0, #64	; 0x40
 800703e:	f7ff fe53 	bl	8006ce8 <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 8007042:	2100      	movs	r1, #0
 8007044:	208d      	movs	r0, #141	; 0x8d
 8007046:	f7ff fe4f 	bl	8006ce8 <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 800704a:	2100      	movs	r1, #0
 800704c:	2014      	movs	r0, #20
 800704e:	f7ff fe4b 	bl	8006ce8 <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 8007052:	2100      	movs	r1, #0
 8007054:	2020      	movs	r0, #32
 8007056:	f7ff fe47 	bl	8006ce8 <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 800705a:	2100      	movs	r1, #0
 800705c:	2002      	movs	r0, #2
 800705e:	f7ff fe43 	bl	8006ce8 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 8007062:	2100      	movs	r1, #0
 8007064:	20a1      	movs	r0, #161	; 0xa1
 8007066:	f7ff fe3f 	bl	8006ce8 <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 800706a:	2100      	movs	r1, #0
 800706c:	20c0      	movs	r0, #192	; 0xc0
 800706e:	f7ff fe3b 	bl	8006ce8 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 8007072:	2100      	movs	r1, #0
 8007074:	20da      	movs	r0, #218	; 0xda
 8007076:	f7ff fe37 	bl	8006ce8 <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 800707a:	2100      	movs	r1, #0
 800707c:	2012      	movs	r0, #18
 800707e:	f7ff fe33 	bl	8006ce8 <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 8007082:	2100      	movs	r1, #0
 8007084:	2081      	movs	r0, #129	; 0x81
 8007086:	f7ff fe2f 	bl	8006ce8 <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 800708a:	2100      	movs	r1, #0
 800708c:	20ef      	movs	r0, #239	; 0xef
 800708e:	f7ff fe2b 	bl	8006ce8 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 8007092:	2100      	movs	r1, #0
 8007094:	20d9      	movs	r0, #217	; 0xd9
 8007096:	f7ff fe27 	bl	8006ce8 <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 800709a:	2100      	movs	r1, #0
 800709c:	20f1      	movs	r0, #241	; 0xf1
 800709e:	f7ff fe23 	bl	8006ce8 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 80070a2:	2100      	movs	r1, #0
 80070a4:	20db      	movs	r0, #219	; 0xdb
 80070a6:	f7ff fe1f 	bl	8006ce8 <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 80070aa:	2100      	movs	r1, #0
 80070ac:	2030      	movs	r0, #48	; 0x30
 80070ae:	f7ff fe1b 	bl	8006ce8 <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 80070b2:	2100      	movs	r1, #0
 80070b4:	20a4      	movs	r0, #164	; 0xa4
 80070b6:	f7ff fe17 	bl	8006ce8 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 80070ba:	2100      	movs	r1, #0
 80070bc:	20a6      	movs	r0, #166	; 0xa6
 80070be:	f7ff fe13 	bl	8006ce8 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 80070c2:	2100      	movs	r1, #0
 80070c4:	20af      	movs	r0, #175	; 0xaf
 80070c6:	f7ff fe0f 	bl	8006ce8 <OLED_WR_Byte>
	OLED_Clear(); 
 80070ca:	f7ff fe57 	bl	8006d7c <OLED_Clear>
 80070ce:	bf00      	nop
 80070d0:	bd80      	pop	{r7, pc}
 80070d2:	bf00      	nop
 80070d4:	40023800 	.word	0x40023800
 80070d8:	40021000 	.word	0x40021000

080070dc <__errno>:
 80070dc:	4b01      	ldr	r3, [pc, #4]	; (80070e4 <__errno+0x8>)
 80070de:	6818      	ldr	r0, [r3, #0]
 80070e0:	4770      	bx	lr
 80070e2:	bf00      	nop
 80070e4:	20000010 	.word	0x20000010

080070e8 <__libc_init_array>:
 80070e8:	b570      	push	{r4, r5, r6, lr}
 80070ea:	4d0d      	ldr	r5, [pc, #52]	; (8007120 <__libc_init_array+0x38>)
 80070ec:	4c0d      	ldr	r4, [pc, #52]	; (8007124 <__libc_init_array+0x3c>)
 80070ee:	1b64      	subs	r4, r4, r5
 80070f0:	10a4      	asrs	r4, r4, #2
 80070f2:	2600      	movs	r6, #0
 80070f4:	42a6      	cmp	r6, r4
 80070f6:	d109      	bne.n	800710c <__libc_init_array+0x24>
 80070f8:	4d0b      	ldr	r5, [pc, #44]	; (8007128 <__libc_init_array+0x40>)
 80070fa:	4c0c      	ldr	r4, [pc, #48]	; (800712c <__libc_init_array+0x44>)
 80070fc:	f000 fc4e 	bl	800799c <_init>
 8007100:	1b64      	subs	r4, r4, r5
 8007102:	10a4      	asrs	r4, r4, #2
 8007104:	2600      	movs	r6, #0
 8007106:	42a6      	cmp	r6, r4
 8007108:	d105      	bne.n	8007116 <__libc_init_array+0x2e>
 800710a:	bd70      	pop	{r4, r5, r6, pc}
 800710c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007110:	4798      	blx	r3
 8007112:	3601      	adds	r6, #1
 8007114:	e7ee      	b.n	80070f4 <__libc_init_array+0xc>
 8007116:	f855 3b04 	ldr.w	r3, [r5], #4
 800711a:	4798      	blx	r3
 800711c:	3601      	adds	r6, #1
 800711e:	e7f2      	b.n	8007106 <__libc_init_array+0x1e>
 8007120:	08008594 	.word	0x08008594
 8007124:	08008594 	.word	0x08008594
 8007128:	08008594 	.word	0x08008594
 800712c:	08008598 	.word	0x08008598

08007130 <memcpy>:
 8007130:	440a      	add	r2, r1
 8007132:	4291      	cmp	r1, r2
 8007134:	f100 33ff 	add.w	r3, r0, #4294967295
 8007138:	d100      	bne.n	800713c <memcpy+0xc>
 800713a:	4770      	bx	lr
 800713c:	b510      	push	{r4, lr}
 800713e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007142:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007146:	4291      	cmp	r1, r2
 8007148:	d1f9      	bne.n	800713e <memcpy+0xe>
 800714a:	bd10      	pop	{r4, pc}

0800714c <memset>:
 800714c:	4402      	add	r2, r0
 800714e:	4603      	mov	r3, r0
 8007150:	4293      	cmp	r3, r2
 8007152:	d100      	bne.n	8007156 <memset+0xa>
 8007154:	4770      	bx	lr
 8007156:	f803 1b01 	strb.w	r1, [r3], #1
 800715a:	e7f9      	b.n	8007150 <memset+0x4>

0800715c <siprintf>:
 800715c:	b40e      	push	{r1, r2, r3}
 800715e:	b500      	push	{lr}
 8007160:	b09c      	sub	sp, #112	; 0x70
 8007162:	ab1d      	add	r3, sp, #116	; 0x74
 8007164:	9002      	str	r0, [sp, #8]
 8007166:	9006      	str	r0, [sp, #24]
 8007168:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800716c:	4809      	ldr	r0, [pc, #36]	; (8007194 <siprintf+0x38>)
 800716e:	9107      	str	r1, [sp, #28]
 8007170:	9104      	str	r1, [sp, #16]
 8007172:	4909      	ldr	r1, [pc, #36]	; (8007198 <siprintf+0x3c>)
 8007174:	f853 2b04 	ldr.w	r2, [r3], #4
 8007178:	9105      	str	r1, [sp, #20]
 800717a:	6800      	ldr	r0, [r0, #0]
 800717c:	9301      	str	r3, [sp, #4]
 800717e:	a902      	add	r1, sp, #8
 8007180:	f000 f868 	bl	8007254 <_svfiprintf_r>
 8007184:	9b02      	ldr	r3, [sp, #8]
 8007186:	2200      	movs	r2, #0
 8007188:	701a      	strb	r2, [r3, #0]
 800718a:	b01c      	add	sp, #112	; 0x70
 800718c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007190:	b003      	add	sp, #12
 8007192:	4770      	bx	lr
 8007194:	20000010 	.word	0x20000010
 8007198:	ffff0208 	.word	0xffff0208

0800719c <__ssputs_r>:
 800719c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071a0:	688e      	ldr	r6, [r1, #8]
 80071a2:	429e      	cmp	r6, r3
 80071a4:	4682      	mov	sl, r0
 80071a6:	460c      	mov	r4, r1
 80071a8:	4690      	mov	r8, r2
 80071aa:	461f      	mov	r7, r3
 80071ac:	d838      	bhi.n	8007220 <__ssputs_r+0x84>
 80071ae:	898a      	ldrh	r2, [r1, #12]
 80071b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80071b4:	d032      	beq.n	800721c <__ssputs_r+0x80>
 80071b6:	6825      	ldr	r5, [r4, #0]
 80071b8:	6909      	ldr	r1, [r1, #16]
 80071ba:	eba5 0901 	sub.w	r9, r5, r1
 80071be:	6965      	ldr	r5, [r4, #20]
 80071c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80071c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80071c8:	3301      	adds	r3, #1
 80071ca:	444b      	add	r3, r9
 80071cc:	106d      	asrs	r5, r5, #1
 80071ce:	429d      	cmp	r5, r3
 80071d0:	bf38      	it	cc
 80071d2:	461d      	movcc	r5, r3
 80071d4:	0553      	lsls	r3, r2, #21
 80071d6:	d531      	bpl.n	800723c <__ssputs_r+0xa0>
 80071d8:	4629      	mov	r1, r5
 80071da:	f000 fb39 	bl	8007850 <_malloc_r>
 80071de:	4606      	mov	r6, r0
 80071e0:	b950      	cbnz	r0, 80071f8 <__ssputs_r+0x5c>
 80071e2:	230c      	movs	r3, #12
 80071e4:	f8ca 3000 	str.w	r3, [sl]
 80071e8:	89a3      	ldrh	r3, [r4, #12]
 80071ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071ee:	81a3      	strh	r3, [r4, #12]
 80071f0:	f04f 30ff 	mov.w	r0, #4294967295
 80071f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071f8:	6921      	ldr	r1, [r4, #16]
 80071fa:	464a      	mov	r2, r9
 80071fc:	f7ff ff98 	bl	8007130 <memcpy>
 8007200:	89a3      	ldrh	r3, [r4, #12]
 8007202:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007206:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800720a:	81a3      	strh	r3, [r4, #12]
 800720c:	6126      	str	r6, [r4, #16]
 800720e:	6165      	str	r5, [r4, #20]
 8007210:	444e      	add	r6, r9
 8007212:	eba5 0509 	sub.w	r5, r5, r9
 8007216:	6026      	str	r6, [r4, #0]
 8007218:	60a5      	str	r5, [r4, #8]
 800721a:	463e      	mov	r6, r7
 800721c:	42be      	cmp	r6, r7
 800721e:	d900      	bls.n	8007222 <__ssputs_r+0x86>
 8007220:	463e      	mov	r6, r7
 8007222:	4632      	mov	r2, r6
 8007224:	6820      	ldr	r0, [r4, #0]
 8007226:	4641      	mov	r1, r8
 8007228:	f000 faa8 	bl	800777c <memmove>
 800722c:	68a3      	ldr	r3, [r4, #8]
 800722e:	6822      	ldr	r2, [r4, #0]
 8007230:	1b9b      	subs	r3, r3, r6
 8007232:	4432      	add	r2, r6
 8007234:	60a3      	str	r3, [r4, #8]
 8007236:	6022      	str	r2, [r4, #0]
 8007238:	2000      	movs	r0, #0
 800723a:	e7db      	b.n	80071f4 <__ssputs_r+0x58>
 800723c:	462a      	mov	r2, r5
 800723e:	f000 fb61 	bl	8007904 <_realloc_r>
 8007242:	4606      	mov	r6, r0
 8007244:	2800      	cmp	r0, #0
 8007246:	d1e1      	bne.n	800720c <__ssputs_r+0x70>
 8007248:	6921      	ldr	r1, [r4, #16]
 800724a:	4650      	mov	r0, sl
 800724c:	f000 fab0 	bl	80077b0 <_free_r>
 8007250:	e7c7      	b.n	80071e2 <__ssputs_r+0x46>
	...

08007254 <_svfiprintf_r>:
 8007254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007258:	4698      	mov	r8, r3
 800725a:	898b      	ldrh	r3, [r1, #12]
 800725c:	061b      	lsls	r3, r3, #24
 800725e:	b09d      	sub	sp, #116	; 0x74
 8007260:	4607      	mov	r7, r0
 8007262:	460d      	mov	r5, r1
 8007264:	4614      	mov	r4, r2
 8007266:	d50e      	bpl.n	8007286 <_svfiprintf_r+0x32>
 8007268:	690b      	ldr	r3, [r1, #16]
 800726a:	b963      	cbnz	r3, 8007286 <_svfiprintf_r+0x32>
 800726c:	2140      	movs	r1, #64	; 0x40
 800726e:	f000 faef 	bl	8007850 <_malloc_r>
 8007272:	6028      	str	r0, [r5, #0]
 8007274:	6128      	str	r0, [r5, #16]
 8007276:	b920      	cbnz	r0, 8007282 <_svfiprintf_r+0x2e>
 8007278:	230c      	movs	r3, #12
 800727a:	603b      	str	r3, [r7, #0]
 800727c:	f04f 30ff 	mov.w	r0, #4294967295
 8007280:	e0d1      	b.n	8007426 <_svfiprintf_r+0x1d2>
 8007282:	2340      	movs	r3, #64	; 0x40
 8007284:	616b      	str	r3, [r5, #20]
 8007286:	2300      	movs	r3, #0
 8007288:	9309      	str	r3, [sp, #36]	; 0x24
 800728a:	2320      	movs	r3, #32
 800728c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007290:	f8cd 800c 	str.w	r8, [sp, #12]
 8007294:	2330      	movs	r3, #48	; 0x30
 8007296:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007440 <_svfiprintf_r+0x1ec>
 800729a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800729e:	f04f 0901 	mov.w	r9, #1
 80072a2:	4623      	mov	r3, r4
 80072a4:	469a      	mov	sl, r3
 80072a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80072aa:	b10a      	cbz	r2, 80072b0 <_svfiprintf_r+0x5c>
 80072ac:	2a25      	cmp	r2, #37	; 0x25
 80072ae:	d1f9      	bne.n	80072a4 <_svfiprintf_r+0x50>
 80072b0:	ebba 0b04 	subs.w	fp, sl, r4
 80072b4:	d00b      	beq.n	80072ce <_svfiprintf_r+0x7a>
 80072b6:	465b      	mov	r3, fp
 80072b8:	4622      	mov	r2, r4
 80072ba:	4629      	mov	r1, r5
 80072bc:	4638      	mov	r0, r7
 80072be:	f7ff ff6d 	bl	800719c <__ssputs_r>
 80072c2:	3001      	adds	r0, #1
 80072c4:	f000 80aa 	beq.w	800741c <_svfiprintf_r+0x1c8>
 80072c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80072ca:	445a      	add	r2, fp
 80072cc:	9209      	str	r2, [sp, #36]	; 0x24
 80072ce:	f89a 3000 	ldrb.w	r3, [sl]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	f000 80a2 	beq.w	800741c <_svfiprintf_r+0x1c8>
 80072d8:	2300      	movs	r3, #0
 80072da:	f04f 32ff 	mov.w	r2, #4294967295
 80072de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80072e2:	f10a 0a01 	add.w	sl, sl, #1
 80072e6:	9304      	str	r3, [sp, #16]
 80072e8:	9307      	str	r3, [sp, #28]
 80072ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80072ee:	931a      	str	r3, [sp, #104]	; 0x68
 80072f0:	4654      	mov	r4, sl
 80072f2:	2205      	movs	r2, #5
 80072f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072f8:	4851      	ldr	r0, [pc, #324]	; (8007440 <_svfiprintf_r+0x1ec>)
 80072fa:	f7f8 ff69 	bl	80001d0 <memchr>
 80072fe:	9a04      	ldr	r2, [sp, #16]
 8007300:	b9d8      	cbnz	r0, 800733a <_svfiprintf_r+0xe6>
 8007302:	06d0      	lsls	r0, r2, #27
 8007304:	bf44      	itt	mi
 8007306:	2320      	movmi	r3, #32
 8007308:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800730c:	0711      	lsls	r1, r2, #28
 800730e:	bf44      	itt	mi
 8007310:	232b      	movmi	r3, #43	; 0x2b
 8007312:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007316:	f89a 3000 	ldrb.w	r3, [sl]
 800731a:	2b2a      	cmp	r3, #42	; 0x2a
 800731c:	d015      	beq.n	800734a <_svfiprintf_r+0xf6>
 800731e:	9a07      	ldr	r2, [sp, #28]
 8007320:	4654      	mov	r4, sl
 8007322:	2000      	movs	r0, #0
 8007324:	f04f 0c0a 	mov.w	ip, #10
 8007328:	4621      	mov	r1, r4
 800732a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800732e:	3b30      	subs	r3, #48	; 0x30
 8007330:	2b09      	cmp	r3, #9
 8007332:	d94e      	bls.n	80073d2 <_svfiprintf_r+0x17e>
 8007334:	b1b0      	cbz	r0, 8007364 <_svfiprintf_r+0x110>
 8007336:	9207      	str	r2, [sp, #28]
 8007338:	e014      	b.n	8007364 <_svfiprintf_r+0x110>
 800733a:	eba0 0308 	sub.w	r3, r0, r8
 800733e:	fa09 f303 	lsl.w	r3, r9, r3
 8007342:	4313      	orrs	r3, r2
 8007344:	9304      	str	r3, [sp, #16]
 8007346:	46a2      	mov	sl, r4
 8007348:	e7d2      	b.n	80072f0 <_svfiprintf_r+0x9c>
 800734a:	9b03      	ldr	r3, [sp, #12]
 800734c:	1d19      	adds	r1, r3, #4
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	9103      	str	r1, [sp, #12]
 8007352:	2b00      	cmp	r3, #0
 8007354:	bfbb      	ittet	lt
 8007356:	425b      	neglt	r3, r3
 8007358:	f042 0202 	orrlt.w	r2, r2, #2
 800735c:	9307      	strge	r3, [sp, #28]
 800735e:	9307      	strlt	r3, [sp, #28]
 8007360:	bfb8      	it	lt
 8007362:	9204      	strlt	r2, [sp, #16]
 8007364:	7823      	ldrb	r3, [r4, #0]
 8007366:	2b2e      	cmp	r3, #46	; 0x2e
 8007368:	d10c      	bne.n	8007384 <_svfiprintf_r+0x130>
 800736a:	7863      	ldrb	r3, [r4, #1]
 800736c:	2b2a      	cmp	r3, #42	; 0x2a
 800736e:	d135      	bne.n	80073dc <_svfiprintf_r+0x188>
 8007370:	9b03      	ldr	r3, [sp, #12]
 8007372:	1d1a      	adds	r2, r3, #4
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	9203      	str	r2, [sp, #12]
 8007378:	2b00      	cmp	r3, #0
 800737a:	bfb8      	it	lt
 800737c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007380:	3402      	adds	r4, #2
 8007382:	9305      	str	r3, [sp, #20]
 8007384:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007450 <_svfiprintf_r+0x1fc>
 8007388:	7821      	ldrb	r1, [r4, #0]
 800738a:	2203      	movs	r2, #3
 800738c:	4650      	mov	r0, sl
 800738e:	f7f8 ff1f 	bl	80001d0 <memchr>
 8007392:	b140      	cbz	r0, 80073a6 <_svfiprintf_r+0x152>
 8007394:	2340      	movs	r3, #64	; 0x40
 8007396:	eba0 000a 	sub.w	r0, r0, sl
 800739a:	fa03 f000 	lsl.w	r0, r3, r0
 800739e:	9b04      	ldr	r3, [sp, #16]
 80073a0:	4303      	orrs	r3, r0
 80073a2:	3401      	adds	r4, #1
 80073a4:	9304      	str	r3, [sp, #16]
 80073a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073aa:	4826      	ldr	r0, [pc, #152]	; (8007444 <_svfiprintf_r+0x1f0>)
 80073ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80073b0:	2206      	movs	r2, #6
 80073b2:	f7f8 ff0d 	bl	80001d0 <memchr>
 80073b6:	2800      	cmp	r0, #0
 80073b8:	d038      	beq.n	800742c <_svfiprintf_r+0x1d8>
 80073ba:	4b23      	ldr	r3, [pc, #140]	; (8007448 <_svfiprintf_r+0x1f4>)
 80073bc:	bb1b      	cbnz	r3, 8007406 <_svfiprintf_r+0x1b2>
 80073be:	9b03      	ldr	r3, [sp, #12]
 80073c0:	3307      	adds	r3, #7
 80073c2:	f023 0307 	bic.w	r3, r3, #7
 80073c6:	3308      	adds	r3, #8
 80073c8:	9303      	str	r3, [sp, #12]
 80073ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073cc:	4433      	add	r3, r6
 80073ce:	9309      	str	r3, [sp, #36]	; 0x24
 80073d0:	e767      	b.n	80072a2 <_svfiprintf_r+0x4e>
 80073d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80073d6:	460c      	mov	r4, r1
 80073d8:	2001      	movs	r0, #1
 80073da:	e7a5      	b.n	8007328 <_svfiprintf_r+0xd4>
 80073dc:	2300      	movs	r3, #0
 80073de:	3401      	adds	r4, #1
 80073e0:	9305      	str	r3, [sp, #20]
 80073e2:	4619      	mov	r1, r3
 80073e4:	f04f 0c0a 	mov.w	ip, #10
 80073e8:	4620      	mov	r0, r4
 80073ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80073ee:	3a30      	subs	r2, #48	; 0x30
 80073f0:	2a09      	cmp	r2, #9
 80073f2:	d903      	bls.n	80073fc <_svfiprintf_r+0x1a8>
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d0c5      	beq.n	8007384 <_svfiprintf_r+0x130>
 80073f8:	9105      	str	r1, [sp, #20]
 80073fa:	e7c3      	b.n	8007384 <_svfiprintf_r+0x130>
 80073fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8007400:	4604      	mov	r4, r0
 8007402:	2301      	movs	r3, #1
 8007404:	e7f0      	b.n	80073e8 <_svfiprintf_r+0x194>
 8007406:	ab03      	add	r3, sp, #12
 8007408:	9300      	str	r3, [sp, #0]
 800740a:	462a      	mov	r2, r5
 800740c:	4b0f      	ldr	r3, [pc, #60]	; (800744c <_svfiprintf_r+0x1f8>)
 800740e:	a904      	add	r1, sp, #16
 8007410:	4638      	mov	r0, r7
 8007412:	f3af 8000 	nop.w
 8007416:	1c42      	adds	r2, r0, #1
 8007418:	4606      	mov	r6, r0
 800741a:	d1d6      	bne.n	80073ca <_svfiprintf_r+0x176>
 800741c:	89ab      	ldrh	r3, [r5, #12]
 800741e:	065b      	lsls	r3, r3, #25
 8007420:	f53f af2c 	bmi.w	800727c <_svfiprintf_r+0x28>
 8007424:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007426:	b01d      	add	sp, #116	; 0x74
 8007428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800742c:	ab03      	add	r3, sp, #12
 800742e:	9300      	str	r3, [sp, #0]
 8007430:	462a      	mov	r2, r5
 8007432:	4b06      	ldr	r3, [pc, #24]	; (800744c <_svfiprintf_r+0x1f8>)
 8007434:	a904      	add	r1, sp, #16
 8007436:	4638      	mov	r0, r7
 8007438:	f000 f87a 	bl	8007530 <_printf_i>
 800743c:	e7eb      	b.n	8007416 <_svfiprintf_r+0x1c2>
 800743e:	bf00      	nop
 8007440:	08008558 	.word	0x08008558
 8007444:	08008562 	.word	0x08008562
 8007448:	00000000 	.word	0x00000000
 800744c:	0800719d 	.word	0x0800719d
 8007450:	0800855e 	.word	0x0800855e

08007454 <_printf_common>:
 8007454:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007458:	4616      	mov	r6, r2
 800745a:	4699      	mov	r9, r3
 800745c:	688a      	ldr	r2, [r1, #8]
 800745e:	690b      	ldr	r3, [r1, #16]
 8007460:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007464:	4293      	cmp	r3, r2
 8007466:	bfb8      	it	lt
 8007468:	4613      	movlt	r3, r2
 800746a:	6033      	str	r3, [r6, #0]
 800746c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007470:	4607      	mov	r7, r0
 8007472:	460c      	mov	r4, r1
 8007474:	b10a      	cbz	r2, 800747a <_printf_common+0x26>
 8007476:	3301      	adds	r3, #1
 8007478:	6033      	str	r3, [r6, #0]
 800747a:	6823      	ldr	r3, [r4, #0]
 800747c:	0699      	lsls	r1, r3, #26
 800747e:	bf42      	ittt	mi
 8007480:	6833      	ldrmi	r3, [r6, #0]
 8007482:	3302      	addmi	r3, #2
 8007484:	6033      	strmi	r3, [r6, #0]
 8007486:	6825      	ldr	r5, [r4, #0]
 8007488:	f015 0506 	ands.w	r5, r5, #6
 800748c:	d106      	bne.n	800749c <_printf_common+0x48>
 800748e:	f104 0a19 	add.w	sl, r4, #25
 8007492:	68e3      	ldr	r3, [r4, #12]
 8007494:	6832      	ldr	r2, [r6, #0]
 8007496:	1a9b      	subs	r3, r3, r2
 8007498:	42ab      	cmp	r3, r5
 800749a:	dc26      	bgt.n	80074ea <_printf_common+0x96>
 800749c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80074a0:	1e13      	subs	r3, r2, #0
 80074a2:	6822      	ldr	r2, [r4, #0]
 80074a4:	bf18      	it	ne
 80074a6:	2301      	movne	r3, #1
 80074a8:	0692      	lsls	r2, r2, #26
 80074aa:	d42b      	bmi.n	8007504 <_printf_common+0xb0>
 80074ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80074b0:	4649      	mov	r1, r9
 80074b2:	4638      	mov	r0, r7
 80074b4:	47c0      	blx	r8
 80074b6:	3001      	adds	r0, #1
 80074b8:	d01e      	beq.n	80074f8 <_printf_common+0xa4>
 80074ba:	6823      	ldr	r3, [r4, #0]
 80074bc:	68e5      	ldr	r5, [r4, #12]
 80074be:	6832      	ldr	r2, [r6, #0]
 80074c0:	f003 0306 	and.w	r3, r3, #6
 80074c4:	2b04      	cmp	r3, #4
 80074c6:	bf08      	it	eq
 80074c8:	1aad      	subeq	r5, r5, r2
 80074ca:	68a3      	ldr	r3, [r4, #8]
 80074cc:	6922      	ldr	r2, [r4, #16]
 80074ce:	bf0c      	ite	eq
 80074d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80074d4:	2500      	movne	r5, #0
 80074d6:	4293      	cmp	r3, r2
 80074d8:	bfc4      	itt	gt
 80074da:	1a9b      	subgt	r3, r3, r2
 80074dc:	18ed      	addgt	r5, r5, r3
 80074de:	2600      	movs	r6, #0
 80074e0:	341a      	adds	r4, #26
 80074e2:	42b5      	cmp	r5, r6
 80074e4:	d11a      	bne.n	800751c <_printf_common+0xc8>
 80074e6:	2000      	movs	r0, #0
 80074e8:	e008      	b.n	80074fc <_printf_common+0xa8>
 80074ea:	2301      	movs	r3, #1
 80074ec:	4652      	mov	r2, sl
 80074ee:	4649      	mov	r1, r9
 80074f0:	4638      	mov	r0, r7
 80074f2:	47c0      	blx	r8
 80074f4:	3001      	adds	r0, #1
 80074f6:	d103      	bne.n	8007500 <_printf_common+0xac>
 80074f8:	f04f 30ff 	mov.w	r0, #4294967295
 80074fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007500:	3501      	adds	r5, #1
 8007502:	e7c6      	b.n	8007492 <_printf_common+0x3e>
 8007504:	18e1      	adds	r1, r4, r3
 8007506:	1c5a      	adds	r2, r3, #1
 8007508:	2030      	movs	r0, #48	; 0x30
 800750a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800750e:	4422      	add	r2, r4
 8007510:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007514:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007518:	3302      	adds	r3, #2
 800751a:	e7c7      	b.n	80074ac <_printf_common+0x58>
 800751c:	2301      	movs	r3, #1
 800751e:	4622      	mov	r2, r4
 8007520:	4649      	mov	r1, r9
 8007522:	4638      	mov	r0, r7
 8007524:	47c0      	blx	r8
 8007526:	3001      	adds	r0, #1
 8007528:	d0e6      	beq.n	80074f8 <_printf_common+0xa4>
 800752a:	3601      	adds	r6, #1
 800752c:	e7d9      	b.n	80074e2 <_printf_common+0x8e>
	...

08007530 <_printf_i>:
 8007530:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007534:	460c      	mov	r4, r1
 8007536:	4691      	mov	r9, r2
 8007538:	7e27      	ldrb	r7, [r4, #24]
 800753a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800753c:	2f78      	cmp	r7, #120	; 0x78
 800753e:	4680      	mov	r8, r0
 8007540:	469a      	mov	sl, r3
 8007542:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007546:	d807      	bhi.n	8007558 <_printf_i+0x28>
 8007548:	2f62      	cmp	r7, #98	; 0x62
 800754a:	d80a      	bhi.n	8007562 <_printf_i+0x32>
 800754c:	2f00      	cmp	r7, #0
 800754e:	f000 80d8 	beq.w	8007702 <_printf_i+0x1d2>
 8007552:	2f58      	cmp	r7, #88	; 0x58
 8007554:	f000 80a3 	beq.w	800769e <_printf_i+0x16e>
 8007558:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800755c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007560:	e03a      	b.n	80075d8 <_printf_i+0xa8>
 8007562:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007566:	2b15      	cmp	r3, #21
 8007568:	d8f6      	bhi.n	8007558 <_printf_i+0x28>
 800756a:	a001      	add	r0, pc, #4	; (adr r0, 8007570 <_printf_i+0x40>)
 800756c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007570:	080075c9 	.word	0x080075c9
 8007574:	080075dd 	.word	0x080075dd
 8007578:	08007559 	.word	0x08007559
 800757c:	08007559 	.word	0x08007559
 8007580:	08007559 	.word	0x08007559
 8007584:	08007559 	.word	0x08007559
 8007588:	080075dd 	.word	0x080075dd
 800758c:	08007559 	.word	0x08007559
 8007590:	08007559 	.word	0x08007559
 8007594:	08007559 	.word	0x08007559
 8007598:	08007559 	.word	0x08007559
 800759c:	080076e9 	.word	0x080076e9
 80075a0:	0800760d 	.word	0x0800760d
 80075a4:	080076cb 	.word	0x080076cb
 80075a8:	08007559 	.word	0x08007559
 80075ac:	08007559 	.word	0x08007559
 80075b0:	0800770b 	.word	0x0800770b
 80075b4:	08007559 	.word	0x08007559
 80075b8:	0800760d 	.word	0x0800760d
 80075bc:	08007559 	.word	0x08007559
 80075c0:	08007559 	.word	0x08007559
 80075c4:	080076d3 	.word	0x080076d3
 80075c8:	680b      	ldr	r3, [r1, #0]
 80075ca:	1d1a      	adds	r2, r3, #4
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	600a      	str	r2, [r1, #0]
 80075d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80075d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80075d8:	2301      	movs	r3, #1
 80075da:	e0a3      	b.n	8007724 <_printf_i+0x1f4>
 80075dc:	6825      	ldr	r5, [r4, #0]
 80075de:	6808      	ldr	r0, [r1, #0]
 80075e0:	062e      	lsls	r6, r5, #24
 80075e2:	f100 0304 	add.w	r3, r0, #4
 80075e6:	d50a      	bpl.n	80075fe <_printf_i+0xce>
 80075e8:	6805      	ldr	r5, [r0, #0]
 80075ea:	600b      	str	r3, [r1, #0]
 80075ec:	2d00      	cmp	r5, #0
 80075ee:	da03      	bge.n	80075f8 <_printf_i+0xc8>
 80075f0:	232d      	movs	r3, #45	; 0x2d
 80075f2:	426d      	negs	r5, r5
 80075f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075f8:	485e      	ldr	r0, [pc, #376]	; (8007774 <_printf_i+0x244>)
 80075fa:	230a      	movs	r3, #10
 80075fc:	e019      	b.n	8007632 <_printf_i+0x102>
 80075fe:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007602:	6805      	ldr	r5, [r0, #0]
 8007604:	600b      	str	r3, [r1, #0]
 8007606:	bf18      	it	ne
 8007608:	b22d      	sxthne	r5, r5
 800760a:	e7ef      	b.n	80075ec <_printf_i+0xbc>
 800760c:	680b      	ldr	r3, [r1, #0]
 800760e:	6825      	ldr	r5, [r4, #0]
 8007610:	1d18      	adds	r0, r3, #4
 8007612:	6008      	str	r0, [r1, #0]
 8007614:	0628      	lsls	r0, r5, #24
 8007616:	d501      	bpl.n	800761c <_printf_i+0xec>
 8007618:	681d      	ldr	r5, [r3, #0]
 800761a:	e002      	b.n	8007622 <_printf_i+0xf2>
 800761c:	0669      	lsls	r1, r5, #25
 800761e:	d5fb      	bpl.n	8007618 <_printf_i+0xe8>
 8007620:	881d      	ldrh	r5, [r3, #0]
 8007622:	4854      	ldr	r0, [pc, #336]	; (8007774 <_printf_i+0x244>)
 8007624:	2f6f      	cmp	r7, #111	; 0x6f
 8007626:	bf0c      	ite	eq
 8007628:	2308      	moveq	r3, #8
 800762a:	230a      	movne	r3, #10
 800762c:	2100      	movs	r1, #0
 800762e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007632:	6866      	ldr	r6, [r4, #4]
 8007634:	60a6      	str	r6, [r4, #8]
 8007636:	2e00      	cmp	r6, #0
 8007638:	bfa2      	ittt	ge
 800763a:	6821      	ldrge	r1, [r4, #0]
 800763c:	f021 0104 	bicge.w	r1, r1, #4
 8007640:	6021      	strge	r1, [r4, #0]
 8007642:	b90d      	cbnz	r5, 8007648 <_printf_i+0x118>
 8007644:	2e00      	cmp	r6, #0
 8007646:	d04d      	beq.n	80076e4 <_printf_i+0x1b4>
 8007648:	4616      	mov	r6, r2
 800764a:	fbb5 f1f3 	udiv	r1, r5, r3
 800764e:	fb03 5711 	mls	r7, r3, r1, r5
 8007652:	5dc7      	ldrb	r7, [r0, r7]
 8007654:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007658:	462f      	mov	r7, r5
 800765a:	42bb      	cmp	r3, r7
 800765c:	460d      	mov	r5, r1
 800765e:	d9f4      	bls.n	800764a <_printf_i+0x11a>
 8007660:	2b08      	cmp	r3, #8
 8007662:	d10b      	bne.n	800767c <_printf_i+0x14c>
 8007664:	6823      	ldr	r3, [r4, #0]
 8007666:	07df      	lsls	r7, r3, #31
 8007668:	d508      	bpl.n	800767c <_printf_i+0x14c>
 800766a:	6923      	ldr	r3, [r4, #16]
 800766c:	6861      	ldr	r1, [r4, #4]
 800766e:	4299      	cmp	r1, r3
 8007670:	bfde      	ittt	le
 8007672:	2330      	movle	r3, #48	; 0x30
 8007674:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007678:	f106 36ff 	addle.w	r6, r6, #4294967295
 800767c:	1b92      	subs	r2, r2, r6
 800767e:	6122      	str	r2, [r4, #16]
 8007680:	f8cd a000 	str.w	sl, [sp]
 8007684:	464b      	mov	r3, r9
 8007686:	aa03      	add	r2, sp, #12
 8007688:	4621      	mov	r1, r4
 800768a:	4640      	mov	r0, r8
 800768c:	f7ff fee2 	bl	8007454 <_printf_common>
 8007690:	3001      	adds	r0, #1
 8007692:	d14c      	bne.n	800772e <_printf_i+0x1fe>
 8007694:	f04f 30ff 	mov.w	r0, #4294967295
 8007698:	b004      	add	sp, #16
 800769a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800769e:	4835      	ldr	r0, [pc, #212]	; (8007774 <_printf_i+0x244>)
 80076a0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80076a4:	6823      	ldr	r3, [r4, #0]
 80076a6:	680e      	ldr	r6, [r1, #0]
 80076a8:	061f      	lsls	r7, r3, #24
 80076aa:	f856 5b04 	ldr.w	r5, [r6], #4
 80076ae:	600e      	str	r6, [r1, #0]
 80076b0:	d514      	bpl.n	80076dc <_printf_i+0x1ac>
 80076b2:	07d9      	lsls	r1, r3, #31
 80076b4:	bf44      	itt	mi
 80076b6:	f043 0320 	orrmi.w	r3, r3, #32
 80076ba:	6023      	strmi	r3, [r4, #0]
 80076bc:	b91d      	cbnz	r5, 80076c6 <_printf_i+0x196>
 80076be:	6823      	ldr	r3, [r4, #0]
 80076c0:	f023 0320 	bic.w	r3, r3, #32
 80076c4:	6023      	str	r3, [r4, #0]
 80076c6:	2310      	movs	r3, #16
 80076c8:	e7b0      	b.n	800762c <_printf_i+0xfc>
 80076ca:	6823      	ldr	r3, [r4, #0]
 80076cc:	f043 0320 	orr.w	r3, r3, #32
 80076d0:	6023      	str	r3, [r4, #0]
 80076d2:	2378      	movs	r3, #120	; 0x78
 80076d4:	4828      	ldr	r0, [pc, #160]	; (8007778 <_printf_i+0x248>)
 80076d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80076da:	e7e3      	b.n	80076a4 <_printf_i+0x174>
 80076dc:	065e      	lsls	r6, r3, #25
 80076de:	bf48      	it	mi
 80076e0:	b2ad      	uxthmi	r5, r5
 80076e2:	e7e6      	b.n	80076b2 <_printf_i+0x182>
 80076e4:	4616      	mov	r6, r2
 80076e6:	e7bb      	b.n	8007660 <_printf_i+0x130>
 80076e8:	680b      	ldr	r3, [r1, #0]
 80076ea:	6826      	ldr	r6, [r4, #0]
 80076ec:	6960      	ldr	r0, [r4, #20]
 80076ee:	1d1d      	adds	r5, r3, #4
 80076f0:	600d      	str	r5, [r1, #0]
 80076f2:	0635      	lsls	r5, r6, #24
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	d501      	bpl.n	80076fc <_printf_i+0x1cc>
 80076f8:	6018      	str	r0, [r3, #0]
 80076fa:	e002      	b.n	8007702 <_printf_i+0x1d2>
 80076fc:	0671      	lsls	r1, r6, #25
 80076fe:	d5fb      	bpl.n	80076f8 <_printf_i+0x1c8>
 8007700:	8018      	strh	r0, [r3, #0]
 8007702:	2300      	movs	r3, #0
 8007704:	6123      	str	r3, [r4, #16]
 8007706:	4616      	mov	r6, r2
 8007708:	e7ba      	b.n	8007680 <_printf_i+0x150>
 800770a:	680b      	ldr	r3, [r1, #0]
 800770c:	1d1a      	adds	r2, r3, #4
 800770e:	600a      	str	r2, [r1, #0]
 8007710:	681e      	ldr	r6, [r3, #0]
 8007712:	6862      	ldr	r2, [r4, #4]
 8007714:	2100      	movs	r1, #0
 8007716:	4630      	mov	r0, r6
 8007718:	f7f8 fd5a 	bl	80001d0 <memchr>
 800771c:	b108      	cbz	r0, 8007722 <_printf_i+0x1f2>
 800771e:	1b80      	subs	r0, r0, r6
 8007720:	6060      	str	r0, [r4, #4]
 8007722:	6863      	ldr	r3, [r4, #4]
 8007724:	6123      	str	r3, [r4, #16]
 8007726:	2300      	movs	r3, #0
 8007728:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800772c:	e7a8      	b.n	8007680 <_printf_i+0x150>
 800772e:	6923      	ldr	r3, [r4, #16]
 8007730:	4632      	mov	r2, r6
 8007732:	4649      	mov	r1, r9
 8007734:	4640      	mov	r0, r8
 8007736:	47d0      	blx	sl
 8007738:	3001      	adds	r0, #1
 800773a:	d0ab      	beq.n	8007694 <_printf_i+0x164>
 800773c:	6823      	ldr	r3, [r4, #0]
 800773e:	079b      	lsls	r3, r3, #30
 8007740:	d413      	bmi.n	800776a <_printf_i+0x23a>
 8007742:	68e0      	ldr	r0, [r4, #12]
 8007744:	9b03      	ldr	r3, [sp, #12]
 8007746:	4298      	cmp	r0, r3
 8007748:	bfb8      	it	lt
 800774a:	4618      	movlt	r0, r3
 800774c:	e7a4      	b.n	8007698 <_printf_i+0x168>
 800774e:	2301      	movs	r3, #1
 8007750:	4632      	mov	r2, r6
 8007752:	4649      	mov	r1, r9
 8007754:	4640      	mov	r0, r8
 8007756:	47d0      	blx	sl
 8007758:	3001      	adds	r0, #1
 800775a:	d09b      	beq.n	8007694 <_printf_i+0x164>
 800775c:	3501      	adds	r5, #1
 800775e:	68e3      	ldr	r3, [r4, #12]
 8007760:	9903      	ldr	r1, [sp, #12]
 8007762:	1a5b      	subs	r3, r3, r1
 8007764:	42ab      	cmp	r3, r5
 8007766:	dcf2      	bgt.n	800774e <_printf_i+0x21e>
 8007768:	e7eb      	b.n	8007742 <_printf_i+0x212>
 800776a:	2500      	movs	r5, #0
 800776c:	f104 0619 	add.w	r6, r4, #25
 8007770:	e7f5      	b.n	800775e <_printf_i+0x22e>
 8007772:	bf00      	nop
 8007774:	08008569 	.word	0x08008569
 8007778:	0800857a 	.word	0x0800857a

0800777c <memmove>:
 800777c:	4288      	cmp	r0, r1
 800777e:	b510      	push	{r4, lr}
 8007780:	eb01 0402 	add.w	r4, r1, r2
 8007784:	d902      	bls.n	800778c <memmove+0x10>
 8007786:	4284      	cmp	r4, r0
 8007788:	4623      	mov	r3, r4
 800778a:	d807      	bhi.n	800779c <memmove+0x20>
 800778c:	1e43      	subs	r3, r0, #1
 800778e:	42a1      	cmp	r1, r4
 8007790:	d008      	beq.n	80077a4 <memmove+0x28>
 8007792:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007796:	f803 2f01 	strb.w	r2, [r3, #1]!
 800779a:	e7f8      	b.n	800778e <memmove+0x12>
 800779c:	4402      	add	r2, r0
 800779e:	4601      	mov	r1, r0
 80077a0:	428a      	cmp	r2, r1
 80077a2:	d100      	bne.n	80077a6 <memmove+0x2a>
 80077a4:	bd10      	pop	{r4, pc}
 80077a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80077aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80077ae:	e7f7      	b.n	80077a0 <memmove+0x24>

080077b0 <_free_r>:
 80077b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80077b2:	2900      	cmp	r1, #0
 80077b4:	d048      	beq.n	8007848 <_free_r+0x98>
 80077b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077ba:	9001      	str	r0, [sp, #4]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	f1a1 0404 	sub.w	r4, r1, #4
 80077c2:	bfb8      	it	lt
 80077c4:	18e4      	addlt	r4, r4, r3
 80077c6:	f000 f8d3 	bl	8007970 <__malloc_lock>
 80077ca:	4a20      	ldr	r2, [pc, #128]	; (800784c <_free_r+0x9c>)
 80077cc:	9801      	ldr	r0, [sp, #4]
 80077ce:	6813      	ldr	r3, [r2, #0]
 80077d0:	4615      	mov	r5, r2
 80077d2:	b933      	cbnz	r3, 80077e2 <_free_r+0x32>
 80077d4:	6063      	str	r3, [r4, #4]
 80077d6:	6014      	str	r4, [r2, #0]
 80077d8:	b003      	add	sp, #12
 80077da:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80077de:	f000 b8cd 	b.w	800797c <__malloc_unlock>
 80077e2:	42a3      	cmp	r3, r4
 80077e4:	d90b      	bls.n	80077fe <_free_r+0x4e>
 80077e6:	6821      	ldr	r1, [r4, #0]
 80077e8:	1862      	adds	r2, r4, r1
 80077ea:	4293      	cmp	r3, r2
 80077ec:	bf04      	itt	eq
 80077ee:	681a      	ldreq	r2, [r3, #0]
 80077f0:	685b      	ldreq	r3, [r3, #4]
 80077f2:	6063      	str	r3, [r4, #4]
 80077f4:	bf04      	itt	eq
 80077f6:	1852      	addeq	r2, r2, r1
 80077f8:	6022      	streq	r2, [r4, #0]
 80077fa:	602c      	str	r4, [r5, #0]
 80077fc:	e7ec      	b.n	80077d8 <_free_r+0x28>
 80077fe:	461a      	mov	r2, r3
 8007800:	685b      	ldr	r3, [r3, #4]
 8007802:	b10b      	cbz	r3, 8007808 <_free_r+0x58>
 8007804:	42a3      	cmp	r3, r4
 8007806:	d9fa      	bls.n	80077fe <_free_r+0x4e>
 8007808:	6811      	ldr	r1, [r2, #0]
 800780a:	1855      	adds	r5, r2, r1
 800780c:	42a5      	cmp	r5, r4
 800780e:	d10b      	bne.n	8007828 <_free_r+0x78>
 8007810:	6824      	ldr	r4, [r4, #0]
 8007812:	4421      	add	r1, r4
 8007814:	1854      	adds	r4, r2, r1
 8007816:	42a3      	cmp	r3, r4
 8007818:	6011      	str	r1, [r2, #0]
 800781a:	d1dd      	bne.n	80077d8 <_free_r+0x28>
 800781c:	681c      	ldr	r4, [r3, #0]
 800781e:	685b      	ldr	r3, [r3, #4]
 8007820:	6053      	str	r3, [r2, #4]
 8007822:	4421      	add	r1, r4
 8007824:	6011      	str	r1, [r2, #0]
 8007826:	e7d7      	b.n	80077d8 <_free_r+0x28>
 8007828:	d902      	bls.n	8007830 <_free_r+0x80>
 800782a:	230c      	movs	r3, #12
 800782c:	6003      	str	r3, [r0, #0]
 800782e:	e7d3      	b.n	80077d8 <_free_r+0x28>
 8007830:	6825      	ldr	r5, [r4, #0]
 8007832:	1961      	adds	r1, r4, r5
 8007834:	428b      	cmp	r3, r1
 8007836:	bf04      	itt	eq
 8007838:	6819      	ldreq	r1, [r3, #0]
 800783a:	685b      	ldreq	r3, [r3, #4]
 800783c:	6063      	str	r3, [r4, #4]
 800783e:	bf04      	itt	eq
 8007840:	1949      	addeq	r1, r1, r5
 8007842:	6021      	streq	r1, [r4, #0]
 8007844:	6054      	str	r4, [r2, #4]
 8007846:	e7c7      	b.n	80077d8 <_free_r+0x28>
 8007848:	b003      	add	sp, #12
 800784a:	bd30      	pop	{r4, r5, pc}
 800784c:	200049a4 	.word	0x200049a4

08007850 <_malloc_r>:
 8007850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007852:	1ccd      	adds	r5, r1, #3
 8007854:	f025 0503 	bic.w	r5, r5, #3
 8007858:	3508      	adds	r5, #8
 800785a:	2d0c      	cmp	r5, #12
 800785c:	bf38      	it	cc
 800785e:	250c      	movcc	r5, #12
 8007860:	2d00      	cmp	r5, #0
 8007862:	4606      	mov	r6, r0
 8007864:	db01      	blt.n	800786a <_malloc_r+0x1a>
 8007866:	42a9      	cmp	r1, r5
 8007868:	d903      	bls.n	8007872 <_malloc_r+0x22>
 800786a:	230c      	movs	r3, #12
 800786c:	6033      	str	r3, [r6, #0]
 800786e:	2000      	movs	r0, #0
 8007870:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007872:	f000 f87d 	bl	8007970 <__malloc_lock>
 8007876:	4921      	ldr	r1, [pc, #132]	; (80078fc <_malloc_r+0xac>)
 8007878:	680a      	ldr	r2, [r1, #0]
 800787a:	4614      	mov	r4, r2
 800787c:	b99c      	cbnz	r4, 80078a6 <_malloc_r+0x56>
 800787e:	4f20      	ldr	r7, [pc, #128]	; (8007900 <_malloc_r+0xb0>)
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	b923      	cbnz	r3, 800788e <_malloc_r+0x3e>
 8007884:	4621      	mov	r1, r4
 8007886:	4630      	mov	r0, r6
 8007888:	f000 f862 	bl	8007950 <_sbrk_r>
 800788c:	6038      	str	r0, [r7, #0]
 800788e:	4629      	mov	r1, r5
 8007890:	4630      	mov	r0, r6
 8007892:	f000 f85d 	bl	8007950 <_sbrk_r>
 8007896:	1c43      	adds	r3, r0, #1
 8007898:	d123      	bne.n	80078e2 <_malloc_r+0x92>
 800789a:	230c      	movs	r3, #12
 800789c:	6033      	str	r3, [r6, #0]
 800789e:	4630      	mov	r0, r6
 80078a0:	f000 f86c 	bl	800797c <__malloc_unlock>
 80078a4:	e7e3      	b.n	800786e <_malloc_r+0x1e>
 80078a6:	6823      	ldr	r3, [r4, #0]
 80078a8:	1b5b      	subs	r3, r3, r5
 80078aa:	d417      	bmi.n	80078dc <_malloc_r+0x8c>
 80078ac:	2b0b      	cmp	r3, #11
 80078ae:	d903      	bls.n	80078b8 <_malloc_r+0x68>
 80078b0:	6023      	str	r3, [r4, #0]
 80078b2:	441c      	add	r4, r3
 80078b4:	6025      	str	r5, [r4, #0]
 80078b6:	e004      	b.n	80078c2 <_malloc_r+0x72>
 80078b8:	6863      	ldr	r3, [r4, #4]
 80078ba:	42a2      	cmp	r2, r4
 80078bc:	bf0c      	ite	eq
 80078be:	600b      	streq	r3, [r1, #0]
 80078c0:	6053      	strne	r3, [r2, #4]
 80078c2:	4630      	mov	r0, r6
 80078c4:	f000 f85a 	bl	800797c <__malloc_unlock>
 80078c8:	f104 000b 	add.w	r0, r4, #11
 80078cc:	1d23      	adds	r3, r4, #4
 80078ce:	f020 0007 	bic.w	r0, r0, #7
 80078d2:	1ac2      	subs	r2, r0, r3
 80078d4:	d0cc      	beq.n	8007870 <_malloc_r+0x20>
 80078d6:	1a1b      	subs	r3, r3, r0
 80078d8:	50a3      	str	r3, [r4, r2]
 80078da:	e7c9      	b.n	8007870 <_malloc_r+0x20>
 80078dc:	4622      	mov	r2, r4
 80078de:	6864      	ldr	r4, [r4, #4]
 80078e0:	e7cc      	b.n	800787c <_malloc_r+0x2c>
 80078e2:	1cc4      	adds	r4, r0, #3
 80078e4:	f024 0403 	bic.w	r4, r4, #3
 80078e8:	42a0      	cmp	r0, r4
 80078ea:	d0e3      	beq.n	80078b4 <_malloc_r+0x64>
 80078ec:	1a21      	subs	r1, r4, r0
 80078ee:	4630      	mov	r0, r6
 80078f0:	f000 f82e 	bl	8007950 <_sbrk_r>
 80078f4:	3001      	adds	r0, #1
 80078f6:	d1dd      	bne.n	80078b4 <_malloc_r+0x64>
 80078f8:	e7cf      	b.n	800789a <_malloc_r+0x4a>
 80078fa:	bf00      	nop
 80078fc:	200049a4 	.word	0x200049a4
 8007900:	200049a8 	.word	0x200049a8

08007904 <_realloc_r>:
 8007904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007906:	4607      	mov	r7, r0
 8007908:	4614      	mov	r4, r2
 800790a:	460e      	mov	r6, r1
 800790c:	b921      	cbnz	r1, 8007918 <_realloc_r+0x14>
 800790e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007912:	4611      	mov	r1, r2
 8007914:	f7ff bf9c 	b.w	8007850 <_malloc_r>
 8007918:	b922      	cbnz	r2, 8007924 <_realloc_r+0x20>
 800791a:	f7ff ff49 	bl	80077b0 <_free_r>
 800791e:	4625      	mov	r5, r4
 8007920:	4628      	mov	r0, r5
 8007922:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007924:	f000 f830 	bl	8007988 <_malloc_usable_size_r>
 8007928:	42a0      	cmp	r0, r4
 800792a:	d20f      	bcs.n	800794c <_realloc_r+0x48>
 800792c:	4621      	mov	r1, r4
 800792e:	4638      	mov	r0, r7
 8007930:	f7ff ff8e 	bl	8007850 <_malloc_r>
 8007934:	4605      	mov	r5, r0
 8007936:	2800      	cmp	r0, #0
 8007938:	d0f2      	beq.n	8007920 <_realloc_r+0x1c>
 800793a:	4631      	mov	r1, r6
 800793c:	4622      	mov	r2, r4
 800793e:	f7ff fbf7 	bl	8007130 <memcpy>
 8007942:	4631      	mov	r1, r6
 8007944:	4638      	mov	r0, r7
 8007946:	f7ff ff33 	bl	80077b0 <_free_r>
 800794a:	e7e9      	b.n	8007920 <_realloc_r+0x1c>
 800794c:	4635      	mov	r5, r6
 800794e:	e7e7      	b.n	8007920 <_realloc_r+0x1c>

08007950 <_sbrk_r>:
 8007950:	b538      	push	{r3, r4, r5, lr}
 8007952:	4d06      	ldr	r5, [pc, #24]	; (800796c <_sbrk_r+0x1c>)
 8007954:	2300      	movs	r3, #0
 8007956:	4604      	mov	r4, r0
 8007958:	4608      	mov	r0, r1
 800795a:	602b      	str	r3, [r5, #0]
 800795c:	f7f9 fcd6 	bl	800130c <_sbrk>
 8007960:	1c43      	adds	r3, r0, #1
 8007962:	d102      	bne.n	800796a <_sbrk_r+0x1a>
 8007964:	682b      	ldr	r3, [r5, #0]
 8007966:	b103      	cbz	r3, 800796a <_sbrk_r+0x1a>
 8007968:	6023      	str	r3, [r4, #0]
 800796a:	bd38      	pop	{r3, r4, r5, pc}
 800796c:	20004f98 	.word	0x20004f98

08007970 <__malloc_lock>:
 8007970:	4801      	ldr	r0, [pc, #4]	; (8007978 <__malloc_lock+0x8>)
 8007972:	f000 b811 	b.w	8007998 <__retarget_lock_acquire_recursive>
 8007976:	bf00      	nop
 8007978:	20004fa0 	.word	0x20004fa0

0800797c <__malloc_unlock>:
 800797c:	4801      	ldr	r0, [pc, #4]	; (8007984 <__malloc_unlock+0x8>)
 800797e:	f000 b80c 	b.w	800799a <__retarget_lock_release_recursive>
 8007982:	bf00      	nop
 8007984:	20004fa0 	.word	0x20004fa0

08007988 <_malloc_usable_size_r>:
 8007988:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800798c:	1f18      	subs	r0, r3, #4
 800798e:	2b00      	cmp	r3, #0
 8007990:	bfbc      	itt	lt
 8007992:	580b      	ldrlt	r3, [r1, r0]
 8007994:	18c0      	addlt	r0, r0, r3
 8007996:	4770      	bx	lr

08007998 <__retarget_lock_acquire_recursive>:
 8007998:	4770      	bx	lr

0800799a <__retarget_lock_release_recursive>:
 800799a:	4770      	bx	lr

0800799c <_init>:
 800799c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800799e:	bf00      	nop
 80079a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079a2:	bc08      	pop	{r3}
 80079a4:	469e      	mov	lr, r3
 80079a6:	4770      	bx	lr

080079a8 <_fini>:
 80079a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079aa:	bf00      	nop
 80079ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079ae:	bc08      	pop	{r3}
 80079b0:	469e      	mov	lr, r3
 80079b2:	4770      	bx	lr
