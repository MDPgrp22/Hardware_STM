
mdp_hardware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b2c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c04  08009cbc  08009cbc  00019cbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a8c0  0800a8c0  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  0800a8c0  0800a8c0  0001a8c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a8c8  0800a8c8  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a8c8  0800a8c8  0001a8c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a8cc  0800a8cc  0001a8cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800a8d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
 10 .bss          00004fb4  20000080  20000080  00020080  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20005034  20005034  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c261  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003959  00000000  00000000  0003c311  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018b8  00000000  00000000  0003fc70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001768  00000000  00000000  00041528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004b85  00000000  00000000  00042c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001db1d  00000000  00000000  00047815  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d8db8  00000000  00000000  00065332  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013e0ea  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006e18  00000000  00000000  0013e13c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009ca4 	.word	0x08009ca4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	08009ca4 	.word	0x08009ca4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2iz>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d215      	bcs.n	8000a42 <__aeabi_d2iz+0x36>
 8000a16:	d511      	bpl.n	8000a3c <__aeabi_d2iz+0x30>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d912      	bls.n	8000a48 <__aeabi_d2iz+0x3c>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a32:	fa23 f002 	lsr.w	r0, r3, r2
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	4770      	bx	lr
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a46:	d105      	bne.n	8000a54 <__aeabi_d2iz+0x48>
 8000a48:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	bf08      	it	eq
 8000a4e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_d2uiz>:
 8000a5c:	004a      	lsls	r2, r1, #1
 8000a5e:	d211      	bcs.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a64:	d211      	bcs.n	8000a8a <__aeabi_d2uiz+0x2e>
 8000a66:	d50d      	bpl.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d40e      	bmi.n	8000a90 <__aeabi_d2uiz+0x34>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a8e:	d102      	bne.n	8000a96 <__aeabi_d2uiz+0x3a>
 8000a90:	f04f 30ff 	mov.w	r0, #4294967295
 8000a94:	4770      	bx	lr
 8000a96:	f04f 0000 	mov.w	r0, #0
 8000a9a:	4770      	bx	lr

08000a9c <__aeabi_uldivmod>:
 8000a9c:	b953      	cbnz	r3, 8000ab4 <__aeabi_uldivmod+0x18>
 8000a9e:	b94a      	cbnz	r2, 8000ab4 <__aeabi_uldivmod+0x18>
 8000aa0:	2900      	cmp	r1, #0
 8000aa2:	bf08      	it	eq
 8000aa4:	2800      	cmpeq	r0, #0
 8000aa6:	bf1c      	itt	ne
 8000aa8:	f04f 31ff 	movne.w	r1, #4294967295
 8000aac:	f04f 30ff 	movne.w	r0, #4294967295
 8000ab0:	f000 b974 	b.w	8000d9c <__aeabi_idiv0>
 8000ab4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000abc:	f000 f806 	bl	8000acc <__udivmoddi4>
 8000ac0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ac4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac8:	b004      	add	sp, #16
 8000aca:	4770      	bx	lr

08000acc <__udivmoddi4>:
 8000acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ad0:	9d08      	ldr	r5, [sp, #32]
 8000ad2:	4604      	mov	r4, r0
 8000ad4:	468e      	mov	lr, r1
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d14d      	bne.n	8000b76 <__udivmoddi4+0xaa>
 8000ada:	428a      	cmp	r2, r1
 8000adc:	4694      	mov	ip, r2
 8000ade:	d969      	bls.n	8000bb4 <__udivmoddi4+0xe8>
 8000ae0:	fab2 f282 	clz	r2, r2
 8000ae4:	b152      	cbz	r2, 8000afc <__udivmoddi4+0x30>
 8000ae6:	fa01 f302 	lsl.w	r3, r1, r2
 8000aea:	f1c2 0120 	rsb	r1, r2, #32
 8000aee:	fa20 f101 	lsr.w	r1, r0, r1
 8000af2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000af6:	ea41 0e03 	orr.w	lr, r1, r3
 8000afa:	4094      	lsls	r4, r2
 8000afc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b00:	0c21      	lsrs	r1, r4, #16
 8000b02:	fbbe f6f8 	udiv	r6, lr, r8
 8000b06:	fa1f f78c 	uxth.w	r7, ip
 8000b0a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b0e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b12:	fb06 f107 	mul.w	r1, r6, r7
 8000b16:	4299      	cmp	r1, r3
 8000b18:	d90a      	bls.n	8000b30 <__udivmoddi4+0x64>
 8000b1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b1e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b22:	f080 811f 	bcs.w	8000d64 <__udivmoddi4+0x298>
 8000b26:	4299      	cmp	r1, r3
 8000b28:	f240 811c 	bls.w	8000d64 <__udivmoddi4+0x298>
 8000b2c:	3e02      	subs	r6, #2
 8000b2e:	4463      	add	r3, ip
 8000b30:	1a5b      	subs	r3, r3, r1
 8000b32:	b2a4      	uxth	r4, r4
 8000b34:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b38:	fb08 3310 	mls	r3, r8, r0, r3
 8000b3c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b40:	fb00 f707 	mul.w	r7, r0, r7
 8000b44:	42a7      	cmp	r7, r4
 8000b46:	d90a      	bls.n	8000b5e <__udivmoddi4+0x92>
 8000b48:	eb1c 0404 	adds.w	r4, ip, r4
 8000b4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b50:	f080 810a 	bcs.w	8000d68 <__udivmoddi4+0x29c>
 8000b54:	42a7      	cmp	r7, r4
 8000b56:	f240 8107 	bls.w	8000d68 <__udivmoddi4+0x29c>
 8000b5a:	4464      	add	r4, ip
 8000b5c:	3802      	subs	r0, #2
 8000b5e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b62:	1be4      	subs	r4, r4, r7
 8000b64:	2600      	movs	r6, #0
 8000b66:	b11d      	cbz	r5, 8000b70 <__udivmoddi4+0xa4>
 8000b68:	40d4      	lsrs	r4, r2
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b70:	4631      	mov	r1, r6
 8000b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b76:	428b      	cmp	r3, r1
 8000b78:	d909      	bls.n	8000b8e <__udivmoddi4+0xc2>
 8000b7a:	2d00      	cmp	r5, #0
 8000b7c:	f000 80ef 	beq.w	8000d5e <__udivmoddi4+0x292>
 8000b80:	2600      	movs	r6, #0
 8000b82:	e9c5 0100 	strd	r0, r1, [r5]
 8000b86:	4630      	mov	r0, r6
 8000b88:	4631      	mov	r1, r6
 8000b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b8e:	fab3 f683 	clz	r6, r3
 8000b92:	2e00      	cmp	r6, #0
 8000b94:	d14a      	bne.n	8000c2c <__udivmoddi4+0x160>
 8000b96:	428b      	cmp	r3, r1
 8000b98:	d302      	bcc.n	8000ba0 <__udivmoddi4+0xd4>
 8000b9a:	4282      	cmp	r2, r0
 8000b9c:	f200 80f9 	bhi.w	8000d92 <__udivmoddi4+0x2c6>
 8000ba0:	1a84      	subs	r4, r0, r2
 8000ba2:	eb61 0303 	sbc.w	r3, r1, r3
 8000ba6:	2001      	movs	r0, #1
 8000ba8:	469e      	mov	lr, r3
 8000baa:	2d00      	cmp	r5, #0
 8000bac:	d0e0      	beq.n	8000b70 <__udivmoddi4+0xa4>
 8000bae:	e9c5 4e00 	strd	r4, lr, [r5]
 8000bb2:	e7dd      	b.n	8000b70 <__udivmoddi4+0xa4>
 8000bb4:	b902      	cbnz	r2, 8000bb8 <__udivmoddi4+0xec>
 8000bb6:	deff      	udf	#255	; 0xff
 8000bb8:	fab2 f282 	clz	r2, r2
 8000bbc:	2a00      	cmp	r2, #0
 8000bbe:	f040 8092 	bne.w	8000ce6 <__udivmoddi4+0x21a>
 8000bc2:	eba1 010c 	sub.w	r1, r1, ip
 8000bc6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bca:	fa1f fe8c 	uxth.w	lr, ip
 8000bce:	2601      	movs	r6, #1
 8000bd0:	0c20      	lsrs	r0, r4, #16
 8000bd2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000bd6:	fb07 1113 	mls	r1, r7, r3, r1
 8000bda:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bde:	fb0e f003 	mul.w	r0, lr, r3
 8000be2:	4288      	cmp	r0, r1
 8000be4:	d908      	bls.n	8000bf8 <__udivmoddi4+0x12c>
 8000be6:	eb1c 0101 	adds.w	r1, ip, r1
 8000bea:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bee:	d202      	bcs.n	8000bf6 <__udivmoddi4+0x12a>
 8000bf0:	4288      	cmp	r0, r1
 8000bf2:	f200 80cb 	bhi.w	8000d8c <__udivmoddi4+0x2c0>
 8000bf6:	4643      	mov	r3, r8
 8000bf8:	1a09      	subs	r1, r1, r0
 8000bfa:	b2a4      	uxth	r4, r4
 8000bfc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c00:	fb07 1110 	mls	r1, r7, r0, r1
 8000c04:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c08:	fb0e fe00 	mul.w	lr, lr, r0
 8000c0c:	45a6      	cmp	lr, r4
 8000c0e:	d908      	bls.n	8000c22 <__udivmoddi4+0x156>
 8000c10:	eb1c 0404 	adds.w	r4, ip, r4
 8000c14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c18:	d202      	bcs.n	8000c20 <__udivmoddi4+0x154>
 8000c1a:	45a6      	cmp	lr, r4
 8000c1c:	f200 80bb 	bhi.w	8000d96 <__udivmoddi4+0x2ca>
 8000c20:	4608      	mov	r0, r1
 8000c22:	eba4 040e 	sub.w	r4, r4, lr
 8000c26:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c2a:	e79c      	b.n	8000b66 <__udivmoddi4+0x9a>
 8000c2c:	f1c6 0720 	rsb	r7, r6, #32
 8000c30:	40b3      	lsls	r3, r6
 8000c32:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c36:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c3a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c3e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c42:	431c      	orrs	r4, r3
 8000c44:	40f9      	lsrs	r1, r7
 8000c46:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c4a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c4e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c52:	0c20      	lsrs	r0, r4, #16
 8000c54:	fa1f fe8c 	uxth.w	lr, ip
 8000c58:	fb09 1118 	mls	r1, r9, r8, r1
 8000c5c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c60:	fb08 f00e 	mul.w	r0, r8, lr
 8000c64:	4288      	cmp	r0, r1
 8000c66:	fa02 f206 	lsl.w	r2, r2, r6
 8000c6a:	d90b      	bls.n	8000c84 <__udivmoddi4+0x1b8>
 8000c6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c70:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c74:	f080 8088 	bcs.w	8000d88 <__udivmoddi4+0x2bc>
 8000c78:	4288      	cmp	r0, r1
 8000c7a:	f240 8085 	bls.w	8000d88 <__udivmoddi4+0x2bc>
 8000c7e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c82:	4461      	add	r1, ip
 8000c84:	1a09      	subs	r1, r1, r0
 8000c86:	b2a4      	uxth	r4, r4
 8000c88:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c8c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c90:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c98:	458e      	cmp	lr, r1
 8000c9a:	d908      	bls.n	8000cae <__udivmoddi4+0x1e2>
 8000c9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000ca0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ca4:	d26c      	bcs.n	8000d80 <__udivmoddi4+0x2b4>
 8000ca6:	458e      	cmp	lr, r1
 8000ca8:	d96a      	bls.n	8000d80 <__udivmoddi4+0x2b4>
 8000caa:	3802      	subs	r0, #2
 8000cac:	4461      	add	r1, ip
 8000cae:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cb2:	fba0 9402 	umull	r9, r4, r0, r2
 8000cb6:	eba1 010e 	sub.w	r1, r1, lr
 8000cba:	42a1      	cmp	r1, r4
 8000cbc:	46c8      	mov	r8, r9
 8000cbe:	46a6      	mov	lr, r4
 8000cc0:	d356      	bcc.n	8000d70 <__udivmoddi4+0x2a4>
 8000cc2:	d053      	beq.n	8000d6c <__udivmoddi4+0x2a0>
 8000cc4:	b15d      	cbz	r5, 8000cde <__udivmoddi4+0x212>
 8000cc6:	ebb3 0208 	subs.w	r2, r3, r8
 8000cca:	eb61 010e 	sbc.w	r1, r1, lr
 8000cce:	fa01 f707 	lsl.w	r7, r1, r7
 8000cd2:	fa22 f306 	lsr.w	r3, r2, r6
 8000cd6:	40f1      	lsrs	r1, r6
 8000cd8:	431f      	orrs	r7, r3
 8000cda:	e9c5 7100 	strd	r7, r1, [r5]
 8000cde:	2600      	movs	r6, #0
 8000ce0:	4631      	mov	r1, r6
 8000ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce6:	f1c2 0320 	rsb	r3, r2, #32
 8000cea:	40d8      	lsrs	r0, r3
 8000cec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf0:	fa21 f303 	lsr.w	r3, r1, r3
 8000cf4:	4091      	lsls	r1, r2
 8000cf6:	4301      	orrs	r1, r0
 8000cf8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfc:	fa1f fe8c 	uxth.w	lr, ip
 8000d00:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d04:	fb07 3610 	mls	r6, r7, r0, r3
 8000d08:	0c0b      	lsrs	r3, r1, #16
 8000d0a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d0e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d12:	429e      	cmp	r6, r3
 8000d14:	fa04 f402 	lsl.w	r4, r4, r2
 8000d18:	d908      	bls.n	8000d2c <__udivmoddi4+0x260>
 8000d1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d22:	d22f      	bcs.n	8000d84 <__udivmoddi4+0x2b8>
 8000d24:	429e      	cmp	r6, r3
 8000d26:	d92d      	bls.n	8000d84 <__udivmoddi4+0x2b8>
 8000d28:	3802      	subs	r0, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1b9b      	subs	r3, r3, r6
 8000d2e:	b289      	uxth	r1, r1
 8000d30:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d34:	fb07 3316 	mls	r3, r7, r6, r3
 8000d38:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d3c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d40:	428b      	cmp	r3, r1
 8000d42:	d908      	bls.n	8000d56 <__udivmoddi4+0x28a>
 8000d44:	eb1c 0101 	adds.w	r1, ip, r1
 8000d48:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d4c:	d216      	bcs.n	8000d7c <__udivmoddi4+0x2b0>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d914      	bls.n	8000d7c <__udivmoddi4+0x2b0>
 8000d52:	3e02      	subs	r6, #2
 8000d54:	4461      	add	r1, ip
 8000d56:	1ac9      	subs	r1, r1, r3
 8000d58:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d5c:	e738      	b.n	8000bd0 <__udivmoddi4+0x104>
 8000d5e:	462e      	mov	r6, r5
 8000d60:	4628      	mov	r0, r5
 8000d62:	e705      	b.n	8000b70 <__udivmoddi4+0xa4>
 8000d64:	4606      	mov	r6, r0
 8000d66:	e6e3      	b.n	8000b30 <__udivmoddi4+0x64>
 8000d68:	4618      	mov	r0, r3
 8000d6a:	e6f8      	b.n	8000b5e <__udivmoddi4+0x92>
 8000d6c:	454b      	cmp	r3, r9
 8000d6e:	d2a9      	bcs.n	8000cc4 <__udivmoddi4+0x1f8>
 8000d70:	ebb9 0802 	subs.w	r8, r9, r2
 8000d74:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d78:	3801      	subs	r0, #1
 8000d7a:	e7a3      	b.n	8000cc4 <__udivmoddi4+0x1f8>
 8000d7c:	4646      	mov	r6, r8
 8000d7e:	e7ea      	b.n	8000d56 <__udivmoddi4+0x28a>
 8000d80:	4620      	mov	r0, r4
 8000d82:	e794      	b.n	8000cae <__udivmoddi4+0x1e2>
 8000d84:	4640      	mov	r0, r8
 8000d86:	e7d1      	b.n	8000d2c <__udivmoddi4+0x260>
 8000d88:	46d0      	mov	r8, sl
 8000d8a:	e77b      	b.n	8000c84 <__udivmoddi4+0x1b8>
 8000d8c:	3b02      	subs	r3, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	e732      	b.n	8000bf8 <__udivmoddi4+0x12c>
 8000d92:	4630      	mov	r0, r6
 8000d94:	e709      	b.n	8000baa <__udivmoddi4+0xde>
 8000d96:	4464      	add	r4, ip
 8000d98:	3802      	subs	r0, #2
 8000d9a:	e742      	b.n	8000c22 <__udivmoddi4+0x156>

08000d9c <__aeabi_idiv0>:
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop

08000da0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000da4:	f001 fa20 	bl	80021e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000da8:	f000 f866 	bl	8000e78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dac:	f000 fb0a 	bl	80013c4 <MX_GPIO_Init>
  MX_TIM8_Init();
 8000db0:	f000 fa34 	bl	800121c <MX_TIM8_Init>
  MX_TIM2_Init();
 8000db4:	f000 f98a 	bl	80010cc <MX_TIM2_Init>
  MX_TIM3_Init();
 8000db8:	f000 f9dc 	bl	8001174 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000dbc:	f000 f8e8 	bl	8000f90 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8000dc0:	f000 fad6 	bl	8001370 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8000dc4:	f000 f8b6 	bl	8000f34 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  OLED_Init();
 8000dc8:	f008 fa30 	bl	800922c <OLED_Init>
  gyroInit();
 8000dcc:	f007 fff4 	bl	8008db8 <gyroInit>
  HAL_UART_Receive_IT(&huart3, (uint8_t *) aRxBuffer, 4);
 8000dd0:	2204      	movs	r2, #4
 8000dd2:	4918      	ldr	r1, [pc, #96]	; (8000e34 <main+0x94>)
 8000dd4:	4818      	ldr	r0, [pc, #96]	; (8000e38 <main+0x98>)
 8000dd6:	f004 fa80 	bl	80052da <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000dda:	f005 f9dd 	bl	8006198 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000dde:	4a17      	ldr	r2, [pc, #92]	; (8000e3c <main+0x9c>)
 8000de0:	2100      	movs	r1, #0
 8000de2:	4817      	ldr	r0, [pc, #92]	; (8000e40 <main+0xa0>)
 8000de4:	f005 fa22 	bl	800622c <osThreadNew>
 8000de8:	4603      	mov	r3, r0
 8000dea:	4a16      	ldr	r2, [pc, #88]	; (8000e44 <main+0xa4>)
 8000dec:	6013      	str	r3, [r2, #0]

  /* creation of MotorTask */
  MotorTaskHandle = osThreadNew(motor, NULL, &MotorTask_attributes);
 8000dee:	4a16      	ldr	r2, [pc, #88]	; (8000e48 <main+0xa8>)
 8000df0:	2100      	movs	r1, #0
 8000df2:	4816      	ldr	r0, [pc, #88]	; (8000e4c <main+0xac>)
 8000df4:	f005 fa1a 	bl	800622c <osThreadNew>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	4a15      	ldr	r2, [pc, #84]	; (8000e50 <main+0xb0>)
 8000dfc:	6013      	str	r3, [r2, #0]

  /* creation of showOLED */
  showOLEDHandle = osThreadNew(showoled, NULL, &showOLED_attributes);
 8000dfe:	4a15      	ldr	r2, [pc, #84]	; (8000e54 <main+0xb4>)
 8000e00:	2100      	movs	r1, #0
 8000e02:	4815      	ldr	r0, [pc, #84]	; (8000e58 <main+0xb8>)
 8000e04:	f005 fa12 	bl	800622c <osThreadNew>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	4a14      	ldr	r2, [pc, #80]	; (8000e5c <main+0xbc>)
 8000e0c:	6013      	str	r3, [r2, #0]

  /* creation of EncoderTask */
  EncoderTaskHandle = osThreadNew(encoder_task, NULL, &EncoderTask_attributes);
 8000e0e:	4a14      	ldr	r2, [pc, #80]	; (8000e60 <main+0xc0>)
 8000e10:	2100      	movs	r1, #0
 8000e12:	4814      	ldr	r0, [pc, #80]	; (8000e64 <main+0xc4>)
 8000e14:	f005 fa0a 	bl	800622c <osThreadNew>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	4a13      	ldr	r2, [pc, #76]	; (8000e68 <main+0xc8>)
 8000e1c:	6013      	str	r3, [r2, #0]

  /* creation of GyroTask */
  GyroTaskHandle = osThreadNew(gyro_task, NULL, &GyroTask_attributes);
 8000e1e:	4a13      	ldr	r2, [pc, #76]	; (8000e6c <main+0xcc>)
 8000e20:	2100      	movs	r1, #0
 8000e22:	4813      	ldr	r0, [pc, #76]	; (8000e70 <main+0xd0>)
 8000e24:	f005 fa02 	bl	800622c <osThreadNew>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	4a12      	ldr	r2, [pc, #72]	; (8000e74 <main+0xd4>)
 8000e2c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000e2e:	f005 f9d7 	bl	80061e0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e32:	e7fe      	b.n	8000e32 <main+0x92>
 8000e34:	20000268 	.word	0x20000268
 8000e38:	20000210 	.word	0x20000210
 8000e3c:	08009d5c 	.word	0x08009d5c
 8000e40:	08001525 	.word	0x08001525
 8000e44:	20000254 	.word	0x20000254
 8000e48:	08009d80 	.word	0x08009d80
 8000e4c:	08001539 	.word	0x08001539
 8000e50:	20000258 	.word	0x20000258
 8000e54:	08009da4 	.word	0x08009da4
 8000e58:	08001945 	.word	0x08001945
 8000e5c:	2000025c 	.word	0x2000025c
 8000e60:	08009dc8 	.word	0x08009dc8
 8000e64:	08001971 	.word	0x08001971
 8000e68:	20000260 	.word	0x20000260
 8000e6c:	08009dec 	.word	0x08009dec
 8000e70:	08001a59 	.word	0x08001a59
 8000e74:	20000264 	.word	0x20000264

08000e78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b094      	sub	sp, #80	; 0x50
 8000e7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e7e:	f107 0320 	add.w	r3, r7, #32
 8000e82:	2230      	movs	r2, #48	; 0x30
 8000e84:	2100      	movs	r1, #0
 8000e86:	4618      	mov	r0, r3
 8000e88:	f008 faa4 	bl	80093d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e8c:	f107 030c 	add.w	r3, r7, #12
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]
 8000e94:	605a      	str	r2, [r3, #4]
 8000e96:	609a      	str	r2, [r3, #8]
 8000e98:	60da      	str	r2, [r3, #12]
 8000e9a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	60bb      	str	r3, [r7, #8]
 8000ea0:	4b22      	ldr	r3, [pc, #136]	; (8000f2c <SystemClock_Config+0xb4>)
 8000ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea4:	4a21      	ldr	r2, [pc, #132]	; (8000f2c <SystemClock_Config+0xb4>)
 8000ea6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eaa:	6413      	str	r3, [r2, #64]	; 0x40
 8000eac:	4b1f      	ldr	r3, [pc, #124]	; (8000f2c <SystemClock_Config+0xb4>)
 8000eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eb4:	60bb      	str	r3, [r7, #8]
 8000eb6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000eb8:	2300      	movs	r3, #0
 8000eba:	607b      	str	r3, [r7, #4]
 8000ebc:	4b1c      	ldr	r3, [pc, #112]	; (8000f30 <SystemClock_Config+0xb8>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a1b      	ldr	r2, [pc, #108]	; (8000f30 <SystemClock_Config+0xb8>)
 8000ec2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ec6:	6013      	str	r3, [r2, #0]
 8000ec8:	4b19      	ldr	r3, [pc, #100]	; (8000f30 <SystemClock_Config+0xb8>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ed0:	607b      	str	r3, [r7, #4]
 8000ed2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000edc:	2310      	movs	r3, #16
 8000ede:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ee4:	f107 0320 	add.w	r3, r7, #32
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f002 fd45 	bl	8003978 <HAL_RCC_OscConfig>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000ef4:	f000 fe42 	bl	8001b7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ef8:	230f      	movs	r3, #15
 8000efa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000efc:	2300      	movs	r3, #0
 8000efe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f00:	2300      	movs	r3, #0
 8000f02:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f04:	2300      	movs	r3, #0
 8000f06:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f0c:	f107 030c 	add.w	r3, r7, #12
 8000f10:	2100      	movs	r1, #0
 8000f12:	4618      	mov	r0, r3
 8000f14:	f002 ffa8 	bl	8003e68 <HAL_RCC_ClockConfig>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000f1e:	f000 fe2d 	bl	8001b7c <Error_Handler>
  }
}
 8000f22:	bf00      	nop
 8000f24:	3750      	adds	r7, #80	; 0x50
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	40023800 	.word	0x40023800
 8000f30:	40007000 	.word	0x40007000

08000f34 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f38:	4b12      	ldr	r3, [pc, #72]	; (8000f84 <MX_I2C1_Init+0x50>)
 8000f3a:	4a13      	ldr	r2, [pc, #76]	; (8000f88 <MX_I2C1_Init+0x54>)
 8000f3c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000f3e:	4b11      	ldr	r3, [pc, #68]	; (8000f84 <MX_I2C1_Init+0x50>)
 8000f40:	4a12      	ldr	r2, [pc, #72]	; (8000f8c <MX_I2C1_Init+0x58>)
 8000f42:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f44:	4b0f      	ldr	r3, [pc, #60]	; (8000f84 <MX_I2C1_Init+0x50>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f4a:	4b0e      	ldr	r3, [pc, #56]	; (8000f84 <MX_I2C1_Init+0x50>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f50:	4b0c      	ldr	r3, [pc, #48]	; (8000f84 <MX_I2C1_Init+0x50>)
 8000f52:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f56:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f58:	4b0a      	ldr	r3, [pc, #40]	; (8000f84 <MX_I2C1_Init+0x50>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f5e:	4b09      	ldr	r3, [pc, #36]	; (8000f84 <MX_I2C1_Init+0x50>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f64:	4b07      	ldr	r3, [pc, #28]	; (8000f84 <MX_I2C1_Init+0x50>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f6a:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <MX_I2C1_Init+0x50>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f70:	4804      	ldr	r0, [pc, #16]	; (8000f84 <MX_I2C1_Init+0x50>)
 8000f72:	f001 fd43 	bl	80029fc <HAL_I2C_Init>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f7c:	f000 fdfe 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f80:	bf00      	nop
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	2000009c 	.word	0x2000009c
 8000f88:	40005400 	.word	0x40005400
 8000f8c:	000186a0 	.word	0x000186a0

08000f90 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b096      	sub	sp, #88	; 0x58
 8000f94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f96:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	605a      	str	r2, [r3, #4]
 8000fa0:	609a      	str	r2, [r3, #8]
 8000fa2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fa4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	601a      	str	r2, [r3, #0]
 8000fb6:	605a      	str	r2, [r3, #4]
 8000fb8:	609a      	str	r2, [r3, #8]
 8000fba:	60da      	str	r2, [r3, #12]
 8000fbc:	611a      	str	r2, [r3, #16]
 8000fbe:	615a      	str	r2, [r3, #20]
 8000fc0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000fc2:	1d3b      	adds	r3, r7, #4
 8000fc4:	2220      	movs	r2, #32
 8000fc6:	2100      	movs	r1, #0
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f008 fa03 	bl	80093d4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000fce:	4b3d      	ldr	r3, [pc, #244]	; (80010c4 <MX_TIM1_Init+0x134>)
 8000fd0:	4a3d      	ldr	r2, [pc, #244]	; (80010c8 <MX_TIM1_Init+0x138>)
 8000fd2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160;
 8000fd4:	4b3b      	ldr	r3, [pc, #236]	; (80010c4 <MX_TIM1_Init+0x134>)
 8000fd6:	22a0      	movs	r2, #160	; 0xa0
 8000fd8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fda:	4b3a      	ldr	r3, [pc, #232]	; (80010c4 <MX_TIM1_Init+0x134>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8000fe0:	4b38      	ldr	r3, [pc, #224]	; (80010c4 <MX_TIM1_Init+0x134>)
 8000fe2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000fe6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fe8:	4b36      	ldr	r3, [pc, #216]	; (80010c4 <MX_TIM1_Init+0x134>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000fee:	4b35      	ldr	r3, [pc, #212]	; (80010c4 <MX_TIM1_Init+0x134>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ff4:	4b33      	ldr	r3, [pc, #204]	; (80010c4 <MX_TIM1_Init+0x134>)
 8000ff6:	2280      	movs	r2, #128	; 0x80
 8000ff8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ffa:	4832      	ldr	r0, [pc, #200]	; (80010c4 <MX_TIM1_Init+0x134>)
 8000ffc:	f003 f914 	bl	8004228 <HAL_TIM_Base_Init>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001006:	f000 fdb9 	bl	8001b7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800100a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800100e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001010:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001014:	4619      	mov	r1, r3
 8001016:	482b      	ldr	r0, [pc, #172]	; (80010c4 <MX_TIM1_Init+0x134>)
 8001018:	f003 fc6c 	bl	80048f4 <HAL_TIM_ConfigClockSource>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001022:	f000 fdab 	bl	8001b7c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001026:	4827      	ldr	r0, [pc, #156]	; (80010c4 <MX_TIM1_Init+0x134>)
 8001028:	f003 f94d 	bl	80042c6 <HAL_TIM_PWM_Init>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001032:	f000 fda3 	bl	8001b7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001036:	2300      	movs	r3, #0
 8001038:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800103a:	2300      	movs	r3, #0
 800103c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800103e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001042:	4619      	mov	r1, r3
 8001044:	481f      	ldr	r0, [pc, #124]	; (80010c4 <MX_TIM1_Init+0x134>)
 8001046:	f004 f82d 	bl	80050a4 <HAL_TIMEx_MasterConfigSynchronization>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001050:	f000 fd94 	bl	8001b7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001054:	2360      	movs	r3, #96	; 0x60
 8001056:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001058:	2300      	movs	r3, #0
 800105a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800105c:	2300      	movs	r3, #0
 800105e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001060:	2300      	movs	r3, #0
 8001062:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001064:	2300      	movs	r3, #0
 8001066:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001068:	2300      	movs	r3, #0
 800106a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800106c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001070:	220c      	movs	r2, #12
 8001072:	4619      	mov	r1, r3
 8001074:	4813      	ldr	r0, [pc, #76]	; (80010c4 <MX_TIM1_Init+0x134>)
 8001076:	f003 fb7b 	bl	8004770 <HAL_TIM_PWM_ConfigChannel>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8001080:	f000 fd7c 	bl	8001b7c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001084:	2300      	movs	r3, #0
 8001086:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001088:	2300      	movs	r3, #0
 800108a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800108c:	2300      	movs	r3, #0
 800108e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001090:	2300      	movs	r3, #0
 8001092:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001094:	2300      	movs	r3, #0
 8001096:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001098:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800109c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800109e:	2300      	movs	r3, #0
 80010a0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80010a2:	1d3b      	adds	r3, r7, #4
 80010a4:	4619      	mov	r1, r3
 80010a6:	4807      	ldr	r0, [pc, #28]	; (80010c4 <MX_TIM1_Init+0x134>)
 80010a8:	f004 f878 	bl	800519c <HAL_TIMEx_ConfigBreakDeadTime>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 80010b2:	f000 fd63 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80010b6:	4803      	ldr	r0, [pc, #12]	; (80010c4 <MX_TIM1_Init+0x134>)
 80010b8:	f000 ff6c 	bl	8001f94 <HAL_TIM_MspPostInit>

}
 80010bc:	bf00      	nop
 80010be:	3758      	adds	r7, #88	; 0x58
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	200000f0 	.word	0x200000f0
 80010c8:	40010000 	.word	0x40010000

080010cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b08c      	sub	sp, #48	; 0x30
 80010d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80010d2:	f107 030c 	add.w	r3, r7, #12
 80010d6:	2224      	movs	r2, #36	; 0x24
 80010d8:	2100      	movs	r1, #0
 80010da:	4618      	mov	r0, r3
 80010dc:	f008 f97a 	bl	80093d4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010e0:	1d3b      	adds	r3, r7, #4
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]
 80010e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010e8:	4b21      	ldr	r3, [pc, #132]	; (8001170 <MX_TIM2_Init+0xa4>)
 80010ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010ee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80010f0:	4b1f      	ldr	r3, [pc, #124]	; (8001170 <MX_TIM2_Init+0xa4>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010f6:	4b1e      	ldr	r3, [pc, #120]	; (8001170 <MX_TIM2_Init+0xa4>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80010fc:	4b1c      	ldr	r3, [pc, #112]	; (8001170 <MX_TIM2_Init+0xa4>)
 80010fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001102:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001104:	4b1a      	ldr	r3, [pc, #104]	; (8001170 <MX_TIM2_Init+0xa4>)
 8001106:	2200      	movs	r2, #0
 8001108:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800110a:	4b19      	ldr	r3, [pc, #100]	; (8001170 <MX_TIM2_Init+0xa4>)
 800110c:	2200      	movs	r2, #0
 800110e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001110:	2303      	movs	r3, #3
 8001112:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001114:	2300      	movs	r3, #0
 8001116:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001118:	2301      	movs	r3, #1
 800111a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800111c:	2300      	movs	r3, #0
 800111e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001120:	230a      	movs	r3, #10
 8001122:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001124:	2300      	movs	r3, #0
 8001126:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001128:	2301      	movs	r3, #1
 800112a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800112c:	2300      	movs	r3, #0
 800112e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001130:	230a      	movs	r3, #10
 8001132:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001134:	f107 030c 	add.w	r3, r7, #12
 8001138:	4619      	mov	r1, r3
 800113a:	480d      	ldr	r0, [pc, #52]	; (8001170 <MX_TIM2_Init+0xa4>)
 800113c:	f003 f9e4 	bl	8004508 <HAL_TIM_Encoder_Init>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001146:	f000 fd19 	bl	8001b7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800114a:	2300      	movs	r3, #0
 800114c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800114e:	2300      	movs	r3, #0
 8001150:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001152:	1d3b      	adds	r3, r7, #4
 8001154:	4619      	mov	r1, r3
 8001156:	4806      	ldr	r0, [pc, #24]	; (8001170 <MX_TIM2_Init+0xa4>)
 8001158:	f003 ffa4 	bl	80050a4 <HAL_TIMEx_MasterConfigSynchronization>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001162:	f000 fd0b 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001166:	bf00      	nop
 8001168:	3730      	adds	r7, #48	; 0x30
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	20000138 	.word	0x20000138

08001174 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b08c      	sub	sp, #48	; 0x30
 8001178:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800117a:	f107 030c 	add.w	r3, r7, #12
 800117e:	2224      	movs	r2, #36	; 0x24
 8001180:	2100      	movs	r1, #0
 8001182:	4618      	mov	r0, r3
 8001184:	f008 f926 	bl	80093d4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001188:	1d3b      	adds	r3, r7, #4
 800118a:	2200      	movs	r2, #0
 800118c:	601a      	str	r2, [r3, #0]
 800118e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001190:	4b20      	ldr	r3, [pc, #128]	; (8001214 <MX_TIM3_Init+0xa0>)
 8001192:	4a21      	ldr	r2, [pc, #132]	; (8001218 <MX_TIM3_Init+0xa4>)
 8001194:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001196:	4b1f      	ldr	r3, [pc, #124]	; (8001214 <MX_TIM3_Init+0xa0>)
 8001198:	2200      	movs	r2, #0
 800119a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800119c:	4b1d      	ldr	r3, [pc, #116]	; (8001214 <MX_TIM3_Init+0xa0>)
 800119e:	2200      	movs	r2, #0
 80011a0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80011a2:	4b1c      	ldr	r3, [pc, #112]	; (8001214 <MX_TIM3_Init+0xa0>)
 80011a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011a8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011aa:	4b1a      	ldr	r3, [pc, #104]	; (8001214 <MX_TIM3_Init+0xa0>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011b0:	4b18      	ldr	r3, [pc, #96]	; (8001214 <MX_TIM3_Init+0xa0>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80011b6:	2303      	movs	r3, #3
 80011b8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80011ba:	2300      	movs	r3, #0
 80011bc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80011be:	2301      	movs	r3, #1
 80011c0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80011c2:	2300      	movs	r3, #0
 80011c4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80011c6:	230a      	movs	r3, #10
 80011c8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80011ca:	2300      	movs	r3, #0
 80011cc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80011ce:	2301      	movs	r3, #1
 80011d0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80011d2:	2300      	movs	r3, #0
 80011d4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 80011d6:	230a      	movs	r3, #10
 80011d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80011da:	f107 030c 	add.w	r3, r7, #12
 80011de:	4619      	mov	r1, r3
 80011e0:	480c      	ldr	r0, [pc, #48]	; (8001214 <MX_TIM3_Init+0xa0>)
 80011e2:	f003 f991 	bl	8004508 <HAL_TIM_Encoder_Init>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80011ec:	f000 fcc6 	bl	8001b7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011f0:	2300      	movs	r3, #0
 80011f2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011f4:	2300      	movs	r3, #0
 80011f6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011f8:	1d3b      	adds	r3, r7, #4
 80011fa:	4619      	mov	r1, r3
 80011fc:	4805      	ldr	r0, [pc, #20]	; (8001214 <MX_TIM3_Init+0xa0>)
 80011fe:	f003 ff51 	bl	80050a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001208:	f000 fcb8 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800120c:	bf00      	nop
 800120e:	3730      	adds	r7, #48	; 0x30
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	20000180 	.word	0x20000180
 8001218:	40000400 	.word	0x40000400

0800121c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b096      	sub	sp, #88	; 0x58
 8001220:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001222:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	605a      	str	r2, [r3, #4]
 800122c:	609a      	str	r2, [r3, #8]
 800122e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001230:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800123a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800123e:	2200      	movs	r2, #0
 8001240:	601a      	str	r2, [r3, #0]
 8001242:	605a      	str	r2, [r3, #4]
 8001244:	609a      	str	r2, [r3, #8]
 8001246:	60da      	str	r2, [r3, #12]
 8001248:	611a      	str	r2, [r3, #16]
 800124a:	615a      	str	r2, [r3, #20]
 800124c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800124e:	1d3b      	adds	r3, r7, #4
 8001250:	2220      	movs	r2, #32
 8001252:	2100      	movs	r1, #0
 8001254:	4618      	mov	r0, r3
 8001256:	f008 f8bd 	bl	80093d4 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800125a:	4b43      	ldr	r3, [pc, #268]	; (8001368 <MX_TIM8_Init+0x14c>)
 800125c:	4a43      	ldr	r2, [pc, #268]	; (800136c <MX_TIM8_Init+0x150>)
 800125e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001260:	4b41      	ldr	r3, [pc, #260]	; (8001368 <MX_TIM8_Init+0x14c>)
 8001262:	2200      	movs	r2, #0
 8001264:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001266:	4b40      	ldr	r3, [pc, #256]	; (8001368 <MX_TIM8_Init+0x14c>)
 8001268:	2200      	movs	r2, #0
 800126a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 800126c:	4b3e      	ldr	r3, [pc, #248]	; (8001368 <MX_TIM8_Init+0x14c>)
 800126e:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001272:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001274:	4b3c      	ldr	r3, [pc, #240]	; (8001368 <MX_TIM8_Init+0x14c>)
 8001276:	2200      	movs	r2, #0
 8001278:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800127a:	4b3b      	ldr	r3, [pc, #236]	; (8001368 <MX_TIM8_Init+0x14c>)
 800127c:	2200      	movs	r2, #0
 800127e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001280:	4b39      	ldr	r3, [pc, #228]	; (8001368 <MX_TIM8_Init+0x14c>)
 8001282:	2200      	movs	r2, #0
 8001284:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001286:	4838      	ldr	r0, [pc, #224]	; (8001368 <MX_TIM8_Init+0x14c>)
 8001288:	f002 ffce 	bl	8004228 <HAL_TIM_Base_Init>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8001292:	f000 fc73 	bl	8001b7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001296:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800129a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800129c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80012a0:	4619      	mov	r1, r3
 80012a2:	4831      	ldr	r0, [pc, #196]	; (8001368 <MX_TIM8_Init+0x14c>)
 80012a4:	f003 fb26 	bl	80048f4 <HAL_TIM_ConfigClockSource>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80012ae:	f000 fc65 	bl	8001b7c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80012b2:	482d      	ldr	r0, [pc, #180]	; (8001368 <MX_TIM8_Init+0x14c>)
 80012b4:	f003 f807 	bl	80042c6 <HAL_TIM_PWM_Init>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80012be:	f000 fc5d 	bl	8001b7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012c2:	2300      	movs	r3, #0
 80012c4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012c6:	2300      	movs	r3, #0
 80012c8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80012ca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80012ce:	4619      	mov	r1, r3
 80012d0:	4825      	ldr	r0, [pc, #148]	; (8001368 <MX_TIM8_Init+0x14c>)
 80012d2:	f003 fee7 	bl	80050a4 <HAL_TIMEx_MasterConfigSynchronization>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80012dc:	f000 fc4e 	bl	8001b7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012e0:	2360      	movs	r3, #96	; 0x60
 80012e2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80012e4:	2300      	movs	r3, #0
 80012e6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012e8:	2300      	movs	r3, #0
 80012ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012ec:	2300      	movs	r3, #0
 80012ee:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012f0:	2300      	movs	r3, #0
 80012f2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012f4:	2300      	movs	r3, #0
 80012f6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012f8:	2300      	movs	r3, #0
 80012fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001300:	2200      	movs	r2, #0
 8001302:	4619      	mov	r1, r3
 8001304:	4818      	ldr	r0, [pc, #96]	; (8001368 <MX_TIM8_Init+0x14c>)
 8001306:	f003 fa33 	bl	8004770 <HAL_TIM_PWM_ConfigChannel>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8001310:	f000 fc34 	bl	8001b7c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001314:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001318:	2204      	movs	r2, #4
 800131a:	4619      	mov	r1, r3
 800131c:	4812      	ldr	r0, [pc, #72]	; (8001368 <MX_TIM8_Init+0x14c>)
 800131e:	f003 fa27 	bl	8004770 <HAL_TIM_PWM_ConfigChannel>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8001328:	f000 fc28 	bl	8001b7c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800132c:	2300      	movs	r3, #0
 800132e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001330:	2300      	movs	r3, #0
 8001332:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001334:	2300      	movs	r3, #0
 8001336:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001338:	2300      	movs	r3, #0
 800133a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800133c:	2300      	movs	r3, #0
 800133e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001340:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001344:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001346:	2300      	movs	r3, #0
 8001348:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800134a:	1d3b      	adds	r3, r7, #4
 800134c:	4619      	mov	r1, r3
 800134e:	4806      	ldr	r0, [pc, #24]	; (8001368 <MX_TIM8_Init+0x14c>)
 8001350:	f003 ff24 	bl	800519c <HAL_TIMEx_ConfigBreakDeadTime>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 800135a:	f000 fc0f 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800135e:	bf00      	nop
 8001360:	3758      	adds	r7, #88	; 0x58
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	200001c8 	.word	0x200001c8
 800136c:	40010400 	.word	0x40010400

08001370 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001374:	4b11      	ldr	r3, [pc, #68]	; (80013bc <MX_USART3_UART_Init+0x4c>)
 8001376:	4a12      	ldr	r2, [pc, #72]	; (80013c0 <MX_USART3_UART_Init+0x50>)
 8001378:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800137a:	4b10      	ldr	r3, [pc, #64]	; (80013bc <MX_USART3_UART_Init+0x4c>)
 800137c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001380:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001382:	4b0e      	ldr	r3, [pc, #56]	; (80013bc <MX_USART3_UART_Init+0x4c>)
 8001384:	2200      	movs	r2, #0
 8001386:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001388:	4b0c      	ldr	r3, [pc, #48]	; (80013bc <MX_USART3_UART_Init+0x4c>)
 800138a:	2200      	movs	r2, #0
 800138c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800138e:	4b0b      	ldr	r3, [pc, #44]	; (80013bc <MX_USART3_UART_Init+0x4c>)
 8001390:	2200      	movs	r2, #0
 8001392:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001394:	4b09      	ldr	r3, [pc, #36]	; (80013bc <MX_USART3_UART_Init+0x4c>)
 8001396:	220c      	movs	r2, #12
 8001398:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800139a:	4b08      	ldr	r3, [pc, #32]	; (80013bc <MX_USART3_UART_Init+0x4c>)
 800139c:	2200      	movs	r2, #0
 800139e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80013a0:	4b06      	ldr	r3, [pc, #24]	; (80013bc <MX_USART3_UART_Init+0x4c>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80013a6:	4805      	ldr	r0, [pc, #20]	; (80013bc <MX_USART3_UART_Init+0x4c>)
 80013a8:	f003 ff4a 	bl	8005240 <HAL_UART_Init>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80013b2:	f000 fbe3 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80013b6:	bf00      	nop
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	20000210 	.word	0x20000210
 80013c0:	40004800 	.word	0x40004800

080013c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b08a      	sub	sp, #40	; 0x28
 80013c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ca:	f107 0314 	add.w	r3, r7, #20
 80013ce:	2200      	movs	r2, #0
 80013d0:	601a      	str	r2, [r3, #0]
 80013d2:	605a      	str	r2, [r3, #4]
 80013d4:	609a      	str	r2, [r3, #8]
 80013d6:	60da      	str	r2, [r3, #12]
 80013d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	613b      	str	r3, [r7, #16]
 80013de:	4b31      	ldr	r3, [pc, #196]	; (80014a4 <MX_GPIO_Init+0xe0>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	4a30      	ldr	r2, [pc, #192]	; (80014a4 <MX_GPIO_Init+0xe0>)
 80013e4:	f043 0310 	orr.w	r3, r3, #16
 80013e8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ea:	4b2e      	ldr	r3, [pc, #184]	; (80014a4 <MX_GPIO_Init+0xe0>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	f003 0310 	and.w	r3, r3, #16
 80013f2:	613b      	str	r3, [r7, #16]
 80013f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	60fb      	str	r3, [r7, #12]
 80013fa:	4b2a      	ldr	r3, [pc, #168]	; (80014a4 <MX_GPIO_Init+0xe0>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	4a29      	ldr	r2, [pc, #164]	; (80014a4 <MX_GPIO_Init+0xe0>)
 8001400:	f043 0301 	orr.w	r3, r3, #1
 8001404:	6313      	str	r3, [r2, #48]	; 0x30
 8001406:	4b27      	ldr	r3, [pc, #156]	; (80014a4 <MX_GPIO_Init+0xe0>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	f003 0301 	and.w	r3, r3, #1
 800140e:	60fb      	str	r3, [r7, #12]
 8001410:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001412:	2300      	movs	r3, #0
 8001414:	60bb      	str	r3, [r7, #8]
 8001416:	4b23      	ldr	r3, [pc, #140]	; (80014a4 <MX_GPIO_Init+0xe0>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141a:	4a22      	ldr	r2, [pc, #136]	; (80014a4 <MX_GPIO_Init+0xe0>)
 800141c:	f043 0304 	orr.w	r3, r3, #4
 8001420:	6313      	str	r3, [r2, #48]	; 0x30
 8001422:	4b20      	ldr	r3, [pc, #128]	; (80014a4 <MX_GPIO_Init+0xe0>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001426:	f003 0304 	and.w	r3, r3, #4
 800142a:	60bb      	str	r3, [r7, #8]
 800142c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800142e:	2300      	movs	r3, #0
 8001430:	607b      	str	r3, [r7, #4]
 8001432:	4b1c      	ldr	r3, [pc, #112]	; (80014a4 <MX_GPIO_Init+0xe0>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	4a1b      	ldr	r2, [pc, #108]	; (80014a4 <MX_GPIO_Init+0xe0>)
 8001438:	f043 0302 	orr.w	r3, r3, #2
 800143c:	6313      	str	r3, [r2, #48]	; 0x30
 800143e:	4b19      	ldr	r3, [pc, #100]	; (80014a4 <MX_GPIO_Init+0xe0>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	f003 0302 	and.w	r3, r3, #2
 8001446:	607b      	str	r3, [r7, #4]
 8001448:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 800144a:	2200      	movs	r2, #0
 800144c:	f44f 61bc 	mov.w	r1, #1504	; 0x5e0
 8001450:	4815      	ldr	r0, [pc, #84]	; (80014a8 <MX_GPIO_Init+0xe4>)
 8001452:	f001 fa9f 	bl	8002994 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin, GPIO_PIN_RESET);
 8001456:	2200      	movs	r2, #0
 8001458:	213c      	movs	r1, #60	; 0x3c
 800145a:	4814      	ldr	r0, [pc, #80]	; (80014ac <MX_GPIO_Init+0xe8>)
 800145c:	f001 fa9a 	bl	8002994 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin
                           LED3_Pin */
  GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 8001460:	f44f 63bc 	mov.w	r3, #1504	; 0x5e0
 8001464:	617b      	str	r3, [r7, #20]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001466:	2301      	movs	r3, #1
 8001468:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146a:	2300      	movs	r3, #0
 800146c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146e:	2300      	movs	r3, #0
 8001470:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001472:	f107 0314 	add.w	r3, r7, #20
 8001476:	4619      	mov	r1, r3
 8001478:	480b      	ldr	r0, [pc, #44]	; (80014a8 <MX_GPIO_Init+0xe4>)
 800147a:	f001 f8ef 	bl	800265c <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin BIN1_Pin BIN2_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin;
 800147e:	233c      	movs	r3, #60	; 0x3c
 8001480:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001482:	2301      	movs	r3, #1
 8001484:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001486:	2300      	movs	r3, #0
 8001488:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800148a:	2302      	movs	r3, #2
 800148c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800148e:	f107 0314 	add.w	r3, r7, #20
 8001492:	4619      	mov	r1, r3
 8001494:	4805      	ldr	r0, [pc, #20]	; (80014ac <MX_GPIO_Init+0xe8>)
 8001496:	f001 f8e1 	bl	800265c <HAL_GPIO_Init>

}
 800149a:	bf00      	nop
 800149c:	3728      	adds	r7, #40	; 0x28
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	40023800 	.word	0x40023800
 80014a8:	40021000 	.word	0x40021000
 80014ac:	40020000 	.word	0x40020000

080014b0 <HAL_UART_RxCpltCallback>:
  * @brief  Function called during Serial interrupt
  * @param  argument: UART_HandleTypeDef
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
	// Prevent unused argument compiled warning

	UNUSED(huart);

	enqueue(&q,aRxBuffer);
 80014b8:	4908      	ldr	r1, [pc, #32]	; (80014dc <HAL_UART_RxCpltCallback+0x2c>)
 80014ba:	4809      	ldr	r0, [pc, #36]	; (80014e0 <HAL_UART_RxCpltCallback+0x30>)
 80014bc:	f000 fb63 	bl	8001b86 <enqueue>
//	fb_speed = (uint8_t)(aRxBuffer[1]);
//	leftright = (uint8_t)(aRxBuffer[2]);
//	lr_speed = (uint8_t)(aRxBuffer[3]);


	HAL_UART_Receive_IT(&huart3,(uint8_t *) aRxBuffer,4);
 80014c0:	2204      	movs	r2, #4
 80014c2:	4906      	ldr	r1, [pc, #24]	; (80014dc <HAL_UART_RxCpltCallback+0x2c>)
 80014c4:	4807      	ldr	r0, [pc, #28]	; (80014e4 <HAL_UART_RxCpltCallback+0x34>)
 80014c6:	f003 ff08 	bl	80052da <HAL_UART_Receive_IT>
//	sprintf(hello, "Dir %c : %d\0", frontback, fb_speed-48);
//	OLED_ShowString(10, 20, hello);
//
//	sprintf(hello, "Turn %c: %d\0", leftright, lr_speed-48);
//	OLED_ShowString(10, 30, hello);
	HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 80014ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014ce:	4806      	ldr	r0, [pc, #24]	; (80014e8 <HAL_UART_RxCpltCallback+0x38>)
 80014d0:	f001 fa79 	bl	80029c6 <HAL_GPIO_TogglePin>
}
 80014d4:	bf00      	nop
 80014d6:	3708      	adds	r7, #8
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	20000268 	.word	0x20000268
 80014e0:	200002ac 	.word	0x200002ac
 80014e4:	20000210 	.word	0x20000210
 80014e8:	40021000 	.word	0x40021000

080014ec <reset_motorVal>:

void reset_motorVal(){
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
	// Reset Values
	frontback = 'w';	// Front/back character
 80014f0:	4b08      	ldr	r3, [pc, #32]	; (8001514 <reset_motorVal+0x28>)
 80014f2:	2277      	movs	r2, #119	; 0x77
 80014f4:	701a      	strb	r2, [r3, #0]
	fb_speed = '0';	// Front/back speed
 80014f6:	4b08      	ldr	r3, [pc, #32]	; (8001518 <reset_motorVal+0x2c>)
 80014f8:	2230      	movs	r2, #48	; 0x30
 80014fa:	701a      	strb	r2, [r3, #0]
	leftright = 'a';	// Left/right character
 80014fc:	4b07      	ldr	r3, [pc, #28]	; (800151c <reset_motorVal+0x30>)
 80014fe:	2261      	movs	r2, #97	; 0x61
 8001500:	701a      	strb	r2, [r3, #0]
	lr_speed = '0';	// Left/right speed
 8001502:	4b07      	ldr	r3, [pc, #28]	; (8001520 <reset_motorVal+0x34>)
 8001504:	2230      	movs	r2, #48	; 0x30
 8001506:	701a      	strb	r2, [r3, #0]
}
 8001508:	bf00      	nop
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	20000000 	.word	0x20000000
 8001518:	20000001 	.word	0x20000001
 800151c:	20000002 	.word	0x20000002
 8001520:	20000003 	.word	0x20000003

08001524 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
//			  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
//			  aRxBuffer = NULL;
//		  }
//	  }
//	  HAL_UART_Transmit(&huart3, (uint8_t *)txData, strlen(txData), 10);
	  osDelay(5000);
 800152c:	f241 3088 	movw	r0, #5000	; 0x1388
 8001530:	f004 ff0e 	bl	8006350 <osDelay>
 8001534:	e7fa      	b.n	800152c <StartDefaultTask+0x8>
	...

08001538 <motor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_motor */
void motor(void *argument)
{
 8001538:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800153c:	b096      	sub	sp, #88	; 0x58
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN motor */
	uint16_t servo_max = 5;	// max servo pwm turn
 8001542:	2305      	movs	r3, #5
 8001544:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	double motor_offset_r = 1;
 8001548:	f04f 0200 	mov.w	r2, #0
 800154c:	4bb0      	ldr	r3, [pc, #704]	; (8001810 <motor+0x2d8>)
 800154e:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	double motor_offset_l = 1;
 8001552:	f04f 0200 	mov.w	r2, #0
 8001556:	4bae      	ldr	r3, [pc, #696]	; (8001810 <motor+0x2d8>)
 8001558:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	uint16_t pwmVal_motor = 0;
 800155c:	2300      	movs	r3, #0
 800155e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	uint16_t motor_increment = 10;
 8001562:	230a      	movs	r3, #10
 8001564:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
	uint8_t accelerate;

	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8001568:	2100      	movs	r1, #0
 800156a:	48aa      	ldr	r0, [pc, #680]	; (8001814 <motor+0x2dc>)
 800156c:	f002 ff04 	bl	8004378 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8001570:	2104      	movs	r1, #4
 8001572:	48a8      	ldr	r0, [pc, #672]	; (8001814 <motor+0x2dc>)
 8001574:	f002 ff00 	bl	8004378 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001578:	210c      	movs	r1, #12
 800157a:	48a7      	ldr	r0, [pc, #668]	; (8001818 <motor+0x2e0>)
 800157c:	f002 fefc 	bl	8004378 <HAL_TIM_PWM_Start>


  /* Infinite loop */
  for(;;)
  {
	  while(isEmptyQueue(q) != 1){
 8001580:	e1cc      	b.n	800191c <motor+0x3e4>
		  uint8_t hello[50];
		  getFront(q);
 8001582:	4ba6      	ldr	r3, [pc, #664]	; (800181c <motor+0x2e4>)
 8001584:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001588:	f000 fb62 	bl	8001c50 <getFront>
		  sprintf(hello, "Dir %c : %d\0", frontback, fb_speed - 48);
 800158c:	4ba4      	ldr	r3, [pc, #656]	; (8001820 <motor+0x2e8>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	461a      	mov	r2, r3
 8001592:	4ba4      	ldr	r3, [pc, #656]	; (8001824 <motor+0x2ec>)
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	3b30      	subs	r3, #48	; 0x30
 8001598:	f107 000c 	add.w	r0, r7, #12
 800159c:	49a2      	ldr	r1, [pc, #648]	; (8001828 <motor+0x2f0>)
 800159e:	f008 f811 	bl	80095c4 <siprintf>
			OLED_ShowString(10, 20, hello);
 80015a2:	f107 030c 	add.w	r3, r7, #12
 80015a6:	461a      	mov	r2, r3
 80015a8:	2114      	movs	r1, #20
 80015aa:	200a      	movs	r0, #10
 80015ac:	f007 fe0c 	bl	80091c8 <OLED_ShowString>

			sprintf(hello, "Turn %c: %d\0", leftright, lr_speed - 48);
 80015b0:	4b9e      	ldr	r3, [pc, #632]	; (800182c <motor+0x2f4>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	461a      	mov	r2, r3
 80015b6:	4b9e      	ldr	r3, [pc, #632]	; (8001830 <motor+0x2f8>)
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	3b30      	subs	r3, #48	; 0x30
 80015bc:	f107 000c 	add.w	r0, r7, #12
 80015c0:	499c      	ldr	r1, [pc, #624]	; (8001834 <motor+0x2fc>)
 80015c2:	f007 ffff 	bl	80095c4 <siprintf>
			OLED_ShowString(10, 30, hello);
 80015c6:	f107 030c 	add.w	r3, r7, #12
 80015ca:	461a      	mov	r2, r3
 80015cc:	211e      	movs	r1, #30
 80015ce:	200a      	movs	r0, #10
 80015d0:	f007 fdfa 	bl	80091c8 <OLED_ShowString>

		  accelerate = 1; // Default always start with acceleration
 80015d4:	2301      	movs	r3, #1
 80015d6:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45

		  	  // Turn Servo to desired position
		  	  // Centre - offset for left turn
		  	  if(leftright == 'a'){
 80015da:	4b94      	ldr	r3, [pc, #592]	; (800182c <motor+0x2f4>)
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	2b61      	cmp	r3, #97	; 0x61
 80015e0:	d14e      	bne.n	8001680 <motor+0x148>
		  		  htim1.Instance->CCR4 = pwmVal_servo - 1.1*(lr_speed-48) *servo_max;
 80015e2:	4b95      	ldr	r3, [pc, #596]	; (8001838 <motor+0x300>)
 80015e4:	881b      	ldrh	r3, [r3, #0]
 80015e6:	4618      	mov	r0, r3
 80015e8:	f7fe ff94 	bl	8000514 <__aeabi_i2d>
 80015ec:	4604      	mov	r4, r0
 80015ee:	460d      	mov	r5, r1
 80015f0:	4b8f      	ldr	r3, [pc, #572]	; (8001830 <motor+0x2f8>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	3b30      	subs	r3, #48	; 0x30
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7fe ff8c 	bl	8000514 <__aeabi_i2d>
 80015fc:	a37e      	add	r3, pc, #504	; (adr r3, 80017f8 <motor+0x2c0>)
 80015fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001602:	f7fe fff1 	bl	80005e8 <__aeabi_dmul>
 8001606:	4602      	mov	r2, r0
 8001608:	460b      	mov	r3, r1
 800160a:	4690      	mov	r8, r2
 800160c:	4699      	mov	r9, r3
 800160e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001612:	4618      	mov	r0, r3
 8001614:	f7fe ff7e 	bl	8000514 <__aeabi_i2d>
 8001618:	4602      	mov	r2, r0
 800161a:	460b      	mov	r3, r1
 800161c:	4640      	mov	r0, r8
 800161e:	4649      	mov	r1, r9
 8001620:	f7fe ffe2 	bl	80005e8 <__aeabi_dmul>
 8001624:	4602      	mov	r2, r0
 8001626:	460b      	mov	r3, r1
 8001628:	4620      	mov	r0, r4
 800162a:	4629      	mov	r1, r5
 800162c:	f7fe fe24 	bl	8000278 <__aeabi_dsub>
 8001630:	4602      	mov	r2, r0
 8001632:	460b      	mov	r3, r1
 8001634:	4978      	ldr	r1, [pc, #480]	; (8001818 <motor+0x2e0>)
 8001636:	680c      	ldr	r4, [r1, #0]
 8001638:	4610      	mov	r0, r2
 800163a:	4619      	mov	r1, r3
 800163c:	f7ff fa0e 	bl	8000a5c <__aeabi_d2uiz>
 8001640:	4603      	mov	r3, r0
 8001642:	6423      	str	r3, [r4, #64]	; 0x40
		  		  // right motor offset
		  		  // right motor have to spin more due to differential steering
		  		  motor_offset_r = 0.05*(lr_speed-48)+1;
 8001644:	4b7a      	ldr	r3, [pc, #488]	; (8001830 <motor+0x2f8>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	3b30      	subs	r3, #48	; 0x30
 800164a:	4618      	mov	r0, r3
 800164c:	f7fe ff62 	bl	8000514 <__aeabi_i2d>
 8001650:	a36b      	add	r3, pc, #428	; (adr r3, 8001800 <motor+0x2c8>)
 8001652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001656:	f7fe ffc7 	bl	80005e8 <__aeabi_dmul>
 800165a:	4602      	mov	r2, r0
 800165c:	460b      	mov	r3, r1
 800165e:	4610      	mov	r0, r2
 8001660:	4619      	mov	r1, r3
 8001662:	f04f 0200 	mov.w	r2, #0
 8001666:	4b6a      	ldr	r3, [pc, #424]	; (8001810 <motor+0x2d8>)
 8001668:	f7fe fe08 	bl	800027c <__adddf3>
 800166c:	4602      	mov	r2, r0
 800166e:	460b      	mov	r3, r1
 8001670:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
		  		  motor_offset_l = 1;
 8001674:	f04f 0200 	mov.w	r2, #0
 8001678:	4b65      	ldr	r3, [pc, #404]	; (8001810 <motor+0x2d8>)
 800167a:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 800167e:	e051      	b.n	8001724 <motor+0x1ec>

		  	  }
		  	  else if(leftright =='d'){
 8001680:	4b6a      	ldr	r3, [pc, #424]	; (800182c <motor+0x2f4>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	2b64      	cmp	r3, #100	; 0x64
 8001686:	d14d      	bne.n	8001724 <motor+0x1ec>
		  		  htim1.Instance->CCR4 = pwmVal_servo + 1.6*(lr_speed-48) *servo_max;
 8001688:	4b6b      	ldr	r3, [pc, #428]	; (8001838 <motor+0x300>)
 800168a:	881b      	ldrh	r3, [r3, #0]
 800168c:	4618      	mov	r0, r3
 800168e:	f7fe ff41 	bl	8000514 <__aeabi_i2d>
 8001692:	4604      	mov	r4, r0
 8001694:	460d      	mov	r5, r1
 8001696:	4b66      	ldr	r3, [pc, #408]	; (8001830 <motor+0x2f8>)
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	3b30      	subs	r3, #48	; 0x30
 800169c:	4618      	mov	r0, r3
 800169e:	f7fe ff39 	bl	8000514 <__aeabi_i2d>
 80016a2:	a359      	add	r3, pc, #356	; (adr r3, 8001808 <motor+0x2d0>)
 80016a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a8:	f7fe ff9e 	bl	80005e8 <__aeabi_dmul>
 80016ac:	4602      	mov	r2, r0
 80016ae:	460b      	mov	r3, r1
 80016b0:	4690      	mov	r8, r2
 80016b2:	4699      	mov	r9, r3
 80016b4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7fe ff2b 	bl	8000514 <__aeabi_i2d>
 80016be:	4602      	mov	r2, r0
 80016c0:	460b      	mov	r3, r1
 80016c2:	4640      	mov	r0, r8
 80016c4:	4649      	mov	r1, r9
 80016c6:	f7fe ff8f 	bl	80005e8 <__aeabi_dmul>
 80016ca:	4602      	mov	r2, r0
 80016cc:	460b      	mov	r3, r1
 80016ce:	4620      	mov	r0, r4
 80016d0:	4629      	mov	r1, r5
 80016d2:	f7fe fdd3 	bl	800027c <__adddf3>
 80016d6:	4602      	mov	r2, r0
 80016d8:	460b      	mov	r3, r1
 80016da:	494f      	ldr	r1, [pc, #316]	; (8001818 <motor+0x2e0>)
 80016dc:	680c      	ldr	r4, [r1, #0]
 80016de:	4610      	mov	r0, r2
 80016e0:	4619      	mov	r1, r3
 80016e2:	f7ff f9bb 	bl	8000a5c <__aeabi_d2uiz>
 80016e6:	4603      	mov	r3, r0
 80016e8:	6423      	str	r3, [r4, #64]	; 0x40
		  		  // left motor offset
		  		  motor_offset_r = 1;
 80016ea:	f04f 0200 	mov.w	r2, #0
 80016ee:	4b48      	ldr	r3, [pc, #288]	; (8001810 <motor+0x2d8>)
 80016f0:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
		  		  motor_offset_l = 0.05*(lr_speed-48)+1;
 80016f4:	4b4e      	ldr	r3, [pc, #312]	; (8001830 <motor+0x2f8>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	3b30      	subs	r3, #48	; 0x30
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7fe ff0a 	bl	8000514 <__aeabi_i2d>
 8001700:	a33f      	add	r3, pc, #252	; (adr r3, 8001800 <motor+0x2c8>)
 8001702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001706:	f7fe ff6f 	bl	80005e8 <__aeabi_dmul>
 800170a:	4602      	mov	r2, r0
 800170c:	460b      	mov	r3, r1
 800170e:	4610      	mov	r0, r2
 8001710:	4619      	mov	r1, r3
 8001712:	f04f 0200 	mov.w	r2, #0
 8001716:	4b3e      	ldr	r3, [pc, #248]	; (8001810 <motor+0x2d8>)
 8001718:	f7fe fdb0 	bl	800027c <__adddf3>
 800171c:	4602      	mov	r2, r0
 800171e:	460b      	mov	r3, r1
 8001720:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		  	  }


		  	  // Move Motor forward
		  	  if(frontback == 'w'){
 8001724:	4b3e      	ldr	r3, [pc, #248]	; (8001820 <motor+0x2e8>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	2b77      	cmp	r3, #119	; 0x77
 800172a:	f040 8089 	bne.w	8001840 <motor+0x308>
		  		  do
		  		  	  {
		  		  		  // H-Bridge Circuit for AINx; 1 turn on, the other turns off
		  		  		  // MOTOR A
		  		  		  HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 800172e:	2201      	movs	r2, #1
 8001730:	2104      	movs	r1, #4
 8001732:	4842      	ldr	r0, [pc, #264]	; (800183c <motor+0x304>)
 8001734:	f001 f92e 	bl	8002994 <HAL_GPIO_WritePin>
		  		  		  HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 8001738:	2200      	movs	r2, #0
 800173a:	2108      	movs	r1, #8
 800173c:	483f      	ldr	r0, [pc, #252]	; (800183c <motor+0x304>)
 800173e:	f001 f929 	bl	8002994 <HAL_GPIO_WritePin>

		  		  		  // MOTOR B
		  		  		  HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 8001742:	2201      	movs	r2, #1
 8001744:	2120      	movs	r1, #32
 8001746:	483d      	ldr	r0, [pc, #244]	; (800183c <motor+0x304>)
 8001748:	f001 f924 	bl	8002994 <HAL_GPIO_WritePin>
		  		  		  HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 800174c:	2200      	movs	r2, #0
 800174e:	2110      	movs	r1, #16
 8001750:	483a      	ldr	r0, [pc, #232]	; (800183c <motor+0x304>)
 8001752:	f001 f91f 	bl	8002994 <HAL_GPIO_WritePin>

		  		  		  if(accelerate == 1){
 8001756:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800175a:	2b01      	cmp	r3, #1
 800175c:	d117      	bne.n	800178e <motor+0x256>
		  		  			  pwmVal_motor+=motor_increment;	// Accelerating
 800175e:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8001762:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001766:	4413      	add	r3, r2
 8001768:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
		  		  			  if(pwmVal_motor > (fb_speed-48) * 400){
 800176c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8001770:	4b2c      	ldr	r3, [pc, #176]	; (8001824 <motor+0x2ec>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	3b30      	subs	r3, #48	; 0x30
 8001776:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800177a:	fb01 f303 	mul.w	r3, r1, r3
 800177e:	429a      	cmp	r2, r3
 8001780:	dd0c      	ble.n	800179c <motor+0x264>
		  		  				  accelerate = 0;		// Decelerating
 8001782:	2300      	movs	r3, #0
 8001784:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
		  		  				  reset_motorVal(); // Remove infinite motor loop
 8001788:	f7ff feb0 	bl	80014ec <reset_motorVal>
 800178c:	e006      	b.n	800179c <motor+0x264>
		  		  			  }

		  		  		  }

		  		  		  else
		  		  			pwmVal_motor-=motor_increment;
 800178e:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8001792:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
		  		  		   * If left turns more than right, value will be negative; motor_r -(neg_offset), motor_l + (neg_offset)
		  		  		   * Used 0.5 as scale factor as values in int, so only offset of >=2 will actually increment the motor value
		  		  		   * as integers are rounded down. E.g. offset = 1, 0.5-0.05*1 = 0.45 = 0 -> motor has no additional increment
		  		  		   *  - (0.5-0.05*(lr_speed-48))*encoder_offset ;  - (-0.5+0.05*(lr_speed-48))*encoder_offset
		  		  		   */
		  		  		  __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, motor_offset_r*pwmVal_motor);
 800179c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7fe feb7 	bl	8000514 <__aeabi_i2d>
 80017a6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80017aa:	f7fe ff1d 	bl	80005e8 <__aeabi_dmul>
 80017ae:	4602      	mov	r2, r0
 80017b0:	460b      	mov	r3, r1
 80017b2:	4918      	ldr	r1, [pc, #96]	; (8001814 <motor+0x2dc>)
 80017b4:	680c      	ldr	r4, [r1, #0]
 80017b6:	4610      	mov	r0, r2
 80017b8:	4619      	mov	r1, r3
 80017ba:	f7ff f94f 	bl	8000a5c <__aeabi_d2uiz>
 80017be:	4603      	mov	r3, r0
 80017c0:	6363      	str	r3, [r4, #52]	; 0x34
		  		  		  __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, motor_offset_l*pwmVal_motor);
 80017c2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7fe fea4 	bl	8000514 <__aeabi_i2d>
 80017cc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80017d0:	f7fe ff0a 	bl	80005e8 <__aeabi_dmul>
 80017d4:	4602      	mov	r2, r0
 80017d6:	460b      	mov	r3, r1
 80017d8:	490e      	ldr	r1, [pc, #56]	; (8001814 <motor+0x2dc>)
 80017da:	680c      	ldr	r4, [r1, #0]
 80017dc:	4610      	mov	r0, r2
 80017de:	4619      	mov	r1, r3
 80017e0:	f7ff f93c 	bl	8000a5c <__aeabi_d2uiz>
 80017e4:	4603      	mov	r3, r0
 80017e6:	63a3      	str	r3, [r4, #56]	; 0x38
		  		  		  osDelay(10);
 80017e8:	200a      	movs	r0, #10
 80017ea:	f004 fdb1 	bl	8006350 <osDelay>

		  		  	  }while(pwmVal_motor >0);
 80017ee:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d19b      	bne.n	800172e <motor+0x1f6>
 80017f6:	e08b      	b.n	8001910 <motor+0x3d8>
 80017f8:	9999999a 	.word	0x9999999a
 80017fc:	3ff19999 	.word	0x3ff19999
 8001800:	9999999a 	.word	0x9999999a
 8001804:	3fa99999 	.word	0x3fa99999
 8001808:	9999999a 	.word	0x9999999a
 800180c:	3ff99999 	.word	0x3ff99999
 8001810:	3ff00000 	.word	0x3ff00000
 8001814:	200001c8 	.word	0x200001c8
 8001818:	200000f0 	.word	0x200000f0
 800181c:	200002ac 	.word	0x200002ac
 8001820:	20000000 	.word	0x20000000
 8001824:	20000001 	.word	0x20000001
 8001828:	08009cf8 	.word	0x08009cf8
 800182c:	20000002 	.word	0x20000002
 8001830:	20000003 	.word	0x20000003
 8001834:	08009d08 	.word	0x08009d08
 8001838:	20000004 	.word	0x20000004
 800183c:	40020000 	.word	0x40020000
		  	  }

		  	  else if(frontback == 's'){
 8001840:	4b3b      	ldr	r3, [pc, #236]	; (8001930 <motor+0x3f8>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	2b73      	cmp	r3, #115	; 0x73
 8001846:	d163      	bne.n	8001910 <motor+0x3d8>
		  		  do
		  		  	  {
		  		  		  // MOTOR A
		  		  		  HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8001848:	2200      	movs	r2, #0
 800184a:	2104      	movs	r1, #4
 800184c:	4839      	ldr	r0, [pc, #228]	; (8001934 <motor+0x3fc>)
 800184e:	f001 f8a1 	bl	8002994 <HAL_GPIO_WritePin>
		  		  		  HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8001852:	2201      	movs	r2, #1
 8001854:	2108      	movs	r1, #8
 8001856:	4837      	ldr	r0, [pc, #220]	; (8001934 <motor+0x3fc>)
 8001858:	f001 f89c 	bl	8002994 <HAL_GPIO_WritePin>

		  		  		  // MOTOR B
		  		  		  HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 800185c:	2200      	movs	r2, #0
 800185e:	2120      	movs	r1, #32
 8001860:	4834      	ldr	r0, [pc, #208]	; (8001934 <motor+0x3fc>)
 8001862:	f001 f897 	bl	8002994 <HAL_GPIO_WritePin>
		  		  		  HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET);
 8001866:	2201      	movs	r2, #1
 8001868:	2110      	movs	r1, #16
 800186a:	4832      	ldr	r0, [pc, #200]	; (8001934 <motor+0x3fc>)
 800186c:	f001 f892 	bl	8002994 <HAL_GPIO_WritePin>

		  		  		  if(accelerate == 1){
 8001870:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001874:	2b01      	cmp	r3, #1
 8001876:	d117      	bne.n	80018a8 <motor+0x370>
		  		  			pwmVal_motor+=motor_increment;
 8001878:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800187c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001880:	4413      	add	r3, r2
 8001882:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
		  		  			  if(pwmVal_motor > (fb_speed-48) * 400){
 8001886:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800188a:	4b2b      	ldr	r3, [pc, #172]	; (8001938 <motor+0x400>)
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	3b30      	subs	r3, #48	; 0x30
 8001890:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8001894:	fb01 f303 	mul.w	r3, r1, r3
 8001898:	429a      	cmp	r2, r3
 800189a:	dd0c      	ble.n	80018b6 <motor+0x37e>
		  		  				accelerate = 0;		// Decelerating
 800189c:	2300      	movs	r3, #0
 800189e:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
		  		  				reset_motorVal(); // Remove infinite motor loop
 80018a2:	f7ff fe23 	bl	80014ec <reset_motorVal>
 80018a6:	e006      	b.n	80018b6 <motor+0x37e>
		  		  			  }
		  		  		  }

		  		  		  else
		  		  			pwmVal_motor-=motor_increment;
 80018a8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80018ac:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

		  		  		  __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, motor_offset_r*pwmVal_motor);
 80018b6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7fe fe2a 	bl	8000514 <__aeabi_i2d>
 80018c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80018c4:	f7fe fe90 	bl	80005e8 <__aeabi_dmul>
 80018c8:	4602      	mov	r2, r0
 80018ca:	460b      	mov	r3, r1
 80018cc:	491b      	ldr	r1, [pc, #108]	; (800193c <motor+0x404>)
 80018ce:	680c      	ldr	r4, [r1, #0]
 80018d0:	4610      	mov	r0, r2
 80018d2:	4619      	mov	r1, r3
 80018d4:	f7ff f8c2 	bl	8000a5c <__aeabi_d2uiz>
 80018d8:	4603      	mov	r3, r0
 80018da:	6363      	str	r3, [r4, #52]	; 0x34
		  				  __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, motor_offset_l*pwmVal_motor);
 80018dc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7fe fe17 	bl	8000514 <__aeabi_i2d>
 80018e6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80018ea:	f7fe fe7d 	bl	80005e8 <__aeabi_dmul>
 80018ee:	4602      	mov	r2, r0
 80018f0:	460b      	mov	r3, r1
 80018f2:	4912      	ldr	r1, [pc, #72]	; (800193c <motor+0x404>)
 80018f4:	680c      	ldr	r4, [r1, #0]
 80018f6:	4610      	mov	r0, r2
 80018f8:	4619      	mov	r1, r3
 80018fa:	f7ff f8af 	bl	8000a5c <__aeabi_d2uiz>
 80018fe:	4603      	mov	r3, r0
 8001900:	63a3      	str	r3, [r4, #56]	; 0x38
		  		  		  osDelay(10);
 8001902:	200a      	movs	r0, #10
 8001904:	f004 fd24 	bl	8006350 <osDelay>
		  		  	  }while(pwmVal_motor>0);
 8001908:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800190c:	2b00      	cmp	r3, #0
 800190e:	d19b      	bne.n	8001848 <motor+0x310>
		  	  }
		  	  osDelay(100);
 8001910:	2064      	movs	r0, #100	; 0x64
 8001912:	f004 fd1d 	bl	8006350 <osDelay>
		  	  dequeue(&q);
 8001916:	480a      	ldr	r0, [pc, #40]	; (8001940 <motor+0x408>)
 8001918:	f000 f970 	bl	8001bfc <dequeue>
	  while(isEmptyQueue(q) != 1){
 800191c:	4b08      	ldr	r3, [pc, #32]	; (8001940 <motor+0x408>)
 800191e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001922:	f000 f9b9 	bl	8001c98 <isEmptyQueue>
 8001926:	4603      	mov	r3, r0
 8001928:	2b01      	cmp	r3, #1
 800192a:	f47f ae2a 	bne.w	8001582 <motor+0x4a>
 800192e:	e7f5      	b.n	800191c <motor+0x3e4>
 8001930:	20000000 	.word	0x20000000
 8001934:	40020000 	.word	0x40020000
 8001938:	20000001 	.word	0x20000001
 800193c:	200001c8 	.word	0x200001c8
 8001940:	200002ac 	.word	0x200002ac

08001944 <showoled>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_showoled */
void showoled(void *argument)
{
 8001944:	b480      	push	{r7}
 8001946:	b089      	sub	sp, #36	; 0x24
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN showoled */
  /* Infinite loop */
	uint8_t hello[20] = "test\0";
 800194c:	4a07      	ldr	r2, [pc, #28]	; (800196c <showoled+0x28>)
 800194e:	f107 030c 	add.w	r3, r7, #12
 8001952:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001956:	6018      	str	r0, [r3, #0]
 8001958:	3304      	adds	r3, #4
 800195a:	8019      	strh	r1, [r3, #0]
 800195c:	f107 0312 	add.w	r3, r7, #18
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	605a      	str	r2, [r3, #4]
 8001966:	609a      	str	r2, [r3, #8]
 8001968:	819a      	strh	r2, [r3, #12]
	for(;;)
 800196a:	e7fe      	b.n	800196a <showoled+0x26>
 800196c:	08009d18 	.word	0x08009d18

08001970 <encoder_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_encoder_task */
void encoder_task(void *argument)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b08c      	sub	sp, #48	; 0x30
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN encoder_task */
  /* Infinite loop */
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001978:	213c      	movs	r1, #60	; 0x3c
 800197a:	4833      	ldr	r0, [pc, #204]	; (8001a48 <encoder_task+0xd8>)
 800197c:	f002 fe6a 	bl	8004654 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 8001980:	213c      	movs	r1, #60	; 0x3c
 8001982:	4832      	ldr	r0, [pc, #200]	; (8001a4c <encoder_task+0xdc>)
 8001984:	f002 fe66 	bl	8004654 <HAL_TIM_Encoder_Start>

	int cnt1, diffa=0;
 8001988:	2300      	movs	r3, #0
 800198a:	62fb      	str	r3, [r7, #44]	; 0x2c
	int cnt2, diffb=0;
 800198c:	2300      	movs	r3, #0
 800198e:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t tick;

	tick = HAL_GetTick();
 8001990:	f000 fc90 	bl	80022b4 <HAL_GetTick>
 8001994:	6278      	str	r0, [r7, #36]	; 0x24
	uint8_t msg[20];

	for(;;)
	{
		// Every 1000 ticks, get reading(How fast wheel turn)
		if(HAL_GetTick()-tick > 10){
 8001996:	f000 fc8d 	bl	80022b4 <HAL_GetTick>
 800199a:	4602      	mov	r2, r0
 800199c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	2b0a      	cmp	r3, #10
 80019a2:	d9f8      	bls.n	8001996 <encoder_task+0x26>
			// At rising edge, counter increase by 1
			cnt1 = __HAL_TIM_GET_COUNTER(&htim2);
 80019a4:	4b28      	ldr	r3, [pc, #160]	; (8001a48 <encoder_task+0xd8>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019aa:	623b      	str	r3, [r7, #32]
			cnt2 = __HAL_TIM_GET_COUNTER(&htim3);
 80019ac:	4b27      	ldr	r3, [pc, #156]	; (8001a4c <encoder_task+0xdc>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b2:	61fb      	str	r3, [r7, #28]

			/* Motor A */
			// Counting up; Motor moving forward
			// 32500 is the max tick
			if(cnt1 - 32500 > 0){
 80019b4:	6a3b      	ldr	r3, [r7, #32]
 80019b6:	f647 62f4 	movw	r2, #32500	; 0x7ef4
 80019ba:	4293      	cmp	r3, r2
 80019bc:	dd05      	ble.n	80019ca <encoder_task+0x5a>
				diffa = cnt1 - 65535;
 80019be:	6a3b      	ldr	r3, [r7, #32]
 80019c0:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 80019c4:	3bff      	subs	r3, #255	; 0xff
 80019c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019c8:	e006      	b.n	80019d8 <encoder_task+0x68>
			}
			// Counting down; Motor moving backward
			else if(cnt1 - 32500 < 0){
 80019ca:	6a3b      	ldr	r3, [r7, #32]
 80019cc:	f647 62f3 	movw	r2, #32499	; 0x7ef3
 80019d0:	4293      	cmp	r3, r2
 80019d2:	dc01      	bgt.n	80019d8 <encoder_task+0x68>
				diffa = cnt1;
 80019d4:	6a3b      	ldr	r3, [r7, #32]
 80019d6:	62fb      	str	r3, [r7, #44]	; 0x2c
			}

			/* Motor B */
			// Counting up; Motor moving backward
			if(cnt2 - 32500 > 0){
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	f647 62f4 	movw	r2, #32500	; 0x7ef4
 80019de:	4293      	cmp	r3, r2
 80019e0:	dd05      	ble.n	80019ee <encoder_task+0x7e>
				diffb = (cnt2 - 65535);
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 80019e8:	3bff      	subs	r3, #255	; 0xff
 80019ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80019ec:	e006      	b.n	80019fc <encoder_task+0x8c>
			}
			// Counting down; Motor moving forward
			else if(cnt2 - 32500 < 0){
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	f647 62f3 	movw	r2, #32499	; 0x7ef3
 80019f4:	4293      	cmp	r3, r2
 80019f6:	dc01      	bgt.n	80019fc <encoder_task+0x8c>
				diffb = cnt2;
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	62bb      	str	r3, [r7, #40]	; 0x28
			}

			encoder_offset = diffa + diffb;
 80019fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a00:	4413      	add	r3, r2
 8001a02:	4a13      	ldr	r2, [pc, #76]	; (8001a50 <encoder_task+0xe0>)
 8001a04:	6013      	str	r3, [r2, #0]
			// Display difference
			sprintf(msg, "Diff : %3d\0", encoder_offset);
 8001a06:	4b12      	ldr	r3, [pc, #72]	; (8001a50 <encoder_task+0xe0>)
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	f107 0308 	add.w	r3, r7, #8
 8001a0e:	4911      	ldr	r1, [pc, #68]	; (8001a54 <encoder_task+0xe4>)
 8001a10:	4618      	mov	r0, r3
 8001a12:	f007 fdd7 	bl	80095c4 <siprintf>

			OLED_ShowString(10,40,msg);
 8001a16:	f107 0308 	add.w	r3, r7, #8
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	2128      	movs	r1, #40	; 0x28
 8001a1e:	200a      	movs	r0, #10
 8001a20:	f007 fbd2 	bl	80091c8 <OLED_ShowString>
			OLED_Refresh_Gram();
 8001a24:	f007 fa5c 	bl	8008ee0 <OLED_Refresh_Gram>
			// Reset base tick
			__HAL_TIM_SET_COUNTER(&htim2, 0);
 8001a28:	4b07      	ldr	r3, [pc, #28]	; (8001a48 <encoder_task+0xd8>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	625a      	str	r2, [r3, #36]	; 0x24
			__HAL_TIM_SET_COUNTER(&htim3, 0);
 8001a30:	4b06      	ldr	r3, [pc, #24]	; (8001a4c <encoder_task+0xdc>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2200      	movs	r2, #0
 8001a36:	625a      	str	r2, [r3, #36]	; 0x24

			tick = HAL_GetTick();
 8001a38:	f000 fc3c 	bl	80022b4 <HAL_GetTick>
 8001a3c:	6278      	str	r0, [r7, #36]	; 0x24

			osDelay(10);
 8001a3e:	200a      	movs	r0, #10
 8001a40:	f004 fc86 	bl	8006350 <osDelay>
		if(HAL_GetTick()-tick > 10){
 8001a44:	e7a7      	b.n	8001996 <encoder_task+0x26>
 8001a46:	bf00      	nop
 8001a48:	20000138 	.word	0x20000138
 8001a4c:	20000180 	.word	0x20000180
 8001a50:	200002a8 	.word	0x200002a8
 8001a54:	08009d2c 	.word	0x08009d2c

08001a58 <gyro_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_gyro_task */
void gyro_task(void *argument)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b088      	sub	sp, #32
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN gyro_task */
  /* Infinite loop */
	uint8_t val[2] = { 0, 0 }; // To store ICM gyro values
 8001a60:	2300      	movs	r3, #0
 8001a62:	82bb      	strh	r3, [r7, #20]
	gyroInit();
 8001a64:	f007 f9a8 	bl	8008db8 <gyroInit>
	int16_t angular_speed = 0;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	83fb      	strh	r3, [r7, #30]
	uint8_t msg[8];

	int turn_angle = 75;	// gyro turn threshold
 8001a6c:	234b      	movs	r3, #75	; 0x4b
 8001a6e:	61bb      	str	r3, [r7, #24]
	osDelay(100);
 8001a70:	2064      	movs	r0, #100	; 0x64
 8001a72:	f004 fc6d 	bl	8006350 <osDelay>
	for(;;)
	{
		// If instruction requires turning, start gyro
		if(lr_speed >= '4'){
 8001a76:	4b3c      	ldr	r3, [pc, #240]	; (8001b68 <gyro_task+0x110>)
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	2b33      	cmp	r3, #51	; 0x33
 8001a7c:	d966      	bls.n	8001b4c <gyro_task+0xf4>
			gyroStart();	// Start Gyro Reading
 8001a7e:	f007 f989 	bl	8008d94 <gyroStart>

			// Continue Reading Gyro until hit threshold
			while(abs((int) curAngle) < turn_angle){
 8001a82:	e049      	b.n	8001b18 <gyro_task+0xc0>
				readByte(0x37, val);
 8001a84:	f107 0314 	add.w	r3, r7, #20
 8001a88:	4619      	mov	r1, r3
 8001a8a:	2037      	movs	r0, #55	; 0x37
 8001a8c:	f007 f9d8 	bl	8008e40 <readByte>
				angular_speed = (val[0] << 8) | val[1];	// appending the 2 bytes together
 8001a90:	7d3b      	ldrb	r3, [r7, #20]
 8001a92:	021b      	lsls	r3, r3, #8
 8001a94:	b21a      	sxth	r2, r3
 8001a96:	7d7b      	ldrb	r3, [r7, #21]
 8001a98:	b21b      	sxth	r3, r3
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	83fb      	strh	r3, [r7, #30]
				curAngle +=  ((double)(angular_speed*(100) - 2) / 16400.0)*1.1 ; //1.69
 8001a9e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001aa2:	2264      	movs	r2, #100	; 0x64
 8001aa4:	fb02 f303 	mul.w	r3, r2, r3
 8001aa8:	3b02      	subs	r3, #2
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7fe fd32 	bl	8000514 <__aeabi_i2d>
 8001ab0:	a329      	add	r3, pc, #164	; (adr r3, 8001b58 <gyro_task+0x100>)
 8001ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ab6:	f7fe fec1 	bl	800083c <__aeabi_ddiv>
 8001aba:	4602      	mov	r2, r0
 8001abc:	460b      	mov	r3, r1
 8001abe:	4610      	mov	r0, r2
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	a327      	add	r3, pc, #156	; (adr r3, 8001b60 <gyro_task+0x108>)
 8001ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac8:	f7fe fd8e 	bl	80005e8 <__aeabi_dmul>
 8001acc:	4602      	mov	r2, r0
 8001ace:	460b      	mov	r3, r1
 8001ad0:	4610      	mov	r0, r2
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	4b25      	ldr	r3, [pc, #148]	; (8001b6c <gyro_task+0x114>)
 8001ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ada:	f7fe fbcf 	bl	800027c <__adddf3>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	4922      	ldr	r1, [pc, #136]	; (8001b6c <gyro_task+0x114>)
 8001ae4:	e9c1 2300 	strd	r2, r3, [r1]

				sprintf(msg, "gyro : %3d\0", (int)curAngle);
 8001ae8:	4b20      	ldr	r3, [pc, #128]	; (8001b6c <gyro_task+0x114>)
 8001aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aee:	4610      	mov	r0, r2
 8001af0:	4619      	mov	r1, r3
 8001af2:	f7fe ff8b 	bl	8000a0c <__aeabi_d2iz>
 8001af6:	4602      	mov	r2, r0
 8001af8:	f107 030c 	add.w	r3, r7, #12
 8001afc:	491c      	ldr	r1, [pc, #112]	; (8001b70 <gyro_task+0x118>)
 8001afe:	4618      	mov	r0, r3
 8001b00:	f007 fd60 	bl	80095c4 <siprintf>
				OLED_ShowString(10, 10, msg);
 8001b04:	f107 030c 	add.w	r3, r7, #12
 8001b08:	461a      	mov	r2, r3
 8001b0a:	210a      	movs	r1, #10
 8001b0c:	200a      	movs	r0, #10
 8001b0e:	f007 fb5b 	bl	80091c8 <OLED_ShowString>
				osDelay(100);
 8001b12:	2064      	movs	r0, #100	; 0x64
 8001b14:	f004 fc1c 	bl	8006350 <osDelay>
			while(abs((int) curAngle) < turn_angle){
 8001b18:	4b14      	ldr	r3, [pc, #80]	; (8001b6c <gyro_task+0x114>)
 8001b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b1e:	4610      	mov	r0, r2
 8001b20:	4619      	mov	r1, r3
 8001b22:	f7fe ff73 	bl	8000a0c <__aeabi_d2iz>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	bfb8      	it	lt
 8001b2c:	425b      	neglt	r3, r3
 8001b2e:	69ba      	ldr	r2, [r7, #24]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	dca7      	bgt.n	8001a84 <gyro_task+0x2c>
			}

			htim1.Instance->CCR4 = pwmVal_servo;	// Turn servo to the centre
 8001b34:	4b0f      	ldr	r3, [pc, #60]	; (8001b74 <gyro_task+0x11c>)
 8001b36:	881a      	ldrh	r2, [r3, #0]
 8001b38:	4b0f      	ldr	r3, [pc, #60]	; (8001b78 <gyro_task+0x120>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	641a      	str	r2, [r3, #64]	; 0x40
			curAngle = 0;							// Reset Angle value
 8001b3e:	490b      	ldr	r1, [pc, #44]	; (8001b6c <gyro_task+0x114>)
 8001b40:	f04f 0200 	mov.w	r2, #0
 8001b44:	f04f 0300 	mov.w	r3, #0
 8001b48:	e9c1 2300 	strd	r2, r3, [r1]
		}
		osDelay(100);
 8001b4c:	2064      	movs	r0, #100	; 0x64
 8001b4e:	f004 fbff 	bl	8006350 <osDelay>
		if(lr_speed >= '4'){
 8001b52:	e790      	b.n	8001a76 <gyro_task+0x1e>
 8001b54:	f3af 8000 	nop.w
 8001b58:	00000000 	.word	0x00000000
 8001b5c:	40d00400 	.word	0x40d00400
 8001b60:	9999999a 	.word	0x9999999a
 8001b64:	3ff19999 	.word	0x3ff19999
 8001b68:	20000003 	.word	0x20000003
 8001b6c:	200002a0 	.word	0x200002a0
 8001b70:	08009d38 	.word	0x08009d38
 8001b74:	20000004 	.word	0x20000004
 8001b78:	200000f0 	.word	0x200000f0

08001b7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b80:	b672      	cpsid	i
}
 8001b82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b84:	e7fe      	b.n	8001b84 <Error_Handler+0x8>

08001b86 <enqueue>:
/*
 * Queue Functions
 *
 */
//input stuff into the queue
void enqueue(Queue *qPtr, uint8_t msg[4]){
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b084      	sub	sp, #16
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
 8001b8e:	6039      	str	r1, [r7, #0]
    QueueNode *newNode;
    newNode = (QueueNode *) malloc(sizeof(QueueNode));
 8001b90:	2008      	movs	r0, #8
 8001b92:	f007 fc01 	bl	8009398 <malloc>
 8001b96:	4603      	mov	r3, r0
 8001b98:	60bb      	str	r3, [r7, #8]
    for(int i=0; i<4; i++){
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	60fb      	str	r3, [r7, #12]
 8001b9e:	e00b      	b.n	8001bb8 <enqueue+0x32>
        newNode->msg[i] = msg[i];
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	683a      	ldr	r2, [r7, #0]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	7819      	ldrb	r1, [r3, #0]
 8001ba8:	68ba      	ldr	r2, [r7, #8]
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	4413      	add	r3, r2
 8001bae:	460a      	mov	r2, r1
 8001bb0:	701a      	strb	r2, [r3, #0]
    for(int i=0; i<4; i++){
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	60fb      	str	r3, [r7, #12]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2b03      	cmp	r3, #3
 8001bbc:	ddf0      	ble.n	8001ba0 <enqueue+0x1a>
    }
    newNode->next = NULL;
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	605a      	str	r2, [r3, #4]

    if(isEmptyQueue(*qPtr))
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001bca:	f000 f865 	bl	8001c98 <isEmptyQueue>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d003      	beq.n	8001bdc <enqueue+0x56>
        qPtr->head=newNode;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	68ba      	ldr	r2, [r7, #8]
 8001bd8:	605a      	str	r2, [r3, #4]
 8001bda:	e003      	b.n	8001be4 <enqueue+0x5e>
    else
        qPtr->tail->next = newNode;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	68ba      	ldr	r2, [r7, #8]
 8001be2:	605a      	str	r2, [r3, #4]

    qPtr->tail = newNode;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	68ba      	ldr	r2, [r7, #8]
 8001be8:	609a      	str	r2, [r3, #8]
    qPtr->size++;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	1c5a      	adds	r2, r3, #1
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	601a      	str	r2, [r3, #0]
}
 8001bf4:	bf00      	nop
 8001bf6:	3710      	adds	r7, #16
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}

08001bfc <dequeue>:

int dequeue(Queue *qPtr){
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
    if(qPtr==NULL || qPtr->head==NULL){ //Queue is empty or NULL pointer
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d003      	beq.n	8001c12 <dequeue+0x16>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d101      	bne.n	8001c16 <dequeue+0x1a>
        return 0;
 8001c12:	2300      	movs	r3, #0
 8001c14:	e017      	b.n	8001c46 <dequeue+0x4a>
    }
    else{
       QueueNode *temp = qPtr->head;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	60fb      	str	r3, [r7, #12]
       qPtr->head = qPtr->head->next;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	685a      	ldr	r2, [r3, #4]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	605a      	str	r2, [r3, #4]
       if(qPtr->head == NULL) //Queue is emptied
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d102      	bne.n	8001c34 <dequeue+0x38>
           qPtr->tail = NULL;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	609a      	str	r2, [r3, #8]

       free(temp);
 8001c34:	68f8      	ldr	r0, [r7, #12]
 8001c36:	f007 fbb7 	bl	80093a8 <free>
       qPtr->size--;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	1e5a      	subs	r2, r3, #1
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	601a      	str	r2, [r3, #0]
       return 1;
 8001c44:	2301      	movs	r3, #1
    }
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3710      	adds	r7, #16
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
	...

08001c50 <getFront>:

//get the front of the queue (not sure if working)
void getFront(Queue q){
 8001c50:	b480      	push	{r7}
 8001c52:	b085      	sub	sp, #20
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	1d3b      	adds	r3, r7, #4
 8001c58:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        frontback = (uint8_t)(q.head->msg[0]);
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	781a      	ldrb	r2, [r3, #0]
 8001c60:	4b09      	ldr	r3, [pc, #36]	; (8001c88 <getFront+0x38>)
 8001c62:	701a      	strb	r2, [r3, #0]
        fb_speed = (uint8_t)(q.head->msg[1]);
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	785a      	ldrb	r2, [r3, #1]
 8001c68:	4b08      	ldr	r3, [pc, #32]	; (8001c8c <getFront+0x3c>)
 8001c6a:	701a      	strb	r2, [r3, #0]
        leftright = (uint8_t)(q.head->msg[2]);
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	789a      	ldrb	r2, [r3, #2]
 8001c70:	4b07      	ldr	r3, [pc, #28]	; (8001c90 <getFront+0x40>)
 8001c72:	701a      	strb	r2, [r3, #0]
        lr_speed = (uint8_t)(q.head->msg[3]);
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	78da      	ldrb	r2, [r3, #3]
 8001c78:	4b06      	ldr	r3, [pc, #24]	; (8001c94 <getFront+0x44>)
 8001c7a:	701a      	strb	r2, [r3, #0]
}
 8001c7c:	bf00      	nop
 8001c7e:	3714      	adds	r7, #20
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr
 8001c88:	20000000 	.word	0x20000000
 8001c8c:	20000001 	.word	0x20000001
 8001c90:	20000002 	.word	0x20000002
 8001c94:	20000003 	.word	0x20000003

08001c98 <isEmptyQueue>:

//check if queue is empty (output 1 if empty, 0 if not empty)
int isEmptyQueue(Queue q){
 8001c98:	b480      	push	{r7}
 8001c9a:	b085      	sub	sp, #20
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	1d3b      	adds	r3, r7, #4
 8001ca0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    if(q.size==0) return 1;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d101      	bne.n	8001cae <isEmptyQueue+0x16>
 8001caa:	2301      	movs	r3, #1
 8001cac:	e000      	b.n	8001cb0 <isEmptyQueue+0x18>
    else return 0;
 8001cae:	2300      	movs	r3, #0
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3714      	adds	r7, #20
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	607b      	str	r3, [r7, #4]
 8001cc6:	4b12      	ldr	r3, [pc, #72]	; (8001d10 <HAL_MspInit+0x54>)
 8001cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cca:	4a11      	ldr	r2, [pc, #68]	; (8001d10 <HAL_MspInit+0x54>)
 8001ccc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cd0:	6453      	str	r3, [r2, #68]	; 0x44
 8001cd2:	4b0f      	ldr	r3, [pc, #60]	; (8001d10 <HAL_MspInit+0x54>)
 8001cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cda:	607b      	str	r3, [r7, #4]
 8001cdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cde:	2300      	movs	r3, #0
 8001ce0:	603b      	str	r3, [r7, #0]
 8001ce2:	4b0b      	ldr	r3, [pc, #44]	; (8001d10 <HAL_MspInit+0x54>)
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce6:	4a0a      	ldr	r2, [pc, #40]	; (8001d10 <HAL_MspInit+0x54>)
 8001ce8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cec:	6413      	str	r3, [r2, #64]	; 0x40
 8001cee:	4b08      	ldr	r3, [pc, #32]	; (8001d10 <HAL_MspInit+0x54>)
 8001cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cf6:	603b      	str	r3, [r7, #0]
 8001cf8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	210f      	movs	r1, #15
 8001cfe:	f06f 0001 	mvn.w	r0, #1
 8001d02:	f000 fbe2 	bl	80024ca <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d06:	bf00      	nop
 8001d08:	3708      	adds	r7, #8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	40023800 	.word	0x40023800

08001d14 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b08a      	sub	sp, #40	; 0x28
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d1c:	f107 0314 	add.w	r3, r7, #20
 8001d20:	2200      	movs	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]
 8001d24:	605a      	str	r2, [r3, #4]
 8001d26:	609a      	str	r2, [r3, #8]
 8001d28:	60da      	str	r2, [r3, #12]
 8001d2a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a19      	ldr	r2, [pc, #100]	; (8001d98 <HAL_I2C_MspInit+0x84>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d12c      	bne.n	8001d90 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d36:	2300      	movs	r3, #0
 8001d38:	613b      	str	r3, [r7, #16]
 8001d3a:	4b18      	ldr	r3, [pc, #96]	; (8001d9c <HAL_I2C_MspInit+0x88>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3e:	4a17      	ldr	r2, [pc, #92]	; (8001d9c <HAL_I2C_MspInit+0x88>)
 8001d40:	f043 0302 	orr.w	r3, r3, #2
 8001d44:	6313      	str	r3, [r2, #48]	; 0x30
 8001d46:	4b15      	ldr	r3, [pc, #84]	; (8001d9c <HAL_I2C_MspInit+0x88>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4a:	f003 0302 	and.w	r3, r3, #2
 8001d4e:	613b      	str	r3, [r7, #16]
 8001d50:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001d52:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d58:	2312      	movs	r3, #18
 8001d5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d60:	2303      	movs	r3, #3
 8001d62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d64:	2304      	movs	r3, #4
 8001d66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d68:	f107 0314 	add.w	r3, r7, #20
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	480c      	ldr	r0, [pc, #48]	; (8001da0 <HAL_I2C_MspInit+0x8c>)
 8001d70:	f000 fc74 	bl	800265c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d74:	2300      	movs	r3, #0
 8001d76:	60fb      	str	r3, [r7, #12]
 8001d78:	4b08      	ldr	r3, [pc, #32]	; (8001d9c <HAL_I2C_MspInit+0x88>)
 8001d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7c:	4a07      	ldr	r2, [pc, #28]	; (8001d9c <HAL_I2C_MspInit+0x88>)
 8001d7e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d82:	6413      	str	r3, [r2, #64]	; 0x40
 8001d84:	4b05      	ldr	r3, [pc, #20]	; (8001d9c <HAL_I2C_MspInit+0x88>)
 8001d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d8c:	60fb      	str	r3, [r7, #12]
 8001d8e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001d90:	bf00      	nop
 8001d92:	3728      	adds	r7, #40	; 0x28
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40005400 	.word	0x40005400
 8001d9c:	40023800 	.word	0x40023800
 8001da0:	40020400 	.word	0x40020400

08001da4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b08a      	sub	sp, #40	; 0x28
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dac:	f107 0314 	add.w	r3, r7, #20
 8001db0:	2200      	movs	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]
 8001db4:	605a      	str	r2, [r3, #4]
 8001db6:	609a      	str	r2, [r3, #8]
 8001db8:	60da      	str	r2, [r3, #12]
 8001dba:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a23      	ldr	r2, [pc, #140]	; (8001e50 <HAL_TIM_Base_MspInit+0xac>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d10e      	bne.n	8001de4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	613b      	str	r3, [r7, #16]
 8001dca:	4b22      	ldr	r3, [pc, #136]	; (8001e54 <HAL_TIM_Base_MspInit+0xb0>)
 8001dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dce:	4a21      	ldr	r2, [pc, #132]	; (8001e54 <HAL_TIM_Base_MspInit+0xb0>)
 8001dd0:	f043 0301 	orr.w	r3, r3, #1
 8001dd4:	6453      	str	r3, [r2, #68]	; 0x44
 8001dd6:	4b1f      	ldr	r3, [pc, #124]	; (8001e54 <HAL_TIM_Base_MspInit+0xb0>)
 8001dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	613b      	str	r3, [r7, #16]
 8001de0:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001de2:	e030      	b.n	8001e46 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM8)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a1b      	ldr	r2, [pc, #108]	; (8001e58 <HAL_TIM_Base_MspInit+0xb4>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d12b      	bne.n	8001e46 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001dee:	2300      	movs	r3, #0
 8001df0:	60fb      	str	r3, [r7, #12]
 8001df2:	4b18      	ldr	r3, [pc, #96]	; (8001e54 <HAL_TIM_Base_MspInit+0xb0>)
 8001df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df6:	4a17      	ldr	r2, [pc, #92]	; (8001e54 <HAL_TIM_Base_MspInit+0xb0>)
 8001df8:	f043 0302 	orr.w	r3, r3, #2
 8001dfc:	6453      	str	r3, [r2, #68]	; 0x44
 8001dfe:	4b15      	ldr	r3, [pc, #84]	; (8001e54 <HAL_TIM_Base_MspInit+0xb0>)
 8001e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e02:	f003 0302 	and.w	r3, r3, #2
 8001e06:	60fb      	str	r3, [r7, #12]
 8001e08:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	60bb      	str	r3, [r7, #8]
 8001e0e:	4b11      	ldr	r3, [pc, #68]	; (8001e54 <HAL_TIM_Base_MspInit+0xb0>)
 8001e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e12:	4a10      	ldr	r2, [pc, #64]	; (8001e54 <HAL_TIM_Base_MspInit+0xb0>)
 8001e14:	f043 0304 	orr.w	r3, r3, #4
 8001e18:	6313      	str	r3, [r2, #48]	; 0x30
 8001e1a:	4b0e      	ldr	r3, [pc, #56]	; (8001e54 <HAL_TIM_Base_MspInit+0xb0>)
 8001e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1e:	f003 0304 	and.w	r3, r3, #4
 8001e22:	60bb      	str	r3, [r7, #8]
 8001e24:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 8001e26:	23c0      	movs	r3, #192	; 0xc0
 8001e28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e2a:	2302      	movs	r3, #2
 8001e2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e32:	2300      	movs	r3, #0
 8001e34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001e36:	2303      	movs	r3, #3
 8001e38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e3a:	f107 0314 	add.w	r3, r7, #20
 8001e3e:	4619      	mov	r1, r3
 8001e40:	4806      	ldr	r0, [pc, #24]	; (8001e5c <HAL_TIM_Base_MspInit+0xb8>)
 8001e42:	f000 fc0b 	bl	800265c <HAL_GPIO_Init>
}
 8001e46:	bf00      	nop
 8001e48:	3728      	adds	r7, #40	; 0x28
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	40010000 	.word	0x40010000
 8001e54:	40023800 	.word	0x40023800
 8001e58:	40010400 	.word	0x40010400
 8001e5c:	40020800 	.word	0x40020800

08001e60 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b08c      	sub	sp, #48	; 0x30
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e68:	f107 031c 	add.w	r3, r7, #28
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	601a      	str	r2, [r3, #0]
 8001e70:	605a      	str	r2, [r3, #4]
 8001e72:	609a      	str	r2, [r3, #8]
 8001e74:	60da      	str	r2, [r3, #12]
 8001e76:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e80:	d14b      	bne.n	8001f1a <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e82:	2300      	movs	r3, #0
 8001e84:	61bb      	str	r3, [r7, #24]
 8001e86:	4b3f      	ldr	r3, [pc, #252]	; (8001f84 <HAL_TIM_Encoder_MspInit+0x124>)
 8001e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8a:	4a3e      	ldr	r2, [pc, #248]	; (8001f84 <HAL_TIM_Encoder_MspInit+0x124>)
 8001e8c:	f043 0301 	orr.w	r3, r3, #1
 8001e90:	6413      	str	r3, [r2, #64]	; 0x40
 8001e92:	4b3c      	ldr	r3, [pc, #240]	; (8001f84 <HAL_TIM_Encoder_MspInit+0x124>)
 8001e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e96:	f003 0301 	and.w	r3, r3, #1
 8001e9a:	61bb      	str	r3, [r7, #24]
 8001e9c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	617b      	str	r3, [r7, #20]
 8001ea2:	4b38      	ldr	r3, [pc, #224]	; (8001f84 <HAL_TIM_Encoder_MspInit+0x124>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea6:	4a37      	ldr	r2, [pc, #220]	; (8001f84 <HAL_TIM_Encoder_MspInit+0x124>)
 8001ea8:	f043 0301 	orr.w	r3, r3, #1
 8001eac:	6313      	str	r3, [r2, #48]	; 0x30
 8001eae:	4b35      	ldr	r3, [pc, #212]	; (8001f84 <HAL_TIM_Encoder_MspInit+0x124>)
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb2:	f003 0301 	and.w	r3, r3, #1
 8001eb6:	617b      	str	r3, [r7, #20]
 8001eb8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eba:	2300      	movs	r3, #0
 8001ebc:	613b      	str	r3, [r7, #16]
 8001ebe:	4b31      	ldr	r3, [pc, #196]	; (8001f84 <HAL_TIM_Encoder_MspInit+0x124>)
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec2:	4a30      	ldr	r2, [pc, #192]	; (8001f84 <HAL_TIM_Encoder_MspInit+0x124>)
 8001ec4:	f043 0302 	orr.w	r3, r3, #2
 8001ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eca:	4b2e      	ldr	r3, [pc, #184]	; (8001f84 <HAL_TIM_Encoder_MspInit+0x124>)
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ece:	f003 0302 	and.w	r3, r3, #2
 8001ed2:	613b      	str	r3, [r7, #16]
 8001ed4:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001ed6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001eda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001edc:	2302      	movs	r3, #2
 8001ede:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eec:	f107 031c 	add.w	r3, r7, #28
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	4825      	ldr	r0, [pc, #148]	; (8001f88 <HAL_TIM_Encoder_MspInit+0x128>)
 8001ef4:	f000 fbb2 	bl	800265c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001ef8:	2308      	movs	r3, #8
 8001efa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001efc:	2302      	movs	r3, #2
 8001efe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f00:	2300      	movs	r3, #0
 8001f02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f04:	2300      	movs	r3, #0
 8001f06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f0c:	f107 031c 	add.w	r3, r7, #28
 8001f10:	4619      	mov	r1, r3
 8001f12:	481e      	ldr	r0, [pc, #120]	; (8001f8c <HAL_TIM_Encoder_MspInit+0x12c>)
 8001f14:	f000 fba2 	bl	800265c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001f18:	e030      	b.n	8001f7c <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM3)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a1c      	ldr	r2, [pc, #112]	; (8001f90 <HAL_TIM_Encoder_MspInit+0x130>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d12b      	bne.n	8001f7c <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f24:	2300      	movs	r3, #0
 8001f26:	60fb      	str	r3, [r7, #12]
 8001f28:	4b16      	ldr	r3, [pc, #88]	; (8001f84 <HAL_TIM_Encoder_MspInit+0x124>)
 8001f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2c:	4a15      	ldr	r2, [pc, #84]	; (8001f84 <HAL_TIM_Encoder_MspInit+0x124>)
 8001f2e:	f043 0302 	orr.w	r3, r3, #2
 8001f32:	6413      	str	r3, [r2, #64]	; 0x40
 8001f34:	4b13      	ldr	r3, [pc, #76]	; (8001f84 <HAL_TIM_Encoder_MspInit+0x124>)
 8001f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f38:	f003 0302 	and.w	r3, r3, #2
 8001f3c:	60fb      	str	r3, [r7, #12]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f40:	2300      	movs	r3, #0
 8001f42:	60bb      	str	r3, [r7, #8]
 8001f44:	4b0f      	ldr	r3, [pc, #60]	; (8001f84 <HAL_TIM_Encoder_MspInit+0x124>)
 8001f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f48:	4a0e      	ldr	r2, [pc, #56]	; (8001f84 <HAL_TIM_Encoder_MspInit+0x124>)
 8001f4a:	f043 0301 	orr.w	r3, r3, #1
 8001f4e:	6313      	str	r3, [r2, #48]	; 0x30
 8001f50:	4b0c      	ldr	r3, [pc, #48]	; (8001f84 <HAL_TIM_Encoder_MspInit+0x124>)
 8001f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f54:	f003 0301 	and.w	r3, r3, #1
 8001f58:	60bb      	str	r3, [r7, #8]
 8001f5a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f5c:	23c0      	movs	r3, #192	; 0xc0
 8001f5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f60:	2302      	movs	r3, #2
 8001f62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f64:	2300      	movs	r3, #0
 8001f66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f6c:	2302      	movs	r3, #2
 8001f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f70:	f107 031c 	add.w	r3, r7, #28
 8001f74:	4619      	mov	r1, r3
 8001f76:	4804      	ldr	r0, [pc, #16]	; (8001f88 <HAL_TIM_Encoder_MspInit+0x128>)
 8001f78:	f000 fb70 	bl	800265c <HAL_GPIO_Init>
}
 8001f7c:	bf00      	nop
 8001f7e:	3730      	adds	r7, #48	; 0x30
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	40023800 	.word	0x40023800
 8001f88:	40020000 	.word	0x40020000
 8001f8c:	40020400 	.word	0x40020400
 8001f90:	40000400 	.word	0x40000400

08001f94 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b088      	sub	sp, #32
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f9c:	f107 030c 	add.w	r3, r7, #12
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	601a      	str	r2, [r3, #0]
 8001fa4:	605a      	str	r2, [r3, #4]
 8001fa6:	609a      	str	r2, [r3, #8]
 8001fa8:	60da      	str	r2, [r3, #12]
 8001faa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a12      	ldr	r2, [pc, #72]	; (8001ffc <HAL_TIM_MspPostInit+0x68>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d11e      	bne.n	8001ff4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	60bb      	str	r3, [r7, #8]
 8001fba:	4b11      	ldr	r3, [pc, #68]	; (8002000 <HAL_TIM_MspPostInit+0x6c>)
 8001fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fbe:	4a10      	ldr	r2, [pc, #64]	; (8002000 <HAL_TIM_MspPostInit+0x6c>)
 8001fc0:	f043 0310 	orr.w	r3, r3, #16
 8001fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fc6:	4b0e      	ldr	r3, [pc, #56]	; (8002000 <HAL_TIM_MspPostInit+0x6c>)
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fca:	f003 0310 	and.w	r3, r3, #16
 8001fce:	60bb      	str	r3, [r7, #8]
 8001fd0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001fd2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001fd6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd8:	2302      	movs	r3, #2
 8001fda:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fe8:	f107 030c 	add.w	r3, r7, #12
 8001fec:	4619      	mov	r1, r3
 8001fee:	4805      	ldr	r0, [pc, #20]	; (8002004 <HAL_TIM_MspPostInit+0x70>)
 8001ff0:	f000 fb34 	bl	800265c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001ff4:	bf00      	nop
 8001ff6:	3720      	adds	r7, #32
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	40010000 	.word	0x40010000
 8002000:	40023800 	.word	0x40023800
 8002004:	40021000 	.word	0x40021000

08002008 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b08a      	sub	sp, #40	; 0x28
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002010:	f107 0314 	add.w	r3, r7, #20
 8002014:	2200      	movs	r2, #0
 8002016:	601a      	str	r2, [r3, #0]
 8002018:	605a      	str	r2, [r3, #4]
 800201a:	609a      	str	r2, [r3, #8]
 800201c:	60da      	str	r2, [r3, #12]
 800201e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a1d      	ldr	r2, [pc, #116]	; (800209c <HAL_UART_MspInit+0x94>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d134      	bne.n	8002094 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800202a:	2300      	movs	r3, #0
 800202c:	613b      	str	r3, [r7, #16]
 800202e:	4b1c      	ldr	r3, [pc, #112]	; (80020a0 <HAL_UART_MspInit+0x98>)
 8002030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002032:	4a1b      	ldr	r2, [pc, #108]	; (80020a0 <HAL_UART_MspInit+0x98>)
 8002034:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002038:	6413      	str	r3, [r2, #64]	; 0x40
 800203a:	4b19      	ldr	r3, [pc, #100]	; (80020a0 <HAL_UART_MspInit+0x98>)
 800203c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002042:	613b      	str	r3, [r7, #16]
 8002044:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002046:	2300      	movs	r3, #0
 8002048:	60fb      	str	r3, [r7, #12]
 800204a:	4b15      	ldr	r3, [pc, #84]	; (80020a0 <HAL_UART_MspInit+0x98>)
 800204c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204e:	4a14      	ldr	r2, [pc, #80]	; (80020a0 <HAL_UART_MspInit+0x98>)
 8002050:	f043 0304 	orr.w	r3, r3, #4
 8002054:	6313      	str	r3, [r2, #48]	; 0x30
 8002056:	4b12      	ldr	r3, [pc, #72]	; (80020a0 <HAL_UART_MspInit+0x98>)
 8002058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205a:	f003 0304 	and.w	r3, r3, #4
 800205e:	60fb      	str	r3, [r7, #12]
 8002060:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002062:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002066:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002068:	2302      	movs	r3, #2
 800206a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206c:	2300      	movs	r3, #0
 800206e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002070:	2303      	movs	r3, #3
 8002072:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002074:	2307      	movs	r3, #7
 8002076:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002078:	f107 0314 	add.w	r3, r7, #20
 800207c:	4619      	mov	r1, r3
 800207e:	4809      	ldr	r0, [pc, #36]	; (80020a4 <HAL_UART_MspInit+0x9c>)
 8002080:	f000 faec 	bl	800265c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002084:	2200      	movs	r2, #0
 8002086:	2105      	movs	r1, #5
 8002088:	2027      	movs	r0, #39	; 0x27
 800208a:	f000 fa1e 	bl	80024ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800208e:	2027      	movs	r0, #39	; 0x27
 8002090:	f000 fa37 	bl	8002502 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002094:	bf00      	nop
 8002096:	3728      	adds	r7, #40	; 0x28
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	40004800 	.word	0x40004800
 80020a0:	40023800 	.word	0x40023800
 80020a4:	40020800 	.word	0x40020800

080020a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020ac:	e7fe      	b.n	80020ac <NMI_Handler+0x4>

080020ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020ae:	b480      	push	{r7}
 80020b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020b2:	e7fe      	b.n	80020b2 <HardFault_Handler+0x4>

080020b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020b8:	e7fe      	b.n	80020b8 <MemManage_Handler+0x4>

080020ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020ba:	b480      	push	{r7}
 80020bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020be:	e7fe      	b.n	80020be <BusFault_Handler+0x4>

080020c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020c4:	e7fe      	b.n	80020c4 <UsageFault_Handler+0x4>

080020c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020c6:	b480      	push	{r7}
 80020c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020ca:	bf00      	nop
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr

080020d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020d8:	f000 f8d8 	bl	800228c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80020dc:	f006 fa2c 	bl	8008538 <xTaskGetSchedulerState>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d001      	beq.n	80020ea <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80020e6:	f004 fe0f 	bl	8006d08 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020ea:	bf00      	nop
 80020ec:	bd80      	pop	{r7, pc}
	...

080020f0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80020f4:	4802      	ldr	r0, [pc, #8]	; (8002100 <USART3_IRQHandler+0x10>)
 80020f6:	f003 f921 	bl	800533c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80020fa:	bf00      	nop
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	20000210 	.word	0x20000210

08002104 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b086      	sub	sp, #24
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800210c:	4a14      	ldr	r2, [pc, #80]	; (8002160 <_sbrk+0x5c>)
 800210e:	4b15      	ldr	r3, [pc, #84]	; (8002164 <_sbrk+0x60>)
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002118:	4b13      	ldr	r3, [pc, #76]	; (8002168 <_sbrk+0x64>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d102      	bne.n	8002126 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002120:	4b11      	ldr	r3, [pc, #68]	; (8002168 <_sbrk+0x64>)
 8002122:	4a12      	ldr	r2, [pc, #72]	; (800216c <_sbrk+0x68>)
 8002124:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002126:	4b10      	ldr	r3, [pc, #64]	; (8002168 <_sbrk+0x64>)
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4413      	add	r3, r2
 800212e:	693a      	ldr	r2, [r7, #16]
 8002130:	429a      	cmp	r2, r3
 8002132:	d207      	bcs.n	8002144 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002134:	f007 f906 	bl	8009344 <__errno>
 8002138:	4603      	mov	r3, r0
 800213a:	220c      	movs	r2, #12
 800213c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800213e:	f04f 33ff 	mov.w	r3, #4294967295
 8002142:	e009      	b.n	8002158 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002144:	4b08      	ldr	r3, [pc, #32]	; (8002168 <_sbrk+0x64>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800214a:	4b07      	ldr	r3, [pc, #28]	; (8002168 <_sbrk+0x64>)
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4413      	add	r3, r2
 8002152:	4a05      	ldr	r2, [pc, #20]	; (8002168 <_sbrk+0x64>)
 8002154:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002156:	68fb      	ldr	r3, [r7, #12]
}
 8002158:	4618      	mov	r0, r3
 800215a:	3718      	adds	r7, #24
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	20020000 	.word	0x20020000
 8002164:	00000400 	.word	0x00000400
 8002168:	200002b8 	.word	0x200002b8
 800216c:	20005038 	.word	0x20005038

08002170 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002174:	4b06      	ldr	r3, [pc, #24]	; (8002190 <SystemInit+0x20>)
 8002176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800217a:	4a05      	ldr	r2, [pc, #20]	; (8002190 <SystemInit+0x20>)
 800217c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002180:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002184:	bf00      	nop
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	e000ed00 	.word	0xe000ed00

08002194 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002194:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021cc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002198:	480d      	ldr	r0, [pc, #52]	; (80021d0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800219a:	490e      	ldr	r1, [pc, #56]	; (80021d4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800219c:	4a0e      	ldr	r2, [pc, #56]	; (80021d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800219e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021a0:	e002      	b.n	80021a8 <LoopCopyDataInit>

080021a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021a6:	3304      	adds	r3, #4

080021a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021ac:	d3f9      	bcc.n	80021a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021ae:	4a0b      	ldr	r2, [pc, #44]	; (80021dc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80021b0:	4c0b      	ldr	r4, [pc, #44]	; (80021e0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80021b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021b4:	e001      	b.n	80021ba <LoopFillZerobss>

080021b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021b8:	3204      	adds	r2, #4

080021ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021bc:	d3fb      	bcc.n	80021b6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80021be:	f7ff ffd7 	bl	8002170 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021c2:	f007 f8c5 	bl	8009350 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021c6:	f7fe fdeb 	bl	8000da0 <main>
  bx  lr    
 80021ca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80021cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80021d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021d4:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80021d8:	0800a8d0 	.word	0x0800a8d0
  ldr r2, =_sbss
 80021dc:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80021e0:	20005034 	.word	0x20005034

080021e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021e4:	e7fe      	b.n	80021e4 <ADC_IRQHandler>
	...

080021e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021ec:	4b0e      	ldr	r3, [pc, #56]	; (8002228 <HAL_Init+0x40>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a0d      	ldr	r2, [pc, #52]	; (8002228 <HAL_Init+0x40>)
 80021f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021f8:	4b0b      	ldr	r3, [pc, #44]	; (8002228 <HAL_Init+0x40>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a0a      	ldr	r2, [pc, #40]	; (8002228 <HAL_Init+0x40>)
 80021fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002202:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002204:	4b08      	ldr	r3, [pc, #32]	; (8002228 <HAL_Init+0x40>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a07      	ldr	r2, [pc, #28]	; (8002228 <HAL_Init+0x40>)
 800220a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800220e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002210:	2003      	movs	r0, #3
 8002212:	f000 f94f 	bl	80024b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002216:	200f      	movs	r0, #15
 8002218:	f000 f808 	bl	800222c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800221c:	f7ff fd4e 	bl	8001cbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002220:	2300      	movs	r3, #0
}
 8002222:	4618      	mov	r0, r3
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	40023c00 	.word	0x40023c00

0800222c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002234:	4b12      	ldr	r3, [pc, #72]	; (8002280 <HAL_InitTick+0x54>)
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	4b12      	ldr	r3, [pc, #72]	; (8002284 <HAL_InitTick+0x58>)
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	4619      	mov	r1, r3
 800223e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002242:	fbb3 f3f1 	udiv	r3, r3, r1
 8002246:	fbb2 f3f3 	udiv	r3, r2, r3
 800224a:	4618      	mov	r0, r3
 800224c:	f000 f967 	bl	800251e <HAL_SYSTICK_Config>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d001      	beq.n	800225a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e00e      	b.n	8002278 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2b0f      	cmp	r3, #15
 800225e:	d80a      	bhi.n	8002276 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002260:	2200      	movs	r2, #0
 8002262:	6879      	ldr	r1, [r7, #4]
 8002264:	f04f 30ff 	mov.w	r0, #4294967295
 8002268:	f000 f92f 	bl	80024ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800226c:	4a06      	ldr	r2, [pc, #24]	; (8002288 <HAL_InitTick+0x5c>)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002272:	2300      	movs	r3, #0
 8002274:	e000      	b.n	8002278 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
}
 8002278:	4618      	mov	r0, r3
 800227a:	3708      	adds	r7, #8
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	20000008 	.word	0x20000008
 8002284:	20000010 	.word	0x20000010
 8002288:	2000000c 	.word	0x2000000c

0800228c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002290:	4b06      	ldr	r3, [pc, #24]	; (80022ac <HAL_IncTick+0x20>)
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	461a      	mov	r2, r3
 8002296:	4b06      	ldr	r3, [pc, #24]	; (80022b0 <HAL_IncTick+0x24>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4413      	add	r3, r2
 800229c:	4a04      	ldr	r2, [pc, #16]	; (80022b0 <HAL_IncTick+0x24>)
 800229e:	6013      	str	r3, [r2, #0]
}
 80022a0:	bf00      	nop
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	20000010 	.word	0x20000010
 80022b0:	200002bc 	.word	0x200002bc

080022b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  return uwTick;
 80022b8:	4b03      	ldr	r3, [pc, #12]	; (80022c8 <HAL_GetTick+0x14>)
 80022ba:	681b      	ldr	r3, [r3, #0]
}
 80022bc:	4618      	mov	r0, r3
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	200002bc 	.word	0x200002bc

080022cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022d4:	f7ff ffee 	bl	80022b4 <HAL_GetTick>
 80022d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022e4:	d005      	beq.n	80022f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022e6:	4b0a      	ldr	r3, [pc, #40]	; (8002310 <HAL_Delay+0x44>)
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	461a      	mov	r2, r3
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	4413      	add	r3, r2
 80022f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80022f2:	bf00      	nop
 80022f4:	f7ff ffde 	bl	80022b4 <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	68fa      	ldr	r2, [r7, #12]
 8002300:	429a      	cmp	r2, r3
 8002302:	d8f7      	bhi.n	80022f4 <HAL_Delay+0x28>
  {
  }
}
 8002304:	bf00      	nop
 8002306:	bf00      	nop
 8002308:	3710      	adds	r7, #16
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	20000010 	.word	0x20000010

08002314 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002314:	b480      	push	{r7}
 8002316:	b085      	sub	sp, #20
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f003 0307 	and.w	r3, r3, #7
 8002322:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002324:	4b0c      	ldr	r3, [pc, #48]	; (8002358 <__NVIC_SetPriorityGrouping+0x44>)
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800232a:	68ba      	ldr	r2, [r7, #8]
 800232c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002330:	4013      	ands	r3, r2
 8002332:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800233c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002340:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002344:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002346:	4a04      	ldr	r2, [pc, #16]	; (8002358 <__NVIC_SetPriorityGrouping+0x44>)
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	60d3      	str	r3, [r2, #12]
}
 800234c:	bf00      	nop
 800234e:	3714      	adds	r7, #20
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr
 8002358:	e000ed00 	.word	0xe000ed00

0800235c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002360:	4b04      	ldr	r3, [pc, #16]	; (8002374 <__NVIC_GetPriorityGrouping+0x18>)
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	0a1b      	lsrs	r3, r3, #8
 8002366:	f003 0307 	and.w	r3, r3, #7
}
 800236a:	4618      	mov	r0, r3
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr
 8002374:	e000ed00 	.word	0xe000ed00

08002378 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	4603      	mov	r3, r0
 8002380:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002386:	2b00      	cmp	r3, #0
 8002388:	db0b      	blt.n	80023a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800238a:	79fb      	ldrb	r3, [r7, #7]
 800238c:	f003 021f 	and.w	r2, r3, #31
 8002390:	4907      	ldr	r1, [pc, #28]	; (80023b0 <__NVIC_EnableIRQ+0x38>)
 8002392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002396:	095b      	lsrs	r3, r3, #5
 8002398:	2001      	movs	r0, #1
 800239a:	fa00 f202 	lsl.w	r2, r0, r2
 800239e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023a2:	bf00      	nop
 80023a4:	370c      	adds	r7, #12
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	e000e100 	.word	0xe000e100

080023b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	4603      	mov	r3, r0
 80023bc:	6039      	str	r1, [r7, #0]
 80023be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	db0a      	blt.n	80023de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	b2da      	uxtb	r2, r3
 80023cc:	490c      	ldr	r1, [pc, #48]	; (8002400 <__NVIC_SetPriority+0x4c>)
 80023ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d2:	0112      	lsls	r2, r2, #4
 80023d4:	b2d2      	uxtb	r2, r2
 80023d6:	440b      	add	r3, r1
 80023d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023dc:	e00a      	b.n	80023f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	b2da      	uxtb	r2, r3
 80023e2:	4908      	ldr	r1, [pc, #32]	; (8002404 <__NVIC_SetPriority+0x50>)
 80023e4:	79fb      	ldrb	r3, [r7, #7]
 80023e6:	f003 030f 	and.w	r3, r3, #15
 80023ea:	3b04      	subs	r3, #4
 80023ec:	0112      	lsls	r2, r2, #4
 80023ee:	b2d2      	uxtb	r2, r2
 80023f0:	440b      	add	r3, r1
 80023f2:	761a      	strb	r2, [r3, #24]
}
 80023f4:	bf00      	nop
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr
 8002400:	e000e100 	.word	0xe000e100
 8002404:	e000ed00 	.word	0xe000ed00

08002408 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002408:	b480      	push	{r7}
 800240a:	b089      	sub	sp, #36	; 0x24
 800240c:	af00      	add	r7, sp, #0
 800240e:	60f8      	str	r0, [r7, #12]
 8002410:	60b9      	str	r1, [r7, #8]
 8002412:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	f003 0307 	and.w	r3, r3, #7
 800241a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	f1c3 0307 	rsb	r3, r3, #7
 8002422:	2b04      	cmp	r3, #4
 8002424:	bf28      	it	cs
 8002426:	2304      	movcs	r3, #4
 8002428:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	3304      	adds	r3, #4
 800242e:	2b06      	cmp	r3, #6
 8002430:	d902      	bls.n	8002438 <NVIC_EncodePriority+0x30>
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	3b03      	subs	r3, #3
 8002436:	e000      	b.n	800243a <NVIC_EncodePriority+0x32>
 8002438:	2300      	movs	r3, #0
 800243a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800243c:	f04f 32ff 	mov.w	r2, #4294967295
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	fa02 f303 	lsl.w	r3, r2, r3
 8002446:	43da      	mvns	r2, r3
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	401a      	ands	r2, r3
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002450:	f04f 31ff 	mov.w	r1, #4294967295
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	fa01 f303 	lsl.w	r3, r1, r3
 800245a:	43d9      	mvns	r1, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002460:	4313      	orrs	r3, r2
         );
}
 8002462:	4618      	mov	r0, r3
 8002464:	3724      	adds	r7, #36	; 0x24
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
	...

08002470 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	3b01      	subs	r3, #1
 800247c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002480:	d301      	bcc.n	8002486 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002482:	2301      	movs	r3, #1
 8002484:	e00f      	b.n	80024a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002486:	4a0a      	ldr	r2, [pc, #40]	; (80024b0 <SysTick_Config+0x40>)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	3b01      	subs	r3, #1
 800248c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800248e:	210f      	movs	r1, #15
 8002490:	f04f 30ff 	mov.w	r0, #4294967295
 8002494:	f7ff ff8e 	bl	80023b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002498:	4b05      	ldr	r3, [pc, #20]	; (80024b0 <SysTick_Config+0x40>)
 800249a:	2200      	movs	r2, #0
 800249c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800249e:	4b04      	ldr	r3, [pc, #16]	; (80024b0 <SysTick_Config+0x40>)
 80024a0:	2207      	movs	r2, #7
 80024a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024a4:	2300      	movs	r3, #0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3708      	adds	r7, #8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	e000e010 	.word	0xe000e010

080024b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f7ff ff29 	bl	8002314 <__NVIC_SetPriorityGrouping>
}
 80024c2:	bf00      	nop
 80024c4:	3708      	adds	r7, #8
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}

080024ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024ca:	b580      	push	{r7, lr}
 80024cc:	b086      	sub	sp, #24
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	4603      	mov	r3, r0
 80024d2:	60b9      	str	r1, [r7, #8]
 80024d4:	607a      	str	r2, [r7, #4]
 80024d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024d8:	2300      	movs	r3, #0
 80024da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024dc:	f7ff ff3e 	bl	800235c <__NVIC_GetPriorityGrouping>
 80024e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	68b9      	ldr	r1, [r7, #8]
 80024e6:	6978      	ldr	r0, [r7, #20]
 80024e8:	f7ff ff8e 	bl	8002408 <NVIC_EncodePriority>
 80024ec:	4602      	mov	r2, r0
 80024ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024f2:	4611      	mov	r1, r2
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7ff ff5d 	bl	80023b4 <__NVIC_SetPriority>
}
 80024fa:	bf00      	nop
 80024fc:	3718      	adds	r7, #24
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}

08002502 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002502:	b580      	push	{r7, lr}
 8002504:	b082      	sub	sp, #8
 8002506:	af00      	add	r7, sp, #0
 8002508:	4603      	mov	r3, r0
 800250a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800250c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002510:	4618      	mov	r0, r3
 8002512:	f7ff ff31 	bl	8002378 <__NVIC_EnableIRQ>
}
 8002516:	bf00      	nop
 8002518:	3708      	adds	r7, #8
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800251e:	b580      	push	{r7, lr}
 8002520:	b082      	sub	sp, #8
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f7ff ffa2 	bl	8002470 <SysTick_Config>
 800252c:	4603      	mov	r3, r0
}
 800252e:	4618      	mov	r0, r3
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}

08002536 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002536:	b580      	push	{r7, lr}
 8002538:	b084      	sub	sp, #16
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002542:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002544:	f7ff feb6 	bl	80022b4 <HAL_GetTick>
 8002548:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002550:	b2db      	uxtb	r3, r3
 8002552:	2b02      	cmp	r3, #2
 8002554:	d008      	beq.n	8002568 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2280      	movs	r2, #128	; 0x80
 800255a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2200      	movs	r2, #0
 8002560:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e052      	b.n	800260e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f022 0216 	bic.w	r2, r2, #22
 8002576:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	695a      	ldr	r2, [r3, #20]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002586:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258c:	2b00      	cmp	r3, #0
 800258e:	d103      	bne.n	8002598 <HAL_DMA_Abort+0x62>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002594:	2b00      	cmp	r3, #0
 8002596:	d007      	beq.n	80025a8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f022 0208 	bic.w	r2, r2, #8
 80025a6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f022 0201 	bic.w	r2, r2, #1
 80025b6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025b8:	e013      	b.n	80025e2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025ba:	f7ff fe7b 	bl	80022b4 <HAL_GetTick>
 80025be:	4602      	mov	r2, r0
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	2b05      	cmp	r3, #5
 80025c6:	d90c      	bls.n	80025e2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2220      	movs	r2, #32
 80025cc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2203      	movs	r2, #3
 80025d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e015      	b.n	800260e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0301 	and.w	r3, r3, #1
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d1e4      	bne.n	80025ba <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025f4:	223f      	movs	r2, #63	; 0x3f
 80025f6:	409a      	lsls	r2, r3
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2201      	movs	r2, #1
 8002600:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2200      	movs	r2, #0
 8002608:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800260c:	2300      	movs	r3, #0
}
 800260e:	4618      	mov	r0, r3
 8002610:	3710      	adds	r7, #16
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}

08002616 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002616:	b480      	push	{r7}
 8002618:	b083      	sub	sp, #12
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002624:	b2db      	uxtb	r3, r3
 8002626:	2b02      	cmp	r3, #2
 8002628:	d004      	beq.n	8002634 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2280      	movs	r2, #128	; 0x80
 800262e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e00c      	b.n	800264e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2205      	movs	r2, #5
 8002638:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f022 0201 	bic.w	r2, r2, #1
 800264a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800264c:	2300      	movs	r3, #0
}
 800264e:	4618      	mov	r0, r3
 8002650:	370c      	adds	r7, #12
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr
	...

0800265c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800265c:	b480      	push	{r7}
 800265e:	b089      	sub	sp, #36	; 0x24
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002666:	2300      	movs	r3, #0
 8002668:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800266a:	2300      	movs	r3, #0
 800266c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800266e:	2300      	movs	r3, #0
 8002670:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002672:	2300      	movs	r3, #0
 8002674:	61fb      	str	r3, [r7, #28]
 8002676:	e16b      	b.n	8002950 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002678:	2201      	movs	r2, #1
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	fa02 f303 	lsl.w	r3, r2, r3
 8002680:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	697a      	ldr	r2, [r7, #20]
 8002688:	4013      	ands	r3, r2
 800268a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800268c:	693a      	ldr	r2, [r7, #16]
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	429a      	cmp	r2, r3
 8002692:	f040 815a 	bne.w	800294a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f003 0303 	and.w	r3, r3, #3
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d005      	beq.n	80026ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d130      	bne.n	8002710 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	005b      	lsls	r3, r3, #1
 80026b8:	2203      	movs	r2, #3
 80026ba:	fa02 f303 	lsl.w	r3, r2, r3
 80026be:	43db      	mvns	r3, r3
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	4013      	ands	r3, r2
 80026c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	68da      	ldr	r2, [r3, #12]
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	005b      	lsls	r3, r3, #1
 80026ce:	fa02 f303 	lsl.w	r3, r2, r3
 80026d2:	69ba      	ldr	r2, [r7, #24]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	69ba      	ldr	r2, [r7, #24]
 80026dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026e4:	2201      	movs	r2, #1
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ec:	43db      	mvns	r3, r3
 80026ee:	69ba      	ldr	r2, [r7, #24]
 80026f0:	4013      	ands	r3, r2
 80026f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	091b      	lsrs	r3, r3, #4
 80026fa:	f003 0201 	and.w	r2, r3, #1
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	fa02 f303 	lsl.w	r3, r2, r3
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	4313      	orrs	r3, r2
 8002708:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	69ba      	ldr	r2, [r7, #24]
 800270e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f003 0303 	and.w	r3, r3, #3
 8002718:	2b03      	cmp	r3, #3
 800271a:	d017      	beq.n	800274c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	005b      	lsls	r3, r3, #1
 8002726:	2203      	movs	r2, #3
 8002728:	fa02 f303 	lsl.w	r3, r2, r3
 800272c:	43db      	mvns	r3, r3
 800272e:	69ba      	ldr	r2, [r7, #24]
 8002730:	4013      	ands	r3, r2
 8002732:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	689a      	ldr	r2, [r3, #8]
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	005b      	lsls	r3, r3, #1
 800273c:	fa02 f303 	lsl.w	r3, r2, r3
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	4313      	orrs	r3, r2
 8002744:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f003 0303 	and.w	r3, r3, #3
 8002754:	2b02      	cmp	r3, #2
 8002756:	d123      	bne.n	80027a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	08da      	lsrs	r2, r3, #3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	3208      	adds	r2, #8
 8002760:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002764:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	f003 0307 	and.w	r3, r3, #7
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	220f      	movs	r2, #15
 8002770:	fa02 f303 	lsl.w	r3, r2, r3
 8002774:	43db      	mvns	r3, r3
 8002776:	69ba      	ldr	r2, [r7, #24]
 8002778:	4013      	ands	r3, r2
 800277a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	691a      	ldr	r2, [r3, #16]
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	f003 0307 	and.w	r3, r3, #7
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	fa02 f303 	lsl.w	r3, r2, r3
 800278c:	69ba      	ldr	r2, [r7, #24]
 800278e:	4313      	orrs	r3, r2
 8002790:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	08da      	lsrs	r2, r3, #3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	3208      	adds	r2, #8
 800279a:	69b9      	ldr	r1, [r7, #24]
 800279c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	005b      	lsls	r3, r3, #1
 80027aa:	2203      	movs	r2, #3
 80027ac:	fa02 f303 	lsl.w	r3, r2, r3
 80027b0:	43db      	mvns	r3, r3
 80027b2:	69ba      	ldr	r2, [r7, #24]
 80027b4:	4013      	ands	r3, r2
 80027b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f003 0203 	and.w	r2, r3, #3
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	005b      	lsls	r3, r3, #1
 80027c4:	fa02 f303 	lsl.w	r3, r2, r3
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	f000 80b4 	beq.w	800294a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027e2:	2300      	movs	r3, #0
 80027e4:	60fb      	str	r3, [r7, #12]
 80027e6:	4b60      	ldr	r3, [pc, #384]	; (8002968 <HAL_GPIO_Init+0x30c>)
 80027e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ea:	4a5f      	ldr	r2, [pc, #380]	; (8002968 <HAL_GPIO_Init+0x30c>)
 80027ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027f0:	6453      	str	r3, [r2, #68]	; 0x44
 80027f2:	4b5d      	ldr	r3, [pc, #372]	; (8002968 <HAL_GPIO_Init+0x30c>)
 80027f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027fa:	60fb      	str	r3, [r7, #12]
 80027fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027fe:	4a5b      	ldr	r2, [pc, #364]	; (800296c <HAL_GPIO_Init+0x310>)
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	089b      	lsrs	r3, r3, #2
 8002804:	3302      	adds	r3, #2
 8002806:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800280a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	f003 0303 	and.w	r3, r3, #3
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	220f      	movs	r2, #15
 8002816:	fa02 f303 	lsl.w	r3, r2, r3
 800281a:	43db      	mvns	r3, r3
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	4013      	ands	r3, r2
 8002820:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4a52      	ldr	r2, [pc, #328]	; (8002970 <HAL_GPIO_Init+0x314>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d02b      	beq.n	8002882 <HAL_GPIO_Init+0x226>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a51      	ldr	r2, [pc, #324]	; (8002974 <HAL_GPIO_Init+0x318>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d025      	beq.n	800287e <HAL_GPIO_Init+0x222>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4a50      	ldr	r2, [pc, #320]	; (8002978 <HAL_GPIO_Init+0x31c>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d01f      	beq.n	800287a <HAL_GPIO_Init+0x21e>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4a4f      	ldr	r2, [pc, #316]	; (800297c <HAL_GPIO_Init+0x320>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d019      	beq.n	8002876 <HAL_GPIO_Init+0x21a>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a4e      	ldr	r2, [pc, #312]	; (8002980 <HAL_GPIO_Init+0x324>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d013      	beq.n	8002872 <HAL_GPIO_Init+0x216>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4a4d      	ldr	r2, [pc, #308]	; (8002984 <HAL_GPIO_Init+0x328>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d00d      	beq.n	800286e <HAL_GPIO_Init+0x212>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a4c      	ldr	r2, [pc, #304]	; (8002988 <HAL_GPIO_Init+0x32c>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d007      	beq.n	800286a <HAL_GPIO_Init+0x20e>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a4b      	ldr	r2, [pc, #300]	; (800298c <HAL_GPIO_Init+0x330>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d101      	bne.n	8002866 <HAL_GPIO_Init+0x20a>
 8002862:	2307      	movs	r3, #7
 8002864:	e00e      	b.n	8002884 <HAL_GPIO_Init+0x228>
 8002866:	2308      	movs	r3, #8
 8002868:	e00c      	b.n	8002884 <HAL_GPIO_Init+0x228>
 800286a:	2306      	movs	r3, #6
 800286c:	e00a      	b.n	8002884 <HAL_GPIO_Init+0x228>
 800286e:	2305      	movs	r3, #5
 8002870:	e008      	b.n	8002884 <HAL_GPIO_Init+0x228>
 8002872:	2304      	movs	r3, #4
 8002874:	e006      	b.n	8002884 <HAL_GPIO_Init+0x228>
 8002876:	2303      	movs	r3, #3
 8002878:	e004      	b.n	8002884 <HAL_GPIO_Init+0x228>
 800287a:	2302      	movs	r3, #2
 800287c:	e002      	b.n	8002884 <HAL_GPIO_Init+0x228>
 800287e:	2301      	movs	r3, #1
 8002880:	e000      	b.n	8002884 <HAL_GPIO_Init+0x228>
 8002882:	2300      	movs	r3, #0
 8002884:	69fa      	ldr	r2, [r7, #28]
 8002886:	f002 0203 	and.w	r2, r2, #3
 800288a:	0092      	lsls	r2, r2, #2
 800288c:	4093      	lsls	r3, r2
 800288e:	69ba      	ldr	r2, [r7, #24]
 8002890:	4313      	orrs	r3, r2
 8002892:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002894:	4935      	ldr	r1, [pc, #212]	; (800296c <HAL_GPIO_Init+0x310>)
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	089b      	lsrs	r3, r3, #2
 800289a:	3302      	adds	r3, #2
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028a2:	4b3b      	ldr	r3, [pc, #236]	; (8002990 <HAL_GPIO_Init+0x334>)
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	43db      	mvns	r3, r3
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	4013      	ands	r3, r2
 80028b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d003      	beq.n	80028c6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80028be:	69ba      	ldr	r2, [r7, #24]
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028c6:	4a32      	ldr	r2, [pc, #200]	; (8002990 <HAL_GPIO_Init+0x334>)
 80028c8:	69bb      	ldr	r3, [r7, #24]
 80028ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028cc:	4b30      	ldr	r3, [pc, #192]	; (8002990 <HAL_GPIO_Init+0x334>)
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	43db      	mvns	r3, r3
 80028d6:	69ba      	ldr	r2, [r7, #24]
 80028d8:	4013      	ands	r3, r2
 80028da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d003      	beq.n	80028f0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028f0:	4a27      	ldr	r2, [pc, #156]	; (8002990 <HAL_GPIO_Init+0x334>)
 80028f2:	69bb      	ldr	r3, [r7, #24]
 80028f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80028f6:	4b26      	ldr	r3, [pc, #152]	; (8002990 <HAL_GPIO_Init+0x334>)
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	43db      	mvns	r3, r3
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	4013      	ands	r3, r2
 8002904:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d003      	beq.n	800291a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002912:	69ba      	ldr	r2, [r7, #24]
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	4313      	orrs	r3, r2
 8002918:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800291a:	4a1d      	ldr	r2, [pc, #116]	; (8002990 <HAL_GPIO_Init+0x334>)
 800291c:	69bb      	ldr	r3, [r7, #24]
 800291e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002920:	4b1b      	ldr	r3, [pc, #108]	; (8002990 <HAL_GPIO_Init+0x334>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	43db      	mvns	r3, r3
 800292a:	69ba      	ldr	r2, [r7, #24]
 800292c:	4013      	ands	r3, r2
 800292e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002938:	2b00      	cmp	r3, #0
 800293a:	d003      	beq.n	8002944 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	4313      	orrs	r3, r2
 8002942:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002944:	4a12      	ldr	r2, [pc, #72]	; (8002990 <HAL_GPIO_Init+0x334>)
 8002946:	69bb      	ldr	r3, [r7, #24]
 8002948:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	3301      	adds	r3, #1
 800294e:	61fb      	str	r3, [r7, #28]
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	2b0f      	cmp	r3, #15
 8002954:	f67f ae90 	bls.w	8002678 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002958:	bf00      	nop
 800295a:	bf00      	nop
 800295c:	3724      	adds	r7, #36	; 0x24
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	40023800 	.word	0x40023800
 800296c:	40013800 	.word	0x40013800
 8002970:	40020000 	.word	0x40020000
 8002974:	40020400 	.word	0x40020400
 8002978:	40020800 	.word	0x40020800
 800297c:	40020c00 	.word	0x40020c00
 8002980:	40021000 	.word	0x40021000
 8002984:	40021400 	.word	0x40021400
 8002988:	40021800 	.word	0x40021800
 800298c:	40021c00 	.word	0x40021c00
 8002990:	40013c00 	.word	0x40013c00

08002994 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	460b      	mov	r3, r1
 800299e:	807b      	strh	r3, [r7, #2]
 80029a0:	4613      	mov	r3, r2
 80029a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029a4:	787b      	ldrb	r3, [r7, #1]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d003      	beq.n	80029b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029aa:	887a      	ldrh	r2, [r7, #2]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80029b0:	e003      	b.n	80029ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80029b2:	887b      	ldrh	r3, [r7, #2]
 80029b4:	041a      	lsls	r2, r3, #16
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	619a      	str	r2, [r3, #24]
}
 80029ba:	bf00      	nop
 80029bc:	370c      	adds	r7, #12
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr

080029c6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80029c6:	b480      	push	{r7}
 80029c8:	b085      	sub	sp, #20
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]
 80029ce:	460b      	mov	r3, r1
 80029d0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	695b      	ldr	r3, [r3, #20]
 80029d6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80029d8:	887a      	ldrh	r2, [r7, #2]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	4013      	ands	r3, r2
 80029de:	041a      	lsls	r2, r3, #16
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	43d9      	mvns	r1, r3
 80029e4:	887b      	ldrh	r3, [r7, #2]
 80029e6:	400b      	ands	r3, r1
 80029e8:	431a      	orrs	r2, r3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	619a      	str	r2, [r3, #24]
}
 80029ee:	bf00      	nop
 80029f0:	3714      	adds	r7, #20
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr
	...

080029fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d101      	bne.n	8002a0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e12b      	b.n	8002c66 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d106      	bne.n	8002a28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f7ff f976 	bl	8001d14 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2224      	movs	r2, #36	; 0x24
 8002a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f022 0201 	bic.w	r2, r2, #1
 8002a3e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a4e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a5e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a60:	f001 fbba 	bl	80041d8 <HAL_RCC_GetPCLK1Freq>
 8002a64:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	4a81      	ldr	r2, [pc, #516]	; (8002c70 <HAL_I2C_Init+0x274>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d807      	bhi.n	8002a80 <HAL_I2C_Init+0x84>
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	4a80      	ldr	r2, [pc, #512]	; (8002c74 <HAL_I2C_Init+0x278>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	bf94      	ite	ls
 8002a78:	2301      	movls	r3, #1
 8002a7a:	2300      	movhi	r3, #0
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	e006      	b.n	8002a8e <HAL_I2C_Init+0x92>
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	4a7d      	ldr	r2, [pc, #500]	; (8002c78 <HAL_I2C_Init+0x27c>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	bf94      	ite	ls
 8002a88:	2301      	movls	r3, #1
 8002a8a:	2300      	movhi	r3, #0
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d001      	beq.n	8002a96 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e0e7      	b.n	8002c66 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	4a78      	ldr	r2, [pc, #480]	; (8002c7c <HAL_I2C_Init+0x280>)
 8002a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a9e:	0c9b      	lsrs	r3, r3, #18
 8002aa0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	68ba      	ldr	r2, [r7, #8]
 8002ab2:	430a      	orrs	r2, r1
 8002ab4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	6a1b      	ldr	r3, [r3, #32]
 8002abc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	4a6a      	ldr	r2, [pc, #424]	; (8002c70 <HAL_I2C_Init+0x274>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d802      	bhi.n	8002ad0 <HAL_I2C_Init+0xd4>
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	3301      	adds	r3, #1
 8002ace:	e009      	b.n	8002ae4 <HAL_I2C_Init+0xe8>
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002ad6:	fb02 f303 	mul.w	r3, r2, r3
 8002ada:	4a69      	ldr	r2, [pc, #420]	; (8002c80 <HAL_I2C_Init+0x284>)
 8002adc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae0:	099b      	lsrs	r3, r3, #6
 8002ae2:	3301      	adds	r3, #1
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	6812      	ldr	r2, [r2, #0]
 8002ae8:	430b      	orrs	r3, r1
 8002aea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	69db      	ldr	r3, [r3, #28]
 8002af2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002af6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	495c      	ldr	r1, [pc, #368]	; (8002c70 <HAL_I2C_Init+0x274>)
 8002b00:	428b      	cmp	r3, r1
 8002b02:	d819      	bhi.n	8002b38 <HAL_I2C_Init+0x13c>
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	1e59      	subs	r1, r3, #1
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	005b      	lsls	r3, r3, #1
 8002b0e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b12:	1c59      	adds	r1, r3, #1
 8002b14:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002b18:	400b      	ands	r3, r1
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d00a      	beq.n	8002b34 <HAL_I2C_Init+0x138>
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	1e59      	subs	r1, r3, #1
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	005b      	lsls	r3, r3, #1
 8002b28:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b2c:	3301      	adds	r3, #1
 8002b2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b32:	e051      	b.n	8002bd8 <HAL_I2C_Init+0x1dc>
 8002b34:	2304      	movs	r3, #4
 8002b36:	e04f      	b.n	8002bd8 <HAL_I2C_Init+0x1dc>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d111      	bne.n	8002b64 <HAL_I2C_Init+0x168>
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	1e58      	subs	r0, r3, #1
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6859      	ldr	r1, [r3, #4]
 8002b48:	460b      	mov	r3, r1
 8002b4a:	005b      	lsls	r3, r3, #1
 8002b4c:	440b      	add	r3, r1
 8002b4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b52:	3301      	adds	r3, #1
 8002b54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	bf0c      	ite	eq
 8002b5c:	2301      	moveq	r3, #1
 8002b5e:	2300      	movne	r3, #0
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	e012      	b.n	8002b8a <HAL_I2C_Init+0x18e>
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	1e58      	subs	r0, r3, #1
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6859      	ldr	r1, [r3, #4]
 8002b6c:	460b      	mov	r3, r1
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	440b      	add	r3, r1
 8002b72:	0099      	lsls	r1, r3, #2
 8002b74:	440b      	add	r3, r1
 8002b76:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	bf0c      	ite	eq
 8002b84:	2301      	moveq	r3, #1
 8002b86:	2300      	movne	r3, #0
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d001      	beq.n	8002b92 <HAL_I2C_Init+0x196>
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e022      	b.n	8002bd8 <HAL_I2C_Init+0x1dc>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d10e      	bne.n	8002bb8 <HAL_I2C_Init+0x1bc>
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	1e58      	subs	r0, r3, #1
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6859      	ldr	r1, [r3, #4]
 8002ba2:	460b      	mov	r3, r1
 8002ba4:	005b      	lsls	r3, r3, #1
 8002ba6:	440b      	add	r3, r1
 8002ba8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bac:	3301      	adds	r3, #1
 8002bae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002bb6:	e00f      	b.n	8002bd8 <HAL_I2C_Init+0x1dc>
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	1e58      	subs	r0, r3, #1
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6859      	ldr	r1, [r3, #4]
 8002bc0:	460b      	mov	r3, r1
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	440b      	add	r3, r1
 8002bc6:	0099      	lsls	r1, r3, #2
 8002bc8:	440b      	add	r3, r1
 8002bca:	fbb0 f3f3 	udiv	r3, r0, r3
 8002bce:	3301      	adds	r3, #1
 8002bd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bd4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002bd8:	6879      	ldr	r1, [r7, #4]
 8002bda:	6809      	ldr	r1, [r1, #0]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	69da      	ldr	r2, [r3, #28]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6a1b      	ldr	r3, [r3, #32]
 8002bf2:	431a      	orrs	r2, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	430a      	orrs	r2, r1
 8002bfa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002c06:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	6911      	ldr	r1, [r2, #16]
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	68d2      	ldr	r2, [r2, #12]
 8002c12:	4311      	orrs	r1, r2
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	6812      	ldr	r2, [r2, #0]
 8002c18:	430b      	orrs	r3, r1
 8002c1a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	695a      	ldr	r2, [r3, #20]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	699b      	ldr	r3, [r3, #24]
 8002c2e:	431a      	orrs	r2, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	430a      	orrs	r2, r1
 8002c36:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f042 0201 	orr.w	r2, r2, #1
 8002c46:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2220      	movs	r2, #32
 8002c52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3710      	adds	r7, #16
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	000186a0 	.word	0x000186a0
 8002c74:	001e847f 	.word	0x001e847f
 8002c78:	003d08ff 	.word	0x003d08ff
 8002c7c:	431bde83 	.word	0x431bde83
 8002c80:	10624dd3 	.word	0x10624dd3

08002c84 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b088      	sub	sp, #32
 8002c88:	af02      	add	r7, sp, #8
 8002c8a:	60f8      	str	r0, [r7, #12]
 8002c8c:	607a      	str	r2, [r7, #4]
 8002c8e:	461a      	mov	r2, r3
 8002c90:	460b      	mov	r3, r1
 8002c92:	817b      	strh	r3, [r7, #10]
 8002c94:	4613      	mov	r3, r2
 8002c96:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c98:	f7ff fb0c 	bl	80022b4 <HAL_GetTick>
 8002c9c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	2b20      	cmp	r3, #32
 8002ca8:	f040 80e0 	bne.w	8002e6c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	9300      	str	r3, [sp, #0]
 8002cb0:	2319      	movs	r3, #25
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	4970      	ldr	r1, [pc, #448]	; (8002e78 <HAL_I2C_Master_Transmit+0x1f4>)
 8002cb6:	68f8      	ldr	r0, [r7, #12]
 8002cb8:	f000 fc58 	bl	800356c <I2C_WaitOnFlagUntilTimeout>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d001      	beq.n	8002cc6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002cc2:	2302      	movs	r3, #2
 8002cc4:	e0d3      	b.n	8002e6e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d101      	bne.n	8002cd4 <HAL_I2C_Master_Transmit+0x50>
 8002cd0:	2302      	movs	r3, #2
 8002cd2:	e0cc      	b.n	8002e6e <HAL_I2C_Master_Transmit+0x1ea>
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0301 	and.w	r3, r3, #1
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d007      	beq.n	8002cfa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f042 0201 	orr.w	r2, r2, #1
 8002cf8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d08:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2221      	movs	r2, #33	; 0x21
 8002d0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2210      	movs	r2, #16
 8002d16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	893a      	ldrh	r2, [r7, #8]
 8002d2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d30:	b29a      	uxth	r2, r3
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	4a50      	ldr	r2, [pc, #320]	; (8002e7c <HAL_I2C_Master_Transmit+0x1f8>)
 8002d3a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002d3c:	8979      	ldrh	r1, [r7, #10]
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	6a3a      	ldr	r2, [r7, #32]
 8002d42:	68f8      	ldr	r0, [r7, #12]
 8002d44:	f000 fac2 	bl	80032cc <I2C_MasterRequestWrite>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d001      	beq.n	8002d52 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e08d      	b.n	8002e6e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d52:	2300      	movs	r3, #0
 8002d54:	613b      	str	r3, [r7, #16]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	695b      	ldr	r3, [r3, #20]
 8002d5c:	613b      	str	r3, [r7, #16]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	699b      	ldr	r3, [r3, #24]
 8002d64:	613b      	str	r3, [r7, #16]
 8002d66:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002d68:	e066      	b.n	8002e38 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d6a:	697a      	ldr	r2, [r7, #20]
 8002d6c:	6a39      	ldr	r1, [r7, #32]
 8002d6e:	68f8      	ldr	r0, [r7, #12]
 8002d70:	f000 fcd2 	bl	8003718 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d00d      	beq.n	8002d96 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7e:	2b04      	cmp	r3, #4
 8002d80:	d107      	bne.n	8002d92 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d90:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e06b      	b.n	8002e6e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9a:	781a      	ldrb	r2, [r3, #0]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da6:	1c5a      	adds	r2, r3, #1
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002db0:	b29b      	uxth	r3, r3
 8002db2:	3b01      	subs	r3, #1
 8002db4:	b29a      	uxth	r2, r3
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dbe:	3b01      	subs	r3, #1
 8002dc0:	b29a      	uxth	r2, r3
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	695b      	ldr	r3, [r3, #20]
 8002dcc:	f003 0304 	and.w	r3, r3, #4
 8002dd0:	2b04      	cmp	r3, #4
 8002dd2:	d11b      	bne.n	8002e0c <HAL_I2C_Master_Transmit+0x188>
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d017      	beq.n	8002e0c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de0:	781a      	ldrb	r2, [r3, #0]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dec:	1c5a      	adds	r2, r3, #1
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	3b01      	subs	r3, #1
 8002dfa:	b29a      	uxth	r2, r3
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e04:	3b01      	subs	r3, #1
 8002e06:	b29a      	uxth	r2, r3
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e0c:	697a      	ldr	r2, [r7, #20]
 8002e0e:	6a39      	ldr	r1, [r7, #32]
 8002e10:	68f8      	ldr	r0, [r7, #12]
 8002e12:	f000 fcc2 	bl	800379a <I2C_WaitOnBTFFlagUntilTimeout>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d00d      	beq.n	8002e38 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e20:	2b04      	cmp	r3, #4
 8002e22:	d107      	bne.n	8002e34 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e32:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e01a      	b.n	8002e6e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d194      	bne.n	8002d6a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2220      	movs	r2, #32
 8002e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	e000      	b.n	8002e6e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002e6c:	2302      	movs	r3, #2
  }
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3718      	adds	r7, #24
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	00100002 	.word	0x00100002
 8002e7c:	ffff0000 	.word	0xffff0000

08002e80 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b08c      	sub	sp, #48	; 0x30
 8002e84:	af02      	add	r7, sp, #8
 8002e86:	60f8      	str	r0, [r7, #12]
 8002e88:	607a      	str	r2, [r7, #4]
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	460b      	mov	r3, r1
 8002e8e:	817b      	strh	r3, [r7, #10]
 8002e90:	4613      	mov	r3, r2
 8002e92:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e94:	f7ff fa0e 	bl	80022b4 <HAL_GetTick>
 8002e98:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	2b20      	cmp	r3, #32
 8002ea4:	f040 820b 	bne.w	80032be <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eaa:	9300      	str	r3, [sp, #0]
 8002eac:	2319      	movs	r3, #25
 8002eae:	2201      	movs	r2, #1
 8002eb0:	497c      	ldr	r1, [pc, #496]	; (80030a4 <HAL_I2C_Master_Receive+0x224>)
 8002eb2:	68f8      	ldr	r0, [r7, #12]
 8002eb4:	f000 fb5a 	bl	800356c <I2C_WaitOnFlagUntilTimeout>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d001      	beq.n	8002ec2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002ebe:	2302      	movs	r3, #2
 8002ec0:	e1fe      	b.n	80032c0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d101      	bne.n	8002ed0 <HAL_I2C_Master_Receive+0x50>
 8002ecc:	2302      	movs	r3, #2
 8002ece:	e1f7      	b.n	80032c0 <HAL_I2C_Master_Receive+0x440>
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0301 	and.w	r3, r3, #1
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d007      	beq.n	8002ef6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f042 0201 	orr.w	r2, r2, #1
 8002ef4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f04:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2222      	movs	r2, #34	; 0x22
 8002f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2210      	movs	r2, #16
 8002f12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	893a      	ldrh	r2, [r7, #8]
 8002f26:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f2c:	b29a      	uxth	r2, r3
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	4a5c      	ldr	r2, [pc, #368]	; (80030a8 <HAL_I2C_Master_Receive+0x228>)
 8002f36:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002f38:	8979      	ldrh	r1, [r7, #10]
 8002f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f3e:	68f8      	ldr	r0, [r7, #12]
 8002f40:	f000 fa46 	bl	80033d0 <I2C_MasterRequestRead>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d001      	beq.n	8002f4e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e1b8      	b.n	80032c0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d113      	bne.n	8002f7e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f56:	2300      	movs	r3, #0
 8002f58:	623b      	str	r3, [r7, #32]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	695b      	ldr	r3, [r3, #20]
 8002f60:	623b      	str	r3, [r7, #32]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	699b      	ldr	r3, [r3, #24]
 8002f68:	623b      	str	r3, [r7, #32]
 8002f6a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f7a:	601a      	str	r2, [r3, #0]
 8002f7c:	e18c      	b.n	8003298 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d11b      	bne.n	8002fbe <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f94:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f96:	2300      	movs	r3, #0
 8002f98:	61fb      	str	r3, [r7, #28]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	695b      	ldr	r3, [r3, #20]
 8002fa0:	61fb      	str	r3, [r7, #28]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	699b      	ldr	r3, [r3, #24]
 8002fa8:	61fb      	str	r3, [r7, #28]
 8002faa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fba:	601a      	str	r2, [r3, #0]
 8002fbc:	e16c      	b.n	8003298 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d11b      	bne.n	8002ffe <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fd4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fe4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	61bb      	str	r3, [r7, #24]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	695b      	ldr	r3, [r3, #20]
 8002ff0:	61bb      	str	r3, [r7, #24]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	699b      	ldr	r3, [r3, #24]
 8002ff8:	61bb      	str	r3, [r7, #24]
 8002ffa:	69bb      	ldr	r3, [r7, #24]
 8002ffc:	e14c      	b.n	8003298 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800300c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800300e:	2300      	movs	r3, #0
 8003010:	617b      	str	r3, [r7, #20]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	695b      	ldr	r3, [r3, #20]
 8003018:	617b      	str	r3, [r7, #20]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	699b      	ldr	r3, [r3, #24]
 8003020:	617b      	str	r3, [r7, #20]
 8003022:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003024:	e138      	b.n	8003298 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800302a:	2b03      	cmp	r3, #3
 800302c:	f200 80f1 	bhi.w	8003212 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003034:	2b01      	cmp	r3, #1
 8003036:	d123      	bne.n	8003080 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003038:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800303a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800303c:	68f8      	ldr	r0, [r7, #12]
 800303e:	f000 fbed 	bl	800381c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003042:	4603      	mov	r3, r0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d001      	beq.n	800304c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e139      	b.n	80032c0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	691a      	ldr	r2, [r3, #16]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003056:	b2d2      	uxtb	r2, r2
 8003058:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305e:	1c5a      	adds	r2, r3, #1
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003068:	3b01      	subs	r3, #1
 800306a:	b29a      	uxth	r2, r3
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003074:	b29b      	uxth	r3, r3
 8003076:	3b01      	subs	r3, #1
 8003078:	b29a      	uxth	r2, r3
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800307e:	e10b      	b.n	8003298 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003084:	2b02      	cmp	r3, #2
 8003086:	d14e      	bne.n	8003126 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308a:	9300      	str	r3, [sp, #0]
 800308c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800308e:	2200      	movs	r2, #0
 8003090:	4906      	ldr	r1, [pc, #24]	; (80030ac <HAL_I2C_Master_Receive+0x22c>)
 8003092:	68f8      	ldr	r0, [r7, #12]
 8003094:	f000 fa6a 	bl	800356c <I2C_WaitOnFlagUntilTimeout>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d008      	beq.n	80030b0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e10e      	b.n	80032c0 <HAL_I2C_Master_Receive+0x440>
 80030a2:	bf00      	nop
 80030a4:	00100002 	.word	0x00100002
 80030a8:	ffff0000 	.word	0xffff0000
 80030ac:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	691a      	ldr	r2, [r3, #16]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ca:	b2d2      	uxtb	r2, r2
 80030cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d2:	1c5a      	adds	r2, r3, #1
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030dc:	3b01      	subs	r3, #1
 80030de:	b29a      	uxth	r2, r3
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	3b01      	subs	r3, #1
 80030ec:	b29a      	uxth	r2, r3
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	691a      	ldr	r2, [r3, #16]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030fc:	b2d2      	uxtb	r2, r2
 80030fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003104:	1c5a      	adds	r2, r3, #1
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800310e:	3b01      	subs	r3, #1
 8003110:	b29a      	uxth	r2, r3
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800311a:	b29b      	uxth	r3, r3
 800311c:	3b01      	subs	r3, #1
 800311e:	b29a      	uxth	r2, r3
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003124:	e0b8      	b.n	8003298 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003128:	9300      	str	r3, [sp, #0]
 800312a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800312c:	2200      	movs	r2, #0
 800312e:	4966      	ldr	r1, [pc, #408]	; (80032c8 <HAL_I2C_Master_Receive+0x448>)
 8003130:	68f8      	ldr	r0, [r7, #12]
 8003132:	f000 fa1b 	bl	800356c <I2C_WaitOnFlagUntilTimeout>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d001      	beq.n	8003140 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e0bf      	b.n	80032c0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800314e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	691a      	ldr	r2, [r3, #16]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315a:	b2d2      	uxtb	r2, r2
 800315c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003162:	1c5a      	adds	r2, r3, #1
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800316c:	3b01      	subs	r3, #1
 800316e:	b29a      	uxth	r2, r3
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003178:	b29b      	uxth	r3, r3
 800317a:	3b01      	subs	r3, #1
 800317c:	b29a      	uxth	r2, r3
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003184:	9300      	str	r3, [sp, #0]
 8003186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003188:	2200      	movs	r2, #0
 800318a:	494f      	ldr	r1, [pc, #316]	; (80032c8 <HAL_I2C_Master_Receive+0x448>)
 800318c:	68f8      	ldr	r0, [r7, #12]
 800318e:	f000 f9ed 	bl	800356c <I2C_WaitOnFlagUntilTimeout>
 8003192:	4603      	mov	r3, r0
 8003194:	2b00      	cmp	r3, #0
 8003196:	d001      	beq.n	800319c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e091      	b.n	80032c0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	691a      	ldr	r2, [r3, #16]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b6:	b2d2      	uxtb	r2, r2
 80031b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031be:	1c5a      	adds	r2, r3, #1
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031c8:	3b01      	subs	r3, #1
 80031ca:	b29a      	uxth	r2, r3
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	3b01      	subs	r3, #1
 80031d8:	b29a      	uxth	r2, r3
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	691a      	ldr	r2, [r3, #16]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e8:	b2d2      	uxtb	r2, r2
 80031ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f0:	1c5a      	adds	r2, r3, #1
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031fa:	3b01      	subs	r3, #1
 80031fc:	b29a      	uxth	r2, r3
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003206:	b29b      	uxth	r3, r3
 8003208:	3b01      	subs	r3, #1
 800320a:	b29a      	uxth	r2, r3
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003210:	e042      	b.n	8003298 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003212:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003214:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003216:	68f8      	ldr	r0, [r7, #12]
 8003218:	f000 fb00 	bl	800381c <I2C_WaitOnRXNEFlagUntilTimeout>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d001      	beq.n	8003226 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e04c      	b.n	80032c0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	691a      	ldr	r2, [r3, #16]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003230:	b2d2      	uxtb	r2, r2
 8003232:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003238:	1c5a      	adds	r2, r3, #1
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003242:	3b01      	subs	r3, #1
 8003244:	b29a      	uxth	r2, r3
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800324e:	b29b      	uxth	r3, r3
 8003250:	3b01      	subs	r3, #1
 8003252:	b29a      	uxth	r2, r3
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	695b      	ldr	r3, [r3, #20]
 800325e:	f003 0304 	and.w	r3, r3, #4
 8003262:	2b04      	cmp	r3, #4
 8003264:	d118      	bne.n	8003298 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	691a      	ldr	r2, [r3, #16]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003270:	b2d2      	uxtb	r2, r2
 8003272:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003278:	1c5a      	adds	r2, r3, #1
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003282:	3b01      	subs	r3, #1
 8003284:	b29a      	uxth	r2, r3
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800328e:	b29b      	uxth	r3, r3
 8003290:	3b01      	subs	r3, #1
 8003292:	b29a      	uxth	r2, r3
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800329c:	2b00      	cmp	r3, #0
 800329e:	f47f aec2 	bne.w	8003026 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2220      	movs	r2, #32
 80032a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2200      	movs	r2, #0
 80032ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2200      	movs	r2, #0
 80032b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80032ba:	2300      	movs	r3, #0
 80032bc:	e000      	b.n	80032c0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80032be:	2302      	movs	r3, #2
  }
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3728      	adds	r7, #40	; 0x28
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	00010004 	.word	0x00010004

080032cc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b088      	sub	sp, #32
 80032d0:	af02      	add	r7, sp, #8
 80032d2:	60f8      	str	r0, [r7, #12]
 80032d4:	607a      	str	r2, [r7, #4]
 80032d6:	603b      	str	r3, [r7, #0]
 80032d8:	460b      	mov	r3, r1
 80032da:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	2b08      	cmp	r3, #8
 80032e6:	d006      	beq.n	80032f6 <I2C_MasterRequestWrite+0x2a>
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d003      	beq.n	80032f6 <I2C_MasterRequestWrite+0x2a>
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80032f4:	d108      	bne.n	8003308 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003304:	601a      	str	r2, [r3, #0]
 8003306:	e00b      	b.n	8003320 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330c:	2b12      	cmp	r3, #18
 800330e:	d107      	bne.n	8003320 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800331e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	9300      	str	r3, [sp, #0]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800332c:	68f8      	ldr	r0, [r7, #12]
 800332e:	f000 f91d 	bl	800356c <I2C_WaitOnFlagUntilTimeout>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	d00d      	beq.n	8003354 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003342:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003346:	d103      	bne.n	8003350 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800334e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003350:	2303      	movs	r3, #3
 8003352:	e035      	b.n	80033c0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	691b      	ldr	r3, [r3, #16]
 8003358:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800335c:	d108      	bne.n	8003370 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800335e:	897b      	ldrh	r3, [r7, #10]
 8003360:	b2db      	uxtb	r3, r3
 8003362:	461a      	mov	r2, r3
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800336c:	611a      	str	r2, [r3, #16]
 800336e:	e01b      	b.n	80033a8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003370:	897b      	ldrh	r3, [r7, #10]
 8003372:	11db      	asrs	r3, r3, #7
 8003374:	b2db      	uxtb	r3, r3
 8003376:	f003 0306 	and.w	r3, r3, #6
 800337a:	b2db      	uxtb	r3, r3
 800337c:	f063 030f 	orn	r3, r3, #15
 8003380:	b2da      	uxtb	r2, r3
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	490e      	ldr	r1, [pc, #56]	; (80033c8 <I2C_MasterRequestWrite+0xfc>)
 800338e:	68f8      	ldr	r0, [r7, #12]
 8003390:	f000 f943 	bl	800361a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d001      	beq.n	800339e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e010      	b.n	80033c0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800339e:	897b      	ldrh	r3, [r7, #10]
 80033a0:	b2da      	uxtb	r2, r3
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	4907      	ldr	r1, [pc, #28]	; (80033cc <I2C_MasterRequestWrite+0x100>)
 80033ae:	68f8      	ldr	r0, [r7, #12]
 80033b0:	f000 f933 	bl	800361a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d001      	beq.n	80033be <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e000      	b.n	80033c0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80033be:	2300      	movs	r3, #0
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3718      	adds	r7, #24
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}
 80033c8:	00010008 	.word	0x00010008
 80033cc:	00010002 	.word	0x00010002

080033d0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b088      	sub	sp, #32
 80033d4:	af02      	add	r7, sp, #8
 80033d6:	60f8      	str	r0, [r7, #12]
 80033d8:	607a      	str	r2, [r7, #4]
 80033da:	603b      	str	r3, [r7, #0]
 80033dc:	460b      	mov	r3, r1
 80033de:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80033f4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	2b08      	cmp	r3, #8
 80033fa:	d006      	beq.n	800340a <I2C_MasterRequestRead+0x3a>
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d003      	beq.n	800340a <I2C_MasterRequestRead+0x3a>
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003408:	d108      	bne.n	800341c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003418:	601a      	str	r2, [r3, #0]
 800341a:	e00b      	b.n	8003434 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003420:	2b11      	cmp	r3, #17
 8003422:	d107      	bne.n	8003434 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003432:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	9300      	str	r3, [sp, #0]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003440:	68f8      	ldr	r0, [r7, #12]
 8003442:	f000 f893 	bl	800356c <I2C_WaitOnFlagUntilTimeout>
 8003446:	4603      	mov	r3, r0
 8003448:	2b00      	cmp	r3, #0
 800344a:	d00d      	beq.n	8003468 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003456:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800345a:	d103      	bne.n	8003464 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003462:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003464:	2303      	movs	r3, #3
 8003466:	e079      	b.n	800355c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	691b      	ldr	r3, [r3, #16]
 800346c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003470:	d108      	bne.n	8003484 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003472:	897b      	ldrh	r3, [r7, #10]
 8003474:	b2db      	uxtb	r3, r3
 8003476:	f043 0301 	orr.w	r3, r3, #1
 800347a:	b2da      	uxtb	r2, r3
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	611a      	str	r2, [r3, #16]
 8003482:	e05f      	b.n	8003544 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003484:	897b      	ldrh	r3, [r7, #10]
 8003486:	11db      	asrs	r3, r3, #7
 8003488:	b2db      	uxtb	r3, r3
 800348a:	f003 0306 	and.w	r3, r3, #6
 800348e:	b2db      	uxtb	r3, r3
 8003490:	f063 030f 	orn	r3, r3, #15
 8003494:	b2da      	uxtb	r2, r3
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	4930      	ldr	r1, [pc, #192]	; (8003564 <I2C_MasterRequestRead+0x194>)
 80034a2:	68f8      	ldr	r0, [r7, #12]
 80034a4:	f000 f8b9 	bl	800361a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d001      	beq.n	80034b2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e054      	b.n	800355c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80034b2:	897b      	ldrh	r3, [r7, #10]
 80034b4:	b2da      	uxtb	r2, r3
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	4929      	ldr	r1, [pc, #164]	; (8003568 <I2C_MasterRequestRead+0x198>)
 80034c2:	68f8      	ldr	r0, [r7, #12]
 80034c4:	f000 f8a9 	bl	800361a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80034c8:	4603      	mov	r3, r0
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d001      	beq.n	80034d2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e044      	b.n	800355c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034d2:	2300      	movs	r3, #0
 80034d4:	613b      	str	r3, [r7, #16]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	695b      	ldr	r3, [r3, #20]
 80034dc:	613b      	str	r3, [r7, #16]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	699b      	ldr	r3, [r3, #24]
 80034e4:	613b      	str	r3, [r7, #16]
 80034e6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034f6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	9300      	str	r3, [sp, #0]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003504:	68f8      	ldr	r0, [r7, #12]
 8003506:	f000 f831 	bl	800356c <I2C_WaitOnFlagUntilTimeout>
 800350a:	4603      	mov	r3, r0
 800350c:	2b00      	cmp	r3, #0
 800350e:	d00d      	beq.n	800352c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800351a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800351e:	d103      	bne.n	8003528 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003526:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003528:	2303      	movs	r3, #3
 800352a:	e017      	b.n	800355c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800352c:	897b      	ldrh	r3, [r7, #10]
 800352e:	11db      	asrs	r3, r3, #7
 8003530:	b2db      	uxtb	r3, r3
 8003532:	f003 0306 	and.w	r3, r3, #6
 8003536:	b2db      	uxtb	r3, r3
 8003538:	f063 030e 	orn	r3, r3, #14
 800353c:	b2da      	uxtb	r2, r3
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	4907      	ldr	r1, [pc, #28]	; (8003568 <I2C_MasterRequestRead+0x198>)
 800354a:	68f8      	ldr	r0, [r7, #12]
 800354c:	f000 f865 	bl	800361a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d001      	beq.n	800355a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e000      	b.n	800355c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800355a:	2300      	movs	r3, #0
}
 800355c:	4618      	mov	r0, r3
 800355e:	3718      	adds	r7, #24
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}
 8003564:	00010008 	.word	0x00010008
 8003568:	00010002 	.word	0x00010002

0800356c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b084      	sub	sp, #16
 8003570:	af00      	add	r7, sp, #0
 8003572:	60f8      	str	r0, [r7, #12]
 8003574:	60b9      	str	r1, [r7, #8]
 8003576:	603b      	str	r3, [r7, #0]
 8003578:	4613      	mov	r3, r2
 800357a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800357c:	e025      	b.n	80035ca <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003584:	d021      	beq.n	80035ca <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003586:	f7fe fe95 	bl	80022b4 <HAL_GetTick>
 800358a:	4602      	mov	r2, r0
 800358c:	69bb      	ldr	r3, [r7, #24]
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	683a      	ldr	r2, [r7, #0]
 8003592:	429a      	cmp	r2, r3
 8003594:	d302      	bcc.n	800359c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d116      	bne.n	80035ca <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2200      	movs	r2, #0
 80035a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2220      	movs	r2, #32
 80035a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2200      	movs	r2, #0
 80035ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b6:	f043 0220 	orr.w	r2, r3, #32
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2200      	movs	r2, #0
 80035c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e023      	b.n	8003612 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	0c1b      	lsrs	r3, r3, #16
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d10d      	bne.n	80035f0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	695b      	ldr	r3, [r3, #20]
 80035da:	43da      	mvns	r2, r3
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	4013      	ands	r3, r2
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	bf0c      	ite	eq
 80035e6:	2301      	moveq	r3, #1
 80035e8:	2300      	movne	r3, #0
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	461a      	mov	r2, r3
 80035ee:	e00c      	b.n	800360a <I2C_WaitOnFlagUntilTimeout+0x9e>
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	699b      	ldr	r3, [r3, #24]
 80035f6:	43da      	mvns	r2, r3
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	4013      	ands	r3, r2
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	2b00      	cmp	r3, #0
 8003600:	bf0c      	ite	eq
 8003602:	2301      	moveq	r3, #1
 8003604:	2300      	movne	r3, #0
 8003606:	b2db      	uxtb	r3, r3
 8003608:	461a      	mov	r2, r3
 800360a:	79fb      	ldrb	r3, [r7, #7]
 800360c:	429a      	cmp	r2, r3
 800360e:	d0b6      	beq.n	800357e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003610:	2300      	movs	r3, #0
}
 8003612:	4618      	mov	r0, r3
 8003614:	3710      	adds	r7, #16
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}

0800361a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800361a:	b580      	push	{r7, lr}
 800361c:	b084      	sub	sp, #16
 800361e:	af00      	add	r7, sp, #0
 8003620:	60f8      	str	r0, [r7, #12]
 8003622:	60b9      	str	r1, [r7, #8]
 8003624:	607a      	str	r2, [r7, #4]
 8003626:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003628:	e051      	b.n	80036ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	695b      	ldr	r3, [r3, #20]
 8003630:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003634:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003638:	d123      	bne.n	8003682 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003648:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003652:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2200      	movs	r2, #0
 8003658:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2220      	movs	r2, #32
 800365e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2200      	movs	r2, #0
 8003666:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366e:	f043 0204 	orr.w	r2, r3, #4
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2200      	movs	r2, #0
 800367a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e046      	b.n	8003710 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003688:	d021      	beq.n	80036ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800368a:	f7fe fe13 	bl	80022b4 <HAL_GetTick>
 800368e:	4602      	mov	r2, r0
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	429a      	cmp	r2, r3
 8003698:	d302      	bcc.n	80036a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d116      	bne.n	80036ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2200      	movs	r2, #0
 80036a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2220      	movs	r2, #32
 80036aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2200      	movs	r2, #0
 80036b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ba:	f043 0220 	orr.w	r2, r3, #32
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e020      	b.n	8003710 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	0c1b      	lsrs	r3, r3, #16
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d10c      	bne.n	80036f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	695b      	ldr	r3, [r3, #20]
 80036de:	43da      	mvns	r2, r3
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	4013      	ands	r3, r2
 80036e4:	b29b      	uxth	r3, r3
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	bf14      	ite	ne
 80036ea:	2301      	movne	r3, #1
 80036ec:	2300      	moveq	r3, #0
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	e00b      	b.n	800370a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	699b      	ldr	r3, [r3, #24]
 80036f8:	43da      	mvns	r2, r3
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	4013      	ands	r3, r2
 80036fe:	b29b      	uxth	r3, r3
 8003700:	2b00      	cmp	r3, #0
 8003702:	bf14      	ite	ne
 8003704:	2301      	movne	r3, #1
 8003706:	2300      	moveq	r3, #0
 8003708:	b2db      	uxtb	r3, r3
 800370a:	2b00      	cmp	r3, #0
 800370c:	d18d      	bne.n	800362a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800370e:	2300      	movs	r3, #0
}
 8003710:	4618      	mov	r0, r3
 8003712:	3710      	adds	r7, #16
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}

08003718 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b084      	sub	sp, #16
 800371c:	af00      	add	r7, sp, #0
 800371e:	60f8      	str	r0, [r7, #12]
 8003720:	60b9      	str	r1, [r7, #8]
 8003722:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003724:	e02d      	b.n	8003782 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003726:	68f8      	ldr	r0, [r7, #12]
 8003728:	f000 f8ce 	bl	80038c8 <I2C_IsAcknowledgeFailed>
 800372c:	4603      	mov	r3, r0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d001      	beq.n	8003736 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e02d      	b.n	8003792 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800373c:	d021      	beq.n	8003782 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800373e:	f7fe fdb9 	bl	80022b4 <HAL_GetTick>
 8003742:	4602      	mov	r2, r0
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	1ad3      	subs	r3, r2, r3
 8003748:	68ba      	ldr	r2, [r7, #8]
 800374a:	429a      	cmp	r2, r3
 800374c:	d302      	bcc.n	8003754 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d116      	bne.n	8003782 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2200      	movs	r2, #0
 8003758:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2220      	movs	r2, #32
 800375e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2200      	movs	r2, #0
 8003766:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376e:	f043 0220 	orr.w	r2, r3, #32
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2200      	movs	r2, #0
 800377a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e007      	b.n	8003792 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	695b      	ldr	r3, [r3, #20]
 8003788:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800378c:	2b80      	cmp	r3, #128	; 0x80
 800378e:	d1ca      	bne.n	8003726 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003790:	2300      	movs	r3, #0
}
 8003792:	4618      	mov	r0, r3
 8003794:	3710      	adds	r7, #16
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}

0800379a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800379a:	b580      	push	{r7, lr}
 800379c:	b084      	sub	sp, #16
 800379e:	af00      	add	r7, sp, #0
 80037a0:	60f8      	str	r0, [r7, #12]
 80037a2:	60b9      	str	r1, [r7, #8]
 80037a4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037a6:	e02d      	b.n	8003804 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80037a8:	68f8      	ldr	r0, [r7, #12]
 80037aa:	f000 f88d 	bl	80038c8 <I2C_IsAcknowledgeFailed>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d001      	beq.n	80037b8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e02d      	b.n	8003814 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037be:	d021      	beq.n	8003804 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037c0:	f7fe fd78 	bl	80022b4 <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	68ba      	ldr	r2, [r7, #8]
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d302      	bcc.n	80037d6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d116      	bne.n	8003804 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2200      	movs	r2, #0
 80037da:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2220      	movs	r2, #32
 80037e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f0:	f043 0220 	orr.w	r2, r3, #32
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e007      	b.n	8003814 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	695b      	ldr	r3, [r3, #20]
 800380a:	f003 0304 	and.w	r3, r3, #4
 800380e:	2b04      	cmp	r3, #4
 8003810:	d1ca      	bne.n	80037a8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003812:	2300      	movs	r3, #0
}
 8003814:	4618      	mov	r0, r3
 8003816:	3710      	adds	r7, #16
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}

0800381c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
 8003822:	60f8      	str	r0, [r7, #12]
 8003824:	60b9      	str	r1, [r7, #8]
 8003826:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003828:	e042      	b.n	80038b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	695b      	ldr	r3, [r3, #20]
 8003830:	f003 0310 	and.w	r3, r3, #16
 8003834:	2b10      	cmp	r3, #16
 8003836:	d119      	bne.n	800386c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f06f 0210 	mvn.w	r2, #16
 8003840:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2200      	movs	r2, #0
 8003846:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2220      	movs	r2, #32
 800384c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2200      	movs	r2, #0
 8003854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2200      	movs	r2, #0
 8003864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e029      	b.n	80038c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800386c:	f7fe fd22 	bl	80022b4 <HAL_GetTick>
 8003870:	4602      	mov	r2, r0
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	68ba      	ldr	r2, [r7, #8]
 8003878:	429a      	cmp	r2, r3
 800387a:	d302      	bcc.n	8003882 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d116      	bne.n	80038b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2200      	movs	r2, #0
 8003886:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2220      	movs	r2, #32
 800388c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2200      	movs	r2, #0
 8003894:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389c:	f043 0220 	orr.w	r2, r3, #32
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2200      	movs	r2, #0
 80038a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e007      	b.n	80038c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	695b      	ldr	r3, [r3, #20]
 80038b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ba:	2b40      	cmp	r3, #64	; 0x40
 80038bc:	d1b5      	bne.n	800382a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80038be:	2300      	movs	r3, #0
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3710      	adds	r7, #16
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	695b      	ldr	r3, [r3, #20]
 80038d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038de:	d11b      	bne.n	8003918 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80038e8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2220      	movs	r2, #32
 80038f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003904:	f043 0204 	orr.w	r2, r3, #4
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e000      	b.n	800391a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003918:	2300      	movs	r3, #0
}
 800391a:	4618      	mov	r0, r3
 800391c:	370c      	adds	r7, #12
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr
	...

08003928 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003928:	b480      	push	{r7}
 800392a:	b083      	sub	sp, #12
 800392c:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 800392e:	4b06      	ldr	r3, [pc, #24]	; (8003948 <HAL_PWR_EnableBkUpAccess+0x20>)
 8003930:	2201      	movs	r2, #1
 8003932:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8003934:	4b05      	ldr	r3, [pc, #20]	; (800394c <HAL_PWR_EnableBkUpAccess+0x24>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 800393a:	687b      	ldr	r3, [r7, #4]
}
 800393c:	bf00      	nop
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr
 8003948:	420e0020 	.word	0x420e0020
 800394c:	40007000 	.word	0x40007000

08003950 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8003956:	4b06      	ldr	r3, [pc, #24]	; (8003970 <HAL_PWR_DisableBkUpAccess+0x20>)
 8003958:	2200      	movs	r2, #0
 800395a:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 800395c:	4b05      	ldr	r3, [pc, #20]	; (8003974 <HAL_PWR_DisableBkUpAccess+0x24>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8003962:	687b      	ldr	r3, [r7, #4]
}
 8003964:	bf00      	nop
 8003966:	370c      	adds	r7, #12
 8003968:	46bd      	mov	sp, r7
 800396a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396e:	4770      	bx	lr
 8003970:	420e0020 	.word	0x420e0020
 8003974:	40007000 	.word	0x40007000

08003978 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b086      	sub	sp, #24
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d101      	bne.n	800398a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e267      	b.n	8003e5a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0301 	and.w	r3, r3, #1
 8003992:	2b00      	cmp	r3, #0
 8003994:	d075      	beq.n	8003a82 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003996:	4b88      	ldr	r3, [pc, #544]	; (8003bb8 <HAL_RCC_OscConfig+0x240>)
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	f003 030c 	and.w	r3, r3, #12
 800399e:	2b04      	cmp	r3, #4
 80039a0:	d00c      	beq.n	80039bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039a2:	4b85      	ldr	r3, [pc, #532]	; (8003bb8 <HAL_RCC_OscConfig+0x240>)
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039aa:	2b08      	cmp	r3, #8
 80039ac:	d112      	bne.n	80039d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039ae:	4b82      	ldr	r3, [pc, #520]	; (8003bb8 <HAL_RCC_OscConfig+0x240>)
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039ba:	d10b      	bne.n	80039d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039bc:	4b7e      	ldr	r3, [pc, #504]	; (8003bb8 <HAL_RCC_OscConfig+0x240>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d05b      	beq.n	8003a80 <HAL_RCC_OscConfig+0x108>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d157      	bne.n	8003a80 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e242      	b.n	8003e5a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039dc:	d106      	bne.n	80039ec <HAL_RCC_OscConfig+0x74>
 80039de:	4b76      	ldr	r3, [pc, #472]	; (8003bb8 <HAL_RCC_OscConfig+0x240>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a75      	ldr	r2, [pc, #468]	; (8003bb8 <HAL_RCC_OscConfig+0x240>)
 80039e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039e8:	6013      	str	r3, [r2, #0]
 80039ea:	e01d      	b.n	8003a28 <HAL_RCC_OscConfig+0xb0>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039f4:	d10c      	bne.n	8003a10 <HAL_RCC_OscConfig+0x98>
 80039f6:	4b70      	ldr	r3, [pc, #448]	; (8003bb8 <HAL_RCC_OscConfig+0x240>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a6f      	ldr	r2, [pc, #444]	; (8003bb8 <HAL_RCC_OscConfig+0x240>)
 80039fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a00:	6013      	str	r3, [r2, #0]
 8003a02:	4b6d      	ldr	r3, [pc, #436]	; (8003bb8 <HAL_RCC_OscConfig+0x240>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a6c      	ldr	r2, [pc, #432]	; (8003bb8 <HAL_RCC_OscConfig+0x240>)
 8003a08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a0c:	6013      	str	r3, [r2, #0]
 8003a0e:	e00b      	b.n	8003a28 <HAL_RCC_OscConfig+0xb0>
 8003a10:	4b69      	ldr	r3, [pc, #420]	; (8003bb8 <HAL_RCC_OscConfig+0x240>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a68      	ldr	r2, [pc, #416]	; (8003bb8 <HAL_RCC_OscConfig+0x240>)
 8003a16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a1a:	6013      	str	r3, [r2, #0]
 8003a1c:	4b66      	ldr	r3, [pc, #408]	; (8003bb8 <HAL_RCC_OscConfig+0x240>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a65      	ldr	r2, [pc, #404]	; (8003bb8 <HAL_RCC_OscConfig+0x240>)
 8003a22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d013      	beq.n	8003a58 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a30:	f7fe fc40 	bl	80022b4 <HAL_GetTick>
 8003a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a36:	e008      	b.n	8003a4a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a38:	f7fe fc3c 	bl	80022b4 <HAL_GetTick>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	2b64      	cmp	r3, #100	; 0x64
 8003a44:	d901      	bls.n	8003a4a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	e207      	b.n	8003e5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a4a:	4b5b      	ldr	r3, [pc, #364]	; (8003bb8 <HAL_RCC_OscConfig+0x240>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d0f0      	beq.n	8003a38 <HAL_RCC_OscConfig+0xc0>
 8003a56:	e014      	b.n	8003a82 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a58:	f7fe fc2c 	bl	80022b4 <HAL_GetTick>
 8003a5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a5e:	e008      	b.n	8003a72 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a60:	f7fe fc28 	bl	80022b4 <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	2b64      	cmp	r3, #100	; 0x64
 8003a6c:	d901      	bls.n	8003a72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e1f3      	b.n	8003e5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a72:	4b51      	ldr	r3, [pc, #324]	; (8003bb8 <HAL_RCC_OscConfig+0x240>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d1f0      	bne.n	8003a60 <HAL_RCC_OscConfig+0xe8>
 8003a7e:	e000      	b.n	8003a82 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0302 	and.w	r3, r3, #2
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d063      	beq.n	8003b56 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a8e:	4b4a      	ldr	r3, [pc, #296]	; (8003bb8 <HAL_RCC_OscConfig+0x240>)
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	f003 030c 	and.w	r3, r3, #12
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d00b      	beq.n	8003ab2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a9a:	4b47      	ldr	r3, [pc, #284]	; (8003bb8 <HAL_RCC_OscConfig+0x240>)
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003aa2:	2b08      	cmp	r3, #8
 8003aa4:	d11c      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003aa6:	4b44      	ldr	r3, [pc, #272]	; (8003bb8 <HAL_RCC_OscConfig+0x240>)
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d116      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ab2:	4b41      	ldr	r3, [pc, #260]	; (8003bb8 <HAL_RCC_OscConfig+0x240>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0302 	and.w	r3, r3, #2
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d005      	beq.n	8003aca <HAL_RCC_OscConfig+0x152>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d001      	beq.n	8003aca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e1c7      	b.n	8003e5a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aca:	4b3b      	ldr	r3, [pc, #236]	; (8003bb8 <HAL_RCC_OscConfig+0x240>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	691b      	ldr	r3, [r3, #16]
 8003ad6:	00db      	lsls	r3, r3, #3
 8003ad8:	4937      	ldr	r1, [pc, #220]	; (8003bb8 <HAL_RCC_OscConfig+0x240>)
 8003ada:	4313      	orrs	r3, r2
 8003adc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ade:	e03a      	b.n	8003b56 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d020      	beq.n	8003b2a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ae8:	4b34      	ldr	r3, [pc, #208]	; (8003bbc <HAL_RCC_OscConfig+0x244>)
 8003aea:	2201      	movs	r2, #1
 8003aec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aee:	f7fe fbe1 	bl	80022b4 <HAL_GetTick>
 8003af2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003af4:	e008      	b.n	8003b08 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003af6:	f7fe fbdd 	bl	80022b4 <HAL_GetTick>
 8003afa:	4602      	mov	r2, r0
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d901      	bls.n	8003b08 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b04:	2303      	movs	r3, #3
 8003b06:	e1a8      	b.n	8003e5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b08:	4b2b      	ldr	r3, [pc, #172]	; (8003bb8 <HAL_RCC_OscConfig+0x240>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0302 	and.w	r3, r3, #2
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d0f0      	beq.n	8003af6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b14:	4b28      	ldr	r3, [pc, #160]	; (8003bb8 <HAL_RCC_OscConfig+0x240>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	691b      	ldr	r3, [r3, #16]
 8003b20:	00db      	lsls	r3, r3, #3
 8003b22:	4925      	ldr	r1, [pc, #148]	; (8003bb8 <HAL_RCC_OscConfig+0x240>)
 8003b24:	4313      	orrs	r3, r2
 8003b26:	600b      	str	r3, [r1, #0]
 8003b28:	e015      	b.n	8003b56 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b2a:	4b24      	ldr	r3, [pc, #144]	; (8003bbc <HAL_RCC_OscConfig+0x244>)
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b30:	f7fe fbc0 	bl	80022b4 <HAL_GetTick>
 8003b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b36:	e008      	b.n	8003b4a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b38:	f7fe fbbc 	bl	80022b4 <HAL_GetTick>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	2b02      	cmp	r3, #2
 8003b44:	d901      	bls.n	8003b4a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e187      	b.n	8003e5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b4a:	4b1b      	ldr	r3, [pc, #108]	; (8003bb8 <HAL_RCC_OscConfig+0x240>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0302 	and.w	r3, r3, #2
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d1f0      	bne.n	8003b38 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0308 	and.w	r3, r3, #8
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d036      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	695b      	ldr	r3, [r3, #20]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d016      	beq.n	8003b98 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b6a:	4b15      	ldr	r3, [pc, #84]	; (8003bc0 <HAL_RCC_OscConfig+0x248>)
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b70:	f7fe fba0 	bl	80022b4 <HAL_GetTick>
 8003b74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b76:	e008      	b.n	8003b8a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b78:	f7fe fb9c 	bl	80022b4 <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d901      	bls.n	8003b8a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e167      	b.n	8003e5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b8a:	4b0b      	ldr	r3, [pc, #44]	; (8003bb8 <HAL_RCC_OscConfig+0x240>)
 8003b8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b8e:	f003 0302 	and.w	r3, r3, #2
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d0f0      	beq.n	8003b78 <HAL_RCC_OscConfig+0x200>
 8003b96:	e01b      	b.n	8003bd0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b98:	4b09      	ldr	r3, [pc, #36]	; (8003bc0 <HAL_RCC_OscConfig+0x248>)
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b9e:	f7fe fb89 	bl	80022b4 <HAL_GetTick>
 8003ba2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ba4:	e00e      	b.n	8003bc4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ba6:	f7fe fb85 	bl	80022b4 <HAL_GetTick>
 8003baa:	4602      	mov	r2, r0
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	2b02      	cmp	r3, #2
 8003bb2:	d907      	bls.n	8003bc4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	e150      	b.n	8003e5a <HAL_RCC_OscConfig+0x4e2>
 8003bb8:	40023800 	.word	0x40023800
 8003bbc:	42470000 	.word	0x42470000
 8003bc0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bc4:	4b88      	ldr	r3, [pc, #544]	; (8003de8 <HAL_RCC_OscConfig+0x470>)
 8003bc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bc8:	f003 0302 	and.w	r3, r3, #2
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d1ea      	bne.n	8003ba6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 0304 	and.w	r3, r3, #4
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	f000 8097 	beq.w	8003d0c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bde:	2300      	movs	r3, #0
 8003be0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003be2:	4b81      	ldr	r3, [pc, #516]	; (8003de8 <HAL_RCC_OscConfig+0x470>)
 8003be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d10f      	bne.n	8003c0e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bee:	2300      	movs	r3, #0
 8003bf0:	60bb      	str	r3, [r7, #8]
 8003bf2:	4b7d      	ldr	r3, [pc, #500]	; (8003de8 <HAL_RCC_OscConfig+0x470>)
 8003bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf6:	4a7c      	ldr	r2, [pc, #496]	; (8003de8 <HAL_RCC_OscConfig+0x470>)
 8003bf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bfc:	6413      	str	r3, [r2, #64]	; 0x40
 8003bfe:	4b7a      	ldr	r3, [pc, #488]	; (8003de8 <HAL_RCC_OscConfig+0x470>)
 8003c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c06:	60bb      	str	r3, [r7, #8]
 8003c08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c0e:	4b77      	ldr	r3, [pc, #476]	; (8003dec <HAL_RCC_OscConfig+0x474>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d118      	bne.n	8003c4c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c1a:	4b74      	ldr	r3, [pc, #464]	; (8003dec <HAL_RCC_OscConfig+0x474>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a73      	ldr	r2, [pc, #460]	; (8003dec <HAL_RCC_OscConfig+0x474>)
 8003c20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c26:	f7fe fb45 	bl	80022b4 <HAL_GetTick>
 8003c2a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c2c:	e008      	b.n	8003c40 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c2e:	f7fe fb41 	bl	80022b4 <HAL_GetTick>
 8003c32:	4602      	mov	r2, r0
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	d901      	bls.n	8003c40 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	e10c      	b.n	8003e5a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c40:	4b6a      	ldr	r3, [pc, #424]	; (8003dec <HAL_RCC_OscConfig+0x474>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d0f0      	beq.n	8003c2e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d106      	bne.n	8003c62 <HAL_RCC_OscConfig+0x2ea>
 8003c54:	4b64      	ldr	r3, [pc, #400]	; (8003de8 <HAL_RCC_OscConfig+0x470>)
 8003c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c58:	4a63      	ldr	r2, [pc, #396]	; (8003de8 <HAL_RCC_OscConfig+0x470>)
 8003c5a:	f043 0301 	orr.w	r3, r3, #1
 8003c5e:	6713      	str	r3, [r2, #112]	; 0x70
 8003c60:	e01c      	b.n	8003c9c <HAL_RCC_OscConfig+0x324>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	2b05      	cmp	r3, #5
 8003c68:	d10c      	bne.n	8003c84 <HAL_RCC_OscConfig+0x30c>
 8003c6a:	4b5f      	ldr	r3, [pc, #380]	; (8003de8 <HAL_RCC_OscConfig+0x470>)
 8003c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c6e:	4a5e      	ldr	r2, [pc, #376]	; (8003de8 <HAL_RCC_OscConfig+0x470>)
 8003c70:	f043 0304 	orr.w	r3, r3, #4
 8003c74:	6713      	str	r3, [r2, #112]	; 0x70
 8003c76:	4b5c      	ldr	r3, [pc, #368]	; (8003de8 <HAL_RCC_OscConfig+0x470>)
 8003c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c7a:	4a5b      	ldr	r2, [pc, #364]	; (8003de8 <HAL_RCC_OscConfig+0x470>)
 8003c7c:	f043 0301 	orr.w	r3, r3, #1
 8003c80:	6713      	str	r3, [r2, #112]	; 0x70
 8003c82:	e00b      	b.n	8003c9c <HAL_RCC_OscConfig+0x324>
 8003c84:	4b58      	ldr	r3, [pc, #352]	; (8003de8 <HAL_RCC_OscConfig+0x470>)
 8003c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c88:	4a57      	ldr	r2, [pc, #348]	; (8003de8 <HAL_RCC_OscConfig+0x470>)
 8003c8a:	f023 0301 	bic.w	r3, r3, #1
 8003c8e:	6713      	str	r3, [r2, #112]	; 0x70
 8003c90:	4b55      	ldr	r3, [pc, #340]	; (8003de8 <HAL_RCC_OscConfig+0x470>)
 8003c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c94:	4a54      	ldr	r2, [pc, #336]	; (8003de8 <HAL_RCC_OscConfig+0x470>)
 8003c96:	f023 0304 	bic.w	r3, r3, #4
 8003c9a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d015      	beq.n	8003cd0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ca4:	f7fe fb06 	bl	80022b4 <HAL_GetTick>
 8003ca8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003caa:	e00a      	b.n	8003cc2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cac:	f7fe fb02 	bl	80022b4 <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d901      	bls.n	8003cc2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e0cb      	b.n	8003e5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cc2:	4b49      	ldr	r3, [pc, #292]	; (8003de8 <HAL_RCC_OscConfig+0x470>)
 8003cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cc6:	f003 0302 	and.w	r3, r3, #2
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d0ee      	beq.n	8003cac <HAL_RCC_OscConfig+0x334>
 8003cce:	e014      	b.n	8003cfa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cd0:	f7fe faf0 	bl	80022b4 <HAL_GetTick>
 8003cd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cd6:	e00a      	b.n	8003cee <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cd8:	f7fe faec 	bl	80022b4 <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d901      	bls.n	8003cee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e0b5      	b.n	8003e5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cee:	4b3e      	ldr	r3, [pc, #248]	; (8003de8 <HAL_RCC_OscConfig+0x470>)
 8003cf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cf2:	f003 0302 	and.w	r3, r3, #2
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d1ee      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cfa:	7dfb      	ldrb	r3, [r7, #23]
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d105      	bne.n	8003d0c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d00:	4b39      	ldr	r3, [pc, #228]	; (8003de8 <HAL_RCC_OscConfig+0x470>)
 8003d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d04:	4a38      	ldr	r2, [pc, #224]	; (8003de8 <HAL_RCC_OscConfig+0x470>)
 8003d06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d0a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	699b      	ldr	r3, [r3, #24]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	f000 80a1 	beq.w	8003e58 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d16:	4b34      	ldr	r3, [pc, #208]	; (8003de8 <HAL_RCC_OscConfig+0x470>)
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	f003 030c 	and.w	r3, r3, #12
 8003d1e:	2b08      	cmp	r3, #8
 8003d20:	d05c      	beq.n	8003ddc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	699b      	ldr	r3, [r3, #24]
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d141      	bne.n	8003dae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d2a:	4b31      	ldr	r3, [pc, #196]	; (8003df0 <HAL_RCC_OscConfig+0x478>)
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d30:	f7fe fac0 	bl	80022b4 <HAL_GetTick>
 8003d34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d36:	e008      	b.n	8003d4a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d38:	f7fe fabc 	bl	80022b4 <HAL_GetTick>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d901      	bls.n	8003d4a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	e087      	b.n	8003e5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d4a:	4b27      	ldr	r3, [pc, #156]	; (8003de8 <HAL_RCC_OscConfig+0x470>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d1f0      	bne.n	8003d38 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	69da      	ldr	r2, [r3, #28]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6a1b      	ldr	r3, [r3, #32]
 8003d5e:	431a      	orrs	r2, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d64:	019b      	lsls	r3, r3, #6
 8003d66:	431a      	orrs	r2, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d6c:	085b      	lsrs	r3, r3, #1
 8003d6e:	3b01      	subs	r3, #1
 8003d70:	041b      	lsls	r3, r3, #16
 8003d72:	431a      	orrs	r2, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d78:	061b      	lsls	r3, r3, #24
 8003d7a:	491b      	ldr	r1, [pc, #108]	; (8003de8 <HAL_RCC_OscConfig+0x470>)
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d80:	4b1b      	ldr	r3, [pc, #108]	; (8003df0 <HAL_RCC_OscConfig+0x478>)
 8003d82:	2201      	movs	r2, #1
 8003d84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d86:	f7fe fa95 	bl	80022b4 <HAL_GetTick>
 8003d8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d8c:	e008      	b.n	8003da0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d8e:	f7fe fa91 	bl	80022b4 <HAL_GetTick>
 8003d92:	4602      	mov	r2, r0
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	2b02      	cmp	r3, #2
 8003d9a:	d901      	bls.n	8003da0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	e05c      	b.n	8003e5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003da0:	4b11      	ldr	r3, [pc, #68]	; (8003de8 <HAL_RCC_OscConfig+0x470>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d0f0      	beq.n	8003d8e <HAL_RCC_OscConfig+0x416>
 8003dac:	e054      	b.n	8003e58 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dae:	4b10      	ldr	r3, [pc, #64]	; (8003df0 <HAL_RCC_OscConfig+0x478>)
 8003db0:	2200      	movs	r2, #0
 8003db2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003db4:	f7fe fa7e 	bl	80022b4 <HAL_GetTick>
 8003db8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dba:	e008      	b.n	8003dce <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dbc:	f7fe fa7a 	bl	80022b4 <HAL_GetTick>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	2b02      	cmp	r3, #2
 8003dc8:	d901      	bls.n	8003dce <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003dca:	2303      	movs	r3, #3
 8003dcc:	e045      	b.n	8003e5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dce:	4b06      	ldr	r3, [pc, #24]	; (8003de8 <HAL_RCC_OscConfig+0x470>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d1f0      	bne.n	8003dbc <HAL_RCC_OscConfig+0x444>
 8003dda:	e03d      	b.n	8003e58 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	699b      	ldr	r3, [r3, #24]
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d107      	bne.n	8003df4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e038      	b.n	8003e5a <HAL_RCC_OscConfig+0x4e2>
 8003de8:	40023800 	.word	0x40023800
 8003dec:	40007000 	.word	0x40007000
 8003df0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003df4:	4b1b      	ldr	r3, [pc, #108]	; (8003e64 <HAL_RCC_OscConfig+0x4ec>)
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	699b      	ldr	r3, [r3, #24]
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d028      	beq.n	8003e54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d121      	bne.n	8003e54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d11a      	bne.n	8003e54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e1e:	68fa      	ldr	r2, [r7, #12]
 8003e20:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e24:	4013      	ands	r3, r2
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e2a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d111      	bne.n	8003e54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e3a:	085b      	lsrs	r3, r3, #1
 8003e3c:	3b01      	subs	r3, #1
 8003e3e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d107      	bne.n	8003e54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e4e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d001      	beq.n	8003e58 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e000      	b.n	8003e5a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003e58:	2300      	movs	r3, #0
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3718      	adds	r7, #24
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	40023800 	.word	0x40023800

08003e68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d101      	bne.n	8003e7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e0cc      	b.n	8004016 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e7c:	4b68      	ldr	r3, [pc, #416]	; (8004020 <HAL_RCC_ClockConfig+0x1b8>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 0307 	and.w	r3, r3, #7
 8003e84:	683a      	ldr	r2, [r7, #0]
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d90c      	bls.n	8003ea4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e8a:	4b65      	ldr	r3, [pc, #404]	; (8004020 <HAL_RCC_ClockConfig+0x1b8>)
 8003e8c:	683a      	ldr	r2, [r7, #0]
 8003e8e:	b2d2      	uxtb	r2, r2
 8003e90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e92:	4b63      	ldr	r3, [pc, #396]	; (8004020 <HAL_RCC_ClockConfig+0x1b8>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 0307 	and.w	r3, r3, #7
 8003e9a:	683a      	ldr	r2, [r7, #0]
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d001      	beq.n	8003ea4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e0b8      	b.n	8004016 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0302 	and.w	r3, r3, #2
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d020      	beq.n	8003ef2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0304 	and.w	r3, r3, #4
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d005      	beq.n	8003ec8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ebc:	4b59      	ldr	r3, [pc, #356]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	4a58      	ldr	r2, [pc, #352]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003ec6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0308 	and.w	r3, r3, #8
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d005      	beq.n	8003ee0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ed4:	4b53      	ldr	r3, [pc, #332]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	4a52      	ldr	r2, [pc, #328]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003eda:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ede:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ee0:	4b50      	ldr	r3, [pc, #320]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	494d      	ldr	r1, [pc, #308]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 0301 	and.w	r3, r3, #1
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d044      	beq.n	8003f88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d107      	bne.n	8003f16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f06:	4b47      	ldr	r3, [pc, #284]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d119      	bne.n	8003f46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	e07f      	b.n	8004016 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d003      	beq.n	8003f26 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f22:	2b03      	cmp	r3, #3
 8003f24:	d107      	bne.n	8003f36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f26:	4b3f      	ldr	r3, [pc, #252]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d109      	bne.n	8003f46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e06f      	b.n	8004016 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f36:	4b3b      	ldr	r3, [pc, #236]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 0302 	and.w	r3, r3, #2
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d101      	bne.n	8003f46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e067      	b.n	8004016 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f46:	4b37      	ldr	r3, [pc, #220]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	f023 0203 	bic.w	r2, r3, #3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	4934      	ldr	r1, [pc, #208]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003f54:	4313      	orrs	r3, r2
 8003f56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f58:	f7fe f9ac 	bl	80022b4 <HAL_GetTick>
 8003f5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f5e:	e00a      	b.n	8003f76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f60:	f7fe f9a8 	bl	80022b4 <HAL_GetTick>
 8003f64:	4602      	mov	r2, r0
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d901      	bls.n	8003f76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e04f      	b.n	8004016 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f76:	4b2b      	ldr	r3, [pc, #172]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	f003 020c 	and.w	r2, r3, #12
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d1eb      	bne.n	8003f60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f88:	4b25      	ldr	r3, [pc, #148]	; (8004020 <HAL_RCC_ClockConfig+0x1b8>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f003 0307 	and.w	r3, r3, #7
 8003f90:	683a      	ldr	r2, [r7, #0]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d20c      	bcs.n	8003fb0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f96:	4b22      	ldr	r3, [pc, #136]	; (8004020 <HAL_RCC_ClockConfig+0x1b8>)
 8003f98:	683a      	ldr	r2, [r7, #0]
 8003f9a:	b2d2      	uxtb	r2, r2
 8003f9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f9e:	4b20      	ldr	r3, [pc, #128]	; (8004020 <HAL_RCC_ClockConfig+0x1b8>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 0307 	and.w	r3, r3, #7
 8003fa6:	683a      	ldr	r2, [r7, #0]
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d001      	beq.n	8003fb0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	e032      	b.n	8004016 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0304 	and.w	r3, r3, #4
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d008      	beq.n	8003fce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fbc:	4b19      	ldr	r3, [pc, #100]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	4916      	ldr	r1, [pc, #88]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 0308 	and.w	r3, r3, #8
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d009      	beq.n	8003fee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fda:	4b12      	ldr	r3, [pc, #72]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	00db      	lsls	r3, r3, #3
 8003fe8:	490e      	ldr	r1, [pc, #56]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003fea:	4313      	orrs	r3, r2
 8003fec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003fee:	f000 f821 	bl	8004034 <HAL_RCC_GetSysClockFreq>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	4b0b      	ldr	r3, [pc, #44]	; (8004024 <HAL_RCC_ClockConfig+0x1bc>)
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	091b      	lsrs	r3, r3, #4
 8003ffa:	f003 030f 	and.w	r3, r3, #15
 8003ffe:	490a      	ldr	r1, [pc, #40]	; (8004028 <HAL_RCC_ClockConfig+0x1c0>)
 8004000:	5ccb      	ldrb	r3, [r1, r3]
 8004002:	fa22 f303 	lsr.w	r3, r2, r3
 8004006:	4a09      	ldr	r2, [pc, #36]	; (800402c <HAL_RCC_ClockConfig+0x1c4>)
 8004008:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800400a:	4b09      	ldr	r3, [pc, #36]	; (8004030 <HAL_RCC_ClockConfig+0x1c8>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4618      	mov	r0, r3
 8004010:	f7fe f90c 	bl	800222c <HAL_InitTick>

  return HAL_OK;
 8004014:	2300      	movs	r3, #0
}
 8004016:	4618      	mov	r0, r3
 8004018:	3710      	adds	r7, #16
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop
 8004020:	40023c00 	.word	0x40023c00
 8004024:	40023800 	.word	0x40023800
 8004028:	08009e10 	.word	0x08009e10
 800402c:	20000008 	.word	0x20000008
 8004030:	2000000c 	.word	0x2000000c

08004034 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004034:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004038:	b090      	sub	sp, #64	; 0x40
 800403a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800403c:	2300      	movs	r3, #0
 800403e:	637b      	str	r3, [r7, #52]	; 0x34
 8004040:	2300      	movs	r3, #0
 8004042:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004044:	2300      	movs	r3, #0
 8004046:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004048:	2300      	movs	r3, #0
 800404a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800404c:	4b59      	ldr	r3, [pc, #356]	; (80041b4 <HAL_RCC_GetSysClockFreq+0x180>)
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	f003 030c 	and.w	r3, r3, #12
 8004054:	2b08      	cmp	r3, #8
 8004056:	d00d      	beq.n	8004074 <HAL_RCC_GetSysClockFreq+0x40>
 8004058:	2b08      	cmp	r3, #8
 800405a:	f200 80a1 	bhi.w	80041a0 <HAL_RCC_GetSysClockFreq+0x16c>
 800405e:	2b00      	cmp	r3, #0
 8004060:	d002      	beq.n	8004068 <HAL_RCC_GetSysClockFreq+0x34>
 8004062:	2b04      	cmp	r3, #4
 8004064:	d003      	beq.n	800406e <HAL_RCC_GetSysClockFreq+0x3a>
 8004066:	e09b      	b.n	80041a0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004068:	4b53      	ldr	r3, [pc, #332]	; (80041b8 <HAL_RCC_GetSysClockFreq+0x184>)
 800406a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800406c:	e09b      	b.n	80041a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800406e:	4b53      	ldr	r3, [pc, #332]	; (80041bc <HAL_RCC_GetSysClockFreq+0x188>)
 8004070:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004072:	e098      	b.n	80041a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004074:	4b4f      	ldr	r3, [pc, #316]	; (80041b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800407c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800407e:	4b4d      	ldr	r3, [pc, #308]	; (80041b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d028      	beq.n	80040dc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800408a:	4b4a      	ldr	r3, [pc, #296]	; (80041b4 <HAL_RCC_GetSysClockFreq+0x180>)
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	099b      	lsrs	r3, r3, #6
 8004090:	2200      	movs	r2, #0
 8004092:	623b      	str	r3, [r7, #32]
 8004094:	627a      	str	r2, [r7, #36]	; 0x24
 8004096:	6a3b      	ldr	r3, [r7, #32]
 8004098:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800409c:	2100      	movs	r1, #0
 800409e:	4b47      	ldr	r3, [pc, #284]	; (80041bc <HAL_RCC_GetSysClockFreq+0x188>)
 80040a0:	fb03 f201 	mul.w	r2, r3, r1
 80040a4:	2300      	movs	r3, #0
 80040a6:	fb00 f303 	mul.w	r3, r0, r3
 80040aa:	4413      	add	r3, r2
 80040ac:	4a43      	ldr	r2, [pc, #268]	; (80041bc <HAL_RCC_GetSysClockFreq+0x188>)
 80040ae:	fba0 1202 	umull	r1, r2, r0, r2
 80040b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80040b4:	460a      	mov	r2, r1
 80040b6:	62ba      	str	r2, [r7, #40]	; 0x28
 80040b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040ba:	4413      	add	r3, r2
 80040bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040c0:	2200      	movs	r2, #0
 80040c2:	61bb      	str	r3, [r7, #24]
 80040c4:	61fa      	str	r2, [r7, #28]
 80040c6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040ca:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80040ce:	f7fc fce5 	bl	8000a9c <__aeabi_uldivmod>
 80040d2:	4602      	mov	r2, r0
 80040d4:	460b      	mov	r3, r1
 80040d6:	4613      	mov	r3, r2
 80040d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040da:	e053      	b.n	8004184 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040dc:	4b35      	ldr	r3, [pc, #212]	; (80041b4 <HAL_RCC_GetSysClockFreq+0x180>)
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	099b      	lsrs	r3, r3, #6
 80040e2:	2200      	movs	r2, #0
 80040e4:	613b      	str	r3, [r7, #16]
 80040e6:	617a      	str	r2, [r7, #20]
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80040ee:	f04f 0b00 	mov.w	fp, #0
 80040f2:	4652      	mov	r2, sl
 80040f4:	465b      	mov	r3, fp
 80040f6:	f04f 0000 	mov.w	r0, #0
 80040fa:	f04f 0100 	mov.w	r1, #0
 80040fe:	0159      	lsls	r1, r3, #5
 8004100:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004104:	0150      	lsls	r0, r2, #5
 8004106:	4602      	mov	r2, r0
 8004108:	460b      	mov	r3, r1
 800410a:	ebb2 080a 	subs.w	r8, r2, sl
 800410e:	eb63 090b 	sbc.w	r9, r3, fp
 8004112:	f04f 0200 	mov.w	r2, #0
 8004116:	f04f 0300 	mov.w	r3, #0
 800411a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800411e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004122:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004126:	ebb2 0408 	subs.w	r4, r2, r8
 800412a:	eb63 0509 	sbc.w	r5, r3, r9
 800412e:	f04f 0200 	mov.w	r2, #0
 8004132:	f04f 0300 	mov.w	r3, #0
 8004136:	00eb      	lsls	r3, r5, #3
 8004138:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800413c:	00e2      	lsls	r2, r4, #3
 800413e:	4614      	mov	r4, r2
 8004140:	461d      	mov	r5, r3
 8004142:	eb14 030a 	adds.w	r3, r4, sl
 8004146:	603b      	str	r3, [r7, #0]
 8004148:	eb45 030b 	adc.w	r3, r5, fp
 800414c:	607b      	str	r3, [r7, #4]
 800414e:	f04f 0200 	mov.w	r2, #0
 8004152:	f04f 0300 	mov.w	r3, #0
 8004156:	e9d7 4500 	ldrd	r4, r5, [r7]
 800415a:	4629      	mov	r1, r5
 800415c:	028b      	lsls	r3, r1, #10
 800415e:	4621      	mov	r1, r4
 8004160:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004164:	4621      	mov	r1, r4
 8004166:	028a      	lsls	r2, r1, #10
 8004168:	4610      	mov	r0, r2
 800416a:	4619      	mov	r1, r3
 800416c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800416e:	2200      	movs	r2, #0
 8004170:	60bb      	str	r3, [r7, #8]
 8004172:	60fa      	str	r2, [r7, #12]
 8004174:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004178:	f7fc fc90 	bl	8000a9c <__aeabi_uldivmod>
 800417c:	4602      	mov	r2, r0
 800417e:	460b      	mov	r3, r1
 8004180:	4613      	mov	r3, r2
 8004182:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004184:	4b0b      	ldr	r3, [pc, #44]	; (80041b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	0c1b      	lsrs	r3, r3, #16
 800418a:	f003 0303 	and.w	r3, r3, #3
 800418e:	3301      	adds	r3, #1
 8004190:	005b      	lsls	r3, r3, #1
 8004192:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004194:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004198:	fbb2 f3f3 	udiv	r3, r2, r3
 800419c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800419e:	e002      	b.n	80041a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041a0:	4b05      	ldr	r3, [pc, #20]	; (80041b8 <HAL_RCC_GetSysClockFreq+0x184>)
 80041a2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80041a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3740      	adds	r7, #64	; 0x40
 80041ac:	46bd      	mov	sp, r7
 80041ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80041b2:	bf00      	nop
 80041b4:	40023800 	.word	0x40023800
 80041b8:	00f42400 	.word	0x00f42400
 80041bc:	017d7840 	.word	0x017d7840

080041c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041c0:	b480      	push	{r7}
 80041c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041c4:	4b03      	ldr	r3, [pc, #12]	; (80041d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80041c6:	681b      	ldr	r3, [r3, #0]
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr
 80041d2:	bf00      	nop
 80041d4:	20000008 	.word	0x20000008

080041d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80041dc:	f7ff fff0 	bl	80041c0 <HAL_RCC_GetHCLKFreq>
 80041e0:	4602      	mov	r2, r0
 80041e2:	4b05      	ldr	r3, [pc, #20]	; (80041f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	0a9b      	lsrs	r3, r3, #10
 80041e8:	f003 0307 	and.w	r3, r3, #7
 80041ec:	4903      	ldr	r1, [pc, #12]	; (80041fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80041ee:	5ccb      	ldrb	r3, [r1, r3]
 80041f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	40023800 	.word	0x40023800
 80041fc:	08009e20 	.word	0x08009e20

08004200 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004204:	f7ff ffdc 	bl	80041c0 <HAL_RCC_GetHCLKFreq>
 8004208:	4602      	mov	r2, r0
 800420a:	4b05      	ldr	r3, [pc, #20]	; (8004220 <HAL_RCC_GetPCLK2Freq+0x20>)
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	0b5b      	lsrs	r3, r3, #13
 8004210:	f003 0307 	and.w	r3, r3, #7
 8004214:	4903      	ldr	r1, [pc, #12]	; (8004224 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004216:	5ccb      	ldrb	r3, [r1, r3]
 8004218:	fa22 f303 	lsr.w	r3, r2, r3
}
 800421c:	4618      	mov	r0, r3
 800421e:	bd80      	pop	{r7, pc}
 8004220:	40023800 	.word	0x40023800
 8004224:	08009e20 	.word	0x08009e20

08004228 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b082      	sub	sp, #8
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d101      	bne.n	800423a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e041      	b.n	80042be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004240:	b2db      	uxtb	r3, r3
 8004242:	2b00      	cmp	r3, #0
 8004244:	d106      	bne.n	8004254 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f7fd fda8 	bl	8001da4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2202      	movs	r2, #2
 8004258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	3304      	adds	r3, #4
 8004264:	4619      	mov	r1, r3
 8004266:	4610      	mov	r0, r2
 8004268:	f000 fc0c 	bl	8004a84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2201      	movs	r2, #1
 8004270:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2201      	movs	r2, #1
 8004278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2201      	movs	r2, #1
 8004288:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042bc:	2300      	movs	r3, #0
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3708      	adds	r7, #8
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}

080042c6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80042c6:	b580      	push	{r7, lr}
 80042c8:	b082      	sub	sp, #8
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d101      	bne.n	80042d8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	e041      	b.n	800435c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d106      	bne.n	80042f2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2200      	movs	r2, #0
 80042e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f000 f839 	bl	8004364 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2202      	movs	r2, #2
 80042f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	3304      	adds	r3, #4
 8004302:	4619      	mov	r1, r3
 8004304:	4610      	mov	r0, r2
 8004306:	f000 fbbd 	bl	8004a84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2201      	movs	r2, #1
 800430e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2201      	movs	r2, #1
 8004316:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2201      	movs	r2, #1
 800431e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2201      	movs	r2, #1
 8004326:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2201      	movs	r2, #1
 800432e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2201      	movs	r2, #1
 8004336:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2201      	movs	r2, #1
 800433e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2201      	movs	r2, #1
 8004346:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2201      	movs	r2, #1
 800434e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2201      	movs	r2, #1
 8004356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800435a:	2300      	movs	r3, #0
}
 800435c:	4618      	mov	r0, r3
 800435e:	3708      	adds	r7, #8
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}

08004364 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004364:	b480      	push	{r7}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800436c:	bf00      	nop
 800436e:	370c      	adds	r7, #12
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr

08004378 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b084      	sub	sp, #16
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d109      	bne.n	800439c <HAL_TIM_PWM_Start+0x24>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800438e:	b2db      	uxtb	r3, r3
 8004390:	2b01      	cmp	r3, #1
 8004392:	bf14      	ite	ne
 8004394:	2301      	movne	r3, #1
 8004396:	2300      	moveq	r3, #0
 8004398:	b2db      	uxtb	r3, r3
 800439a:	e022      	b.n	80043e2 <HAL_TIM_PWM_Start+0x6a>
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	2b04      	cmp	r3, #4
 80043a0:	d109      	bne.n	80043b6 <HAL_TIM_PWM_Start+0x3e>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	bf14      	ite	ne
 80043ae:	2301      	movne	r3, #1
 80043b0:	2300      	moveq	r3, #0
 80043b2:	b2db      	uxtb	r3, r3
 80043b4:	e015      	b.n	80043e2 <HAL_TIM_PWM_Start+0x6a>
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	2b08      	cmp	r3, #8
 80043ba:	d109      	bne.n	80043d0 <HAL_TIM_PWM_Start+0x58>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	bf14      	ite	ne
 80043c8:	2301      	movne	r3, #1
 80043ca:	2300      	moveq	r3, #0
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	e008      	b.n	80043e2 <HAL_TIM_PWM_Start+0x6a>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	2b01      	cmp	r3, #1
 80043da:	bf14      	ite	ne
 80043dc:	2301      	movne	r3, #1
 80043de:	2300      	moveq	r3, #0
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d001      	beq.n	80043ea <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e07c      	b.n	80044e4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d104      	bne.n	80043fa <HAL_TIM_PWM_Start+0x82>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2202      	movs	r2, #2
 80043f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043f8:	e013      	b.n	8004422 <HAL_TIM_PWM_Start+0xaa>
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	2b04      	cmp	r3, #4
 80043fe:	d104      	bne.n	800440a <HAL_TIM_PWM_Start+0x92>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2202      	movs	r2, #2
 8004404:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004408:	e00b      	b.n	8004422 <HAL_TIM_PWM_Start+0xaa>
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	2b08      	cmp	r3, #8
 800440e:	d104      	bne.n	800441a <HAL_TIM_PWM_Start+0xa2>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2202      	movs	r2, #2
 8004414:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004418:	e003      	b.n	8004422 <HAL_TIM_PWM_Start+0xaa>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2202      	movs	r2, #2
 800441e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	2201      	movs	r2, #1
 8004428:	6839      	ldr	r1, [r7, #0]
 800442a:	4618      	mov	r0, r3
 800442c:	f000 fe14 	bl	8005058 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a2d      	ldr	r2, [pc, #180]	; (80044ec <HAL_TIM_PWM_Start+0x174>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d004      	beq.n	8004444 <HAL_TIM_PWM_Start+0xcc>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a2c      	ldr	r2, [pc, #176]	; (80044f0 <HAL_TIM_PWM_Start+0x178>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d101      	bne.n	8004448 <HAL_TIM_PWM_Start+0xd0>
 8004444:	2301      	movs	r3, #1
 8004446:	e000      	b.n	800444a <HAL_TIM_PWM_Start+0xd2>
 8004448:	2300      	movs	r3, #0
 800444a:	2b00      	cmp	r3, #0
 800444c:	d007      	beq.n	800445e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800445c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a22      	ldr	r2, [pc, #136]	; (80044ec <HAL_TIM_PWM_Start+0x174>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d022      	beq.n	80044ae <HAL_TIM_PWM_Start+0x136>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004470:	d01d      	beq.n	80044ae <HAL_TIM_PWM_Start+0x136>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a1f      	ldr	r2, [pc, #124]	; (80044f4 <HAL_TIM_PWM_Start+0x17c>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d018      	beq.n	80044ae <HAL_TIM_PWM_Start+0x136>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a1d      	ldr	r2, [pc, #116]	; (80044f8 <HAL_TIM_PWM_Start+0x180>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d013      	beq.n	80044ae <HAL_TIM_PWM_Start+0x136>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4a1c      	ldr	r2, [pc, #112]	; (80044fc <HAL_TIM_PWM_Start+0x184>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d00e      	beq.n	80044ae <HAL_TIM_PWM_Start+0x136>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a16      	ldr	r2, [pc, #88]	; (80044f0 <HAL_TIM_PWM_Start+0x178>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d009      	beq.n	80044ae <HAL_TIM_PWM_Start+0x136>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a18      	ldr	r2, [pc, #96]	; (8004500 <HAL_TIM_PWM_Start+0x188>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d004      	beq.n	80044ae <HAL_TIM_PWM_Start+0x136>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a16      	ldr	r2, [pc, #88]	; (8004504 <HAL_TIM_PWM_Start+0x18c>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d111      	bne.n	80044d2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	f003 0307 	and.w	r3, r3, #7
 80044b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2b06      	cmp	r3, #6
 80044be:	d010      	beq.n	80044e2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f042 0201 	orr.w	r2, r2, #1
 80044ce:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044d0:	e007      	b.n	80044e2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f042 0201 	orr.w	r2, r2, #1
 80044e0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044e2:	2300      	movs	r3, #0
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3710      	adds	r7, #16
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}
 80044ec:	40010000 	.word	0x40010000
 80044f0:	40010400 	.word	0x40010400
 80044f4:	40000400 	.word	0x40000400
 80044f8:	40000800 	.word	0x40000800
 80044fc:	40000c00 	.word	0x40000c00
 8004500:	40014000 	.word	0x40014000
 8004504:	40001800 	.word	0x40001800

08004508 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b086      	sub	sp, #24
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d101      	bne.n	800451c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	e097      	b.n	800464c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004522:	b2db      	uxtb	r3, r3
 8004524:	2b00      	cmp	r3, #0
 8004526:	d106      	bne.n	8004536 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2200      	movs	r2, #0
 800452c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f7fd fc95 	bl	8001e60 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2202      	movs	r2, #2
 800453a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	687a      	ldr	r2, [r7, #4]
 8004546:	6812      	ldr	r2, [r2, #0]
 8004548:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800454c:	f023 0307 	bic.w	r3, r3, #7
 8004550:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	3304      	adds	r3, #4
 800455a:	4619      	mov	r1, r3
 800455c:	4610      	mov	r0, r2
 800455e:	f000 fa91 	bl	8004a84 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	699b      	ldr	r3, [r3, #24]
 8004570:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	6a1b      	ldr	r3, [r3, #32]
 8004578:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	697a      	ldr	r2, [r7, #20]
 8004580:	4313      	orrs	r3, r2
 8004582:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800458a:	f023 0303 	bic.w	r3, r3, #3
 800458e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	689a      	ldr	r2, [r3, #8]
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	699b      	ldr	r3, [r3, #24]
 8004598:	021b      	lsls	r3, r3, #8
 800459a:	4313      	orrs	r3, r2
 800459c:	693a      	ldr	r2, [r7, #16]
 800459e:	4313      	orrs	r3, r2
 80045a0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80045a8:	f023 030c 	bic.w	r3, r3, #12
 80045ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80045b4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	68da      	ldr	r2, [r3, #12]
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	69db      	ldr	r3, [r3, #28]
 80045c2:	021b      	lsls	r3, r3, #8
 80045c4:	4313      	orrs	r3, r2
 80045c6:	693a      	ldr	r2, [r7, #16]
 80045c8:	4313      	orrs	r3, r2
 80045ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	691b      	ldr	r3, [r3, #16]
 80045d0:	011a      	lsls	r2, r3, #4
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	6a1b      	ldr	r3, [r3, #32]
 80045d6:	031b      	lsls	r3, r3, #12
 80045d8:	4313      	orrs	r3, r2
 80045da:	693a      	ldr	r2, [r7, #16]
 80045dc:	4313      	orrs	r3, r2
 80045de:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80045e6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80045ee:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	685a      	ldr	r2, [r3, #4]
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	695b      	ldr	r3, [r3, #20]
 80045f8:	011b      	lsls	r3, r3, #4
 80045fa:	4313      	orrs	r3, r2
 80045fc:	68fa      	ldr	r2, [r7, #12]
 80045fe:	4313      	orrs	r3, r2
 8004600:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	697a      	ldr	r2, [r7, #20]
 8004608:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	693a      	ldr	r2, [r7, #16]
 8004610:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	68fa      	ldr	r2, [r7, #12]
 8004618:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2201      	movs	r2, #1
 800461e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2201      	movs	r2, #1
 8004626:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2201      	movs	r2, #1
 800462e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2201      	movs	r2, #1
 8004636:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2201      	movs	r2, #1
 800463e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2201      	movs	r2, #1
 8004646:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800464a:	2300      	movs	r3, #0
}
 800464c:	4618      	mov	r0, r3
 800464e:	3718      	adds	r7, #24
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}

08004654 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b084      	sub	sp, #16
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004664:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800466c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004674:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800467c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d110      	bne.n	80046a6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004684:	7bfb      	ldrb	r3, [r7, #15]
 8004686:	2b01      	cmp	r3, #1
 8004688:	d102      	bne.n	8004690 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800468a:	7b7b      	ldrb	r3, [r7, #13]
 800468c:	2b01      	cmp	r3, #1
 800468e:	d001      	beq.n	8004694 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	e069      	b.n	8004768 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2202      	movs	r2, #2
 8004698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2202      	movs	r2, #2
 80046a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046a4:	e031      	b.n	800470a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	2b04      	cmp	r3, #4
 80046aa:	d110      	bne.n	80046ce <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80046ac:	7bbb      	ldrb	r3, [r7, #14]
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d102      	bne.n	80046b8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80046b2:	7b3b      	ldrb	r3, [r7, #12]
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d001      	beq.n	80046bc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	e055      	b.n	8004768 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2202      	movs	r2, #2
 80046c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2202      	movs	r2, #2
 80046c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80046cc:	e01d      	b.n	800470a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80046ce:	7bfb      	ldrb	r3, [r7, #15]
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d108      	bne.n	80046e6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80046d4:	7bbb      	ldrb	r3, [r7, #14]
 80046d6:	2b01      	cmp	r3, #1
 80046d8:	d105      	bne.n	80046e6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80046da:	7b7b      	ldrb	r3, [r7, #13]
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d102      	bne.n	80046e6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80046e0:	7b3b      	ldrb	r3, [r7, #12]
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d001      	beq.n	80046ea <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e03e      	b.n	8004768 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2202      	movs	r2, #2
 80046ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2202      	movs	r2, #2
 80046f6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2202      	movs	r2, #2
 80046fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2202      	movs	r2, #2
 8004706:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d003      	beq.n	8004718 <HAL_TIM_Encoder_Start+0xc4>
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	2b04      	cmp	r3, #4
 8004714:	d008      	beq.n	8004728 <HAL_TIM_Encoder_Start+0xd4>
 8004716:	e00f      	b.n	8004738 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	2201      	movs	r2, #1
 800471e:	2100      	movs	r1, #0
 8004720:	4618      	mov	r0, r3
 8004722:	f000 fc99 	bl	8005058 <TIM_CCxChannelCmd>
      break;
 8004726:	e016      	b.n	8004756 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	2201      	movs	r2, #1
 800472e:	2104      	movs	r1, #4
 8004730:	4618      	mov	r0, r3
 8004732:	f000 fc91 	bl	8005058 <TIM_CCxChannelCmd>
      break;
 8004736:	e00e      	b.n	8004756 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2201      	movs	r2, #1
 800473e:	2100      	movs	r1, #0
 8004740:	4618      	mov	r0, r3
 8004742:	f000 fc89 	bl	8005058 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	2201      	movs	r2, #1
 800474c:	2104      	movs	r1, #4
 800474e:	4618      	mov	r0, r3
 8004750:	f000 fc82 	bl	8005058 <TIM_CCxChannelCmd>
      break;
 8004754:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f042 0201 	orr.w	r2, r2, #1
 8004764:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004766:	2300      	movs	r3, #0
}
 8004768:	4618      	mov	r0, r3
 800476a:	3710      	adds	r7, #16
 800476c:	46bd      	mov	sp, r7
 800476e:	bd80      	pop	{r7, pc}

08004770 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b086      	sub	sp, #24
 8004774:	af00      	add	r7, sp, #0
 8004776:	60f8      	str	r0, [r7, #12]
 8004778:	60b9      	str	r1, [r7, #8]
 800477a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800477c:	2300      	movs	r3, #0
 800477e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004786:	2b01      	cmp	r3, #1
 8004788:	d101      	bne.n	800478e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800478a:	2302      	movs	r3, #2
 800478c:	e0ae      	b.n	80048ec <HAL_TIM_PWM_ConfigChannel+0x17c>
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2201      	movs	r2, #1
 8004792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2b0c      	cmp	r3, #12
 800479a:	f200 809f 	bhi.w	80048dc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800479e:	a201      	add	r2, pc, #4	; (adr r2, 80047a4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80047a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047a4:	080047d9 	.word	0x080047d9
 80047a8:	080048dd 	.word	0x080048dd
 80047ac:	080048dd 	.word	0x080048dd
 80047b0:	080048dd 	.word	0x080048dd
 80047b4:	08004819 	.word	0x08004819
 80047b8:	080048dd 	.word	0x080048dd
 80047bc:	080048dd 	.word	0x080048dd
 80047c0:	080048dd 	.word	0x080048dd
 80047c4:	0800485b 	.word	0x0800485b
 80047c8:	080048dd 	.word	0x080048dd
 80047cc:	080048dd 	.word	0x080048dd
 80047d0:	080048dd 	.word	0x080048dd
 80047d4:	0800489b 	.word	0x0800489b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	68b9      	ldr	r1, [r7, #8]
 80047de:	4618      	mov	r0, r3
 80047e0:	f000 f9f0 	bl	8004bc4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	699a      	ldr	r2, [r3, #24]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f042 0208 	orr.w	r2, r2, #8
 80047f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	699a      	ldr	r2, [r3, #24]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f022 0204 	bic.w	r2, r2, #4
 8004802:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	6999      	ldr	r1, [r3, #24]
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	691a      	ldr	r2, [r3, #16]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	430a      	orrs	r2, r1
 8004814:	619a      	str	r2, [r3, #24]
      break;
 8004816:	e064      	b.n	80048e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	68b9      	ldr	r1, [r7, #8]
 800481e:	4618      	mov	r0, r3
 8004820:	f000 fa40 	bl	8004ca4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	699a      	ldr	r2, [r3, #24]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004832:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	699a      	ldr	r2, [r3, #24]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004842:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	6999      	ldr	r1, [r3, #24]
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	691b      	ldr	r3, [r3, #16]
 800484e:	021a      	lsls	r2, r3, #8
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	430a      	orrs	r2, r1
 8004856:	619a      	str	r2, [r3, #24]
      break;
 8004858:	e043      	b.n	80048e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	68b9      	ldr	r1, [r7, #8]
 8004860:	4618      	mov	r0, r3
 8004862:	f000 fa95 	bl	8004d90 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	69da      	ldr	r2, [r3, #28]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f042 0208 	orr.w	r2, r2, #8
 8004874:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	69da      	ldr	r2, [r3, #28]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f022 0204 	bic.w	r2, r2, #4
 8004884:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	69d9      	ldr	r1, [r3, #28]
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	691a      	ldr	r2, [r3, #16]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	430a      	orrs	r2, r1
 8004896:	61da      	str	r2, [r3, #28]
      break;
 8004898:	e023      	b.n	80048e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	68b9      	ldr	r1, [r7, #8]
 80048a0:	4618      	mov	r0, r3
 80048a2:	f000 fae9 	bl	8004e78 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	69da      	ldr	r2, [r3, #28]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	69da      	ldr	r2, [r3, #28]
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	69d9      	ldr	r1, [r3, #28]
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	691b      	ldr	r3, [r3, #16]
 80048d0:	021a      	lsls	r2, r3, #8
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	430a      	orrs	r2, r1
 80048d8:	61da      	str	r2, [r3, #28]
      break;
 80048da:	e002      	b.n	80048e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	75fb      	strb	r3, [r7, #23]
      break;
 80048e0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2200      	movs	r2, #0
 80048e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80048ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3718      	adds	r7, #24
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}

080048f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b084      	sub	sp, #16
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048fe:	2300      	movs	r3, #0
 8004900:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004908:	2b01      	cmp	r3, #1
 800490a:	d101      	bne.n	8004910 <HAL_TIM_ConfigClockSource+0x1c>
 800490c:	2302      	movs	r3, #2
 800490e:	e0b4      	b.n	8004a7a <HAL_TIM_ConfigClockSource+0x186>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2201      	movs	r2, #1
 8004914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2202      	movs	r2, #2
 800491c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800492e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004936:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	68ba      	ldr	r2, [r7, #8]
 800493e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004948:	d03e      	beq.n	80049c8 <HAL_TIM_ConfigClockSource+0xd4>
 800494a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800494e:	f200 8087 	bhi.w	8004a60 <HAL_TIM_ConfigClockSource+0x16c>
 8004952:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004956:	f000 8086 	beq.w	8004a66 <HAL_TIM_ConfigClockSource+0x172>
 800495a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800495e:	d87f      	bhi.n	8004a60 <HAL_TIM_ConfigClockSource+0x16c>
 8004960:	2b70      	cmp	r3, #112	; 0x70
 8004962:	d01a      	beq.n	800499a <HAL_TIM_ConfigClockSource+0xa6>
 8004964:	2b70      	cmp	r3, #112	; 0x70
 8004966:	d87b      	bhi.n	8004a60 <HAL_TIM_ConfigClockSource+0x16c>
 8004968:	2b60      	cmp	r3, #96	; 0x60
 800496a:	d050      	beq.n	8004a0e <HAL_TIM_ConfigClockSource+0x11a>
 800496c:	2b60      	cmp	r3, #96	; 0x60
 800496e:	d877      	bhi.n	8004a60 <HAL_TIM_ConfigClockSource+0x16c>
 8004970:	2b50      	cmp	r3, #80	; 0x50
 8004972:	d03c      	beq.n	80049ee <HAL_TIM_ConfigClockSource+0xfa>
 8004974:	2b50      	cmp	r3, #80	; 0x50
 8004976:	d873      	bhi.n	8004a60 <HAL_TIM_ConfigClockSource+0x16c>
 8004978:	2b40      	cmp	r3, #64	; 0x40
 800497a:	d058      	beq.n	8004a2e <HAL_TIM_ConfigClockSource+0x13a>
 800497c:	2b40      	cmp	r3, #64	; 0x40
 800497e:	d86f      	bhi.n	8004a60 <HAL_TIM_ConfigClockSource+0x16c>
 8004980:	2b30      	cmp	r3, #48	; 0x30
 8004982:	d064      	beq.n	8004a4e <HAL_TIM_ConfigClockSource+0x15a>
 8004984:	2b30      	cmp	r3, #48	; 0x30
 8004986:	d86b      	bhi.n	8004a60 <HAL_TIM_ConfigClockSource+0x16c>
 8004988:	2b20      	cmp	r3, #32
 800498a:	d060      	beq.n	8004a4e <HAL_TIM_ConfigClockSource+0x15a>
 800498c:	2b20      	cmp	r3, #32
 800498e:	d867      	bhi.n	8004a60 <HAL_TIM_ConfigClockSource+0x16c>
 8004990:	2b00      	cmp	r3, #0
 8004992:	d05c      	beq.n	8004a4e <HAL_TIM_ConfigClockSource+0x15a>
 8004994:	2b10      	cmp	r3, #16
 8004996:	d05a      	beq.n	8004a4e <HAL_TIM_ConfigClockSource+0x15a>
 8004998:	e062      	b.n	8004a60 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6818      	ldr	r0, [r3, #0]
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	6899      	ldr	r1, [r3, #8]
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	685a      	ldr	r2, [r3, #4]
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	68db      	ldr	r3, [r3, #12]
 80049aa:	f000 fb35 	bl	8005018 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80049bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	68ba      	ldr	r2, [r7, #8]
 80049c4:	609a      	str	r2, [r3, #8]
      break;
 80049c6:	e04f      	b.n	8004a68 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6818      	ldr	r0, [r3, #0]
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	6899      	ldr	r1, [r3, #8]
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	685a      	ldr	r2, [r3, #4]
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	f000 fb1e 	bl	8005018 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	689a      	ldr	r2, [r3, #8]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80049ea:	609a      	str	r2, [r3, #8]
      break;
 80049ec:	e03c      	b.n	8004a68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6818      	ldr	r0, [r3, #0]
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	6859      	ldr	r1, [r3, #4]
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	461a      	mov	r2, r3
 80049fc:	f000 fa92 	bl	8004f24 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	2150      	movs	r1, #80	; 0x50
 8004a06:	4618      	mov	r0, r3
 8004a08:	f000 faeb 	bl	8004fe2 <TIM_ITRx_SetConfig>
      break;
 8004a0c:	e02c      	b.n	8004a68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6818      	ldr	r0, [r3, #0]
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	6859      	ldr	r1, [r3, #4]
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	461a      	mov	r2, r3
 8004a1c:	f000 fab1 	bl	8004f82 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	2160      	movs	r1, #96	; 0x60
 8004a26:	4618      	mov	r0, r3
 8004a28:	f000 fadb 	bl	8004fe2 <TIM_ITRx_SetConfig>
      break;
 8004a2c:	e01c      	b.n	8004a68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6818      	ldr	r0, [r3, #0]
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	6859      	ldr	r1, [r3, #4]
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	68db      	ldr	r3, [r3, #12]
 8004a3a:	461a      	mov	r2, r3
 8004a3c:	f000 fa72 	bl	8004f24 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	2140      	movs	r1, #64	; 0x40
 8004a46:	4618      	mov	r0, r3
 8004a48:	f000 facb 	bl	8004fe2 <TIM_ITRx_SetConfig>
      break;
 8004a4c:	e00c      	b.n	8004a68 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4619      	mov	r1, r3
 8004a58:	4610      	mov	r0, r2
 8004a5a:	f000 fac2 	bl	8004fe2 <TIM_ITRx_SetConfig>
      break;
 8004a5e:	e003      	b.n	8004a68 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	73fb      	strb	r3, [r7, #15]
      break;
 8004a64:	e000      	b.n	8004a68 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004a66:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2200      	movs	r2, #0
 8004a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3710      	adds	r7, #16
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}
	...

08004a84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b085      	sub	sp, #20
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
 8004a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	4a40      	ldr	r2, [pc, #256]	; (8004b98 <TIM_Base_SetConfig+0x114>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d013      	beq.n	8004ac4 <TIM_Base_SetConfig+0x40>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004aa2:	d00f      	beq.n	8004ac4 <TIM_Base_SetConfig+0x40>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	4a3d      	ldr	r2, [pc, #244]	; (8004b9c <TIM_Base_SetConfig+0x118>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d00b      	beq.n	8004ac4 <TIM_Base_SetConfig+0x40>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	4a3c      	ldr	r2, [pc, #240]	; (8004ba0 <TIM_Base_SetConfig+0x11c>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d007      	beq.n	8004ac4 <TIM_Base_SetConfig+0x40>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	4a3b      	ldr	r2, [pc, #236]	; (8004ba4 <TIM_Base_SetConfig+0x120>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d003      	beq.n	8004ac4 <TIM_Base_SetConfig+0x40>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	4a3a      	ldr	r2, [pc, #232]	; (8004ba8 <TIM_Base_SetConfig+0x124>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d108      	bne.n	8004ad6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	68fa      	ldr	r2, [r7, #12]
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	4a2f      	ldr	r2, [pc, #188]	; (8004b98 <TIM_Base_SetConfig+0x114>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d02b      	beq.n	8004b36 <TIM_Base_SetConfig+0xb2>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ae4:	d027      	beq.n	8004b36 <TIM_Base_SetConfig+0xb2>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	4a2c      	ldr	r2, [pc, #176]	; (8004b9c <TIM_Base_SetConfig+0x118>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d023      	beq.n	8004b36 <TIM_Base_SetConfig+0xb2>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	4a2b      	ldr	r2, [pc, #172]	; (8004ba0 <TIM_Base_SetConfig+0x11c>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d01f      	beq.n	8004b36 <TIM_Base_SetConfig+0xb2>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	4a2a      	ldr	r2, [pc, #168]	; (8004ba4 <TIM_Base_SetConfig+0x120>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d01b      	beq.n	8004b36 <TIM_Base_SetConfig+0xb2>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	4a29      	ldr	r2, [pc, #164]	; (8004ba8 <TIM_Base_SetConfig+0x124>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d017      	beq.n	8004b36 <TIM_Base_SetConfig+0xb2>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4a28      	ldr	r2, [pc, #160]	; (8004bac <TIM_Base_SetConfig+0x128>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d013      	beq.n	8004b36 <TIM_Base_SetConfig+0xb2>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4a27      	ldr	r2, [pc, #156]	; (8004bb0 <TIM_Base_SetConfig+0x12c>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d00f      	beq.n	8004b36 <TIM_Base_SetConfig+0xb2>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4a26      	ldr	r2, [pc, #152]	; (8004bb4 <TIM_Base_SetConfig+0x130>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d00b      	beq.n	8004b36 <TIM_Base_SetConfig+0xb2>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	4a25      	ldr	r2, [pc, #148]	; (8004bb8 <TIM_Base_SetConfig+0x134>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d007      	beq.n	8004b36 <TIM_Base_SetConfig+0xb2>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	4a24      	ldr	r2, [pc, #144]	; (8004bbc <TIM_Base_SetConfig+0x138>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d003      	beq.n	8004b36 <TIM_Base_SetConfig+0xb2>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4a23      	ldr	r2, [pc, #140]	; (8004bc0 <TIM_Base_SetConfig+0x13c>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d108      	bne.n	8004b48 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	68db      	ldr	r3, [r3, #12]
 8004b42:	68fa      	ldr	r2, [r7, #12]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	695b      	ldr	r3, [r3, #20]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	68fa      	ldr	r2, [r7, #12]
 8004b5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	689a      	ldr	r2, [r3, #8]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	4a0a      	ldr	r2, [pc, #40]	; (8004b98 <TIM_Base_SetConfig+0x114>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d003      	beq.n	8004b7c <TIM_Base_SetConfig+0xf8>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	4a0c      	ldr	r2, [pc, #48]	; (8004ba8 <TIM_Base_SetConfig+0x124>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d103      	bne.n	8004b84 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	691a      	ldr	r2, [r3, #16]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2201      	movs	r2, #1
 8004b88:	615a      	str	r2, [r3, #20]
}
 8004b8a:	bf00      	nop
 8004b8c:	3714      	adds	r7, #20
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr
 8004b96:	bf00      	nop
 8004b98:	40010000 	.word	0x40010000
 8004b9c:	40000400 	.word	0x40000400
 8004ba0:	40000800 	.word	0x40000800
 8004ba4:	40000c00 	.word	0x40000c00
 8004ba8:	40010400 	.word	0x40010400
 8004bac:	40014000 	.word	0x40014000
 8004bb0:	40014400 	.word	0x40014400
 8004bb4:	40014800 	.word	0x40014800
 8004bb8:	40001800 	.word	0x40001800
 8004bbc:	40001c00 	.word	0x40001c00
 8004bc0:	40002000 	.word	0x40002000

08004bc4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b087      	sub	sp, #28
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6a1b      	ldr	r3, [r3, #32]
 8004bd2:	f023 0201 	bic.w	r2, r3, #1
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6a1b      	ldr	r3, [r3, #32]
 8004bde:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	699b      	ldr	r3, [r3, #24]
 8004bea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f023 0303 	bic.w	r3, r3, #3
 8004bfa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	68fa      	ldr	r2, [r7, #12]
 8004c02:	4313      	orrs	r3, r2
 8004c04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	f023 0302 	bic.w	r3, r3, #2
 8004c0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	697a      	ldr	r2, [r7, #20]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	4a20      	ldr	r2, [pc, #128]	; (8004c9c <TIM_OC1_SetConfig+0xd8>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d003      	beq.n	8004c28 <TIM_OC1_SetConfig+0x64>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	4a1f      	ldr	r2, [pc, #124]	; (8004ca0 <TIM_OC1_SetConfig+0xdc>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d10c      	bne.n	8004c42 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	f023 0308 	bic.w	r3, r3, #8
 8004c2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	697a      	ldr	r2, [r7, #20]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	f023 0304 	bic.w	r3, r3, #4
 8004c40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	4a15      	ldr	r2, [pc, #84]	; (8004c9c <TIM_OC1_SetConfig+0xd8>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d003      	beq.n	8004c52 <TIM_OC1_SetConfig+0x8e>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	4a14      	ldr	r2, [pc, #80]	; (8004ca0 <TIM_OC1_SetConfig+0xdc>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d111      	bne.n	8004c76 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	695b      	ldr	r3, [r3, #20]
 8004c66:	693a      	ldr	r2, [r7, #16]
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	699b      	ldr	r3, [r3, #24]
 8004c70:	693a      	ldr	r2, [r7, #16]
 8004c72:	4313      	orrs	r3, r2
 8004c74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	693a      	ldr	r2, [r7, #16]
 8004c7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	68fa      	ldr	r2, [r7, #12]
 8004c80:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	685a      	ldr	r2, [r3, #4]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	697a      	ldr	r2, [r7, #20]
 8004c8e:	621a      	str	r2, [r3, #32]
}
 8004c90:	bf00      	nop
 8004c92:	371c      	adds	r7, #28
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr
 8004c9c:	40010000 	.word	0x40010000
 8004ca0:	40010400 	.word	0x40010400

08004ca4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b087      	sub	sp, #28
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a1b      	ldr	r3, [r3, #32]
 8004cb2:	f023 0210 	bic.w	r2, r3, #16
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6a1b      	ldr	r3, [r3, #32]
 8004cbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	699b      	ldr	r3, [r3, #24]
 8004cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	021b      	lsls	r3, r3, #8
 8004ce2:	68fa      	ldr	r2, [r7, #12]
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	f023 0320 	bic.w	r3, r3, #32
 8004cee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	011b      	lsls	r3, r3, #4
 8004cf6:	697a      	ldr	r2, [r7, #20]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	4a22      	ldr	r2, [pc, #136]	; (8004d88 <TIM_OC2_SetConfig+0xe4>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d003      	beq.n	8004d0c <TIM_OC2_SetConfig+0x68>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	4a21      	ldr	r2, [pc, #132]	; (8004d8c <TIM_OC2_SetConfig+0xe8>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d10d      	bne.n	8004d28 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	68db      	ldr	r3, [r3, #12]
 8004d18:	011b      	lsls	r3, r3, #4
 8004d1a:	697a      	ldr	r2, [r7, #20]
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d26:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	4a17      	ldr	r2, [pc, #92]	; (8004d88 <TIM_OC2_SetConfig+0xe4>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d003      	beq.n	8004d38 <TIM_OC2_SetConfig+0x94>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	4a16      	ldr	r2, [pc, #88]	; (8004d8c <TIM_OC2_SetConfig+0xe8>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d113      	bne.n	8004d60 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d3e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d46:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	695b      	ldr	r3, [r3, #20]
 8004d4c:	009b      	lsls	r3, r3, #2
 8004d4e:	693a      	ldr	r2, [r7, #16]
 8004d50:	4313      	orrs	r3, r2
 8004d52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	699b      	ldr	r3, [r3, #24]
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	693a      	ldr	r2, [r7, #16]
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	693a      	ldr	r2, [r7, #16]
 8004d64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	68fa      	ldr	r2, [r7, #12]
 8004d6a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	685a      	ldr	r2, [r3, #4]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	697a      	ldr	r2, [r7, #20]
 8004d78:	621a      	str	r2, [r3, #32]
}
 8004d7a:	bf00      	nop
 8004d7c:	371c      	adds	r7, #28
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr
 8004d86:	bf00      	nop
 8004d88:	40010000 	.word	0x40010000
 8004d8c:	40010400 	.word	0x40010400

08004d90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b087      	sub	sp, #28
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
 8004d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6a1b      	ldr	r3, [r3, #32]
 8004d9e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6a1b      	ldr	r3, [r3, #32]
 8004daa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	69db      	ldr	r3, [r3, #28]
 8004db6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f023 0303 	bic.w	r3, r3, #3
 8004dc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	68fa      	ldr	r2, [r7, #12]
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004dd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	021b      	lsls	r3, r3, #8
 8004de0:	697a      	ldr	r2, [r7, #20]
 8004de2:	4313      	orrs	r3, r2
 8004de4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	4a21      	ldr	r2, [pc, #132]	; (8004e70 <TIM_OC3_SetConfig+0xe0>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d003      	beq.n	8004df6 <TIM_OC3_SetConfig+0x66>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4a20      	ldr	r2, [pc, #128]	; (8004e74 <TIM_OC3_SetConfig+0xe4>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d10d      	bne.n	8004e12 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004dfc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	68db      	ldr	r3, [r3, #12]
 8004e02:	021b      	lsls	r3, r3, #8
 8004e04:	697a      	ldr	r2, [r7, #20]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4a16      	ldr	r2, [pc, #88]	; (8004e70 <TIM_OC3_SetConfig+0xe0>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d003      	beq.n	8004e22 <TIM_OC3_SetConfig+0x92>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	4a15      	ldr	r2, [pc, #84]	; (8004e74 <TIM_OC3_SetConfig+0xe4>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d113      	bne.n	8004e4a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	695b      	ldr	r3, [r3, #20]
 8004e36:	011b      	lsls	r3, r3, #4
 8004e38:	693a      	ldr	r2, [r7, #16]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	699b      	ldr	r3, [r3, #24]
 8004e42:	011b      	lsls	r3, r3, #4
 8004e44:	693a      	ldr	r2, [r7, #16]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	693a      	ldr	r2, [r7, #16]
 8004e4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	68fa      	ldr	r2, [r7, #12]
 8004e54:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	685a      	ldr	r2, [r3, #4]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	697a      	ldr	r2, [r7, #20]
 8004e62:	621a      	str	r2, [r3, #32]
}
 8004e64:	bf00      	nop
 8004e66:	371c      	adds	r7, #28
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr
 8004e70:	40010000 	.word	0x40010000
 8004e74:	40010400 	.word	0x40010400

08004e78 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b087      	sub	sp, #28
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6a1b      	ldr	r3, [r3, #32]
 8004e86:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6a1b      	ldr	r3, [r3, #32]
 8004e92:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	69db      	ldr	r3, [r3, #28]
 8004e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ea6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004eae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	021b      	lsls	r3, r3, #8
 8004eb6:	68fa      	ldr	r2, [r7, #12]
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ec2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	031b      	lsls	r3, r3, #12
 8004eca:	693a      	ldr	r2, [r7, #16]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	4a12      	ldr	r2, [pc, #72]	; (8004f1c <TIM_OC4_SetConfig+0xa4>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d003      	beq.n	8004ee0 <TIM_OC4_SetConfig+0x68>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	4a11      	ldr	r2, [pc, #68]	; (8004f20 <TIM_OC4_SetConfig+0xa8>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d109      	bne.n	8004ef4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ee6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	695b      	ldr	r3, [r3, #20]
 8004eec:	019b      	lsls	r3, r3, #6
 8004eee:	697a      	ldr	r2, [r7, #20]
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	697a      	ldr	r2, [r7, #20]
 8004ef8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	68fa      	ldr	r2, [r7, #12]
 8004efe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	685a      	ldr	r2, [r3, #4]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	693a      	ldr	r2, [r7, #16]
 8004f0c:	621a      	str	r2, [r3, #32]
}
 8004f0e:	bf00      	nop
 8004f10:	371c      	adds	r7, #28
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr
 8004f1a:	bf00      	nop
 8004f1c:	40010000 	.word	0x40010000
 8004f20:	40010400 	.word	0x40010400

08004f24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b087      	sub	sp, #28
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	60f8      	str	r0, [r7, #12]
 8004f2c:	60b9      	str	r1, [r7, #8]
 8004f2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	6a1b      	ldr	r3, [r3, #32]
 8004f34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	6a1b      	ldr	r3, [r3, #32]
 8004f3a:	f023 0201 	bic.w	r2, r3, #1
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	699b      	ldr	r3, [r3, #24]
 8004f46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	011b      	lsls	r3, r3, #4
 8004f54:	693a      	ldr	r2, [r7, #16]
 8004f56:	4313      	orrs	r3, r2
 8004f58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	f023 030a 	bic.w	r3, r3, #10
 8004f60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f62:	697a      	ldr	r2, [r7, #20]
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	4313      	orrs	r3, r2
 8004f68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	693a      	ldr	r2, [r7, #16]
 8004f6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	697a      	ldr	r2, [r7, #20]
 8004f74:	621a      	str	r2, [r3, #32]
}
 8004f76:	bf00      	nop
 8004f78:	371c      	adds	r7, #28
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f80:	4770      	bx	lr

08004f82 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f82:	b480      	push	{r7}
 8004f84:	b087      	sub	sp, #28
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	60f8      	str	r0, [r7, #12]
 8004f8a:	60b9      	str	r1, [r7, #8]
 8004f8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	6a1b      	ldr	r3, [r3, #32]
 8004f92:	f023 0210 	bic.w	r2, r3, #16
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	699b      	ldr	r3, [r3, #24]
 8004f9e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	6a1b      	ldr	r3, [r3, #32]
 8004fa4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004fac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	031b      	lsls	r3, r3, #12
 8004fb2:	697a      	ldr	r2, [r7, #20]
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004fb8:	693b      	ldr	r3, [r7, #16]
 8004fba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004fbe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	011b      	lsls	r3, r3, #4
 8004fc4:	693a      	ldr	r2, [r7, #16]
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	697a      	ldr	r2, [r7, #20]
 8004fce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	693a      	ldr	r2, [r7, #16]
 8004fd4:	621a      	str	r2, [r3, #32]
}
 8004fd6:	bf00      	nop
 8004fd8:	371c      	adds	r7, #28
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr

08004fe2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004fe2:	b480      	push	{r7}
 8004fe4:	b085      	sub	sp, #20
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	6078      	str	r0, [r7, #4]
 8004fea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ff8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ffa:	683a      	ldr	r2, [r7, #0]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	4313      	orrs	r3, r2
 8005000:	f043 0307 	orr.w	r3, r3, #7
 8005004:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	68fa      	ldr	r2, [r7, #12]
 800500a:	609a      	str	r2, [r3, #8]
}
 800500c:	bf00      	nop
 800500e:	3714      	adds	r7, #20
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr

08005018 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005018:	b480      	push	{r7}
 800501a:	b087      	sub	sp, #28
 800501c:	af00      	add	r7, sp, #0
 800501e:	60f8      	str	r0, [r7, #12]
 8005020:	60b9      	str	r1, [r7, #8]
 8005022:	607a      	str	r2, [r7, #4]
 8005024:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005032:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	021a      	lsls	r2, r3, #8
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	431a      	orrs	r2, r3
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	4313      	orrs	r3, r2
 8005040:	697a      	ldr	r2, [r7, #20]
 8005042:	4313      	orrs	r3, r2
 8005044:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	697a      	ldr	r2, [r7, #20]
 800504a:	609a      	str	r2, [r3, #8]
}
 800504c:	bf00      	nop
 800504e:	371c      	adds	r7, #28
 8005050:	46bd      	mov	sp, r7
 8005052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005056:	4770      	bx	lr

08005058 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005058:	b480      	push	{r7}
 800505a:	b087      	sub	sp, #28
 800505c:	af00      	add	r7, sp, #0
 800505e:	60f8      	str	r0, [r7, #12]
 8005060:	60b9      	str	r1, [r7, #8]
 8005062:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	f003 031f 	and.w	r3, r3, #31
 800506a:	2201      	movs	r2, #1
 800506c:	fa02 f303 	lsl.w	r3, r2, r3
 8005070:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	6a1a      	ldr	r2, [r3, #32]
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	43db      	mvns	r3, r3
 800507a:	401a      	ands	r2, r3
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6a1a      	ldr	r2, [r3, #32]
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	f003 031f 	and.w	r3, r3, #31
 800508a:	6879      	ldr	r1, [r7, #4]
 800508c:	fa01 f303 	lsl.w	r3, r1, r3
 8005090:	431a      	orrs	r2, r3
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	621a      	str	r2, [r3, #32]
}
 8005096:	bf00      	nop
 8005098:	371c      	adds	r7, #28
 800509a:	46bd      	mov	sp, r7
 800509c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a0:	4770      	bx	lr
	...

080050a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b085      	sub	sp, #20
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
 80050ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d101      	bne.n	80050bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80050b8:	2302      	movs	r3, #2
 80050ba:	e05a      	b.n	8005172 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2201      	movs	r2, #1
 80050c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2202      	movs	r2, #2
 80050c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	68fa      	ldr	r2, [r7, #12]
 80050ea:	4313      	orrs	r3, r2
 80050ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	68fa      	ldr	r2, [r7, #12]
 80050f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a21      	ldr	r2, [pc, #132]	; (8005180 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d022      	beq.n	8005146 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005108:	d01d      	beq.n	8005146 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a1d      	ldr	r2, [pc, #116]	; (8005184 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d018      	beq.n	8005146 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a1b      	ldr	r2, [pc, #108]	; (8005188 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d013      	beq.n	8005146 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a1a      	ldr	r2, [pc, #104]	; (800518c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d00e      	beq.n	8005146 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a18      	ldr	r2, [pc, #96]	; (8005190 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d009      	beq.n	8005146 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a17      	ldr	r2, [pc, #92]	; (8005194 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d004      	beq.n	8005146 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a15      	ldr	r2, [pc, #84]	; (8005198 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d10c      	bne.n	8005160 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800514c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	68ba      	ldr	r2, [r7, #8]
 8005154:	4313      	orrs	r3, r2
 8005156:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	68ba      	ldr	r2, [r7, #8]
 800515e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2201      	movs	r2, #1
 8005164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2200      	movs	r2, #0
 800516c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005170:	2300      	movs	r3, #0
}
 8005172:	4618      	mov	r0, r3
 8005174:	3714      	adds	r7, #20
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr
 800517e:	bf00      	nop
 8005180:	40010000 	.word	0x40010000
 8005184:	40000400 	.word	0x40000400
 8005188:	40000800 	.word	0x40000800
 800518c:	40000c00 	.word	0x40000c00
 8005190:	40010400 	.word	0x40010400
 8005194:	40014000 	.word	0x40014000
 8005198:	40001800 	.word	0x40001800

0800519c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800519c:	b480      	push	{r7}
 800519e:	b085      	sub	sp, #20
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
 80051a4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80051a6:	2300      	movs	r3, #0
 80051a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d101      	bne.n	80051b8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80051b4:	2302      	movs	r3, #2
 80051b6:	e03d      	b.n	8005234 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	68db      	ldr	r3, [r3, #12]
 80051ca:	4313      	orrs	r3, r2
 80051cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	4313      	orrs	r3, r2
 80051da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	4313      	orrs	r3, r2
 80051e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4313      	orrs	r3, r2
 80051f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	691b      	ldr	r3, [r3, #16]
 8005202:	4313      	orrs	r3, r2
 8005204:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	695b      	ldr	r3, [r3, #20]
 8005210:	4313      	orrs	r3, r2
 8005212:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	69db      	ldr	r3, [r3, #28]
 800521e:	4313      	orrs	r3, r2
 8005220:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	68fa      	ldr	r2, [r7, #12]
 8005228:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2200      	movs	r2, #0
 800522e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005232:	2300      	movs	r3, #0
}
 8005234:	4618      	mov	r0, r3
 8005236:	3714      	adds	r7, #20
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr

08005240 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b082      	sub	sp, #8
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d101      	bne.n	8005252 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	e03f      	b.n	80052d2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005258:	b2db      	uxtb	r3, r3
 800525a:	2b00      	cmp	r3, #0
 800525c:	d106      	bne.n	800526c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f7fc fece 	bl	8002008 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2224      	movs	r2, #36	; 0x24
 8005270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	68da      	ldr	r2, [r3, #12]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005282:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f000 fcdf 	bl	8005c48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	691a      	ldr	r2, [r3, #16]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005298:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	695a      	ldr	r2, [r3, #20]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80052a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	68da      	ldr	r2, [r3, #12]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80052b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2200      	movs	r2, #0
 80052be:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2220      	movs	r2, #32
 80052c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2220      	movs	r2, #32
 80052cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80052d0:	2300      	movs	r3, #0
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3708      	adds	r7, #8
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}

080052da <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80052da:	b580      	push	{r7, lr}
 80052dc:	b084      	sub	sp, #16
 80052de:	af00      	add	r7, sp, #0
 80052e0:	60f8      	str	r0, [r7, #12]
 80052e2:	60b9      	str	r1, [r7, #8]
 80052e4:	4613      	mov	r3, r2
 80052e6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052ee:	b2db      	uxtb	r3, r3
 80052f0:	2b20      	cmp	r3, #32
 80052f2:	d11d      	bne.n	8005330 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d002      	beq.n	8005300 <HAL_UART_Receive_IT+0x26>
 80052fa:	88fb      	ldrh	r3, [r7, #6]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d101      	bne.n	8005304 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005300:	2301      	movs	r3, #1
 8005302:	e016      	b.n	8005332 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800530a:	2b01      	cmp	r3, #1
 800530c:	d101      	bne.n	8005312 <HAL_UART_Receive_IT+0x38>
 800530e:	2302      	movs	r3, #2
 8005310:	e00f      	b.n	8005332 <HAL_UART_Receive_IT+0x58>
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2201      	movs	r2, #1
 8005316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2200      	movs	r2, #0
 800531e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005320:	88fb      	ldrh	r3, [r7, #6]
 8005322:	461a      	mov	r2, r3
 8005324:	68b9      	ldr	r1, [r7, #8]
 8005326:	68f8      	ldr	r0, [r7, #12]
 8005328:	f000 fab6 	bl	8005898 <UART_Start_Receive_IT>
 800532c:	4603      	mov	r3, r0
 800532e:	e000      	b.n	8005332 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005330:	2302      	movs	r3, #2
  }
}
 8005332:	4618      	mov	r0, r3
 8005334:	3710      	adds	r7, #16
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
	...

0800533c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b0ba      	sub	sp, #232	; 0xe8
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	68db      	ldr	r3, [r3, #12]
 8005354:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	695b      	ldr	r3, [r3, #20]
 800535e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005362:	2300      	movs	r3, #0
 8005364:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005368:	2300      	movs	r3, #0
 800536a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800536e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005372:	f003 030f 	and.w	r3, r3, #15
 8005376:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800537a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800537e:	2b00      	cmp	r3, #0
 8005380:	d10f      	bne.n	80053a2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005382:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005386:	f003 0320 	and.w	r3, r3, #32
 800538a:	2b00      	cmp	r3, #0
 800538c:	d009      	beq.n	80053a2 <HAL_UART_IRQHandler+0x66>
 800538e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005392:	f003 0320 	and.w	r3, r3, #32
 8005396:	2b00      	cmp	r3, #0
 8005398:	d003      	beq.n	80053a2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f000 fb99 	bl	8005ad2 <UART_Receive_IT>
      return;
 80053a0:	e256      	b.n	8005850 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80053a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	f000 80de 	beq.w	8005568 <HAL_UART_IRQHandler+0x22c>
 80053ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053b0:	f003 0301 	and.w	r3, r3, #1
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d106      	bne.n	80053c6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80053b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053bc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	f000 80d1 	beq.w	8005568 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80053c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053ca:	f003 0301 	and.w	r3, r3, #1
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d00b      	beq.n	80053ea <HAL_UART_IRQHandler+0xae>
 80053d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d005      	beq.n	80053ea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e2:	f043 0201 	orr.w	r2, r3, #1
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80053ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053ee:	f003 0304 	and.w	r3, r3, #4
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d00b      	beq.n	800540e <HAL_UART_IRQHandler+0xd2>
 80053f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053fa:	f003 0301 	and.w	r3, r3, #1
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d005      	beq.n	800540e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005406:	f043 0202 	orr.w	r2, r3, #2
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800540e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005412:	f003 0302 	and.w	r3, r3, #2
 8005416:	2b00      	cmp	r3, #0
 8005418:	d00b      	beq.n	8005432 <HAL_UART_IRQHandler+0xf6>
 800541a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800541e:	f003 0301 	and.w	r3, r3, #1
 8005422:	2b00      	cmp	r3, #0
 8005424:	d005      	beq.n	8005432 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800542a:	f043 0204 	orr.w	r2, r3, #4
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005432:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005436:	f003 0308 	and.w	r3, r3, #8
 800543a:	2b00      	cmp	r3, #0
 800543c:	d011      	beq.n	8005462 <HAL_UART_IRQHandler+0x126>
 800543e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005442:	f003 0320 	and.w	r3, r3, #32
 8005446:	2b00      	cmp	r3, #0
 8005448:	d105      	bne.n	8005456 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800544a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800544e:	f003 0301 	and.w	r3, r3, #1
 8005452:	2b00      	cmp	r3, #0
 8005454:	d005      	beq.n	8005462 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545a:	f043 0208 	orr.w	r2, r3, #8
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005466:	2b00      	cmp	r3, #0
 8005468:	f000 81ed 	beq.w	8005846 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800546c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005470:	f003 0320 	and.w	r3, r3, #32
 8005474:	2b00      	cmp	r3, #0
 8005476:	d008      	beq.n	800548a <HAL_UART_IRQHandler+0x14e>
 8005478:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800547c:	f003 0320 	and.w	r3, r3, #32
 8005480:	2b00      	cmp	r3, #0
 8005482:	d002      	beq.n	800548a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	f000 fb24 	bl	8005ad2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	695b      	ldr	r3, [r3, #20]
 8005490:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005494:	2b40      	cmp	r3, #64	; 0x40
 8005496:	bf0c      	ite	eq
 8005498:	2301      	moveq	r3, #1
 800549a:	2300      	movne	r3, #0
 800549c:	b2db      	uxtb	r3, r3
 800549e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a6:	f003 0308 	and.w	r3, r3, #8
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d103      	bne.n	80054b6 <HAL_UART_IRQHandler+0x17a>
 80054ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d04f      	beq.n	8005556 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f000 fa2c 	bl	8005914 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	695b      	ldr	r3, [r3, #20]
 80054c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054c6:	2b40      	cmp	r3, #64	; 0x40
 80054c8:	d141      	bne.n	800554e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	3314      	adds	r3, #20
 80054d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80054d8:	e853 3f00 	ldrex	r3, [r3]
 80054dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80054e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80054e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	3314      	adds	r3, #20
 80054f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80054f6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80054fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005502:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005506:	e841 2300 	strex	r3, r2, [r1]
 800550a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800550e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005512:	2b00      	cmp	r3, #0
 8005514:	d1d9      	bne.n	80054ca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800551a:	2b00      	cmp	r3, #0
 800551c:	d013      	beq.n	8005546 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005522:	4a7d      	ldr	r2, [pc, #500]	; (8005718 <HAL_UART_IRQHandler+0x3dc>)
 8005524:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800552a:	4618      	mov	r0, r3
 800552c:	f7fd f873 	bl	8002616 <HAL_DMA_Abort_IT>
 8005530:	4603      	mov	r3, r0
 8005532:	2b00      	cmp	r3, #0
 8005534:	d016      	beq.n	8005564 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800553a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800553c:	687a      	ldr	r2, [r7, #4]
 800553e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005540:	4610      	mov	r0, r2
 8005542:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005544:	e00e      	b.n	8005564 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f000 f990 	bl	800586c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800554c:	e00a      	b.n	8005564 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f000 f98c 	bl	800586c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005554:	e006      	b.n	8005564 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f000 f988 	bl	800586c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2200      	movs	r2, #0
 8005560:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005562:	e170      	b.n	8005846 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005564:	bf00      	nop
    return;
 8005566:	e16e      	b.n	8005846 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800556c:	2b01      	cmp	r3, #1
 800556e:	f040 814a 	bne.w	8005806 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005572:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005576:	f003 0310 	and.w	r3, r3, #16
 800557a:	2b00      	cmp	r3, #0
 800557c:	f000 8143 	beq.w	8005806 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005580:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005584:	f003 0310 	and.w	r3, r3, #16
 8005588:	2b00      	cmp	r3, #0
 800558a:	f000 813c 	beq.w	8005806 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800558e:	2300      	movs	r3, #0
 8005590:	60bb      	str	r3, [r7, #8]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	60bb      	str	r3, [r7, #8]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	60bb      	str	r3, [r7, #8]
 80055a2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	695b      	ldr	r3, [r3, #20]
 80055aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055ae:	2b40      	cmp	r3, #64	; 0x40
 80055b0:	f040 80b4 	bne.w	800571c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80055c0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	f000 8140 	beq.w	800584a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80055ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80055d2:	429a      	cmp	r2, r3
 80055d4:	f080 8139 	bcs.w	800584a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80055de:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055e4:	69db      	ldr	r3, [r3, #28]
 80055e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055ea:	f000 8088 	beq.w	80056fe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	330c      	adds	r3, #12
 80055f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80055fc:	e853 3f00 	ldrex	r3, [r3]
 8005600:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005604:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005608:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800560c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	330c      	adds	r3, #12
 8005616:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800561a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800561e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005622:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005626:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800562a:	e841 2300 	strex	r3, r2, [r1]
 800562e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005632:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005636:	2b00      	cmp	r3, #0
 8005638:	d1d9      	bne.n	80055ee <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	3314      	adds	r3, #20
 8005640:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005642:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005644:	e853 3f00 	ldrex	r3, [r3]
 8005648:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800564a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800564c:	f023 0301 	bic.w	r3, r3, #1
 8005650:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	3314      	adds	r3, #20
 800565a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800565e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005662:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005664:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005666:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800566a:	e841 2300 	strex	r3, r2, [r1]
 800566e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005670:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005672:	2b00      	cmp	r3, #0
 8005674:	d1e1      	bne.n	800563a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	3314      	adds	r3, #20
 800567c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800567e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005680:	e853 3f00 	ldrex	r3, [r3]
 8005684:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005686:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005688:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800568c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	3314      	adds	r3, #20
 8005696:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800569a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800569c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800569e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80056a0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80056a2:	e841 2300 	strex	r3, r2, [r1]
 80056a6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80056a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d1e3      	bne.n	8005676 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2220      	movs	r2, #32
 80056b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2200      	movs	r2, #0
 80056ba:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	330c      	adds	r3, #12
 80056c2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056c6:	e853 3f00 	ldrex	r3, [r3]
 80056ca:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80056cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056ce:	f023 0310 	bic.w	r3, r3, #16
 80056d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	330c      	adds	r3, #12
 80056dc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80056e0:	65ba      	str	r2, [r7, #88]	; 0x58
 80056e2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056e4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80056e6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80056e8:	e841 2300 	strex	r3, r2, [r1]
 80056ec:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80056ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d1e3      	bne.n	80056bc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056f8:	4618      	mov	r0, r3
 80056fa:	f7fc ff1c 	bl	8002536 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005706:	b29b      	uxth	r3, r3
 8005708:	1ad3      	subs	r3, r2, r3
 800570a:	b29b      	uxth	r3, r3
 800570c:	4619      	mov	r1, r3
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f000 f8b6 	bl	8005880 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005714:	e099      	b.n	800584a <HAL_UART_IRQHandler+0x50e>
 8005716:	bf00      	nop
 8005718:	080059db 	.word	0x080059db
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005724:	b29b      	uxth	r3, r3
 8005726:	1ad3      	subs	r3, r2, r3
 8005728:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005730:	b29b      	uxth	r3, r3
 8005732:	2b00      	cmp	r3, #0
 8005734:	f000 808b 	beq.w	800584e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005738:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800573c:	2b00      	cmp	r3, #0
 800573e:	f000 8086 	beq.w	800584e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	330c      	adds	r3, #12
 8005748:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800574a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800574c:	e853 3f00 	ldrex	r3, [r3]
 8005750:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005754:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005758:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	330c      	adds	r3, #12
 8005762:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005766:	647a      	str	r2, [r7, #68]	; 0x44
 8005768:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800576a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800576c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800576e:	e841 2300 	strex	r3, r2, [r1]
 8005772:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005774:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005776:	2b00      	cmp	r3, #0
 8005778:	d1e3      	bne.n	8005742 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	3314      	adds	r3, #20
 8005780:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005784:	e853 3f00 	ldrex	r3, [r3]
 8005788:	623b      	str	r3, [r7, #32]
   return(result);
 800578a:	6a3b      	ldr	r3, [r7, #32]
 800578c:	f023 0301 	bic.w	r3, r3, #1
 8005790:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	3314      	adds	r3, #20
 800579a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800579e:	633a      	str	r2, [r7, #48]	; 0x30
 80057a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80057a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057a6:	e841 2300 	strex	r3, r2, [r1]
 80057aa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80057ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d1e3      	bne.n	800577a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2220      	movs	r2, #32
 80057b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2200      	movs	r2, #0
 80057be:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	330c      	adds	r3, #12
 80057c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	e853 3f00 	ldrex	r3, [r3]
 80057ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	f023 0310 	bic.w	r3, r3, #16
 80057d6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	330c      	adds	r3, #12
 80057e0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80057e4:	61fa      	str	r2, [r7, #28]
 80057e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e8:	69b9      	ldr	r1, [r7, #24]
 80057ea:	69fa      	ldr	r2, [r7, #28]
 80057ec:	e841 2300 	strex	r3, r2, [r1]
 80057f0:	617b      	str	r3, [r7, #20]
   return(result);
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d1e3      	bne.n	80057c0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80057f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80057fc:	4619      	mov	r1, r3
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f000 f83e 	bl	8005880 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005804:	e023      	b.n	800584e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005806:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800580a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800580e:	2b00      	cmp	r3, #0
 8005810:	d009      	beq.n	8005826 <HAL_UART_IRQHandler+0x4ea>
 8005812:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800581a:	2b00      	cmp	r3, #0
 800581c:	d003      	beq.n	8005826 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f000 f8ef 	bl	8005a02 <UART_Transmit_IT>
    return;
 8005824:	e014      	b.n	8005850 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005826:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800582a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800582e:	2b00      	cmp	r3, #0
 8005830:	d00e      	beq.n	8005850 <HAL_UART_IRQHandler+0x514>
 8005832:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800583a:	2b00      	cmp	r3, #0
 800583c:	d008      	beq.n	8005850 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f000 f92f 	bl	8005aa2 <UART_EndTransmit_IT>
    return;
 8005844:	e004      	b.n	8005850 <HAL_UART_IRQHandler+0x514>
    return;
 8005846:	bf00      	nop
 8005848:	e002      	b.n	8005850 <HAL_UART_IRQHandler+0x514>
      return;
 800584a:	bf00      	nop
 800584c:	e000      	b.n	8005850 <HAL_UART_IRQHandler+0x514>
      return;
 800584e:	bf00      	nop
  }
}
 8005850:	37e8      	adds	r7, #232	; 0xe8
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}
 8005856:	bf00      	nop

08005858 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005858:	b480      	push	{r7}
 800585a:	b083      	sub	sp, #12
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005860:	bf00      	nop
 8005862:	370c      	adds	r7, #12
 8005864:	46bd      	mov	sp, r7
 8005866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586a:	4770      	bx	lr

0800586c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800586c:	b480      	push	{r7}
 800586e:	b083      	sub	sp, #12
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005874:	bf00      	nop
 8005876:	370c      	adds	r7, #12
 8005878:	46bd      	mov	sp, r7
 800587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587e:	4770      	bx	lr

08005880 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005880:	b480      	push	{r7}
 8005882:	b083      	sub	sp, #12
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	460b      	mov	r3, r1
 800588a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800588c:	bf00      	nop
 800588e:	370c      	adds	r7, #12
 8005890:	46bd      	mov	sp, r7
 8005892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005896:	4770      	bx	lr

08005898 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005898:	b480      	push	{r7}
 800589a:	b085      	sub	sp, #20
 800589c:	af00      	add	r7, sp, #0
 800589e:	60f8      	str	r0, [r7, #12]
 80058a0:	60b9      	str	r1, [r7, #8]
 80058a2:	4613      	mov	r3, r2
 80058a4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	68ba      	ldr	r2, [r7, #8]
 80058aa:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	88fa      	ldrh	r2, [r7, #6]
 80058b0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	88fa      	ldrh	r2, [r7, #6]
 80058b6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2200      	movs	r2, #0
 80058bc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2222      	movs	r2, #34	; 0x22
 80058c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2200      	movs	r2, #0
 80058ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	691b      	ldr	r3, [r3, #16]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d007      	beq.n	80058e6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	68da      	ldr	r2, [r3, #12]
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80058e4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	695a      	ldr	r2, [r3, #20]
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f042 0201 	orr.w	r2, r2, #1
 80058f4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	68da      	ldr	r2, [r3, #12]
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f042 0220 	orr.w	r2, r2, #32
 8005904:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005906:	2300      	movs	r3, #0
}
 8005908:	4618      	mov	r0, r3
 800590a:	3714      	adds	r7, #20
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr

08005914 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005914:	b480      	push	{r7}
 8005916:	b095      	sub	sp, #84	; 0x54
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	330c      	adds	r3, #12
 8005922:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005926:	e853 3f00 	ldrex	r3, [r3]
 800592a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800592c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800592e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005932:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	330c      	adds	r3, #12
 800593a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800593c:	643a      	str	r2, [r7, #64]	; 0x40
 800593e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005940:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005942:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005944:	e841 2300 	strex	r3, r2, [r1]
 8005948:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800594a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800594c:	2b00      	cmp	r3, #0
 800594e:	d1e5      	bne.n	800591c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	3314      	adds	r3, #20
 8005956:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005958:	6a3b      	ldr	r3, [r7, #32]
 800595a:	e853 3f00 	ldrex	r3, [r3]
 800595e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005960:	69fb      	ldr	r3, [r7, #28]
 8005962:	f023 0301 	bic.w	r3, r3, #1
 8005966:	64bb      	str	r3, [r7, #72]	; 0x48
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	3314      	adds	r3, #20
 800596e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005970:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005972:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005974:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005976:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005978:	e841 2300 	strex	r3, r2, [r1]
 800597c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800597e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005980:	2b00      	cmp	r3, #0
 8005982:	d1e5      	bne.n	8005950 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005988:	2b01      	cmp	r3, #1
 800598a:	d119      	bne.n	80059c0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	330c      	adds	r3, #12
 8005992:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	e853 3f00 	ldrex	r3, [r3]
 800599a:	60bb      	str	r3, [r7, #8]
   return(result);
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	f023 0310 	bic.w	r3, r3, #16
 80059a2:	647b      	str	r3, [r7, #68]	; 0x44
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	330c      	adds	r3, #12
 80059aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80059ac:	61ba      	str	r2, [r7, #24]
 80059ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059b0:	6979      	ldr	r1, [r7, #20]
 80059b2:	69ba      	ldr	r2, [r7, #24]
 80059b4:	e841 2300 	strex	r3, r2, [r1]
 80059b8:	613b      	str	r3, [r7, #16]
   return(result);
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d1e5      	bne.n	800598c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2220      	movs	r2, #32
 80059c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2200      	movs	r2, #0
 80059cc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80059ce:	bf00      	nop
 80059d0:	3754      	adds	r7, #84	; 0x54
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr

080059da <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80059da:	b580      	push	{r7, lr}
 80059dc:	b084      	sub	sp, #16
 80059de:	af00      	add	r7, sp, #0
 80059e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059e6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2200      	movs	r2, #0
 80059ec:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2200      	movs	r2, #0
 80059f2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80059f4:	68f8      	ldr	r0, [r7, #12]
 80059f6:	f7ff ff39 	bl	800586c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059fa:	bf00      	nop
 80059fc:	3710      	adds	r7, #16
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}

08005a02 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005a02:	b480      	push	{r7}
 8005a04:	b085      	sub	sp, #20
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a10:	b2db      	uxtb	r3, r3
 8005a12:	2b21      	cmp	r3, #33	; 0x21
 8005a14:	d13e      	bne.n	8005a94 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a1e:	d114      	bne.n	8005a4a <UART_Transmit_IT+0x48>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	691b      	ldr	r3, [r3, #16]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d110      	bne.n	8005a4a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6a1b      	ldr	r3, [r3, #32]
 8005a2c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	881b      	ldrh	r3, [r3, #0]
 8005a32:	461a      	mov	r2, r3
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a3c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6a1b      	ldr	r3, [r3, #32]
 8005a42:	1c9a      	adds	r2, r3, #2
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	621a      	str	r2, [r3, #32]
 8005a48:	e008      	b.n	8005a5c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6a1b      	ldr	r3, [r3, #32]
 8005a4e:	1c59      	adds	r1, r3, #1
 8005a50:	687a      	ldr	r2, [r7, #4]
 8005a52:	6211      	str	r1, [r2, #32]
 8005a54:	781a      	ldrb	r2, [r3, #0]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a60:	b29b      	uxth	r3, r3
 8005a62:	3b01      	subs	r3, #1
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	687a      	ldr	r2, [r7, #4]
 8005a68:	4619      	mov	r1, r3
 8005a6a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d10f      	bne.n	8005a90 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	68da      	ldr	r2, [r3, #12]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a7e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	68da      	ldr	r2, [r3, #12]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a8e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005a90:	2300      	movs	r3, #0
 8005a92:	e000      	b.n	8005a96 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005a94:	2302      	movs	r3, #2
  }
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3714      	adds	r7, #20
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr

08005aa2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005aa2:	b580      	push	{r7, lr}
 8005aa4:	b082      	sub	sp, #8
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	68da      	ldr	r2, [r3, #12]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ab8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2220      	movs	r2, #32
 8005abe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f7ff fec8 	bl	8005858 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005ac8:	2300      	movs	r3, #0
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3708      	adds	r7, #8
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}

08005ad2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005ad2:	b580      	push	{r7, lr}
 8005ad4:	b08c      	sub	sp, #48	; 0x30
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ae0:	b2db      	uxtb	r3, r3
 8005ae2:	2b22      	cmp	r3, #34	; 0x22
 8005ae4:	f040 80ab 	bne.w	8005c3e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005af0:	d117      	bne.n	8005b22 <UART_Receive_IT+0x50>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	691b      	ldr	r3, [r3, #16]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d113      	bne.n	8005b22 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005afa:	2300      	movs	r3, #0
 8005afc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b02:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	b29b      	uxth	r3, r3
 8005b0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b10:	b29a      	uxth	r2, r3
 8005b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b14:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b1a:	1c9a      	adds	r2, r3, #2
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	629a      	str	r2, [r3, #40]	; 0x28
 8005b20:	e026      	b.n	8005b70 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b26:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b34:	d007      	beq.n	8005b46 <UART_Receive_IT+0x74>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d10a      	bne.n	8005b54 <UART_Receive_IT+0x82>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	691b      	ldr	r3, [r3, #16]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d106      	bne.n	8005b54 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	b2da      	uxtb	r2, r3
 8005b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b50:	701a      	strb	r2, [r3, #0]
 8005b52:	e008      	b.n	8005b66 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	b2db      	uxtb	r3, r3
 8005b5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b60:	b2da      	uxtb	r2, r3
 8005b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b64:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b6a:	1c5a      	adds	r2, r3, #1
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005b74:	b29b      	uxth	r3, r3
 8005b76:	3b01      	subs	r3, #1
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	687a      	ldr	r2, [r7, #4]
 8005b7c:	4619      	mov	r1, r3
 8005b7e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d15a      	bne.n	8005c3a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	68da      	ldr	r2, [r3, #12]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f022 0220 	bic.w	r2, r2, #32
 8005b92:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	68da      	ldr	r2, [r3, #12]
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005ba2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	695a      	ldr	r2, [r3, #20]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f022 0201 	bic.w	r2, r2, #1
 8005bb2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2220      	movs	r2, #32
 8005bb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	d135      	bne.n	8005c30 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	330c      	adds	r3, #12
 8005bd0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	e853 3f00 	ldrex	r3, [r3]
 8005bd8:	613b      	str	r3, [r7, #16]
   return(result);
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	f023 0310 	bic.w	r3, r3, #16
 8005be0:	627b      	str	r3, [r7, #36]	; 0x24
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	330c      	adds	r3, #12
 8005be8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bea:	623a      	str	r2, [r7, #32]
 8005bec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bee:	69f9      	ldr	r1, [r7, #28]
 8005bf0:	6a3a      	ldr	r2, [r7, #32]
 8005bf2:	e841 2300 	strex	r3, r2, [r1]
 8005bf6:	61bb      	str	r3, [r7, #24]
   return(result);
 8005bf8:	69bb      	ldr	r3, [r7, #24]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d1e5      	bne.n	8005bca <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f003 0310 	and.w	r3, r3, #16
 8005c08:	2b10      	cmp	r3, #16
 8005c0a:	d10a      	bne.n	8005c22 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	60fb      	str	r3, [r7, #12]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	60fb      	str	r3, [r7, #12]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	60fb      	str	r3, [r7, #12]
 8005c20:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005c26:	4619      	mov	r1, r3
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f7ff fe29 	bl	8005880 <HAL_UARTEx_RxEventCallback>
 8005c2e:	e002      	b.n	8005c36 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f7fb fc3d 	bl	80014b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005c36:	2300      	movs	r3, #0
 8005c38:	e002      	b.n	8005c40 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	e000      	b.n	8005c40 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005c3e:	2302      	movs	r3, #2
  }
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3730      	adds	r7, #48	; 0x30
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}

08005c48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c4c:	b0c0      	sub	sp, #256	; 0x100
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	691b      	ldr	r3, [r3, #16]
 8005c5c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c64:	68d9      	ldr	r1, [r3, #12]
 8005c66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c6a:	681a      	ldr	r2, [r3, #0]
 8005c6c:	ea40 0301 	orr.w	r3, r0, r1
 8005c70:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005c72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c76:	689a      	ldr	r2, [r3, #8]
 8005c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c7c:	691b      	ldr	r3, [r3, #16]
 8005c7e:	431a      	orrs	r2, r3
 8005c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c84:	695b      	ldr	r3, [r3, #20]
 8005c86:	431a      	orrs	r2, r3
 8005c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c8c:	69db      	ldr	r3, [r3, #28]
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	68db      	ldr	r3, [r3, #12]
 8005c9c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005ca0:	f021 010c 	bic.w	r1, r1, #12
 8005ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005cae:	430b      	orrs	r3, r1
 8005cb0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005cb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	695b      	ldr	r3, [r3, #20]
 8005cba:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005cbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cc2:	6999      	ldr	r1, [r3, #24]
 8005cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cc8:	681a      	ldr	r2, [r3, #0]
 8005cca:	ea40 0301 	orr.w	r3, r0, r1
 8005cce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	4b8f      	ldr	r3, [pc, #572]	; (8005f14 <UART_SetConfig+0x2cc>)
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d005      	beq.n	8005ce8 <UART_SetConfig+0xa0>
 8005cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	4b8d      	ldr	r3, [pc, #564]	; (8005f18 <UART_SetConfig+0x2d0>)
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d104      	bne.n	8005cf2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005ce8:	f7fe fa8a 	bl	8004200 <HAL_RCC_GetPCLK2Freq>
 8005cec:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005cf0:	e003      	b.n	8005cfa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005cf2:	f7fe fa71 	bl	80041d8 <HAL_RCC_GetPCLK1Freq>
 8005cf6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005cfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cfe:	69db      	ldr	r3, [r3, #28]
 8005d00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d04:	f040 810c 	bne.w	8005f20 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005d08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005d12:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005d16:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005d1a:	4622      	mov	r2, r4
 8005d1c:	462b      	mov	r3, r5
 8005d1e:	1891      	adds	r1, r2, r2
 8005d20:	65b9      	str	r1, [r7, #88]	; 0x58
 8005d22:	415b      	adcs	r3, r3
 8005d24:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d26:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005d2a:	4621      	mov	r1, r4
 8005d2c:	eb12 0801 	adds.w	r8, r2, r1
 8005d30:	4629      	mov	r1, r5
 8005d32:	eb43 0901 	adc.w	r9, r3, r1
 8005d36:	f04f 0200 	mov.w	r2, #0
 8005d3a:	f04f 0300 	mov.w	r3, #0
 8005d3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005d42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005d46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005d4a:	4690      	mov	r8, r2
 8005d4c:	4699      	mov	r9, r3
 8005d4e:	4623      	mov	r3, r4
 8005d50:	eb18 0303 	adds.w	r3, r8, r3
 8005d54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005d58:	462b      	mov	r3, r5
 8005d5a:	eb49 0303 	adc.w	r3, r9, r3
 8005d5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005d62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005d6e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005d72:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005d76:	460b      	mov	r3, r1
 8005d78:	18db      	adds	r3, r3, r3
 8005d7a:	653b      	str	r3, [r7, #80]	; 0x50
 8005d7c:	4613      	mov	r3, r2
 8005d7e:	eb42 0303 	adc.w	r3, r2, r3
 8005d82:	657b      	str	r3, [r7, #84]	; 0x54
 8005d84:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005d88:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005d8c:	f7fa fe86 	bl	8000a9c <__aeabi_uldivmod>
 8005d90:	4602      	mov	r2, r0
 8005d92:	460b      	mov	r3, r1
 8005d94:	4b61      	ldr	r3, [pc, #388]	; (8005f1c <UART_SetConfig+0x2d4>)
 8005d96:	fba3 2302 	umull	r2, r3, r3, r2
 8005d9a:	095b      	lsrs	r3, r3, #5
 8005d9c:	011c      	lsls	r4, r3, #4
 8005d9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005da2:	2200      	movs	r2, #0
 8005da4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005da8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005dac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005db0:	4642      	mov	r2, r8
 8005db2:	464b      	mov	r3, r9
 8005db4:	1891      	adds	r1, r2, r2
 8005db6:	64b9      	str	r1, [r7, #72]	; 0x48
 8005db8:	415b      	adcs	r3, r3
 8005dba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005dbc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005dc0:	4641      	mov	r1, r8
 8005dc2:	eb12 0a01 	adds.w	sl, r2, r1
 8005dc6:	4649      	mov	r1, r9
 8005dc8:	eb43 0b01 	adc.w	fp, r3, r1
 8005dcc:	f04f 0200 	mov.w	r2, #0
 8005dd0:	f04f 0300 	mov.w	r3, #0
 8005dd4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005dd8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005ddc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005de0:	4692      	mov	sl, r2
 8005de2:	469b      	mov	fp, r3
 8005de4:	4643      	mov	r3, r8
 8005de6:	eb1a 0303 	adds.w	r3, sl, r3
 8005dea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005dee:	464b      	mov	r3, r9
 8005df0:	eb4b 0303 	adc.w	r3, fp, r3
 8005df4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005e04:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005e08:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005e0c:	460b      	mov	r3, r1
 8005e0e:	18db      	adds	r3, r3, r3
 8005e10:	643b      	str	r3, [r7, #64]	; 0x40
 8005e12:	4613      	mov	r3, r2
 8005e14:	eb42 0303 	adc.w	r3, r2, r3
 8005e18:	647b      	str	r3, [r7, #68]	; 0x44
 8005e1a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005e1e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005e22:	f7fa fe3b 	bl	8000a9c <__aeabi_uldivmod>
 8005e26:	4602      	mov	r2, r0
 8005e28:	460b      	mov	r3, r1
 8005e2a:	4611      	mov	r1, r2
 8005e2c:	4b3b      	ldr	r3, [pc, #236]	; (8005f1c <UART_SetConfig+0x2d4>)
 8005e2e:	fba3 2301 	umull	r2, r3, r3, r1
 8005e32:	095b      	lsrs	r3, r3, #5
 8005e34:	2264      	movs	r2, #100	; 0x64
 8005e36:	fb02 f303 	mul.w	r3, r2, r3
 8005e3a:	1acb      	subs	r3, r1, r3
 8005e3c:	00db      	lsls	r3, r3, #3
 8005e3e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005e42:	4b36      	ldr	r3, [pc, #216]	; (8005f1c <UART_SetConfig+0x2d4>)
 8005e44:	fba3 2302 	umull	r2, r3, r3, r2
 8005e48:	095b      	lsrs	r3, r3, #5
 8005e4a:	005b      	lsls	r3, r3, #1
 8005e4c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005e50:	441c      	add	r4, r3
 8005e52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e56:	2200      	movs	r2, #0
 8005e58:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005e5c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005e60:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005e64:	4642      	mov	r2, r8
 8005e66:	464b      	mov	r3, r9
 8005e68:	1891      	adds	r1, r2, r2
 8005e6a:	63b9      	str	r1, [r7, #56]	; 0x38
 8005e6c:	415b      	adcs	r3, r3
 8005e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e70:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005e74:	4641      	mov	r1, r8
 8005e76:	1851      	adds	r1, r2, r1
 8005e78:	6339      	str	r1, [r7, #48]	; 0x30
 8005e7a:	4649      	mov	r1, r9
 8005e7c:	414b      	adcs	r3, r1
 8005e7e:	637b      	str	r3, [r7, #52]	; 0x34
 8005e80:	f04f 0200 	mov.w	r2, #0
 8005e84:	f04f 0300 	mov.w	r3, #0
 8005e88:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005e8c:	4659      	mov	r1, fp
 8005e8e:	00cb      	lsls	r3, r1, #3
 8005e90:	4651      	mov	r1, sl
 8005e92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e96:	4651      	mov	r1, sl
 8005e98:	00ca      	lsls	r2, r1, #3
 8005e9a:	4610      	mov	r0, r2
 8005e9c:	4619      	mov	r1, r3
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	4642      	mov	r2, r8
 8005ea2:	189b      	adds	r3, r3, r2
 8005ea4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005ea8:	464b      	mov	r3, r9
 8005eaa:	460a      	mov	r2, r1
 8005eac:	eb42 0303 	adc.w	r3, r2, r3
 8005eb0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005ec0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005ec4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005ec8:	460b      	mov	r3, r1
 8005eca:	18db      	adds	r3, r3, r3
 8005ecc:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ece:	4613      	mov	r3, r2
 8005ed0:	eb42 0303 	adc.w	r3, r2, r3
 8005ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ed6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005eda:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005ede:	f7fa fddd 	bl	8000a9c <__aeabi_uldivmod>
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	460b      	mov	r3, r1
 8005ee6:	4b0d      	ldr	r3, [pc, #52]	; (8005f1c <UART_SetConfig+0x2d4>)
 8005ee8:	fba3 1302 	umull	r1, r3, r3, r2
 8005eec:	095b      	lsrs	r3, r3, #5
 8005eee:	2164      	movs	r1, #100	; 0x64
 8005ef0:	fb01 f303 	mul.w	r3, r1, r3
 8005ef4:	1ad3      	subs	r3, r2, r3
 8005ef6:	00db      	lsls	r3, r3, #3
 8005ef8:	3332      	adds	r3, #50	; 0x32
 8005efa:	4a08      	ldr	r2, [pc, #32]	; (8005f1c <UART_SetConfig+0x2d4>)
 8005efc:	fba2 2303 	umull	r2, r3, r2, r3
 8005f00:	095b      	lsrs	r3, r3, #5
 8005f02:	f003 0207 	and.w	r2, r3, #7
 8005f06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4422      	add	r2, r4
 8005f0e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005f10:	e105      	b.n	800611e <UART_SetConfig+0x4d6>
 8005f12:	bf00      	nop
 8005f14:	40011000 	.word	0x40011000
 8005f18:	40011400 	.word	0x40011400
 8005f1c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005f20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f24:	2200      	movs	r2, #0
 8005f26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005f2a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005f2e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005f32:	4642      	mov	r2, r8
 8005f34:	464b      	mov	r3, r9
 8005f36:	1891      	adds	r1, r2, r2
 8005f38:	6239      	str	r1, [r7, #32]
 8005f3a:	415b      	adcs	r3, r3
 8005f3c:	627b      	str	r3, [r7, #36]	; 0x24
 8005f3e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005f42:	4641      	mov	r1, r8
 8005f44:	1854      	adds	r4, r2, r1
 8005f46:	4649      	mov	r1, r9
 8005f48:	eb43 0501 	adc.w	r5, r3, r1
 8005f4c:	f04f 0200 	mov.w	r2, #0
 8005f50:	f04f 0300 	mov.w	r3, #0
 8005f54:	00eb      	lsls	r3, r5, #3
 8005f56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005f5a:	00e2      	lsls	r2, r4, #3
 8005f5c:	4614      	mov	r4, r2
 8005f5e:	461d      	mov	r5, r3
 8005f60:	4643      	mov	r3, r8
 8005f62:	18e3      	adds	r3, r4, r3
 8005f64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005f68:	464b      	mov	r3, r9
 8005f6a:	eb45 0303 	adc.w	r3, r5, r3
 8005f6e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005f72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005f7e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005f82:	f04f 0200 	mov.w	r2, #0
 8005f86:	f04f 0300 	mov.w	r3, #0
 8005f8a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005f8e:	4629      	mov	r1, r5
 8005f90:	008b      	lsls	r3, r1, #2
 8005f92:	4621      	mov	r1, r4
 8005f94:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f98:	4621      	mov	r1, r4
 8005f9a:	008a      	lsls	r2, r1, #2
 8005f9c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005fa0:	f7fa fd7c 	bl	8000a9c <__aeabi_uldivmod>
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	460b      	mov	r3, r1
 8005fa8:	4b60      	ldr	r3, [pc, #384]	; (800612c <UART_SetConfig+0x4e4>)
 8005faa:	fba3 2302 	umull	r2, r3, r3, r2
 8005fae:	095b      	lsrs	r3, r3, #5
 8005fb0:	011c      	lsls	r4, r3, #4
 8005fb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005fbc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005fc0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005fc4:	4642      	mov	r2, r8
 8005fc6:	464b      	mov	r3, r9
 8005fc8:	1891      	adds	r1, r2, r2
 8005fca:	61b9      	str	r1, [r7, #24]
 8005fcc:	415b      	adcs	r3, r3
 8005fce:	61fb      	str	r3, [r7, #28]
 8005fd0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005fd4:	4641      	mov	r1, r8
 8005fd6:	1851      	adds	r1, r2, r1
 8005fd8:	6139      	str	r1, [r7, #16]
 8005fda:	4649      	mov	r1, r9
 8005fdc:	414b      	adcs	r3, r1
 8005fde:	617b      	str	r3, [r7, #20]
 8005fe0:	f04f 0200 	mov.w	r2, #0
 8005fe4:	f04f 0300 	mov.w	r3, #0
 8005fe8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005fec:	4659      	mov	r1, fp
 8005fee:	00cb      	lsls	r3, r1, #3
 8005ff0:	4651      	mov	r1, sl
 8005ff2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ff6:	4651      	mov	r1, sl
 8005ff8:	00ca      	lsls	r2, r1, #3
 8005ffa:	4610      	mov	r0, r2
 8005ffc:	4619      	mov	r1, r3
 8005ffe:	4603      	mov	r3, r0
 8006000:	4642      	mov	r2, r8
 8006002:	189b      	adds	r3, r3, r2
 8006004:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006008:	464b      	mov	r3, r9
 800600a:	460a      	mov	r2, r1
 800600c:	eb42 0303 	adc.w	r3, r2, r3
 8006010:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	2200      	movs	r2, #0
 800601c:	67bb      	str	r3, [r7, #120]	; 0x78
 800601e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006020:	f04f 0200 	mov.w	r2, #0
 8006024:	f04f 0300 	mov.w	r3, #0
 8006028:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800602c:	4649      	mov	r1, r9
 800602e:	008b      	lsls	r3, r1, #2
 8006030:	4641      	mov	r1, r8
 8006032:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006036:	4641      	mov	r1, r8
 8006038:	008a      	lsls	r2, r1, #2
 800603a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800603e:	f7fa fd2d 	bl	8000a9c <__aeabi_uldivmod>
 8006042:	4602      	mov	r2, r0
 8006044:	460b      	mov	r3, r1
 8006046:	4b39      	ldr	r3, [pc, #228]	; (800612c <UART_SetConfig+0x4e4>)
 8006048:	fba3 1302 	umull	r1, r3, r3, r2
 800604c:	095b      	lsrs	r3, r3, #5
 800604e:	2164      	movs	r1, #100	; 0x64
 8006050:	fb01 f303 	mul.w	r3, r1, r3
 8006054:	1ad3      	subs	r3, r2, r3
 8006056:	011b      	lsls	r3, r3, #4
 8006058:	3332      	adds	r3, #50	; 0x32
 800605a:	4a34      	ldr	r2, [pc, #208]	; (800612c <UART_SetConfig+0x4e4>)
 800605c:	fba2 2303 	umull	r2, r3, r2, r3
 8006060:	095b      	lsrs	r3, r3, #5
 8006062:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006066:	441c      	add	r4, r3
 8006068:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800606c:	2200      	movs	r2, #0
 800606e:	673b      	str	r3, [r7, #112]	; 0x70
 8006070:	677a      	str	r2, [r7, #116]	; 0x74
 8006072:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006076:	4642      	mov	r2, r8
 8006078:	464b      	mov	r3, r9
 800607a:	1891      	adds	r1, r2, r2
 800607c:	60b9      	str	r1, [r7, #8]
 800607e:	415b      	adcs	r3, r3
 8006080:	60fb      	str	r3, [r7, #12]
 8006082:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006086:	4641      	mov	r1, r8
 8006088:	1851      	adds	r1, r2, r1
 800608a:	6039      	str	r1, [r7, #0]
 800608c:	4649      	mov	r1, r9
 800608e:	414b      	adcs	r3, r1
 8006090:	607b      	str	r3, [r7, #4]
 8006092:	f04f 0200 	mov.w	r2, #0
 8006096:	f04f 0300 	mov.w	r3, #0
 800609a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800609e:	4659      	mov	r1, fp
 80060a0:	00cb      	lsls	r3, r1, #3
 80060a2:	4651      	mov	r1, sl
 80060a4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80060a8:	4651      	mov	r1, sl
 80060aa:	00ca      	lsls	r2, r1, #3
 80060ac:	4610      	mov	r0, r2
 80060ae:	4619      	mov	r1, r3
 80060b0:	4603      	mov	r3, r0
 80060b2:	4642      	mov	r2, r8
 80060b4:	189b      	adds	r3, r3, r2
 80060b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80060b8:	464b      	mov	r3, r9
 80060ba:	460a      	mov	r2, r1
 80060bc:	eb42 0303 	adc.w	r3, r2, r3
 80060c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80060c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	2200      	movs	r2, #0
 80060ca:	663b      	str	r3, [r7, #96]	; 0x60
 80060cc:	667a      	str	r2, [r7, #100]	; 0x64
 80060ce:	f04f 0200 	mov.w	r2, #0
 80060d2:	f04f 0300 	mov.w	r3, #0
 80060d6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80060da:	4649      	mov	r1, r9
 80060dc:	008b      	lsls	r3, r1, #2
 80060de:	4641      	mov	r1, r8
 80060e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80060e4:	4641      	mov	r1, r8
 80060e6:	008a      	lsls	r2, r1, #2
 80060e8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80060ec:	f7fa fcd6 	bl	8000a9c <__aeabi_uldivmod>
 80060f0:	4602      	mov	r2, r0
 80060f2:	460b      	mov	r3, r1
 80060f4:	4b0d      	ldr	r3, [pc, #52]	; (800612c <UART_SetConfig+0x4e4>)
 80060f6:	fba3 1302 	umull	r1, r3, r3, r2
 80060fa:	095b      	lsrs	r3, r3, #5
 80060fc:	2164      	movs	r1, #100	; 0x64
 80060fe:	fb01 f303 	mul.w	r3, r1, r3
 8006102:	1ad3      	subs	r3, r2, r3
 8006104:	011b      	lsls	r3, r3, #4
 8006106:	3332      	adds	r3, #50	; 0x32
 8006108:	4a08      	ldr	r2, [pc, #32]	; (800612c <UART_SetConfig+0x4e4>)
 800610a:	fba2 2303 	umull	r2, r3, r2, r3
 800610e:	095b      	lsrs	r3, r3, #5
 8006110:	f003 020f 	and.w	r2, r3, #15
 8006114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4422      	add	r2, r4
 800611c:	609a      	str	r2, [r3, #8]
}
 800611e:	bf00      	nop
 8006120:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006124:	46bd      	mov	sp, r7
 8006126:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800612a:	bf00      	nop
 800612c:	51eb851f 	.word	0x51eb851f

08006130 <__NVIC_SetPriority>:
{
 8006130:	b480      	push	{r7}
 8006132:	b083      	sub	sp, #12
 8006134:	af00      	add	r7, sp, #0
 8006136:	4603      	mov	r3, r0
 8006138:	6039      	str	r1, [r7, #0]
 800613a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800613c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006140:	2b00      	cmp	r3, #0
 8006142:	db0a      	blt.n	800615a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	b2da      	uxtb	r2, r3
 8006148:	490c      	ldr	r1, [pc, #48]	; (800617c <__NVIC_SetPriority+0x4c>)
 800614a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800614e:	0112      	lsls	r2, r2, #4
 8006150:	b2d2      	uxtb	r2, r2
 8006152:	440b      	add	r3, r1
 8006154:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006158:	e00a      	b.n	8006170 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	b2da      	uxtb	r2, r3
 800615e:	4908      	ldr	r1, [pc, #32]	; (8006180 <__NVIC_SetPriority+0x50>)
 8006160:	79fb      	ldrb	r3, [r7, #7]
 8006162:	f003 030f 	and.w	r3, r3, #15
 8006166:	3b04      	subs	r3, #4
 8006168:	0112      	lsls	r2, r2, #4
 800616a:	b2d2      	uxtb	r2, r2
 800616c:	440b      	add	r3, r1
 800616e:	761a      	strb	r2, [r3, #24]
}
 8006170:	bf00      	nop
 8006172:	370c      	adds	r7, #12
 8006174:	46bd      	mov	sp, r7
 8006176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617a:	4770      	bx	lr
 800617c:	e000e100 	.word	0xe000e100
 8006180:	e000ed00 	.word	0xe000ed00

08006184 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006184:	b580      	push	{r7, lr}
 8006186:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006188:	2100      	movs	r1, #0
 800618a:	f06f 0004 	mvn.w	r0, #4
 800618e:	f7ff ffcf 	bl	8006130 <__NVIC_SetPriority>
#endif
}
 8006192:	bf00      	nop
 8006194:	bd80      	pop	{r7, pc}
	...

08006198 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006198:	b480      	push	{r7}
 800619a:	b083      	sub	sp, #12
 800619c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800619e:	f3ef 8305 	mrs	r3, IPSR
 80061a2:	603b      	str	r3, [r7, #0]
  return(result);
 80061a4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d003      	beq.n	80061b2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80061aa:	f06f 0305 	mvn.w	r3, #5
 80061ae:	607b      	str	r3, [r7, #4]
 80061b0:	e00c      	b.n	80061cc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80061b2:	4b0a      	ldr	r3, [pc, #40]	; (80061dc <osKernelInitialize+0x44>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d105      	bne.n	80061c6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80061ba:	4b08      	ldr	r3, [pc, #32]	; (80061dc <osKernelInitialize+0x44>)
 80061bc:	2201      	movs	r2, #1
 80061be:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80061c0:	2300      	movs	r3, #0
 80061c2:	607b      	str	r3, [r7, #4]
 80061c4:	e002      	b.n	80061cc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80061c6:	f04f 33ff 	mov.w	r3, #4294967295
 80061ca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80061cc:	687b      	ldr	r3, [r7, #4]
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	370c      	adds	r7, #12
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	4770      	bx	lr
 80061da:	bf00      	nop
 80061dc:	200002c0 	.word	0x200002c0

080061e0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b082      	sub	sp, #8
 80061e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80061e6:	f3ef 8305 	mrs	r3, IPSR
 80061ea:	603b      	str	r3, [r7, #0]
  return(result);
 80061ec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d003      	beq.n	80061fa <osKernelStart+0x1a>
    stat = osErrorISR;
 80061f2:	f06f 0305 	mvn.w	r3, #5
 80061f6:	607b      	str	r3, [r7, #4]
 80061f8:	e010      	b.n	800621c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80061fa:	4b0b      	ldr	r3, [pc, #44]	; (8006228 <osKernelStart+0x48>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	2b01      	cmp	r3, #1
 8006200:	d109      	bne.n	8006216 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006202:	f7ff ffbf 	bl	8006184 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006206:	4b08      	ldr	r3, [pc, #32]	; (8006228 <osKernelStart+0x48>)
 8006208:	2202      	movs	r2, #2
 800620a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800620c:	f001 fd4c 	bl	8007ca8 <vTaskStartScheduler>
      stat = osOK;
 8006210:	2300      	movs	r3, #0
 8006212:	607b      	str	r3, [r7, #4]
 8006214:	e002      	b.n	800621c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006216:	f04f 33ff 	mov.w	r3, #4294967295
 800621a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800621c:	687b      	ldr	r3, [r7, #4]
}
 800621e:	4618      	mov	r0, r3
 8006220:	3708      	adds	r7, #8
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}
 8006226:	bf00      	nop
 8006228:	200002c0 	.word	0x200002c0

0800622c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800622c:	b580      	push	{r7, lr}
 800622e:	b08e      	sub	sp, #56	; 0x38
 8006230:	af04      	add	r7, sp, #16
 8006232:	60f8      	str	r0, [r7, #12]
 8006234:	60b9      	str	r1, [r7, #8]
 8006236:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006238:	2300      	movs	r3, #0
 800623a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800623c:	f3ef 8305 	mrs	r3, IPSR
 8006240:	617b      	str	r3, [r7, #20]
  return(result);
 8006242:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006244:	2b00      	cmp	r3, #0
 8006246:	d17e      	bne.n	8006346 <osThreadNew+0x11a>
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d07b      	beq.n	8006346 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800624e:	2380      	movs	r3, #128	; 0x80
 8006250:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006252:	2318      	movs	r3, #24
 8006254:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006256:	2300      	movs	r3, #0
 8006258:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800625a:	f04f 33ff 	mov.w	r3, #4294967295
 800625e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d045      	beq.n	80062f2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d002      	beq.n	8006274 <osThreadNew+0x48>
        name = attr->name;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	699b      	ldr	r3, [r3, #24]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d002      	beq.n	8006282 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	699b      	ldr	r3, [r3, #24]
 8006280:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006282:	69fb      	ldr	r3, [r7, #28]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d008      	beq.n	800629a <osThreadNew+0x6e>
 8006288:	69fb      	ldr	r3, [r7, #28]
 800628a:	2b38      	cmp	r3, #56	; 0x38
 800628c:	d805      	bhi.n	800629a <osThreadNew+0x6e>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	f003 0301 	and.w	r3, r3, #1
 8006296:	2b00      	cmp	r3, #0
 8006298:	d001      	beq.n	800629e <osThreadNew+0x72>
        return (NULL);
 800629a:	2300      	movs	r3, #0
 800629c:	e054      	b.n	8006348 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	695b      	ldr	r3, [r3, #20]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d003      	beq.n	80062ae <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	695b      	ldr	r3, [r3, #20]
 80062aa:	089b      	lsrs	r3, r3, #2
 80062ac:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d00e      	beq.n	80062d4 <osThreadNew+0xa8>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	68db      	ldr	r3, [r3, #12]
 80062ba:	2b5b      	cmp	r3, #91	; 0x5b
 80062bc:	d90a      	bls.n	80062d4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d006      	beq.n	80062d4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	695b      	ldr	r3, [r3, #20]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d002      	beq.n	80062d4 <osThreadNew+0xa8>
        mem = 1;
 80062ce:	2301      	movs	r3, #1
 80062d0:	61bb      	str	r3, [r7, #24]
 80062d2:	e010      	b.n	80062f6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d10c      	bne.n	80062f6 <osThreadNew+0xca>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	68db      	ldr	r3, [r3, #12]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d108      	bne.n	80062f6 <osThreadNew+0xca>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	691b      	ldr	r3, [r3, #16]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d104      	bne.n	80062f6 <osThreadNew+0xca>
          mem = 0;
 80062ec:	2300      	movs	r3, #0
 80062ee:	61bb      	str	r3, [r7, #24]
 80062f0:	e001      	b.n	80062f6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80062f2:	2300      	movs	r3, #0
 80062f4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80062f6:	69bb      	ldr	r3, [r7, #24]
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	d110      	bne.n	800631e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006300:	687a      	ldr	r2, [r7, #4]
 8006302:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006304:	9202      	str	r2, [sp, #8]
 8006306:	9301      	str	r3, [sp, #4]
 8006308:	69fb      	ldr	r3, [r7, #28]
 800630a:	9300      	str	r3, [sp, #0]
 800630c:	68bb      	ldr	r3, [r7, #8]
 800630e:	6a3a      	ldr	r2, [r7, #32]
 8006310:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006312:	68f8      	ldr	r0, [r7, #12]
 8006314:	f001 fa74 	bl	8007800 <xTaskCreateStatic>
 8006318:	4603      	mov	r3, r0
 800631a:	613b      	str	r3, [r7, #16]
 800631c:	e013      	b.n	8006346 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800631e:	69bb      	ldr	r3, [r7, #24]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d110      	bne.n	8006346 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006324:	6a3b      	ldr	r3, [r7, #32]
 8006326:	b29a      	uxth	r2, r3
 8006328:	f107 0310 	add.w	r3, r7, #16
 800632c:	9301      	str	r3, [sp, #4]
 800632e:	69fb      	ldr	r3, [r7, #28]
 8006330:	9300      	str	r3, [sp, #0]
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006336:	68f8      	ldr	r0, [r7, #12]
 8006338:	f001 fabf 	bl	80078ba <xTaskCreate>
 800633c:	4603      	mov	r3, r0
 800633e:	2b01      	cmp	r3, #1
 8006340:	d001      	beq.n	8006346 <osThreadNew+0x11a>
            hTask = NULL;
 8006342:	2300      	movs	r3, #0
 8006344:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006346:	693b      	ldr	r3, [r7, #16]
}
 8006348:	4618      	mov	r0, r3
 800634a:	3728      	adds	r7, #40	; 0x28
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}

08006350 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006350:	b580      	push	{r7, lr}
 8006352:	b084      	sub	sp, #16
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006358:	f3ef 8305 	mrs	r3, IPSR
 800635c:	60bb      	str	r3, [r7, #8]
  return(result);
 800635e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006360:	2b00      	cmp	r3, #0
 8006362:	d003      	beq.n	800636c <osDelay+0x1c>
    stat = osErrorISR;
 8006364:	f06f 0305 	mvn.w	r3, #5
 8006368:	60fb      	str	r3, [r7, #12]
 800636a:	e007      	b.n	800637c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800636c:	2300      	movs	r3, #0
 800636e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d002      	beq.n	800637c <osDelay+0x2c>
      vTaskDelay(ticks);
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f001 fc62 	bl	8007c40 <vTaskDelay>
    }
  }

  return (stat);
 800637c:	68fb      	ldr	r3, [r7, #12]
}
 800637e:	4618      	mov	r0, r3
 8006380:	3710      	adds	r7, #16
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}

08006386 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 8006386:	b580      	push	{r7, lr}
 8006388:	b086      	sub	sp, #24
 800638a:	af00      	add	r7, sp, #0
 800638c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800638e:	f3ef 8305 	mrs	r3, IPSR
 8006392:	60fb      	str	r3, [r7, #12]
  return(result);
 8006394:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 8006396:	2b00      	cmp	r3, #0
 8006398:	d003      	beq.n	80063a2 <osDelayUntil+0x1c>
    stat = osErrorISR;
 800639a:	f06f 0305 	mvn.w	r3, #5
 800639e:	617b      	str	r3, [r7, #20]
 80063a0:	e019      	b.n	80063d6 <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 80063a2:	2300      	movs	r3, #0
 80063a4:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 80063a6:	f001 fd91 	bl	8007ecc <xTaskGetTickCount>
 80063aa:	4603      	mov	r3, r0
 80063ac:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	687a      	ldr	r2, [r7, #4]
 80063b2:	1ad3      	subs	r3, r2, r3
 80063b4:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d009      	beq.n	80063d0 <osDelayUntil+0x4a>
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	db06      	blt.n	80063d0 <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 80063c2:	f107 0308 	add.w	r3, r7, #8
 80063c6:	6939      	ldr	r1, [r7, #16]
 80063c8:	4618      	mov	r0, r3
 80063ca:	f001 fbbb 	bl	8007b44 <vTaskDelayUntil>
 80063ce:	e002      	b.n	80063d6 <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 80063d0:	f06f 0303 	mvn.w	r3, #3
 80063d4:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80063d6:	697b      	ldr	r3, [r7, #20]
}
 80063d8:	4618      	mov	r0, r3
 80063da:	3718      	adds	r7, #24
 80063dc:	46bd      	mov	sp, r7
 80063de:	bd80      	pop	{r7, pc}

080063e0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80063e0:	b480      	push	{r7}
 80063e2:	b085      	sub	sp, #20
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	60f8      	str	r0, [r7, #12]
 80063e8:	60b9      	str	r1, [r7, #8]
 80063ea:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	4a07      	ldr	r2, [pc, #28]	; (800640c <vApplicationGetIdleTaskMemory+0x2c>)
 80063f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	4a06      	ldr	r2, [pc, #24]	; (8006410 <vApplicationGetIdleTaskMemory+0x30>)
 80063f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2280      	movs	r2, #128	; 0x80
 80063fc:	601a      	str	r2, [r3, #0]
}
 80063fe:	bf00      	nop
 8006400:	3714      	adds	r7, #20
 8006402:	46bd      	mov	sp, r7
 8006404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006408:	4770      	bx	lr
 800640a:	bf00      	nop
 800640c:	200002c4 	.word	0x200002c4
 8006410:	20000320 	.word	0x20000320

08006414 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006414:	b480      	push	{r7}
 8006416:	b085      	sub	sp, #20
 8006418:	af00      	add	r7, sp, #0
 800641a:	60f8      	str	r0, [r7, #12]
 800641c:	60b9      	str	r1, [r7, #8]
 800641e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	4a07      	ldr	r2, [pc, #28]	; (8006440 <vApplicationGetTimerTaskMemory+0x2c>)
 8006424:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	4a06      	ldr	r2, [pc, #24]	; (8006444 <vApplicationGetTimerTaskMemory+0x30>)
 800642a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006432:	601a      	str	r2, [r3, #0]
}
 8006434:	bf00      	nop
 8006436:	3714      	adds	r7, #20
 8006438:	46bd      	mov	sp, r7
 800643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643e:	4770      	bx	lr
 8006440:	20000520 	.word	0x20000520
 8006444:	2000057c 	.word	0x2000057c

08006448 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b08a      	sub	sp, #40	; 0x28
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006450:	2300      	movs	r3, #0
 8006452:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006454:	f001 fc8e 	bl	8007d74 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006458:	4b5b      	ldr	r3, [pc, #364]	; (80065c8 <pvPortMalloc+0x180>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d101      	bne.n	8006464 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006460:	f000 f920 	bl	80066a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006464:	4b59      	ldr	r3, [pc, #356]	; (80065cc <pvPortMalloc+0x184>)
 8006466:	681a      	ldr	r2, [r3, #0]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	4013      	ands	r3, r2
 800646c:	2b00      	cmp	r3, #0
 800646e:	f040 8093 	bne.w	8006598 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d01d      	beq.n	80064b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006478:	2208      	movs	r2, #8
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	4413      	add	r3, r2
 800647e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f003 0307 	and.w	r3, r3, #7
 8006486:	2b00      	cmp	r3, #0
 8006488:	d014      	beq.n	80064b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f023 0307 	bic.w	r3, r3, #7
 8006490:	3308      	adds	r3, #8
 8006492:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f003 0307 	and.w	r3, r3, #7
 800649a:	2b00      	cmp	r3, #0
 800649c:	d00a      	beq.n	80064b4 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800649e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a2:	f383 8811 	msr	BASEPRI, r3
 80064a6:	f3bf 8f6f 	isb	sy
 80064aa:	f3bf 8f4f 	dsb	sy
 80064ae:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80064b0:	bf00      	nop
 80064b2:	e7fe      	b.n	80064b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d06e      	beq.n	8006598 <pvPortMalloc+0x150>
 80064ba:	4b45      	ldr	r3, [pc, #276]	; (80065d0 <pvPortMalloc+0x188>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	687a      	ldr	r2, [r7, #4]
 80064c0:	429a      	cmp	r2, r3
 80064c2:	d869      	bhi.n	8006598 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80064c4:	4b43      	ldr	r3, [pc, #268]	; (80065d4 <pvPortMalloc+0x18c>)
 80064c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80064c8:	4b42      	ldr	r3, [pc, #264]	; (80065d4 <pvPortMalloc+0x18c>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80064ce:	e004      	b.n	80064da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80064d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80064d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80064da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	687a      	ldr	r2, [r7, #4]
 80064e0:	429a      	cmp	r2, r3
 80064e2:	d903      	bls.n	80064ec <pvPortMalloc+0xa4>
 80064e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d1f1      	bne.n	80064d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80064ec:	4b36      	ldr	r3, [pc, #216]	; (80065c8 <pvPortMalloc+0x180>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064f2:	429a      	cmp	r2, r3
 80064f4:	d050      	beq.n	8006598 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80064f6:	6a3b      	ldr	r3, [r7, #32]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	2208      	movs	r2, #8
 80064fc:	4413      	add	r3, r2
 80064fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006502:	681a      	ldr	r2, [r3, #0]
 8006504:	6a3b      	ldr	r3, [r7, #32]
 8006506:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650a:	685a      	ldr	r2, [r3, #4]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	1ad2      	subs	r2, r2, r3
 8006510:	2308      	movs	r3, #8
 8006512:	005b      	lsls	r3, r3, #1
 8006514:	429a      	cmp	r2, r3
 8006516:	d91f      	bls.n	8006558 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006518:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	4413      	add	r3, r2
 800651e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006520:	69bb      	ldr	r3, [r7, #24]
 8006522:	f003 0307 	and.w	r3, r3, #7
 8006526:	2b00      	cmp	r3, #0
 8006528:	d00a      	beq.n	8006540 <pvPortMalloc+0xf8>
	__asm volatile
 800652a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800652e:	f383 8811 	msr	BASEPRI, r3
 8006532:	f3bf 8f6f 	isb	sy
 8006536:	f3bf 8f4f 	dsb	sy
 800653a:	613b      	str	r3, [r7, #16]
}
 800653c:	bf00      	nop
 800653e:	e7fe      	b.n	800653e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006542:	685a      	ldr	r2, [r3, #4]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	1ad2      	subs	r2, r2, r3
 8006548:	69bb      	ldr	r3, [r7, #24]
 800654a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800654c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800654e:	687a      	ldr	r2, [r7, #4]
 8006550:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006552:	69b8      	ldr	r0, [r7, #24]
 8006554:	f000 f908 	bl	8006768 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006558:	4b1d      	ldr	r3, [pc, #116]	; (80065d0 <pvPortMalloc+0x188>)
 800655a:	681a      	ldr	r2, [r3, #0]
 800655c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	1ad3      	subs	r3, r2, r3
 8006562:	4a1b      	ldr	r2, [pc, #108]	; (80065d0 <pvPortMalloc+0x188>)
 8006564:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006566:	4b1a      	ldr	r3, [pc, #104]	; (80065d0 <pvPortMalloc+0x188>)
 8006568:	681a      	ldr	r2, [r3, #0]
 800656a:	4b1b      	ldr	r3, [pc, #108]	; (80065d8 <pvPortMalloc+0x190>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	429a      	cmp	r2, r3
 8006570:	d203      	bcs.n	800657a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006572:	4b17      	ldr	r3, [pc, #92]	; (80065d0 <pvPortMalloc+0x188>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a18      	ldr	r2, [pc, #96]	; (80065d8 <pvPortMalloc+0x190>)
 8006578:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800657a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657c:	685a      	ldr	r2, [r3, #4]
 800657e:	4b13      	ldr	r3, [pc, #76]	; (80065cc <pvPortMalloc+0x184>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	431a      	orrs	r2, r3
 8006584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006586:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800658a:	2200      	movs	r2, #0
 800658c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800658e:	4b13      	ldr	r3, [pc, #76]	; (80065dc <pvPortMalloc+0x194>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	3301      	adds	r3, #1
 8006594:	4a11      	ldr	r2, [pc, #68]	; (80065dc <pvPortMalloc+0x194>)
 8006596:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006598:	f001 fbfa 	bl	8007d90 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800659c:	69fb      	ldr	r3, [r7, #28]
 800659e:	f003 0307 	and.w	r3, r3, #7
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d00a      	beq.n	80065bc <pvPortMalloc+0x174>
	__asm volatile
 80065a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065aa:	f383 8811 	msr	BASEPRI, r3
 80065ae:	f3bf 8f6f 	isb	sy
 80065b2:	f3bf 8f4f 	dsb	sy
 80065b6:	60fb      	str	r3, [r7, #12]
}
 80065b8:	bf00      	nop
 80065ba:	e7fe      	b.n	80065ba <pvPortMalloc+0x172>
	return pvReturn;
 80065bc:	69fb      	ldr	r3, [r7, #28]
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3728      	adds	r7, #40	; 0x28
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}
 80065c6:	bf00      	nop
 80065c8:	20004584 	.word	0x20004584
 80065cc:	20004598 	.word	0x20004598
 80065d0:	20004588 	.word	0x20004588
 80065d4:	2000457c 	.word	0x2000457c
 80065d8:	2000458c 	.word	0x2000458c
 80065dc:	20004590 	.word	0x20004590

080065e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b086      	sub	sp, #24
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d04d      	beq.n	800668e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80065f2:	2308      	movs	r3, #8
 80065f4:	425b      	negs	r3, r3
 80065f6:	697a      	ldr	r2, [r7, #20]
 80065f8:	4413      	add	r3, r2
 80065fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	685a      	ldr	r2, [r3, #4]
 8006604:	4b24      	ldr	r3, [pc, #144]	; (8006698 <vPortFree+0xb8>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4013      	ands	r3, r2
 800660a:	2b00      	cmp	r3, #0
 800660c:	d10a      	bne.n	8006624 <vPortFree+0x44>
	__asm volatile
 800660e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006612:	f383 8811 	msr	BASEPRI, r3
 8006616:	f3bf 8f6f 	isb	sy
 800661a:	f3bf 8f4f 	dsb	sy
 800661e:	60fb      	str	r3, [r7, #12]
}
 8006620:	bf00      	nop
 8006622:	e7fe      	b.n	8006622 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d00a      	beq.n	8006642 <vPortFree+0x62>
	__asm volatile
 800662c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006630:	f383 8811 	msr	BASEPRI, r3
 8006634:	f3bf 8f6f 	isb	sy
 8006638:	f3bf 8f4f 	dsb	sy
 800663c:	60bb      	str	r3, [r7, #8]
}
 800663e:	bf00      	nop
 8006640:	e7fe      	b.n	8006640 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006642:	693b      	ldr	r3, [r7, #16]
 8006644:	685a      	ldr	r2, [r3, #4]
 8006646:	4b14      	ldr	r3, [pc, #80]	; (8006698 <vPortFree+0xb8>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4013      	ands	r3, r2
 800664c:	2b00      	cmp	r3, #0
 800664e:	d01e      	beq.n	800668e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d11a      	bne.n	800668e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	685a      	ldr	r2, [r3, #4]
 800665c:	4b0e      	ldr	r3, [pc, #56]	; (8006698 <vPortFree+0xb8>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	43db      	mvns	r3, r3
 8006662:	401a      	ands	r2, r3
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006668:	f001 fb84 	bl	8007d74 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	685a      	ldr	r2, [r3, #4]
 8006670:	4b0a      	ldr	r3, [pc, #40]	; (800669c <vPortFree+0xbc>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4413      	add	r3, r2
 8006676:	4a09      	ldr	r2, [pc, #36]	; (800669c <vPortFree+0xbc>)
 8006678:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800667a:	6938      	ldr	r0, [r7, #16]
 800667c:	f000 f874 	bl	8006768 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006680:	4b07      	ldr	r3, [pc, #28]	; (80066a0 <vPortFree+0xc0>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	3301      	adds	r3, #1
 8006686:	4a06      	ldr	r2, [pc, #24]	; (80066a0 <vPortFree+0xc0>)
 8006688:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800668a:	f001 fb81 	bl	8007d90 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800668e:	bf00      	nop
 8006690:	3718      	adds	r7, #24
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}
 8006696:	bf00      	nop
 8006698:	20004598 	.word	0x20004598
 800669c:	20004588 	.word	0x20004588
 80066a0:	20004594 	.word	0x20004594

080066a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80066a4:	b480      	push	{r7}
 80066a6:	b085      	sub	sp, #20
 80066a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80066aa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80066ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80066b0:	4b27      	ldr	r3, [pc, #156]	; (8006750 <prvHeapInit+0xac>)
 80066b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f003 0307 	and.w	r3, r3, #7
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d00c      	beq.n	80066d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	3307      	adds	r3, #7
 80066c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f023 0307 	bic.w	r3, r3, #7
 80066ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80066cc:	68ba      	ldr	r2, [r7, #8]
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	1ad3      	subs	r3, r2, r3
 80066d2:	4a1f      	ldr	r2, [pc, #124]	; (8006750 <prvHeapInit+0xac>)
 80066d4:	4413      	add	r3, r2
 80066d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80066dc:	4a1d      	ldr	r2, [pc, #116]	; (8006754 <prvHeapInit+0xb0>)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80066e2:	4b1c      	ldr	r3, [pc, #112]	; (8006754 <prvHeapInit+0xb0>)
 80066e4:	2200      	movs	r2, #0
 80066e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	68ba      	ldr	r2, [r7, #8]
 80066ec:	4413      	add	r3, r2
 80066ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80066f0:	2208      	movs	r2, #8
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	1a9b      	subs	r3, r3, r2
 80066f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f023 0307 	bic.w	r3, r3, #7
 80066fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	4a15      	ldr	r2, [pc, #84]	; (8006758 <prvHeapInit+0xb4>)
 8006704:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006706:	4b14      	ldr	r3, [pc, #80]	; (8006758 <prvHeapInit+0xb4>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	2200      	movs	r2, #0
 800670c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800670e:	4b12      	ldr	r3, [pc, #72]	; (8006758 <prvHeapInit+0xb4>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	2200      	movs	r2, #0
 8006714:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	68fa      	ldr	r2, [r7, #12]
 800671e:	1ad2      	subs	r2, r2, r3
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006724:	4b0c      	ldr	r3, [pc, #48]	; (8006758 <prvHeapInit+0xb4>)
 8006726:	681a      	ldr	r2, [r3, #0]
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	4a0a      	ldr	r2, [pc, #40]	; (800675c <prvHeapInit+0xb8>)
 8006732:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	4a09      	ldr	r2, [pc, #36]	; (8006760 <prvHeapInit+0xbc>)
 800673a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800673c:	4b09      	ldr	r3, [pc, #36]	; (8006764 <prvHeapInit+0xc0>)
 800673e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006742:	601a      	str	r2, [r3, #0]
}
 8006744:	bf00      	nop
 8006746:	3714      	adds	r7, #20
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr
 8006750:	2000097c 	.word	0x2000097c
 8006754:	2000457c 	.word	0x2000457c
 8006758:	20004584 	.word	0x20004584
 800675c:	2000458c 	.word	0x2000458c
 8006760:	20004588 	.word	0x20004588
 8006764:	20004598 	.word	0x20004598

08006768 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006768:	b480      	push	{r7}
 800676a:	b085      	sub	sp, #20
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006770:	4b28      	ldr	r3, [pc, #160]	; (8006814 <prvInsertBlockIntoFreeList+0xac>)
 8006772:	60fb      	str	r3, [r7, #12]
 8006774:	e002      	b.n	800677c <prvInsertBlockIntoFreeList+0x14>
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	60fb      	str	r3, [r7, #12]
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	687a      	ldr	r2, [r7, #4]
 8006782:	429a      	cmp	r2, r3
 8006784:	d8f7      	bhi.n	8006776 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	68ba      	ldr	r2, [r7, #8]
 8006790:	4413      	add	r3, r2
 8006792:	687a      	ldr	r2, [r7, #4]
 8006794:	429a      	cmp	r2, r3
 8006796:	d108      	bne.n	80067aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	685a      	ldr	r2, [r3, #4]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	441a      	add	r2, r3
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	68ba      	ldr	r2, [r7, #8]
 80067b4:	441a      	add	r2, r3
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	429a      	cmp	r2, r3
 80067bc:	d118      	bne.n	80067f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681a      	ldr	r2, [r3, #0]
 80067c2:	4b15      	ldr	r3, [pc, #84]	; (8006818 <prvInsertBlockIntoFreeList+0xb0>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d00d      	beq.n	80067e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	685a      	ldr	r2, [r3, #4]
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	441a      	add	r2, r3
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	681a      	ldr	r2, [r3, #0]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	601a      	str	r2, [r3, #0]
 80067e4:	e008      	b.n	80067f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80067e6:	4b0c      	ldr	r3, [pc, #48]	; (8006818 <prvInsertBlockIntoFreeList+0xb0>)
 80067e8:	681a      	ldr	r2, [r3, #0]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	601a      	str	r2, [r3, #0]
 80067ee:	e003      	b.n	80067f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681a      	ldr	r2, [r3, #0]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80067f8:	68fa      	ldr	r2, [r7, #12]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	429a      	cmp	r2, r3
 80067fe:	d002      	beq.n	8006806 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	687a      	ldr	r2, [r7, #4]
 8006804:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006806:	bf00      	nop
 8006808:	3714      	adds	r7, #20
 800680a:	46bd      	mov	sp, r7
 800680c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006810:	4770      	bx	lr
 8006812:	bf00      	nop
 8006814:	2000457c 	.word	0x2000457c
 8006818:	20004584 	.word	0x20004584

0800681c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800681c:	b480      	push	{r7}
 800681e:	b083      	sub	sp, #12
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f103 0208 	add.w	r2, r3, #8
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f04f 32ff 	mov.w	r2, #4294967295
 8006834:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f103 0208 	add.w	r2, r3, #8
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f103 0208 	add.w	r2, r3, #8
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2200      	movs	r2, #0
 800684e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006850:	bf00      	nop
 8006852:	370c      	adds	r7, #12
 8006854:	46bd      	mov	sp, r7
 8006856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685a:	4770      	bx	lr

0800685c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800685c:	b480      	push	{r7}
 800685e:	b083      	sub	sp, #12
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2200      	movs	r2, #0
 8006868:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800686a:	bf00      	nop
 800686c:	370c      	adds	r7, #12
 800686e:	46bd      	mov	sp, r7
 8006870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006874:	4770      	bx	lr

08006876 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006876:	b480      	push	{r7}
 8006878:	b085      	sub	sp, #20
 800687a:	af00      	add	r7, sp, #0
 800687c:	6078      	str	r0, [r7, #4]
 800687e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	68fa      	ldr	r2, [r7, #12]
 800688a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	689a      	ldr	r2, [r3, #8]
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	689b      	ldr	r3, [r3, #8]
 8006898:	683a      	ldr	r2, [r7, #0]
 800689a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	683a      	ldr	r2, [r7, #0]
 80068a0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	687a      	ldr	r2, [r7, #4]
 80068a6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	1c5a      	adds	r2, r3, #1
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	601a      	str	r2, [r3, #0]
}
 80068b2:	bf00      	nop
 80068b4:	3714      	adds	r7, #20
 80068b6:	46bd      	mov	sp, r7
 80068b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068bc:	4770      	bx	lr

080068be <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80068be:	b480      	push	{r7}
 80068c0:	b085      	sub	sp, #20
 80068c2:	af00      	add	r7, sp, #0
 80068c4:	6078      	str	r0, [r7, #4]
 80068c6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068d4:	d103      	bne.n	80068de <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	691b      	ldr	r3, [r3, #16]
 80068da:	60fb      	str	r3, [r7, #12]
 80068dc:	e00c      	b.n	80068f8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	3308      	adds	r3, #8
 80068e2:	60fb      	str	r3, [r7, #12]
 80068e4:	e002      	b.n	80068ec <vListInsert+0x2e>
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	60fb      	str	r3, [r7, #12]
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	68ba      	ldr	r2, [r7, #8]
 80068f4:	429a      	cmp	r2, r3
 80068f6:	d2f6      	bcs.n	80068e6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	685a      	ldr	r2, [r3, #4]
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	683a      	ldr	r2, [r7, #0]
 8006906:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	68fa      	ldr	r2, [r7, #12]
 800690c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	683a      	ldr	r2, [r7, #0]
 8006912:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	687a      	ldr	r2, [r7, #4]
 8006918:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	1c5a      	adds	r2, r3, #1
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	601a      	str	r2, [r3, #0]
}
 8006924:	bf00      	nop
 8006926:	3714      	adds	r7, #20
 8006928:	46bd      	mov	sp, r7
 800692a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692e:	4770      	bx	lr

08006930 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006930:	b480      	push	{r7}
 8006932:	b085      	sub	sp, #20
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	691b      	ldr	r3, [r3, #16]
 800693c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	687a      	ldr	r2, [r7, #4]
 8006944:	6892      	ldr	r2, [r2, #8]
 8006946:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	689b      	ldr	r3, [r3, #8]
 800694c:	687a      	ldr	r2, [r7, #4]
 800694e:	6852      	ldr	r2, [r2, #4]
 8006950:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	687a      	ldr	r2, [r7, #4]
 8006958:	429a      	cmp	r2, r3
 800695a:	d103      	bne.n	8006964 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	689a      	ldr	r2, [r3, #8]
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2200      	movs	r2, #0
 8006968:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	1e5a      	subs	r2, r3, #1
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
}
 8006978:	4618      	mov	r0, r3
 800697a:	3714      	adds	r7, #20
 800697c:	46bd      	mov	sp, r7
 800697e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006982:	4770      	bx	lr

08006984 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006984:	b480      	push	{r7}
 8006986:	b085      	sub	sp, #20
 8006988:	af00      	add	r7, sp, #0
 800698a:	60f8      	str	r0, [r7, #12]
 800698c:	60b9      	str	r1, [r7, #8]
 800698e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	3b04      	subs	r3, #4
 8006994:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800699c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	3b04      	subs	r3, #4
 80069a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	f023 0201 	bic.w	r2, r3, #1
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	3b04      	subs	r3, #4
 80069b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80069b4:	4a0c      	ldr	r2, [pc, #48]	; (80069e8 <pxPortInitialiseStack+0x64>)
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	3b14      	subs	r3, #20
 80069be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80069c0:	687a      	ldr	r2, [r7, #4]
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	3b04      	subs	r3, #4
 80069ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	f06f 0202 	mvn.w	r2, #2
 80069d2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	3b20      	subs	r3, #32
 80069d8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80069da:	68fb      	ldr	r3, [r7, #12]
}
 80069dc:	4618      	mov	r0, r3
 80069de:	3714      	adds	r7, #20
 80069e0:	46bd      	mov	sp, r7
 80069e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e6:	4770      	bx	lr
 80069e8:	080069ed 	.word	0x080069ed

080069ec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80069ec:	b480      	push	{r7}
 80069ee:	b085      	sub	sp, #20
 80069f0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80069f2:	2300      	movs	r3, #0
 80069f4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80069f6:	4b12      	ldr	r3, [pc, #72]	; (8006a40 <prvTaskExitError+0x54>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069fe:	d00a      	beq.n	8006a16 <prvTaskExitError+0x2a>
	__asm volatile
 8006a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a04:	f383 8811 	msr	BASEPRI, r3
 8006a08:	f3bf 8f6f 	isb	sy
 8006a0c:	f3bf 8f4f 	dsb	sy
 8006a10:	60fb      	str	r3, [r7, #12]
}
 8006a12:	bf00      	nop
 8006a14:	e7fe      	b.n	8006a14 <prvTaskExitError+0x28>
	__asm volatile
 8006a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a1a:	f383 8811 	msr	BASEPRI, r3
 8006a1e:	f3bf 8f6f 	isb	sy
 8006a22:	f3bf 8f4f 	dsb	sy
 8006a26:	60bb      	str	r3, [r7, #8]
}
 8006a28:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006a2a:	bf00      	nop
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d0fc      	beq.n	8006a2c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006a32:	bf00      	nop
 8006a34:	bf00      	nop
 8006a36:	3714      	adds	r7, #20
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3e:	4770      	bx	lr
 8006a40:	20000014 	.word	0x20000014
	...

08006a50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006a50:	4b07      	ldr	r3, [pc, #28]	; (8006a70 <pxCurrentTCBConst2>)
 8006a52:	6819      	ldr	r1, [r3, #0]
 8006a54:	6808      	ldr	r0, [r1, #0]
 8006a56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a5a:	f380 8809 	msr	PSP, r0
 8006a5e:	f3bf 8f6f 	isb	sy
 8006a62:	f04f 0000 	mov.w	r0, #0
 8006a66:	f380 8811 	msr	BASEPRI, r0
 8006a6a:	4770      	bx	lr
 8006a6c:	f3af 8000 	nop.w

08006a70 <pxCurrentTCBConst2>:
 8006a70:	200045e4 	.word	0x200045e4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006a74:	bf00      	nop
 8006a76:	bf00      	nop

08006a78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006a78:	4808      	ldr	r0, [pc, #32]	; (8006a9c <prvPortStartFirstTask+0x24>)
 8006a7a:	6800      	ldr	r0, [r0, #0]
 8006a7c:	6800      	ldr	r0, [r0, #0]
 8006a7e:	f380 8808 	msr	MSP, r0
 8006a82:	f04f 0000 	mov.w	r0, #0
 8006a86:	f380 8814 	msr	CONTROL, r0
 8006a8a:	b662      	cpsie	i
 8006a8c:	b661      	cpsie	f
 8006a8e:	f3bf 8f4f 	dsb	sy
 8006a92:	f3bf 8f6f 	isb	sy
 8006a96:	df00      	svc	0
 8006a98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006a9a:	bf00      	nop
 8006a9c:	e000ed08 	.word	0xe000ed08

08006aa0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b086      	sub	sp, #24
 8006aa4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006aa6:	4b46      	ldr	r3, [pc, #280]	; (8006bc0 <xPortStartScheduler+0x120>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a46      	ldr	r2, [pc, #280]	; (8006bc4 <xPortStartScheduler+0x124>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d10a      	bne.n	8006ac6 <xPortStartScheduler+0x26>
	__asm volatile
 8006ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab4:	f383 8811 	msr	BASEPRI, r3
 8006ab8:	f3bf 8f6f 	isb	sy
 8006abc:	f3bf 8f4f 	dsb	sy
 8006ac0:	613b      	str	r3, [r7, #16]
}
 8006ac2:	bf00      	nop
 8006ac4:	e7fe      	b.n	8006ac4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006ac6:	4b3e      	ldr	r3, [pc, #248]	; (8006bc0 <xPortStartScheduler+0x120>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a3f      	ldr	r2, [pc, #252]	; (8006bc8 <xPortStartScheduler+0x128>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d10a      	bne.n	8006ae6 <xPortStartScheduler+0x46>
	__asm volatile
 8006ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad4:	f383 8811 	msr	BASEPRI, r3
 8006ad8:	f3bf 8f6f 	isb	sy
 8006adc:	f3bf 8f4f 	dsb	sy
 8006ae0:	60fb      	str	r3, [r7, #12]
}
 8006ae2:	bf00      	nop
 8006ae4:	e7fe      	b.n	8006ae4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006ae6:	4b39      	ldr	r3, [pc, #228]	; (8006bcc <xPortStartScheduler+0x12c>)
 8006ae8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	781b      	ldrb	r3, [r3, #0]
 8006aee:	b2db      	uxtb	r3, r3
 8006af0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	22ff      	movs	r2, #255	; 0xff
 8006af6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	781b      	ldrb	r3, [r3, #0]
 8006afc:	b2db      	uxtb	r3, r3
 8006afe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006b00:	78fb      	ldrb	r3, [r7, #3]
 8006b02:	b2db      	uxtb	r3, r3
 8006b04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006b08:	b2da      	uxtb	r2, r3
 8006b0a:	4b31      	ldr	r3, [pc, #196]	; (8006bd0 <xPortStartScheduler+0x130>)
 8006b0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006b0e:	4b31      	ldr	r3, [pc, #196]	; (8006bd4 <xPortStartScheduler+0x134>)
 8006b10:	2207      	movs	r2, #7
 8006b12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006b14:	e009      	b.n	8006b2a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006b16:	4b2f      	ldr	r3, [pc, #188]	; (8006bd4 <xPortStartScheduler+0x134>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	3b01      	subs	r3, #1
 8006b1c:	4a2d      	ldr	r2, [pc, #180]	; (8006bd4 <xPortStartScheduler+0x134>)
 8006b1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006b20:	78fb      	ldrb	r3, [r7, #3]
 8006b22:	b2db      	uxtb	r3, r3
 8006b24:	005b      	lsls	r3, r3, #1
 8006b26:	b2db      	uxtb	r3, r3
 8006b28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006b2a:	78fb      	ldrb	r3, [r7, #3]
 8006b2c:	b2db      	uxtb	r3, r3
 8006b2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b32:	2b80      	cmp	r3, #128	; 0x80
 8006b34:	d0ef      	beq.n	8006b16 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006b36:	4b27      	ldr	r3, [pc, #156]	; (8006bd4 <xPortStartScheduler+0x134>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f1c3 0307 	rsb	r3, r3, #7
 8006b3e:	2b04      	cmp	r3, #4
 8006b40:	d00a      	beq.n	8006b58 <xPortStartScheduler+0xb8>
	__asm volatile
 8006b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b46:	f383 8811 	msr	BASEPRI, r3
 8006b4a:	f3bf 8f6f 	isb	sy
 8006b4e:	f3bf 8f4f 	dsb	sy
 8006b52:	60bb      	str	r3, [r7, #8]
}
 8006b54:	bf00      	nop
 8006b56:	e7fe      	b.n	8006b56 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006b58:	4b1e      	ldr	r3, [pc, #120]	; (8006bd4 <xPortStartScheduler+0x134>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	021b      	lsls	r3, r3, #8
 8006b5e:	4a1d      	ldr	r2, [pc, #116]	; (8006bd4 <xPortStartScheduler+0x134>)
 8006b60:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006b62:	4b1c      	ldr	r3, [pc, #112]	; (8006bd4 <xPortStartScheduler+0x134>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006b6a:	4a1a      	ldr	r2, [pc, #104]	; (8006bd4 <xPortStartScheduler+0x134>)
 8006b6c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	b2da      	uxtb	r2, r3
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006b76:	4b18      	ldr	r3, [pc, #96]	; (8006bd8 <xPortStartScheduler+0x138>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a17      	ldr	r2, [pc, #92]	; (8006bd8 <xPortStartScheduler+0x138>)
 8006b7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006b80:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006b82:	4b15      	ldr	r3, [pc, #84]	; (8006bd8 <xPortStartScheduler+0x138>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a14      	ldr	r2, [pc, #80]	; (8006bd8 <xPortStartScheduler+0x138>)
 8006b88:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006b8c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006b8e:	f000 f8dd 	bl	8006d4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006b92:	4b12      	ldr	r3, [pc, #72]	; (8006bdc <xPortStartScheduler+0x13c>)
 8006b94:	2200      	movs	r2, #0
 8006b96:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006b98:	f000 f8fc 	bl	8006d94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006b9c:	4b10      	ldr	r3, [pc, #64]	; (8006be0 <xPortStartScheduler+0x140>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a0f      	ldr	r2, [pc, #60]	; (8006be0 <xPortStartScheduler+0x140>)
 8006ba2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006ba6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006ba8:	f7ff ff66 	bl	8006a78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006bac:	f001 fa58 	bl	8008060 <vTaskSwitchContext>
	prvTaskExitError();
 8006bb0:	f7ff ff1c 	bl	80069ec <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006bb4:	2300      	movs	r3, #0
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	3718      	adds	r7, #24
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}
 8006bbe:	bf00      	nop
 8006bc0:	e000ed00 	.word	0xe000ed00
 8006bc4:	410fc271 	.word	0x410fc271
 8006bc8:	410fc270 	.word	0x410fc270
 8006bcc:	e000e400 	.word	0xe000e400
 8006bd0:	2000459c 	.word	0x2000459c
 8006bd4:	200045a0 	.word	0x200045a0
 8006bd8:	e000ed20 	.word	0xe000ed20
 8006bdc:	20000014 	.word	0x20000014
 8006be0:	e000ef34 	.word	0xe000ef34

08006be4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006be4:	b480      	push	{r7}
 8006be6:	b083      	sub	sp, #12
 8006be8:	af00      	add	r7, sp, #0
	__asm volatile
 8006bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bee:	f383 8811 	msr	BASEPRI, r3
 8006bf2:	f3bf 8f6f 	isb	sy
 8006bf6:	f3bf 8f4f 	dsb	sy
 8006bfa:	607b      	str	r3, [r7, #4]
}
 8006bfc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006bfe:	4b0f      	ldr	r3, [pc, #60]	; (8006c3c <vPortEnterCritical+0x58>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	3301      	adds	r3, #1
 8006c04:	4a0d      	ldr	r2, [pc, #52]	; (8006c3c <vPortEnterCritical+0x58>)
 8006c06:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006c08:	4b0c      	ldr	r3, [pc, #48]	; (8006c3c <vPortEnterCritical+0x58>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	2b01      	cmp	r3, #1
 8006c0e:	d10f      	bne.n	8006c30 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006c10:	4b0b      	ldr	r3, [pc, #44]	; (8006c40 <vPortEnterCritical+0x5c>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	b2db      	uxtb	r3, r3
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d00a      	beq.n	8006c30 <vPortEnterCritical+0x4c>
	__asm volatile
 8006c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c1e:	f383 8811 	msr	BASEPRI, r3
 8006c22:	f3bf 8f6f 	isb	sy
 8006c26:	f3bf 8f4f 	dsb	sy
 8006c2a:	603b      	str	r3, [r7, #0]
}
 8006c2c:	bf00      	nop
 8006c2e:	e7fe      	b.n	8006c2e <vPortEnterCritical+0x4a>
	}
}
 8006c30:	bf00      	nop
 8006c32:	370c      	adds	r7, #12
 8006c34:	46bd      	mov	sp, r7
 8006c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3a:	4770      	bx	lr
 8006c3c:	20000014 	.word	0x20000014
 8006c40:	e000ed04 	.word	0xe000ed04

08006c44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006c44:	b480      	push	{r7}
 8006c46:	b083      	sub	sp, #12
 8006c48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006c4a:	4b12      	ldr	r3, [pc, #72]	; (8006c94 <vPortExitCritical+0x50>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d10a      	bne.n	8006c68 <vPortExitCritical+0x24>
	__asm volatile
 8006c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c56:	f383 8811 	msr	BASEPRI, r3
 8006c5a:	f3bf 8f6f 	isb	sy
 8006c5e:	f3bf 8f4f 	dsb	sy
 8006c62:	607b      	str	r3, [r7, #4]
}
 8006c64:	bf00      	nop
 8006c66:	e7fe      	b.n	8006c66 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006c68:	4b0a      	ldr	r3, [pc, #40]	; (8006c94 <vPortExitCritical+0x50>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	3b01      	subs	r3, #1
 8006c6e:	4a09      	ldr	r2, [pc, #36]	; (8006c94 <vPortExitCritical+0x50>)
 8006c70:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006c72:	4b08      	ldr	r3, [pc, #32]	; (8006c94 <vPortExitCritical+0x50>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d105      	bne.n	8006c86 <vPortExitCritical+0x42>
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006c84:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006c86:	bf00      	nop
 8006c88:	370c      	adds	r7, #12
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c90:	4770      	bx	lr
 8006c92:	bf00      	nop
 8006c94:	20000014 	.word	0x20000014
	...

08006ca0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006ca0:	f3ef 8009 	mrs	r0, PSP
 8006ca4:	f3bf 8f6f 	isb	sy
 8006ca8:	4b15      	ldr	r3, [pc, #84]	; (8006d00 <pxCurrentTCBConst>)
 8006caa:	681a      	ldr	r2, [r3, #0]
 8006cac:	f01e 0f10 	tst.w	lr, #16
 8006cb0:	bf08      	it	eq
 8006cb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006cb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cba:	6010      	str	r0, [r2, #0]
 8006cbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006cc0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006cc4:	f380 8811 	msr	BASEPRI, r0
 8006cc8:	f3bf 8f4f 	dsb	sy
 8006ccc:	f3bf 8f6f 	isb	sy
 8006cd0:	f001 f9c6 	bl	8008060 <vTaskSwitchContext>
 8006cd4:	f04f 0000 	mov.w	r0, #0
 8006cd8:	f380 8811 	msr	BASEPRI, r0
 8006cdc:	bc09      	pop	{r0, r3}
 8006cde:	6819      	ldr	r1, [r3, #0]
 8006ce0:	6808      	ldr	r0, [r1, #0]
 8006ce2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ce6:	f01e 0f10 	tst.w	lr, #16
 8006cea:	bf08      	it	eq
 8006cec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006cf0:	f380 8809 	msr	PSP, r0
 8006cf4:	f3bf 8f6f 	isb	sy
 8006cf8:	4770      	bx	lr
 8006cfa:	bf00      	nop
 8006cfc:	f3af 8000 	nop.w

08006d00 <pxCurrentTCBConst>:
 8006d00:	200045e4 	.word	0x200045e4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006d04:	bf00      	nop
 8006d06:	bf00      	nop

08006d08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b082      	sub	sp, #8
 8006d0c:	af00      	add	r7, sp, #0
	__asm volatile
 8006d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d12:	f383 8811 	msr	BASEPRI, r3
 8006d16:	f3bf 8f6f 	isb	sy
 8006d1a:	f3bf 8f4f 	dsb	sy
 8006d1e:	607b      	str	r3, [r7, #4]
}
 8006d20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006d22:	f001 f8e3 	bl	8007eec <xTaskIncrementTick>
 8006d26:	4603      	mov	r3, r0
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d003      	beq.n	8006d34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006d2c:	4b06      	ldr	r3, [pc, #24]	; (8006d48 <xPortSysTickHandler+0x40>)
 8006d2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d32:	601a      	str	r2, [r3, #0]
 8006d34:	2300      	movs	r3, #0
 8006d36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	f383 8811 	msr	BASEPRI, r3
}
 8006d3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006d40:	bf00      	nop
 8006d42:	3708      	adds	r7, #8
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}
 8006d48:	e000ed04 	.word	0xe000ed04

08006d4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006d50:	4b0b      	ldr	r3, [pc, #44]	; (8006d80 <vPortSetupTimerInterrupt+0x34>)
 8006d52:	2200      	movs	r2, #0
 8006d54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006d56:	4b0b      	ldr	r3, [pc, #44]	; (8006d84 <vPortSetupTimerInterrupt+0x38>)
 8006d58:	2200      	movs	r2, #0
 8006d5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006d5c:	4b0a      	ldr	r3, [pc, #40]	; (8006d88 <vPortSetupTimerInterrupt+0x3c>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a0a      	ldr	r2, [pc, #40]	; (8006d8c <vPortSetupTimerInterrupt+0x40>)
 8006d62:	fba2 2303 	umull	r2, r3, r2, r3
 8006d66:	099b      	lsrs	r3, r3, #6
 8006d68:	4a09      	ldr	r2, [pc, #36]	; (8006d90 <vPortSetupTimerInterrupt+0x44>)
 8006d6a:	3b01      	subs	r3, #1
 8006d6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006d6e:	4b04      	ldr	r3, [pc, #16]	; (8006d80 <vPortSetupTimerInterrupt+0x34>)
 8006d70:	2207      	movs	r2, #7
 8006d72:	601a      	str	r2, [r3, #0]
}
 8006d74:	bf00      	nop
 8006d76:	46bd      	mov	sp, r7
 8006d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7c:	4770      	bx	lr
 8006d7e:	bf00      	nop
 8006d80:	e000e010 	.word	0xe000e010
 8006d84:	e000e018 	.word	0xe000e018
 8006d88:	20000008 	.word	0x20000008
 8006d8c:	10624dd3 	.word	0x10624dd3
 8006d90:	e000e014 	.word	0xe000e014

08006d94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006d94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006da4 <vPortEnableVFP+0x10>
 8006d98:	6801      	ldr	r1, [r0, #0]
 8006d9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006d9e:	6001      	str	r1, [r0, #0]
 8006da0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006da2:	bf00      	nop
 8006da4:	e000ed88 	.word	0xe000ed88

08006da8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006da8:	b480      	push	{r7}
 8006daa:	b085      	sub	sp, #20
 8006dac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006dae:	f3ef 8305 	mrs	r3, IPSR
 8006db2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	2b0f      	cmp	r3, #15
 8006db8:	d914      	bls.n	8006de4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006dba:	4a17      	ldr	r2, [pc, #92]	; (8006e18 <vPortValidateInterruptPriority+0x70>)
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	4413      	add	r3, r2
 8006dc0:	781b      	ldrb	r3, [r3, #0]
 8006dc2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006dc4:	4b15      	ldr	r3, [pc, #84]	; (8006e1c <vPortValidateInterruptPriority+0x74>)
 8006dc6:	781b      	ldrb	r3, [r3, #0]
 8006dc8:	7afa      	ldrb	r2, [r7, #11]
 8006dca:	429a      	cmp	r2, r3
 8006dcc:	d20a      	bcs.n	8006de4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd2:	f383 8811 	msr	BASEPRI, r3
 8006dd6:	f3bf 8f6f 	isb	sy
 8006dda:	f3bf 8f4f 	dsb	sy
 8006dde:	607b      	str	r3, [r7, #4]
}
 8006de0:	bf00      	nop
 8006de2:	e7fe      	b.n	8006de2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006de4:	4b0e      	ldr	r3, [pc, #56]	; (8006e20 <vPortValidateInterruptPriority+0x78>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006dec:	4b0d      	ldr	r3, [pc, #52]	; (8006e24 <vPortValidateInterruptPriority+0x7c>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	429a      	cmp	r2, r3
 8006df2:	d90a      	bls.n	8006e0a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006df8:	f383 8811 	msr	BASEPRI, r3
 8006dfc:	f3bf 8f6f 	isb	sy
 8006e00:	f3bf 8f4f 	dsb	sy
 8006e04:	603b      	str	r3, [r7, #0]
}
 8006e06:	bf00      	nop
 8006e08:	e7fe      	b.n	8006e08 <vPortValidateInterruptPriority+0x60>
	}
 8006e0a:	bf00      	nop
 8006e0c:	3714      	adds	r7, #20
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e14:	4770      	bx	lr
 8006e16:	bf00      	nop
 8006e18:	e000e3f0 	.word	0xe000e3f0
 8006e1c:	2000459c 	.word	0x2000459c
 8006e20:	e000ed0c 	.word	0xe000ed0c
 8006e24:	200045a0 	.word	0x200045a0

08006e28 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b084      	sub	sp, #16
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
 8006e30:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d10a      	bne.n	8006e52 <xQueueGenericReset+0x2a>
	__asm volatile
 8006e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e40:	f383 8811 	msr	BASEPRI, r3
 8006e44:	f3bf 8f6f 	isb	sy
 8006e48:	f3bf 8f4f 	dsb	sy
 8006e4c:	60bb      	str	r3, [r7, #8]
}
 8006e4e:	bf00      	nop
 8006e50:	e7fe      	b.n	8006e50 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006e52:	f7ff fec7 	bl	8006be4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681a      	ldr	r2, [r3, #0]
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e5e:	68f9      	ldr	r1, [r7, #12]
 8006e60:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006e62:	fb01 f303 	mul.w	r3, r1, r3
 8006e66:	441a      	add	r2, r3
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681a      	ldr	r2, [r3, #0]
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681a      	ldr	r2, [r3, #0]
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e82:	3b01      	subs	r3, #1
 8006e84:	68f9      	ldr	r1, [r7, #12]
 8006e86:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006e88:	fb01 f303 	mul.w	r3, r1, r3
 8006e8c:	441a      	add	r2, r3
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	22ff      	movs	r2, #255	; 0xff
 8006e96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	22ff      	movs	r2, #255	; 0xff
 8006e9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d114      	bne.n	8006ed2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	691b      	ldr	r3, [r3, #16]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d01a      	beq.n	8006ee6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	3310      	adds	r3, #16
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	f001 f981 	bl	80081bc <xTaskRemoveFromEventList>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d012      	beq.n	8006ee6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006ec0:	4b0c      	ldr	r3, [pc, #48]	; (8006ef4 <xQueueGenericReset+0xcc>)
 8006ec2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ec6:	601a      	str	r2, [r3, #0]
 8006ec8:	f3bf 8f4f 	dsb	sy
 8006ecc:	f3bf 8f6f 	isb	sy
 8006ed0:	e009      	b.n	8006ee6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	3310      	adds	r3, #16
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f7ff fca0 	bl	800681c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	3324      	adds	r3, #36	; 0x24
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	f7ff fc9b 	bl	800681c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006ee6:	f7ff fead 	bl	8006c44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006eea:	2301      	movs	r3, #1
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	3710      	adds	r7, #16
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	bd80      	pop	{r7, pc}
 8006ef4:	e000ed04 	.word	0xe000ed04

08006ef8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b08e      	sub	sp, #56	; 0x38
 8006efc:	af02      	add	r7, sp, #8
 8006efe:	60f8      	str	r0, [r7, #12]
 8006f00:	60b9      	str	r1, [r7, #8]
 8006f02:	607a      	str	r2, [r7, #4]
 8006f04:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d10a      	bne.n	8006f22 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f10:	f383 8811 	msr	BASEPRI, r3
 8006f14:	f3bf 8f6f 	isb	sy
 8006f18:	f3bf 8f4f 	dsb	sy
 8006f1c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006f1e:	bf00      	nop
 8006f20:	e7fe      	b.n	8006f20 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d10a      	bne.n	8006f3e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f2c:	f383 8811 	msr	BASEPRI, r3
 8006f30:	f3bf 8f6f 	isb	sy
 8006f34:	f3bf 8f4f 	dsb	sy
 8006f38:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006f3a:	bf00      	nop
 8006f3c:	e7fe      	b.n	8006f3c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d002      	beq.n	8006f4a <xQueueGenericCreateStatic+0x52>
 8006f44:	68bb      	ldr	r3, [r7, #8]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d001      	beq.n	8006f4e <xQueueGenericCreateStatic+0x56>
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	e000      	b.n	8006f50 <xQueueGenericCreateStatic+0x58>
 8006f4e:	2300      	movs	r3, #0
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d10a      	bne.n	8006f6a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f58:	f383 8811 	msr	BASEPRI, r3
 8006f5c:	f3bf 8f6f 	isb	sy
 8006f60:	f3bf 8f4f 	dsb	sy
 8006f64:	623b      	str	r3, [r7, #32]
}
 8006f66:	bf00      	nop
 8006f68:	e7fe      	b.n	8006f68 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d102      	bne.n	8006f76 <xQueueGenericCreateStatic+0x7e>
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d101      	bne.n	8006f7a <xQueueGenericCreateStatic+0x82>
 8006f76:	2301      	movs	r3, #1
 8006f78:	e000      	b.n	8006f7c <xQueueGenericCreateStatic+0x84>
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d10a      	bne.n	8006f96 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f84:	f383 8811 	msr	BASEPRI, r3
 8006f88:	f3bf 8f6f 	isb	sy
 8006f8c:	f3bf 8f4f 	dsb	sy
 8006f90:	61fb      	str	r3, [r7, #28]
}
 8006f92:	bf00      	nop
 8006f94:	e7fe      	b.n	8006f94 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006f96:	2350      	movs	r3, #80	; 0x50
 8006f98:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	2b50      	cmp	r3, #80	; 0x50
 8006f9e:	d00a      	beq.n	8006fb6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fa4:	f383 8811 	msr	BASEPRI, r3
 8006fa8:	f3bf 8f6f 	isb	sy
 8006fac:	f3bf 8f4f 	dsb	sy
 8006fb0:	61bb      	str	r3, [r7, #24]
}
 8006fb2:	bf00      	nop
 8006fb4:	e7fe      	b.n	8006fb4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006fb6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d00d      	beq.n	8006fde <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fc4:	2201      	movs	r2, #1
 8006fc6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006fca:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fd0:	9300      	str	r3, [sp, #0]
 8006fd2:	4613      	mov	r3, r2
 8006fd4:	687a      	ldr	r2, [r7, #4]
 8006fd6:	68b9      	ldr	r1, [r7, #8]
 8006fd8:	68f8      	ldr	r0, [r7, #12]
 8006fda:	f000 f805 	bl	8006fe8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3730      	adds	r7, #48	; 0x30
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}

08006fe8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b084      	sub	sp, #16
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	60f8      	str	r0, [r7, #12]
 8006ff0:	60b9      	str	r1, [r7, #8]
 8006ff2:	607a      	str	r2, [r7, #4]
 8006ff4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d103      	bne.n	8007004 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006ffc:	69bb      	ldr	r3, [r7, #24]
 8006ffe:	69ba      	ldr	r2, [r7, #24]
 8007000:	601a      	str	r2, [r3, #0]
 8007002:	e002      	b.n	800700a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007004:	69bb      	ldr	r3, [r7, #24]
 8007006:	687a      	ldr	r2, [r7, #4]
 8007008:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800700a:	69bb      	ldr	r3, [r7, #24]
 800700c:	68fa      	ldr	r2, [r7, #12]
 800700e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007010:	69bb      	ldr	r3, [r7, #24]
 8007012:	68ba      	ldr	r2, [r7, #8]
 8007014:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007016:	2101      	movs	r1, #1
 8007018:	69b8      	ldr	r0, [r7, #24]
 800701a:	f7ff ff05 	bl	8006e28 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800701e:	69bb      	ldr	r3, [r7, #24]
 8007020:	78fa      	ldrb	r2, [r7, #3]
 8007022:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007026:	bf00      	nop
 8007028:	3710      	adds	r7, #16
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}
	...

08007030 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b08e      	sub	sp, #56	; 0x38
 8007034:	af00      	add	r7, sp, #0
 8007036:	60f8      	str	r0, [r7, #12]
 8007038:	60b9      	str	r1, [r7, #8]
 800703a:	607a      	str	r2, [r7, #4]
 800703c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800703e:	2300      	movs	r3, #0
 8007040:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007048:	2b00      	cmp	r3, #0
 800704a:	d10a      	bne.n	8007062 <xQueueGenericSend+0x32>
	__asm volatile
 800704c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007050:	f383 8811 	msr	BASEPRI, r3
 8007054:	f3bf 8f6f 	isb	sy
 8007058:	f3bf 8f4f 	dsb	sy
 800705c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800705e:	bf00      	nop
 8007060:	e7fe      	b.n	8007060 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d103      	bne.n	8007070 <xQueueGenericSend+0x40>
 8007068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800706a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800706c:	2b00      	cmp	r3, #0
 800706e:	d101      	bne.n	8007074 <xQueueGenericSend+0x44>
 8007070:	2301      	movs	r3, #1
 8007072:	e000      	b.n	8007076 <xQueueGenericSend+0x46>
 8007074:	2300      	movs	r3, #0
 8007076:	2b00      	cmp	r3, #0
 8007078:	d10a      	bne.n	8007090 <xQueueGenericSend+0x60>
	__asm volatile
 800707a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800707e:	f383 8811 	msr	BASEPRI, r3
 8007082:	f3bf 8f6f 	isb	sy
 8007086:	f3bf 8f4f 	dsb	sy
 800708a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800708c:	bf00      	nop
 800708e:	e7fe      	b.n	800708e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	2b02      	cmp	r3, #2
 8007094:	d103      	bne.n	800709e <xQueueGenericSend+0x6e>
 8007096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800709a:	2b01      	cmp	r3, #1
 800709c:	d101      	bne.n	80070a2 <xQueueGenericSend+0x72>
 800709e:	2301      	movs	r3, #1
 80070a0:	e000      	b.n	80070a4 <xQueueGenericSend+0x74>
 80070a2:	2300      	movs	r3, #0
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d10a      	bne.n	80070be <xQueueGenericSend+0x8e>
	__asm volatile
 80070a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ac:	f383 8811 	msr	BASEPRI, r3
 80070b0:	f3bf 8f6f 	isb	sy
 80070b4:	f3bf 8f4f 	dsb	sy
 80070b8:	623b      	str	r3, [r7, #32]
}
 80070ba:	bf00      	nop
 80070bc:	e7fe      	b.n	80070bc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80070be:	f001 fa3b 	bl	8008538 <xTaskGetSchedulerState>
 80070c2:	4603      	mov	r3, r0
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d102      	bne.n	80070ce <xQueueGenericSend+0x9e>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d101      	bne.n	80070d2 <xQueueGenericSend+0xa2>
 80070ce:	2301      	movs	r3, #1
 80070d0:	e000      	b.n	80070d4 <xQueueGenericSend+0xa4>
 80070d2:	2300      	movs	r3, #0
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d10a      	bne.n	80070ee <xQueueGenericSend+0xbe>
	__asm volatile
 80070d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070dc:	f383 8811 	msr	BASEPRI, r3
 80070e0:	f3bf 8f6f 	isb	sy
 80070e4:	f3bf 8f4f 	dsb	sy
 80070e8:	61fb      	str	r3, [r7, #28]
}
 80070ea:	bf00      	nop
 80070ec:	e7fe      	b.n	80070ec <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80070ee:	f7ff fd79 	bl	8006be4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80070f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070fa:	429a      	cmp	r2, r3
 80070fc:	d302      	bcc.n	8007104 <xQueueGenericSend+0xd4>
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	2b02      	cmp	r3, #2
 8007102:	d129      	bne.n	8007158 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007104:	683a      	ldr	r2, [r7, #0]
 8007106:	68b9      	ldr	r1, [r7, #8]
 8007108:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800710a:	f000 fa0b 	bl	8007524 <prvCopyDataToQueue>
 800710e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007114:	2b00      	cmp	r3, #0
 8007116:	d010      	beq.n	800713a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800711a:	3324      	adds	r3, #36	; 0x24
 800711c:	4618      	mov	r0, r3
 800711e:	f001 f84d 	bl	80081bc <xTaskRemoveFromEventList>
 8007122:	4603      	mov	r3, r0
 8007124:	2b00      	cmp	r3, #0
 8007126:	d013      	beq.n	8007150 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007128:	4b3f      	ldr	r3, [pc, #252]	; (8007228 <xQueueGenericSend+0x1f8>)
 800712a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800712e:	601a      	str	r2, [r3, #0]
 8007130:	f3bf 8f4f 	dsb	sy
 8007134:	f3bf 8f6f 	isb	sy
 8007138:	e00a      	b.n	8007150 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800713a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800713c:	2b00      	cmp	r3, #0
 800713e:	d007      	beq.n	8007150 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007140:	4b39      	ldr	r3, [pc, #228]	; (8007228 <xQueueGenericSend+0x1f8>)
 8007142:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007146:	601a      	str	r2, [r3, #0]
 8007148:	f3bf 8f4f 	dsb	sy
 800714c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007150:	f7ff fd78 	bl	8006c44 <vPortExitCritical>
				return pdPASS;
 8007154:	2301      	movs	r3, #1
 8007156:	e063      	b.n	8007220 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d103      	bne.n	8007166 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800715e:	f7ff fd71 	bl	8006c44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007162:	2300      	movs	r3, #0
 8007164:	e05c      	b.n	8007220 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007168:	2b00      	cmp	r3, #0
 800716a:	d106      	bne.n	800717a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800716c:	f107 0314 	add.w	r3, r7, #20
 8007170:	4618      	mov	r0, r3
 8007172:	f001 f887 	bl	8008284 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007176:	2301      	movs	r3, #1
 8007178:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800717a:	f7ff fd63 	bl	8006c44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800717e:	f000 fdf9 	bl	8007d74 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007182:	f7ff fd2f 	bl	8006be4 <vPortEnterCritical>
 8007186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007188:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800718c:	b25b      	sxtb	r3, r3
 800718e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007192:	d103      	bne.n	800719c <xQueueGenericSend+0x16c>
 8007194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007196:	2200      	movs	r2, #0
 8007198:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800719c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800719e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80071a2:	b25b      	sxtb	r3, r3
 80071a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071a8:	d103      	bne.n	80071b2 <xQueueGenericSend+0x182>
 80071aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ac:	2200      	movs	r2, #0
 80071ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80071b2:	f7ff fd47 	bl	8006c44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80071b6:	1d3a      	adds	r2, r7, #4
 80071b8:	f107 0314 	add.w	r3, r7, #20
 80071bc:	4611      	mov	r1, r2
 80071be:	4618      	mov	r0, r3
 80071c0:	f001 f876 	bl	80082b0 <xTaskCheckForTimeOut>
 80071c4:	4603      	mov	r3, r0
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d124      	bne.n	8007214 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80071ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80071cc:	f000 faa2 	bl	8007714 <prvIsQueueFull>
 80071d0:	4603      	mov	r3, r0
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d018      	beq.n	8007208 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80071d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071d8:	3310      	adds	r3, #16
 80071da:	687a      	ldr	r2, [r7, #4]
 80071dc:	4611      	mov	r1, r2
 80071de:	4618      	mov	r0, r3
 80071e0:	f000 ff9c 	bl	800811c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80071e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80071e6:	f000 fa2d 	bl	8007644 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80071ea:	f000 fdd1 	bl	8007d90 <xTaskResumeAll>
 80071ee:	4603      	mov	r3, r0
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	f47f af7c 	bne.w	80070ee <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80071f6:	4b0c      	ldr	r3, [pc, #48]	; (8007228 <xQueueGenericSend+0x1f8>)
 80071f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071fc:	601a      	str	r2, [r3, #0]
 80071fe:	f3bf 8f4f 	dsb	sy
 8007202:	f3bf 8f6f 	isb	sy
 8007206:	e772      	b.n	80070ee <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007208:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800720a:	f000 fa1b 	bl	8007644 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800720e:	f000 fdbf 	bl	8007d90 <xTaskResumeAll>
 8007212:	e76c      	b.n	80070ee <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007214:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007216:	f000 fa15 	bl	8007644 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800721a:	f000 fdb9 	bl	8007d90 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800721e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007220:	4618      	mov	r0, r3
 8007222:	3738      	adds	r7, #56	; 0x38
 8007224:	46bd      	mov	sp, r7
 8007226:	bd80      	pop	{r7, pc}
 8007228:	e000ed04 	.word	0xe000ed04

0800722c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b090      	sub	sp, #64	; 0x40
 8007230:	af00      	add	r7, sp, #0
 8007232:	60f8      	str	r0, [r7, #12]
 8007234:	60b9      	str	r1, [r7, #8]
 8007236:	607a      	str	r2, [r7, #4]
 8007238:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800723e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007240:	2b00      	cmp	r3, #0
 8007242:	d10a      	bne.n	800725a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007248:	f383 8811 	msr	BASEPRI, r3
 800724c:	f3bf 8f6f 	isb	sy
 8007250:	f3bf 8f4f 	dsb	sy
 8007254:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007256:	bf00      	nop
 8007258:	e7fe      	b.n	8007258 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d103      	bne.n	8007268 <xQueueGenericSendFromISR+0x3c>
 8007260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007264:	2b00      	cmp	r3, #0
 8007266:	d101      	bne.n	800726c <xQueueGenericSendFromISR+0x40>
 8007268:	2301      	movs	r3, #1
 800726a:	e000      	b.n	800726e <xQueueGenericSendFromISR+0x42>
 800726c:	2300      	movs	r3, #0
 800726e:	2b00      	cmp	r3, #0
 8007270:	d10a      	bne.n	8007288 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007276:	f383 8811 	msr	BASEPRI, r3
 800727a:	f3bf 8f6f 	isb	sy
 800727e:	f3bf 8f4f 	dsb	sy
 8007282:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007284:	bf00      	nop
 8007286:	e7fe      	b.n	8007286 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	2b02      	cmp	r3, #2
 800728c:	d103      	bne.n	8007296 <xQueueGenericSendFromISR+0x6a>
 800728e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007292:	2b01      	cmp	r3, #1
 8007294:	d101      	bne.n	800729a <xQueueGenericSendFromISR+0x6e>
 8007296:	2301      	movs	r3, #1
 8007298:	e000      	b.n	800729c <xQueueGenericSendFromISR+0x70>
 800729a:	2300      	movs	r3, #0
 800729c:	2b00      	cmp	r3, #0
 800729e:	d10a      	bne.n	80072b6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80072a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072a4:	f383 8811 	msr	BASEPRI, r3
 80072a8:	f3bf 8f6f 	isb	sy
 80072ac:	f3bf 8f4f 	dsb	sy
 80072b0:	623b      	str	r3, [r7, #32]
}
 80072b2:	bf00      	nop
 80072b4:	e7fe      	b.n	80072b4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80072b6:	f7ff fd77 	bl	8006da8 <vPortValidateInterruptPriority>
	__asm volatile
 80072ba:	f3ef 8211 	mrs	r2, BASEPRI
 80072be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072c2:	f383 8811 	msr	BASEPRI, r3
 80072c6:	f3bf 8f6f 	isb	sy
 80072ca:	f3bf 8f4f 	dsb	sy
 80072ce:	61fa      	str	r2, [r7, #28]
 80072d0:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 80072d2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80072d4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80072d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072de:	429a      	cmp	r2, r3
 80072e0:	d302      	bcc.n	80072e8 <xQueueGenericSendFromISR+0xbc>
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	2b02      	cmp	r3, #2
 80072e6:	d12f      	bne.n	8007348 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80072e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80072ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80072f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072f6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80072f8:	683a      	ldr	r2, [r7, #0]
 80072fa:	68b9      	ldr	r1, [r7, #8]
 80072fc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80072fe:	f000 f911 	bl	8007524 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007302:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800730a:	d112      	bne.n	8007332 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800730c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800730e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007310:	2b00      	cmp	r3, #0
 8007312:	d016      	beq.n	8007342 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007316:	3324      	adds	r3, #36	; 0x24
 8007318:	4618      	mov	r0, r3
 800731a:	f000 ff4f 	bl	80081bc <xTaskRemoveFromEventList>
 800731e:	4603      	mov	r3, r0
 8007320:	2b00      	cmp	r3, #0
 8007322:	d00e      	beq.n	8007342 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d00b      	beq.n	8007342 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2201      	movs	r2, #1
 800732e:	601a      	str	r2, [r3, #0]
 8007330:	e007      	b.n	8007342 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007332:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007336:	3301      	adds	r3, #1
 8007338:	b2db      	uxtb	r3, r3
 800733a:	b25a      	sxtb	r2, r3
 800733c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800733e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007342:	2301      	movs	r3, #1
 8007344:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007346:	e001      	b.n	800734c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007348:	2300      	movs	r3, #0
 800734a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800734c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800734e:	617b      	str	r3, [r7, #20]
	__asm volatile
 8007350:	697b      	ldr	r3, [r7, #20]
 8007352:	f383 8811 	msr	BASEPRI, r3
}
 8007356:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007358:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800735a:	4618      	mov	r0, r3
 800735c:	3740      	adds	r7, #64	; 0x40
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}
	...

08007364 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b08c      	sub	sp, #48	; 0x30
 8007368:	af00      	add	r7, sp, #0
 800736a:	60f8      	str	r0, [r7, #12]
 800736c:	60b9      	str	r1, [r7, #8]
 800736e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007370:	2300      	movs	r3, #0
 8007372:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800737a:	2b00      	cmp	r3, #0
 800737c:	d10a      	bne.n	8007394 <xQueueReceive+0x30>
	__asm volatile
 800737e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007382:	f383 8811 	msr	BASEPRI, r3
 8007386:	f3bf 8f6f 	isb	sy
 800738a:	f3bf 8f4f 	dsb	sy
 800738e:	623b      	str	r3, [r7, #32]
}
 8007390:	bf00      	nop
 8007392:	e7fe      	b.n	8007392 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d103      	bne.n	80073a2 <xQueueReceive+0x3e>
 800739a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800739c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d101      	bne.n	80073a6 <xQueueReceive+0x42>
 80073a2:	2301      	movs	r3, #1
 80073a4:	e000      	b.n	80073a8 <xQueueReceive+0x44>
 80073a6:	2300      	movs	r3, #0
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d10a      	bne.n	80073c2 <xQueueReceive+0x5e>
	__asm volatile
 80073ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b0:	f383 8811 	msr	BASEPRI, r3
 80073b4:	f3bf 8f6f 	isb	sy
 80073b8:	f3bf 8f4f 	dsb	sy
 80073bc:	61fb      	str	r3, [r7, #28]
}
 80073be:	bf00      	nop
 80073c0:	e7fe      	b.n	80073c0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80073c2:	f001 f8b9 	bl	8008538 <xTaskGetSchedulerState>
 80073c6:	4603      	mov	r3, r0
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d102      	bne.n	80073d2 <xQueueReceive+0x6e>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d101      	bne.n	80073d6 <xQueueReceive+0x72>
 80073d2:	2301      	movs	r3, #1
 80073d4:	e000      	b.n	80073d8 <xQueueReceive+0x74>
 80073d6:	2300      	movs	r3, #0
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d10a      	bne.n	80073f2 <xQueueReceive+0x8e>
	__asm volatile
 80073dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073e0:	f383 8811 	msr	BASEPRI, r3
 80073e4:	f3bf 8f6f 	isb	sy
 80073e8:	f3bf 8f4f 	dsb	sy
 80073ec:	61bb      	str	r3, [r7, #24]
}
 80073ee:	bf00      	nop
 80073f0:	e7fe      	b.n	80073f0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80073f2:	f7ff fbf7 	bl	8006be4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80073f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073fa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80073fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d01f      	beq.n	8007442 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007402:	68b9      	ldr	r1, [r7, #8]
 8007404:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007406:	f000 f8f7 	bl	80075f8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800740a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800740c:	1e5a      	subs	r2, r3, #1
 800740e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007410:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007414:	691b      	ldr	r3, [r3, #16]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d00f      	beq.n	800743a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800741a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800741c:	3310      	adds	r3, #16
 800741e:	4618      	mov	r0, r3
 8007420:	f000 fecc 	bl	80081bc <xTaskRemoveFromEventList>
 8007424:	4603      	mov	r3, r0
 8007426:	2b00      	cmp	r3, #0
 8007428:	d007      	beq.n	800743a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800742a:	4b3d      	ldr	r3, [pc, #244]	; (8007520 <xQueueReceive+0x1bc>)
 800742c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007430:	601a      	str	r2, [r3, #0]
 8007432:	f3bf 8f4f 	dsb	sy
 8007436:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800743a:	f7ff fc03 	bl	8006c44 <vPortExitCritical>
				return pdPASS;
 800743e:	2301      	movs	r3, #1
 8007440:	e069      	b.n	8007516 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d103      	bne.n	8007450 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007448:	f7ff fbfc 	bl	8006c44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800744c:	2300      	movs	r3, #0
 800744e:	e062      	b.n	8007516 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007452:	2b00      	cmp	r3, #0
 8007454:	d106      	bne.n	8007464 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007456:	f107 0310 	add.w	r3, r7, #16
 800745a:	4618      	mov	r0, r3
 800745c:	f000 ff12 	bl	8008284 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007460:	2301      	movs	r3, #1
 8007462:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007464:	f7ff fbee 	bl	8006c44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007468:	f000 fc84 	bl	8007d74 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800746c:	f7ff fbba 	bl	8006be4 <vPortEnterCritical>
 8007470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007472:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007476:	b25b      	sxtb	r3, r3
 8007478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800747c:	d103      	bne.n	8007486 <xQueueReceive+0x122>
 800747e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007480:	2200      	movs	r2, #0
 8007482:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007488:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800748c:	b25b      	sxtb	r3, r3
 800748e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007492:	d103      	bne.n	800749c <xQueueReceive+0x138>
 8007494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007496:	2200      	movs	r2, #0
 8007498:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800749c:	f7ff fbd2 	bl	8006c44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80074a0:	1d3a      	adds	r2, r7, #4
 80074a2:	f107 0310 	add.w	r3, r7, #16
 80074a6:	4611      	mov	r1, r2
 80074a8:	4618      	mov	r0, r3
 80074aa:	f000 ff01 	bl	80082b0 <xTaskCheckForTimeOut>
 80074ae:	4603      	mov	r3, r0
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d123      	bne.n	80074fc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80074b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074b6:	f000 f917 	bl	80076e8 <prvIsQueueEmpty>
 80074ba:	4603      	mov	r3, r0
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d017      	beq.n	80074f0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80074c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074c2:	3324      	adds	r3, #36	; 0x24
 80074c4:	687a      	ldr	r2, [r7, #4]
 80074c6:	4611      	mov	r1, r2
 80074c8:	4618      	mov	r0, r3
 80074ca:	f000 fe27 	bl	800811c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80074ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074d0:	f000 f8b8 	bl	8007644 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80074d4:	f000 fc5c 	bl	8007d90 <xTaskResumeAll>
 80074d8:	4603      	mov	r3, r0
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d189      	bne.n	80073f2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80074de:	4b10      	ldr	r3, [pc, #64]	; (8007520 <xQueueReceive+0x1bc>)
 80074e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074e4:	601a      	str	r2, [r3, #0]
 80074e6:	f3bf 8f4f 	dsb	sy
 80074ea:	f3bf 8f6f 	isb	sy
 80074ee:	e780      	b.n	80073f2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80074f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074f2:	f000 f8a7 	bl	8007644 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80074f6:	f000 fc4b 	bl	8007d90 <xTaskResumeAll>
 80074fa:	e77a      	b.n	80073f2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80074fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074fe:	f000 f8a1 	bl	8007644 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007502:	f000 fc45 	bl	8007d90 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007506:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007508:	f000 f8ee 	bl	80076e8 <prvIsQueueEmpty>
 800750c:	4603      	mov	r3, r0
 800750e:	2b00      	cmp	r3, #0
 8007510:	f43f af6f 	beq.w	80073f2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007514:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007516:	4618      	mov	r0, r3
 8007518:	3730      	adds	r7, #48	; 0x30
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}
 800751e:	bf00      	nop
 8007520:	e000ed04 	.word	0xe000ed04

08007524 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007524:	b580      	push	{r7, lr}
 8007526:	b086      	sub	sp, #24
 8007528:	af00      	add	r7, sp, #0
 800752a:	60f8      	str	r0, [r7, #12]
 800752c:	60b9      	str	r1, [r7, #8]
 800752e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007530:	2300      	movs	r3, #0
 8007532:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007538:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800753e:	2b00      	cmp	r3, #0
 8007540:	d10d      	bne.n	800755e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d14d      	bne.n	80075e6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	689b      	ldr	r3, [r3, #8]
 800754e:	4618      	mov	r0, r3
 8007550:	f001 f810 	bl	8008574 <xTaskPriorityDisinherit>
 8007554:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	2200      	movs	r2, #0
 800755a:	609a      	str	r2, [r3, #8]
 800755c:	e043      	b.n	80075e6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d119      	bne.n	8007598 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	6858      	ldr	r0, [r3, #4]
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800756c:	461a      	mov	r2, r3
 800756e:	68b9      	ldr	r1, [r7, #8]
 8007570:	f001 ff22 	bl	80093b8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	685a      	ldr	r2, [r3, #4]
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800757c:	441a      	add	r2, r3
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	685a      	ldr	r2, [r3, #4]
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	689b      	ldr	r3, [r3, #8]
 800758a:	429a      	cmp	r2, r3
 800758c:	d32b      	bcc.n	80075e6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681a      	ldr	r2, [r3, #0]
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	605a      	str	r2, [r3, #4]
 8007596:	e026      	b.n	80075e6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	68d8      	ldr	r0, [r3, #12]
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075a0:	461a      	mov	r2, r3
 80075a2:	68b9      	ldr	r1, [r7, #8]
 80075a4:	f001 ff08 	bl	80093b8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	68da      	ldr	r2, [r3, #12]
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075b0:	425b      	negs	r3, r3
 80075b2:	441a      	add	r2, r3
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	68da      	ldr	r2, [r3, #12]
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	429a      	cmp	r2, r3
 80075c2:	d207      	bcs.n	80075d4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	689a      	ldr	r2, [r3, #8]
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075cc:	425b      	negs	r3, r3
 80075ce:	441a      	add	r2, r3
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2b02      	cmp	r3, #2
 80075d8:	d105      	bne.n	80075e6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80075da:	693b      	ldr	r3, [r7, #16]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d002      	beq.n	80075e6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	3b01      	subs	r3, #1
 80075e4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	1c5a      	adds	r2, r3, #1
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80075ee:	697b      	ldr	r3, [r7, #20]
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	3718      	adds	r7, #24
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}

080075f8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b082      	sub	sp, #8
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
 8007600:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007606:	2b00      	cmp	r3, #0
 8007608:	d018      	beq.n	800763c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	68da      	ldr	r2, [r3, #12]
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007612:	441a      	add	r2, r3
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	68da      	ldr	r2, [r3, #12]
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	689b      	ldr	r3, [r3, #8]
 8007620:	429a      	cmp	r2, r3
 8007622:	d303      	bcc.n	800762c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681a      	ldr	r2, [r3, #0]
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	68d9      	ldr	r1, [r3, #12]
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007634:	461a      	mov	r2, r3
 8007636:	6838      	ldr	r0, [r7, #0]
 8007638:	f001 febe 	bl	80093b8 <memcpy>
	}
}
 800763c:	bf00      	nop
 800763e:	3708      	adds	r7, #8
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}

08007644 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b084      	sub	sp, #16
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800764c:	f7ff faca 	bl	8006be4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007656:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007658:	e011      	b.n	800767e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800765e:	2b00      	cmp	r3, #0
 8007660:	d012      	beq.n	8007688 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	3324      	adds	r3, #36	; 0x24
 8007666:	4618      	mov	r0, r3
 8007668:	f000 fda8 	bl	80081bc <xTaskRemoveFromEventList>
 800766c:	4603      	mov	r3, r0
 800766e:	2b00      	cmp	r3, #0
 8007670:	d001      	beq.n	8007676 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007672:	f000 fe7f 	bl	8008374 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007676:	7bfb      	ldrb	r3, [r7, #15]
 8007678:	3b01      	subs	r3, #1
 800767a:	b2db      	uxtb	r3, r3
 800767c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800767e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007682:	2b00      	cmp	r3, #0
 8007684:	dce9      	bgt.n	800765a <prvUnlockQueue+0x16>
 8007686:	e000      	b.n	800768a <prvUnlockQueue+0x46>
					break;
 8007688:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	22ff      	movs	r2, #255	; 0xff
 800768e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007692:	f7ff fad7 	bl	8006c44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007696:	f7ff faa5 	bl	8006be4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80076a0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80076a2:	e011      	b.n	80076c8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	691b      	ldr	r3, [r3, #16]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d012      	beq.n	80076d2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	3310      	adds	r3, #16
 80076b0:	4618      	mov	r0, r3
 80076b2:	f000 fd83 	bl	80081bc <xTaskRemoveFromEventList>
 80076b6:	4603      	mov	r3, r0
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d001      	beq.n	80076c0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80076bc:	f000 fe5a 	bl	8008374 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80076c0:	7bbb      	ldrb	r3, [r7, #14]
 80076c2:	3b01      	subs	r3, #1
 80076c4:	b2db      	uxtb	r3, r3
 80076c6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80076c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	dce9      	bgt.n	80076a4 <prvUnlockQueue+0x60>
 80076d0:	e000      	b.n	80076d4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80076d2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	22ff      	movs	r2, #255	; 0xff
 80076d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80076dc:	f7ff fab2 	bl	8006c44 <vPortExitCritical>
}
 80076e0:	bf00      	nop
 80076e2:	3710      	adds	r7, #16
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}

080076e8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b084      	sub	sp, #16
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80076f0:	f7ff fa78 	bl	8006be4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d102      	bne.n	8007702 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80076fc:	2301      	movs	r3, #1
 80076fe:	60fb      	str	r3, [r7, #12]
 8007700:	e001      	b.n	8007706 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007702:	2300      	movs	r3, #0
 8007704:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007706:	f7ff fa9d 	bl	8006c44 <vPortExitCritical>

	return xReturn;
 800770a:	68fb      	ldr	r3, [r7, #12]
}
 800770c:	4618      	mov	r0, r3
 800770e:	3710      	adds	r7, #16
 8007710:	46bd      	mov	sp, r7
 8007712:	bd80      	pop	{r7, pc}

08007714 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b084      	sub	sp, #16
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800771c:	f7ff fa62 	bl	8006be4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007728:	429a      	cmp	r2, r3
 800772a:	d102      	bne.n	8007732 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800772c:	2301      	movs	r3, #1
 800772e:	60fb      	str	r3, [r7, #12]
 8007730:	e001      	b.n	8007736 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007732:	2300      	movs	r3, #0
 8007734:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007736:	f7ff fa85 	bl	8006c44 <vPortExitCritical>

	return xReturn;
 800773a:	68fb      	ldr	r3, [r7, #12]
}
 800773c:	4618      	mov	r0, r3
 800773e:	3710      	adds	r7, #16
 8007740:	46bd      	mov	sp, r7
 8007742:	bd80      	pop	{r7, pc}

08007744 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007744:	b480      	push	{r7}
 8007746:	b085      	sub	sp, #20
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
 800774c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800774e:	2300      	movs	r3, #0
 8007750:	60fb      	str	r3, [r7, #12]
 8007752:	e014      	b.n	800777e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007754:	4a0f      	ldr	r2, [pc, #60]	; (8007794 <vQueueAddToRegistry+0x50>)
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d10b      	bne.n	8007778 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007760:	490c      	ldr	r1, [pc, #48]	; (8007794 <vQueueAddToRegistry+0x50>)
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	683a      	ldr	r2, [r7, #0]
 8007766:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800776a:	4a0a      	ldr	r2, [pc, #40]	; (8007794 <vQueueAddToRegistry+0x50>)
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	00db      	lsls	r3, r3, #3
 8007770:	4413      	add	r3, r2
 8007772:	687a      	ldr	r2, [r7, #4]
 8007774:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007776:	e006      	b.n	8007786 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	3301      	adds	r3, #1
 800777c:	60fb      	str	r3, [r7, #12]
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	2b07      	cmp	r3, #7
 8007782:	d9e7      	bls.n	8007754 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007784:	bf00      	nop
 8007786:	bf00      	nop
 8007788:	3714      	adds	r7, #20
 800778a:	46bd      	mov	sp, r7
 800778c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007790:	4770      	bx	lr
 8007792:	bf00      	nop
 8007794:	200045a4 	.word	0x200045a4

08007798 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007798:	b580      	push	{r7, lr}
 800779a:	b086      	sub	sp, #24
 800779c:	af00      	add	r7, sp, #0
 800779e:	60f8      	str	r0, [r7, #12]
 80077a0:	60b9      	str	r1, [r7, #8]
 80077a2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80077a8:	f7ff fa1c 	bl	8006be4 <vPortEnterCritical>
 80077ac:	697b      	ldr	r3, [r7, #20]
 80077ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80077b2:	b25b      	sxtb	r3, r3
 80077b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077b8:	d103      	bne.n	80077c2 <vQueueWaitForMessageRestricted+0x2a>
 80077ba:	697b      	ldr	r3, [r7, #20]
 80077bc:	2200      	movs	r2, #0
 80077be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80077c8:	b25b      	sxtb	r3, r3
 80077ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077ce:	d103      	bne.n	80077d8 <vQueueWaitForMessageRestricted+0x40>
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	2200      	movs	r2, #0
 80077d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80077d8:	f7ff fa34 	bl	8006c44 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80077dc:	697b      	ldr	r3, [r7, #20]
 80077de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d106      	bne.n	80077f2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80077e4:	697b      	ldr	r3, [r7, #20]
 80077e6:	3324      	adds	r3, #36	; 0x24
 80077e8:	687a      	ldr	r2, [r7, #4]
 80077ea:	68b9      	ldr	r1, [r7, #8]
 80077ec:	4618      	mov	r0, r3
 80077ee:	f000 fcb9 	bl	8008164 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80077f2:	6978      	ldr	r0, [r7, #20]
 80077f4:	f7ff ff26 	bl	8007644 <prvUnlockQueue>
	}
 80077f8:	bf00      	nop
 80077fa:	3718      	adds	r7, #24
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bd80      	pop	{r7, pc}

08007800 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007800:	b580      	push	{r7, lr}
 8007802:	b08e      	sub	sp, #56	; 0x38
 8007804:	af04      	add	r7, sp, #16
 8007806:	60f8      	str	r0, [r7, #12]
 8007808:	60b9      	str	r1, [r7, #8]
 800780a:	607a      	str	r2, [r7, #4]
 800780c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800780e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007810:	2b00      	cmp	r3, #0
 8007812:	d10a      	bne.n	800782a <xTaskCreateStatic+0x2a>
	__asm volatile
 8007814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007818:	f383 8811 	msr	BASEPRI, r3
 800781c:	f3bf 8f6f 	isb	sy
 8007820:	f3bf 8f4f 	dsb	sy
 8007824:	623b      	str	r3, [r7, #32]
}
 8007826:	bf00      	nop
 8007828:	e7fe      	b.n	8007828 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800782a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800782c:	2b00      	cmp	r3, #0
 800782e:	d10a      	bne.n	8007846 <xTaskCreateStatic+0x46>
	__asm volatile
 8007830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007834:	f383 8811 	msr	BASEPRI, r3
 8007838:	f3bf 8f6f 	isb	sy
 800783c:	f3bf 8f4f 	dsb	sy
 8007840:	61fb      	str	r3, [r7, #28]
}
 8007842:	bf00      	nop
 8007844:	e7fe      	b.n	8007844 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007846:	235c      	movs	r3, #92	; 0x5c
 8007848:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800784a:	693b      	ldr	r3, [r7, #16]
 800784c:	2b5c      	cmp	r3, #92	; 0x5c
 800784e:	d00a      	beq.n	8007866 <xTaskCreateStatic+0x66>
	__asm volatile
 8007850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007854:	f383 8811 	msr	BASEPRI, r3
 8007858:	f3bf 8f6f 	isb	sy
 800785c:	f3bf 8f4f 	dsb	sy
 8007860:	61bb      	str	r3, [r7, #24]
}
 8007862:	bf00      	nop
 8007864:	e7fe      	b.n	8007864 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007866:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800786a:	2b00      	cmp	r3, #0
 800786c:	d01e      	beq.n	80078ac <xTaskCreateStatic+0xac>
 800786e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007870:	2b00      	cmp	r3, #0
 8007872:	d01b      	beq.n	80078ac <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007876:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800787a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800787c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800787e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007880:	2202      	movs	r2, #2
 8007882:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007886:	2300      	movs	r3, #0
 8007888:	9303      	str	r3, [sp, #12]
 800788a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800788c:	9302      	str	r3, [sp, #8]
 800788e:	f107 0314 	add.w	r3, r7, #20
 8007892:	9301      	str	r3, [sp, #4]
 8007894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007896:	9300      	str	r3, [sp, #0]
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	687a      	ldr	r2, [r7, #4]
 800789c:	68b9      	ldr	r1, [r7, #8]
 800789e:	68f8      	ldr	r0, [r7, #12]
 80078a0:	f000 f850 	bl	8007944 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80078a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80078a6:	f000 f8dd 	bl	8007a64 <prvAddNewTaskToReadyList>
 80078aa:	e001      	b.n	80078b0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80078ac:	2300      	movs	r3, #0
 80078ae:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80078b0:	697b      	ldr	r3, [r7, #20]
	}
 80078b2:	4618      	mov	r0, r3
 80078b4:	3728      	adds	r7, #40	; 0x28
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bd80      	pop	{r7, pc}

080078ba <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80078ba:	b580      	push	{r7, lr}
 80078bc:	b08c      	sub	sp, #48	; 0x30
 80078be:	af04      	add	r7, sp, #16
 80078c0:	60f8      	str	r0, [r7, #12]
 80078c2:	60b9      	str	r1, [r7, #8]
 80078c4:	603b      	str	r3, [r7, #0]
 80078c6:	4613      	mov	r3, r2
 80078c8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80078ca:	88fb      	ldrh	r3, [r7, #6]
 80078cc:	009b      	lsls	r3, r3, #2
 80078ce:	4618      	mov	r0, r3
 80078d0:	f7fe fdba 	bl	8006448 <pvPortMalloc>
 80078d4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d00e      	beq.n	80078fa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80078dc:	205c      	movs	r0, #92	; 0x5c
 80078de:	f7fe fdb3 	bl	8006448 <pvPortMalloc>
 80078e2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80078e4:	69fb      	ldr	r3, [r7, #28]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d003      	beq.n	80078f2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80078ea:	69fb      	ldr	r3, [r7, #28]
 80078ec:	697a      	ldr	r2, [r7, #20]
 80078ee:	631a      	str	r2, [r3, #48]	; 0x30
 80078f0:	e005      	b.n	80078fe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80078f2:	6978      	ldr	r0, [r7, #20]
 80078f4:	f7fe fe74 	bl	80065e0 <vPortFree>
 80078f8:	e001      	b.n	80078fe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80078fa:	2300      	movs	r3, #0
 80078fc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80078fe:	69fb      	ldr	r3, [r7, #28]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d017      	beq.n	8007934 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007904:	69fb      	ldr	r3, [r7, #28]
 8007906:	2200      	movs	r2, #0
 8007908:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800790c:	88fa      	ldrh	r2, [r7, #6]
 800790e:	2300      	movs	r3, #0
 8007910:	9303      	str	r3, [sp, #12]
 8007912:	69fb      	ldr	r3, [r7, #28]
 8007914:	9302      	str	r3, [sp, #8]
 8007916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007918:	9301      	str	r3, [sp, #4]
 800791a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800791c:	9300      	str	r3, [sp, #0]
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	68b9      	ldr	r1, [r7, #8]
 8007922:	68f8      	ldr	r0, [r7, #12]
 8007924:	f000 f80e 	bl	8007944 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007928:	69f8      	ldr	r0, [r7, #28]
 800792a:	f000 f89b 	bl	8007a64 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800792e:	2301      	movs	r3, #1
 8007930:	61bb      	str	r3, [r7, #24]
 8007932:	e002      	b.n	800793a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007934:	f04f 33ff 	mov.w	r3, #4294967295
 8007938:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800793a:	69bb      	ldr	r3, [r7, #24]
	}
 800793c:	4618      	mov	r0, r3
 800793e:	3720      	adds	r7, #32
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}

08007944 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b088      	sub	sp, #32
 8007948:	af00      	add	r7, sp, #0
 800794a:	60f8      	str	r0, [r7, #12]
 800794c:	60b9      	str	r1, [r7, #8]
 800794e:	607a      	str	r2, [r7, #4]
 8007950:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007954:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	009b      	lsls	r3, r3, #2
 800795a:	461a      	mov	r2, r3
 800795c:	21a5      	movs	r1, #165	; 0xa5
 800795e:	f001 fd39 	bl	80093d4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007964:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800796c:	3b01      	subs	r3, #1
 800796e:	009b      	lsls	r3, r3, #2
 8007970:	4413      	add	r3, r2
 8007972:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007974:	69bb      	ldr	r3, [r7, #24]
 8007976:	f023 0307 	bic.w	r3, r3, #7
 800797a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800797c:	69bb      	ldr	r3, [r7, #24]
 800797e:	f003 0307 	and.w	r3, r3, #7
 8007982:	2b00      	cmp	r3, #0
 8007984:	d00a      	beq.n	800799c <prvInitialiseNewTask+0x58>
	__asm volatile
 8007986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800798a:	f383 8811 	msr	BASEPRI, r3
 800798e:	f3bf 8f6f 	isb	sy
 8007992:	f3bf 8f4f 	dsb	sy
 8007996:	617b      	str	r3, [r7, #20]
}
 8007998:	bf00      	nop
 800799a:	e7fe      	b.n	800799a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d01f      	beq.n	80079e2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80079a2:	2300      	movs	r3, #0
 80079a4:	61fb      	str	r3, [r7, #28]
 80079a6:	e012      	b.n	80079ce <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80079a8:	68ba      	ldr	r2, [r7, #8]
 80079aa:	69fb      	ldr	r3, [r7, #28]
 80079ac:	4413      	add	r3, r2
 80079ae:	7819      	ldrb	r1, [r3, #0]
 80079b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079b2:	69fb      	ldr	r3, [r7, #28]
 80079b4:	4413      	add	r3, r2
 80079b6:	3334      	adds	r3, #52	; 0x34
 80079b8:	460a      	mov	r2, r1
 80079ba:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80079bc:	68ba      	ldr	r2, [r7, #8]
 80079be:	69fb      	ldr	r3, [r7, #28]
 80079c0:	4413      	add	r3, r2
 80079c2:	781b      	ldrb	r3, [r3, #0]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d006      	beq.n	80079d6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80079c8:	69fb      	ldr	r3, [r7, #28]
 80079ca:	3301      	adds	r3, #1
 80079cc:	61fb      	str	r3, [r7, #28]
 80079ce:	69fb      	ldr	r3, [r7, #28]
 80079d0:	2b0f      	cmp	r3, #15
 80079d2:	d9e9      	bls.n	80079a8 <prvInitialiseNewTask+0x64>
 80079d4:	e000      	b.n	80079d8 <prvInitialiseNewTask+0x94>
			{
				break;
 80079d6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80079d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079da:	2200      	movs	r2, #0
 80079dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80079e0:	e003      	b.n	80079ea <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80079e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079e4:	2200      	movs	r2, #0
 80079e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80079ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ec:	2b37      	cmp	r3, #55	; 0x37
 80079ee:	d901      	bls.n	80079f4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80079f0:	2337      	movs	r3, #55	; 0x37
 80079f2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80079f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80079f8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80079fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80079fe:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a02:	2200      	movs	r2, #0
 8007a04:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a08:	3304      	adds	r3, #4
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f7fe ff26 	bl	800685c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a12:	3318      	adds	r3, #24
 8007a14:	4618      	mov	r0, r3
 8007a16:	f7fe ff21 	bl	800685c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a1e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a22:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a28:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a2e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a32:	2200      	movs	r2, #0
 8007a34:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a38:	2200      	movs	r2, #0
 8007a3a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007a3e:	683a      	ldr	r2, [r7, #0]
 8007a40:	68f9      	ldr	r1, [r7, #12]
 8007a42:	69b8      	ldr	r0, [r7, #24]
 8007a44:	f7fe ff9e 	bl	8006984 <pxPortInitialiseStack>
 8007a48:	4602      	mov	r2, r0
 8007a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a4c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d002      	beq.n	8007a5a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a58:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007a5a:	bf00      	nop
 8007a5c:	3720      	adds	r7, #32
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd80      	pop	{r7, pc}
	...

08007a64 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b082      	sub	sp, #8
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007a6c:	f7ff f8ba 	bl	8006be4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007a70:	4b2d      	ldr	r3, [pc, #180]	; (8007b28 <prvAddNewTaskToReadyList+0xc4>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	3301      	adds	r3, #1
 8007a76:	4a2c      	ldr	r2, [pc, #176]	; (8007b28 <prvAddNewTaskToReadyList+0xc4>)
 8007a78:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007a7a:	4b2c      	ldr	r3, [pc, #176]	; (8007b2c <prvAddNewTaskToReadyList+0xc8>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d109      	bne.n	8007a96 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007a82:	4a2a      	ldr	r2, [pc, #168]	; (8007b2c <prvAddNewTaskToReadyList+0xc8>)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007a88:	4b27      	ldr	r3, [pc, #156]	; (8007b28 <prvAddNewTaskToReadyList+0xc4>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	2b01      	cmp	r3, #1
 8007a8e:	d110      	bne.n	8007ab2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007a90:	f000 fc94 	bl	80083bc <prvInitialiseTaskLists>
 8007a94:	e00d      	b.n	8007ab2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007a96:	4b26      	ldr	r3, [pc, #152]	; (8007b30 <prvAddNewTaskToReadyList+0xcc>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d109      	bne.n	8007ab2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007a9e:	4b23      	ldr	r3, [pc, #140]	; (8007b2c <prvAddNewTaskToReadyList+0xc8>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aa8:	429a      	cmp	r2, r3
 8007aaa:	d802      	bhi.n	8007ab2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007aac:	4a1f      	ldr	r2, [pc, #124]	; (8007b2c <prvAddNewTaskToReadyList+0xc8>)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007ab2:	4b20      	ldr	r3, [pc, #128]	; (8007b34 <prvAddNewTaskToReadyList+0xd0>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	3301      	adds	r3, #1
 8007ab8:	4a1e      	ldr	r2, [pc, #120]	; (8007b34 <prvAddNewTaskToReadyList+0xd0>)
 8007aba:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007abc:	4b1d      	ldr	r3, [pc, #116]	; (8007b34 <prvAddNewTaskToReadyList+0xd0>)
 8007abe:	681a      	ldr	r2, [r3, #0]
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ac8:	4b1b      	ldr	r3, [pc, #108]	; (8007b38 <prvAddNewTaskToReadyList+0xd4>)
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	429a      	cmp	r2, r3
 8007ace:	d903      	bls.n	8007ad8 <prvAddNewTaskToReadyList+0x74>
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ad4:	4a18      	ldr	r2, [pc, #96]	; (8007b38 <prvAddNewTaskToReadyList+0xd4>)
 8007ad6:	6013      	str	r3, [r2, #0]
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007adc:	4613      	mov	r3, r2
 8007ade:	009b      	lsls	r3, r3, #2
 8007ae0:	4413      	add	r3, r2
 8007ae2:	009b      	lsls	r3, r3, #2
 8007ae4:	4a15      	ldr	r2, [pc, #84]	; (8007b3c <prvAddNewTaskToReadyList+0xd8>)
 8007ae6:	441a      	add	r2, r3
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	3304      	adds	r3, #4
 8007aec:	4619      	mov	r1, r3
 8007aee:	4610      	mov	r0, r2
 8007af0:	f7fe fec1 	bl	8006876 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007af4:	f7ff f8a6 	bl	8006c44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007af8:	4b0d      	ldr	r3, [pc, #52]	; (8007b30 <prvAddNewTaskToReadyList+0xcc>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d00e      	beq.n	8007b1e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007b00:	4b0a      	ldr	r3, [pc, #40]	; (8007b2c <prvAddNewTaskToReadyList+0xc8>)
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b0a:	429a      	cmp	r2, r3
 8007b0c:	d207      	bcs.n	8007b1e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007b0e:	4b0c      	ldr	r3, [pc, #48]	; (8007b40 <prvAddNewTaskToReadyList+0xdc>)
 8007b10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b14:	601a      	str	r2, [r3, #0]
 8007b16:	f3bf 8f4f 	dsb	sy
 8007b1a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b1e:	bf00      	nop
 8007b20:	3708      	adds	r7, #8
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bd80      	pop	{r7, pc}
 8007b26:	bf00      	nop
 8007b28:	20004ab8 	.word	0x20004ab8
 8007b2c:	200045e4 	.word	0x200045e4
 8007b30:	20004ac4 	.word	0x20004ac4
 8007b34:	20004ad4 	.word	0x20004ad4
 8007b38:	20004ac0 	.word	0x20004ac0
 8007b3c:	200045e8 	.word	0x200045e8
 8007b40:	e000ed04 	.word	0xe000ed04

08007b44 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b08a      	sub	sp, #40	; 0x28
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
 8007b4c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8007b4e:	2300      	movs	r3, #0
 8007b50:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d10a      	bne.n	8007b6e <vTaskDelayUntil+0x2a>
	__asm volatile
 8007b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b5c:	f383 8811 	msr	BASEPRI, r3
 8007b60:	f3bf 8f6f 	isb	sy
 8007b64:	f3bf 8f4f 	dsb	sy
 8007b68:	617b      	str	r3, [r7, #20]
}
 8007b6a:	bf00      	nop
 8007b6c:	e7fe      	b.n	8007b6c <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d10a      	bne.n	8007b8a <vTaskDelayUntil+0x46>
	__asm volatile
 8007b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b78:	f383 8811 	msr	BASEPRI, r3
 8007b7c:	f3bf 8f6f 	isb	sy
 8007b80:	f3bf 8f4f 	dsb	sy
 8007b84:	613b      	str	r3, [r7, #16]
}
 8007b86:	bf00      	nop
 8007b88:	e7fe      	b.n	8007b88 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8007b8a:	4b2a      	ldr	r3, [pc, #168]	; (8007c34 <vTaskDelayUntil+0xf0>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d00a      	beq.n	8007ba8 <vTaskDelayUntil+0x64>
	__asm volatile
 8007b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b96:	f383 8811 	msr	BASEPRI, r3
 8007b9a:	f3bf 8f6f 	isb	sy
 8007b9e:	f3bf 8f4f 	dsb	sy
 8007ba2:	60fb      	str	r3, [r7, #12]
}
 8007ba4:	bf00      	nop
 8007ba6:	e7fe      	b.n	8007ba6 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8007ba8:	f000 f8e4 	bl	8007d74 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8007bac:	4b22      	ldr	r3, [pc, #136]	; (8007c38 <vTaskDelayUntil+0xf4>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	683a      	ldr	r2, [r7, #0]
 8007bb8:	4413      	add	r3, r2
 8007bba:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	6a3a      	ldr	r2, [r7, #32]
 8007bc2:	429a      	cmp	r2, r3
 8007bc4:	d20b      	bcs.n	8007bde <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	69fa      	ldr	r2, [r7, #28]
 8007bcc:	429a      	cmp	r2, r3
 8007bce:	d211      	bcs.n	8007bf4 <vTaskDelayUntil+0xb0>
 8007bd0:	69fa      	ldr	r2, [r7, #28]
 8007bd2:	6a3b      	ldr	r3, [r7, #32]
 8007bd4:	429a      	cmp	r2, r3
 8007bd6:	d90d      	bls.n	8007bf4 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8007bd8:	2301      	movs	r3, #1
 8007bda:	627b      	str	r3, [r7, #36]	; 0x24
 8007bdc:	e00a      	b.n	8007bf4 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	69fa      	ldr	r2, [r7, #28]
 8007be4:	429a      	cmp	r2, r3
 8007be6:	d303      	bcc.n	8007bf0 <vTaskDelayUntil+0xac>
 8007be8:	69fa      	ldr	r2, [r7, #28]
 8007bea:	6a3b      	ldr	r3, [r7, #32]
 8007bec:	429a      	cmp	r2, r3
 8007bee:	d901      	bls.n	8007bf4 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	69fa      	ldr	r2, [r7, #28]
 8007bf8:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8007bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d006      	beq.n	8007c0e <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8007c00:	69fa      	ldr	r2, [r7, #28]
 8007c02:	6a3b      	ldr	r3, [r7, #32]
 8007c04:	1ad3      	subs	r3, r2, r3
 8007c06:	2100      	movs	r1, #0
 8007c08:	4618      	mov	r0, r3
 8007c0a:	f000 fd21 	bl	8008650 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8007c0e:	f000 f8bf 	bl	8007d90 <xTaskResumeAll>
 8007c12:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007c14:	69bb      	ldr	r3, [r7, #24]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d107      	bne.n	8007c2a <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8007c1a:	4b08      	ldr	r3, [pc, #32]	; (8007c3c <vTaskDelayUntil+0xf8>)
 8007c1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c20:	601a      	str	r2, [r3, #0]
 8007c22:	f3bf 8f4f 	dsb	sy
 8007c26:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007c2a:	bf00      	nop
 8007c2c:	3728      	adds	r7, #40	; 0x28
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}
 8007c32:	bf00      	nop
 8007c34:	20004ae0 	.word	0x20004ae0
 8007c38:	20004abc 	.word	0x20004abc
 8007c3c:	e000ed04 	.word	0xe000ed04

08007c40 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b084      	sub	sp, #16
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007c48:	2300      	movs	r3, #0
 8007c4a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d017      	beq.n	8007c82 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007c52:	4b13      	ldr	r3, [pc, #76]	; (8007ca0 <vTaskDelay+0x60>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d00a      	beq.n	8007c70 <vTaskDelay+0x30>
	__asm volatile
 8007c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c5e:	f383 8811 	msr	BASEPRI, r3
 8007c62:	f3bf 8f6f 	isb	sy
 8007c66:	f3bf 8f4f 	dsb	sy
 8007c6a:	60bb      	str	r3, [r7, #8]
}
 8007c6c:	bf00      	nop
 8007c6e:	e7fe      	b.n	8007c6e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007c70:	f000 f880 	bl	8007d74 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007c74:	2100      	movs	r1, #0
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f000 fcea 	bl	8008650 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007c7c:	f000 f888 	bl	8007d90 <xTaskResumeAll>
 8007c80:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d107      	bne.n	8007c98 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007c88:	4b06      	ldr	r3, [pc, #24]	; (8007ca4 <vTaskDelay+0x64>)
 8007c8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c8e:	601a      	str	r2, [r3, #0]
 8007c90:	f3bf 8f4f 	dsb	sy
 8007c94:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007c98:	bf00      	nop
 8007c9a:	3710      	adds	r7, #16
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}
 8007ca0:	20004ae0 	.word	0x20004ae0
 8007ca4:	e000ed04 	.word	0xe000ed04

08007ca8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b08a      	sub	sp, #40	; 0x28
 8007cac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007cae:	2300      	movs	r3, #0
 8007cb0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007cb6:	463a      	mov	r2, r7
 8007cb8:	1d39      	adds	r1, r7, #4
 8007cba:	f107 0308 	add.w	r3, r7, #8
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f7fe fb8e 	bl	80063e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007cc4:	6839      	ldr	r1, [r7, #0]
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	68ba      	ldr	r2, [r7, #8]
 8007cca:	9202      	str	r2, [sp, #8]
 8007ccc:	9301      	str	r3, [sp, #4]
 8007cce:	2300      	movs	r3, #0
 8007cd0:	9300      	str	r3, [sp, #0]
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	460a      	mov	r2, r1
 8007cd6:	4921      	ldr	r1, [pc, #132]	; (8007d5c <vTaskStartScheduler+0xb4>)
 8007cd8:	4821      	ldr	r0, [pc, #132]	; (8007d60 <vTaskStartScheduler+0xb8>)
 8007cda:	f7ff fd91 	bl	8007800 <xTaskCreateStatic>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	4a20      	ldr	r2, [pc, #128]	; (8007d64 <vTaskStartScheduler+0xbc>)
 8007ce2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007ce4:	4b1f      	ldr	r3, [pc, #124]	; (8007d64 <vTaskStartScheduler+0xbc>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d002      	beq.n	8007cf2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007cec:	2301      	movs	r3, #1
 8007cee:	617b      	str	r3, [r7, #20]
 8007cf0:	e001      	b.n	8007cf6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007cf6:	697b      	ldr	r3, [r7, #20]
 8007cf8:	2b01      	cmp	r3, #1
 8007cfa:	d102      	bne.n	8007d02 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007cfc:	f000 fcfc 	bl	80086f8 <xTimerCreateTimerTask>
 8007d00:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	2b01      	cmp	r3, #1
 8007d06:	d116      	bne.n	8007d36 <vTaskStartScheduler+0x8e>
	__asm volatile
 8007d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d0c:	f383 8811 	msr	BASEPRI, r3
 8007d10:	f3bf 8f6f 	isb	sy
 8007d14:	f3bf 8f4f 	dsb	sy
 8007d18:	613b      	str	r3, [r7, #16]
}
 8007d1a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007d1c:	4b12      	ldr	r3, [pc, #72]	; (8007d68 <vTaskStartScheduler+0xc0>)
 8007d1e:	f04f 32ff 	mov.w	r2, #4294967295
 8007d22:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007d24:	4b11      	ldr	r3, [pc, #68]	; (8007d6c <vTaskStartScheduler+0xc4>)
 8007d26:	2201      	movs	r2, #1
 8007d28:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007d2a:	4b11      	ldr	r3, [pc, #68]	; (8007d70 <vTaskStartScheduler+0xc8>)
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007d30:	f7fe feb6 	bl	8006aa0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007d34:	e00e      	b.n	8007d54 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007d36:	697b      	ldr	r3, [r7, #20]
 8007d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d3c:	d10a      	bne.n	8007d54 <vTaskStartScheduler+0xac>
	__asm volatile
 8007d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d42:	f383 8811 	msr	BASEPRI, r3
 8007d46:	f3bf 8f6f 	isb	sy
 8007d4a:	f3bf 8f4f 	dsb	sy
 8007d4e:	60fb      	str	r3, [r7, #12]
}
 8007d50:	bf00      	nop
 8007d52:	e7fe      	b.n	8007d52 <vTaskStartScheduler+0xaa>
}
 8007d54:	bf00      	nop
 8007d56:	3718      	adds	r7, #24
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}
 8007d5c:	08009d44 	.word	0x08009d44
 8007d60:	0800838d 	.word	0x0800838d
 8007d64:	20004adc 	.word	0x20004adc
 8007d68:	20004ad8 	.word	0x20004ad8
 8007d6c:	20004ac4 	.word	0x20004ac4
 8007d70:	20004abc 	.word	0x20004abc

08007d74 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007d74:	b480      	push	{r7}
 8007d76:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007d78:	4b04      	ldr	r3, [pc, #16]	; (8007d8c <vTaskSuspendAll+0x18>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	3301      	adds	r3, #1
 8007d7e:	4a03      	ldr	r2, [pc, #12]	; (8007d8c <vTaskSuspendAll+0x18>)
 8007d80:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007d82:	bf00      	nop
 8007d84:	46bd      	mov	sp, r7
 8007d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8a:	4770      	bx	lr
 8007d8c:	20004ae0 	.word	0x20004ae0

08007d90 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b084      	sub	sp, #16
 8007d94:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007d96:	2300      	movs	r3, #0
 8007d98:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007d9e:	4b42      	ldr	r3, [pc, #264]	; (8007ea8 <xTaskResumeAll+0x118>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d10a      	bne.n	8007dbc <xTaskResumeAll+0x2c>
	__asm volatile
 8007da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007daa:	f383 8811 	msr	BASEPRI, r3
 8007dae:	f3bf 8f6f 	isb	sy
 8007db2:	f3bf 8f4f 	dsb	sy
 8007db6:	603b      	str	r3, [r7, #0]
}
 8007db8:	bf00      	nop
 8007dba:	e7fe      	b.n	8007dba <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007dbc:	f7fe ff12 	bl	8006be4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007dc0:	4b39      	ldr	r3, [pc, #228]	; (8007ea8 <xTaskResumeAll+0x118>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	3b01      	subs	r3, #1
 8007dc6:	4a38      	ldr	r2, [pc, #224]	; (8007ea8 <xTaskResumeAll+0x118>)
 8007dc8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007dca:	4b37      	ldr	r3, [pc, #220]	; (8007ea8 <xTaskResumeAll+0x118>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d162      	bne.n	8007e98 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007dd2:	4b36      	ldr	r3, [pc, #216]	; (8007eac <xTaskResumeAll+0x11c>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d05e      	beq.n	8007e98 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007dda:	e02f      	b.n	8007e3c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ddc:	4b34      	ldr	r3, [pc, #208]	; (8007eb0 <xTaskResumeAll+0x120>)
 8007dde:	68db      	ldr	r3, [r3, #12]
 8007de0:	68db      	ldr	r3, [r3, #12]
 8007de2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	3318      	adds	r3, #24
 8007de8:	4618      	mov	r0, r3
 8007dea:	f7fe fda1 	bl	8006930 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	3304      	adds	r3, #4
 8007df2:	4618      	mov	r0, r3
 8007df4:	f7fe fd9c 	bl	8006930 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dfc:	4b2d      	ldr	r3, [pc, #180]	; (8007eb4 <xTaskResumeAll+0x124>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	429a      	cmp	r2, r3
 8007e02:	d903      	bls.n	8007e0c <xTaskResumeAll+0x7c>
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e08:	4a2a      	ldr	r2, [pc, #168]	; (8007eb4 <xTaskResumeAll+0x124>)
 8007e0a:	6013      	str	r3, [r2, #0]
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e10:	4613      	mov	r3, r2
 8007e12:	009b      	lsls	r3, r3, #2
 8007e14:	4413      	add	r3, r2
 8007e16:	009b      	lsls	r3, r3, #2
 8007e18:	4a27      	ldr	r2, [pc, #156]	; (8007eb8 <xTaskResumeAll+0x128>)
 8007e1a:	441a      	add	r2, r3
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	3304      	adds	r3, #4
 8007e20:	4619      	mov	r1, r3
 8007e22:	4610      	mov	r0, r2
 8007e24:	f7fe fd27 	bl	8006876 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e2c:	4b23      	ldr	r3, [pc, #140]	; (8007ebc <xTaskResumeAll+0x12c>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e32:	429a      	cmp	r2, r3
 8007e34:	d302      	bcc.n	8007e3c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007e36:	4b22      	ldr	r3, [pc, #136]	; (8007ec0 <xTaskResumeAll+0x130>)
 8007e38:	2201      	movs	r2, #1
 8007e3a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007e3c:	4b1c      	ldr	r3, [pc, #112]	; (8007eb0 <xTaskResumeAll+0x120>)
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d1cb      	bne.n	8007ddc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d001      	beq.n	8007e4e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007e4a:	f000 fb55 	bl	80084f8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007e4e:	4b1d      	ldr	r3, [pc, #116]	; (8007ec4 <xTaskResumeAll+0x134>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d010      	beq.n	8007e7c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007e5a:	f000 f847 	bl	8007eec <xTaskIncrementTick>
 8007e5e:	4603      	mov	r3, r0
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d002      	beq.n	8007e6a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007e64:	4b16      	ldr	r3, [pc, #88]	; (8007ec0 <xTaskResumeAll+0x130>)
 8007e66:	2201      	movs	r2, #1
 8007e68:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	3b01      	subs	r3, #1
 8007e6e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d1f1      	bne.n	8007e5a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007e76:	4b13      	ldr	r3, [pc, #76]	; (8007ec4 <xTaskResumeAll+0x134>)
 8007e78:	2200      	movs	r2, #0
 8007e7a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007e7c:	4b10      	ldr	r3, [pc, #64]	; (8007ec0 <xTaskResumeAll+0x130>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d009      	beq.n	8007e98 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007e84:	2301      	movs	r3, #1
 8007e86:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007e88:	4b0f      	ldr	r3, [pc, #60]	; (8007ec8 <xTaskResumeAll+0x138>)
 8007e8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e8e:	601a      	str	r2, [r3, #0]
 8007e90:	f3bf 8f4f 	dsb	sy
 8007e94:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007e98:	f7fe fed4 	bl	8006c44 <vPortExitCritical>

	return xAlreadyYielded;
 8007e9c:	68bb      	ldr	r3, [r7, #8]
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	3710      	adds	r7, #16
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}
 8007ea6:	bf00      	nop
 8007ea8:	20004ae0 	.word	0x20004ae0
 8007eac:	20004ab8 	.word	0x20004ab8
 8007eb0:	20004a78 	.word	0x20004a78
 8007eb4:	20004ac0 	.word	0x20004ac0
 8007eb8:	200045e8 	.word	0x200045e8
 8007ebc:	200045e4 	.word	0x200045e4
 8007ec0:	20004acc 	.word	0x20004acc
 8007ec4:	20004ac8 	.word	0x20004ac8
 8007ec8:	e000ed04 	.word	0xe000ed04

08007ecc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b083      	sub	sp, #12
 8007ed0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007ed2:	4b05      	ldr	r3, [pc, #20]	; (8007ee8 <xTaskGetTickCount+0x1c>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007ed8:	687b      	ldr	r3, [r7, #4]
}
 8007eda:	4618      	mov	r0, r3
 8007edc:	370c      	adds	r7, #12
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee4:	4770      	bx	lr
 8007ee6:	bf00      	nop
 8007ee8:	20004abc 	.word	0x20004abc

08007eec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b086      	sub	sp, #24
 8007ef0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ef6:	4b4f      	ldr	r3, [pc, #316]	; (8008034 <xTaskIncrementTick+0x148>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	f040 808f 	bne.w	800801e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007f00:	4b4d      	ldr	r3, [pc, #308]	; (8008038 <xTaskIncrementTick+0x14c>)
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	3301      	adds	r3, #1
 8007f06:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007f08:	4a4b      	ldr	r2, [pc, #300]	; (8008038 <xTaskIncrementTick+0x14c>)
 8007f0a:	693b      	ldr	r3, [r7, #16]
 8007f0c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007f0e:	693b      	ldr	r3, [r7, #16]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d120      	bne.n	8007f56 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007f14:	4b49      	ldr	r3, [pc, #292]	; (800803c <xTaskIncrementTick+0x150>)
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d00a      	beq.n	8007f34 <xTaskIncrementTick+0x48>
	__asm volatile
 8007f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f22:	f383 8811 	msr	BASEPRI, r3
 8007f26:	f3bf 8f6f 	isb	sy
 8007f2a:	f3bf 8f4f 	dsb	sy
 8007f2e:	603b      	str	r3, [r7, #0]
}
 8007f30:	bf00      	nop
 8007f32:	e7fe      	b.n	8007f32 <xTaskIncrementTick+0x46>
 8007f34:	4b41      	ldr	r3, [pc, #260]	; (800803c <xTaskIncrementTick+0x150>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	60fb      	str	r3, [r7, #12]
 8007f3a:	4b41      	ldr	r3, [pc, #260]	; (8008040 <xTaskIncrementTick+0x154>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	4a3f      	ldr	r2, [pc, #252]	; (800803c <xTaskIncrementTick+0x150>)
 8007f40:	6013      	str	r3, [r2, #0]
 8007f42:	4a3f      	ldr	r2, [pc, #252]	; (8008040 <xTaskIncrementTick+0x154>)
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	6013      	str	r3, [r2, #0]
 8007f48:	4b3e      	ldr	r3, [pc, #248]	; (8008044 <xTaskIncrementTick+0x158>)
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	3301      	adds	r3, #1
 8007f4e:	4a3d      	ldr	r2, [pc, #244]	; (8008044 <xTaskIncrementTick+0x158>)
 8007f50:	6013      	str	r3, [r2, #0]
 8007f52:	f000 fad1 	bl	80084f8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007f56:	4b3c      	ldr	r3, [pc, #240]	; (8008048 <xTaskIncrementTick+0x15c>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	693a      	ldr	r2, [r7, #16]
 8007f5c:	429a      	cmp	r2, r3
 8007f5e:	d349      	bcc.n	8007ff4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f60:	4b36      	ldr	r3, [pc, #216]	; (800803c <xTaskIncrementTick+0x150>)
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d104      	bne.n	8007f74 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f6a:	4b37      	ldr	r3, [pc, #220]	; (8008048 <xTaskIncrementTick+0x15c>)
 8007f6c:	f04f 32ff 	mov.w	r2, #4294967295
 8007f70:	601a      	str	r2, [r3, #0]
					break;
 8007f72:	e03f      	b.n	8007ff4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f74:	4b31      	ldr	r3, [pc, #196]	; (800803c <xTaskIncrementTick+0x150>)
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	68db      	ldr	r3, [r3, #12]
 8007f7a:	68db      	ldr	r3, [r3, #12]
 8007f7c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	685b      	ldr	r3, [r3, #4]
 8007f82:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007f84:	693a      	ldr	r2, [r7, #16]
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	429a      	cmp	r2, r3
 8007f8a:	d203      	bcs.n	8007f94 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007f8c:	4a2e      	ldr	r2, [pc, #184]	; (8008048 <xTaskIncrementTick+0x15c>)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007f92:	e02f      	b.n	8007ff4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	3304      	adds	r3, #4
 8007f98:	4618      	mov	r0, r3
 8007f9a:	f7fe fcc9 	bl	8006930 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007f9e:	68bb      	ldr	r3, [r7, #8]
 8007fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d004      	beq.n	8007fb0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	3318      	adds	r3, #24
 8007faa:	4618      	mov	r0, r3
 8007fac:	f7fe fcc0 	bl	8006930 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fb4:	4b25      	ldr	r3, [pc, #148]	; (800804c <xTaskIncrementTick+0x160>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	429a      	cmp	r2, r3
 8007fba:	d903      	bls.n	8007fc4 <xTaskIncrementTick+0xd8>
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fc0:	4a22      	ldr	r2, [pc, #136]	; (800804c <xTaskIncrementTick+0x160>)
 8007fc2:	6013      	str	r3, [r2, #0]
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fc8:	4613      	mov	r3, r2
 8007fca:	009b      	lsls	r3, r3, #2
 8007fcc:	4413      	add	r3, r2
 8007fce:	009b      	lsls	r3, r3, #2
 8007fd0:	4a1f      	ldr	r2, [pc, #124]	; (8008050 <xTaskIncrementTick+0x164>)
 8007fd2:	441a      	add	r2, r3
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	3304      	adds	r3, #4
 8007fd8:	4619      	mov	r1, r3
 8007fda:	4610      	mov	r0, r2
 8007fdc:	f7fe fc4b 	bl	8006876 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fe4:	4b1b      	ldr	r3, [pc, #108]	; (8008054 <xTaskIncrementTick+0x168>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fea:	429a      	cmp	r2, r3
 8007fec:	d3b8      	bcc.n	8007f60 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007fee:	2301      	movs	r3, #1
 8007ff0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ff2:	e7b5      	b.n	8007f60 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007ff4:	4b17      	ldr	r3, [pc, #92]	; (8008054 <xTaskIncrementTick+0x168>)
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ffa:	4915      	ldr	r1, [pc, #84]	; (8008050 <xTaskIncrementTick+0x164>)
 8007ffc:	4613      	mov	r3, r2
 8007ffe:	009b      	lsls	r3, r3, #2
 8008000:	4413      	add	r3, r2
 8008002:	009b      	lsls	r3, r3, #2
 8008004:	440b      	add	r3, r1
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	2b01      	cmp	r3, #1
 800800a:	d901      	bls.n	8008010 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800800c:	2301      	movs	r3, #1
 800800e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008010:	4b11      	ldr	r3, [pc, #68]	; (8008058 <xTaskIncrementTick+0x16c>)
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d007      	beq.n	8008028 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008018:	2301      	movs	r3, #1
 800801a:	617b      	str	r3, [r7, #20]
 800801c:	e004      	b.n	8008028 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800801e:	4b0f      	ldr	r3, [pc, #60]	; (800805c <xTaskIncrementTick+0x170>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	3301      	adds	r3, #1
 8008024:	4a0d      	ldr	r2, [pc, #52]	; (800805c <xTaskIncrementTick+0x170>)
 8008026:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008028:	697b      	ldr	r3, [r7, #20]
}
 800802a:	4618      	mov	r0, r3
 800802c:	3718      	adds	r7, #24
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}
 8008032:	bf00      	nop
 8008034:	20004ae0 	.word	0x20004ae0
 8008038:	20004abc 	.word	0x20004abc
 800803c:	20004a70 	.word	0x20004a70
 8008040:	20004a74 	.word	0x20004a74
 8008044:	20004ad0 	.word	0x20004ad0
 8008048:	20004ad8 	.word	0x20004ad8
 800804c:	20004ac0 	.word	0x20004ac0
 8008050:	200045e8 	.word	0x200045e8
 8008054:	200045e4 	.word	0x200045e4
 8008058:	20004acc 	.word	0x20004acc
 800805c:	20004ac8 	.word	0x20004ac8

08008060 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008060:	b480      	push	{r7}
 8008062:	b085      	sub	sp, #20
 8008064:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008066:	4b28      	ldr	r3, [pc, #160]	; (8008108 <vTaskSwitchContext+0xa8>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d003      	beq.n	8008076 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800806e:	4b27      	ldr	r3, [pc, #156]	; (800810c <vTaskSwitchContext+0xac>)
 8008070:	2201      	movs	r2, #1
 8008072:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008074:	e041      	b.n	80080fa <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8008076:	4b25      	ldr	r3, [pc, #148]	; (800810c <vTaskSwitchContext+0xac>)
 8008078:	2200      	movs	r2, #0
 800807a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800807c:	4b24      	ldr	r3, [pc, #144]	; (8008110 <vTaskSwitchContext+0xb0>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	60fb      	str	r3, [r7, #12]
 8008082:	e010      	b.n	80080a6 <vTaskSwitchContext+0x46>
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d10a      	bne.n	80080a0 <vTaskSwitchContext+0x40>
	__asm volatile
 800808a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800808e:	f383 8811 	msr	BASEPRI, r3
 8008092:	f3bf 8f6f 	isb	sy
 8008096:	f3bf 8f4f 	dsb	sy
 800809a:	607b      	str	r3, [r7, #4]
}
 800809c:	bf00      	nop
 800809e:	e7fe      	b.n	800809e <vTaskSwitchContext+0x3e>
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	3b01      	subs	r3, #1
 80080a4:	60fb      	str	r3, [r7, #12]
 80080a6:	491b      	ldr	r1, [pc, #108]	; (8008114 <vTaskSwitchContext+0xb4>)
 80080a8:	68fa      	ldr	r2, [r7, #12]
 80080aa:	4613      	mov	r3, r2
 80080ac:	009b      	lsls	r3, r3, #2
 80080ae:	4413      	add	r3, r2
 80080b0:	009b      	lsls	r3, r3, #2
 80080b2:	440b      	add	r3, r1
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d0e4      	beq.n	8008084 <vTaskSwitchContext+0x24>
 80080ba:	68fa      	ldr	r2, [r7, #12]
 80080bc:	4613      	mov	r3, r2
 80080be:	009b      	lsls	r3, r3, #2
 80080c0:	4413      	add	r3, r2
 80080c2:	009b      	lsls	r3, r3, #2
 80080c4:	4a13      	ldr	r2, [pc, #76]	; (8008114 <vTaskSwitchContext+0xb4>)
 80080c6:	4413      	add	r3, r2
 80080c8:	60bb      	str	r3, [r7, #8]
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	685b      	ldr	r3, [r3, #4]
 80080ce:	685a      	ldr	r2, [r3, #4]
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	605a      	str	r2, [r3, #4]
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	685a      	ldr	r2, [r3, #4]
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	3308      	adds	r3, #8
 80080dc:	429a      	cmp	r2, r3
 80080de:	d104      	bne.n	80080ea <vTaskSwitchContext+0x8a>
 80080e0:	68bb      	ldr	r3, [r7, #8]
 80080e2:	685b      	ldr	r3, [r3, #4]
 80080e4:	685a      	ldr	r2, [r3, #4]
 80080e6:	68bb      	ldr	r3, [r7, #8]
 80080e8:	605a      	str	r2, [r3, #4]
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	685b      	ldr	r3, [r3, #4]
 80080ee:	68db      	ldr	r3, [r3, #12]
 80080f0:	4a09      	ldr	r2, [pc, #36]	; (8008118 <vTaskSwitchContext+0xb8>)
 80080f2:	6013      	str	r3, [r2, #0]
 80080f4:	4a06      	ldr	r2, [pc, #24]	; (8008110 <vTaskSwitchContext+0xb0>)
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	6013      	str	r3, [r2, #0]
}
 80080fa:	bf00      	nop
 80080fc:	3714      	adds	r7, #20
 80080fe:	46bd      	mov	sp, r7
 8008100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008104:	4770      	bx	lr
 8008106:	bf00      	nop
 8008108:	20004ae0 	.word	0x20004ae0
 800810c:	20004acc 	.word	0x20004acc
 8008110:	20004ac0 	.word	0x20004ac0
 8008114:	200045e8 	.word	0x200045e8
 8008118:	200045e4 	.word	0x200045e4

0800811c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b084      	sub	sp, #16
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
 8008124:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d10a      	bne.n	8008142 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800812c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008130:	f383 8811 	msr	BASEPRI, r3
 8008134:	f3bf 8f6f 	isb	sy
 8008138:	f3bf 8f4f 	dsb	sy
 800813c:	60fb      	str	r3, [r7, #12]
}
 800813e:	bf00      	nop
 8008140:	e7fe      	b.n	8008140 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008142:	4b07      	ldr	r3, [pc, #28]	; (8008160 <vTaskPlaceOnEventList+0x44>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	3318      	adds	r3, #24
 8008148:	4619      	mov	r1, r3
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	f7fe fbb7 	bl	80068be <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008150:	2101      	movs	r1, #1
 8008152:	6838      	ldr	r0, [r7, #0]
 8008154:	f000 fa7c 	bl	8008650 <prvAddCurrentTaskToDelayedList>
}
 8008158:	bf00      	nop
 800815a:	3710      	adds	r7, #16
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}
 8008160:	200045e4 	.word	0x200045e4

08008164 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008164:	b580      	push	{r7, lr}
 8008166:	b086      	sub	sp, #24
 8008168:	af00      	add	r7, sp, #0
 800816a:	60f8      	str	r0, [r7, #12]
 800816c:	60b9      	str	r1, [r7, #8]
 800816e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d10a      	bne.n	800818c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800817a:	f383 8811 	msr	BASEPRI, r3
 800817e:	f3bf 8f6f 	isb	sy
 8008182:	f3bf 8f4f 	dsb	sy
 8008186:	617b      	str	r3, [r7, #20]
}
 8008188:	bf00      	nop
 800818a:	e7fe      	b.n	800818a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800818c:	4b0a      	ldr	r3, [pc, #40]	; (80081b8 <vTaskPlaceOnEventListRestricted+0x54>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	3318      	adds	r3, #24
 8008192:	4619      	mov	r1, r3
 8008194:	68f8      	ldr	r0, [r7, #12]
 8008196:	f7fe fb6e 	bl	8006876 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d002      	beq.n	80081a6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80081a0:	f04f 33ff 	mov.w	r3, #4294967295
 80081a4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80081a6:	6879      	ldr	r1, [r7, #4]
 80081a8:	68b8      	ldr	r0, [r7, #8]
 80081aa:	f000 fa51 	bl	8008650 <prvAddCurrentTaskToDelayedList>
	}
 80081ae:	bf00      	nop
 80081b0:	3718      	adds	r7, #24
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}
 80081b6:	bf00      	nop
 80081b8:	200045e4 	.word	0x200045e4

080081bc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b086      	sub	sp, #24
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	68db      	ldr	r3, [r3, #12]
 80081c8:	68db      	ldr	r3, [r3, #12]
 80081ca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d10a      	bne.n	80081e8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80081d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081d6:	f383 8811 	msr	BASEPRI, r3
 80081da:	f3bf 8f6f 	isb	sy
 80081de:	f3bf 8f4f 	dsb	sy
 80081e2:	60fb      	str	r3, [r7, #12]
}
 80081e4:	bf00      	nop
 80081e6:	e7fe      	b.n	80081e6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80081e8:	693b      	ldr	r3, [r7, #16]
 80081ea:	3318      	adds	r3, #24
 80081ec:	4618      	mov	r0, r3
 80081ee:	f7fe fb9f 	bl	8006930 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80081f2:	4b1e      	ldr	r3, [pc, #120]	; (800826c <xTaskRemoveFromEventList+0xb0>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d11d      	bne.n	8008236 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80081fa:	693b      	ldr	r3, [r7, #16]
 80081fc:	3304      	adds	r3, #4
 80081fe:	4618      	mov	r0, r3
 8008200:	f7fe fb96 	bl	8006930 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008204:	693b      	ldr	r3, [r7, #16]
 8008206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008208:	4b19      	ldr	r3, [pc, #100]	; (8008270 <xTaskRemoveFromEventList+0xb4>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	429a      	cmp	r2, r3
 800820e:	d903      	bls.n	8008218 <xTaskRemoveFromEventList+0x5c>
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008214:	4a16      	ldr	r2, [pc, #88]	; (8008270 <xTaskRemoveFromEventList+0xb4>)
 8008216:	6013      	str	r3, [r2, #0]
 8008218:	693b      	ldr	r3, [r7, #16]
 800821a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800821c:	4613      	mov	r3, r2
 800821e:	009b      	lsls	r3, r3, #2
 8008220:	4413      	add	r3, r2
 8008222:	009b      	lsls	r3, r3, #2
 8008224:	4a13      	ldr	r2, [pc, #76]	; (8008274 <xTaskRemoveFromEventList+0xb8>)
 8008226:	441a      	add	r2, r3
 8008228:	693b      	ldr	r3, [r7, #16]
 800822a:	3304      	adds	r3, #4
 800822c:	4619      	mov	r1, r3
 800822e:	4610      	mov	r0, r2
 8008230:	f7fe fb21 	bl	8006876 <vListInsertEnd>
 8008234:	e005      	b.n	8008242 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008236:	693b      	ldr	r3, [r7, #16]
 8008238:	3318      	adds	r3, #24
 800823a:	4619      	mov	r1, r3
 800823c:	480e      	ldr	r0, [pc, #56]	; (8008278 <xTaskRemoveFromEventList+0xbc>)
 800823e:	f7fe fb1a 	bl	8006876 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008242:	693b      	ldr	r3, [r7, #16]
 8008244:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008246:	4b0d      	ldr	r3, [pc, #52]	; (800827c <xTaskRemoveFromEventList+0xc0>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800824c:	429a      	cmp	r2, r3
 800824e:	d905      	bls.n	800825c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008250:	2301      	movs	r3, #1
 8008252:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008254:	4b0a      	ldr	r3, [pc, #40]	; (8008280 <xTaskRemoveFromEventList+0xc4>)
 8008256:	2201      	movs	r2, #1
 8008258:	601a      	str	r2, [r3, #0]
 800825a:	e001      	b.n	8008260 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800825c:	2300      	movs	r3, #0
 800825e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008260:	697b      	ldr	r3, [r7, #20]
}
 8008262:	4618      	mov	r0, r3
 8008264:	3718      	adds	r7, #24
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}
 800826a:	bf00      	nop
 800826c:	20004ae0 	.word	0x20004ae0
 8008270:	20004ac0 	.word	0x20004ac0
 8008274:	200045e8 	.word	0x200045e8
 8008278:	20004a78 	.word	0x20004a78
 800827c:	200045e4 	.word	0x200045e4
 8008280:	20004acc 	.word	0x20004acc

08008284 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008284:	b480      	push	{r7}
 8008286:	b083      	sub	sp, #12
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800828c:	4b06      	ldr	r3, [pc, #24]	; (80082a8 <vTaskInternalSetTimeOutState+0x24>)
 800828e:	681a      	ldr	r2, [r3, #0]
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008294:	4b05      	ldr	r3, [pc, #20]	; (80082ac <vTaskInternalSetTimeOutState+0x28>)
 8008296:	681a      	ldr	r2, [r3, #0]
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	605a      	str	r2, [r3, #4]
}
 800829c:	bf00      	nop
 800829e:	370c      	adds	r7, #12
 80082a0:	46bd      	mov	sp, r7
 80082a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a6:	4770      	bx	lr
 80082a8:	20004ad0 	.word	0x20004ad0
 80082ac:	20004abc 	.word	0x20004abc

080082b0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b088      	sub	sp, #32
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
 80082b8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d10a      	bne.n	80082d6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80082c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082c4:	f383 8811 	msr	BASEPRI, r3
 80082c8:	f3bf 8f6f 	isb	sy
 80082cc:	f3bf 8f4f 	dsb	sy
 80082d0:	613b      	str	r3, [r7, #16]
}
 80082d2:	bf00      	nop
 80082d4:	e7fe      	b.n	80082d4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d10a      	bne.n	80082f2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80082dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082e0:	f383 8811 	msr	BASEPRI, r3
 80082e4:	f3bf 8f6f 	isb	sy
 80082e8:	f3bf 8f4f 	dsb	sy
 80082ec:	60fb      	str	r3, [r7, #12]
}
 80082ee:	bf00      	nop
 80082f0:	e7fe      	b.n	80082f0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80082f2:	f7fe fc77 	bl	8006be4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80082f6:	4b1d      	ldr	r3, [pc, #116]	; (800836c <xTaskCheckForTimeOut+0xbc>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	685b      	ldr	r3, [r3, #4]
 8008300:	69ba      	ldr	r2, [r7, #24]
 8008302:	1ad3      	subs	r3, r2, r3
 8008304:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800830e:	d102      	bne.n	8008316 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008310:	2300      	movs	r3, #0
 8008312:	61fb      	str	r3, [r7, #28]
 8008314:	e023      	b.n	800835e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681a      	ldr	r2, [r3, #0]
 800831a:	4b15      	ldr	r3, [pc, #84]	; (8008370 <xTaskCheckForTimeOut+0xc0>)
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	429a      	cmp	r2, r3
 8008320:	d007      	beq.n	8008332 <xTaskCheckForTimeOut+0x82>
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	685b      	ldr	r3, [r3, #4]
 8008326:	69ba      	ldr	r2, [r7, #24]
 8008328:	429a      	cmp	r2, r3
 800832a:	d302      	bcc.n	8008332 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800832c:	2301      	movs	r3, #1
 800832e:	61fb      	str	r3, [r7, #28]
 8008330:	e015      	b.n	800835e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	697a      	ldr	r2, [r7, #20]
 8008338:	429a      	cmp	r2, r3
 800833a:	d20b      	bcs.n	8008354 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	681a      	ldr	r2, [r3, #0]
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	1ad2      	subs	r2, r2, r3
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f7ff ff9b 	bl	8008284 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800834e:	2300      	movs	r3, #0
 8008350:	61fb      	str	r3, [r7, #28]
 8008352:	e004      	b.n	800835e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	2200      	movs	r2, #0
 8008358:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800835a:	2301      	movs	r3, #1
 800835c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800835e:	f7fe fc71 	bl	8006c44 <vPortExitCritical>

	return xReturn;
 8008362:	69fb      	ldr	r3, [r7, #28]
}
 8008364:	4618      	mov	r0, r3
 8008366:	3720      	adds	r7, #32
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}
 800836c:	20004abc 	.word	0x20004abc
 8008370:	20004ad0 	.word	0x20004ad0

08008374 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008374:	b480      	push	{r7}
 8008376:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008378:	4b03      	ldr	r3, [pc, #12]	; (8008388 <vTaskMissedYield+0x14>)
 800837a:	2201      	movs	r2, #1
 800837c:	601a      	str	r2, [r3, #0]
}
 800837e:	bf00      	nop
 8008380:	46bd      	mov	sp, r7
 8008382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008386:	4770      	bx	lr
 8008388:	20004acc 	.word	0x20004acc

0800838c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b082      	sub	sp, #8
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008394:	f000 f852 	bl	800843c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008398:	4b06      	ldr	r3, [pc, #24]	; (80083b4 <prvIdleTask+0x28>)
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	2b01      	cmp	r3, #1
 800839e:	d9f9      	bls.n	8008394 <prvIdleTask+0x8>
			{
				taskYIELD();
 80083a0:	4b05      	ldr	r3, [pc, #20]	; (80083b8 <prvIdleTask+0x2c>)
 80083a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083a6:	601a      	str	r2, [r3, #0]
 80083a8:	f3bf 8f4f 	dsb	sy
 80083ac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80083b0:	e7f0      	b.n	8008394 <prvIdleTask+0x8>
 80083b2:	bf00      	nop
 80083b4:	200045e8 	.word	0x200045e8
 80083b8:	e000ed04 	.word	0xe000ed04

080083bc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b082      	sub	sp, #8
 80083c0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80083c2:	2300      	movs	r3, #0
 80083c4:	607b      	str	r3, [r7, #4]
 80083c6:	e00c      	b.n	80083e2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80083c8:	687a      	ldr	r2, [r7, #4]
 80083ca:	4613      	mov	r3, r2
 80083cc:	009b      	lsls	r3, r3, #2
 80083ce:	4413      	add	r3, r2
 80083d0:	009b      	lsls	r3, r3, #2
 80083d2:	4a12      	ldr	r2, [pc, #72]	; (800841c <prvInitialiseTaskLists+0x60>)
 80083d4:	4413      	add	r3, r2
 80083d6:	4618      	mov	r0, r3
 80083d8:	f7fe fa20 	bl	800681c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	3301      	adds	r3, #1
 80083e0:	607b      	str	r3, [r7, #4]
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2b37      	cmp	r3, #55	; 0x37
 80083e6:	d9ef      	bls.n	80083c8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80083e8:	480d      	ldr	r0, [pc, #52]	; (8008420 <prvInitialiseTaskLists+0x64>)
 80083ea:	f7fe fa17 	bl	800681c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80083ee:	480d      	ldr	r0, [pc, #52]	; (8008424 <prvInitialiseTaskLists+0x68>)
 80083f0:	f7fe fa14 	bl	800681c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80083f4:	480c      	ldr	r0, [pc, #48]	; (8008428 <prvInitialiseTaskLists+0x6c>)
 80083f6:	f7fe fa11 	bl	800681c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80083fa:	480c      	ldr	r0, [pc, #48]	; (800842c <prvInitialiseTaskLists+0x70>)
 80083fc:	f7fe fa0e 	bl	800681c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008400:	480b      	ldr	r0, [pc, #44]	; (8008430 <prvInitialiseTaskLists+0x74>)
 8008402:	f7fe fa0b 	bl	800681c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008406:	4b0b      	ldr	r3, [pc, #44]	; (8008434 <prvInitialiseTaskLists+0x78>)
 8008408:	4a05      	ldr	r2, [pc, #20]	; (8008420 <prvInitialiseTaskLists+0x64>)
 800840a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800840c:	4b0a      	ldr	r3, [pc, #40]	; (8008438 <prvInitialiseTaskLists+0x7c>)
 800840e:	4a05      	ldr	r2, [pc, #20]	; (8008424 <prvInitialiseTaskLists+0x68>)
 8008410:	601a      	str	r2, [r3, #0]
}
 8008412:	bf00      	nop
 8008414:	3708      	adds	r7, #8
 8008416:	46bd      	mov	sp, r7
 8008418:	bd80      	pop	{r7, pc}
 800841a:	bf00      	nop
 800841c:	200045e8 	.word	0x200045e8
 8008420:	20004a48 	.word	0x20004a48
 8008424:	20004a5c 	.word	0x20004a5c
 8008428:	20004a78 	.word	0x20004a78
 800842c:	20004a8c 	.word	0x20004a8c
 8008430:	20004aa4 	.word	0x20004aa4
 8008434:	20004a70 	.word	0x20004a70
 8008438:	20004a74 	.word	0x20004a74

0800843c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b082      	sub	sp, #8
 8008440:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008442:	e019      	b.n	8008478 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008444:	f7fe fbce 	bl	8006be4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008448:	4b10      	ldr	r3, [pc, #64]	; (800848c <prvCheckTasksWaitingTermination+0x50>)
 800844a:	68db      	ldr	r3, [r3, #12]
 800844c:	68db      	ldr	r3, [r3, #12]
 800844e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	3304      	adds	r3, #4
 8008454:	4618      	mov	r0, r3
 8008456:	f7fe fa6b 	bl	8006930 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800845a:	4b0d      	ldr	r3, [pc, #52]	; (8008490 <prvCheckTasksWaitingTermination+0x54>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	3b01      	subs	r3, #1
 8008460:	4a0b      	ldr	r2, [pc, #44]	; (8008490 <prvCheckTasksWaitingTermination+0x54>)
 8008462:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008464:	4b0b      	ldr	r3, [pc, #44]	; (8008494 <prvCheckTasksWaitingTermination+0x58>)
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	3b01      	subs	r3, #1
 800846a:	4a0a      	ldr	r2, [pc, #40]	; (8008494 <prvCheckTasksWaitingTermination+0x58>)
 800846c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800846e:	f7fe fbe9 	bl	8006c44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008472:	6878      	ldr	r0, [r7, #4]
 8008474:	f000 f810 	bl	8008498 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008478:	4b06      	ldr	r3, [pc, #24]	; (8008494 <prvCheckTasksWaitingTermination+0x58>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d1e1      	bne.n	8008444 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008480:	bf00      	nop
 8008482:	bf00      	nop
 8008484:	3708      	adds	r7, #8
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}
 800848a:	bf00      	nop
 800848c:	20004a8c 	.word	0x20004a8c
 8008490:	20004ab8 	.word	0x20004ab8
 8008494:	20004aa0 	.word	0x20004aa0

08008498 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008498:	b580      	push	{r7, lr}
 800849a:	b084      	sub	sp, #16
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d108      	bne.n	80084bc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084ae:	4618      	mov	r0, r3
 80084b0:	f7fe f896 	bl	80065e0 <vPortFree>
				vPortFree( pxTCB );
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f7fe f893 	bl	80065e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80084ba:	e018      	b.n	80084ee <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80084c2:	2b01      	cmp	r3, #1
 80084c4:	d103      	bne.n	80084ce <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f7fe f88a 	bl	80065e0 <vPortFree>
	}
 80084cc:	e00f      	b.n	80084ee <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80084d4:	2b02      	cmp	r3, #2
 80084d6:	d00a      	beq.n	80084ee <prvDeleteTCB+0x56>
	__asm volatile
 80084d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084dc:	f383 8811 	msr	BASEPRI, r3
 80084e0:	f3bf 8f6f 	isb	sy
 80084e4:	f3bf 8f4f 	dsb	sy
 80084e8:	60fb      	str	r3, [r7, #12]
}
 80084ea:	bf00      	nop
 80084ec:	e7fe      	b.n	80084ec <prvDeleteTCB+0x54>
	}
 80084ee:	bf00      	nop
 80084f0:	3710      	adds	r7, #16
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}
	...

080084f8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80084f8:	b480      	push	{r7}
 80084fa:	b083      	sub	sp, #12
 80084fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80084fe:	4b0c      	ldr	r3, [pc, #48]	; (8008530 <prvResetNextTaskUnblockTime+0x38>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d104      	bne.n	8008512 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008508:	4b0a      	ldr	r3, [pc, #40]	; (8008534 <prvResetNextTaskUnblockTime+0x3c>)
 800850a:	f04f 32ff 	mov.w	r2, #4294967295
 800850e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008510:	e008      	b.n	8008524 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008512:	4b07      	ldr	r3, [pc, #28]	; (8008530 <prvResetNextTaskUnblockTime+0x38>)
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	68db      	ldr	r3, [r3, #12]
 8008518:	68db      	ldr	r3, [r3, #12]
 800851a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	685b      	ldr	r3, [r3, #4]
 8008520:	4a04      	ldr	r2, [pc, #16]	; (8008534 <prvResetNextTaskUnblockTime+0x3c>)
 8008522:	6013      	str	r3, [r2, #0]
}
 8008524:	bf00      	nop
 8008526:	370c      	adds	r7, #12
 8008528:	46bd      	mov	sp, r7
 800852a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852e:	4770      	bx	lr
 8008530:	20004a70 	.word	0x20004a70
 8008534:	20004ad8 	.word	0x20004ad8

08008538 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008538:	b480      	push	{r7}
 800853a:	b083      	sub	sp, #12
 800853c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800853e:	4b0b      	ldr	r3, [pc, #44]	; (800856c <xTaskGetSchedulerState+0x34>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d102      	bne.n	800854c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008546:	2301      	movs	r3, #1
 8008548:	607b      	str	r3, [r7, #4]
 800854a:	e008      	b.n	800855e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800854c:	4b08      	ldr	r3, [pc, #32]	; (8008570 <xTaskGetSchedulerState+0x38>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d102      	bne.n	800855a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008554:	2302      	movs	r3, #2
 8008556:	607b      	str	r3, [r7, #4]
 8008558:	e001      	b.n	800855e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800855a:	2300      	movs	r3, #0
 800855c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800855e:	687b      	ldr	r3, [r7, #4]
	}
 8008560:	4618      	mov	r0, r3
 8008562:	370c      	adds	r7, #12
 8008564:	46bd      	mov	sp, r7
 8008566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856a:	4770      	bx	lr
 800856c:	20004ac4 	.word	0x20004ac4
 8008570:	20004ae0 	.word	0x20004ae0

08008574 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008574:	b580      	push	{r7, lr}
 8008576:	b086      	sub	sp, #24
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008580:	2300      	movs	r3, #0
 8008582:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d056      	beq.n	8008638 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800858a:	4b2e      	ldr	r3, [pc, #184]	; (8008644 <xTaskPriorityDisinherit+0xd0>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	693a      	ldr	r2, [r7, #16]
 8008590:	429a      	cmp	r2, r3
 8008592:	d00a      	beq.n	80085aa <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008598:	f383 8811 	msr	BASEPRI, r3
 800859c:	f3bf 8f6f 	isb	sy
 80085a0:	f3bf 8f4f 	dsb	sy
 80085a4:	60fb      	str	r3, [r7, #12]
}
 80085a6:	bf00      	nop
 80085a8:	e7fe      	b.n	80085a8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80085aa:	693b      	ldr	r3, [r7, #16]
 80085ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d10a      	bne.n	80085c8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80085b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085b6:	f383 8811 	msr	BASEPRI, r3
 80085ba:	f3bf 8f6f 	isb	sy
 80085be:	f3bf 8f4f 	dsb	sy
 80085c2:	60bb      	str	r3, [r7, #8]
}
 80085c4:	bf00      	nop
 80085c6:	e7fe      	b.n	80085c6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80085c8:	693b      	ldr	r3, [r7, #16]
 80085ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085cc:	1e5a      	subs	r2, r3, #1
 80085ce:	693b      	ldr	r3, [r7, #16]
 80085d0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80085d2:	693b      	ldr	r3, [r7, #16]
 80085d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085d6:	693b      	ldr	r3, [r7, #16]
 80085d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085da:	429a      	cmp	r2, r3
 80085dc:	d02c      	beq.n	8008638 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80085de:	693b      	ldr	r3, [r7, #16]
 80085e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d128      	bne.n	8008638 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80085e6:	693b      	ldr	r3, [r7, #16]
 80085e8:	3304      	adds	r3, #4
 80085ea:	4618      	mov	r0, r3
 80085ec:	f7fe f9a0 	bl	8006930 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80085f0:	693b      	ldr	r3, [r7, #16]
 80085f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80085f4:	693b      	ldr	r3, [r7, #16]
 80085f6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085f8:	693b      	ldr	r3, [r7, #16]
 80085fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085fc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008600:	693b      	ldr	r3, [r7, #16]
 8008602:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008604:	693b      	ldr	r3, [r7, #16]
 8008606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008608:	4b0f      	ldr	r3, [pc, #60]	; (8008648 <xTaskPriorityDisinherit+0xd4>)
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	429a      	cmp	r2, r3
 800860e:	d903      	bls.n	8008618 <xTaskPriorityDisinherit+0xa4>
 8008610:	693b      	ldr	r3, [r7, #16]
 8008612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008614:	4a0c      	ldr	r2, [pc, #48]	; (8008648 <xTaskPriorityDisinherit+0xd4>)
 8008616:	6013      	str	r3, [r2, #0]
 8008618:	693b      	ldr	r3, [r7, #16]
 800861a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800861c:	4613      	mov	r3, r2
 800861e:	009b      	lsls	r3, r3, #2
 8008620:	4413      	add	r3, r2
 8008622:	009b      	lsls	r3, r3, #2
 8008624:	4a09      	ldr	r2, [pc, #36]	; (800864c <xTaskPriorityDisinherit+0xd8>)
 8008626:	441a      	add	r2, r3
 8008628:	693b      	ldr	r3, [r7, #16]
 800862a:	3304      	adds	r3, #4
 800862c:	4619      	mov	r1, r3
 800862e:	4610      	mov	r0, r2
 8008630:	f7fe f921 	bl	8006876 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008634:	2301      	movs	r3, #1
 8008636:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008638:	697b      	ldr	r3, [r7, #20]
	}
 800863a:	4618      	mov	r0, r3
 800863c:	3718      	adds	r7, #24
 800863e:	46bd      	mov	sp, r7
 8008640:	bd80      	pop	{r7, pc}
 8008642:	bf00      	nop
 8008644:	200045e4 	.word	0x200045e4
 8008648:	20004ac0 	.word	0x20004ac0
 800864c:	200045e8 	.word	0x200045e8

08008650 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b084      	sub	sp, #16
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
 8008658:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800865a:	4b21      	ldr	r3, [pc, #132]	; (80086e0 <prvAddCurrentTaskToDelayedList+0x90>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008660:	4b20      	ldr	r3, [pc, #128]	; (80086e4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	3304      	adds	r3, #4
 8008666:	4618      	mov	r0, r3
 8008668:	f7fe f962 	bl	8006930 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008672:	d10a      	bne.n	800868a <prvAddCurrentTaskToDelayedList+0x3a>
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d007      	beq.n	800868a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800867a:	4b1a      	ldr	r3, [pc, #104]	; (80086e4 <prvAddCurrentTaskToDelayedList+0x94>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	3304      	adds	r3, #4
 8008680:	4619      	mov	r1, r3
 8008682:	4819      	ldr	r0, [pc, #100]	; (80086e8 <prvAddCurrentTaskToDelayedList+0x98>)
 8008684:	f7fe f8f7 	bl	8006876 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008688:	e026      	b.n	80086d8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800868a:	68fa      	ldr	r2, [r7, #12]
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	4413      	add	r3, r2
 8008690:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008692:	4b14      	ldr	r3, [pc, #80]	; (80086e4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	68ba      	ldr	r2, [r7, #8]
 8008698:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800869a:	68ba      	ldr	r2, [r7, #8]
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	429a      	cmp	r2, r3
 80086a0:	d209      	bcs.n	80086b6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80086a2:	4b12      	ldr	r3, [pc, #72]	; (80086ec <prvAddCurrentTaskToDelayedList+0x9c>)
 80086a4:	681a      	ldr	r2, [r3, #0]
 80086a6:	4b0f      	ldr	r3, [pc, #60]	; (80086e4 <prvAddCurrentTaskToDelayedList+0x94>)
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	3304      	adds	r3, #4
 80086ac:	4619      	mov	r1, r3
 80086ae:	4610      	mov	r0, r2
 80086b0:	f7fe f905 	bl	80068be <vListInsert>
}
 80086b4:	e010      	b.n	80086d8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80086b6:	4b0e      	ldr	r3, [pc, #56]	; (80086f0 <prvAddCurrentTaskToDelayedList+0xa0>)
 80086b8:	681a      	ldr	r2, [r3, #0]
 80086ba:	4b0a      	ldr	r3, [pc, #40]	; (80086e4 <prvAddCurrentTaskToDelayedList+0x94>)
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	3304      	adds	r3, #4
 80086c0:	4619      	mov	r1, r3
 80086c2:	4610      	mov	r0, r2
 80086c4:	f7fe f8fb 	bl	80068be <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80086c8:	4b0a      	ldr	r3, [pc, #40]	; (80086f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	68ba      	ldr	r2, [r7, #8]
 80086ce:	429a      	cmp	r2, r3
 80086d0:	d202      	bcs.n	80086d8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80086d2:	4a08      	ldr	r2, [pc, #32]	; (80086f4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	6013      	str	r3, [r2, #0]
}
 80086d8:	bf00      	nop
 80086da:	3710      	adds	r7, #16
 80086dc:	46bd      	mov	sp, r7
 80086de:	bd80      	pop	{r7, pc}
 80086e0:	20004abc 	.word	0x20004abc
 80086e4:	200045e4 	.word	0x200045e4
 80086e8:	20004aa4 	.word	0x20004aa4
 80086ec:	20004a74 	.word	0x20004a74
 80086f0:	20004a70 	.word	0x20004a70
 80086f4:	20004ad8 	.word	0x20004ad8

080086f8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b08a      	sub	sp, #40	; 0x28
 80086fc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80086fe:	2300      	movs	r3, #0
 8008700:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008702:	f000 fb07 	bl	8008d14 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008706:	4b1c      	ldr	r3, [pc, #112]	; (8008778 <xTimerCreateTimerTask+0x80>)
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d021      	beq.n	8008752 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800870e:	2300      	movs	r3, #0
 8008710:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008712:	2300      	movs	r3, #0
 8008714:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008716:	1d3a      	adds	r2, r7, #4
 8008718:	f107 0108 	add.w	r1, r7, #8
 800871c:	f107 030c 	add.w	r3, r7, #12
 8008720:	4618      	mov	r0, r3
 8008722:	f7fd fe77 	bl	8006414 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008726:	6879      	ldr	r1, [r7, #4]
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	68fa      	ldr	r2, [r7, #12]
 800872c:	9202      	str	r2, [sp, #8]
 800872e:	9301      	str	r3, [sp, #4]
 8008730:	2302      	movs	r3, #2
 8008732:	9300      	str	r3, [sp, #0]
 8008734:	2300      	movs	r3, #0
 8008736:	460a      	mov	r2, r1
 8008738:	4910      	ldr	r1, [pc, #64]	; (800877c <xTimerCreateTimerTask+0x84>)
 800873a:	4811      	ldr	r0, [pc, #68]	; (8008780 <xTimerCreateTimerTask+0x88>)
 800873c:	f7ff f860 	bl	8007800 <xTaskCreateStatic>
 8008740:	4603      	mov	r3, r0
 8008742:	4a10      	ldr	r2, [pc, #64]	; (8008784 <xTimerCreateTimerTask+0x8c>)
 8008744:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008746:	4b0f      	ldr	r3, [pc, #60]	; (8008784 <xTimerCreateTimerTask+0x8c>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d001      	beq.n	8008752 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800874e:	2301      	movs	r3, #1
 8008750:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008752:	697b      	ldr	r3, [r7, #20]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d10a      	bne.n	800876e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800875c:	f383 8811 	msr	BASEPRI, r3
 8008760:	f3bf 8f6f 	isb	sy
 8008764:	f3bf 8f4f 	dsb	sy
 8008768:	613b      	str	r3, [r7, #16]
}
 800876a:	bf00      	nop
 800876c:	e7fe      	b.n	800876c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800876e:	697b      	ldr	r3, [r7, #20]
}
 8008770:	4618      	mov	r0, r3
 8008772:	3718      	adds	r7, #24
 8008774:	46bd      	mov	sp, r7
 8008776:	bd80      	pop	{r7, pc}
 8008778:	20004b14 	.word	0x20004b14
 800877c:	08009d4c 	.word	0x08009d4c
 8008780:	080088bd 	.word	0x080088bd
 8008784:	20004b18 	.word	0x20004b18

08008788 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b08a      	sub	sp, #40	; 0x28
 800878c:	af00      	add	r7, sp, #0
 800878e:	60f8      	str	r0, [r7, #12]
 8008790:	60b9      	str	r1, [r7, #8]
 8008792:	607a      	str	r2, [r7, #4]
 8008794:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008796:	2300      	movs	r3, #0
 8008798:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d10a      	bne.n	80087b6 <xTimerGenericCommand+0x2e>
	__asm volatile
 80087a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087a4:	f383 8811 	msr	BASEPRI, r3
 80087a8:	f3bf 8f6f 	isb	sy
 80087ac:	f3bf 8f4f 	dsb	sy
 80087b0:	623b      	str	r3, [r7, #32]
}
 80087b2:	bf00      	nop
 80087b4:	e7fe      	b.n	80087b4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80087b6:	4b1a      	ldr	r3, [pc, #104]	; (8008820 <xTimerGenericCommand+0x98>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d02a      	beq.n	8008814 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80087be:	68bb      	ldr	r3, [r7, #8]
 80087c0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	2b05      	cmp	r3, #5
 80087ce:	dc18      	bgt.n	8008802 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80087d0:	f7ff feb2 	bl	8008538 <xTaskGetSchedulerState>
 80087d4:	4603      	mov	r3, r0
 80087d6:	2b02      	cmp	r3, #2
 80087d8:	d109      	bne.n	80087ee <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80087da:	4b11      	ldr	r3, [pc, #68]	; (8008820 <xTimerGenericCommand+0x98>)
 80087dc:	6818      	ldr	r0, [r3, #0]
 80087de:	f107 0110 	add.w	r1, r7, #16
 80087e2:	2300      	movs	r3, #0
 80087e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087e6:	f7fe fc23 	bl	8007030 <xQueueGenericSend>
 80087ea:	6278      	str	r0, [r7, #36]	; 0x24
 80087ec:	e012      	b.n	8008814 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80087ee:	4b0c      	ldr	r3, [pc, #48]	; (8008820 <xTimerGenericCommand+0x98>)
 80087f0:	6818      	ldr	r0, [r3, #0]
 80087f2:	f107 0110 	add.w	r1, r7, #16
 80087f6:	2300      	movs	r3, #0
 80087f8:	2200      	movs	r2, #0
 80087fa:	f7fe fc19 	bl	8007030 <xQueueGenericSend>
 80087fe:	6278      	str	r0, [r7, #36]	; 0x24
 8008800:	e008      	b.n	8008814 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008802:	4b07      	ldr	r3, [pc, #28]	; (8008820 <xTimerGenericCommand+0x98>)
 8008804:	6818      	ldr	r0, [r3, #0]
 8008806:	f107 0110 	add.w	r1, r7, #16
 800880a:	2300      	movs	r3, #0
 800880c:	683a      	ldr	r2, [r7, #0]
 800880e:	f7fe fd0d 	bl	800722c <xQueueGenericSendFromISR>
 8008812:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008816:	4618      	mov	r0, r3
 8008818:	3728      	adds	r7, #40	; 0x28
 800881a:	46bd      	mov	sp, r7
 800881c:	bd80      	pop	{r7, pc}
 800881e:	bf00      	nop
 8008820:	20004b14 	.word	0x20004b14

08008824 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b088      	sub	sp, #32
 8008828:	af02      	add	r7, sp, #8
 800882a:	6078      	str	r0, [r7, #4]
 800882c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800882e:	4b22      	ldr	r3, [pc, #136]	; (80088b8 <prvProcessExpiredTimer+0x94>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	68db      	ldr	r3, [r3, #12]
 8008834:	68db      	ldr	r3, [r3, #12]
 8008836:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008838:	697b      	ldr	r3, [r7, #20]
 800883a:	3304      	adds	r3, #4
 800883c:	4618      	mov	r0, r3
 800883e:	f7fe f877 	bl	8006930 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008842:	697b      	ldr	r3, [r7, #20]
 8008844:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008848:	f003 0304 	and.w	r3, r3, #4
 800884c:	2b00      	cmp	r3, #0
 800884e:	d022      	beq.n	8008896 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008850:	697b      	ldr	r3, [r7, #20]
 8008852:	699a      	ldr	r2, [r3, #24]
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	18d1      	adds	r1, r2, r3
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	683a      	ldr	r2, [r7, #0]
 800885c:	6978      	ldr	r0, [r7, #20]
 800885e:	f000 f8d1 	bl	8008a04 <prvInsertTimerInActiveList>
 8008862:	4603      	mov	r3, r0
 8008864:	2b00      	cmp	r3, #0
 8008866:	d01f      	beq.n	80088a8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008868:	2300      	movs	r3, #0
 800886a:	9300      	str	r3, [sp, #0]
 800886c:	2300      	movs	r3, #0
 800886e:	687a      	ldr	r2, [r7, #4]
 8008870:	2100      	movs	r1, #0
 8008872:	6978      	ldr	r0, [r7, #20]
 8008874:	f7ff ff88 	bl	8008788 <xTimerGenericCommand>
 8008878:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800887a:	693b      	ldr	r3, [r7, #16]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d113      	bne.n	80088a8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008884:	f383 8811 	msr	BASEPRI, r3
 8008888:	f3bf 8f6f 	isb	sy
 800888c:	f3bf 8f4f 	dsb	sy
 8008890:	60fb      	str	r3, [r7, #12]
}
 8008892:	bf00      	nop
 8008894:	e7fe      	b.n	8008894 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800889c:	f023 0301 	bic.w	r3, r3, #1
 80088a0:	b2da      	uxtb	r2, r3
 80088a2:	697b      	ldr	r3, [r7, #20]
 80088a4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80088a8:	697b      	ldr	r3, [r7, #20]
 80088aa:	6a1b      	ldr	r3, [r3, #32]
 80088ac:	6978      	ldr	r0, [r7, #20]
 80088ae:	4798      	blx	r3
}
 80088b0:	bf00      	nop
 80088b2:	3718      	adds	r7, #24
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd80      	pop	{r7, pc}
 80088b8:	20004b0c 	.word	0x20004b0c

080088bc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b084      	sub	sp, #16
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80088c4:	f107 0308 	add.w	r3, r7, #8
 80088c8:	4618      	mov	r0, r3
 80088ca:	f000 f857 	bl	800897c <prvGetNextExpireTime>
 80088ce:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	4619      	mov	r1, r3
 80088d4:	68f8      	ldr	r0, [r7, #12]
 80088d6:	f000 f803 	bl	80088e0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80088da:	f000 f8d5 	bl	8008a88 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80088de:	e7f1      	b.n	80088c4 <prvTimerTask+0x8>

080088e0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b084      	sub	sp, #16
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
 80088e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80088ea:	f7ff fa43 	bl	8007d74 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80088ee:	f107 0308 	add.w	r3, r7, #8
 80088f2:	4618      	mov	r0, r3
 80088f4:	f000 f866 	bl	80089c4 <prvSampleTimeNow>
 80088f8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80088fa:	68bb      	ldr	r3, [r7, #8]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d130      	bne.n	8008962 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d10a      	bne.n	800891c <prvProcessTimerOrBlockTask+0x3c>
 8008906:	687a      	ldr	r2, [r7, #4]
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	429a      	cmp	r2, r3
 800890c:	d806      	bhi.n	800891c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800890e:	f7ff fa3f 	bl	8007d90 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008912:	68f9      	ldr	r1, [r7, #12]
 8008914:	6878      	ldr	r0, [r7, #4]
 8008916:	f7ff ff85 	bl	8008824 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800891a:	e024      	b.n	8008966 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d008      	beq.n	8008934 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008922:	4b13      	ldr	r3, [pc, #76]	; (8008970 <prvProcessTimerOrBlockTask+0x90>)
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d101      	bne.n	8008930 <prvProcessTimerOrBlockTask+0x50>
 800892c:	2301      	movs	r3, #1
 800892e:	e000      	b.n	8008932 <prvProcessTimerOrBlockTask+0x52>
 8008930:	2300      	movs	r3, #0
 8008932:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008934:	4b0f      	ldr	r3, [pc, #60]	; (8008974 <prvProcessTimerOrBlockTask+0x94>)
 8008936:	6818      	ldr	r0, [r3, #0]
 8008938:	687a      	ldr	r2, [r7, #4]
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	1ad3      	subs	r3, r2, r3
 800893e:	683a      	ldr	r2, [r7, #0]
 8008940:	4619      	mov	r1, r3
 8008942:	f7fe ff29 	bl	8007798 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008946:	f7ff fa23 	bl	8007d90 <xTaskResumeAll>
 800894a:	4603      	mov	r3, r0
 800894c:	2b00      	cmp	r3, #0
 800894e:	d10a      	bne.n	8008966 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008950:	4b09      	ldr	r3, [pc, #36]	; (8008978 <prvProcessTimerOrBlockTask+0x98>)
 8008952:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008956:	601a      	str	r2, [r3, #0]
 8008958:	f3bf 8f4f 	dsb	sy
 800895c:	f3bf 8f6f 	isb	sy
}
 8008960:	e001      	b.n	8008966 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008962:	f7ff fa15 	bl	8007d90 <xTaskResumeAll>
}
 8008966:	bf00      	nop
 8008968:	3710      	adds	r7, #16
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}
 800896e:	bf00      	nop
 8008970:	20004b10 	.word	0x20004b10
 8008974:	20004b14 	.word	0x20004b14
 8008978:	e000ed04 	.word	0xe000ed04

0800897c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800897c:	b480      	push	{r7}
 800897e:	b085      	sub	sp, #20
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008984:	4b0e      	ldr	r3, [pc, #56]	; (80089c0 <prvGetNextExpireTime+0x44>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d101      	bne.n	8008992 <prvGetNextExpireTime+0x16>
 800898e:	2201      	movs	r2, #1
 8008990:	e000      	b.n	8008994 <prvGetNextExpireTime+0x18>
 8008992:	2200      	movs	r2, #0
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d105      	bne.n	80089ac <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80089a0:	4b07      	ldr	r3, [pc, #28]	; (80089c0 <prvGetNextExpireTime+0x44>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	68db      	ldr	r3, [r3, #12]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	60fb      	str	r3, [r7, #12]
 80089aa:	e001      	b.n	80089b0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80089ac:	2300      	movs	r3, #0
 80089ae:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80089b0:	68fb      	ldr	r3, [r7, #12]
}
 80089b2:	4618      	mov	r0, r3
 80089b4:	3714      	adds	r7, #20
 80089b6:	46bd      	mov	sp, r7
 80089b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089bc:	4770      	bx	lr
 80089be:	bf00      	nop
 80089c0:	20004b0c 	.word	0x20004b0c

080089c4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b084      	sub	sp, #16
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80089cc:	f7ff fa7e 	bl	8007ecc <xTaskGetTickCount>
 80089d0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80089d2:	4b0b      	ldr	r3, [pc, #44]	; (8008a00 <prvSampleTimeNow+0x3c>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	68fa      	ldr	r2, [r7, #12]
 80089d8:	429a      	cmp	r2, r3
 80089da:	d205      	bcs.n	80089e8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80089dc:	f000 f936 	bl	8008c4c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2201      	movs	r2, #1
 80089e4:	601a      	str	r2, [r3, #0]
 80089e6:	e002      	b.n	80089ee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2200      	movs	r2, #0
 80089ec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80089ee:	4a04      	ldr	r2, [pc, #16]	; (8008a00 <prvSampleTimeNow+0x3c>)
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80089f4:	68fb      	ldr	r3, [r7, #12]
}
 80089f6:	4618      	mov	r0, r3
 80089f8:	3710      	adds	r7, #16
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bd80      	pop	{r7, pc}
 80089fe:	bf00      	nop
 8008a00:	20004b1c 	.word	0x20004b1c

08008a04 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b086      	sub	sp, #24
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	60f8      	str	r0, [r7, #12]
 8008a0c:	60b9      	str	r1, [r7, #8]
 8008a0e:	607a      	str	r2, [r7, #4]
 8008a10:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008a12:	2300      	movs	r3, #0
 8008a14:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	68ba      	ldr	r2, [r7, #8]
 8008a1a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	68fa      	ldr	r2, [r7, #12]
 8008a20:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008a22:	68ba      	ldr	r2, [r7, #8]
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	429a      	cmp	r2, r3
 8008a28:	d812      	bhi.n	8008a50 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a2a:	687a      	ldr	r2, [r7, #4]
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	1ad2      	subs	r2, r2, r3
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	699b      	ldr	r3, [r3, #24]
 8008a34:	429a      	cmp	r2, r3
 8008a36:	d302      	bcc.n	8008a3e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008a38:	2301      	movs	r3, #1
 8008a3a:	617b      	str	r3, [r7, #20]
 8008a3c:	e01b      	b.n	8008a76 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008a3e:	4b10      	ldr	r3, [pc, #64]	; (8008a80 <prvInsertTimerInActiveList+0x7c>)
 8008a40:	681a      	ldr	r2, [r3, #0]
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	3304      	adds	r3, #4
 8008a46:	4619      	mov	r1, r3
 8008a48:	4610      	mov	r0, r2
 8008a4a:	f7fd ff38 	bl	80068be <vListInsert>
 8008a4e:	e012      	b.n	8008a76 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008a50:	687a      	ldr	r2, [r7, #4]
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	429a      	cmp	r2, r3
 8008a56:	d206      	bcs.n	8008a66 <prvInsertTimerInActiveList+0x62>
 8008a58:	68ba      	ldr	r2, [r7, #8]
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	429a      	cmp	r2, r3
 8008a5e:	d302      	bcc.n	8008a66 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008a60:	2301      	movs	r3, #1
 8008a62:	617b      	str	r3, [r7, #20]
 8008a64:	e007      	b.n	8008a76 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008a66:	4b07      	ldr	r3, [pc, #28]	; (8008a84 <prvInsertTimerInActiveList+0x80>)
 8008a68:	681a      	ldr	r2, [r3, #0]
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	3304      	adds	r3, #4
 8008a6e:	4619      	mov	r1, r3
 8008a70:	4610      	mov	r0, r2
 8008a72:	f7fd ff24 	bl	80068be <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008a76:	697b      	ldr	r3, [r7, #20]
}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	3718      	adds	r7, #24
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bd80      	pop	{r7, pc}
 8008a80:	20004b10 	.word	0x20004b10
 8008a84:	20004b0c 	.word	0x20004b0c

08008a88 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b08e      	sub	sp, #56	; 0x38
 8008a8c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008a8e:	e0ca      	b.n	8008c26 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	da18      	bge.n	8008ac8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008a96:	1d3b      	adds	r3, r7, #4
 8008a98:	3304      	adds	r3, #4
 8008a9a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d10a      	bne.n	8008ab8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aa6:	f383 8811 	msr	BASEPRI, r3
 8008aaa:	f3bf 8f6f 	isb	sy
 8008aae:	f3bf 8f4f 	dsb	sy
 8008ab2:	61fb      	str	r3, [r7, #28]
}
 8008ab4:	bf00      	nop
 8008ab6:	e7fe      	b.n	8008ab6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008abe:	6850      	ldr	r0, [r2, #4]
 8008ac0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ac2:	6892      	ldr	r2, [r2, #8]
 8008ac4:	4611      	mov	r1, r2
 8008ac6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	f2c0 80aa 	blt.w	8008c24 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ad6:	695b      	ldr	r3, [r3, #20]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d004      	beq.n	8008ae6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ade:	3304      	adds	r3, #4
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	f7fd ff25 	bl	8006930 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008ae6:	463b      	mov	r3, r7
 8008ae8:	4618      	mov	r0, r3
 8008aea:	f7ff ff6b 	bl	80089c4 <prvSampleTimeNow>
 8008aee:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2b09      	cmp	r3, #9
 8008af4:	f200 8097 	bhi.w	8008c26 <prvProcessReceivedCommands+0x19e>
 8008af8:	a201      	add	r2, pc, #4	; (adr r2, 8008b00 <prvProcessReceivedCommands+0x78>)
 8008afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008afe:	bf00      	nop
 8008b00:	08008b29 	.word	0x08008b29
 8008b04:	08008b29 	.word	0x08008b29
 8008b08:	08008b29 	.word	0x08008b29
 8008b0c:	08008b9d 	.word	0x08008b9d
 8008b10:	08008bb1 	.word	0x08008bb1
 8008b14:	08008bfb 	.word	0x08008bfb
 8008b18:	08008b29 	.word	0x08008b29
 8008b1c:	08008b29 	.word	0x08008b29
 8008b20:	08008b9d 	.word	0x08008b9d
 8008b24:	08008bb1 	.word	0x08008bb1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008b2e:	f043 0301 	orr.w	r3, r3, #1
 8008b32:	b2da      	uxtb	r2, r3
 8008b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008b3a:	68ba      	ldr	r2, [r7, #8]
 8008b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b3e:	699b      	ldr	r3, [r3, #24]
 8008b40:	18d1      	adds	r1, r2, r3
 8008b42:	68bb      	ldr	r3, [r7, #8]
 8008b44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b48:	f7ff ff5c 	bl	8008a04 <prvInsertTimerInActiveList>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d069      	beq.n	8008c26 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b54:	6a1b      	ldr	r3, [r3, #32]
 8008b56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b58:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008b60:	f003 0304 	and.w	r3, r3, #4
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d05e      	beq.n	8008c26 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008b68:	68ba      	ldr	r2, [r7, #8]
 8008b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b6c:	699b      	ldr	r3, [r3, #24]
 8008b6e:	441a      	add	r2, r3
 8008b70:	2300      	movs	r3, #0
 8008b72:	9300      	str	r3, [sp, #0]
 8008b74:	2300      	movs	r3, #0
 8008b76:	2100      	movs	r1, #0
 8008b78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b7a:	f7ff fe05 	bl	8008788 <xTimerGenericCommand>
 8008b7e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008b80:	6a3b      	ldr	r3, [r7, #32]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d14f      	bne.n	8008c26 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8008b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b8a:	f383 8811 	msr	BASEPRI, r3
 8008b8e:	f3bf 8f6f 	isb	sy
 8008b92:	f3bf 8f4f 	dsb	sy
 8008b96:	61bb      	str	r3, [r7, #24]
}
 8008b98:	bf00      	nop
 8008b9a:	e7fe      	b.n	8008b9a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b9e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008ba2:	f023 0301 	bic.w	r3, r3, #1
 8008ba6:	b2da      	uxtb	r2, r3
 8008ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008baa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008bae:	e03a      	b.n	8008c26 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bb2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008bb6:	f043 0301 	orr.w	r3, r3, #1
 8008bba:	b2da      	uxtb	r2, r3
 8008bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bbe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008bc2:	68ba      	ldr	r2, [r7, #8]
 8008bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bc6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bca:	699b      	ldr	r3, [r3, #24]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d10a      	bne.n	8008be6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bd4:	f383 8811 	msr	BASEPRI, r3
 8008bd8:	f3bf 8f6f 	isb	sy
 8008bdc:	f3bf 8f4f 	dsb	sy
 8008be0:	617b      	str	r3, [r7, #20]
}
 8008be2:	bf00      	nop
 8008be4:	e7fe      	b.n	8008be4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008be8:	699a      	ldr	r2, [r3, #24]
 8008bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bec:	18d1      	adds	r1, r2, r3
 8008bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bf2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008bf4:	f7ff ff06 	bl	8008a04 <prvInsertTimerInActiveList>
					break;
 8008bf8:	e015      	b.n	8008c26 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bfc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c00:	f003 0302 	and.w	r3, r3, #2
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d103      	bne.n	8008c10 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008c08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c0a:	f7fd fce9 	bl	80065e0 <vPortFree>
 8008c0e:	e00a      	b.n	8008c26 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c12:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c16:	f023 0301 	bic.w	r3, r3, #1
 8008c1a:	b2da      	uxtb	r2, r3
 8008c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008c22:	e000      	b.n	8008c26 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008c24:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008c26:	4b08      	ldr	r3, [pc, #32]	; (8008c48 <prvProcessReceivedCommands+0x1c0>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	1d39      	adds	r1, r7, #4
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	4618      	mov	r0, r3
 8008c30:	f7fe fb98 	bl	8007364 <xQueueReceive>
 8008c34:	4603      	mov	r3, r0
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	f47f af2a 	bne.w	8008a90 <prvProcessReceivedCommands+0x8>
	}
}
 8008c3c:	bf00      	nop
 8008c3e:	bf00      	nop
 8008c40:	3730      	adds	r7, #48	; 0x30
 8008c42:	46bd      	mov	sp, r7
 8008c44:	bd80      	pop	{r7, pc}
 8008c46:	bf00      	nop
 8008c48:	20004b14 	.word	0x20004b14

08008c4c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b088      	sub	sp, #32
 8008c50:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008c52:	e048      	b.n	8008ce6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008c54:	4b2d      	ldr	r3, [pc, #180]	; (8008d0c <prvSwitchTimerLists+0xc0>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	68db      	ldr	r3, [r3, #12]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c5e:	4b2b      	ldr	r3, [pc, #172]	; (8008d0c <prvSwitchTimerLists+0xc0>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	68db      	ldr	r3, [r3, #12]
 8008c64:	68db      	ldr	r3, [r3, #12]
 8008c66:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	3304      	adds	r3, #4
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	f7fd fe5f 	bl	8006930 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	6a1b      	ldr	r3, [r3, #32]
 8008c76:	68f8      	ldr	r0, [r7, #12]
 8008c78:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c80:	f003 0304 	and.w	r3, r3, #4
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d02e      	beq.n	8008ce6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	699b      	ldr	r3, [r3, #24]
 8008c8c:	693a      	ldr	r2, [r7, #16]
 8008c8e:	4413      	add	r3, r2
 8008c90:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008c92:	68ba      	ldr	r2, [r7, #8]
 8008c94:	693b      	ldr	r3, [r7, #16]
 8008c96:	429a      	cmp	r2, r3
 8008c98:	d90e      	bls.n	8008cb8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	68ba      	ldr	r2, [r7, #8]
 8008c9e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	68fa      	ldr	r2, [r7, #12]
 8008ca4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008ca6:	4b19      	ldr	r3, [pc, #100]	; (8008d0c <prvSwitchTimerLists+0xc0>)
 8008ca8:	681a      	ldr	r2, [r3, #0]
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	3304      	adds	r3, #4
 8008cae:	4619      	mov	r1, r3
 8008cb0:	4610      	mov	r0, r2
 8008cb2:	f7fd fe04 	bl	80068be <vListInsert>
 8008cb6:	e016      	b.n	8008ce6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008cb8:	2300      	movs	r3, #0
 8008cba:	9300      	str	r3, [sp, #0]
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	693a      	ldr	r2, [r7, #16]
 8008cc0:	2100      	movs	r1, #0
 8008cc2:	68f8      	ldr	r0, [r7, #12]
 8008cc4:	f7ff fd60 	bl	8008788 <xTimerGenericCommand>
 8008cc8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d10a      	bne.n	8008ce6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cd4:	f383 8811 	msr	BASEPRI, r3
 8008cd8:	f3bf 8f6f 	isb	sy
 8008cdc:	f3bf 8f4f 	dsb	sy
 8008ce0:	603b      	str	r3, [r7, #0]
}
 8008ce2:	bf00      	nop
 8008ce4:	e7fe      	b.n	8008ce4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008ce6:	4b09      	ldr	r3, [pc, #36]	; (8008d0c <prvSwitchTimerLists+0xc0>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d1b1      	bne.n	8008c54 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008cf0:	4b06      	ldr	r3, [pc, #24]	; (8008d0c <prvSwitchTimerLists+0xc0>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008cf6:	4b06      	ldr	r3, [pc, #24]	; (8008d10 <prvSwitchTimerLists+0xc4>)
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	4a04      	ldr	r2, [pc, #16]	; (8008d0c <prvSwitchTimerLists+0xc0>)
 8008cfc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008cfe:	4a04      	ldr	r2, [pc, #16]	; (8008d10 <prvSwitchTimerLists+0xc4>)
 8008d00:	697b      	ldr	r3, [r7, #20]
 8008d02:	6013      	str	r3, [r2, #0]
}
 8008d04:	bf00      	nop
 8008d06:	3718      	adds	r7, #24
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	bd80      	pop	{r7, pc}
 8008d0c:	20004b0c 	.word	0x20004b0c
 8008d10:	20004b10 	.word	0x20004b10

08008d14 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b082      	sub	sp, #8
 8008d18:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008d1a:	f7fd ff63 	bl	8006be4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008d1e:	4b15      	ldr	r3, [pc, #84]	; (8008d74 <prvCheckForValidListAndQueue+0x60>)
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d120      	bne.n	8008d68 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008d26:	4814      	ldr	r0, [pc, #80]	; (8008d78 <prvCheckForValidListAndQueue+0x64>)
 8008d28:	f7fd fd78 	bl	800681c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008d2c:	4813      	ldr	r0, [pc, #76]	; (8008d7c <prvCheckForValidListAndQueue+0x68>)
 8008d2e:	f7fd fd75 	bl	800681c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008d32:	4b13      	ldr	r3, [pc, #76]	; (8008d80 <prvCheckForValidListAndQueue+0x6c>)
 8008d34:	4a10      	ldr	r2, [pc, #64]	; (8008d78 <prvCheckForValidListAndQueue+0x64>)
 8008d36:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008d38:	4b12      	ldr	r3, [pc, #72]	; (8008d84 <prvCheckForValidListAndQueue+0x70>)
 8008d3a:	4a10      	ldr	r2, [pc, #64]	; (8008d7c <prvCheckForValidListAndQueue+0x68>)
 8008d3c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008d3e:	2300      	movs	r3, #0
 8008d40:	9300      	str	r3, [sp, #0]
 8008d42:	4b11      	ldr	r3, [pc, #68]	; (8008d88 <prvCheckForValidListAndQueue+0x74>)
 8008d44:	4a11      	ldr	r2, [pc, #68]	; (8008d8c <prvCheckForValidListAndQueue+0x78>)
 8008d46:	2110      	movs	r1, #16
 8008d48:	200a      	movs	r0, #10
 8008d4a:	f7fe f8d5 	bl	8006ef8 <xQueueGenericCreateStatic>
 8008d4e:	4603      	mov	r3, r0
 8008d50:	4a08      	ldr	r2, [pc, #32]	; (8008d74 <prvCheckForValidListAndQueue+0x60>)
 8008d52:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008d54:	4b07      	ldr	r3, [pc, #28]	; (8008d74 <prvCheckForValidListAndQueue+0x60>)
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d005      	beq.n	8008d68 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008d5c:	4b05      	ldr	r3, [pc, #20]	; (8008d74 <prvCheckForValidListAndQueue+0x60>)
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	490b      	ldr	r1, [pc, #44]	; (8008d90 <prvCheckForValidListAndQueue+0x7c>)
 8008d62:	4618      	mov	r0, r3
 8008d64:	f7fe fcee 	bl	8007744 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008d68:	f7fd ff6c 	bl	8006c44 <vPortExitCritical>
}
 8008d6c:	bf00      	nop
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	bd80      	pop	{r7, pc}
 8008d72:	bf00      	nop
 8008d74:	20004b14 	.word	0x20004b14
 8008d78:	20004ae4 	.word	0x20004ae4
 8008d7c:	20004af8 	.word	0x20004af8
 8008d80:	20004b0c 	.word	0x20004b0c
 8008d84:	20004b10 	.word	0x20004b10
 8008d88:	20004bc0 	.word	0x20004bc0
 8008d8c:	20004b20 	.word	0x20004b20
 8008d90:	08009d54 	.word	0x08009d54

08008d94 <gyroStart>:
#include "i2c.h"


// Enable and configure ICM-20948 gyroscope
// -------------------------------------------------------------------
void gyroStart() {
 8008d94:	b580      	push	{r7, lr}
 8008d96:	af00      	add	r7, sp, #0
	writeByte(0x07, 0x07); // Write 8'b00000111 to ICM register 7 (PWR_MGMT_2), disable Gyroscope (all axes)
 8008d98:	2107      	movs	r1, #7
 8008d9a:	2007      	movs	r0, #7
 8008d9c:	f000 f87c 	bl	8008e98 <writeByte>
	osDelayUntil(10);
 8008da0:	200a      	movs	r0, #10
 8008da2:	f7fd faf0 	bl	8006386 <osDelayUntil>
	writeByte(0x07, 0x00); // Enable Accelerometer and Gyroscope (all axes)
 8008da6:	2100      	movs	r1, #0
 8008da8:	2007      	movs	r0, #7
 8008daa:	f000 f875 	bl	8008e98 <writeByte>
	osDelayUntil(10);
 8008dae:	200a      	movs	r0, #10
 8008db0:	f7fd fae9 	bl	8006386 <osDelayUntil>
}
 8008db4:	bf00      	nop
 8008db6:	bd80      	pop	{r7, pc}

08008db8 <gyroInit>:

void gyroInit() {
 8008db8:	b580      	push	{r7, lr}
 8008dba:	af00      	add	r7, sp, #0
	writeByte(0x06, 0x00);	// Write 0x00 to ICM register 6 (PWR_MGMT_1), wakes chip from sleep mode,
 8008dbc:	2100      	movs	r1, #0
 8008dbe:	2006      	movs	r0, #6
 8008dc0:	f000 f86a 	bl	8008e98 <writeByte>
							//turn off low power, Internal 20MHz oscillator
	osDelayUntil(10);
 8008dc4:	200a      	movs	r0, #10
 8008dc6:	f7fd fade 	bl	8006386 <osDelayUntil>
	writeByte(0x03, 0x80);	// Enables DMP (Digital Motion Processor) features
 8008dca:	2180      	movs	r1, #128	; 0x80
 8008dcc:	2003      	movs	r0, #3
 8008dce:	f000 f863 	bl	8008e98 <writeByte>
	osDelayUntil(10);
 8008dd2:	200a      	movs	r0, #10
 8008dd4:	f7fd fad7 	bl	8006386 <osDelayUntil>
	writeByte(0x07, 0x07);	// Disable Gyroscope (all axes)
 8008dd8:	2107      	movs	r1, #7
 8008dda:	2007      	movs	r0, #7
 8008ddc:	f000 f85c 	bl	8008e98 <writeByte>
	osDelayUntil(10);
 8008de0:	200a      	movs	r0, #10
 8008de2:	f7fd fad0 	bl	8006386 <osDelayUntil>
	writeByte(0x06, 0x01);	// Auto select best available clock source
 8008de6:	2101      	movs	r1, #1
 8008de8:	2006      	movs	r0, #6
 8008dea:	f000 f855 	bl	8008e98 <writeByte>
	osDelayUntil(10);
 8008dee:	200a      	movs	r0, #10
 8008df0:	f7fd fac9 	bl	8006386 <osDelayUntil>
	writeByte(0x7F, 0x20);	// Switch to USER BANK 2
 8008df4:	2120      	movs	r1, #32
 8008df6:	207f      	movs	r0, #127	; 0x7f
 8008df8:	f000 f84e 	bl	8008e98 <writeByte>
	osDelayUntil(10);
 8008dfc:	200a      	movs	r0, #10
 8008dfe:	f7fd fac2 	bl	8006386 <osDelayUntil>
	writeByte(0x01, 0x2F);	// Config gyro, enable gyro DLPF, set gyro Full Scale to +-2000dps,
 8008e02:	212f      	movs	r1, #47	; 0x2f
 8008e04:	2001      	movs	r0, #1
 8008e06:	f000 f847 	bl	8008e98 <writeByte>
							// gyro low pass filter = 3'b101
	osDelayUntil(10);
 8008e0a:	200a      	movs	r0, #10
 8008e0c:	f7fd fabb 	bl	8006386 <osDelayUntil>
	writeByte(0x0, 0x00);	// Set gyro sample rate divider = 1 + 0(GYRO_SMPLRT_DIV[7:0])
 8008e10:	2100      	movs	r1, #0
 8008e12:	2000      	movs	r0, #0
 8008e14:	f000 f840 	bl	8008e98 <writeByte>
	osDelayUntil(10);
 8008e18:	200a      	movs	r0, #10
 8008e1a:	f7fd fab4 	bl	8006386 <osDelayUntil>
	writeByte(0x7F, 0x00);	// Switch to USER BANK 0
 8008e1e:	2100      	movs	r1, #0
 8008e20:	207f      	movs	r0, #127	; 0x7f
 8008e22:	f000 f839 	bl	8008e98 <writeByte>
	osDelayUntil(10);
 8008e26:	200a      	movs	r0, #10
 8008e28:	f7fd faad 	bl	8006386 <osDelayUntil>
	writeByte(0x07, 0x00);	// Enable Gyroscope and Accelerometer
 8008e2c:	2100      	movs	r1, #0
 8008e2e:	2007      	movs	r0, #7
 8008e30:	f000 f832 	bl	8008e98 <writeByte>
	osDelayUntil(10);
 8008e34:	200a      	movs	r0, #10
 8008e36:	f7fd faa6 	bl	8006386 <osDelayUntil>
}
 8008e3a:	bf00      	nop
 8008e3c:	bd80      	pop	{r7, pc}
	...

08008e40 <readByte>:
uint8_t i2cBuffer[20];
uint8_t ICMAddr = 0x68;

// Helper functions to transmit and receive data from ICM using I2C
// -------------------------------------------------------------------
void readByte(uint8_t addr, uint8_t *data) {
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b084      	sub	sp, #16
 8008e44:	af02      	add	r7, sp, #8
 8008e46:	4603      	mov	r3, r0
 8008e48:	6039      	str	r1, [r7, #0]
 8008e4a:	71fb      	strb	r3, [r7, #7]
	i2cBuffer[0] = addr;
 8008e4c:	4a0f      	ldr	r2, [pc, #60]	; (8008e8c <readByte+0x4c>)
 8008e4e:	79fb      	ldrb	r3, [r7, #7]
 8008e50:	7013      	strb	r3, [r2, #0]
	HAL_I2C_Master_Transmit(&hi2c1, ICMAddr << 1, i2cBuffer, 1, 10);
 8008e52:	4b0f      	ldr	r3, [pc, #60]	; (8008e90 <readByte+0x50>)
 8008e54:	781b      	ldrb	r3, [r3, #0]
 8008e56:	b29b      	uxth	r3, r3
 8008e58:	005b      	lsls	r3, r3, #1
 8008e5a:	b299      	uxth	r1, r3
 8008e5c:	230a      	movs	r3, #10
 8008e5e:	9300      	str	r3, [sp, #0]
 8008e60:	2301      	movs	r3, #1
 8008e62:	4a0a      	ldr	r2, [pc, #40]	; (8008e8c <readByte+0x4c>)
 8008e64:	480b      	ldr	r0, [pc, #44]	; (8008e94 <readByte+0x54>)
 8008e66:	f7f9 ff0d 	bl	8002c84 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, ICMAddr << 1, data, 2, 20);
 8008e6a:	4b09      	ldr	r3, [pc, #36]	; (8008e90 <readByte+0x50>)
 8008e6c:	781b      	ldrb	r3, [r3, #0]
 8008e6e:	b29b      	uxth	r3, r3
 8008e70:	005b      	lsls	r3, r3, #1
 8008e72:	b299      	uxth	r1, r3
 8008e74:	2314      	movs	r3, #20
 8008e76:	9300      	str	r3, [sp, #0]
 8008e78:	2302      	movs	r3, #2
 8008e7a:	683a      	ldr	r2, [r7, #0]
 8008e7c:	4805      	ldr	r0, [pc, #20]	; (8008e94 <readByte+0x54>)
 8008e7e:	f7f9 ffff 	bl	8002e80 <HAL_I2C_Master_Receive>
}
 8008e82:	bf00      	nop
 8008e84:	3708      	adds	r7, #8
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bd80      	pop	{r7, pc}
 8008e8a:	bf00      	nop
 8008e8c:	20004c10 	.word	0x20004c10
 8008e90:	20000018 	.word	0x20000018
 8008e94:	2000009c 	.word	0x2000009c

08008e98 <writeByte>:

void writeByte(uint8_t addr, uint8_t data) {
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b084      	sub	sp, #16
 8008e9c:	af02      	add	r7, sp, #8
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	460a      	mov	r2, r1
 8008ea2:	71fb      	strb	r3, [r7, #7]
 8008ea4:	4613      	mov	r3, r2
 8008ea6:	71bb      	strb	r3, [r7, #6]
	i2cBuffer[0] = addr;
 8008ea8:	4a0a      	ldr	r2, [pc, #40]	; (8008ed4 <writeByte+0x3c>)
 8008eaa:	79fb      	ldrb	r3, [r7, #7]
 8008eac:	7013      	strb	r3, [r2, #0]
	i2cBuffer[1] = data;
 8008eae:	4a09      	ldr	r2, [pc, #36]	; (8008ed4 <writeByte+0x3c>)
 8008eb0:	79bb      	ldrb	r3, [r7, #6]
 8008eb2:	7053      	strb	r3, [r2, #1]
	HAL_I2C_Master_Transmit(&hi2c1, ICMAddr << 1, i2cBuffer, 2, 20);
 8008eb4:	4b08      	ldr	r3, [pc, #32]	; (8008ed8 <writeByte+0x40>)
 8008eb6:	781b      	ldrb	r3, [r3, #0]
 8008eb8:	b29b      	uxth	r3, r3
 8008eba:	005b      	lsls	r3, r3, #1
 8008ebc:	b299      	uxth	r1, r3
 8008ebe:	2314      	movs	r3, #20
 8008ec0:	9300      	str	r3, [sp, #0]
 8008ec2:	2302      	movs	r3, #2
 8008ec4:	4a03      	ldr	r2, [pc, #12]	; (8008ed4 <writeByte+0x3c>)
 8008ec6:	4805      	ldr	r0, [pc, #20]	; (8008edc <writeByte+0x44>)
 8008ec8:	f7f9 fedc 	bl	8002c84 <HAL_I2C_Master_Transmit>
}
 8008ecc:	bf00      	nop
 8008ece:	3708      	adds	r7, #8
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	bd80      	pop	{r7, pc}
 8008ed4:	20004c10 	.word	0x20004c10
 8008ed8:	20000018 	.word	0x20000018
 8008edc:	2000009c 	.word	0x2000009c

08008ee0 <OLED_Refresh_Gram>:

#include "../../PeripheralDriver/Inc/oledfont.h"

uint8_t OLED_GRAM[128][8];	 
void OLED_Refresh_Gram(void)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b082      	sub	sp, #8
 8008ee4:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	71fb      	strb	r3, [r7, #7]
 8008eea:	e026      	b.n	8008f3a <OLED_Refresh_Gram+0x5a>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    
 8008eec:	79fb      	ldrb	r3, [r7, #7]
 8008eee:	3b50      	subs	r3, #80	; 0x50
 8008ef0:	b2db      	uxtb	r3, r3
 8008ef2:	2100      	movs	r1, #0
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	f000 f82b 	bl	8008f50 <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      
 8008efa:	2100      	movs	r1, #0
 8008efc:	2000      	movs	r0, #0
 8008efe:	f000 f827 	bl	8008f50 <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);        
 8008f02:	2100      	movs	r1, #0
 8008f04:	2010      	movs	r0, #16
 8008f06:	f000 f823 	bl	8008f50 <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA); 
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	71bb      	strb	r3, [r7, #6]
 8008f0e:	e00d      	b.n	8008f2c <OLED_Refresh_Gram+0x4c>
 8008f10:	79ba      	ldrb	r2, [r7, #6]
 8008f12:	79fb      	ldrb	r3, [r7, #7]
 8008f14:	490d      	ldr	r1, [pc, #52]	; (8008f4c <OLED_Refresh_Gram+0x6c>)
 8008f16:	00d2      	lsls	r2, r2, #3
 8008f18:	440a      	add	r2, r1
 8008f1a:	4413      	add	r3, r2
 8008f1c:	781b      	ldrb	r3, [r3, #0]
 8008f1e:	2101      	movs	r1, #1
 8008f20:	4618      	mov	r0, r3
 8008f22:	f000 f815 	bl	8008f50 <OLED_WR_Byte>
 8008f26:	79bb      	ldrb	r3, [r7, #6]
 8008f28:	3301      	adds	r3, #1
 8008f2a:	71bb      	strb	r3, [r7, #6]
 8008f2c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	daed      	bge.n	8008f10 <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)  
 8008f34:	79fb      	ldrb	r3, [r7, #7]
 8008f36:	3301      	adds	r3, #1
 8008f38:	71fb      	strb	r3, [r7, #7]
 8008f3a:	79fb      	ldrb	r3, [r7, #7]
 8008f3c:	2b07      	cmp	r3, #7
 8008f3e:	d9d5      	bls.n	8008eec <OLED_Refresh_Gram+0xc>
	}   
}
 8008f40:	bf00      	nop
 8008f42:	bf00      	nop
 8008f44:	3708      	adds	r7, #8
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bd80      	pop	{r7, pc}
 8008f4a:	bf00      	nop
 8008f4c:	20004c24 	.word	0x20004c24

08008f50 <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{	
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b084      	sub	sp, #16
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	4603      	mov	r3, r0
 8008f58:	460a      	mov	r2, r1
 8008f5a:	71fb      	strb	r3, [r7, #7]
 8008f5c:	4613      	mov	r3, r2
 8008f5e:	71bb      	strb	r3, [r7, #6]
	uint8_t i;			  
	if(cmd)
 8008f60:	79bb      	ldrb	r3, [r7, #6]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d006      	beq.n	8008f74 <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 8008f66:	2201      	movs	r2, #1
 8008f68:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008f6c:	481c      	ldr	r0, [pc, #112]	; (8008fe0 <OLED_WR_Byte+0x90>)
 8008f6e:	f7f9 fd11 	bl	8002994 <HAL_GPIO_WritePin>
 8008f72:	e005      	b.n	8008f80 <OLED_WR_Byte+0x30>
	else 
	  OLED_RS_Clr();		  
 8008f74:	2200      	movs	r2, #0
 8008f76:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008f7a:	4819      	ldr	r0, [pc, #100]	; (8008fe0 <OLED_WR_Byte+0x90>)
 8008f7c:	f7f9 fd0a 	bl	8002994 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 8008f80:	2300      	movs	r3, #0
 8008f82:	73fb      	strb	r3, [r7, #15]
 8008f84:	e01e      	b.n	8008fc4 <OLED_WR_Byte+0x74>
	{			  
		OLED_SCLK_Clr();
 8008f86:	2200      	movs	r2, #0
 8008f88:	2120      	movs	r1, #32
 8008f8a:	4815      	ldr	r0, [pc, #84]	; (8008fe0 <OLED_WR_Byte+0x90>)
 8008f8c:	f7f9 fd02 	bl	8002994 <HAL_GPIO_WritePin>
		if(dat&0x80)
 8008f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	da05      	bge.n	8008fa4 <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 8008f98:	2201      	movs	r2, #1
 8008f9a:	2140      	movs	r1, #64	; 0x40
 8008f9c:	4810      	ldr	r0, [pc, #64]	; (8008fe0 <OLED_WR_Byte+0x90>)
 8008f9e:	f7f9 fcf9 	bl	8002994 <HAL_GPIO_WritePin>
 8008fa2:	e004      	b.n	8008fae <OLED_WR_Byte+0x5e>
		else 
		   OLED_SDIN_Clr();
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	2140      	movs	r1, #64	; 0x40
 8008fa8:	480d      	ldr	r0, [pc, #52]	; (8008fe0 <OLED_WR_Byte+0x90>)
 8008faa:	f7f9 fcf3 	bl	8002994 <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 8008fae:	2201      	movs	r2, #1
 8008fb0:	2120      	movs	r1, #32
 8008fb2:	480b      	ldr	r0, [pc, #44]	; (8008fe0 <OLED_WR_Byte+0x90>)
 8008fb4:	f7f9 fcee 	bl	8002994 <HAL_GPIO_WritePin>
		dat<<=1;   
 8008fb8:	79fb      	ldrb	r3, [r7, #7]
 8008fba:	005b      	lsls	r3, r3, #1
 8008fbc:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 8008fbe:	7bfb      	ldrb	r3, [r7, #15]
 8008fc0:	3301      	adds	r3, #1
 8008fc2:	73fb      	strb	r3, [r7, #15]
 8008fc4:	7bfb      	ldrb	r3, [r7, #15]
 8008fc6:	2b07      	cmp	r3, #7
 8008fc8:	d9dd      	bls.n	8008f86 <OLED_WR_Byte+0x36>
	}				 		  
	OLED_RS_Set();   	  
 8008fca:	2201      	movs	r2, #1
 8008fcc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008fd0:	4803      	ldr	r0, [pc, #12]	; (8008fe0 <OLED_WR_Byte+0x90>)
 8008fd2:	f7f9 fcdf 	bl	8002994 <HAL_GPIO_WritePin>
} 
 8008fd6:	bf00      	nop
 8008fd8:	3710      	adds	r7, #16
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd80      	pop	{r7, pc}
 8008fde:	bf00      	nop
 8008fe0:	40021000 	.word	0x40021000

08008fe4 <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b082      	sub	sp, #8
 8008fe8:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 8008fea:	2300      	movs	r3, #0
 8008fec:	71fb      	strb	r3, [r7, #7]
 8008fee:	e014      	b.n	800901a <OLED_Clear+0x36>
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	71bb      	strb	r3, [r7, #6]
 8008ff4:	e00a      	b.n	800900c <OLED_Clear+0x28>
 8008ff6:	79ba      	ldrb	r2, [r7, #6]
 8008ff8:	79fb      	ldrb	r3, [r7, #7]
 8008ffa:	490c      	ldr	r1, [pc, #48]	; (800902c <OLED_Clear+0x48>)
 8008ffc:	00d2      	lsls	r2, r2, #3
 8008ffe:	440a      	add	r2, r1
 8009000:	4413      	add	r3, r2
 8009002:	2200      	movs	r2, #0
 8009004:	701a      	strb	r2, [r3, #0]
 8009006:	79bb      	ldrb	r3, [r7, #6]
 8009008:	3301      	adds	r3, #1
 800900a:	71bb      	strb	r3, [r7, #6]
 800900c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8009010:	2b00      	cmp	r3, #0
 8009012:	daf0      	bge.n	8008ff6 <OLED_Clear+0x12>
 8009014:	79fb      	ldrb	r3, [r7, #7]
 8009016:	3301      	adds	r3, #1
 8009018:	71fb      	strb	r3, [r7, #7]
 800901a:	79fb      	ldrb	r3, [r7, #7]
 800901c:	2b07      	cmp	r3, #7
 800901e:	d9e7      	bls.n	8008ff0 <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 8009020:	f7ff ff5e 	bl	8008ee0 <OLED_Refresh_Gram>
}
 8009024:	bf00      	nop
 8009026:	3708      	adds	r7, #8
 8009028:	46bd      	mov	sp, r7
 800902a:	bd80      	pop	{r7, pc}
 800902c:	20004c24 	.word	0x20004c24

08009030 <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 8009030:	b480      	push	{r7}
 8009032:	b085      	sub	sp, #20
 8009034:	af00      	add	r7, sp, #0
 8009036:	4603      	mov	r3, r0
 8009038:	71fb      	strb	r3, [r7, #7]
 800903a:	460b      	mov	r3, r1
 800903c:	71bb      	strb	r3, [r7, #6]
 800903e:	4613      	mov	r3, r2
 8009040:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 8009042:	2300      	movs	r3, #0
 8009044:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 8009046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800904a:	2b00      	cmp	r3, #0
 800904c:	db41      	blt.n	80090d2 <OLED_DrawPoint+0xa2>
 800904e:	79bb      	ldrb	r3, [r7, #6]
 8009050:	2b3f      	cmp	r3, #63	; 0x3f
 8009052:	d83e      	bhi.n	80090d2 <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 8009054:	79bb      	ldrb	r3, [r7, #6]
 8009056:	08db      	lsrs	r3, r3, #3
 8009058:	b2db      	uxtb	r3, r3
 800905a:	f1c3 0307 	rsb	r3, r3, #7
 800905e:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 8009060:	79bb      	ldrb	r3, [r7, #6]
 8009062:	f003 0307 	and.w	r3, r3, #7
 8009066:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 8009068:	7b7b      	ldrb	r3, [r7, #13]
 800906a:	f1c3 0307 	rsb	r3, r3, #7
 800906e:	2201      	movs	r2, #1
 8009070:	fa02 f303 	lsl.w	r3, r2, r3
 8009074:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 8009076:	797b      	ldrb	r3, [r7, #5]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d012      	beq.n	80090a2 <OLED_DrawPoint+0x72>
 800907c:	79fa      	ldrb	r2, [r7, #7]
 800907e:	7bbb      	ldrb	r3, [r7, #14]
 8009080:	4917      	ldr	r1, [pc, #92]	; (80090e0 <OLED_DrawPoint+0xb0>)
 8009082:	00d2      	lsls	r2, r2, #3
 8009084:	440a      	add	r2, r1
 8009086:	4413      	add	r3, r2
 8009088:	7818      	ldrb	r0, [r3, #0]
 800908a:	79fa      	ldrb	r2, [r7, #7]
 800908c:	7bbb      	ldrb	r3, [r7, #14]
 800908e:	7bf9      	ldrb	r1, [r7, #15]
 8009090:	4301      	orrs	r1, r0
 8009092:	b2c8      	uxtb	r0, r1
 8009094:	4912      	ldr	r1, [pc, #72]	; (80090e0 <OLED_DrawPoint+0xb0>)
 8009096:	00d2      	lsls	r2, r2, #3
 8009098:	440a      	add	r2, r1
 800909a:	4413      	add	r3, r2
 800909c:	4602      	mov	r2, r0
 800909e:	701a      	strb	r2, [r3, #0]
 80090a0:	e018      	b.n	80090d4 <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 80090a2:	79fa      	ldrb	r2, [r7, #7]
 80090a4:	7bbb      	ldrb	r3, [r7, #14]
 80090a6:	490e      	ldr	r1, [pc, #56]	; (80090e0 <OLED_DrawPoint+0xb0>)
 80090a8:	00d2      	lsls	r2, r2, #3
 80090aa:	440a      	add	r2, r1
 80090ac:	4413      	add	r3, r2
 80090ae:	781b      	ldrb	r3, [r3, #0]
 80090b0:	b25a      	sxtb	r2, r3
 80090b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80090b6:	43db      	mvns	r3, r3
 80090b8:	b25b      	sxtb	r3, r3
 80090ba:	4013      	ands	r3, r2
 80090bc:	b259      	sxtb	r1, r3
 80090be:	79fa      	ldrb	r2, [r7, #7]
 80090c0:	7bbb      	ldrb	r3, [r7, #14]
 80090c2:	b2c8      	uxtb	r0, r1
 80090c4:	4906      	ldr	r1, [pc, #24]	; (80090e0 <OLED_DrawPoint+0xb0>)
 80090c6:	00d2      	lsls	r2, r2, #3
 80090c8:	440a      	add	r2, r1
 80090ca:	4413      	add	r3, r2
 80090cc:	4602      	mov	r2, r0
 80090ce:	701a      	strb	r2, [r3, #0]
 80090d0:	e000      	b.n	80090d4 <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 80090d2:	bf00      	nop
}
 80090d4:	3714      	adds	r7, #20
 80090d6:	46bd      	mov	sp, r7
 80090d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090dc:	4770      	bx	lr
 80090de:	bf00      	nop
 80090e0:	20004c24 	.word	0x20004c24

080090e4 <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 80090e4:	b590      	push	{r4, r7, lr}
 80090e6:	b085      	sub	sp, #20
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	4604      	mov	r4, r0
 80090ec:	4608      	mov	r0, r1
 80090ee:	4611      	mov	r1, r2
 80090f0:	461a      	mov	r2, r3
 80090f2:	4623      	mov	r3, r4
 80090f4:	71fb      	strb	r3, [r7, #7]
 80090f6:	4603      	mov	r3, r0
 80090f8:	71bb      	strb	r3, [r7, #6]
 80090fa:	460b      	mov	r3, r1
 80090fc:	717b      	strb	r3, [r7, #5]
 80090fe:	4613      	mov	r3, r2
 8009100:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 8009102:	79bb      	ldrb	r3, [r7, #6]
 8009104:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 8009106:	797b      	ldrb	r3, [r7, #5]
 8009108:	3b20      	subs	r3, #32
 800910a:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 800910c:	2300      	movs	r3, #0
 800910e:	73bb      	strb	r3, [r7, #14]
 8009110:	e04d      	b.n	80091ae <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 8009112:	793b      	ldrb	r3, [r7, #4]
 8009114:	2b0c      	cmp	r3, #12
 8009116:	d10b      	bne.n	8009130 <OLED_ShowChar+0x4c>
 8009118:	797a      	ldrb	r2, [r7, #5]
 800911a:	7bb9      	ldrb	r1, [r7, #14]
 800911c:	4828      	ldr	r0, [pc, #160]	; (80091c0 <OLED_ShowChar+0xdc>)
 800911e:	4613      	mov	r3, r2
 8009120:	005b      	lsls	r3, r3, #1
 8009122:	4413      	add	r3, r2
 8009124:	009b      	lsls	r3, r3, #2
 8009126:	4403      	add	r3, r0
 8009128:	440b      	add	r3, r1
 800912a:	781b      	ldrb	r3, [r3, #0]
 800912c:	73fb      	strb	r3, [r7, #15]
 800912e:	e007      	b.n	8009140 <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 8009130:	797a      	ldrb	r2, [r7, #5]
 8009132:	7bbb      	ldrb	r3, [r7, #14]
 8009134:	4923      	ldr	r1, [pc, #140]	; (80091c4 <OLED_ShowChar+0xe0>)
 8009136:	0112      	lsls	r2, r2, #4
 8009138:	440a      	add	r2, r1
 800913a:	4413      	add	r3, r2
 800913c:	781b      	ldrb	r3, [r3, #0]
 800913e:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 8009140:	2300      	movs	r3, #0
 8009142:	737b      	strb	r3, [r7, #13]
 8009144:	e02d      	b.n	80091a2 <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 8009146:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800914a:	2b00      	cmp	r3, #0
 800914c:	da07      	bge.n	800915e <OLED_ShowChar+0x7a>
 800914e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8009152:	79b9      	ldrb	r1, [r7, #6]
 8009154:	79fb      	ldrb	r3, [r7, #7]
 8009156:	4618      	mov	r0, r3
 8009158:	f7ff ff6a 	bl	8009030 <OLED_DrawPoint>
 800915c:	e00c      	b.n	8009178 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 800915e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009162:	2b00      	cmp	r3, #0
 8009164:	bf0c      	ite	eq
 8009166:	2301      	moveq	r3, #1
 8009168:	2300      	movne	r3, #0
 800916a:	b2db      	uxtb	r3, r3
 800916c:	461a      	mov	r2, r3
 800916e:	79b9      	ldrb	r1, [r7, #6]
 8009170:	79fb      	ldrb	r3, [r7, #7]
 8009172:	4618      	mov	r0, r3
 8009174:	f7ff ff5c 	bl	8009030 <OLED_DrawPoint>
			temp<<=1;
 8009178:	7bfb      	ldrb	r3, [r7, #15]
 800917a:	005b      	lsls	r3, r3, #1
 800917c:	73fb      	strb	r3, [r7, #15]
			y++;
 800917e:	79bb      	ldrb	r3, [r7, #6]
 8009180:	3301      	adds	r3, #1
 8009182:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 8009184:	79ba      	ldrb	r2, [r7, #6]
 8009186:	7b3b      	ldrb	r3, [r7, #12]
 8009188:	1ad2      	subs	r2, r2, r3
 800918a:	793b      	ldrb	r3, [r7, #4]
 800918c:	429a      	cmp	r2, r3
 800918e:	d105      	bne.n	800919c <OLED_ShowChar+0xb8>
			{
				y=y0;
 8009190:	7b3b      	ldrb	r3, [r7, #12]
 8009192:	71bb      	strb	r3, [r7, #6]
				x++;
 8009194:	79fb      	ldrb	r3, [r7, #7]
 8009196:	3301      	adds	r3, #1
 8009198:	71fb      	strb	r3, [r7, #7]
				break;
 800919a:	e005      	b.n	80091a8 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 800919c:	7b7b      	ldrb	r3, [r7, #13]
 800919e:	3301      	adds	r3, #1
 80091a0:	737b      	strb	r3, [r7, #13]
 80091a2:	7b7b      	ldrb	r3, [r7, #13]
 80091a4:	2b07      	cmp	r3, #7
 80091a6:	d9ce      	bls.n	8009146 <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 80091a8:	7bbb      	ldrb	r3, [r7, #14]
 80091aa:	3301      	adds	r3, #1
 80091ac:	73bb      	strb	r3, [r7, #14]
 80091ae:	7bba      	ldrb	r2, [r7, #14]
 80091b0:	793b      	ldrb	r3, [r7, #4]
 80091b2:	429a      	cmp	r2, r3
 80091b4:	d3ad      	bcc.n	8009112 <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 80091b6:	bf00      	nop
 80091b8:	bf00      	nop
 80091ba:	3714      	adds	r7, #20
 80091bc:	46bd      	mov	sp, r7
 80091be:	bd90      	pop	{r4, r7, pc}
 80091c0:	08009e28 	.word	0x08009e28
 80091c4:	0800a29c 	.word	0x0800a29c

080091c8 <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b084      	sub	sp, #16
 80091cc:	af02      	add	r7, sp, #8
 80091ce:	4603      	mov	r3, r0
 80091d0:	603a      	str	r2, [r7, #0]
 80091d2:	71fb      	strb	r3, [r7, #7]
 80091d4:	460b      	mov	r3, r1
 80091d6:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 80091d8:	e01f      	b.n	800921a <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 80091da:	79fb      	ldrb	r3, [r7, #7]
 80091dc:	2b7a      	cmp	r3, #122	; 0x7a
 80091de:	d904      	bls.n	80091ea <OLED_ShowString+0x22>
 80091e0:	2300      	movs	r3, #0
 80091e2:	71fb      	strb	r3, [r7, #7]
 80091e4:	79bb      	ldrb	r3, [r7, #6]
 80091e6:	3310      	adds	r3, #16
 80091e8:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 80091ea:	79bb      	ldrb	r3, [r7, #6]
 80091ec:	2b3a      	cmp	r3, #58	; 0x3a
 80091ee:	d905      	bls.n	80091fc <OLED_ShowString+0x34>
 80091f0:	2300      	movs	r3, #0
 80091f2:	71fb      	strb	r3, [r7, #7]
 80091f4:	79fb      	ldrb	r3, [r7, #7]
 80091f6:	71bb      	strb	r3, [r7, #6]
 80091f8:	f7ff fef4 	bl	8008fe4 <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	781a      	ldrb	r2, [r3, #0]
 8009200:	79b9      	ldrb	r1, [r7, #6]
 8009202:	79f8      	ldrb	r0, [r7, #7]
 8009204:	2301      	movs	r3, #1
 8009206:	9300      	str	r3, [sp, #0]
 8009208:	230c      	movs	r3, #12
 800920a:	f7ff ff6b 	bl	80090e4 <OLED_ShowChar>
        x+=8;
 800920e:	79fb      	ldrb	r3, [r7, #7]
 8009210:	3308      	adds	r3, #8
 8009212:	71fb      	strb	r3, [r7, #7]
        p++;
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	3301      	adds	r3, #1
 8009218:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	781b      	ldrb	r3, [r3, #0]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d1db      	bne.n	80091da <OLED_ShowString+0x12>
    }  
}	 
 8009222:	bf00      	nop
 8009224:	bf00      	nop
 8009226:	3708      	adds	r7, #8
 8009228:	46bd      	mov	sp, r7
 800922a:	bd80      	pop	{r7, pc}

0800922c <OLED_Init>:

void OLED_Init(void)
{
 800922c:	b580      	push	{r7, lr}
 800922e:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 8009230:	f7fa fb7a 	bl	8003928 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 8009234:	4b41      	ldr	r3, [pc, #260]	; (800933c <OLED_Init+0x110>)
 8009236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009238:	4a40      	ldr	r2, [pc, #256]	; (800933c <OLED_Init+0x110>)
 800923a:	f023 0301 	bic.w	r3, r3, #1
 800923e:	6713      	str	r3, [r2, #112]	; 0x70
 8009240:	4b3e      	ldr	r3, [pc, #248]	; (800933c <OLED_Init+0x110>)
 8009242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009244:	4a3d      	ldr	r2, [pc, #244]	; (800933c <OLED_Init+0x110>)
 8009246:	f023 0304 	bic.w	r3, r3, #4
 800924a:	6713      	str	r3, [r2, #112]	; 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 800924c:	f7fa fb80 	bl	8003950 <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 8009250:	2200      	movs	r2, #0
 8009252:	2180      	movs	r1, #128	; 0x80
 8009254:	483a      	ldr	r0, [pc, #232]	; (8009340 <OLED_Init+0x114>)
 8009256:	f7f9 fb9d 	bl	8002994 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800925a:	2064      	movs	r0, #100	; 0x64
 800925c:	f7f9 f836 	bl	80022cc <HAL_Delay>
	OLED_RST_Set();
 8009260:	2201      	movs	r2, #1
 8009262:	2180      	movs	r1, #128	; 0x80
 8009264:	4836      	ldr	r0, [pc, #216]	; (8009340 <OLED_Init+0x114>)
 8009266:	f7f9 fb95 	bl	8002994 <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 800926a:	2100      	movs	r1, #0
 800926c:	20ae      	movs	r0, #174	; 0xae
 800926e:	f7ff fe6f 	bl	8008f50 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 8009272:	2100      	movs	r1, #0
 8009274:	20d5      	movs	r0, #213	; 0xd5
 8009276:	f7ff fe6b 	bl	8008f50 <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 800927a:	2100      	movs	r1, #0
 800927c:	2050      	movs	r0, #80	; 0x50
 800927e:	f7ff fe67 	bl	8008f50 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 8009282:	2100      	movs	r1, #0
 8009284:	20a8      	movs	r0, #168	; 0xa8
 8009286:	f7ff fe63 	bl	8008f50 <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 800928a:	2100      	movs	r1, #0
 800928c:	203f      	movs	r0, #63	; 0x3f
 800928e:	f7ff fe5f 	bl	8008f50 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 8009292:	2100      	movs	r1, #0
 8009294:	20d3      	movs	r0, #211	; 0xd3
 8009296:	f7ff fe5b 	bl	8008f50 <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 800929a:	2100      	movs	r1, #0
 800929c:	2000      	movs	r0, #0
 800929e:	f7ff fe57 	bl	8008f50 <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 80092a2:	2100      	movs	r1, #0
 80092a4:	2040      	movs	r0, #64	; 0x40
 80092a6:	f7ff fe53 	bl	8008f50 <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 80092aa:	2100      	movs	r1, #0
 80092ac:	208d      	movs	r0, #141	; 0x8d
 80092ae:	f7ff fe4f 	bl	8008f50 <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 80092b2:	2100      	movs	r1, #0
 80092b4:	2014      	movs	r0, #20
 80092b6:	f7ff fe4b 	bl	8008f50 <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 80092ba:	2100      	movs	r1, #0
 80092bc:	2020      	movs	r0, #32
 80092be:	f7ff fe47 	bl	8008f50 <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 80092c2:	2100      	movs	r1, #0
 80092c4:	2002      	movs	r0, #2
 80092c6:	f7ff fe43 	bl	8008f50 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 80092ca:	2100      	movs	r1, #0
 80092cc:	20a1      	movs	r0, #161	; 0xa1
 80092ce:	f7ff fe3f 	bl	8008f50 <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 80092d2:	2100      	movs	r1, #0
 80092d4:	20c0      	movs	r0, #192	; 0xc0
 80092d6:	f7ff fe3b 	bl	8008f50 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 80092da:	2100      	movs	r1, #0
 80092dc:	20da      	movs	r0, #218	; 0xda
 80092de:	f7ff fe37 	bl	8008f50 <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 80092e2:	2100      	movs	r1, #0
 80092e4:	2012      	movs	r0, #18
 80092e6:	f7ff fe33 	bl	8008f50 <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 80092ea:	2100      	movs	r1, #0
 80092ec:	2081      	movs	r0, #129	; 0x81
 80092ee:	f7ff fe2f 	bl	8008f50 <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 80092f2:	2100      	movs	r1, #0
 80092f4:	20ef      	movs	r0, #239	; 0xef
 80092f6:	f7ff fe2b 	bl	8008f50 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 80092fa:	2100      	movs	r1, #0
 80092fc:	20d9      	movs	r0, #217	; 0xd9
 80092fe:	f7ff fe27 	bl	8008f50 <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 8009302:	2100      	movs	r1, #0
 8009304:	20f1      	movs	r0, #241	; 0xf1
 8009306:	f7ff fe23 	bl	8008f50 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 800930a:	2100      	movs	r1, #0
 800930c:	20db      	movs	r0, #219	; 0xdb
 800930e:	f7ff fe1f 	bl	8008f50 <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 8009312:	2100      	movs	r1, #0
 8009314:	2030      	movs	r0, #48	; 0x30
 8009316:	f7ff fe1b 	bl	8008f50 <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 800931a:	2100      	movs	r1, #0
 800931c:	20a4      	movs	r0, #164	; 0xa4
 800931e:	f7ff fe17 	bl	8008f50 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 8009322:	2100      	movs	r1, #0
 8009324:	20a6      	movs	r0, #166	; 0xa6
 8009326:	f7ff fe13 	bl	8008f50 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 800932a:	2100      	movs	r1, #0
 800932c:	20af      	movs	r0, #175	; 0xaf
 800932e:	f7ff fe0f 	bl	8008f50 <OLED_WR_Byte>
	OLED_Clear(); 
 8009332:	f7ff fe57 	bl	8008fe4 <OLED_Clear>
 8009336:	bf00      	nop
 8009338:	bd80      	pop	{r7, pc}
 800933a:	bf00      	nop
 800933c:	40023800 	.word	0x40023800
 8009340:	40021000 	.word	0x40021000

08009344 <__errno>:
 8009344:	4b01      	ldr	r3, [pc, #4]	; (800934c <__errno+0x8>)
 8009346:	6818      	ldr	r0, [r3, #0]
 8009348:	4770      	bx	lr
 800934a:	bf00      	nop
 800934c:	2000001c 	.word	0x2000001c

08009350 <__libc_init_array>:
 8009350:	b570      	push	{r4, r5, r6, lr}
 8009352:	4d0d      	ldr	r5, [pc, #52]	; (8009388 <__libc_init_array+0x38>)
 8009354:	4c0d      	ldr	r4, [pc, #52]	; (800938c <__libc_init_array+0x3c>)
 8009356:	1b64      	subs	r4, r4, r5
 8009358:	10a4      	asrs	r4, r4, #2
 800935a:	2600      	movs	r6, #0
 800935c:	42a6      	cmp	r6, r4
 800935e:	d109      	bne.n	8009374 <__libc_init_array+0x24>
 8009360:	4d0b      	ldr	r5, [pc, #44]	; (8009390 <__libc_init_array+0x40>)
 8009362:	4c0c      	ldr	r4, [pc, #48]	; (8009394 <__libc_init_array+0x44>)
 8009364:	f000 fc9e 	bl	8009ca4 <_init>
 8009368:	1b64      	subs	r4, r4, r5
 800936a:	10a4      	asrs	r4, r4, #2
 800936c:	2600      	movs	r6, #0
 800936e:	42a6      	cmp	r6, r4
 8009370:	d105      	bne.n	800937e <__libc_init_array+0x2e>
 8009372:	bd70      	pop	{r4, r5, r6, pc}
 8009374:	f855 3b04 	ldr.w	r3, [r5], #4
 8009378:	4798      	blx	r3
 800937a:	3601      	adds	r6, #1
 800937c:	e7ee      	b.n	800935c <__libc_init_array+0xc>
 800937e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009382:	4798      	blx	r3
 8009384:	3601      	adds	r6, #1
 8009386:	e7f2      	b.n	800936e <__libc_init_array+0x1e>
 8009388:	0800a8c8 	.word	0x0800a8c8
 800938c:	0800a8c8 	.word	0x0800a8c8
 8009390:	0800a8c8 	.word	0x0800a8c8
 8009394:	0800a8cc 	.word	0x0800a8cc

08009398 <malloc>:
 8009398:	4b02      	ldr	r3, [pc, #8]	; (80093a4 <malloc+0xc>)
 800939a:	4601      	mov	r1, r0
 800939c:	6818      	ldr	r0, [r3, #0]
 800939e:	f000 b88d 	b.w	80094bc <_malloc_r>
 80093a2:	bf00      	nop
 80093a4:	2000001c 	.word	0x2000001c

080093a8 <free>:
 80093a8:	4b02      	ldr	r3, [pc, #8]	; (80093b4 <free+0xc>)
 80093aa:	4601      	mov	r1, r0
 80093ac:	6818      	ldr	r0, [r3, #0]
 80093ae:	f000 b819 	b.w	80093e4 <_free_r>
 80093b2:	bf00      	nop
 80093b4:	2000001c 	.word	0x2000001c

080093b8 <memcpy>:
 80093b8:	440a      	add	r2, r1
 80093ba:	4291      	cmp	r1, r2
 80093bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80093c0:	d100      	bne.n	80093c4 <memcpy+0xc>
 80093c2:	4770      	bx	lr
 80093c4:	b510      	push	{r4, lr}
 80093c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80093ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80093ce:	4291      	cmp	r1, r2
 80093d0:	d1f9      	bne.n	80093c6 <memcpy+0xe>
 80093d2:	bd10      	pop	{r4, pc}

080093d4 <memset>:
 80093d4:	4402      	add	r2, r0
 80093d6:	4603      	mov	r3, r0
 80093d8:	4293      	cmp	r3, r2
 80093da:	d100      	bne.n	80093de <memset+0xa>
 80093dc:	4770      	bx	lr
 80093de:	f803 1b01 	strb.w	r1, [r3], #1
 80093e2:	e7f9      	b.n	80093d8 <memset+0x4>

080093e4 <_free_r>:
 80093e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80093e6:	2900      	cmp	r1, #0
 80093e8:	d044      	beq.n	8009474 <_free_r+0x90>
 80093ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093ee:	9001      	str	r0, [sp, #4]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	f1a1 0404 	sub.w	r4, r1, #4
 80093f6:	bfb8      	it	lt
 80093f8:	18e4      	addlt	r4, r4, r3
 80093fa:	f000 f903 	bl	8009604 <__malloc_lock>
 80093fe:	4a1e      	ldr	r2, [pc, #120]	; (8009478 <_free_r+0x94>)
 8009400:	9801      	ldr	r0, [sp, #4]
 8009402:	6813      	ldr	r3, [r2, #0]
 8009404:	b933      	cbnz	r3, 8009414 <_free_r+0x30>
 8009406:	6063      	str	r3, [r4, #4]
 8009408:	6014      	str	r4, [r2, #0]
 800940a:	b003      	add	sp, #12
 800940c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009410:	f000 b8fe 	b.w	8009610 <__malloc_unlock>
 8009414:	42a3      	cmp	r3, r4
 8009416:	d908      	bls.n	800942a <_free_r+0x46>
 8009418:	6825      	ldr	r5, [r4, #0]
 800941a:	1961      	adds	r1, r4, r5
 800941c:	428b      	cmp	r3, r1
 800941e:	bf01      	itttt	eq
 8009420:	6819      	ldreq	r1, [r3, #0]
 8009422:	685b      	ldreq	r3, [r3, #4]
 8009424:	1949      	addeq	r1, r1, r5
 8009426:	6021      	streq	r1, [r4, #0]
 8009428:	e7ed      	b.n	8009406 <_free_r+0x22>
 800942a:	461a      	mov	r2, r3
 800942c:	685b      	ldr	r3, [r3, #4]
 800942e:	b10b      	cbz	r3, 8009434 <_free_r+0x50>
 8009430:	42a3      	cmp	r3, r4
 8009432:	d9fa      	bls.n	800942a <_free_r+0x46>
 8009434:	6811      	ldr	r1, [r2, #0]
 8009436:	1855      	adds	r5, r2, r1
 8009438:	42a5      	cmp	r5, r4
 800943a:	d10b      	bne.n	8009454 <_free_r+0x70>
 800943c:	6824      	ldr	r4, [r4, #0]
 800943e:	4421      	add	r1, r4
 8009440:	1854      	adds	r4, r2, r1
 8009442:	42a3      	cmp	r3, r4
 8009444:	6011      	str	r1, [r2, #0]
 8009446:	d1e0      	bne.n	800940a <_free_r+0x26>
 8009448:	681c      	ldr	r4, [r3, #0]
 800944a:	685b      	ldr	r3, [r3, #4]
 800944c:	6053      	str	r3, [r2, #4]
 800944e:	4421      	add	r1, r4
 8009450:	6011      	str	r1, [r2, #0]
 8009452:	e7da      	b.n	800940a <_free_r+0x26>
 8009454:	d902      	bls.n	800945c <_free_r+0x78>
 8009456:	230c      	movs	r3, #12
 8009458:	6003      	str	r3, [r0, #0]
 800945a:	e7d6      	b.n	800940a <_free_r+0x26>
 800945c:	6825      	ldr	r5, [r4, #0]
 800945e:	1961      	adds	r1, r4, r5
 8009460:	428b      	cmp	r3, r1
 8009462:	bf04      	itt	eq
 8009464:	6819      	ldreq	r1, [r3, #0]
 8009466:	685b      	ldreq	r3, [r3, #4]
 8009468:	6063      	str	r3, [r4, #4]
 800946a:	bf04      	itt	eq
 800946c:	1949      	addeq	r1, r1, r5
 800946e:	6021      	streq	r1, [r4, #0]
 8009470:	6054      	str	r4, [r2, #4]
 8009472:	e7ca      	b.n	800940a <_free_r+0x26>
 8009474:	b003      	add	sp, #12
 8009476:	bd30      	pop	{r4, r5, pc}
 8009478:	20005024 	.word	0x20005024

0800947c <sbrk_aligned>:
 800947c:	b570      	push	{r4, r5, r6, lr}
 800947e:	4e0e      	ldr	r6, [pc, #56]	; (80094b8 <sbrk_aligned+0x3c>)
 8009480:	460c      	mov	r4, r1
 8009482:	6831      	ldr	r1, [r6, #0]
 8009484:	4605      	mov	r5, r0
 8009486:	b911      	cbnz	r1, 800948e <sbrk_aligned+0x12>
 8009488:	f000 f88c 	bl	80095a4 <_sbrk_r>
 800948c:	6030      	str	r0, [r6, #0]
 800948e:	4621      	mov	r1, r4
 8009490:	4628      	mov	r0, r5
 8009492:	f000 f887 	bl	80095a4 <_sbrk_r>
 8009496:	1c43      	adds	r3, r0, #1
 8009498:	d00a      	beq.n	80094b0 <sbrk_aligned+0x34>
 800949a:	1cc4      	adds	r4, r0, #3
 800949c:	f024 0403 	bic.w	r4, r4, #3
 80094a0:	42a0      	cmp	r0, r4
 80094a2:	d007      	beq.n	80094b4 <sbrk_aligned+0x38>
 80094a4:	1a21      	subs	r1, r4, r0
 80094a6:	4628      	mov	r0, r5
 80094a8:	f000 f87c 	bl	80095a4 <_sbrk_r>
 80094ac:	3001      	adds	r0, #1
 80094ae:	d101      	bne.n	80094b4 <sbrk_aligned+0x38>
 80094b0:	f04f 34ff 	mov.w	r4, #4294967295
 80094b4:	4620      	mov	r0, r4
 80094b6:	bd70      	pop	{r4, r5, r6, pc}
 80094b8:	20005028 	.word	0x20005028

080094bc <_malloc_r>:
 80094bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094c0:	1ccd      	adds	r5, r1, #3
 80094c2:	f025 0503 	bic.w	r5, r5, #3
 80094c6:	3508      	adds	r5, #8
 80094c8:	2d0c      	cmp	r5, #12
 80094ca:	bf38      	it	cc
 80094cc:	250c      	movcc	r5, #12
 80094ce:	2d00      	cmp	r5, #0
 80094d0:	4607      	mov	r7, r0
 80094d2:	db01      	blt.n	80094d8 <_malloc_r+0x1c>
 80094d4:	42a9      	cmp	r1, r5
 80094d6:	d905      	bls.n	80094e4 <_malloc_r+0x28>
 80094d8:	230c      	movs	r3, #12
 80094da:	603b      	str	r3, [r7, #0]
 80094dc:	2600      	movs	r6, #0
 80094de:	4630      	mov	r0, r6
 80094e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094e4:	4e2e      	ldr	r6, [pc, #184]	; (80095a0 <_malloc_r+0xe4>)
 80094e6:	f000 f88d 	bl	8009604 <__malloc_lock>
 80094ea:	6833      	ldr	r3, [r6, #0]
 80094ec:	461c      	mov	r4, r3
 80094ee:	bb34      	cbnz	r4, 800953e <_malloc_r+0x82>
 80094f0:	4629      	mov	r1, r5
 80094f2:	4638      	mov	r0, r7
 80094f4:	f7ff ffc2 	bl	800947c <sbrk_aligned>
 80094f8:	1c43      	adds	r3, r0, #1
 80094fa:	4604      	mov	r4, r0
 80094fc:	d14d      	bne.n	800959a <_malloc_r+0xde>
 80094fe:	6834      	ldr	r4, [r6, #0]
 8009500:	4626      	mov	r6, r4
 8009502:	2e00      	cmp	r6, #0
 8009504:	d140      	bne.n	8009588 <_malloc_r+0xcc>
 8009506:	6823      	ldr	r3, [r4, #0]
 8009508:	4631      	mov	r1, r6
 800950a:	4638      	mov	r0, r7
 800950c:	eb04 0803 	add.w	r8, r4, r3
 8009510:	f000 f848 	bl	80095a4 <_sbrk_r>
 8009514:	4580      	cmp	r8, r0
 8009516:	d13a      	bne.n	800958e <_malloc_r+0xd2>
 8009518:	6821      	ldr	r1, [r4, #0]
 800951a:	3503      	adds	r5, #3
 800951c:	1a6d      	subs	r5, r5, r1
 800951e:	f025 0503 	bic.w	r5, r5, #3
 8009522:	3508      	adds	r5, #8
 8009524:	2d0c      	cmp	r5, #12
 8009526:	bf38      	it	cc
 8009528:	250c      	movcc	r5, #12
 800952a:	4629      	mov	r1, r5
 800952c:	4638      	mov	r0, r7
 800952e:	f7ff ffa5 	bl	800947c <sbrk_aligned>
 8009532:	3001      	adds	r0, #1
 8009534:	d02b      	beq.n	800958e <_malloc_r+0xd2>
 8009536:	6823      	ldr	r3, [r4, #0]
 8009538:	442b      	add	r3, r5
 800953a:	6023      	str	r3, [r4, #0]
 800953c:	e00e      	b.n	800955c <_malloc_r+0xa0>
 800953e:	6822      	ldr	r2, [r4, #0]
 8009540:	1b52      	subs	r2, r2, r5
 8009542:	d41e      	bmi.n	8009582 <_malloc_r+0xc6>
 8009544:	2a0b      	cmp	r2, #11
 8009546:	d916      	bls.n	8009576 <_malloc_r+0xba>
 8009548:	1961      	adds	r1, r4, r5
 800954a:	42a3      	cmp	r3, r4
 800954c:	6025      	str	r5, [r4, #0]
 800954e:	bf18      	it	ne
 8009550:	6059      	strne	r1, [r3, #4]
 8009552:	6863      	ldr	r3, [r4, #4]
 8009554:	bf08      	it	eq
 8009556:	6031      	streq	r1, [r6, #0]
 8009558:	5162      	str	r2, [r4, r5]
 800955a:	604b      	str	r3, [r1, #4]
 800955c:	4638      	mov	r0, r7
 800955e:	f104 060b 	add.w	r6, r4, #11
 8009562:	f000 f855 	bl	8009610 <__malloc_unlock>
 8009566:	f026 0607 	bic.w	r6, r6, #7
 800956a:	1d23      	adds	r3, r4, #4
 800956c:	1af2      	subs	r2, r6, r3
 800956e:	d0b6      	beq.n	80094de <_malloc_r+0x22>
 8009570:	1b9b      	subs	r3, r3, r6
 8009572:	50a3      	str	r3, [r4, r2]
 8009574:	e7b3      	b.n	80094de <_malloc_r+0x22>
 8009576:	6862      	ldr	r2, [r4, #4]
 8009578:	42a3      	cmp	r3, r4
 800957a:	bf0c      	ite	eq
 800957c:	6032      	streq	r2, [r6, #0]
 800957e:	605a      	strne	r2, [r3, #4]
 8009580:	e7ec      	b.n	800955c <_malloc_r+0xa0>
 8009582:	4623      	mov	r3, r4
 8009584:	6864      	ldr	r4, [r4, #4]
 8009586:	e7b2      	b.n	80094ee <_malloc_r+0x32>
 8009588:	4634      	mov	r4, r6
 800958a:	6876      	ldr	r6, [r6, #4]
 800958c:	e7b9      	b.n	8009502 <_malloc_r+0x46>
 800958e:	230c      	movs	r3, #12
 8009590:	603b      	str	r3, [r7, #0]
 8009592:	4638      	mov	r0, r7
 8009594:	f000 f83c 	bl	8009610 <__malloc_unlock>
 8009598:	e7a1      	b.n	80094de <_malloc_r+0x22>
 800959a:	6025      	str	r5, [r4, #0]
 800959c:	e7de      	b.n	800955c <_malloc_r+0xa0>
 800959e:	bf00      	nop
 80095a0:	20005024 	.word	0x20005024

080095a4 <_sbrk_r>:
 80095a4:	b538      	push	{r3, r4, r5, lr}
 80095a6:	4d06      	ldr	r5, [pc, #24]	; (80095c0 <_sbrk_r+0x1c>)
 80095a8:	2300      	movs	r3, #0
 80095aa:	4604      	mov	r4, r0
 80095ac:	4608      	mov	r0, r1
 80095ae:	602b      	str	r3, [r5, #0]
 80095b0:	f7f8 fda8 	bl	8002104 <_sbrk>
 80095b4:	1c43      	adds	r3, r0, #1
 80095b6:	d102      	bne.n	80095be <_sbrk_r+0x1a>
 80095b8:	682b      	ldr	r3, [r5, #0]
 80095ba:	b103      	cbz	r3, 80095be <_sbrk_r+0x1a>
 80095bc:	6023      	str	r3, [r4, #0]
 80095be:	bd38      	pop	{r3, r4, r5, pc}
 80095c0:	2000502c 	.word	0x2000502c

080095c4 <siprintf>:
 80095c4:	b40e      	push	{r1, r2, r3}
 80095c6:	b500      	push	{lr}
 80095c8:	b09c      	sub	sp, #112	; 0x70
 80095ca:	ab1d      	add	r3, sp, #116	; 0x74
 80095cc:	9002      	str	r0, [sp, #8]
 80095ce:	9006      	str	r0, [sp, #24]
 80095d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80095d4:	4809      	ldr	r0, [pc, #36]	; (80095fc <siprintf+0x38>)
 80095d6:	9107      	str	r1, [sp, #28]
 80095d8:	9104      	str	r1, [sp, #16]
 80095da:	4909      	ldr	r1, [pc, #36]	; (8009600 <siprintf+0x3c>)
 80095dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80095e0:	9105      	str	r1, [sp, #20]
 80095e2:	6800      	ldr	r0, [r0, #0]
 80095e4:	9301      	str	r3, [sp, #4]
 80095e6:	a902      	add	r1, sp, #8
 80095e8:	f000 f874 	bl	80096d4 <_svfiprintf_r>
 80095ec:	9b02      	ldr	r3, [sp, #8]
 80095ee:	2200      	movs	r2, #0
 80095f0:	701a      	strb	r2, [r3, #0]
 80095f2:	b01c      	add	sp, #112	; 0x70
 80095f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80095f8:	b003      	add	sp, #12
 80095fa:	4770      	bx	lr
 80095fc:	2000001c 	.word	0x2000001c
 8009600:	ffff0208 	.word	0xffff0208

08009604 <__malloc_lock>:
 8009604:	4801      	ldr	r0, [pc, #4]	; (800960c <__malloc_lock+0x8>)
 8009606:	f000 baf9 	b.w	8009bfc <__retarget_lock_acquire_recursive>
 800960a:	bf00      	nop
 800960c:	20005030 	.word	0x20005030

08009610 <__malloc_unlock>:
 8009610:	4801      	ldr	r0, [pc, #4]	; (8009618 <__malloc_unlock+0x8>)
 8009612:	f000 baf4 	b.w	8009bfe <__retarget_lock_release_recursive>
 8009616:	bf00      	nop
 8009618:	20005030 	.word	0x20005030

0800961c <__ssputs_r>:
 800961c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009620:	688e      	ldr	r6, [r1, #8]
 8009622:	429e      	cmp	r6, r3
 8009624:	4682      	mov	sl, r0
 8009626:	460c      	mov	r4, r1
 8009628:	4690      	mov	r8, r2
 800962a:	461f      	mov	r7, r3
 800962c:	d838      	bhi.n	80096a0 <__ssputs_r+0x84>
 800962e:	898a      	ldrh	r2, [r1, #12]
 8009630:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009634:	d032      	beq.n	800969c <__ssputs_r+0x80>
 8009636:	6825      	ldr	r5, [r4, #0]
 8009638:	6909      	ldr	r1, [r1, #16]
 800963a:	eba5 0901 	sub.w	r9, r5, r1
 800963e:	6965      	ldr	r5, [r4, #20]
 8009640:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009644:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009648:	3301      	adds	r3, #1
 800964a:	444b      	add	r3, r9
 800964c:	106d      	asrs	r5, r5, #1
 800964e:	429d      	cmp	r5, r3
 8009650:	bf38      	it	cc
 8009652:	461d      	movcc	r5, r3
 8009654:	0553      	lsls	r3, r2, #21
 8009656:	d531      	bpl.n	80096bc <__ssputs_r+0xa0>
 8009658:	4629      	mov	r1, r5
 800965a:	f7ff ff2f 	bl	80094bc <_malloc_r>
 800965e:	4606      	mov	r6, r0
 8009660:	b950      	cbnz	r0, 8009678 <__ssputs_r+0x5c>
 8009662:	230c      	movs	r3, #12
 8009664:	f8ca 3000 	str.w	r3, [sl]
 8009668:	89a3      	ldrh	r3, [r4, #12]
 800966a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800966e:	81a3      	strh	r3, [r4, #12]
 8009670:	f04f 30ff 	mov.w	r0, #4294967295
 8009674:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009678:	6921      	ldr	r1, [r4, #16]
 800967a:	464a      	mov	r2, r9
 800967c:	f7ff fe9c 	bl	80093b8 <memcpy>
 8009680:	89a3      	ldrh	r3, [r4, #12]
 8009682:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009686:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800968a:	81a3      	strh	r3, [r4, #12]
 800968c:	6126      	str	r6, [r4, #16]
 800968e:	6165      	str	r5, [r4, #20]
 8009690:	444e      	add	r6, r9
 8009692:	eba5 0509 	sub.w	r5, r5, r9
 8009696:	6026      	str	r6, [r4, #0]
 8009698:	60a5      	str	r5, [r4, #8]
 800969a:	463e      	mov	r6, r7
 800969c:	42be      	cmp	r6, r7
 800969e:	d900      	bls.n	80096a2 <__ssputs_r+0x86>
 80096a0:	463e      	mov	r6, r7
 80096a2:	6820      	ldr	r0, [r4, #0]
 80096a4:	4632      	mov	r2, r6
 80096a6:	4641      	mov	r1, r8
 80096a8:	f000 faaa 	bl	8009c00 <memmove>
 80096ac:	68a3      	ldr	r3, [r4, #8]
 80096ae:	1b9b      	subs	r3, r3, r6
 80096b0:	60a3      	str	r3, [r4, #8]
 80096b2:	6823      	ldr	r3, [r4, #0]
 80096b4:	4433      	add	r3, r6
 80096b6:	6023      	str	r3, [r4, #0]
 80096b8:	2000      	movs	r0, #0
 80096ba:	e7db      	b.n	8009674 <__ssputs_r+0x58>
 80096bc:	462a      	mov	r2, r5
 80096be:	f000 fab9 	bl	8009c34 <_realloc_r>
 80096c2:	4606      	mov	r6, r0
 80096c4:	2800      	cmp	r0, #0
 80096c6:	d1e1      	bne.n	800968c <__ssputs_r+0x70>
 80096c8:	6921      	ldr	r1, [r4, #16]
 80096ca:	4650      	mov	r0, sl
 80096cc:	f7ff fe8a 	bl	80093e4 <_free_r>
 80096d0:	e7c7      	b.n	8009662 <__ssputs_r+0x46>
	...

080096d4 <_svfiprintf_r>:
 80096d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096d8:	4698      	mov	r8, r3
 80096da:	898b      	ldrh	r3, [r1, #12]
 80096dc:	061b      	lsls	r3, r3, #24
 80096de:	b09d      	sub	sp, #116	; 0x74
 80096e0:	4607      	mov	r7, r0
 80096e2:	460d      	mov	r5, r1
 80096e4:	4614      	mov	r4, r2
 80096e6:	d50e      	bpl.n	8009706 <_svfiprintf_r+0x32>
 80096e8:	690b      	ldr	r3, [r1, #16]
 80096ea:	b963      	cbnz	r3, 8009706 <_svfiprintf_r+0x32>
 80096ec:	2140      	movs	r1, #64	; 0x40
 80096ee:	f7ff fee5 	bl	80094bc <_malloc_r>
 80096f2:	6028      	str	r0, [r5, #0]
 80096f4:	6128      	str	r0, [r5, #16]
 80096f6:	b920      	cbnz	r0, 8009702 <_svfiprintf_r+0x2e>
 80096f8:	230c      	movs	r3, #12
 80096fa:	603b      	str	r3, [r7, #0]
 80096fc:	f04f 30ff 	mov.w	r0, #4294967295
 8009700:	e0d1      	b.n	80098a6 <_svfiprintf_r+0x1d2>
 8009702:	2340      	movs	r3, #64	; 0x40
 8009704:	616b      	str	r3, [r5, #20]
 8009706:	2300      	movs	r3, #0
 8009708:	9309      	str	r3, [sp, #36]	; 0x24
 800970a:	2320      	movs	r3, #32
 800970c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009710:	f8cd 800c 	str.w	r8, [sp, #12]
 8009714:	2330      	movs	r3, #48	; 0x30
 8009716:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80098c0 <_svfiprintf_r+0x1ec>
 800971a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800971e:	f04f 0901 	mov.w	r9, #1
 8009722:	4623      	mov	r3, r4
 8009724:	469a      	mov	sl, r3
 8009726:	f813 2b01 	ldrb.w	r2, [r3], #1
 800972a:	b10a      	cbz	r2, 8009730 <_svfiprintf_r+0x5c>
 800972c:	2a25      	cmp	r2, #37	; 0x25
 800972e:	d1f9      	bne.n	8009724 <_svfiprintf_r+0x50>
 8009730:	ebba 0b04 	subs.w	fp, sl, r4
 8009734:	d00b      	beq.n	800974e <_svfiprintf_r+0x7a>
 8009736:	465b      	mov	r3, fp
 8009738:	4622      	mov	r2, r4
 800973a:	4629      	mov	r1, r5
 800973c:	4638      	mov	r0, r7
 800973e:	f7ff ff6d 	bl	800961c <__ssputs_r>
 8009742:	3001      	adds	r0, #1
 8009744:	f000 80aa 	beq.w	800989c <_svfiprintf_r+0x1c8>
 8009748:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800974a:	445a      	add	r2, fp
 800974c:	9209      	str	r2, [sp, #36]	; 0x24
 800974e:	f89a 3000 	ldrb.w	r3, [sl]
 8009752:	2b00      	cmp	r3, #0
 8009754:	f000 80a2 	beq.w	800989c <_svfiprintf_r+0x1c8>
 8009758:	2300      	movs	r3, #0
 800975a:	f04f 32ff 	mov.w	r2, #4294967295
 800975e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009762:	f10a 0a01 	add.w	sl, sl, #1
 8009766:	9304      	str	r3, [sp, #16]
 8009768:	9307      	str	r3, [sp, #28]
 800976a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800976e:	931a      	str	r3, [sp, #104]	; 0x68
 8009770:	4654      	mov	r4, sl
 8009772:	2205      	movs	r2, #5
 8009774:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009778:	4851      	ldr	r0, [pc, #324]	; (80098c0 <_svfiprintf_r+0x1ec>)
 800977a:	f7f6 fd29 	bl	80001d0 <memchr>
 800977e:	9a04      	ldr	r2, [sp, #16]
 8009780:	b9d8      	cbnz	r0, 80097ba <_svfiprintf_r+0xe6>
 8009782:	06d0      	lsls	r0, r2, #27
 8009784:	bf44      	itt	mi
 8009786:	2320      	movmi	r3, #32
 8009788:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800978c:	0711      	lsls	r1, r2, #28
 800978e:	bf44      	itt	mi
 8009790:	232b      	movmi	r3, #43	; 0x2b
 8009792:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009796:	f89a 3000 	ldrb.w	r3, [sl]
 800979a:	2b2a      	cmp	r3, #42	; 0x2a
 800979c:	d015      	beq.n	80097ca <_svfiprintf_r+0xf6>
 800979e:	9a07      	ldr	r2, [sp, #28]
 80097a0:	4654      	mov	r4, sl
 80097a2:	2000      	movs	r0, #0
 80097a4:	f04f 0c0a 	mov.w	ip, #10
 80097a8:	4621      	mov	r1, r4
 80097aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80097ae:	3b30      	subs	r3, #48	; 0x30
 80097b0:	2b09      	cmp	r3, #9
 80097b2:	d94e      	bls.n	8009852 <_svfiprintf_r+0x17e>
 80097b4:	b1b0      	cbz	r0, 80097e4 <_svfiprintf_r+0x110>
 80097b6:	9207      	str	r2, [sp, #28]
 80097b8:	e014      	b.n	80097e4 <_svfiprintf_r+0x110>
 80097ba:	eba0 0308 	sub.w	r3, r0, r8
 80097be:	fa09 f303 	lsl.w	r3, r9, r3
 80097c2:	4313      	orrs	r3, r2
 80097c4:	9304      	str	r3, [sp, #16]
 80097c6:	46a2      	mov	sl, r4
 80097c8:	e7d2      	b.n	8009770 <_svfiprintf_r+0x9c>
 80097ca:	9b03      	ldr	r3, [sp, #12]
 80097cc:	1d19      	adds	r1, r3, #4
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	9103      	str	r1, [sp, #12]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	bfbb      	ittet	lt
 80097d6:	425b      	neglt	r3, r3
 80097d8:	f042 0202 	orrlt.w	r2, r2, #2
 80097dc:	9307      	strge	r3, [sp, #28]
 80097de:	9307      	strlt	r3, [sp, #28]
 80097e0:	bfb8      	it	lt
 80097e2:	9204      	strlt	r2, [sp, #16]
 80097e4:	7823      	ldrb	r3, [r4, #0]
 80097e6:	2b2e      	cmp	r3, #46	; 0x2e
 80097e8:	d10c      	bne.n	8009804 <_svfiprintf_r+0x130>
 80097ea:	7863      	ldrb	r3, [r4, #1]
 80097ec:	2b2a      	cmp	r3, #42	; 0x2a
 80097ee:	d135      	bne.n	800985c <_svfiprintf_r+0x188>
 80097f0:	9b03      	ldr	r3, [sp, #12]
 80097f2:	1d1a      	adds	r2, r3, #4
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	9203      	str	r2, [sp, #12]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	bfb8      	it	lt
 80097fc:	f04f 33ff 	movlt.w	r3, #4294967295
 8009800:	3402      	adds	r4, #2
 8009802:	9305      	str	r3, [sp, #20]
 8009804:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80098d0 <_svfiprintf_r+0x1fc>
 8009808:	7821      	ldrb	r1, [r4, #0]
 800980a:	2203      	movs	r2, #3
 800980c:	4650      	mov	r0, sl
 800980e:	f7f6 fcdf 	bl	80001d0 <memchr>
 8009812:	b140      	cbz	r0, 8009826 <_svfiprintf_r+0x152>
 8009814:	2340      	movs	r3, #64	; 0x40
 8009816:	eba0 000a 	sub.w	r0, r0, sl
 800981a:	fa03 f000 	lsl.w	r0, r3, r0
 800981e:	9b04      	ldr	r3, [sp, #16]
 8009820:	4303      	orrs	r3, r0
 8009822:	3401      	adds	r4, #1
 8009824:	9304      	str	r3, [sp, #16]
 8009826:	f814 1b01 	ldrb.w	r1, [r4], #1
 800982a:	4826      	ldr	r0, [pc, #152]	; (80098c4 <_svfiprintf_r+0x1f0>)
 800982c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009830:	2206      	movs	r2, #6
 8009832:	f7f6 fccd 	bl	80001d0 <memchr>
 8009836:	2800      	cmp	r0, #0
 8009838:	d038      	beq.n	80098ac <_svfiprintf_r+0x1d8>
 800983a:	4b23      	ldr	r3, [pc, #140]	; (80098c8 <_svfiprintf_r+0x1f4>)
 800983c:	bb1b      	cbnz	r3, 8009886 <_svfiprintf_r+0x1b2>
 800983e:	9b03      	ldr	r3, [sp, #12]
 8009840:	3307      	adds	r3, #7
 8009842:	f023 0307 	bic.w	r3, r3, #7
 8009846:	3308      	adds	r3, #8
 8009848:	9303      	str	r3, [sp, #12]
 800984a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800984c:	4433      	add	r3, r6
 800984e:	9309      	str	r3, [sp, #36]	; 0x24
 8009850:	e767      	b.n	8009722 <_svfiprintf_r+0x4e>
 8009852:	fb0c 3202 	mla	r2, ip, r2, r3
 8009856:	460c      	mov	r4, r1
 8009858:	2001      	movs	r0, #1
 800985a:	e7a5      	b.n	80097a8 <_svfiprintf_r+0xd4>
 800985c:	2300      	movs	r3, #0
 800985e:	3401      	adds	r4, #1
 8009860:	9305      	str	r3, [sp, #20]
 8009862:	4619      	mov	r1, r3
 8009864:	f04f 0c0a 	mov.w	ip, #10
 8009868:	4620      	mov	r0, r4
 800986a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800986e:	3a30      	subs	r2, #48	; 0x30
 8009870:	2a09      	cmp	r2, #9
 8009872:	d903      	bls.n	800987c <_svfiprintf_r+0x1a8>
 8009874:	2b00      	cmp	r3, #0
 8009876:	d0c5      	beq.n	8009804 <_svfiprintf_r+0x130>
 8009878:	9105      	str	r1, [sp, #20]
 800987a:	e7c3      	b.n	8009804 <_svfiprintf_r+0x130>
 800987c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009880:	4604      	mov	r4, r0
 8009882:	2301      	movs	r3, #1
 8009884:	e7f0      	b.n	8009868 <_svfiprintf_r+0x194>
 8009886:	ab03      	add	r3, sp, #12
 8009888:	9300      	str	r3, [sp, #0]
 800988a:	462a      	mov	r2, r5
 800988c:	4b0f      	ldr	r3, [pc, #60]	; (80098cc <_svfiprintf_r+0x1f8>)
 800988e:	a904      	add	r1, sp, #16
 8009890:	4638      	mov	r0, r7
 8009892:	f3af 8000 	nop.w
 8009896:	1c42      	adds	r2, r0, #1
 8009898:	4606      	mov	r6, r0
 800989a:	d1d6      	bne.n	800984a <_svfiprintf_r+0x176>
 800989c:	89ab      	ldrh	r3, [r5, #12]
 800989e:	065b      	lsls	r3, r3, #25
 80098a0:	f53f af2c 	bmi.w	80096fc <_svfiprintf_r+0x28>
 80098a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80098a6:	b01d      	add	sp, #116	; 0x74
 80098a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098ac:	ab03      	add	r3, sp, #12
 80098ae:	9300      	str	r3, [sp, #0]
 80098b0:	462a      	mov	r2, r5
 80098b2:	4b06      	ldr	r3, [pc, #24]	; (80098cc <_svfiprintf_r+0x1f8>)
 80098b4:	a904      	add	r1, sp, #16
 80098b6:	4638      	mov	r0, r7
 80098b8:	f000 f87a 	bl	80099b0 <_printf_i>
 80098bc:	e7eb      	b.n	8009896 <_svfiprintf_r+0x1c2>
 80098be:	bf00      	nop
 80098c0:	0800a88c 	.word	0x0800a88c
 80098c4:	0800a896 	.word	0x0800a896
 80098c8:	00000000 	.word	0x00000000
 80098cc:	0800961d 	.word	0x0800961d
 80098d0:	0800a892 	.word	0x0800a892

080098d4 <_printf_common>:
 80098d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098d8:	4616      	mov	r6, r2
 80098da:	4699      	mov	r9, r3
 80098dc:	688a      	ldr	r2, [r1, #8]
 80098de:	690b      	ldr	r3, [r1, #16]
 80098e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80098e4:	4293      	cmp	r3, r2
 80098e6:	bfb8      	it	lt
 80098e8:	4613      	movlt	r3, r2
 80098ea:	6033      	str	r3, [r6, #0]
 80098ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80098f0:	4607      	mov	r7, r0
 80098f2:	460c      	mov	r4, r1
 80098f4:	b10a      	cbz	r2, 80098fa <_printf_common+0x26>
 80098f6:	3301      	adds	r3, #1
 80098f8:	6033      	str	r3, [r6, #0]
 80098fa:	6823      	ldr	r3, [r4, #0]
 80098fc:	0699      	lsls	r1, r3, #26
 80098fe:	bf42      	ittt	mi
 8009900:	6833      	ldrmi	r3, [r6, #0]
 8009902:	3302      	addmi	r3, #2
 8009904:	6033      	strmi	r3, [r6, #0]
 8009906:	6825      	ldr	r5, [r4, #0]
 8009908:	f015 0506 	ands.w	r5, r5, #6
 800990c:	d106      	bne.n	800991c <_printf_common+0x48>
 800990e:	f104 0a19 	add.w	sl, r4, #25
 8009912:	68e3      	ldr	r3, [r4, #12]
 8009914:	6832      	ldr	r2, [r6, #0]
 8009916:	1a9b      	subs	r3, r3, r2
 8009918:	42ab      	cmp	r3, r5
 800991a:	dc26      	bgt.n	800996a <_printf_common+0x96>
 800991c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009920:	1e13      	subs	r3, r2, #0
 8009922:	6822      	ldr	r2, [r4, #0]
 8009924:	bf18      	it	ne
 8009926:	2301      	movne	r3, #1
 8009928:	0692      	lsls	r2, r2, #26
 800992a:	d42b      	bmi.n	8009984 <_printf_common+0xb0>
 800992c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009930:	4649      	mov	r1, r9
 8009932:	4638      	mov	r0, r7
 8009934:	47c0      	blx	r8
 8009936:	3001      	adds	r0, #1
 8009938:	d01e      	beq.n	8009978 <_printf_common+0xa4>
 800993a:	6823      	ldr	r3, [r4, #0]
 800993c:	68e5      	ldr	r5, [r4, #12]
 800993e:	6832      	ldr	r2, [r6, #0]
 8009940:	f003 0306 	and.w	r3, r3, #6
 8009944:	2b04      	cmp	r3, #4
 8009946:	bf08      	it	eq
 8009948:	1aad      	subeq	r5, r5, r2
 800994a:	68a3      	ldr	r3, [r4, #8]
 800994c:	6922      	ldr	r2, [r4, #16]
 800994e:	bf0c      	ite	eq
 8009950:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009954:	2500      	movne	r5, #0
 8009956:	4293      	cmp	r3, r2
 8009958:	bfc4      	itt	gt
 800995a:	1a9b      	subgt	r3, r3, r2
 800995c:	18ed      	addgt	r5, r5, r3
 800995e:	2600      	movs	r6, #0
 8009960:	341a      	adds	r4, #26
 8009962:	42b5      	cmp	r5, r6
 8009964:	d11a      	bne.n	800999c <_printf_common+0xc8>
 8009966:	2000      	movs	r0, #0
 8009968:	e008      	b.n	800997c <_printf_common+0xa8>
 800996a:	2301      	movs	r3, #1
 800996c:	4652      	mov	r2, sl
 800996e:	4649      	mov	r1, r9
 8009970:	4638      	mov	r0, r7
 8009972:	47c0      	blx	r8
 8009974:	3001      	adds	r0, #1
 8009976:	d103      	bne.n	8009980 <_printf_common+0xac>
 8009978:	f04f 30ff 	mov.w	r0, #4294967295
 800997c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009980:	3501      	adds	r5, #1
 8009982:	e7c6      	b.n	8009912 <_printf_common+0x3e>
 8009984:	18e1      	adds	r1, r4, r3
 8009986:	1c5a      	adds	r2, r3, #1
 8009988:	2030      	movs	r0, #48	; 0x30
 800998a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800998e:	4422      	add	r2, r4
 8009990:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009994:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009998:	3302      	adds	r3, #2
 800999a:	e7c7      	b.n	800992c <_printf_common+0x58>
 800999c:	2301      	movs	r3, #1
 800999e:	4622      	mov	r2, r4
 80099a0:	4649      	mov	r1, r9
 80099a2:	4638      	mov	r0, r7
 80099a4:	47c0      	blx	r8
 80099a6:	3001      	adds	r0, #1
 80099a8:	d0e6      	beq.n	8009978 <_printf_common+0xa4>
 80099aa:	3601      	adds	r6, #1
 80099ac:	e7d9      	b.n	8009962 <_printf_common+0x8e>
	...

080099b0 <_printf_i>:
 80099b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80099b4:	7e0f      	ldrb	r7, [r1, #24]
 80099b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80099b8:	2f78      	cmp	r7, #120	; 0x78
 80099ba:	4691      	mov	r9, r2
 80099bc:	4680      	mov	r8, r0
 80099be:	460c      	mov	r4, r1
 80099c0:	469a      	mov	sl, r3
 80099c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80099c6:	d807      	bhi.n	80099d8 <_printf_i+0x28>
 80099c8:	2f62      	cmp	r7, #98	; 0x62
 80099ca:	d80a      	bhi.n	80099e2 <_printf_i+0x32>
 80099cc:	2f00      	cmp	r7, #0
 80099ce:	f000 80d8 	beq.w	8009b82 <_printf_i+0x1d2>
 80099d2:	2f58      	cmp	r7, #88	; 0x58
 80099d4:	f000 80a3 	beq.w	8009b1e <_printf_i+0x16e>
 80099d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80099dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80099e0:	e03a      	b.n	8009a58 <_printf_i+0xa8>
 80099e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80099e6:	2b15      	cmp	r3, #21
 80099e8:	d8f6      	bhi.n	80099d8 <_printf_i+0x28>
 80099ea:	a101      	add	r1, pc, #4	; (adr r1, 80099f0 <_printf_i+0x40>)
 80099ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80099f0:	08009a49 	.word	0x08009a49
 80099f4:	08009a5d 	.word	0x08009a5d
 80099f8:	080099d9 	.word	0x080099d9
 80099fc:	080099d9 	.word	0x080099d9
 8009a00:	080099d9 	.word	0x080099d9
 8009a04:	080099d9 	.word	0x080099d9
 8009a08:	08009a5d 	.word	0x08009a5d
 8009a0c:	080099d9 	.word	0x080099d9
 8009a10:	080099d9 	.word	0x080099d9
 8009a14:	080099d9 	.word	0x080099d9
 8009a18:	080099d9 	.word	0x080099d9
 8009a1c:	08009b69 	.word	0x08009b69
 8009a20:	08009a8d 	.word	0x08009a8d
 8009a24:	08009b4b 	.word	0x08009b4b
 8009a28:	080099d9 	.word	0x080099d9
 8009a2c:	080099d9 	.word	0x080099d9
 8009a30:	08009b8b 	.word	0x08009b8b
 8009a34:	080099d9 	.word	0x080099d9
 8009a38:	08009a8d 	.word	0x08009a8d
 8009a3c:	080099d9 	.word	0x080099d9
 8009a40:	080099d9 	.word	0x080099d9
 8009a44:	08009b53 	.word	0x08009b53
 8009a48:	682b      	ldr	r3, [r5, #0]
 8009a4a:	1d1a      	adds	r2, r3, #4
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	602a      	str	r2, [r5, #0]
 8009a50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009a54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009a58:	2301      	movs	r3, #1
 8009a5a:	e0a3      	b.n	8009ba4 <_printf_i+0x1f4>
 8009a5c:	6820      	ldr	r0, [r4, #0]
 8009a5e:	6829      	ldr	r1, [r5, #0]
 8009a60:	0606      	lsls	r6, r0, #24
 8009a62:	f101 0304 	add.w	r3, r1, #4
 8009a66:	d50a      	bpl.n	8009a7e <_printf_i+0xce>
 8009a68:	680e      	ldr	r6, [r1, #0]
 8009a6a:	602b      	str	r3, [r5, #0]
 8009a6c:	2e00      	cmp	r6, #0
 8009a6e:	da03      	bge.n	8009a78 <_printf_i+0xc8>
 8009a70:	232d      	movs	r3, #45	; 0x2d
 8009a72:	4276      	negs	r6, r6
 8009a74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a78:	485e      	ldr	r0, [pc, #376]	; (8009bf4 <_printf_i+0x244>)
 8009a7a:	230a      	movs	r3, #10
 8009a7c:	e019      	b.n	8009ab2 <_printf_i+0x102>
 8009a7e:	680e      	ldr	r6, [r1, #0]
 8009a80:	602b      	str	r3, [r5, #0]
 8009a82:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009a86:	bf18      	it	ne
 8009a88:	b236      	sxthne	r6, r6
 8009a8a:	e7ef      	b.n	8009a6c <_printf_i+0xbc>
 8009a8c:	682b      	ldr	r3, [r5, #0]
 8009a8e:	6820      	ldr	r0, [r4, #0]
 8009a90:	1d19      	adds	r1, r3, #4
 8009a92:	6029      	str	r1, [r5, #0]
 8009a94:	0601      	lsls	r1, r0, #24
 8009a96:	d501      	bpl.n	8009a9c <_printf_i+0xec>
 8009a98:	681e      	ldr	r6, [r3, #0]
 8009a9a:	e002      	b.n	8009aa2 <_printf_i+0xf2>
 8009a9c:	0646      	lsls	r6, r0, #25
 8009a9e:	d5fb      	bpl.n	8009a98 <_printf_i+0xe8>
 8009aa0:	881e      	ldrh	r6, [r3, #0]
 8009aa2:	4854      	ldr	r0, [pc, #336]	; (8009bf4 <_printf_i+0x244>)
 8009aa4:	2f6f      	cmp	r7, #111	; 0x6f
 8009aa6:	bf0c      	ite	eq
 8009aa8:	2308      	moveq	r3, #8
 8009aaa:	230a      	movne	r3, #10
 8009aac:	2100      	movs	r1, #0
 8009aae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009ab2:	6865      	ldr	r5, [r4, #4]
 8009ab4:	60a5      	str	r5, [r4, #8]
 8009ab6:	2d00      	cmp	r5, #0
 8009ab8:	bfa2      	ittt	ge
 8009aba:	6821      	ldrge	r1, [r4, #0]
 8009abc:	f021 0104 	bicge.w	r1, r1, #4
 8009ac0:	6021      	strge	r1, [r4, #0]
 8009ac2:	b90e      	cbnz	r6, 8009ac8 <_printf_i+0x118>
 8009ac4:	2d00      	cmp	r5, #0
 8009ac6:	d04d      	beq.n	8009b64 <_printf_i+0x1b4>
 8009ac8:	4615      	mov	r5, r2
 8009aca:	fbb6 f1f3 	udiv	r1, r6, r3
 8009ace:	fb03 6711 	mls	r7, r3, r1, r6
 8009ad2:	5dc7      	ldrb	r7, [r0, r7]
 8009ad4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009ad8:	4637      	mov	r7, r6
 8009ada:	42bb      	cmp	r3, r7
 8009adc:	460e      	mov	r6, r1
 8009ade:	d9f4      	bls.n	8009aca <_printf_i+0x11a>
 8009ae0:	2b08      	cmp	r3, #8
 8009ae2:	d10b      	bne.n	8009afc <_printf_i+0x14c>
 8009ae4:	6823      	ldr	r3, [r4, #0]
 8009ae6:	07de      	lsls	r6, r3, #31
 8009ae8:	d508      	bpl.n	8009afc <_printf_i+0x14c>
 8009aea:	6923      	ldr	r3, [r4, #16]
 8009aec:	6861      	ldr	r1, [r4, #4]
 8009aee:	4299      	cmp	r1, r3
 8009af0:	bfde      	ittt	le
 8009af2:	2330      	movle	r3, #48	; 0x30
 8009af4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009af8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009afc:	1b52      	subs	r2, r2, r5
 8009afe:	6122      	str	r2, [r4, #16]
 8009b00:	f8cd a000 	str.w	sl, [sp]
 8009b04:	464b      	mov	r3, r9
 8009b06:	aa03      	add	r2, sp, #12
 8009b08:	4621      	mov	r1, r4
 8009b0a:	4640      	mov	r0, r8
 8009b0c:	f7ff fee2 	bl	80098d4 <_printf_common>
 8009b10:	3001      	adds	r0, #1
 8009b12:	d14c      	bne.n	8009bae <_printf_i+0x1fe>
 8009b14:	f04f 30ff 	mov.w	r0, #4294967295
 8009b18:	b004      	add	sp, #16
 8009b1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b1e:	4835      	ldr	r0, [pc, #212]	; (8009bf4 <_printf_i+0x244>)
 8009b20:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009b24:	6829      	ldr	r1, [r5, #0]
 8009b26:	6823      	ldr	r3, [r4, #0]
 8009b28:	f851 6b04 	ldr.w	r6, [r1], #4
 8009b2c:	6029      	str	r1, [r5, #0]
 8009b2e:	061d      	lsls	r5, r3, #24
 8009b30:	d514      	bpl.n	8009b5c <_printf_i+0x1ac>
 8009b32:	07df      	lsls	r7, r3, #31
 8009b34:	bf44      	itt	mi
 8009b36:	f043 0320 	orrmi.w	r3, r3, #32
 8009b3a:	6023      	strmi	r3, [r4, #0]
 8009b3c:	b91e      	cbnz	r6, 8009b46 <_printf_i+0x196>
 8009b3e:	6823      	ldr	r3, [r4, #0]
 8009b40:	f023 0320 	bic.w	r3, r3, #32
 8009b44:	6023      	str	r3, [r4, #0]
 8009b46:	2310      	movs	r3, #16
 8009b48:	e7b0      	b.n	8009aac <_printf_i+0xfc>
 8009b4a:	6823      	ldr	r3, [r4, #0]
 8009b4c:	f043 0320 	orr.w	r3, r3, #32
 8009b50:	6023      	str	r3, [r4, #0]
 8009b52:	2378      	movs	r3, #120	; 0x78
 8009b54:	4828      	ldr	r0, [pc, #160]	; (8009bf8 <_printf_i+0x248>)
 8009b56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009b5a:	e7e3      	b.n	8009b24 <_printf_i+0x174>
 8009b5c:	0659      	lsls	r1, r3, #25
 8009b5e:	bf48      	it	mi
 8009b60:	b2b6      	uxthmi	r6, r6
 8009b62:	e7e6      	b.n	8009b32 <_printf_i+0x182>
 8009b64:	4615      	mov	r5, r2
 8009b66:	e7bb      	b.n	8009ae0 <_printf_i+0x130>
 8009b68:	682b      	ldr	r3, [r5, #0]
 8009b6a:	6826      	ldr	r6, [r4, #0]
 8009b6c:	6961      	ldr	r1, [r4, #20]
 8009b6e:	1d18      	adds	r0, r3, #4
 8009b70:	6028      	str	r0, [r5, #0]
 8009b72:	0635      	lsls	r5, r6, #24
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	d501      	bpl.n	8009b7c <_printf_i+0x1cc>
 8009b78:	6019      	str	r1, [r3, #0]
 8009b7a:	e002      	b.n	8009b82 <_printf_i+0x1d2>
 8009b7c:	0670      	lsls	r0, r6, #25
 8009b7e:	d5fb      	bpl.n	8009b78 <_printf_i+0x1c8>
 8009b80:	8019      	strh	r1, [r3, #0]
 8009b82:	2300      	movs	r3, #0
 8009b84:	6123      	str	r3, [r4, #16]
 8009b86:	4615      	mov	r5, r2
 8009b88:	e7ba      	b.n	8009b00 <_printf_i+0x150>
 8009b8a:	682b      	ldr	r3, [r5, #0]
 8009b8c:	1d1a      	adds	r2, r3, #4
 8009b8e:	602a      	str	r2, [r5, #0]
 8009b90:	681d      	ldr	r5, [r3, #0]
 8009b92:	6862      	ldr	r2, [r4, #4]
 8009b94:	2100      	movs	r1, #0
 8009b96:	4628      	mov	r0, r5
 8009b98:	f7f6 fb1a 	bl	80001d0 <memchr>
 8009b9c:	b108      	cbz	r0, 8009ba2 <_printf_i+0x1f2>
 8009b9e:	1b40      	subs	r0, r0, r5
 8009ba0:	6060      	str	r0, [r4, #4]
 8009ba2:	6863      	ldr	r3, [r4, #4]
 8009ba4:	6123      	str	r3, [r4, #16]
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009bac:	e7a8      	b.n	8009b00 <_printf_i+0x150>
 8009bae:	6923      	ldr	r3, [r4, #16]
 8009bb0:	462a      	mov	r2, r5
 8009bb2:	4649      	mov	r1, r9
 8009bb4:	4640      	mov	r0, r8
 8009bb6:	47d0      	blx	sl
 8009bb8:	3001      	adds	r0, #1
 8009bba:	d0ab      	beq.n	8009b14 <_printf_i+0x164>
 8009bbc:	6823      	ldr	r3, [r4, #0]
 8009bbe:	079b      	lsls	r3, r3, #30
 8009bc0:	d413      	bmi.n	8009bea <_printf_i+0x23a>
 8009bc2:	68e0      	ldr	r0, [r4, #12]
 8009bc4:	9b03      	ldr	r3, [sp, #12]
 8009bc6:	4298      	cmp	r0, r3
 8009bc8:	bfb8      	it	lt
 8009bca:	4618      	movlt	r0, r3
 8009bcc:	e7a4      	b.n	8009b18 <_printf_i+0x168>
 8009bce:	2301      	movs	r3, #1
 8009bd0:	4632      	mov	r2, r6
 8009bd2:	4649      	mov	r1, r9
 8009bd4:	4640      	mov	r0, r8
 8009bd6:	47d0      	blx	sl
 8009bd8:	3001      	adds	r0, #1
 8009bda:	d09b      	beq.n	8009b14 <_printf_i+0x164>
 8009bdc:	3501      	adds	r5, #1
 8009bde:	68e3      	ldr	r3, [r4, #12]
 8009be0:	9903      	ldr	r1, [sp, #12]
 8009be2:	1a5b      	subs	r3, r3, r1
 8009be4:	42ab      	cmp	r3, r5
 8009be6:	dcf2      	bgt.n	8009bce <_printf_i+0x21e>
 8009be8:	e7eb      	b.n	8009bc2 <_printf_i+0x212>
 8009bea:	2500      	movs	r5, #0
 8009bec:	f104 0619 	add.w	r6, r4, #25
 8009bf0:	e7f5      	b.n	8009bde <_printf_i+0x22e>
 8009bf2:	bf00      	nop
 8009bf4:	0800a89d 	.word	0x0800a89d
 8009bf8:	0800a8ae 	.word	0x0800a8ae

08009bfc <__retarget_lock_acquire_recursive>:
 8009bfc:	4770      	bx	lr

08009bfe <__retarget_lock_release_recursive>:
 8009bfe:	4770      	bx	lr

08009c00 <memmove>:
 8009c00:	4288      	cmp	r0, r1
 8009c02:	b510      	push	{r4, lr}
 8009c04:	eb01 0402 	add.w	r4, r1, r2
 8009c08:	d902      	bls.n	8009c10 <memmove+0x10>
 8009c0a:	4284      	cmp	r4, r0
 8009c0c:	4623      	mov	r3, r4
 8009c0e:	d807      	bhi.n	8009c20 <memmove+0x20>
 8009c10:	1e43      	subs	r3, r0, #1
 8009c12:	42a1      	cmp	r1, r4
 8009c14:	d008      	beq.n	8009c28 <memmove+0x28>
 8009c16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009c1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009c1e:	e7f8      	b.n	8009c12 <memmove+0x12>
 8009c20:	4402      	add	r2, r0
 8009c22:	4601      	mov	r1, r0
 8009c24:	428a      	cmp	r2, r1
 8009c26:	d100      	bne.n	8009c2a <memmove+0x2a>
 8009c28:	bd10      	pop	{r4, pc}
 8009c2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009c2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009c32:	e7f7      	b.n	8009c24 <memmove+0x24>

08009c34 <_realloc_r>:
 8009c34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c38:	4680      	mov	r8, r0
 8009c3a:	4614      	mov	r4, r2
 8009c3c:	460e      	mov	r6, r1
 8009c3e:	b921      	cbnz	r1, 8009c4a <_realloc_r+0x16>
 8009c40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009c44:	4611      	mov	r1, r2
 8009c46:	f7ff bc39 	b.w	80094bc <_malloc_r>
 8009c4a:	b92a      	cbnz	r2, 8009c58 <_realloc_r+0x24>
 8009c4c:	f7ff fbca 	bl	80093e4 <_free_r>
 8009c50:	4625      	mov	r5, r4
 8009c52:	4628      	mov	r0, r5
 8009c54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c58:	f000 f81b 	bl	8009c92 <_malloc_usable_size_r>
 8009c5c:	4284      	cmp	r4, r0
 8009c5e:	4607      	mov	r7, r0
 8009c60:	d802      	bhi.n	8009c68 <_realloc_r+0x34>
 8009c62:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009c66:	d812      	bhi.n	8009c8e <_realloc_r+0x5a>
 8009c68:	4621      	mov	r1, r4
 8009c6a:	4640      	mov	r0, r8
 8009c6c:	f7ff fc26 	bl	80094bc <_malloc_r>
 8009c70:	4605      	mov	r5, r0
 8009c72:	2800      	cmp	r0, #0
 8009c74:	d0ed      	beq.n	8009c52 <_realloc_r+0x1e>
 8009c76:	42bc      	cmp	r4, r7
 8009c78:	4622      	mov	r2, r4
 8009c7a:	4631      	mov	r1, r6
 8009c7c:	bf28      	it	cs
 8009c7e:	463a      	movcs	r2, r7
 8009c80:	f7ff fb9a 	bl	80093b8 <memcpy>
 8009c84:	4631      	mov	r1, r6
 8009c86:	4640      	mov	r0, r8
 8009c88:	f7ff fbac 	bl	80093e4 <_free_r>
 8009c8c:	e7e1      	b.n	8009c52 <_realloc_r+0x1e>
 8009c8e:	4635      	mov	r5, r6
 8009c90:	e7df      	b.n	8009c52 <_realloc_r+0x1e>

08009c92 <_malloc_usable_size_r>:
 8009c92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c96:	1f18      	subs	r0, r3, #4
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	bfbc      	itt	lt
 8009c9c:	580b      	ldrlt	r3, [r1, r0]
 8009c9e:	18c0      	addlt	r0, r0, r3
 8009ca0:	4770      	bx	lr
	...

08009ca4 <_init>:
 8009ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ca6:	bf00      	nop
 8009ca8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009caa:	bc08      	pop	{r3}
 8009cac:	469e      	mov	lr, r3
 8009cae:	4770      	bx	lr

08009cb0 <_fini>:
 8009cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cb2:	bf00      	nop
 8009cb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cb6:	bc08      	pop	{r3}
 8009cb8:	469e      	mov	lr, r3
 8009cba:	4770      	bx	lr
