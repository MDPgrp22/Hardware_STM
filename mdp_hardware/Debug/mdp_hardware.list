
mdp_hardware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d1c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bc0  08009eac  08009eac  00019eac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aa6c  0800aa6c  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  0800aa6c  0800aa6c  0001aa6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aa74  0800aa74  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aa74  0800aa74  0001aa74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aa78  0800aa78  0001aa78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800aa7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020080  2**0
                  CONTENTS
 10 .bss          00004fac  20000080  20000080  00020080  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000502c  2000502c  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c298  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003986  00000000  00000000  0003c348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018b0  00000000  00000000  0003fcd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001760  00000000  00000000  00041580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004b85  00000000  00000000  00042ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001dc28  00000000  00000000  00047865  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d8dba  00000000  00000000  0006548d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013e247  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006dfc  00000000  00000000  0013e298  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009e94 	.word	0x08009e94

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	08009e94 	.word	0x08009e94

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2iz>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d215      	bcs.n	8000a42 <__aeabi_d2iz+0x36>
 8000a16:	d511      	bpl.n	8000a3c <__aeabi_d2iz+0x30>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d912      	bls.n	8000a48 <__aeabi_d2iz+0x3c>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a32:	fa23 f002 	lsr.w	r0, r3, r2
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	4770      	bx	lr
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a46:	d105      	bne.n	8000a54 <__aeabi_d2iz+0x48>
 8000a48:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	bf08      	it	eq
 8000a4e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <__aeabi_d2uiz>:
 8000a5c:	004a      	lsls	r2, r1, #1
 8000a5e:	d211      	bcs.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a64:	d211      	bcs.n	8000a8a <__aeabi_d2uiz+0x2e>
 8000a66:	d50d      	bpl.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d40e      	bmi.n	8000a90 <__aeabi_d2uiz+0x34>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a8e:	d102      	bne.n	8000a96 <__aeabi_d2uiz+0x3a>
 8000a90:	f04f 30ff 	mov.w	r0, #4294967295
 8000a94:	4770      	bx	lr
 8000a96:	f04f 0000 	mov.w	r0, #0
 8000a9a:	4770      	bx	lr

08000a9c <__aeabi_uldivmod>:
 8000a9c:	b953      	cbnz	r3, 8000ab4 <__aeabi_uldivmod+0x18>
 8000a9e:	b94a      	cbnz	r2, 8000ab4 <__aeabi_uldivmod+0x18>
 8000aa0:	2900      	cmp	r1, #0
 8000aa2:	bf08      	it	eq
 8000aa4:	2800      	cmpeq	r0, #0
 8000aa6:	bf1c      	itt	ne
 8000aa8:	f04f 31ff 	movne.w	r1, #4294967295
 8000aac:	f04f 30ff 	movne.w	r0, #4294967295
 8000ab0:	f000 b974 	b.w	8000d9c <__aeabi_idiv0>
 8000ab4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000abc:	f000 f806 	bl	8000acc <__udivmoddi4>
 8000ac0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ac4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac8:	b004      	add	sp, #16
 8000aca:	4770      	bx	lr

08000acc <__udivmoddi4>:
 8000acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ad0:	9d08      	ldr	r5, [sp, #32]
 8000ad2:	4604      	mov	r4, r0
 8000ad4:	468e      	mov	lr, r1
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d14d      	bne.n	8000b76 <__udivmoddi4+0xaa>
 8000ada:	428a      	cmp	r2, r1
 8000adc:	4694      	mov	ip, r2
 8000ade:	d969      	bls.n	8000bb4 <__udivmoddi4+0xe8>
 8000ae0:	fab2 f282 	clz	r2, r2
 8000ae4:	b152      	cbz	r2, 8000afc <__udivmoddi4+0x30>
 8000ae6:	fa01 f302 	lsl.w	r3, r1, r2
 8000aea:	f1c2 0120 	rsb	r1, r2, #32
 8000aee:	fa20 f101 	lsr.w	r1, r0, r1
 8000af2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000af6:	ea41 0e03 	orr.w	lr, r1, r3
 8000afa:	4094      	lsls	r4, r2
 8000afc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b00:	0c21      	lsrs	r1, r4, #16
 8000b02:	fbbe f6f8 	udiv	r6, lr, r8
 8000b06:	fa1f f78c 	uxth.w	r7, ip
 8000b0a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b0e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b12:	fb06 f107 	mul.w	r1, r6, r7
 8000b16:	4299      	cmp	r1, r3
 8000b18:	d90a      	bls.n	8000b30 <__udivmoddi4+0x64>
 8000b1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b1e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b22:	f080 811f 	bcs.w	8000d64 <__udivmoddi4+0x298>
 8000b26:	4299      	cmp	r1, r3
 8000b28:	f240 811c 	bls.w	8000d64 <__udivmoddi4+0x298>
 8000b2c:	3e02      	subs	r6, #2
 8000b2e:	4463      	add	r3, ip
 8000b30:	1a5b      	subs	r3, r3, r1
 8000b32:	b2a4      	uxth	r4, r4
 8000b34:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b38:	fb08 3310 	mls	r3, r8, r0, r3
 8000b3c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b40:	fb00 f707 	mul.w	r7, r0, r7
 8000b44:	42a7      	cmp	r7, r4
 8000b46:	d90a      	bls.n	8000b5e <__udivmoddi4+0x92>
 8000b48:	eb1c 0404 	adds.w	r4, ip, r4
 8000b4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b50:	f080 810a 	bcs.w	8000d68 <__udivmoddi4+0x29c>
 8000b54:	42a7      	cmp	r7, r4
 8000b56:	f240 8107 	bls.w	8000d68 <__udivmoddi4+0x29c>
 8000b5a:	4464      	add	r4, ip
 8000b5c:	3802      	subs	r0, #2
 8000b5e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b62:	1be4      	subs	r4, r4, r7
 8000b64:	2600      	movs	r6, #0
 8000b66:	b11d      	cbz	r5, 8000b70 <__udivmoddi4+0xa4>
 8000b68:	40d4      	lsrs	r4, r2
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b70:	4631      	mov	r1, r6
 8000b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b76:	428b      	cmp	r3, r1
 8000b78:	d909      	bls.n	8000b8e <__udivmoddi4+0xc2>
 8000b7a:	2d00      	cmp	r5, #0
 8000b7c:	f000 80ef 	beq.w	8000d5e <__udivmoddi4+0x292>
 8000b80:	2600      	movs	r6, #0
 8000b82:	e9c5 0100 	strd	r0, r1, [r5]
 8000b86:	4630      	mov	r0, r6
 8000b88:	4631      	mov	r1, r6
 8000b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b8e:	fab3 f683 	clz	r6, r3
 8000b92:	2e00      	cmp	r6, #0
 8000b94:	d14a      	bne.n	8000c2c <__udivmoddi4+0x160>
 8000b96:	428b      	cmp	r3, r1
 8000b98:	d302      	bcc.n	8000ba0 <__udivmoddi4+0xd4>
 8000b9a:	4282      	cmp	r2, r0
 8000b9c:	f200 80f9 	bhi.w	8000d92 <__udivmoddi4+0x2c6>
 8000ba0:	1a84      	subs	r4, r0, r2
 8000ba2:	eb61 0303 	sbc.w	r3, r1, r3
 8000ba6:	2001      	movs	r0, #1
 8000ba8:	469e      	mov	lr, r3
 8000baa:	2d00      	cmp	r5, #0
 8000bac:	d0e0      	beq.n	8000b70 <__udivmoddi4+0xa4>
 8000bae:	e9c5 4e00 	strd	r4, lr, [r5]
 8000bb2:	e7dd      	b.n	8000b70 <__udivmoddi4+0xa4>
 8000bb4:	b902      	cbnz	r2, 8000bb8 <__udivmoddi4+0xec>
 8000bb6:	deff      	udf	#255	; 0xff
 8000bb8:	fab2 f282 	clz	r2, r2
 8000bbc:	2a00      	cmp	r2, #0
 8000bbe:	f040 8092 	bne.w	8000ce6 <__udivmoddi4+0x21a>
 8000bc2:	eba1 010c 	sub.w	r1, r1, ip
 8000bc6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bca:	fa1f fe8c 	uxth.w	lr, ip
 8000bce:	2601      	movs	r6, #1
 8000bd0:	0c20      	lsrs	r0, r4, #16
 8000bd2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000bd6:	fb07 1113 	mls	r1, r7, r3, r1
 8000bda:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bde:	fb0e f003 	mul.w	r0, lr, r3
 8000be2:	4288      	cmp	r0, r1
 8000be4:	d908      	bls.n	8000bf8 <__udivmoddi4+0x12c>
 8000be6:	eb1c 0101 	adds.w	r1, ip, r1
 8000bea:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bee:	d202      	bcs.n	8000bf6 <__udivmoddi4+0x12a>
 8000bf0:	4288      	cmp	r0, r1
 8000bf2:	f200 80cb 	bhi.w	8000d8c <__udivmoddi4+0x2c0>
 8000bf6:	4643      	mov	r3, r8
 8000bf8:	1a09      	subs	r1, r1, r0
 8000bfa:	b2a4      	uxth	r4, r4
 8000bfc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c00:	fb07 1110 	mls	r1, r7, r0, r1
 8000c04:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c08:	fb0e fe00 	mul.w	lr, lr, r0
 8000c0c:	45a6      	cmp	lr, r4
 8000c0e:	d908      	bls.n	8000c22 <__udivmoddi4+0x156>
 8000c10:	eb1c 0404 	adds.w	r4, ip, r4
 8000c14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c18:	d202      	bcs.n	8000c20 <__udivmoddi4+0x154>
 8000c1a:	45a6      	cmp	lr, r4
 8000c1c:	f200 80bb 	bhi.w	8000d96 <__udivmoddi4+0x2ca>
 8000c20:	4608      	mov	r0, r1
 8000c22:	eba4 040e 	sub.w	r4, r4, lr
 8000c26:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c2a:	e79c      	b.n	8000b66 <__udivmoddi4+0x9a>
 8000c2c:	f1c6 0720 	rsb	r7, r6, #32
 8000c30:	40b3      	lsls	r3, r6
 8000c32:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c36:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c3a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c3e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c42:	431c      	orrs	r4, r3
 8000c44:	40f9      	lsrs	r1, r7
 8000c46:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c4a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c4e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c52:	0c20      	lsrs	r0, r4, #16
 8000c54:	fa1f fe8c 	uxth.w	lr, ip
 8000c58:	fb09 1118 	mls	r1, r9, r8, r1
 8000c5c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c60:	fb08 f00e 	mul.w	r0, r8, lr
 8000c64:	4288      	cmp	r0, r1
 8000c66:	fa02 f206 	lsl.w	r2, r2, r6
 8000c6a:	d90b      	bls.n	8000c84 <__udivmoddi4+0x1b8>
 8000c6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c70:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c74:	f080 8088 	bcs.w	8000d88 <__udivmoddi4+0x2bc>
 8000c78:	4288      	cmp	r0, r1
 8000c7a:	f240 8085 	bls.w	8000d88 <__udivmoddi4+0x2bc>
 8000c7e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c82:	4461      	add	r1, ip
 8000c84:	1a09      	subs	r1, r1, r0
 8000c86:	b2a4      	uxth	r4, r4
 8000c88:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c8c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c90:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c98:	458e      	cmp	lr, r1
 8000c9a:	d908      	bls.n	8000cae <__udivmoddi4+0x1e2>
 8000c9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000ca0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ca4:	d26c      	bcs.n	8000d80 <__udivmoddi4+0x2b4>
 8000ca6:	458e      	cmp	lr, r1
 8000ca8:	d96a      	bls.n	8000d80 <__udivmoddi4+0x2b4>
 8000caa:	3802      	subs	r0, #2
 8000cac:	4461      	add	r1, ip
 8000cae:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cb2:	fba0 9402 	umull	r9, r4, r0, r2
 8000cb6:	eba1 010e 	sub.w	r1, r1, lr
 8000cba:	42a1      	cmp	r1, r4
 8000cbc:	46c8      	mov	r8, r9
 8000cbe:	46a6      	mov	lr, r4
 8000cc0:	d356      	bcc.n	8000d70 <__udivmoddi4+0x2a4>
 8000cc2:	d053      	beq.n	8000d6c <__udivmoddi4+0x2a0>
 8000cc4:	b15d      	cbz	r5, 8000cde <__udivmoddi4+0x212>
 8000cc6:	ebb3 0208 	subs.w	r2, r3, r8
 8000cca:	eb61 010e 	sbc.w	r1, r1, lr
 8000cce:	fa01 f707 	lsl.w	r7, r1, r7
 8000cd2:	fa22 f306 	lsr.w	r3, r2, r6
 8000cd6:	40f1      	lsrs	r1, r6
 8000cd8:	431f      	orrs	r7, r3
 8000cda:	e9c5 7100 	strd	r7, r1, [r5]
 8000cde:	2600      	movs	r6, #0
 8000ce0:	4631      	mov	r1, r6
 8000ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce6:	f1c2 0320 	rsb	r3, r2, #32
 8000cea:	40d8      	lsrs	r0, r3
 8000cec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf0:	fa21 f303 	lsr.w	r3, r1, r3
 8000cf4:	4091      	lsls	r1, r2
 8000cf6:	4301      	orrs	r1, r0
 8000cf8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfc:	fa1f fe8c 	uxth.w	lr, ip
 8000d00:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d04:	fb07 3610 	mls	r6, r7, r0, r3
 8000d08:	0c0b      	lsrs	r3, r1, #16
 8000d0a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d0e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d12:	429e      	cmp	r6, r3
 8000d14:	fa04 f402 	lsl.w	r4, r4, r2
 8000d18:	d908      	bls.n	8000d2c <__udivmoddi4+0x260>
 8000d1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d22:	d22f      	bcs.n	8000d84 <__udivmoddi4+0x2b8>
 8000d24:	429e      	cmp	r6, r3
 8000d26:	d92d      	bls.n	8000d84 <__udivmoddi4+0x2b8>
 8000d28:	3802      	subs	r0, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1b9b      	subs	r3, r3, r6
 8000d2e:	b289      	uxth	r1, r1
 8000d30:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d34:	fb07 3316 	mls	r3, r7, r6, r3
 8000d38:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d3c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d40:	428b      	cmp	r3, r1
 8000d42:	d908      	bls.n	8000d56 <__udivmoddi4+0x28a>
 8000d44:	eb1c 0101 	adds.w	r1, ip, r1
 8000d48:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d4c:	d216      	bcs.n	8000d7c <__udivmoddi4+0x2b0>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d914      	bls.n	8000d7c <__udivmoddi4+0x2b0>
 8000d52:	3e02      	subs	r6, #2
 8000d54:	4461      	add	r1, ip
 8000d56:	1ac9      	subs	r1, r1, r3
 8000d58:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d5c:	e738      	b.n	8000bd0 <__udivmoddi4+0x104>
 8000d5e:	462e      	mov	r6, r5
 8000d60:	4628      	mov	r0, r5
 8000d62:	e705      	b.n	8000b70 <__udivmoddi4+0xa4>
 8000d64:	4606      	mov	r6, r0
 8000d66:	e6e3      	b.n	8000b30 <__udivmoddi4+0x64>
 8000d68:	4618      	mov	r0, r3
 8000d6a:	e6f8      	b.n	8000b5e <__udivmoddi4+0x92>
 8000d6c:	454b      	cmp	r3, r9
 8000d6e:	d2a9      	bcs.n	8000cc4 <__udivmoddi4+0x1f8>
 8000d70:	ebb9 0802 	subs.w	r8, r9, r2
 8000d74:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d78:	3801      	subs	r0, #1
 8000d7a:	e7a3      	b.n	8000cc4 <__udivmoddi4+0x1f8>
 8000d7c:	4646      	mov	r6, r8
 8000d7e:	e7ea      	b.n	8000d56 <__udivmoddi4+0x28a>
 8000d80:	4620      	mov	r0, r4
 8000d82:	e794      	b.n	8000cae <__udivmoddi4+0x1e2>
 8000d84:	4640      	mov	r0, r8
 8000d86:	e7d1      	b.n	8000d2c <__udivmoddi4+0x260>
 8000d88:	46d0      	mov	r8, sl
 8000d8a:	e77b      	b.n	8000c84 <__udivmoddi4+0x1b8>
 8000d8c:	3b02      	subs	r3, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	e732      	b.n	8000bf8 <__udivmoddi4+0x12c>
 8000d92:	4630      	mov	r0, r6
 8000d94:	e709      	b.n	8000baa <__udivmoddi4+0xde>
 8000d96:	4464      	add	r4, ip
 8000d98:	3802      	subs	r0, #2
 8000d9a:	e742      	b.n	8000c22 <__udivmoddi4+0x156>

08000d9c <__aeabi_idiv0>:
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop

08000da0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000da4:	f001 fb1a 	bl	80023dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000da8:	f000 f858 	bl	8000e5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dac:	f000 fafc 	bl	80013a8 <MX_GPIO_Init>
  MX_TIM8_Init();
 8000db0:	f000 fa26 	bl	8001200 <MX_TIM8_Init>
  MX_TIM2_Init();
 8000db4:	f000 f97c 	bl	80010b0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000db8:	f000 f9ce 	bl	8001158 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000dbc:	f000 f8da 	bl	8000f74 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8000dc0:	f000 fac8 	bl	8001354 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8000dc4:	f000 f8a8 	bl	8000f18 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  OLED_Init();
 8000dc8:	f008 fb28 	bl	800941c <OLED_Init>
  gyroInit();
 8000dcc:	f008 f8ec 	bl	8008fa8 <gyroInit>
  HAL_UART_Receive_IT(&huart3, (uint8_t *) aRxBuffer, 4);
 8000dd0:	2204      	movs	r2, #4
 8000dd2:	4914      	ldr	r1, [pc, #80]	; (8000e24 <main+0x84>)
 8000dd4:	4814      	ldr	r0, [pc, #80]	; (8000e28 <main+0x88>)
 8000dd6:	f004 fb7a 	bl	80054ce <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000dda:	f005 fad7 	bl	800638c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000dde:	4a13      	ldr	r2, [pc, #76]	; (8000e2c <main+0x8c>)
 8000de0:	2100      	movs	r1, #0
 8000de2:	4813      	ldr	r0, [pc, #76]	; (8000e30 <main+0x90>)
 8000de4:	f005 fb1c 	bl	8006420 <osThreadNew>
 8000de8:	4603      	mov	r3, r0
 8000dea:	4a12      	ldr	r2, [pc, #72]	; (8000e34 <main+0x94>)
 8000dec:	6013      	str	r3, [r2, #0]

  /* creation of MotorTask */
  MotorTaskHandle = osThreadNew(motor, NULL, &MotorTask_attributes);
 8000dee:	4a12      	ldr	r2, [pc, #72]	; (8000e38 <main+0x98>)
 8000df0:	2100      	movs	r1, #0
 8000df2:	4812      	ldr	r0, [pc, #72]	; (8000e3c <main+0x9c>)
 8000df4:	f005 fb14 	bl	8006420 <osThreadNew>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	4a11      	ldr	r2, [pc, #68]	; (8000e40 <main+0xa0>)
 8000dfc:	6013      	str	r3, [r2, #0]

  /* creation of EncoderTask */
  EncoderTaskHandle = osThreadNew(encoder_task, NULL, &EncoderTask_attributes);
 8000dfe:	4a11      	ldr	r2, [pc, #68]	; (8000e44 <main+0xa4>)
 8000e00:	2100      	movs	r1, #0
 8000e02:	4811      	ldr	r0, [pc, #68]	; (8000e48 <main+0xa8>)
 8000e04:	f005 fb0c 	bl	8006420 <osThreadNew>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	4a10      	ldr	r2, [pc, #64]	; (8000e4c <main+0xac>)
 8000e0c:	6013      	str	r3, [r2, #0]

  /* creation of GyroTask */
  GyroTaskHandle = osThreadNew(gyro_task, NULL, &GyroTask_attributes);
 8000e0e:	4a10      	ldr	r2, [pc, #64]	; (8000e50 <main+0xb0>)
 8000e10:	2100      	movs	r1, #0
 8000e12:	4810      	ldr	r0, [pc, #64]	; (8000e54 <main+0xb4>)
 8000e14:	f005 fb04 	bl	8006420 <osThreadNew>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	4a0f      	ldr	r2, [pc, #60]	; (8000e58 <main+0xb8>)
 8000e1c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000e1e:	f005 fad9 	bl	80063d4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e22:	e7fe      	b.n	8000e22 <main+0x82>
 8000e24:	20000264 	.word	0x20000264
 8000e28:	20000210 	.word	0x20000210
 8000e2c:	08009f2c 	.word	0x08009f2c
 8000e30:	0800163d 	.word	0x0800163d
 8000e34:	20000254 	.word	0x20000254
 8000e38:	08009f50 	.word	0x08009f50
 8000e3c:	08001651 	.word	0x08001651
 8000e40:	20000258 	.word	0x20000258
 8000e44:	08009f74 	.word	0x08009f74
 8000e48:	08001b0d 	.word	0x08001b0d
 8000e4c:	2000025c 	.word	0x2000025c
 8000e50:	08009f98 	.word	0x08009f98
 8000e54:	08001bf9 	.word	0x08001bf9
 8000e58:	20000260 	.word	0x20000260

08000e5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b094      	sub	sp, #80	; 0x50
 8000e60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e62:	f107 0320 	add.w	r3, r7, #32
 8000e66:	2230      	movs	r2, #48	; 0x30
 8000e68:	2100      	movs	r1, #0
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f008 fbaa 	bl	80095c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e70:	f107 030c 	add.w	r3, r7, #12
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
 8000e7c:	60da      	str	r2, [r3, #12]
 8000e7e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e80:	2300      	movs	r3, #0
 8000e82:	60bb      	str	r3, [r7, #8]
 8000e84:	4b22      	ldr	r3, [pc, #136]	; (8000f10 <SystemClock_Config+0xb4>)
 8000e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e88:	4a21      	ldr	r2, [pc, #132]	; (8000f10 <SystemClock_Config+0xb4>)
 8000e8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e8e:	6413      	str	r3, [r2, #64]	; 0x40
 8000e90:	4b1f      	ldr	r3, [pc, #124]	; (8000f10 <SystemClock_Config+0xb4>)
 8000e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e98:	60bb      	str	r3, [r7, #8]
 8000e9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	607b      	str	r3, [r7, #4]
 8000ea0:	4b1c      	ldr	r3, [pc, #112]	; (8000f14 <SystemClock_Config+0xb8>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a1b      	ldr	r2, [pc, #108]	; (8000f14 <SystemClock_Config+0xb8>)
 8000ea6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eaa:	6013      	str	r3, [r2, #0]
 8000eac:	4b19      	ldr	r3, [pc, #100]	; (8000f14 <SystemClock_Config+0xb8>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eb4:	607b      	str	r3, [r7, #4]
 8000eb6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ec0:	2310      	movs	r3, #16
 8000ec2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ec8:	f107 0320 	add.w	r3, r7, #32
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f002 fe4d 	bl	8003b6c <HAL_RCC_OscConfig>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000ed8:	f000 ffe4 	bl	8001ea4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000edc:	230f      	movs	r3, #15
 8000ede:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000eec:	2300      	movs	r3, #0
 8000eee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000ef0:	f107 030c 	add.w	r3, r7, #12
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f003 f8b0 	bl	800405c <HAL_RCC_ClockConfig>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000f02:	f000 ffcf 	bl	8001ea4 <Error_Handler>
  }
}
 8000f06:	bf00      	nop
 8000f08:	3750      	adds	r7, #80	; 0x50
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40023800 	.word	0x40023800
 8000f14:	40007000 	.word	0x40007000

08000f18 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f1c:	4b12      	ldr	r3, [pc, #72]	; (8000f68 <MX_I2C1_Init+0x50>)
 8000f1e:	4a13      	ldr	r2, [pc, #76]	; (8000f6c <MX_I2C1_Init+0x54>)
 8000f20:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000f22:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <MX_I2C1_Init+0x50>)
 8000f24:	4a12      	ldr	r2, [pc, #72]	; (8000f70 <MX_I2C1_Init+0x58>)
 8000f26:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f28:	4b0f      	ldr	r3, [pc, #60]	; (8000f68 <MX_I2C1_Init+0x50>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f2e:	4b0e      	ldr	r3, [pc, #56]	; (8000f68 <MX_I2C1_Init+0x50>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f34:	4b0c      	ldr	r3, [pc, #48]	; (8000f68 <MX_I2C1_Init+0x50>)
 8000f36:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f3a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f3c:	4b0a      	ldr	r3, [pc, #40]	; (8000f68 <MX_I2C1_Init+0x50>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f42:	4b09      	ldr	r3, [pc, #36]	; (8000f68 <MX_I2C1_Init+0x50>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f48:	4b07      	ldr	r3, [pc, #28]	; (8000f68 <MX_I2C1_Init+0x50>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f4e:	4b06      	ldr	r3, [pc, #24]	; (8000f68 <MX_I2C1_Init+0x50>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f54:	4804      	ldr	r0, [pc, #16]	; (8000f68 <MX_I2C1_Init+0x50>)
 8000f56:	f001 fe4b 	bl	8002bf0 <HAL_I2C_Init>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f60:	f000 ffa0 	bl	8001ea4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f64:	bf00      	nop
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	2000009c 	.word	0x2000009c
 8000f6c:	40005400 	.word	0x40005400
 8000f70:	000186a0 	.word	0x000186a0

08000f74 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b096      	sub	sp, #88	; 0x58
 8000f78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f7a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f7e:	2200      	movs	r2, #0
 8000f80:	601a      	str	r2, [r3, #0]
 8000f82:	605a      	str	r2, [r3, #4]
 8000f84:	609a      	str	r2, [r3, #8]
 8000f86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f88:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f96:	2200      	movs	r2, #0
 8000f98:	601a      	str	r2, [r3, #0]
 8000f9a:	605a      	str	r2, [r3, #4]
 8000f9c:	609a      	str	r2, [r3, #8]
 8000f9e:	60da      	str	r2, [r3, #12]
 8000fa0:	611a      	str	r2, [r3, #16]
 8000fa2:	615a      	str	r2, [r3, #20]
 8000fa4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000fa6:	1d3b      	adds	r3, r7, #4
 8000fa8:	2220      	movs	r2, #32
 8000faa:	2100      	movs	r1, #0
 8000fac:	4618      	mov	r0, r3
 8000fae:	f008 fb09 	bl	80095c4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000fb2:	4b3d      	ldr	r3, [pc, #244]	; (80010a8 <MX_TIM1_Init+0x134>)
 8000fb4:	4a3d      	ldr	r2, [pc, #244]	; (80010ac <MX_TIM1_Init+0x138>)
 8000fb6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160;
 8000fb8:	4b3b      	ldr	r3, [pc, #236]	; (80010a8 <MX_TIM1_Init+0x134>)
 8000fba:	22a0      	movs	r2, #160	; 0xa0
 8000fbc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fbe:	4b3a      	ldr	r3, [pc, #232]	; (80010a8 <MX_TIM1_Init+0x134>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8000fc4:	4b38      	ldr	r3, [pc, #224]	; (80010a8 <MX_TIM1_Init+0x134>)
 8000fc6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000fca:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fcc:	4b36      	ldr	r3, [pc, #216]	; (80010a8 <MX_TIM1_Init+0x134>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000fd2:	4b35      	ldr	r3, [pc, #212]	; (80010a8 <MX_TIM1_Init+0x134>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000fd8:	4b33      	ldr	r3, [pc, #204]	; (80010a8 <MX_TIM1_Init+0x134>)
 8000fda:	2280      	movs	r2, #128	; 0x80
 8000fdc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000fde:	4832      	ldr	r0, [pc, #200]	; (80010a8 <MX_TIM1_Init+0x134>)
 8000fe0:	f003 fa1c 	bl	800441c <HAL_TIM_Base_Init>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000fea:	f000 ff5b 	bl	8001ea4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ff2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ff4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	482b      	ldr	r0, [pc, #172]	; (80010a8 <MX_TIM1_Init+0x134>)
 8000ffc:	f003 fd74 	bl	8004ae8 <HAL_TIM_ConfigClockSource>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001006:	f000 ff4d 	bl	8001ea4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800100a:	4827      	ldr	r0, [pc, #156]	; (80010a8 <MX_TIM1_Init+0x134>)
 800100c:	f003 fa55 	bl	80044ba <HAL_TIM_PWM_Init>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001016:	f000 ff45 	bl	8001ea4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800101a:	2300      	movs	r3, #0
 800101c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800101e:	2300      	movs	r3, #0
 8001020:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001022:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001026:	4619      	mov	r1, r3
 8001028:	481f      	ldr	r0, [pc, #124]	; (80010a8 <MX_TIM1_Init+0x134>)
 800102a:	f004 f935 	bl	8005298 <HAL_TIMEx_MasterConfigSynchronization>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001034:	f000 ff36 	bl	8001ea4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001038:	2360      	movs	r3, #96	; 0x60
 800103a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800103c:	2300      	movs	r3, #0
 800103e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001040:	2300      	movs	r3, #0
 8001042:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001044:	2300      	movs	r3, #0
 8001046:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001048:	2300      	movs	r3, #0
 800104a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800104c:	2300      	movs	r3, #0
 800104e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001050:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001054:	220c      	movs	r2, #12
 8001056:	4619      	mov	r1, r3
 8001058:	4813      	ldr	r0, [pc, #76]	; (80010a8 <MX_TIM1_Init+0x134>)
 800105a:	f003 fc83 	bl	8004964 <HAL_TIM_PWM_ConfigChannel>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8001064:	f000 ff1e 	bl	8001ea4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001068:	2300      	movs	r3, #0
 800106a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800106c:	2300      	movs	r3, #0
 800106e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001070:	2300      	movs	r3, #0
 8001072:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001074:	2300      	movs	r3, #0
 8001076:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001078:	2300      	movs	r3, #0
 800107a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800107c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001080:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001082:	2300      	movs	r3, #0
 8001084:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001086:	1d3b      	adds	r3, r7, #4
 8001088:	4619      	mov	r1, r3
 800108a:	4807      	ldr	r0, [pc, #28]	; (80010a8 <MX_TIM1_Init+0x134>)
 800108c:	f004 f980 	bl	8005390 <HAL_TIMEx_ConfigBreakDeadTime>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8001096:	f000 ff05 	bl	8001ea4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800109a:	4803      	ldr	r0, [pc, #12]	; (80010a8 <MX_TIM1_Init+0x134>)
 800109c:	f001 f874 	bl	8002188 <HAL_TIM_MspPostInit>

}
 80010a0:	bf00      	nop
 80010a2:	3758      	adds	r7, #88	; 0x58
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	200000f0 	.word	0x200000f0
 80010ac:	40010000 	.word	0x40010000

080010b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b08c      	sub	sp, #48	; 0x30
 80010b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80010b6:	f107 030c 	add.w	r3, r7, #12
 80010ba:	2224      	movs	r2, #36	; 0x24
 80010bc:	2100      	movs	r1, #0
 80010be:	4618      	mov	r0, r3
 80010c0:	f008 fa80 	bl	80095c4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010c4:	1d3b      	adds	r3, r7, #4
 80010c6:	2200      	movs	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]
 80010ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010cc:	4b21      	ldr	r3, [pc, #132]	; (8001154 <MX_TIM2_Init+0xa4>)
 80010ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010d2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80010d4:	4b1f      	ldr	r3, [pc, #124]	; (8001154 <MX_TIM2_Init+0xa4>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010da:	4b1e      	ldr	r3, [pc, #120]	; (8001154 <MX_TIM2_Init+0xa4>)
 80010dc:	2200      	movs	r2, #0
 80010de:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80010e0:	4b1c      	ldr	r3, [pc, #112]	; (8001154 <MX_TIM2_Init+0xa4>)
 80010e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010e6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010e8:	4b1a      	ldr	r3, [pc, #104]	; (8001154 <MX_TIM2_Init+0xa4>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010ee:	4b19      	ldr	r3, [pc, #100]	; (8001154 <MX_TIM2_Init+0xa4>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80010f4:	2303      	movs	r3, #3
 80010f6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80010f8:	2300      	movs	r3, #0
 80010fa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80010fc:	2301      	movs	r3, #1
 80010fe:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001100:	2300      	movs	r3, #0
 8001102:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001104:	230a      	movs	r3, #10
 8001106:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001108:	2300      	movs	r3, #0
 800110a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800110c:	2301      	movs	r3, #1
 800110e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001110:	2300      	movs	r3, #0
 8001112:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001114:	230a      	movs	r3, #10
 8001116:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001118:	f107 030c 	add.w	r3, r7, #12
 800111c:	4619      	mov	r1, r3
 800111e:	480d      	ldr	r0, [pc, #52]	; (8001154 <MX_TIM2_Init+0xa4>)
 8001120:	f003 faec 	bl	80046fc <HAL_TIM_Encoder_Init>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800112a:	f000 febb 	bl	8001ea4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800112e:	2300      	movs	r3, #0
 8001130:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001132:	2300      	movs	r3, #0
 8001134:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001136:	1d3b      	adds	r3, r7, #4
 8001138:	4619      	mov	r1, r3
 800113a:	4806      	ldr	r0, [pc, #24]	; (8001154 <MX_TIM2_Init+0xa4>)
 800113c:	f004 f8ac 	bl	8005298 <HAL_TIMEx_MasterConfigSynchronization>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001146:	f000 fead 	bl	8001ea4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800114a:	bf00      	nop
 800114c:	3730      	adds	r7, #48	; 0x30
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	20000138 	.word	0x20000138

08001158 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b08c      	sub	sp, #48	; 0x30
 800115c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800115e:	f107 030c 	add.w	r3, r7, #12
 8001162:	2224      	movs	r2, #36	; 0x24
 8001164:	2100      	movs	r1, #0
 8001166:	4618      	mov	r0, r3
 8001168:	f008 fa2c 	bl	80095c4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800116c:	1d3b      	adds	r3, r7, #4
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001174:	4b20      	ldr	r3, [pc, #128]	; (80011f8 <MX_TIM3_Init+0xa0>)
 8001176:	4a21      	ldr	r2, [pc, #132]	; (80011fc <MX_TIM3_Init+0xa4>)
 8001178:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800117a:	4b1f      	ldr	r3, [pc, #124]	; (80011f8 <MX_TIM3_Init+0xa0>)
 800117c:	2200      	movs	r2, #0
 800117e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001180:	4b1d      	ldr	r3, [pc, #116]	; (80011f8 <MX_TIM3_Init+0xa0>)
 8001182:	2200      	movs	r2, #0
 8001184:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001186:	4b1c      	ldr	r3, [pc, #112]	; (80011f8 <MX_TIM3_Init+0xa0>)
 8001188:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800118c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800118e:	4b1a      	ldr	r3, [pc, #104]	; (80011f8 <MX_TIM3_Init+0xa0>)
 8001190:	2200      	movs	r2, #0
 8001192:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001194:	4b18      	ldr	r3, [pc, #96]	; (80011f8 <MX_TIM3_Init+0xa0>)
 8001196:	2200      	movs	r2, #0
 8001198:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800119a:	2303      	movs	r3, #3
 800119c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800119e:	2300      	movs	r3, #0
 80011a0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80011a2:	2301      	movs	r3, #1
 80011a4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80011a6:	2300      	movs	r3, #0
 80011a8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80011aa:	230a      	movs	r3, #10
 80011ac:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80011ae:	2300      	movs	r3, #0
 80011b0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80011b2:	2301      	movs	r3, #1
 80011b4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80011b6:	2300      	movs	r3, #0
 80011b8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 80011ba:	230a      	movs	r3, #10
 80011bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80011be:	f107 030c 	add.w	r3, r7, #12
 80011c2:	4619      	mov	r1, r3
 80011c4:	480c      	ldr	r0, [pc, #48]	; (80011f8 <MX_TIM3_Init+0xa0>)
 80011c6:	f003 fa99 	bl	80046fc <HAL_TIM_Encoder_Init>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80011d0:	f000 fe68 	bl	8001ea4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011d4:	2300      	movs	r3, #0
 80011d6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011d8:	2300      	movs	r3, #0
 80011da:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011dc:	1d3b      	adds	r3, r7, #4
 80011de:	4619      	mov	r1, r3
 80011e0:	4805      	ldr	r0, [pc, #20]	; (80011f8 <MX_TIM3_Init+0xa0>)
 80011e2:	f004 f859 	bl	8005298 <HAL_TIMEx_MasterConfigSynchronization>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80011ec:	f000 fe5a 	bl	8001ea4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80011f0:	bf00      	nop
 80011f2:	3730      	adds	r7, #48	; 0x30
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	20000180 	.word	0x20000180
 80011fc:	40000400 	.word	0x40000400

08001200 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b096      	sub	sp, #88	; 0x58
 8001204:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001206:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	605a      	str	r2, [r3, #4]
 8001210:	609a      	str	r2, [r3, #8]
 8001212:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001214:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800121e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	605a      	str	r2, [r3, #4]
 8001228:	609a      	str	r2, [r3, #8]
 800122a:	60da      	str	r2, [r3, #12]
 800122c:	611a      	str	r2, [r3, #16]
 800122e:	615a      	str	r2, [r3, #20]
 8001230:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001232:	1d3b      	adds	r3, r7, #4
 8001234:	2220      	movs	r2, #32
 8001236:	2100      	movs	r1, #0
 8001238:	4618      	mov	r0, r3
 800123a:	f008 f9c3 	bl	80095c4 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800123e:	4b43      	ldr	r3, [pc, #268]	; (800134c <MX_TIM8_Init+0x14c>)
 8001240:	4a43      	ldr	r2, [pc, #268]	; (8001350 <MX_TIM8_Init+0x150>)
 8001242:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001244:	4b41      	ldr	r3, [pc, #260]	; (800134c <MX_TIM8_Init+0x14c>)
 8001246:	2200      	movs	r2, #0
 8001248:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800124a:	4b40      	ldr	r3, [pc, #256]	; (800134c <MX_TIM8_Init+0x14c>)
 800124c:	2200      	movs	r2, #0
 800124e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 8001250:	4b3e      	ldr	r3, [pc, #248]	; (800134c <MX_TIM8_Init+0x14c>)
 8001252:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001256:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001258:	4b3c      	ldr	r3, [pc, #240]	; (800134c <MX_TIM8_Init+0x14c>)
 800125a:	2200      	movs	r2, #0
 800125c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800125e:	4b3b      	ldr	r3, [pc, #236]	; (800134c <MX_TIM8_Init+0x14c>)
 8001260:	2200      	movs	r2, #0
 8001262:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001264:	4b39      	ldr	r3, [pc, #228]	; (800134c <MX_TIM8_Init+0x14c>)
 8001266:	2200      	movs	r2, #0
 8001268:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800126a:	4838      	ldr	r0, [pc, #224]	; (800134c <MX_TIM8_Init+0x14c>)
 800126c:	f003 f8d6 	bl	800441c <HAL_TIM_Base_Init>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8001276:	f000 fe15 	bl	8001ea4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800127a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800127e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001280:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001284:	4619      	mov	r1, r3
 8001286:	4831      	ldr	r0, [pc, #196]	; (800134c <MX_TIM8_Init+0x14c>)
 8001288:	f003 fc2e 	bl	8004ae8 <HAL_TIM_ConfigClockSource>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001292:	f000 fe07 	bl	8001ea4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001296:	482d      	ldr	r0, [pc, #180]	; (800134c <MX_TIM8_Init+0x14c>)
 8001298:	f003 f90f 	bl	80044ba <HAL_TIM_PWM_Init>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80012a2:	f000 fdff 	bl	8001ea4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012a6:	2300      	movs	r3, #0
 80012a8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012aa:	2300      	movs	r3, #0
 80012ac:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80012ae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80012b2:	4619      	mov	r1, r3
 80012b4:	4825      	ldr	r0, [pc, #148]	; (800134c <MX_TIM8_Init+0x14c>)
 80012b6:	f003 ffef 	bl	8005298 <HAL_TIMEx_MasterConfigSynchronization>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80012c0:	f000 fdf0 	bl	8001ea4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012c4:	2360      	movs	r3, #96	; 0x60
 80012c6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80012c8:	2300      	movs	r3, #0
 80012ca:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012cc:	2300      	movs	r3, #0
 80012ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012d0:	2300      	movs	r3, #0
 80012d2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012d4:	2300      	movs	r3, #0
 80012d6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012d8:	2300      	movs	r3, #0
 80012da:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012dc:	2300      	movs	r3, #0
 80012de:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012e4:	2200      	movs	r2, #0
 80012e6:	4619      	mov	r1, r3
 80012e8:	4818      	ldr	r0, [pc, #96]	; (800134c <MX_TIM8_Init+0x14c>)
 80012ea:	f003 fb3b 	bl	8004964 <HAL_TIM_PWM_ConfigChannel>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 80012f4:	f000 fdd6 	bl	8001ea4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012fc:	2204      	movs	r2, #4
 80012fe:	4619      	mov	r1, r3
 8001300:	4812      	ldr	r0, [pc, #72]	; (800134c <MX_TIM8_Init+0x14c>)
 8001302:	f003 fb2f 	bl	8004964 <HAL_TIM_PWM_ConfigChannel>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 800130c:	f000 fdca 	bl	8001ea4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001310:	2300      	movs	r3, #0
 8001312:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001314:	2300      	movs	r3, #0
 8001316:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001318:	2300      	movs	r3, #0
 800131a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800131c:	2300      	movs	r3, #0
 800131e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001320:	2300      	movs	r3, #0
 8001322:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001324:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001328:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800132a:	2300      	movs	r3, #0
 800132c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800132e:	1d3b      	adds	r3, r7, #4
 8001330:	4619      	mov	r1, r3
 8001332:	4806      	ldr	r0, [pc, #24]	; (800134c <MX_TIM8_Init+0x14c>)
 8001334:	f004 f82c 	bl	8005390 <HAL_TIMEx_ConfigBreakDeadTime>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 800133e:	f000 fdb1 	bl	8001ea4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001342:	bf00      	nop
 8001344:	3758      	adds	r7, #88	; 0x58
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	200001c8 	.word	0x200001c8
 8001350:	40010400 	.word	0x40010400

08001354 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001358:	4b11      	ldr	r3, [pc, #68]	; (80013a0 <MX_USART3_UART_Init+0x4c>)
 800135a:	4a12      	ldr	r2, [pc, #72]	; (80013a4 <MX_USART3_UART_Init+0x50>)
 800135c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800135e:	4b10      	ldr	r3, [pc, #64]	; (80013a0 <MX_USART3_UART_Init+0x4c>)
 8001360:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001364:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001366:	4b0e      	ldr	r3, [pc, #56]	; (80013a0 <MX_USART3_UART_Init+0x4c>)
 8001368:	2200      	movs	r2, #0
 800136a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800136c:	4b0c      	ldr	r3, [pc, #48]	; (80013a0 <MX_USART3_UART_Init+0x4c>)
 800136e:	2200      	movs	r2, #0
 8001370:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001372:	4b0b      	ldr	r3, [pc, #44]	; (80013a0 <MX_USART3_UART_Init+0x4c>)
 8001374:	2200      	movs	r2, #0
 8001376:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001378:	4b09      	ldr	r3, [pc, #36]	; (80013a0 <MX_USART3_UART_Init+0x4c>)
 800137a:	220c      	movs	r2, #12
 800137c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800137e:	4b08      	ldr	r3, [pc, #32]	; (80013a0 <MX_USART3_UART_Init+0x4c>)
 8001380:	2200      	movs	r2, #0
 8001382:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001384:	4b06      	ldr	r3, [pc, #24]	; (80013a0 <MX_USART3_UART_Init+0x4c>)
 8001386:	2200      	movs	r2, #0
 8001388:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800138a:	4805      	ldr	r0, [pc, #20]	; (80013a0 <MX_USART3_UART_Init+0x4c>)
 800138c:	f004 f852 	bl	8005434 <HAL_UART_Init>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001396:	f000 fd85 	bl	8001ea4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	20000210 	.word	0x20000210
 80013a4:	40004800 	.word	0x40004800

080013a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b08a      	sub	sp, #40	; 0x28
 80013ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ae:	f107 0314 	add.w	r3, r7, #20
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	605a      	str	r2, [r3, #4]
 80013b8:	609a      	str	r2, [r3, #8]
 80013ba:	60da      	str	r2, [r3, #12]
 80013bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	613b      	str	r3, [r7, #16]
 80013c2:	4b31      	ldr	r3, [pc, #196]	; (8001488 <MX_GPIO_Init+0xe0>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	4a30      	ldr	r2, [pc, #192]	; (8001488 <MX_GPIO_Init+0xe0>)
 80013c8:	f043 0310 	orr.w	r3, r3, #16
 80013cc:	6313      	str	r3, [r2, #48]	; 0x30
 80013ce:	4b2e      	ldr	r3, [pc, #184]	; (8001488 <MX_GPIO_Init+0xe0>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	f003 0310 	and.w	r3, r3, #16
 80013d6:	613b      	str	r3, [r7, #16]
 80013d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	60fb      	str	r3, [r7, #12]
 80013de:	4b2a      	ldr	r3, [pc, #168]	; (8001488 <MX_GPIO_Init+0xe0>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	4a29      	ldr	r2, [pc, #164]	; (8001488 <MX_GPIO_Init+0xe0>)
 80013e4:	f043 0301 	orr.w	r3, r3, #1
 80013e8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ea:	4b27      	ldr	r3, [pc, #156]	; (8001488 <MX_GPIO_Init+0xe0>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	f003 0301 	and.w	r3, r3, #1
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	60bb      	str	r3, [r7, #8]
 80013fa:	4b23      	ldr	r3, [pc, #140]	; (8001488 <MX_GPIO_Init+0xe0>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	4a22      	ldr	r2, [pc, #136]	; (8001488 <MX_GPIO_Init+0xe0>)
 8001400:	f043 0304 	orr.w	r3, r3, #4
 8001404:	6313      	str	r3, [r2, #48]	; 0x30
 8001406:	4b20      	ldr	r3, [pc, #128]	; (8001488 <MX_GPIO_Init+0xe0>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	f003 0304 	and.w	r3, r3, #4
 800140e:	60bb      	str	r3, [r7, #8]
 8001410:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001412:	2300      	movs	r3, #0
 8001414:	607b      	str	r3, [r7, #4]
 8001416:	4b1c      	ldr	r3, [pc, #112]	; (8001488 <MX_GPIO_Init+0xe0>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141a:	4a1b      	ldr	r2, [pc, #108]	; (8001488 <MX_GPIO_Init+0xe0>)
 800141c:	f043 0302 	orr.w	r3, r3, #2
 8001420:	6313      	str	r3, [r2, #48]	; 0x30
 8001422:	4b19      	ldr	r3, [pc, #100]	; (8001488 <MX_GPIO_Init+0xe0>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001426:	f003 0302 	and.w	r3, r3, #2
 800142a:	607b      	str	r3, [r7, #4]
 800142c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 800142e:	2200      	movs	r2, #0
 8001430:	f44f 61bc 	mov.w	r1, #1504	; 0x5e0
 8001434:	4815      	ldr	r0, [pc, #84]	; (800148c <MX_GPIO_Init+0xe4>)
 8001436:	f001 fba7 	bl	8002b88 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin, GPIO_PIN_RESET);
 800143a:	2200      	movs	r2, #0
 800143c:	213c      	movs	r1, #60	; 0x3c
 800143e:	4814      	ldr	r0, [pc, #80]	; (8001490 <MX_GPIO_Init+0xe8>)
 8001440:	f001 fba2 	bl	8002b88 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin
                           LED3_Pin */
  GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 8001444:	f44f 63bc 	mov.w	r3, #1504	; 0x5e0
 8001448:	617b      	str	r3, [r7, #20]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800144a:	2301      	movs	r3, #1
 800144c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144e:	2300      	movs	r3, #0
 8001450:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001452:	2300      	movs	r3, #0
 8001454:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001456:	f107 0314 	add.w	r3, r7, #20
 800145a:	4619      	mov	r1, r3
 800145c:	480b      	ldr	r0, [pc, #44]	; (800148c <MX_GPIO_Init+0xe4>)
 800145e:	f001 f9f7 	bl	8002850 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin BIN1_Pin BIN2_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin;
 8001462:	233c      	movs	r3, #60	; 0x3c
 8001464:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001466:	2301      	movs	r3, #1
 8001468:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146a:	2300      	movs	r3, #0
 800146c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800146e:	2302      	movs	r3, #2
 8001470:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001472:	f107 0314 	add.w	r3, r7, #20
 8001476:	4619      	mov	r1, r3
 8001478:	4805      	ldr	r0, [pc, #20]	; (8001490 <MX_GPIO_Init+0xe8>)
 800147a:	f001 f9e9 	bl	8002850 <HAL_GPIO_Init>

}
 800147e:	bf00      	nop
 8001480:	3728      	adds	r7, #40	; 0x28
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	40023800 	.word	0x40023800
 800148c:	40021000 	.word	0x40021000
 8001490:	40020000 	.word	0x40020000

08001494 <HAL_UART_RxCpltCallback>:
  * @brief  Function called during Serial interrupt
  * @param  argument: UART_HandleTypeDef
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
	// Prevent unused argument compiled warning

	UNUSED(huart);

	enqueue(&q,aRxBuffer);
 800149c:	4908      	ldr	r1, [pc, #32]	; (80014c0 <HAL_UART_RxCpltCallback+0x2c>)
 800149e:	4809      	ldr	r0, [pc, #36]	; (80014c4 <HAL_UART_RxCpltCallback+0x30>)
 80014a0:	f000 f832 	bl	8001508 <enqueue>
//	fb_speed = (uint8_t)(aRxBuffer[1]);
//	leftright = (uint8_t)(aRxBuffer[2]);
//	lr_speed = (uint8_t)(aRxBuffer[3]);


	HAL_UART_Receive_IT(&huart3,(uint8_t *) aRxBuffer,4);
 80014a4:	2204      	movs	r2, #4
 80014a6:	4906      	ldr	r1, [pc, #24]	; (80014c0 <HAL_UART_RxCpltCallback+0x2c>)
 80014a8:	4807      	ldr	r0, [pc, #28]	; (80014c8 <HAL_UART_RxCpltCallback+0x34>)
 80014aa:	f004 f810 	bl	80054ce <HAL_UART_Receive_IT>
//	sprintf(hello, "Dir %c : %d\0", frontback, fb_speed-48);
//	OLED_ShowString(10, 20, hello);
//
//	sprintf(hello, "Turn %c: %d\0", leftright, lr_speed-48);
//	OLED_ShowString(10, 30, hello);
	HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 80014ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014b2:	4806      	ldr	r0, [pc, #24]	; (80014cc <HAL_UART_RxCpltCallback+0x38>)
 80014b4:	f001 fb81 	bl	8002bba <HAL_GPIO_TogglePin>
}
 80014b8:	bf00      	nop
 80014ba:	3708      	adds	r7, #8
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	20000264 	.word	0x20000264
 80014c4:	200002a4 	.word	0x200002a4
 80014c8:	20000210 	.word	0x20000210
 80014cc:	40021000 	.word	0x40021000

080014d0 <reset_motorVal>:

void reset_motorVal(){
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
	// Reset Values
	frontback = 'w';	// Front/back character
 80014d4:	4b08      	ldr	r3, [pc, #32]	; (80014f8 <reset_motorVal+0x28>)
 80014d6:	2277      	movs	r2, #119	; 0x77
 80014d8:	701a      	strb	r2, [r3, #0]
	fb_speed = '0';	// Front/back speed
 80014da:	4b08      	ldr	r3, [pc, #32]	; (80014fc <reset_motorVal+0x2c>)
 80014dc:	2230      	movs	r2, #48	; 0x30
 80014de:	701a      	strb	r2, [r3, #0]
	leftright = 'a';	// Left/right character
 80014e0:	4b07      	ldr	r3, [pc, #28]	; (8001500 <reset_motorVal+0x30>)
 80014e2:	2261      	movs	r2, #97	; 0x61
 80014e4:	701a      	strb	r2, [r3, #0]
	lr_speed = '0';	// Left/right speed
 80014e6:	4b07      	ldr	r3, [pc, #28]	; (8001504 <reset_motorVal+0x34>)
 80014e8:	2230      	movs	r2, #48	; 0x30
 80014ea:	701a      	strb	r2, [r3, #0]
}
 80014ec:	bf00      	nop
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	20000000 	.word	0x20000000
 80014fc:	20000001 	.word	0x20000001
 8001500:	20000002 	.word	0x20000002
 8001504:	20000003 	.word	0x20000003

08001508 <enqueue>:

//input stuff into the queue
void enqueue(Queue *qPtr, uint8_t msg[4]){
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	6039      	str	r1, [r7, #0]
    QueueNode *newNode;
    newNode = (QueueNode *) malloc(sizeof(QueueNode));
 8001512:	2008      	movs	r0, #8
 8001514:	f008 f838 	bl	8009588 <malloc>
 8001518:	4603      	mov	r3, r0
 800151a:	60bb      	str	r3, [r7, #8]
    for(int i=0; i<4; i++){
 800151c:	2300      	movs	r3, #0
 800151e:	60fb      	str	r3, [r7, #12]
 8001520:	e00b      	b.n	800153a <enqueue+0x32>
        newNode->msg[i] = msg[i];
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	683a      	ldr	r2, [r7, #0]
 8001526:	4413      	add	r3, r2
 8001528:	7819      	ldrb	r1, [r3, #0]
 800152a:	68ba      	ldr	r2, [r7, #8]
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	4413      	add	r3, r2
 8001530:	460a      	mov	r2, r1
 8001532:	701a      	strb	r2, [r3, #0]
    for(int i=0; i<4; i++){
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	3301      	adds	r3, #1
 8001538:	60fb      	str	r3, [r7, #12]
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	2b03      	cmp	r3, #3
 800153e:	ddf0      	ble.n	8001522 <enqueue+0x1a>
    }
    newNode->next = NULL;
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	2200      	movs	r2, #0
 8001544:	605a      	str	r2, [r3, #4]

    if(isEmptyQueue(*qPtr))
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800154c:	f000 f864 	bl	8001618 <isEmptyQueue>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d003      	beq.n	800155e <enqueue+0x56>
        qPtr->head=newNode;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	68ba      	ldr	r2, [r7, #8]
 800155a:	605a      	str	r2, [r3, #4]
 800155c:	e003      	b.n	8001566 <enqueue+0x5e>
    else
        qPtr->tail->next = newNode;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	68ba      	ldr	r2, [r7, #8]
 8001564:	605a      	str	r2, [r3, #4]

    qPtr->tail = newNode;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	68ba      	ldr	r2, [r7, #8]
 800156a:	609a      	str	r2, [r3, #8]
    qPtr->size++;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	1c5a      	adds	r2, r3, #1
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	601a      	str	r2, [r3, #0]
}
 8001576:	bf00      	nop
 8001578:	3710      	adds	r7, #16
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <dequeue>:

int dequeue(Queue *qPtr){
 800157e:	b580      	push	{r7, lr}
 8001580:	b084      	sub	sp, #16
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
    if(qPtr==NULL || qPtr->head==NULL){ //Queue is empty or NULL pointer
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d003      	beq.n	8001594 <dequeue+0x16>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d101      	bne.n	8001598 <dequeue+0x1a>
        return 0;
 8001594:	2300      	movs	r3, #0
 8001596:	e017      	b.n	80015c8 <dequeue+0x4a>
    }
    else{
       QueueNode *temp = qPtr->head;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	60fb      	str	r3, [r7, #12]
       qPtr->head = qPtr->head->next;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	685a      	ldr	r2, [r3, #4]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	605a      	str	r2, [r3, #4]
       if(qPtr->head == NULL) //Queue is emptied
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d102      	bne.n	80015b6 <dequeue+0x38>
           qPtr->tail = NULL;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2200      	movs	r2, #0
 80015b4:	609a      	str	r2, [r3, #8]

       free(temp);
 80015b6:	68f8      	ldr	r0, [r7, #12]
 80015b8:	f007 ffee 	bl	8009598 <free>
       qPtr->size--;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	1e5a      	subs	r2, r3, #1
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	601a      	str	r2, [r3, #0]
       return 1;
 80015c6:	2301      	movs	r3, #1
    }
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3710      	adds	r7, #16
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <getFront>:

//get the front of the queue (not sure if working)
void getFront(Queue q){
 80015d0:	b480      	push	{r7}
 80015d2:	b085      	sub	sp, #20
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	1d3b      	adds	r3, r7, #4
 80015d8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        frontback = (uint8_t)(q.head->msg[0]);
 80015dc:	68bb      	ldr	r3, [r7, #8]
 80015de:	781a      	ldrb	r2, [r3, #0]
 80015e0:	4b09      	ldr	r3, [pc, #36]	; (8001608 <getFront+0x38>)
 80015e2:	701a      	strb	r2, [r3, #0]
        fb_speed = (uint8_t)(q.head->msg[1]);
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	785a      	ldrb	r2, [r3, #1]
 80015e8:	4b08      	ldr	r3, [pc, #32]	; (800160c <getFront+0x3c>)
 80015ea:	701a      	strb	r2, [r3, #0]
        leftright = (uint8_t)(q.head->msg[2]);
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	789a      	ldrb	r2, [r3, #2]
 80015f0:	4b07      	ldr	r3, [pc, #28]	; (8001610 <getFront+0x40>)
 80015f2:	701a      	strb	r2, [r3, #0]
        lr_speed = (uint8_t)(q.head->msg[3]);
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	78da      	ldrb	r2, [r3, #3]
 80015f8:	4b06      	ldr	r3, [pc, #24]	; (8001614 <getFront+0x44>)
 80015fa:	701a      	strb	r2, [r3, #0]
}
 80015fc:	bf00      	nop
 80015fe:	3714      	adds	r7, #20
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr
 8001608:	20000000 	.word	0x20000000
 800160c:	20000001 	.word	0x20000001
 8001610:	20000002 	.word	0x20000002
 8001614:	20000003 	.word	0x20000003

08001618 <isEmptyQueue>:

//check if queue is empty (output 1 if empty, 0 if not empty)
int isEmptyQueue(Queue q){
 8001618:	b480      	push	{r7}
 800161a:	b085      	sub	sp, #20
 800161c:	af00      	add	r7, sp, #0
 800161e:	1d3b      	adds	r3, r7, #4
 8001620:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    if(q.size==0) return 1;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d101      	bne.n	800162e <isEmptyQueue+0x16>
 800162a:	2301      	movs	r3, #1
 800162c:	e000      	b.n	8001630 <isEmptyQueue+0x18>
    else return 0;
 800162e:	2300      	movs	r3, #0
}
 8001630:	4618      	mov	r0, r3
 8001632:	3714      	adds	r7, #20
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
//	  }
//	  HAL_UART_Transmit(&huart3, (uint8_t *)txData, strlen(txData), 10);
//	  if(curAngle > 0){
//		  curAngle -= 1;	// Account for gyro drift
//	  }
	  osDelay(1000);
 8001644:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001648:	f004 ff7c 	bl	8006544 <osDelay>
 800164c:	e7fa      	b.n	8001644 <StartDefaultTask+0x8>
	...

08001650 <motor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_motor */
void motor(void *argument)
{
 8001650:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001654:	b096      	sub	sp, #88	; 0x58
 8001656:	af00      	add	r7, sp, #0
 8001658:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN motor */
	// Using movement accelerate til pwm = 1600 then y =mx
	// Original movement equation y = 400x

	uint16_t servo_max = 5;		// Servo_max * (0-9) = servo_value
 800165a:	2305      	movs	r3, #5
 800165c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

	// For differential steering
	double motor_offset_r = 1;
 8001660:	f04f 0200 	mov.w	r2, #0
 8001664:	4bac      	ldr	r3, [pc, #688]	; (8001918 <motor+0x2c8>)
 8001666:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
	double motor_offset_l = 1;
 800166a:	f04f 0200 	mov.w	r2, #0
 800166e:	4baa      	ldr	r3, [pc, #680]	; (8001918 <motor+0x2c8>)
 8001670:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	uint16_t pwmVal_motor = 0;	// Current motor pwm value
 8001674:	2300      	movs	r3, #0
 8001676:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	uint16_t motor_min = 1000;	// Min value for pwm to complete 2 instruction without stopping
 800167a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800167e:	87fb      	strh	r3, [r7, #62]	; 0x3e
	uint16_t motor_increment = 100;
 8001680:	2364      	movs	r3, #100	; 0x64
 8001682:	87bb      	strh	r3, [r7, #60]	; 0x3c
	uint8_t accelerate;

	uint16_t motor_reference;	// Reference pwm value for motor

	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8001684:	2100      	movs	r1, #0
 8001686:	48a5      	ldr	r0, [pc, #660]	; (800191c <motor+0x2cc>)
 8001688:	f002 ff70 	bl	800456c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 800168c:	2104      	movs	r1, #4
 800168e:	48a3      	ldr	r0, [pc, #652]	; (800191c <motor+0x2cc>)
 8001690:	f002 ff6c 	bl	800456c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001694:	210c      	movs	r1, #12
 8001696:	48a2      	ldr	r0, [pc, #648]	; (8001920 <motor+0x2d0>)
 8001698:	f002 ff68 	bl	800456c <HAL_TIM_PWM_Start>

  /* Infinite loop */
  for(;;)
  {
	  if(isEmptyQueue(q) != 1){
 800169c:	4ba1      	ldr	r3, [pc, #644]	; (8001924 <motor+0x2d4>)
 800169e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80016a2:	f7ff ffb9 	bl	8001618 <isEmptyQueue>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	f000 8210 	beq.w	8001ace <motor+0x47e>
			  uint8_t hello[50];	// OLED string buffer
			  getFront(q);			// Setting values according to queue head
 80016ae:	4b9d      	ldr	r3, [pc, #628]	; (8001924 <motor+0x2d4>)
 80016b0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80016b4:	f7ff ff8c 	bl	80015d0 <getFront>

			  // OLED Print direction and Turn
			  sprintf(hello, "Dir %c : %d\0", frontback, fb_speed - 48);
 80016b8:	4b9b      	ldr	r3, [pc, #620]	; (8001928 <motor+0x2d8>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	461a      	mov	r2, r3
 80016be:	4b9b      	ldr	r3, [pc, #620]	; (800192c <motor+0x2dc>)
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	3b30      	subs	r3, #48	; 0x30
 80016c4:	f107 0008 	add.w	r0, r7, #8
 80016c8:	4999      	ldr	r1, [pc, #612]	; (8001930 <motor+0x2e0>)
 80016ca:	f008 f873 	bl	80097b4 <siprintf>
			  OLED_ShowString(10, 20, hello);
 80016ce:	f107 0308 	add.w	r3, r7, #8
 80016d2:	461a      	mov	r2, r3
 80016d4:	2114      	movs	r1, #20
 80016d6:	200a      	movs	r0, #10
 80016d8:	f007 fe6e 	bl	80093b8 <OLED_ShowString>

			  sprintf(hello, "Turn %c: %d\0", leftright, lr_speed - 48);
 80016dc:	4b95      	ldr	r3, [pc, #596]	; (8001934 <motor+0x2e4>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	461a      	mov	r2, r3
 80016e2:	4b95      	ldr	r3, [pc, #596]	; (8001938 <motor+0x2e8>)
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	3b30      	subs	r3, #48	; 0x30
 80016e8:	f107 0008 	add.w	r0, r7, #8
 80016ec:	4993      	ldr	r1, [pc, #588]	; (800193c <motor+0x2ec>)
 80016ee:	f008 f861 	bl	80097b4 <siprintf>
			  OLED_ShowString(10, 30, hello);
 80016f2:	f107 0308 	add.w	r3, r7, #8
 80016f6:	461a      	mov	r2, r3
 80016f8:	211e      	movs	r1, #30
 80016fa:	200a      	movs	r0, #10
 80016fc:	f007 fe5c 	bl	80093b8 <OLED_ShowString>

		  	  accelerate = 1; // Default always start with acceleration
 8001700:	2301      	movs	r3, #1
 8001702:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45

		  	  if(lr_speed == '0')
 8001706:	4b8c      	ldr	r3, [pc, #560]	; (8001938 <motor+0x2e8>)
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	2b30      	cmp	r3, #48	; 0x30
 800170c:	d104      	bne.n	8001718 <motor+0xc8>
		  		  motor_reference = 2400;
 800170e:	f44f 6316 	mov.w	r3, #2400	; 0x960
 8001712:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8001716:	e003      	b.n	8001720 <motor+0xd0>
		  	  else
		  		  motor_reference = 2000;
 8001718:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800171c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

		  	  // Turn Servo to desired position
		  	  // Centre - offset for left turn
		  	  if(leftright == 'a'){
 8001720:	4b84      	ldr	r3, [pc, #528]	; (8001934 <motor+0x2e4>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	2b61      	cmp	r3, #97	; 0x61
 8001726:	d14e      	bne.n	80017c6 <motor+0x176>
		  		  htim1.Instance->CCR4 = pwmVal_servo - 1.1*(lr_speed-48) *servo_max;
 8001728:	4b85      	ldr	r3, [pc, #532]	; (8001940 <motor+0x2f0>)
 800172a:	881b      	ldrh	r3, [r3, #0]
 800172c:	4618      	mov	r0, r3
 800172e:	f7fe fef1 	bl	8000514 <__aeabi_i2d>
 8001732:	4604      	mov	r4, r0
 8001734:	460d      	mov	r5, r1
 8001736:	4b80      	ldr	r3, [pc, #512]	; (8001938 <motor+0x2e8>)
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	3b30      	subs	r3, #48	; 0x30
 800173c:	4618      	mov	r0, r3
 800173e:	f7fe fee9 	bl	8000514 <__aeabi_i2d>
 8001742:	a36f      	add	r3, pc, #444	; (adr r3, 8001900 <motor+0x2b0>)
 8001744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001748:	f7fe ff4e 	bl	80005e8 <__aeabi_dmul>
 800174c:	4602      	mov	r2, r0
 800174e:	460b      	mov	r3, r1
 8001750:	4690      	mov	r8, r2
 8001752:	4699      	mov	r9, r3
 8001754:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001758:	4618      	mov	r0, r3
 800175a:	f7fe fedb 	bl	8000514 <__aeabi_i2d>
 800175e:	4602      	mov	r2, r0
 8001760:	460b      	mov	r3, r1
 8001762:	4640      	mov	r0, r8
 8001764:	4649      	mov	r1, r9
 8001766:	f7fe ff3f 	bl	80005e8 <__aeabi_dmul>
 800176a:	4602      	mov	r2, r0
 800176c:	460b      	mov	r3, r1
 800176e:	4620      	mov	r0, r4
 8001770:	4629      	mov	r1, r5
 8001772:	f7fe fd81 	bl	8000278 <__aeabi_dsub>
 8001776:	4602      	mov	r2, r0
 8001778:	460b      	mov	r3, r1
 800177a:	4969      	ldr	r1, [pc, #420]	; (8001920 <motor+0x2d0>)
 800177c:	680c      	ldr	r4, [r1, #0]
 800177e:	4610      	mov	r0, r2
 8001780:	4619      	mov	r1, r3
 8001782:	f7ff f96b 	bl	8000a5c <__aeabi_d2uiz>
 8001786:	4603      	mov	r3, r0
 8001788:	6423      	str	r3, [r4, #64]	; 0x40
		  		  // right motor offset
		  		  // right motor have to spin more due to differential steering
		  		  motor_offset_r = 0.05*(lr_speed-48)+1;
 800178a:	4b6b      	ldr	r3, [pc, #428]	; (8001938 <motor+0x2e8>)
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	3b30      	subs	r3, #48	; 0x30
 8001790:	4618      	mov	r0, r3
 8001792:	f7fe febf 	bl	8000514 <__aeabi_i2d>
 8001796:	a35c      	add	r3, pc, #368	; (adr r3, 8001908 <motor+0x2b8>)
 8001798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800179c:	f7fe ff24 	bl	80005e8 <__aeabi_dmul>
 80017a0:	4602      	mov	r2, r0
 80017a2:	460b      	mov	r3, r1
 80017a4:	4610      	mov	r0, r2
 80017a6:	4619      	mov	r1, r3
 80017a8:	f04f 0200 	mov.w	r2, #0
 80017ac:	4b5a      	ldr	r3, [pc, #360]	; (8001918 <motor+0x2c8>)
 80017ae:	f7fe fd65 	bl	800027c <__adddf3>
 80017b2:	4602      	mov	r2, r0
 80017b4:	460b      	mov	r3, r1
 80017b6:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
		  		  motor_offset_l = 1;
 80017ba:	f04f 0200 	mov.w	r2, #0
 80017be:	4b56      	ldr	r3, [pc, #344]	; (8001918 <motor+0x2c8>)
 80017c0:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 80017c4:	e051      	b.n	800186a <motor+0x21a>

		  	  }
		  	  else if(leftright =='d'){
 80017c6:	4b5b      	ldr	r3, [pc, #364]	; (8001934 <motor+0x2e4>)
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	2b64      	cmp	r3, #100	; 0x64
 80017cc:	d14d      	bne.n	800186a <motor+0x21a>
		  		  htim1.Instance->CCR4 = pwmVal_servo + 1.7*(lr_speed-48) *servo_max;
 80017ce:	4b5c      	ldr	r3, [pc, #368]	; (8001940 <motor+0x2f0>)
 80017d0:	881b      	ldrh	r3, [r3, #0]
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7fe fe9e 	bl	8000514 <__aeabi_i2d>
 80017d8:	4604      	mov	r4, r0
 80017da:	460d      	mov	r5, r1
 80017dc:	4b56      	ldr	r3, [pc, #344]	; (8001938 <motor+0x2e8>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	3b30      	subs	r3, #48	; 0x30
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7fe fe96 	bl	8000514 <__aeabi_i2d>
 80017e8:	a349      	add	r3, pc, #292	; (adr r3, 8001910 <motor+0x2c0>)
 80017ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ee:	f7fe fefb 	bl	80005e8 <__aeabi_dmul>
 80017f2:	4602      	mov	r2, r0
 80017f4:	460b      	mov	r3, r1
 80017f6:	4690      	mov	r8, r2
 80017f8:	4699      	mov	r9, r3
 80017fa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80017fe:	4618      	mov	r0, r3
 8001800:	f7fe fe88 	bl	8000514 <__aeabi_i2d>
 8001804:	4602      	mov	r2, r0
 8001806:	460b      	mov	r3, r1
 8001808:	4640      	mov	r0, r8
 800180a:	4649      	mov	r1, r9
 800180c:	f7fe feec 	bl	80005e8 <__aeabi_dmul>
 8001810:	4602      	mov	r2, r0
 8001812:	460b      	mov	r3, r1
 8001814:	4620      	mov	r0, r4
 8001816:	4629      	mov	r1, r5
 8001818:	f7fe fd30 	bl	800027c <__adddf3>
 800181c:	4602      	mov	r2, r0
 800181e:	460b      	mov	r3, r1
 8001820:	493f      	ldr	r1, [pc, #252]	; (8001920 <motor+0x2d0>)
 8001822:	680c      	ldr	r4, [r1, #0]
 8001824:	4610      	mov	r0, r2
 8001826:	4619      	mov	r1, r3
 8001828:	f7ff f918 	bl	8000a5c <__aeabi_d2uiz>
 800182c:	4603      	mov	r3, r0
 800182e:	6423      	str	r3, [r4, #64]	; 0x40
		  		  // left motor offset
		  		  motor_offset_r = 1;
 8001830:	f04f 0200 	mov.w	r2, #0
 8001834:	4b38      	ldr	r3, [pc, #224]	; (8001918 <motor+0x2c8>)
 8001836:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
		  		  motor_offset_l = 0.05*(lr_speed-48)+1;
 800183a:	4b3f      	ldr	r3, [pc, #252]	; (8001938 <motor+0x2e8>)
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	3b30      	subs	r3, #48	; 0x30
 8001840:	4618      	mov	r0, r3
 8001842:	f7fe fe67 	bl	8000514 <__aeabi_i2d>
 8001846:	a330      	add	r3, pc, #192	; (adr r3, 8001908 <motor+0x2b8>)
 8001848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800184c:	f7fe fecc 	bl	80005e8 <__aeabi_dmul>
 8001850:	4602      	mov	r2, r0
 8001852:	460b      	mov	r3, r1
 8001854:	4610      	mov	r0, r2
 8001856:	4619      	mov	r1, r3
 8001858:	f04f 0200 	mov.w	r2, #0
 800185c:	4b2e      	ldr	r3, [pc, #184]	; (8001918 <motor+0x2c8>)
 800185e:	f7fe fd0d 	bl	800027c <__adddf3>
 8001862:	4602      	mov	r2, r0
 8001864:	460b      	mov	r3, r1
 8001866:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
		  	  }

		  	  pwmVal_motor = motor_min;
 800186a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800186c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

		  	  // Move Motor forward
		  	  if(frontback == 'w'){
 8001870:	4b2d      	ldr	r3, [pc, #180]	; (8001928 <motor+0x2d8>)
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	2b77      	cmp	r3, #119	; 0x77
 8001876:	f040 80a3 	bne.w	80019c0 <motor+0x370>
		  		  do
		  		  	  {
		  		  		  // H-Bridge Circuit for AINx; 1 turn on, the other turns off
		  		  		  // MOTOR A
		  		  		  HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 800187a:	2201      	movs	r2, #1
 800187c:	2104      	movs	r1, #4
 800187e:	4831      	ldr	r0, [pc, #196]	; (8001944 <motor+0x2f4>)
 8001880:	f001 f982 	bl	8002b88 <HAL_GPIO_WritePin>
		  		  		  HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 8001884:	2200      	movs	r2, #0
 8001886:	2108      	movs	r1, #8
 8001888:	482e      	ldr	r0, [pc, #184]	; (8001944 <motor+0x2f4>)
 800188a:	f001 f97d 	bl	8002b88 <HAL_GPIO_WritePin>

		  		  		  // MOTOR B
		  		  		  HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 800188e:	2201      	movs	r2, #1
 8001890:	2120      	movs	r1, #32
 8001892:	482c      	ldr	r0, [pc, #176]	; (8001944 <motor+0x2f4>)
 8001894:	f001 f978 	bl	8002b88 <HAL_GPIO_WritePin>
		  		  		  HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 8001898:	2200      	movs	r2, #0
 800189a:	2110      	movs	r1, #16
 800189c:	4829      	ldr	r0, [pc, #164]	; (8001944 <motor+0x2f4>)
 800189e:	f001 f973 	bl	8002b88 <HAL_GPIO_WritePin>

		  		  		  if(accelerate == 1){
 80018a2:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d14e      	bne.n	8001948 <motor+0x2f8>
		  		  			  pwmVal_motor+=motor_increment;	// Accelerating
 80018aa:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80018ae:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80018b0:	4413      	add	r3, r2
 80018b2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
		  		  			  if(pwmVal_motor > motor_reference){
 80018b6:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80018ba:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80018be:	429a      	cmp	r2, r3
 80018c0:	d94e      	bls.n	8001960 <motor+0x310>
		  		  				  accelerate = 0;				// Decelerate Flag
 80018c2:	2300      	movs	r3, #0
 80018c4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45

		  		  				if(fb_speed == 'u')
 80018c8:	4b18      	ldr	r3, [pc, #96]	; (800192c <motor+0x2dc>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	2b75      	cmp	r3, #117	; 0x75
 80018ce:	d103      	bne.n	80018d8 <motor+0x288>
		  		  					osDelay(10);
 80018d0:	200a      	movs	r0, #10
 80018d2:	f004 fe37 	bl	8006544 <osDelay>
 80018d6:	e043      	b.n	8001960 <motor+0x310>
								else if((fb_speed-48)*230-20 > 0)	// Prevent infinite forward move through negative value
 80018d8:	4b14      	ldr	r3, [pc, #80]	; (800192c <motor+0x2dc>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	3b30      	subs	r3, #48	; 0x30
 80018de:	22e6      	movs	r2, #230	; 0xe6
 80018e0:	fb02 f303 	mul.w	r3, r2, r3
 80018e4:	2b14      	cmp	r3, #20
 80018e6:	dd3b      	ble.n	8001960 <motor+0x310>
									osDelay((fb_speed-48)*230-20);// Constant speed for time
 80018e8:	4b10      	ldr	r3, [pc, #64]	; (800192c <motor+0x2dc>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	3b30      	subs	r3, #48	; 0x30
 80018ee:	22e6      	movs	r2, #230	; 0xe6
 80018f0:	fb02 f303 	mul.w	r3, r2, r3
 80018f4:	3b14      	subs	r3, #20
 80018f6:	4618      	mov	r0, r3
 80018f8:	f004 fe24 	bl	8006544 <osDelay>
 80018fc:	e030      	b.n	8001960 <motor+0x310>
 80018fe:	bf00      	nop
 8001900:	9999999a 	.word	0x9999999a
 8001904:	3ff19999 	.word	0x3ff19999
 8001908:	9999999a 	.word	0x9999999a
 800190c:	3fa99999 	.word	0x3fa99999
 8001910:	33333333 	.word	0x33333333
 8001914:	3ffb3333 	.word	0x3ffb3333
 8001918:	3ff00000 	.word	0x3ff00000
 800191c:	200001c8 	.word	0x200001c8
 8001920:	200000f0 	.word	0x200000f0
 8001924:	200002a4 	.word	0x200002a4
 8001928:	20000000 	.word	0x20000000
 800192c:	20000001 	.word	0x20000001
 8001930:	08009edc 	.word	0x08009edc
 8001934:	20000002 	.word	0x20000002
 8001938:	20000003 	.word	0x20000003
 800193c:	08009eec 	.word	0x08009eec
 8001940:	20000004 	.word	0x20000004
 8001944:	40020000 	.word	0x40020000


		  		  		  }

		  		  		  else
		  		  			pwmVal_motor-=5*motor_increment;
 8001948:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800194a:	461a      	mov	r2, r3
 800194c:	0392      	lsls	r2, r2, #14
 800194e:	1ad2      	subs	r2, r2, r3
 8001950:	0092      	lsls	r2, r2, #2
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	b29a      	uxth	r2, r3
 8001956:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800195a:	4413      	add	r3, r2
 800195c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
		  		  		   * If left turns more than right, value will be negative; motor_r -(neg_offset), motor_l + (neg_offset)
		  		  		   * Used 0.5 as scale factor as values in int, so only offset of >=2 will actually increment the motor value
		  		  		   * as integers are rounded down. E.g. offset = 1, 0.5-0.05*1 = 0.45 = 0 -> motor has no additional increment
		  		  		   *  - (0.5-0.05*(lr_speed-48))*encoder_offset ;  - (-0.5+0.05*(lr_speed-48))*encoder_offset
		  		  		   */
		  		  		  __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, motor_offset_r*pwmVal_motor);
 8001960:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001964:	4618      	mov	r0, r3
 8001966:	f7fe fdd5 	bl	8000514 <__aeabi_i2d>
 800196a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800196e:	f7fe fe3b 	bl	80005e8 <__aeabi_dmul>
 8001972:	4602      	mov	r2, r0
 8001974:	460b      	mov	r3, r1
 8001976:	495e      	ldr	r1, [pc, #376]	; (8001af0 <motor+0x4a0>)
 8001978:	680c      	ldr	r4, [r1, #0]
 800197a:	4610      	mov	r0, r2
 800197c:	4619      	mov	r1, r3
 800197e:	f7ff f86d 	bl	8000a5c <__aeabi_d2uiz>
 8001982:	4603      	mov	r3, r0
 8001984:	6363      	str	r3, [r4, #52]	; 0x34
		  		  		  __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, motor_offset_l*pwmVal_motor);
 8001986:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800198a:	4618      	mov	r0, r3
 800198c:	f7fe fdc2 	bl	8000514 <__aeabi_i2d>
 8001990:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001994:	f7fe fe28 	bl	80005e8 <__aeabi_dmul>
 8001998:	4602      	mov	r2, r0
 800199a:	460b      	mov	r3, r1
 800199c:	4954      	ldr	r1, [pc, #336]	; (8001af0 <motor+0x4a0>)
 800199e:	680c      	ldr	r4, [r1, #0]
 80019a0:	4610      	mov	r0, r2
 80019a2:	4619      	mov	r1, r3
 80019a4:	f7ff f85a 	bl	8000a5c <__aeabi_d2uiz>
 80019a8:	4603      	mov	r3, r0
 80019aa:	63a3      	str	r3, [r4, #56]	; 0x38
		  		  		  osDelay(10);
 80019ac:	200a      	movs	r0, #10
 80019ae:	f004 fdc9 	bl	8006544 <osDelay>

		  		  	  }while(pwmVal_motor > motor_min);
 80019b2:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80019b6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80019b8:	429a      	cmp	r2, r3
 80019ba:	f63f af5e 	bhi.w	800187a <motor+0x22a>
 80019be:	e07f      	b.n	8001ac0 <motor+0x470>
		  	  }

		  	  else if(frontback == 's'){
 80019c0:	4b4c      	ldr	r3, [pc, #304]	; (8001af4 <motor+0x4a4>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	2b73      	cmp	r3, #115	; 0x73
 80019c6:	d17b      	bne.n	8001ac0 <motor+0x470>
		  		  do
		  		  	  {
		  		  		  // MOTOR A
		  		  		  HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 80019c8:	2200      	movs	r2, #0
 80019ca:	2104      	movs	r1, #4
 80019cc:	484a      	ldr	r0, [pc, #296]	; (8001af8 <motor+0x4a8>)
 80019ce:	f001 f8db 	bl	8002b88 <HAL_GPIO_WritePin>
		  		  		  HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 80019d2:	2201      	movs	r2, #1
 80019d4:	2108      	movs	r1, #8
 80019d6:	4848      	ldr	r0, [pc, #288]	; (8001af8 <motor+0x4a8>)
 80019d8:	f001 f8d6 	bl	8002b88 <HAL_GPIO_WritePin>

		  		  		  // MOTOR B
		  		  		  HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 80019dc:	2200      	movs	r2, #0
 80019de:	2120      	movs	r1, #32
 80019e0:	4845      	ldr	r0, [pc, #276]	; (8001af8 <motor+0x4a8>)
 80019e2:	f001 f8d1 	bl	8002b88 <HAL_GPIO_WritePin>
		  		  		  HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET);
 80019e6:	2201      	movs	r2, #1
 80019e8:	2110      	movs	r1, #16
 80019ea:	4843      	ldr	r0, [pc, #268]	; (8001af8 <motor+0x4a8>)
 80019ec:	f001 f8cc 	bl	8002b88 <HAL_GPIO_WritePin>

		  		  		  if(accelerate == 1){
 80019f0:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d129      	bne.n	8001a4c <motor+0x3fc>
		  		  			pwmVal_motor+=motor_increment;	// Accelerating
 80019f8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80019fc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80019fe:	4413      	add	r3, r2
 8001a00:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
							if(pwmVal_motor > motor_reference){
 8001a04:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8001a08:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d929      	bls.n	8001a64 <motor+0x414>
							  accelerate = 0;				// Decelerate flag
 8001a10:	2300      	movs	r3, #0
 8001a12:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45

							  if(fb_speed == 'u')
 8001a16:	4b39      	ldr	r3, [pc, #228]	; (8001afc <motor+0x4ac>)
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	2b75      	cmp	r3, #117	; 0x75
 8001a1c:	d103      	bne.n	8001a26 <motor+0x3d6>
								  osDelay(10);
 8001a1e:	200a      	movs	r0, #10
 8001a20:	f004 fd90 	bl	8006544 <osDelay>
 8001a24:	e01e      	b.n	8001a64 <motor+0x414>
							  else if((fb_speed-48)*250-20 > 0)	// Prevent infinite forward move through negative value
 8001a26:	4b35      	ldr	r3, [pc, #212]	; (8001afc <motor+0x4ac>)
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	3b30      	subs	r3, #48	; 0x30
 8001a2c:	22fa      	movs	r2, #250	; 0xfa
 8001a2e:	fb02 f303 	mul.w	r3, r2, r3
 8001a32:	2b14      	cmp	r3, #20
 8001a34:	dd16      	ble.n	8001a64 <motor+0x414>
								  osDelay((fb_speed-48)*250-20);// Constant speed for time
 8001a36:	4b31      	ldr	r3, [pc, #196]	; (8001afc <motor+0x4ac>)
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	3b30      	subs	r3, #48	; 0x30
 8001a3c:	22fa      	movs	r2, #250	; 0xfa
 8001a3e:	fb02 f303 	mul.w	r3, r2, r3
 8001a42:	3b14      	subs	r3, #20
 8001a44:	4618      	mov	r0, r3
 8001a46:	f004 fd7d 	bl	8006544 <osDelay>
 8001a4a:	e00b      	b.n	8001a64 <motor+0x414>
							}
		  		  		  }

		  		  		  else
		  		  			pwmVal_motor-=5*motor_increment;
 8001a4c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001a4e:	461a      	mov	r2, r3
 8001a50:	0392      	lsls	r2, r2, #14
 8001a52:	1ad2      	subs	r2, r2, r3
 8001a54:	0092      	lsls	r2, r2, #2
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	b29a      	uxth	r2, r3
 8001a5a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001a5e:	4413      	add	r3, r2
 8001a60:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46

		  		  		  __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, motor_offset_r*pwmVal_motor);
 8001a64:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7fe fd53 	bl	8000514 <__aeabi_i2d>
 8001a6e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001a72:	f7fe fdb9 	bl	80005e8 <__aeabi_dmul>
 8001a76:	4602      	mov	r2, r0
 8001a78:	460b      	mov	r3, r1
 8001a7a:	491d      	ldr	r1, [pc, #116]	; (8001af0 <motor+0x4a0>)
 8001a7c:	680c      	ldr	r4, [r1, #0]
 8001a7e:	4610      	mov	r0, r2
 8001a80:	4619      	mov	r1, r3
 8001a82:	f7fe ffeb 	bl	8000a5c <__aeabi_d2uiz>
 8001a86:	4603      	mov	r3, r0
 8001a88:	6363      	str	r3, [r4, #52]	; 0x34
		  				  __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, motor_offset_l*pwmVal_motor);
 8001a8a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7fe fd40 	bl	8000514 <__aeabi_i2d>
 8001a94:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001a98:	f7fe fda6 	bl	80005e8 <__aeabi_dmul>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	4913      	ldr	r1, [pc, #76]	; (8001af0 <motor+0x4a0>)
 8001aa2:	680c      	ldr	r4, [r1, #0]
 8001aa4:	4610      	mov	r0, r2
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	f7fe ffd8 	bl	8000a5c <__aeabi_d2uiz>
 8001aac:	4603      	mov	r3, r0
 8001aae:	63a3      	str	r3, [r4, #56]	; 0x38
		  		  		  osDelay(10);
 8001ab0:	200a      	movs	r0, #10
 8001ab2:	f004 fd47 	bl	8006544 <osDelay>
		  		  	  }while(pwmVal_motor> motor_min);
 8001ab6:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8001aba:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d883      	bhi.n	80019c8 <motor+0x378>
		  	  }
		  	  osDelay(10);
 8001ac0:	200a      	movs	r0, #10
 8001ac2:	f004 fd3f 	bl	8006544 <osDelay>
		  	  dequeue(&q);
 8001ac6:	480e      	ldr	r0, [pc, #56]	; (8001b00 <motor+0x4b0>)
 8001ac8:	f7ff fd59 	bl	800157e <dequeue>
 8001acc:	e5e6      	b.n	800169c <motor+0x4c>
	  }
	  else{
		  reset_motorVal();	//Reset the values
 8001ace:	f7ff fcff 	bl	80014d0 <reset_motorVal>

		  // Reset Servo values
		  htim1.Instance->CCR4 = pwmVal_servo;
 8001ad2:	4b0c      	ldr	r3, [pc, #48]	; (8001b04 <motor+0x4b4>)
 8001ad4:	881a      	ldrh	r2, [r3, #0]
 8001ad6:	4b0c      	ldr	r3, [pc, #48]	; (8001b08 <motor+0x4b8>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	641a      	str	r2, [r3, #64]	; 0x40

		  // Stop motor
		  __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, 0);
 8001adc:	4b04      	ldr	r3, [pc, #16]	; (8001af0 <motor+0x4a0>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, 0);
 8001ae4:	4b02      	ldr	r3, [pc, #8]	; (8001af0 <motor+0x4a0>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	639a      	str	r2, [r3, #56]	; 0x38
	  if(isEmptyQueue(q) != 1){
 8001aec:	e5d6      	b.n	800169c <motor+0x4c>
 8001aee:	bf00      	nop
 8001af0:	200001c8 	.word	0x200001c8
 8001af4:	20000000 	.word	0x20000000
 8001af8:	40020000 	.word	0x40020000
 8001afc:	20000001 	.word	0x20000001
 8001b00:	200002a4 	.word	0x200002a4
 8001b04:	20000004 	.word	0x20000004
 8001b08:	200000f0 	.word	0x200000f0

08001b0c <encoder_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_encoder_task */
void encoder_task(void *argument)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b08c      	sub	sp, #48	; 0x30
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN encoder_task */
  /* Infinite loop */
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001b14:	213c      	movs	r1, #60	; 0x3c
 8001b16:	4833      	ldr	r0, [pc, #204]	; (8001be4 <encoder_task+0xd8>)
 8001b18:	f002 fe96 	bl	8004848 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 8001b1c:	213c      	movs	r1, #60	; 0x3c
 8001b1e:	4832      	ldr	r0, [pc, #200]	; (8001be8 <encoder_task+0xdc>)
 8001b20:	f002 fe92 	bl	8004848 <HAL_TIM_Encoder_Start>

	int cnt1, diffa=0;
 8001b24:	2300      	movs	r3, #0
 8001b26:	62fb      	str	r3, [r7, #44]	; 0x2c
	int cnt2, diffb=0;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t tick;

	tick = HAL_GetTick();
 8001b2c:	f000 fcbc 	bl	80024a8 <HAL_GetTick>
 8001b30:	6278      	str	r0, [r7, #36]	; 0x24
	uint8_t msg[20];

	for(;;)
	{
		// Every 1000 ticks, get reading(How fast wheel turn)
		if(HAL_GetTick()-tick > 10){
 8001b32:	f000 fcb9 	bl	80024a8 <HAL_GetTick>
 8001b36:	4602      	mov	r2, r0
 8001b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	2b0a      	cmp	r3, #10
 8001b3e:	d9f8      	bls.n	8001b32 <encoder_task+0x26>
			// At rising edge, counter increase by 1
			cnt1 = __HAL_TIM_GET_COUNTER(&htim2);
 8001b40:	4b28      	ldr	r3, [pc, #160]	; (8001be4 <encoder_task+0xd8>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b46:	623b      	str	r3, [r7, #32]
			cnt2 = __HAL_TIM_GET_COUNTER(&htim3);
 8001b48:	4b27      	ldr	r3, [pc, #156]	; (8001be8 <encoder_task+0xdc>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b4e:	61fb      	str	r3, [r7, #28]

			/* Motor A */
			// Counting up; Motor moving forward
			// 32500 is the max tick
			if(cnt1 - 32500 > 0){
 8001b50:	6a3b      	ldr	r3, [r7, #32]
 8001b52:	f647 62f4 	movw	r2, #32500	; 0x7ef4
 8001b56:	4293      	cmp	r3, r2
 8001b58:	dd05      	ble.n	8001b66 <encoder_task+0x5a>
				diffa = cnt1 - 65535;
 8001b5a:	6a3b      	ldr	r3, [r7, #32]
 8001b5c:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8001b60:	3bff      	subs	r3, #255	; 0xff
 8001b62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b64:	e006      	b.n	8001b74 <encoder_task+0x68>
			}
			// Counting down; Motor moving backward
			else if(cnt1 - 32500 < 0){
 8001b66:	6a3b      	ldr	r3, [r7, #32]
 8001b68:	f647 62f3 	movw	r2, #32499	; 0x7ef3
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	dc01      	bgt.n	8001b74 <encoder_task+0x68>
				diffa = cnt1;
 8001b70:	6a3b      	ldr	r3, [r7, #32]
 8001b72:	62fb      	str	r3, [r7, #44]	; 0x2c
			}

			/* Motor B */
			// Counting up; Motor moving backward
			if(cnt2 - 32500 > 0){
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	f647 62f4 	movw	r2, #32500	; 0x7ef4
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	dd05      	ble.n	8001b8a <encoder_task+0x7e>
				diffb = (cnt2 - 65535);
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8001b84:	3bff      	subs	r3, #255	; 0xff
 8001b86:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b88:	e006      	b.n	8001b98 <encoder_task+0x8c>
			}
			// Counting down; Motor moving forward
			else if(cnt2 - 32500 < 0){
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	f647 62f3 	movw	r2, #32499	; 0x7ef3
 8001b90:	4293      	cmp	r3, r2
 8001b92:	dc01      	bgt.n	8001b98 <encoder_task+0x8c>
				diffb = cnt2;
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	62bb      	str	r3, [r7, #40]	; 0x28
			}

			encoder_offset = diffa + diffb;
 8001b98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b9c:	4413      	add	r3, r2
 8001b9e:	4a13      	ldr	r2, [pc, #76]	; (8001bec <encoder_task+0xe0>)
 8001ba0:	6013      	str	r3, [r2, #0]
			// Display difference
			sprintf(msg, "Diff : %3d\0", encoder_offset);
 8001ba2:	4b12      	ldr	r3, [pc, #72]	; (8001bec <encoder_task+0xe0>)
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	f107 0308 	add.w	r3, r7, #8
 8001baa:	4911      	ldr	r1, [pc, #68]	; (8001bf0 <encoder_task+0xe4>)
 8001bac:	4618      	mov	r0, r3
 8001bae:	f007 fe01 	bl	80097b4 <siprintf>

			OLED_ShowString(10,40,msg);
 8001bb2:	f107 0308 	add.w	r3, r7, #8
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	2128      	movs	r1, #40	; 0x28
 8001bba:	200a      	movs	r0, #10
 8001bbc:	f007 fbfc 	bl	80093b8 <OLED_ShowString>
			OLED_Refresh_Gram();
 8001bc0:	f007 fa86 	bl	80090d0 <OLED_Refresh_Gram>
			// Reset base tick
			__HAL_TIM_SET_COUNTER(&htim2, 0);
 8001bc4:	4b07      	ldr	r3, [pc, #28]	; (8001be4 <encoder_task+0xd8>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	625a      	str	r2, [r3, #36]	; 0x24
			__HAL_TIM_SET_COUNTER(&htim3, 0);
 8001bcc:	4b06      	ldr	r3, [pc, #24]	; (8001be8 <encoder_task+0xdc>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	625a      	str	r2, [r3, #36]	; 0x24

			tick = HAL_GetTick();
 8001bd4:	f000 fc68 	bl	80024a8 <HAL_GetTick>
 8001bd8:	6278      	str	r0, [r7, #36]	; 0x24

			osDelay(10);
 8001bda:	200a      	movs	r0, #10
 8001bdc:	f004 fcb2 	bl	8006544 <osDelay>
		if(HAL_GetTick()-tick > 10){
 8001be0:	e7a7      	b.n	8001b32 <encoder_task+0x26>
 8001be2:	bf00      	nop
 8001be4:	20000138 	.word	0x20000138
 8001be8:	20000180 	.word	0x20000180
 8001bec:	200002a0 	.word	0x200002a0
 8001bf0:	08009efc 	.word	0x08009efc
 8001bf4:	00000000 	.word	0x00000000

08001bf8 <gyro_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_gyro_task */
void gyro_task(void *argument)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b08a      	sub	sp, #40	; 0x28
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN gyro_task */
  /* Infinite loop */
	uint8_t val[2] = { 0, 0 }; // To store ICM gyro values
 8001c00:	2300      	movs	r3, #0
 8001c02:	823b      	strh	r3, [r7, #16]
	gyroInit();
 8001c04:	f007 f9d0 	bl	8008fa8 <gyroInit>
	int16_t angular_speed = 0;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	84bb      	strh	r3, [r7, #36]	; 0x24
	int16_t angle = 0;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	847b      	strh	r3, [r7, #34]	; 0x22

	uint8_t msg[8];

	// PID values
	uint8_t kp = 8;
 8001c10:	2308      	movs	r3, #8
 8001c12:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	uint8_t ki = 0.8;
 8001c16:	2300      	movs	r3, #0
 8001c18:	f887 3020 	strb.w	r3, [r7, #32]
	int16_t eintegral = 0;	// Integral error
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	84fb      	strh	r3, [r7, #38]	; 0x26

	int32_t err;			// To total error for Integral

	// Set servo value to centre
	uint8_t servo_val = pwmVal_servo;
 8001c20:	4b99      	ldr	r3, [pc, #612]	; (8001e88 <gyro_task+0x290>)
 8001c22:	881b      	ldrh	r3, [r3, #0]
 8001c24:	77fb      	strb	r3, [r7, #31]

	int turn_angle = 75;	// gyro turn threshold for 90deg
 8001c26:	234b      	movs	r3, #75	; 0x4b
 8001c28:	61bb      	str	r3, [r7, #24]
	osDelay(100);
 8001c2a:	2064      	movs	r0, #100	; 0x64
 8001c2c:	f004 fc8a 	bl	8006544 <osDelay>
	for(;;)
	{
		// Gyro Function for turning
		if(lr_speed >= '4'){
 8001c30:	4b96      	ldr	r3, [pc, #600]	; (8001e8c <gyro_task+0x294>)
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	2b33      	cmp	r3, #51	; 0x33
 8001c36:	f240 8082 	bls.w	8001d3e <gyro_task+0x146>
			gyroStart();	// Start Gyro Reading
 8001c3a:	f007 f9a3 	bl	8008f84 <gyroStart>

			// Continue Reading Gyro until hit threshold
			while(abs((int) curAngle) < turn_angle){
 8001c3e:	e056      	b.n	8001cee <gyro_task+0xf6>
				readByte(0x37, val);
 8001c40:	f107 0310 	add.w	r3, r7, #16
 8001c44:	4619      	mov	r1, r3
 8001c46:	2037      	movs	r0, #55	; 0x37
 8001c48:	f007 f9f2 	bl	8009030 <readByte>
				angular_speed = (val[0] << 8) | val[1];	// appending the 2 bytes together
 8001c4c:	7c3b      	ldrb	r3, [r7, #16]
 8001c4e:	021b      	lsls	r3, r3, #8
 8001c50:	b21a      	sxth	r2, r3
 8001c52:	7c7b      	ldrb	r3, [r7, #17]
 8001c54:	b21b      	sxth	r3, r3
 8001c56:	4313      	orrs	r3, r2
 8001c58:	84bb      	strh	r3, [r7, #36]	; 0x24
				angle = ((double)(angular_speed*(100) - 2) / 16400.0)*1.1 ; //1.69
 8001c5a:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001c5e:	2264      	movs	r2, #100	; 0x64
 8001c60:	fb02 f303 	mul.w	r3, r2, r3
 8001c64:	3b02      	subs	r3, #2
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7fe fc54 	bl	8000514 <__aeabi_i2d>
 8001c6c:	a382      	add	r3, pc, #520	; (adr r3, 8001e78 <gyro_task+0x280>)
 8001c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c72:	f7fe fde3 	bl	800083c <__aeabi_ddiv>
 8001c76:	4602      	mov	r2, r0
 8001c78:	460b      	mov	r3, r1
 8001c7a:	4610      	mov	r0, r2
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	a380      	add	r3, pc, #512	; (adr r3, 8001e80 <gyro_task+0x288>)
 8001c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c84:	f7fe fcb0 	bl	80005e8 <__aeabi_dmul>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	460b      	mov	r3, r1
 8001c8c:	4610      	mov	r0, r2
 8001c8e:	4619      	mov	r1, r3
 8001c90:	f7fe febc 	bl	8000a0c <__aeabi_d2iz>
 8001c94:	4603      	mov	r3, r0
 8001c96:	847b      	strh	r3, [r7, #34]	; 0x22

				// If condition to prevent gyro drift
//				if((angle > 1)||(angle <0))
					curAngle += angle;
 8001c98:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7fe fc39 	bl	8000514 <__aeabi_i2d>
 8001ca2:	4b7b      	ldr	r3, [pc, #492]	; (8001e90 <gyro_task+0x298>)
 8001ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ca8:	f7fe fae8 	bl	800027c <__adddf3>
 8001cac:	4602      	mov	r2, r0
 8001cae:	460b      	mov	r3, r1
 8001cb0:	4977      	ldr	r1, [pc, #476]	; (8001e90 <gyro_task+0x298>)
 8001cb2:	e9c1 2300 	strd	r2, r3, [r1]

				sprintf(msg, "gyro : %3d\0", (int)curAngle);
 8001cb6:	4b76      	ldr	r3, [pc, #472]	; (8001e90 <gyro_task+0x298>)
 8001cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cbc:	4610      	mov	r0, r2
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	f7fe fea4 	bl	8000a0c <__aeabi_d2iz>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	f107 0308 	add.w	r3, r7, #8
 8001cca:	4972      	ldr	r1, [pc, #456]	; (8001e94 <gyro_task+0x29c>)
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f007 fd71 	bl	80097b4 <siprintf>
				OLED_ShowString(10, 10, msg);
 8001cd2:	f107 0308 	add.w	r3, r7, #8
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	210a      	movs	r1, #10
 8001cda:	200a      	movs	r0, #10
 8001cdc:	f007 fb6c 	bl	80093b8 <OLED_ShowString>

				if(fb_speed == '0')
 8001ce0:	4b6d      	ldr	r3, [pc, #436]	; (8001e98 <gyro_task+0x2a0>)
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	2b30      	cmp	r3, #48	; 0x30
 8001ce6:	d011      	beq.n	8001d0c <gyro_task+0x114>
					break;
				osDelay(100);
 8001ce8:	2064      	movs	r0, #100	; 0x64
 8001cea:	f004 fc2b 	bl	8006544 <osDelay>
			while(abs((int) curAngle) < turn_angle){
 8001cee:	4b68      	ldr	r3, [pc, #416]	; (8001e90 <gyro_task+0x298>)
 8001cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cf4:	4610      	mov	r0, r2
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	f7fe fe88 	bl	8000a0c <__aeabi_d2iz>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	bfb8      	it	lt
 8001d02:	425b      	neglt	r3, r3
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	429a      	cmp	r2, r3
 8001d08:	dc9a      	bgt.n	8001c40 <gyro_task+0x48>
 8001d0a:	e000      	b.n	8001d0e <gyro_task+0x116>
					break;
 8001d0c:	bf00      	nop
			}

			// Once Threshold reached, turn servo centre
			htim1.Instance->CCR4 = pwmVal_servo;	// Turn servo to the centre
 8001d0e:	4b5e      	ldr	r3, [pc, #376]	; (8001e88 <gyro_task+0x290>)
 8001d10:	881a      	ldrh	r2, [r3, #0]
 8001d12:	4b62      	ldr	r3, [pc, #392]	; (8001e9c <gyro_task+0x2a4>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	641a      	str	r2, [r3, #64]	; 0x40
			curAngle = 0;							// Reset Angle value
 8001d18:	495d      	ldr	r1, [pc, #372]	; (8001e90 <gyro_task+0x298>)
 8001d1a:	f04f 0200 	mov.w	r2, #0
 8001d1e:	f04f 0300 	mov.w	r3, #0
 8001d22:	e9c1 2300 	strd	r2, r3, [r1]
			osDelay(100);
 8001d26:	2064      	movs	r0, #100	; 0x64
 8001d28:	f004 fc0c 	bl	8006544 <osDelay>

			// Stop motor
			__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, 0);
 8001d2c:	4b5c      	ldr	r3, [pc, #368]	; (8001ea0 <gyro_task+0x2a8>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2200      	movs	r2, #0
 8001d32:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, 0);
 8001d34:	4b5a      	ldr	r3, [pc, #360]	; (8001ea0 <gyro_task+0x2a8>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	639a      	str	r2, [r3, #56]	; 0x38
 8001d3c:	e098      	b.n	8001e70 <gyro_task+0x278>

		}

		// Ensures robot goes straight
		else if((lr_speed == '0')&&(fb_speed > '0')){
 8001d3e:	4b53      	ldr	r3, [pc, #332]	; (8001e8c <gyro_task+0x294>)
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	2b30      	cmp	r3, #48	; 0x30
 8001d44:	f040 8094 	bne.w	8001e70 <gyro_task+0x278>
 8001d48:	4b53      	ldr	r3, [pc, #332]	; (8001e98 <gyro_task+0x2a0>)
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	2b30      	cmp	r3, #48	; 0x30
 8001d4e:	f240 808f 	bls.w	8001e70 <gyro_task+0x278>
			gyroStart();
 8001d52:	f007 f917 	bl	8008f84 <gyroStart>
			eintegral = 0;
 8001d56:	2300      	movs	r3, #0
 8001d58:	84fb      	strh	r3, [r7, #38]	; 0x26
			curAngle = 0;							// Reset Angle value
 8001d5a:	494d      	ldr	r1, [pc, #308]	; (8001e90 <gyro_task+0x298>)
 8001d5c:	f04f 0200 	mov.w	r2, #0
 8001d60:	f04f 0300 	mov.w	r3, #0
 8001d64:	e9c1 2300 	strd	r2, r3, [r1]

			do{
				// Read Gyro
				readByte(0x37, val);
 8001d68:	f107 0310 	add.w	r3, r7, #16
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	2037      	movs	r0, #55	; 0x37
 8001d70:	f007 f95e 	bl	8009030 <readByte>
				angular_speed = (val[0] << 8) | val[1];	// appending the 2 bytes together
 8001d74:	7c3b      	ldrb	r3, [r7, #16]
 8001d76:	021b      	lsls	r3, r3, #8
 8001d78:	b21a      	sxth	r2, r3
 8001d7a:	7c7b      	ldrb	r3, [r7, #17]
 8001d7c:	b21b      	sxth	r3, r3
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	84bb      	strh	r3, [r7, #36]	; 0x24
				angle = ((double)(angular_speed*(100) - 2) / 16400.0)*1.1 ; //1.69
 8001d82:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001d86:	2264      	movs	r2, #100	; 0x64
 8001d88:	fb02 f303 	mul.w	r3, r2, r3
 8001d8c:	3b02      	subs	r3, #2
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7fe fbc0 	bl	8000514 <__aeabi_i2d>
 8001d94:	a338      	add	r3, pc, #224	; (adr r3, 8001e78 <gyro_task+0x280>)
 8001d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d9a:	f7fe fd4f 	bl	800083c <__aeabi_ddiv>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	460b      	mov	r3, r1
 8001da2:	4610      	mov	r0, r2
 8001da4:	4619      	mov	r1, r3
 8001da6:	a336      	add	r3, pc, #216	; (adr r3, 8001e80 <gyro_task+0x288>)
 8001da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dac:	f7fe fc1c 	bl	80005e8 <__aeabi_dmul>
 8001db0:	4602      	mov	r2, r0
 8001db2:	460b      	mov	r3, r1
 8001db4:	4610      	mov	r0, r2
 8001db6:	4619      	mov	r1, r3
 8001db8:	f7fe fe28 	bl	8000a0c <__aeabi_d2iz>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	847b      	strh	r3, [r7, #34]	; 0x22

				// If condition to prevent gyro drift
//				if((angle > 1)||(angle <0))
					curAngle += angle;
 8001dc0:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7fe fba5 	bl	8000514 <__aeabi_i2d>
 8001dca:	4b31      	ldr	r3, [pc, #196]	; (8001e90 <gyro_task+0x298>)
 8001dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dd0:	f7fe fa54 	bl	800027c <__adddf3>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	460b      	mov	r3, r1
 8001dd8:	492d      	ldr	r1, [pc, #180]	; (8001e90 <gyro_task+0x298>)
 8001dda:	e9c1 2300 	strd	r2, r3, [r1]

				// Print Gyro
				sprintf(msg, "gyro : %3d\0", (int)curAngle);
 8001dde:	4b2c      	ldr	r3, [pc, #176]	; (8001e90 <gyro_task+0x298>)
 8001de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001de4:	4610      	mov	r0, r2
 8001de6:	4619      	mov	r1, r3
 8001de8:	f7fe fe10 	bl	8000a0c <__aeabi_d2iz>
 8001dec:	4602      	mov	r2, r0
 8001dee:	f107 0308 	add.w	r3, r7, #8
 8001df2:	4928      	ldr	r1, [pc, #160]	; (8001e94 <gyro_task+0x29c>)
 8001df4:	4618      	mov	r0, r3
 8001df6:	f007 fcdd 	bl	80097b4 <siprintf>
				OLED_ShowString(10, 10, msg);
 8001dfa:	f107 0308 	add.w	r3, r7, #8
 8001dfe:	461a      	mov	r2, r3
 8001e00:	210a      	movs	r1, #10
 8001e02:	200a      	movs	r0, #10
 8001e04:	f007 fad8 	bl	80093b8 <OLED_ShowString>

				// PID for error adjustment
				err = curAngle - 0;		// Proportional error
 8001e08:	4b21      	ldr	r3, [pc, #132]	; (8001e90 <gyro_task+0x298>)
 8001e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e0e:	4610      	mov	r0, r2
 8001e10:	4619      	mov	r1, r3
 8001e12:	f7fe fdfb 	bl	8000a0c <__aeabi_d2iz>
 8001e16:	4603      	mov	r3, r0
 8001e18:	617b      	str	r3, [r7, #20]
				eintegral += err;		// Integral error
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	b29a      	uxth	r2, r3
 8001e1e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001e20:	4413      	add	r3, r2
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	84fb      	strh	r3, [r7, #38]	; 0x26

				// PID equation
				servo_val = (uint8_t)(pwmVal_servo + kp*err + ki*eintegral);
 8001e26:	4b18      	ldr	r3, [pc, #96]	; (8001e88 <gyro_task+0x290>)
 8001e28:	881b      	ldrh	r3, [r3, #0]
 8001e2a:	b2da      	uxtb	r2, r3
 8001e2c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	f897 1020 	ldrb.w	r1, [r7, #32]
 8001e34:	fb11 f303 	smulbb	r3, r1, r3
 8001e38:	b2d9      	uxtb	r1, r3
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	f897 0021 	ldrb.w	r0, [r7, #33]	; 0x21
 8001e42:	fb10 f303 	smulbb	r3, r0, r3
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	440b      	add	r3, r1
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	4413      	add	r3, r2
 8001e4e:	77fb      	strb	r3, [r7, #31]

				// Set servo value
				htim1.Instance->CCR4 = servo_val;	// Turn servo to correct error
 8001e50:	4b12      	ldr	r3, [pc, #72]	; (8001e9c <gyro_task+0x2a4>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	7ffa      	ldrb	r2, [r7, #31]
 8001e56:	641a      	str	r2, [r3, #64]	; 0x40

				osDelay(100);
 8001e58:	2064      	movs	r0, #100	; 0x64
 8001e5a:	f004 fb73 	bl	8006544 <osDelay>
			}while((lr_speed == '0')&&(fb_speed > '0'));
 8001e5e:	4b0b      	ldr	r3, [pc, #44]	; (8001e8c <gyro_task+0x294>)
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	2b30      	cmp	r3, #48	; 0x30
 8001e64:	d104      	bne.n	8001e70 <gyro_task+0x278>
 8001e66:	4b0c      	ldr	r3, [pc, #48]	; (8001e98 <gyro_task+0x2a0>)
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	2b30      	cmp	r3, #48	; 0x30
 8001e6c:	f63f af7c 	bhi.w	8001d68 <gyro_task+0x170>

		}

		osDelay(10);
 8001e70:	200a      	movs	r0, #10
 8001e72:	f004 fb67 	bl	8006544 <osDelay>
		if(lr_speed >= '4'){
 8001e76:	e6db      	b.n	8001c30 <gyro_task+0x38>
 8001e78:	00000000 	.word	0x00000000
 8001e7c:	40d00400 	.word	0x40d00400
 8001e80:	9999999a 	.word	0x9999999a
 8001e84:	3ff19999 	.word	0x3ff19999
 8001e88:	20000004 	.word	0x20000004
 8001e8c:	20000003 	.word	0x20000003
 8001e90:	20000298 	.word	0x20000298
 8001e94:	08009f08 	.word	0x08009f08
 8001e98:	20000001 	.word	0x20000001
 8001e9c:	200000f0 	.word	0x200000f0
 8001ea0:	200001c8 	.word	0x200001c8

08001ea4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ea8:	b672      	cpsid	i
}
 8001eaa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001eac:	e7fe      	b.n	8001eac <Error_Handler+0x8>
	...

08001eb0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	607b      	str	r3, [r7, #4]
 8001eba:	4b12      	ldr	r3, [pc, #72]	; (8001f04 <HAL_MspInit+0x54>)
 8001ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ebe:	4a11      	ldr	r2, [pc, #68]	; (8001f04 <HAL_MspInit+0x54>)
 8001ec0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ec4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ec6:	4b0f      	ldr	r3, [pc, #60]	; (8001f04 <HAL_MspInit+0x54>)
 8001ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ece:	607b      	str	r3, [r7, #4]
 8001ed0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	603b      	str	r3, [r7, #0]
 8001ed6:	4b0b      	ldr	r3, [pc, #44]	; (8001f04 <HAL_MspInit+0x54>)
 8001ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eda:	4a0a      	ldr	r2, [pc, #40]	; (8001f04 <HAL_MspInit+0x54>)
 8001edc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ee0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ee2:	4b08      	ldr	r3, [pc, #32]	; (8001f04 <HAL_MspInit+0x54>)
 8001ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eea:	603b      	str	r3, [r7, #0]
 8001eec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001eee:	2200      	movs	r2, #0
 8001ef0:	210f      	movs	r1, #15
 8001ef2:	f06f 0001 	mvn.w	r0, #1
 8001ef6:	f000 fbe2 	bl	80026be <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001efa:	bf00      	nop
 8001efc:	3708      	adds	r7, #8
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	40023800 	.word	0x40023800

08001f08 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b08a      	sub	sp, #40	; 0x28
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f10:	f107 0314 	add.w	r3, r7, #20
 8001f14:	2200      	movs	r2, #0
 8001f16:	601a      	str	r2, [r3, #0]
 8001f18:	605a      	str	r2, [r3, #4]
 8001f1a:	609a      	str	r2, [r3, #8]
 8001f1c:	60da      	str	r2, [r3, #12]
 8001f1e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a19      	ldr	r2, [pc, #100]	; (8001f8c <HAL_I2C_MspInit+0x84>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d12c      	bne.n	8001f84 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	613b      	str	r3, [r7, #16]
 8001f2e:	4b18      	ldr	r3, [pc, #96]	; (8001f90 <HAL_I2C_MspInit+0x88>)
 8001f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f32:	4a17      	ldr	r2, [pc, #92]	; (8001f90 <HAL_I2C_MspInit+0x88>)
 8001f34:	f043 0302 	orr.w	r3, r3, #2
 8001f38:	6313      	str	r3, [r2, #48]	; 0x30
 8001f3a:	4b15      	ldr	r3, [pc, #84]	; (8001f90 <HAL_I2C_MspInit+0x88>)
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	613b      	str	r3, [r7, #16]
 8001f44:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001f46:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f4c:	2312      	movs	r3, #18
 8001f4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f50:	2300      	movs	r3, #0
 8001f52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f54:	2303      	movs	r3, #3
 8001f56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f58:	2304      	movs	r3, #4
 8001f5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f5c:	f107 0314 	add.w	r3, r7, #20
 8001f60:	4619      	mov	r1, r3
 8001f62:	480c      	ldr	r0, [pc, #48]	; (8001f94 <HAL_I2C_MspInit+0x8c>)
 8001f64:	f000 fc74 	bl	8002850 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f68:	2300      	movs	r3, #0
 8001f6a:	60fb      	str	r3, [r7, #12]
 8001f6c:	4b08      	ldr	r3, [pc, #32]	; (8001f90 <HAL_I2C_MspInit+0x88>)
 8001f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f70:	4a07      	ldr	r2, [pc, #28]	; (8001f90 <HAL_I2C_MspInit+0x88>)
 8001f72:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f76:	6413      	str	r3, [r2, #64]	; 0x40
 8001f78:	4b05      	ldr	r3, [pc, #20]	; (8001f90 <HAL_I2C_MspInit+0x88>)
 8001f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f80:	60fb      	str	r3, [r7, #12]
 8001f82:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001f84:	bf00      	nop
 8001f86:	3728      	adds	r7, #40	; 0x28
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	40005400 	.word	0x40005400
 8001f90:	40023800 	.word	0x40023800
 8001f94:	40020400 	.word	0x40020400

08001f98 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b08a      	sub	sp, #40	; 0x28
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa0:	f107 0314 	add.w	r3, r7, #20
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]
 8001fa8:	605a      	str	r2, [r3, #4]
 8001faa:	609a      	str	r2, [r3, #8]
 8001fac:	60da      	str	r2, [r3, #12]
 8001fae:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a23      	ldr	r2, [pc, #140]	; (8002044 <HAL_TIM_Base_MspInit+0xac>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d10e      	bne.n	8001fd8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001fba:	2300      	movs	r3, #0
 8001fbc:	613b      	str	r3, [r7, #16]
 8001fbe:	4b22      	ldr	r3, [pc, #136]	; (8002048 <HAL_TIM_Base_MspInit+0xb0>)
 8001fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc2:	4a21      	ldr	r2, [pc, #132]	; (8002048 <HAL_TIM_Base_MspInit+0xb0>)
 8001fc4:	f043 0301 	orr.w	r3, r3, #1
 8001fc8:	6453      	str	r3, [r2, #68]	; 0x44
 8001fca:	4b1f      	ldr	r3, [pc, #124]	; (8002048 <HAL_TIM_Base_MspInit+0xb0>)
 8001fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fce:	f003 0301 	and.w	r3, r3, #1
 8001fd2:	613b      	str	r3, [r7, #16]
 8001fd4:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001fd6:	e030      	b.n	800203a <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM8)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a1b      	ldr	r2, [pc, #108]	; (800204c <HAL_TIM_Base_MspInit+0xb4>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d12b      	bne.n	800203a <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	60fb      	str	r3, [r7, #12]
 8001fe6:	4b18      	ldr	r3, [pc, #96]	; (8002048 <HAL_TIM_Base_MspInit+0xb0>)
 8001fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fea:	4a17      	ldr	r2, [pc, #92]	; (8002048 <HAL_TIM_Base_MspInit+0xb0>)
 8001fec:	f043 0302 	orr.w	r3, r3, #2
 8001ff0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ff2:	4b15      	ldr	r3, [pc, #84]	; (8002048 <HAL_TIM_Base_MspInit+0xb0>)
 8001ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff6:	f003 0302 	and.w	r3, r3, #2
 8001ffa:	60fb      	str	r3, [r7, #12]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ffe:	2300      	movs	r3, #0
 8002000:	60bb      	str	r3, [r7, #8]
 8002002:	4b11      	ldr	r3, [pc, #68]	; (8002048 <HAL_TIM_Base_MspInit+0xb0>)
 8002004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002006:	4a10      	ldr	r2, [pc, #64]	; (8002048 <HAL_TIM_Base_MspInit+0xb0>)
 8002008:	f043 0304 	orr.w	r3, r3, #4
 800200c:	6313      	str	r3, [r2, #48]	; 0x30
 800200e:	4b0e      	ldr	r3, [pc, #56]	; (8002048 <HAL_TIM_Base_MspInit+0xb0>)
 8002010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002012:	f003 0304 	and.w	r3, r3, #4
 8002016:	60bb      	str	r3, [r7, #8]
 8002018:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 800201a:	23c0      	movs	r3, #192	; 0xc0
 800201c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800201e:	2302      	movs	r3, #2
 8002020:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002022:	2300      	movs	r3, #0
 8002024:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002026:	2300      	movs	r3, #0
 8002028:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800202a:	2303      	movs	r3, #3
 800202c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800202e:	f107 0314 	add.w	r3, r7, #20
 8002032:	4619      	mov	r1, r3
 8002034:	4806      	ldr	r0, [pc, #24]	; (8002050 <HAL_TIM_Base_MspInit+0xb8>)
 8002036:	f000 fc0b 	bl	8002850 <HAL_GPIO_Init>
}
 800203a:	bf00      	nop
 800203c:	3728      	adds	r7, #40	; 0x28
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	40010000 	.word	0x40010000
 8002048:	40023800 	.word	0x40023800
 800204c:	40010400 	.word	0x40010400
 8002050:	40020800 	.word	0x40020800

08002054 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b08c      	sub	sp, #48	; 0x30
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800205c:	f107 031c 	add.w	r3, r7, #28
 8002060:	2200      	movs	r2, #0
 8002062:	601a      	str	r2, [r3, #0]
 8002064:	605a      	str	r2, [r3, #4]
 8002066:	609a      	str	r2, [r3, #8]
 8002068:	60da      	str	r2, [r3, #12]
 800206a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002074:	d14b      	bne.n	800210e <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002076:	2300      	movs	r3, #0
 8002078:	61bb      	str	r3, [r7, #24]
 800207a:	4b3f      	ldr	r3, [pc, #252]	; (8002178 <HAL_TIM_Encoder_MspInit+0x124>)
 800207c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207e:	4a3e      	ldr	r2, [pc, #248]	; (8002178 <HAL_TIM_Encoder_MspInit+0x124>)
 8002080:	f043 0301 	orr.w	r3, r3, #1
 8002084:	6413      	str	r3, [r2, #64]	; 0x40
 8002086:	4b3c      	ldr	r3, [pc, #240]	; (8002178 <HAL_TIM_Encoder_MspInit+0x124>)
 8002088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208a:	f003 0301 	and.w	r3, r3, #1
 800208e:	61bb      	str	r3, [r7, #24]
 8002090:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002092:	2300      	movs	r3, #0
 8002094:	617b      	str	r3, [r7, #20]
 8002096:	4b38      	ldr	r3, [pc, #224]	; (8002178 <HAL_TIM_Encoder_MspInit+0x124>)
 8002098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209a:	4a37      	ldr	r2, [pc, #220]	; (8002178 <HAL_TIM_Encoder_MspInit+0x124>)
 800209c:	f043 0301 	orr.w	r3, r3, #1
 80020a0:	6313      	str	r3, [r2, #48]	; 0x30
 80020a2:	4b35      	ldr	r3, [pc, #212]	; (8002178 <HAL_TIM_Encoder_MspInit+0x124>)
 80020a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a6:	f003 0301 	and.w	r3, r3, #1
 80020aa:	617b      	str	r3, [r7, #20]
 80020ac:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ae:	2300      	movs	r3, #0
 80020b0:	613b      	str	r3, [r7, #16]
 80020b2:	4b31      	ldr	r3, [pc, #196]	; (8002178 <HAL_TIM_Encoder_MspInit+0x124>)
 80020b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b6:	4a30      	ldr	r2, [pc, #192]	; (8002178 <HAL_TIM_Encoder_MspInit+0x124>)
 80020b8:	f043 0302 	orr.w	r3, r3, #2
 80020bc:	6313      	str	r3, [r2, #48]	; 0x30
 80020be:	4b2e      	ldr	r3, [pc, #184]	; (8002178 <HAL_TIM_Encoder_MspInit+0x124>)
 80020c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c2:	f003 0302 	and.w	r3, r3, #2
 80020c6:	613b      	str	r3, [r7, #16]
 80020c8:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80020ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d0:	2302      	movs	r3, #2
 80020d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d4:	2300      	movs	r3, #0
 80020d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d8:	2300      	movs	r3, #0
 80020da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80020dc:	2301      	movs	r3, #1
 80020de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020e0:	f107 031c 	add.w	r3, r7, #28
 80020e4:	4619      	mov	r1, r3
 80020e6:	4825      	ldr	r0, [pc, #148]	; (800217c <HAL_TIM_Encoder_MspInit+0x128>)
 80020e8:	f000 fbb2 	bl	8002850 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80020ec:	2308      	movs	r3, #8
 80020ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f0:	2302      	movs	r3, #2
 80020f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f4:	2300      	movs	r3, #0
 80020f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f8:	2300      	movs	r3, #0
 80020fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80020fc:	2301      	movs	r3, #1
 80020fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002100:	f107 031c 	add.w	r3, r7, #28
 8002104:	4619      	mov	r1, r3
 8002106:	481e      	ldr	r0, [pc, #120]	; (8002180 <HAL_TIM_Encoder_MspInit+0x12c>)
 8002108:	f000 fba2 	bl	8002850 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800210c:	e030      	b.n	8002170 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM3)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a1c      	ldr	r2, [pc, #112]	; (8002184 <HAL_TIM_Encoder_MspInit+0x130>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d12b      	bne.n	8002170 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002118:	2300      	movs	r3, #0
 800211a:	60fb      	str	r3, [r7, #12]
 800211c:	4b16      	ldr	r3, [pc, #88]	; (8002178 <HAL_TIM_Encoder_MspInit+0x124>)
 800211e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002120:	4a15      	ldr	r2, [pc, #84]	; (8002178 <HAL_TIM_Encoder_MspInit+0x124>)
 8002122:	f043 0302 	orr.w	r3, r3, #2
 8002126:	6413      	str	r3, [r2, #64]	; 0x40
 8002128:	4b13      	ldr	r3, [pc, #76]	; (8002178 <HAL_TIM_Encoder_MspInit+0x124>)
 800212a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212c:	f003 0302 	and.w	r3, r3, #2
 8002130:	60fb      	str	r3, [r7, #12]
 8002132:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002134:	2300      	movs	r3, #0
 8002136:	60bb      	str	r3, [r7, #8]
 8002138:	4b0f      	ldr	r3, [pc, #60]	; (8002178 <HAL_TIM_Encoder_MspInit+0x124>)
 800213a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213c:	4a0e      	ldr	r2, [pc, #56]	; (8002178 <HAL_TIM_Encoder_MspInit+0x124>)
 800213e:	f043 0301 	orr.w	r3, r3, #1
 8002142:	6313      	str	r3, [r2, #48]	; 0x30
 8002144:	4b0c      	ldr	r3, [pc, #48]	; (8002178 <HAL_TIM_Encoder_MspInit+0x124>)
 8002146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002148:	f003 0301 	and.w	r3, r3, #1
 800214c:	60bb      	str	r3, [r7, #8]
 800214e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002150:	23c0      	movs	r3, #192	; 0xc0
 8002152:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002154:	2302      	movs	r3, #2
 8002156:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002158:	2300      	movs	r3, #0
 800215a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800215c:	2300      	movs	r3, #0
 800215e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002160:	2302      	movs	r3, #2
 8002162:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002164:	f107 031c 	add.w	r3, r7, #28
 8002168:	4619      	mov	r1, r3
 800216a:	4804      	ldr	r0, [pc, #16]	; (800217c <HAL_TIM_Encoder_MspInit+0x128>)
 800216c:	f000 fb70 	bl	8002850 <HAL_GPIO_Init>
}
 8002170:	bf00      	nop
 8002172:	3730      	adds	r7, #48	; 0x30
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	40023800 	.word	0x40023800
 800217c:	40020000 	.word	0x40020000
 8002180:	40020400 	.word	0x40020400
 8002184:	40000400 	.word	0x40000400

08002188 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b088      	sub	sp, #32
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002190:	f107 030c 	add.w	r3, r7, #12
 8002194:	2200      	movs	r2, #0
 8002196:	601a      	str	r2, [r3, #0]
 8002198:	605a      	str	r2, [r3, #4]
 800219a:	609a      	str	r2, [r3, #8]
 800219c:	60da      	str	r2, [r3, #12]
 800219e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a12      	ldr	r2, [pc, #72]	; (80021f0 <HAL_TIM_MspPostInit+0x68>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d11e      	bne.n	80021e8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80021aa:	2300      	movs	r3, #0
 80021ac:	60bb      	str	r3, [r7, #8]
 80021ae:	4b11      	ldr	r3, [pc, #68]	; (80021f4 <HAL_TIM_MspPostInit+0x6c>)
 80021b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b2:	4a10      	ldr	r2, [pc, #64]	; (80021f4 <HAL_TIM_MspPostInit+0x6c>)
 80021b4:	f043 0310 	orr.w	r3, r3, #16
 80021b8:	6313      	str	r3, [r2, #48]	; 0x30
 80021ba:	4b0e      	ldr	r3, [pc, #56]	; (80021f4 <HAL_TIM_MspPostInit+0x6c>)
 80021bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021be:	f003 0310 	and.w	r3, r3, #16
 80021c2:	60bb      	str	r3, [r7, #8]
 80021c4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80021c6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80021ca:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021cc:	2302      	movs	r3, #2
 80021ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d0:	2300      	movs	r3, #0
 80021d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d4:	2300      	movs	r3, #0
 80021d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80021d8:	2301      	movs	r3, #1
 80021da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021dc:	f107 030c 	add.w	r3, r7, #12
 80021e0:	4619      	mov	r1, r3
 80021e2:	4805      	ldr	r0, [pc, #20]	; (80021f8 <HAL_TIM_MspPostInit+0x70>)
 80021e4:	f000 fb34 	bl	8002850 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80021e8:	bf00      	nop
 80021ea:	3720      	adds	r7, #32
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	40010000 	.word	0x40010000
 80021f4:	40023800 	.word	0x40023800
 80021f8:	40021000 	.word	0x40021000

080021fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b08a      	sub	sp, #40	; 0x28
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002204:	f107 0314 	add.w	r3, r7, #20
 8002208:	2200      	movs	r2, #0
 800220a:	601a      	str	r2, [r3, #0]
 800220c:	605a      	str	r2, [r3, #4]
 800220e:	609a      	str	r2, [r3, #8]
 8002210:	60da      	str	r2, [r3, #12]
 8002212:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a1d      	ldr	r2, [pc, #116]	; (8002290 <HAL_UART_MspInit+0x94>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d134      	bne.n	8002288 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800221e:	2300      	movs	r3, #0
 8002220:	613b      	str	r3, [r7, #16]
 8002222:	4b1c      	ldr	r3, [pc, #112]	; (8002294 <HAL_UART_MspInit+0x98>)
 8002224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002226:	4a1b      	ldr	r2, [pc, #108]	; (8002294 <HAL_UART_MspInit+0x98>)
 8002228:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800222c:	6413      	str	r3, [r2, #64]	; 0x40
 800222e:	4b19      	ldr	r3, [pc, #100]	; (8002294 <HAL_UART_MspInit+0x98>)
 8002230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002232:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002236:	613b      	str	r3, [r7, #16]
 8002238:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800223a:	2300      	movs	r3, #0
 800223c:	60fb      	str	r3, [r7, #12]
 800223e:	4b15      	ldr	r3, [pc, #84]	; (8002294 <HAL_UART_MspInit+0x98>)
 8002240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002242:	4a14      	ldr	r2, [pc, #80]	; (8002294 <HAL_UART_MspInit+0x98>)
 8002244:	f043 0304 	orr.w	r3, r3, #4
 8002248:	6313      	str	r3, [r2, #48]	; 0x30
 800224a:	4b12      	ldr	r3, [pc, #72]	; (8002294 <HAL_UART_MspInit+0x98>)
 800224c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224e:	f003 0304 	and.w	r3, r3, #4
 8002252:	60fb      	str	r3, [r7, #12]
 8002254:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002256:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800225a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800225c:	2302      	movs	r3, #2
 800225e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002260:	2300      	movs	r3, #0
 8002262:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002264:	2303      	movs	r3, #3
 8002266:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002268:	2307      	movs	r3, #7
 800226a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800226c:	f107 0314 	add.w	r3, r7, #20
 8002270:	4619      	mov	r1, r3
 8002272:	4809      	ldr	r0, [pc, #36]	; (8002298 <HAL_UART_MspInit+0x9c>)
 8002274:	f000 faec 	bl	8002850 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002278:	2200      	movs	r2, #0
 800227a:	2105      	movs	r1, #5
 800227c:	2027      	movs	r0, #39	; 0x27
 800227e:	f000 fa1e 	bl	80026be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002282:	2027      	movs	r0, #39	; 0x27
 8002284:	f000 fa37 	bl	80026f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002288:	bf00      	nop
 800228a:	3728      	adds	r7, #40	; 0x28
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	40004800 	.word	0x40004800
 8002294:	40023800 	.word	0x40023800
 8002298:	40020800 	.word	0x40020800

0800229c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80022a0:	e7fe      	b.n	80022a0 <NMI_Handler+0x4>

080022a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022a2:	b480      	push	{r7}
 80022a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022a6:	e7fe      	b.n	80022a6 <HardFault_Handler+0x4>

080022a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022ac:	e7fe      	b.n	80022ac <MemManage_Handler+0x4>

080022ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022ae:	b480      	push	{r7}
 80022b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022b2:	e7fe      	b.n	80022b2 <BusFault_Handler+0x4>

080022b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022b8:	e7fe      	b.n	80022b8 <UsageFault_Handler+0x4>

080022ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022ba:	b480      	push	{r7}
 80022bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022be:	bf00      	nop
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr

080022c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022cc:	f000 f8d8 	bl	8002480 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80022d0:	f006 fa2a 	bl	8008728 <xTaskGetSchedulerState>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d001      	beq.n	80022de <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80022da:	f004 fe0d 	bl	8006ef8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022de:	bf00      	nop
 80022e0:	bd80      	pop	{r7, pc}
	...

080022e4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80022e8:	4802      	ldr	r0, [pc, #8]	; (80022f4 <USART3_IRQHandler+0x10>)
 80022ea:	f003 f921 	bl	8005530 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80022ee:	bf00      	nop
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	20000210 	.word	0x20000210

080022f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b086      	sub	sp, #24
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002300:	4a14      	ldr	r2, [pc, #80]	; (8002354 <_sbrk+0x5c>)
 8002302:	4b15      	ldr	r3, [pc, #84]	; (8002358 <_sbrk+0x60>)
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800230c:	4b13      	ldr	r3, [pc, #76]	; (800235c <_sbrk+0x64>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d102      	bne.n	800231a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002314:	4b11      	ldr	r3, [pc, #68]	; (800235c <_sbrk+0x64>)
 8002316:	4a12      	ldr	r2, [pc, #72]	; (8002360 <_sbrk+0x68>)
 8002318:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800231a:	4b10      	ldr	r3, [pc, #64]	; (800235c <_sbrk+0x64>)
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4413      	add	r3, r2
 8002322:	693a      	ldr	r2, [r7, #16]
 8002324:	429a      	cmp	r2, r3
 8002326:	d207      	bcs.n	8002338 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002328:	f007 f904 	bl	8009534 <__errno>
 800232c:	4603      	mov	r3, r0
 800232e:	220c      	movs	r2, #12
 8002330:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002332:	f04f 33ff 	mov.w	r3, #4294967295
 8002336:	e009      	b.n	800234c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002338:	4b08      	ldr	r3, [pc, #32]	; (800235c <_sbrk+0x64>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800233e:	4b07      	ldr	r3, [pc, #28]	; (800235c <_sbrk+0x64>)
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4413      	add	r3, r2
 8002346:	4a05      	ldr	r2, [pc, #20]	; (800235c <_sbrk+0x64>)
 8002348:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800234a:	68fb      	ldr	r3, [r7, #12]
}
 800234c:	4618      	mov	r0, r3
 800234e:	3718      	adds	r7, #24
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	20020000 	.word	0x20020000
 8002358:	00000400 	.word	0x00000400
 800235c:	200002b0 	.word	0x200002b0
 8002360:	20005030 	.word	0x20005030

08002364 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002368:	4b06      	ldr	r3, [pc, #24]	; (8002384 <SystemInit+0x20>)
 800236a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800236e:	4a05      	ldr	r2, [pc, #20]	; (8002384 <SystemInit+0x20>)
 8002370:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002374:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002378:	bf00      	nop
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	e000ed00 	.word	0xe000ed00

08002388 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002388:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023c0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800238c:	480d      	ldr	r0, [pc, #52]	; (80023c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800238e:	490e      	ldr	r1, [pc, #56]	; (80023c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002390:	4a0e      	ldr	r2, [pc, #56]	; (80023cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002392:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002394:	e002      	b.n	800239c <LoopCopyDataInit>

08002396 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002396:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002398:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800239a:	3304      	adds	r3, #4

0800239c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800239c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800239e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023a0:	d3f9      	bcc.n	8002396 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023a2:	4a0b      	ldr	r2, [pc, #44]	; (80023d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80023a4:	4c0b      	ldr	r4, [pc, #44]	; (80023d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80023a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023a8:	e001      	b.n	80023ae <LoopFillZerobss>

080023aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023ac:	3204      	adds	r2, #4

080023ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023b0:	d3fb      	bcc.n	80023aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80023b2:	f7ff ffd7 	bl	8002364 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023b6:	f007 f8c3 	bl	8009540 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023ba:	f7fe fcf1 	bl	8000da0 <main>
  bx  lr    
 80023be:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80023c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80023c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023c8:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80023cc:	0800aa7c 	.word	0x0800aa7c
  ldr r2, =_sbss
 80023d0:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80023d4:	2000502c 	.word	0x2000502c

080023d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023d8:	e7fe      	b.n	80023d8 <ADC_IRQHandler>
	...

080023dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80023e0:	4b0e      	ldr	r3, [pc, #56]	; (800241c <HAL_Init+0x40>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a0d      	ldr	r2, [pc, #52]	; (800241c <HAL_Init+0x40>)
 80023e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80023ec:	4b0b      	ldr	r3, [pc, #44]	; (800241c <HAL_Init+0x40>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a0a      	ldr	r2, [pc, #40]	; (800241c <HAL_Init+0x40>)
 80023f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023f8:	4b08      	ldr	r3, [pc, #32]	; (800241c <HAL_Init+0x40>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a07      	ldr	r2, [pc, #28]	; (800241c <HAL_Init+0x40>)
 80023fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002402:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002404:	2003      	movs	r0, #3
 8002406:	f000 f94f 	bl	80026a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800240a:	200f      	movs	r0, #15
 800240c:	f000 f808 	bl	8002420 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002410:	f7ff fd4e 	bl	8001eb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	40023c00 	.word	0x40023c00

08002420 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002428:	4b12      	ldr	r3, [pc, #72]	; (8002474 <HAL_InitTick+0x54>)
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	4b12      	ldr	r3, [pc, #72]	; (8002478 <HAL_InitTick+0x58>)
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	4619      	mov	r1, r3
 8002432:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002436:	fbb3 f3f1 	udiv	r3, r3, r1
 800243a:	fbb2 f3f3 	udiv	r3, r2, r3
 800243e:	4618      	mov	r0, r3
 8002440:	f000 f967 	bl	8002712 <HAL_SYSTICK_Config>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e00e      	b.n	800246c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2b0f      	cmp	r3, #15
 8002452:	d80a      	bhi.n	800246a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002454:	2200      	movs	r2, #0
 8002456:	6879      	ldr	r1, [r7, #4]
 8002458:	f04f 30ff 	mov.w	r0, #4294967295
 800245c:	f000 f92f 	bl	80026be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002460:	4a06      	ldr	r2, [pc, #24]	; (800247c <HAL_InitTick+0x5c>)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002466:	2300      	movs	r3, #0
 8002468:	e000      	b.n	800246c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
}
 800246c:	4618      	mov	r0, r3
 800246e:	3708      	adds	r7, #8
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	20000008 	.word	0x20000008
 8002478:	20000010 	.word	0x20000010
 800247c:	2000000c 	.word	0x2000000c

08002480 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002480:	b480      	push	{r7}
 8002482:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002484:	4b06      	ldr	r3, [pc, #24]	; (80024a0 <HAL_IncTick+0x20>)
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	461a      	mov	r2, r3
 800248a:	4b06      	ldr	r3, [pc, #24]	; (80024a4 <HAL_IncTick+0x24>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4413      	add	r3, r2
 8002490:	4a04      	ldr	r2, [pc, #16]	; (80024a4 <HAL_IncTick+0x24>)
 8002492:	6013      	str	r3, [r2, #0]
}
 8002494:	bf00      	nop
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	20000010 	.word	0x20000010
 80024a4:	200002b4 	.word	0x200002b4

080024a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	af00      	add	r7, sp, #0
  return uwTick;
 80024ac:	4b03      	ldr	r3, [pc, #12]	; (80024bc <HAL_GetTick+0x14>)
 80024ae:	681b      	ldr	r3, [r3, #0]
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	200002b4 	.word	0x200002b4

080024c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b084      	sub	sp, #16
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024c8:	f7ff ffee 	bl	80024a8 <HAL_GetTick>
 80024cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024d8:	d005      	beq.n	80024e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024da:	4b0a      	ldr	r3, [pc, #40]	; (8002504 <HAL_Delay+0x44>)
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	461a      	mov	r2, r3
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	4413      	add	r3, r2
 80024e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80024e6:	bf00      	nop
 80024e8:	f7ff ffde 	bl	80024a8 <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	68fa      	ldr	r2, [r7, #12]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d8f7      	bhi.n	80024e8 <HAL_Delay+0x28>
  {
  }
}
 80024f8:	bf00      	nop
 80024fa:	bf00      	nop
 80024fc:	3710      	adds	r7, #16
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	20000010 	.word	0x20000010

08002508 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002508:	b480      	push	{r7}
 800250a:	b085      	sub	sp, #20
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f003 0307 	and.w	r3, r3, #7
 8002516:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002518:	4b0c      	ldr	r3, [pc, #48]	; (800254c <__NVIC_SetPriorityGrouping+0x44>)
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800251e:	68ba      	ldr	r2, [r7, #8]
 8002520:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002524:	4013      	ands	r3, r2
 8002526:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002530:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002534:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002538:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800253a:	4a04      	ldr	r2, [pc, #16]	; (800254c <__NVIC_SetPriorityGrouping+0x44>)
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	60d3      	str	r3, [r2, #12]
}
 8002540:	bf00      	nop
 8002542:	3714      	adds	r7, #20
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr
 800254c:	e000ed00 	.word	0xe000ed00

08002550 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002554:	4b04      	ldr	r3, [pc, #16]	; (8002568 <__NVIC_GetPriorityGrouping+0x18>)
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	0a1b      	lsrs	r3, r3, #8
 800255a:	f003 0307 	and.w	r3, r3, #7
}
 800255e:	4618      	mov	r0, r3
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr
 8002568:	e000ed00 	.word	0xe000ed00

0800256c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	4603      	mov	r3, r0
 8002574:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800257a:	2b00      	cmp	r3, #0
 800257c:	db0b      	blt.n	8002596 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800257e:	79fb      	ldrb	r3, [r7, #7]
 8002580:	f003 021f 	and.w	r2, r3, #31
 8002584:	4907      	ldr	r1, [pc, #28]	; (80025a4 <__NVIC_EnableIRQ+0x38>)
 8002586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800258a:	095b      	lsrs	r3, r3, #5
 800258c:	2001      	movs	r0, #1
 800258e:	fa00 f202 	lsl.w	r2, r0, r2
 8002592:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002596:	bf00      	nop
 8002598:	370c      	adds	r7, #12
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop
 80025a4:	e000e100 	.word	0xe000e100

080025a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	4603      	mov	r3, r0
 80025b0:	6039      	str	r1, [r7, #0]
 80025b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	db0a      	blt.n	80025d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	b2da      	uxtb	r2, r3
 80025c0:	490c      	ldr	r1, [pc, #48]	; (80025f4 <__NVIC_SetPriority+0x4c>)
 80025c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c6:	0112      	lsls	r2, r2, #4
 80025c8:	b2d2      	uxtb	r2, r2
 80025ca:	440b      	add	r3, r1
 80025cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025d0:	e00a      	b.n	80025e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	b2da      	uxtb	r2, r3
 80025d6:	4908      	ldr	r1, [pc, #32]	; (80025f8 <__NVIC_SetPriority+0x50>)
 80025d8:	79fb      	ldrb	r3, [r7, #7]
 80025da:	f003 030f 	and.w	r3, r3, #15
 80025de:	3b04      	subs	r3, #4
 80025e0:	0112      	lsls	r2, r2, #4
 80025e2:	b2d2      	uxtb	r2, r2
 80025e4:	440b      	add	r3, r1
 80025e6:	761a      	strb	r2, [r3, #24]
}
 80025e8:	bf00      	nop
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr
 80025f4:	e000e100 	.word	0xe000e100
 80025f8:	e000ed00 	.word	0xe000ed00

080025fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b089      	sub	sp, #36	; 0x24
 8002600:	af00      	add	r7, sp, #0
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	60b9      	str	r1, [r7, #8]
 8002606:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f003 0307 	and.w	r3, r3, #7
 800260e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	f1c3 0307 	rsb	r3, r3, #7
 8002616:	2b04      	cmp	r3, #4
 8002618:	bf28      	it	cs
 800261a:	2304      	movcs	r3, #4
 800261c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	3304      	adds	r3, #4
 8002622:	2b06      	cmp	r3, #6
 8002624:	d902      	bls.n	800262c <NVIC_EncodePriority+0x30>
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	3b03      	subs	r3, #3
 800262a:	e000      	b.n	800262e <NVIC_EncodePriority+0x32>
 800262c:	2300      	movs	r3, #0
 800262e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002630:	f04f 32ff 	mov.w	r2, #4294967295
 8002634:	69bb      	ldr	r3, [r7, #24]
 8002636:	fa02 f303 	lsl.w	r3, r2, r3
 800263a:	43da      	mvns	r2, r3
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	401a      	ands	r2, r3
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002644:	f04f 31ff 	mov.w	r1, #4294967295
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	fa01 f303 	lsl.w	r3, r1, r3
 800264e:	43d9      	mvns	r1, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002654:	4313      	orrs	r3, r2
         );
}
 8002656:	4618      	mov	r0, r3
 8002658:	3724      	adds	r7, #36	; 0x24
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
	...

08002664 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	3b01      	subs	r3, #1
 8002670:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002674:	d301      	bcc.n	800267a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002676:	2301      	movs	r3, #1
 8002678:	e00f      	b.n	800269a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800267a:	4a0a      	ldr	r2, [pc, #40]	; (80026a4 <SysTick_Config+0x40>)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	3b01      	subs	r3, #1
 8002680:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002682:	210f      	movs	r1, #15
 8002684:	f04f 30ff 	mov.w	r0, #4294967295
 8002688:	f7ff ff8e 	bl	80025a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800268c:	4b05      	ldr	r3, [pc, #20]	; (80026a4 <SysTick_Config+0x40>)
 800268e:	2200      	movs	r2, #0
 8002690:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002692:	4b04      	ldr	r3, [pc, #16]	; (80026a4 <SysTick_Config+0x40>)
 8002694:	2207      	movs	r2, #7
 8002696:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3708      	adds	r7, #8
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	e000e010 	.word	0xe000e010

080026a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f7ff ff29 	bl	8002508 <__NVIC_SetPriorityGrouping>
}
 80026b6:	bf00      	nop
 80026b8:	3708      	adds	r7, #8
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}

080026be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026be:	b580      	push	{r7, lr}
 80026c0:	b086      	sub	sp, #24
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	4603      	mov	r3, r0
 80026c6:	60b9      	str	r1, [r7, #8]
 80026c8:	607a      	str	r2, [r7, #4]
 80026ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026cc:	2300      	movs	r3, #0
 80026ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026d0:	f7ff ff3e 	bl	8002550 <__NVIC_GetPriorityGrouping>
 80026d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	68b9      	ldr	r1, [r7, #8]
 80026da:	6978      	ldr	r0, [r7, #20]
 80026dc:	f7ff ff8e 	bl	80025fc <NVIC_EncodePriority>
 80026e0:	4602      	mov	r2, r0
 80026e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026e6:	4611      	mov	r1, r2
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7ff ff5d 	bl	80025a8 <__NVIC_SetPriority>
}
 80026ee:	bf00      	nop
 80026f0:	3718      	adds	r7, #24
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}

080026f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026f6:	b580      	push	{r7, lr}
 80026f8:	b082      	sub	sp, #8
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	4603      	mov	r3, r0
 80026fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002700:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002704:	4618      	mov	r0, r3
 8002706:	f7ff ff31 	bl	800256c <__NVIC_EnableIRQ>
}
 800270a:	bf00      	nop
 800270c:	3708      	adds	r7, #8
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}

08002712 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002712:	b580      	push	{r7, lr}
 8002714:	b082      	sub	sp, #8
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f7ff ffa2 	bl	8002664 <SysTick_Config>
 8002720:	4603      	mov	r3, r0
}
 8002722:	4618      	mov	r0, r3
 8002724:	3708      	adds	r7, #8
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}

0800272a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800272a:	b580      	push	{r7, lr}
 800272c:	b084      	sub	sp, #16
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002736:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002738:	f7ff feb6 	bl	80024a8 <HAL_GetTick>
 800273c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002744:	b2db      	uxtb	r3, r3
 8002746:	2b02      	cmp	r3, #2
 8002748:	d008      	beq.n	800275c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2280      	movs	r2, #128	; 0x80
 800274e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2200      	movs	r2, #0
 8002754:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e052      	b.n	8002802 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f022 0216 	bic.w	r2, r2, #22
 800276a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	695a      	ldr	r2, [r3, #20]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800277a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002780:	2b00      	cmp	r3, #0
 8002782:	d103      	bne.n	800278c <HAL_DMA_Abort+0x62>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002788:	2b00      	cmp	r3, #0
 800278a:	d007      	beq.n	800279c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f022 0208 	bic.w	r2, r2, #8
 800279a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f022 0201 	bic.w	r2, r2, #1
 80027aa:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027ac:	e013      	b.n	80027d6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027ae:	f7ff fe7b 	bl	80024a8 <HAL_GetTick>
 80027b2:	4602      	mov	r2, r0
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	2b05      	cmp	r3, #5
 80027ba:	d90c      	bls.n	80027d6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2220      	movs	r2, #32
 80027c0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2203      	movs	r2, #3
 80027c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2200      	movs	r2, #0
 80027ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e015      	b.n	8002802 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0301 	and.w	r3, r3, #1
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d1e4      	bne.n	80027ae <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027e8:	223f      	movs	r2, #63	; 0x3f
 80027ea:	409a      	lsls	r2, r3
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2201      	movs	r2, #1
 80027f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2200      	movs	r2, #0
 80027fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002800:	2300      	movs	r3, #0
}
 8002802:	4618      	mov	r0, r3
 8002804:	3710      	adds	r7, #16
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}

0800280a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800280a:	b480      	push	{r7}
 800280c:	b083      	sub	sp, #12
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002818:	b2db      	uxtb	r3, r3
 800281a:	2b02      	cmp	r3, #2
 800281c:	d004      	beq.n	8002828 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2280      	movs	r2, #128	; 0x80
 8002822:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e00c      	b.n	8002842 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2205      	movs	r2, #5
 800282c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f022 0201 	bic.w	r2, r2, #1
 800283e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002840:	2300      	movs	r3, #0
}
 8002842:	4618      	mov	r0, r3
 8002844:	370c      	adds	r7, #12
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
	...

08002850 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002850:	b480      	push	{r7}
 8002852:	b089      	sub	sp, #36	; 0x24
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800285a:	2300      	movs	r3, #0
 800285c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800285e:	2300      	movs	r3, #0
 8002860:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002862:	2300      	movs	r3, #0
 8002864:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002866:	2300      	movs	r3, #0
 8002868:	61fb      	str	r3, [r7, #28]
 800286a:	e16b      	b.n	8002b44 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800286c:	2201      	movs	r2, #1
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	fa02 f303 	lsl.w	r3, r2, r3
 8002874:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	697a      	ldr	r2, [r7, #20]
 800287c:	4013      	ands	r3, r2
 800287e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002880:	693a      	ldr	r2, [r7, #16]
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	429a      	cmp	r2, r3
 8002886:	f040 815a 	bne.w	8002b3e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f003 0303 	and.w	r3, r3, #3
 8002892:	2b01      	cmp	r3, #1
 8002894:	d005      	beq.n	80028a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d130      	bne.n	8002904 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	005b      	lsls	r3, r3, #1
 80028ac:	2203      	movs	r2, #3
 80028ae:	fa02 f303 	lsl.w	r3, r2, r3
 80028b2:	43db      	mvns	r3, r3
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	4013      	ands	r3, r2
 80028b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	68da      	ldr	r2, [r3, #12]
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	005b      	lsls	r3, r3, #1
 80028c2:	fa02 f303 	lsl.w	r3, r2, r3
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	69ba      	ldr	r2, [r7, #24]
 80028d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028d8:	2201      	movs	r2, #1
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	fa02 f303 	lsl.w	r3, r2, r3
 80028e0:	43db      	mvns	r3, r3
 80028e2:	69ba      	ldr	r2, [r7, #24]
 80028e4:	4013      	ands	r3, r2
 80028e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	091b      	lsrs	r3, r3, #4
 80028ee:	f003 0201 	and.w	r2, r3, #1
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	fa02 f303 	lsl.w	r3, r2, r3
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f003 0303 	and.w	r3, r3, #3
 800290c:	2b03      	cmp	r3, #3
 800290e:	d017      	beq.n	8002940 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	005b      	lsls	r3, r3, #1
 800291a:	2203      	movs	r2, #3
 800291c:	fa02 f303 	lsl.w	r3, r2, r3
 8002920:	43db      	mvns	r3, r3
 8002922:	69ba      	ldr	r2, [r7, #24]
 8002924:	4013      	ands	r3, r2
 8002926:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	689a      	ldr	r2, [r3, #8]
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	005b      	lsls	r3, r3, #1
 8002930:	fa02 f303 	lsl.w	r3, r2, r3
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	4313      	orrs	r3, r2
 8002938:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f003 0303 	and.w	r3, r3, #3
 8002948:	2b02      	cmp	r3, #2
 800294a:	d123      	bne.n	8002994 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	08da      	lsrs	r2, r3, #3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	3208      	adds	r2, #8
 8002954:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002958:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	f003 0307 	and.w	r3, r3, #7
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	220f      	movs	r2, #15
 8002964:	fa02 f303 	lsl.w	r3, r2, r3
 8002968:	43db      	mvns	r3, r3
 800296a:	69ba      	ldr	r2, [r7, #24]
 800296c:	4013      	ands	r3, r2
 800296e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	691a      	ldr	r2, [r3, #16]
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	f003 0307 	and.w	r3, r3, #7
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	fa02 f303 	lsl.w	r3, r2, r3
 8002980:	69ba      	ldr	r2, [r7, #24]
 8002982:	4313      	orrs	r3, r2
 8002984:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	08da      	lsrs	r2, r3, #3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	3208      	adds	r2, #8
 800298e:	69b9      	ldr	r1, [r7, #24]
 8002990:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	005b      	lsls	r3, r3, #1
 800299e:	2203      	movs	r2, #3
 80029a0:	fa02 f303 	lsl.w	r3, r2, r3
 80029a4:	43db      	mvns	r3, r3
 80029a6:	69ba      	ldr	r2, [r7, #24]
 80029a8:	4013      	ands	r3, r2
 80029aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f003 0203 	and.w	r2, r3, #3
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	005b      	lsls	r3, r3, #1
 80029b8:	fa02 f303 	lsl.w	r3, r2, r3
 80029bc:	69ba      	ldr	r2, [r7, #24]
 80029be:	4313      	orrs	r3, r2
 80029c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	69ba      	ldr	r2, [r7, #24]
 80029c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	f000 80b4 	beq.w	8002b3e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029d6:	2300      	movs	r3, #0
 80029d8:	60fb      	str	r3, [r7, #12]
 80029da:	4b60      	ldr	r3, [pc, #384]	; (8002b5c <HAL_GPIO_Init+0x30c>)
 80029dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029de:	4a5f      	ldr	r2, [pc, #380]	; (8002b5c <HAL_GPIO_Init+0x30c>)
 80029e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029e4:	6453      	str	r3, [r2, #68]	; 0x44
 80029e6:	4b5d      	ldr	r3, [pc, #372]	; (8002b5c <HAL_GPIO_Init+0x30c>)
 80029e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029ee:	60fb      	str	r3, [r7, #12]
 80029f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029f2:	4a5b      	ldr	r2, [pc, #364]	; (8002b60 <HAL_GPIO_Init+0x310>)
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	089b      	lsrs	r3, r3, #2
 80029f8:	3302      	adds	r3, #2
 80029fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	f003 0303 	and.w	r3, r3, #3
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	220f      	movs	r2, #15
 8002a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0e:	43db      	mvns	r3, r3
 8002a10:	69ba      	ldr	r2, [r7, #24]
 8002a12:	4013      	ands	r3, r2
 8002a14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a52      	ldr	r2, [pc, #328]	; (8002b64 <HAL_GPIO_Init+0x314>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d02b      	beq.n	8002a76 <HAL_GPIO_Init+0x226>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a51      	ldr	r2, [pc, #324]	; (8002b68 <HAL_GPIO_Init+0x318>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d025      	beq.n	8002a72 <HAL_GPIO_Init+0x222>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a50      	ldr	r2, [pc, #320]	; (8002b6c <HAL_GPIO_Init+0x31c>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d01f      	beq.n	8002a6e <HAL_GPIO_Init+0x21e>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a4f      	ldr	r2, [pc, #316]	; (8002b70 <HAL_GPIO_Init+0x320>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d019      	beq.n	8002a6a <HAL_GPIO_Init+0x21a>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a4e      	ldr	r2, [pc, #312]	; (8002b74 <HAL_GPIO_Init+0x324>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d013      	beq.n	8002a66 <HAL_GPIO_Init+0x216>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a4d      	ldr	r2, [pc, #308]	; (8002b78 <HAL_GPIO_Init+0x328>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d00d      	beq.n	8002a62 <HAL_GPIO_Init+0x212>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a4c      	ldr	r2, [pc, #304]	; (8002b7c <HAL_GPIO_Init+0x32c>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d007      	beq.n	8002a5e <HAL_GPIO_Init+0x20e>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a4b      	ldr	r2, [pc, #300]	; (8002b80 <HAL_GPIO_Init+0x330>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d101      	bne.n	8002a5a <HAL_GPIO_Init+0x20a>
 8002a56:	2307      	movs	r3, #7
 8002a58:	e00e      	b.n	8002a78 <HAL_GPIO_Init+0x228>
 8002a5a:	2308      	movs	r3, #8
 8002a5c:	e00c      	b.n	8002a78 <HAL_GPIO_Init+0x228>
 8002a5e:	2306      	movs	r3, #6
 8002a60:	e00a      	b.n	8002a78 <HAL_GPIO_Init+0x228>
 8002a62:	2305      	movs	r3, #5
 8002a64:	e008      	b.n	8002a78 <HAL_GPIO_Init+0x228>
 8002a66:	2304      	movs	r3, #4
 8002a68:	e006      	b.n	8002a78 <HAL_GPIO_Init+0x228>
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e004      	b.n	8002a78 <HAL_GPIO_Init+0x228>
 8002a6e:	2302      	movs	r3, #2
 8002a70:	e002      	b.n	8002a78 <HAL_GPIO_Init+0x228>
 8002a72:	2301      	movs	r3, #1
 8002a74:	e000      	b.n	8002a78 <HAL_GPIO_Init+0x228>
 8002a76:	2300      	movs	r3, #0
 8002a78:	69fa      	ldr	r2, [r7, #28]
 8002a7a:	f002 0203 	and.w	r2, r2, #3
 8002a7e:	0092      	lsls	r2, r2, #2
 8002a80:	4093      	lsls	r3, r2
 8002a82:	69ba      	ldr	r2, [r7, #24]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a88:	4935      	ldr	r1, [pc, #212]	; (8002b60 <HAL_GPIO_Init+0x310>)
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	089b      	lsrs	r3, r3, #2
 8002a8e:	3302      	adds	r3, #2
 8002a90:	69ba      	ldr	r2, [r7, #24]
 8002a92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a96:	4b3b      	ldr	r3, [pc, #236]	; (8002b84 <HAL_GPIO_Init+0x334>)
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	43db      	mvns	r3, r3
 8002aa0:	69ba      	ldr	r2, [r7, #24]
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d003      	beq.n	8002aba <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002ab2:	69ba      	ldr	r2, [r7, #24]
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002aba:	4a32      	ldr	r2, [pc, #200]	; (8002b84 <HAL_GPIO_Init+0x334>)
 8002abc:	69bb      	ldr	r3, [r7, #24]
 8002abe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ac0:	4b30      	ldr	r3, [pc, #192]	; (8002b84 <HAL_GPIO_Init+0x334>)
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	43db      	mvns	r3, r3
 8002aca:	69ba      	ldr	r2, [r7, #24]
 8002acc:	4013      	ands	r3, r2
 8002ace:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d003      	beq.n	8002ae4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002adc:	69ba      	ldr	r2, [r7, #24]
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ae4:	4a27      	ldr	r2, [pc, #156]	; (8002b84 <HAL_GPIO_Init+0x334>)
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002aea:	4b26      	ldr	r3, [pc, #152]	; (8002b84 <HAL_GPIO_Init+0x334>)
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	43db      	mvns	r3, r3
 8002af4:	69ba      	ldr	r2, [r7, #24]
 8002af6:	4013      	ands	r3, r2
 8002af8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d003      	beq.n	8002b0e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002b06:	69ba      	ldr	r2, [r7, #24]
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b0e:	4a1d      	ldr	r2, [pc, #116]	; (8002b84 <HAL_GPIO_Init+0x334>)
 8002b10:	69bb      	ldr	r3, [r7, #24]
 8002b12:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b14:	4b1b      	ldr	r3, [pc, #108]	; (8002b84 <HAL_GPIO_Init+0x334>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	43db      	mvns	r3, r3
 8002b1e:	69ba      	ldr	r2, [r7, #24]
 8002b20:	4013      	ands	r3, r2
 8002b22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d003      	beq.n	8002b38 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002b30:	69ba      	ldr	r2, [r7, #24]
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b38:	4a12      	ldr	r2, [pc, #72]	; (8002b84 <HAL_GPIO_Init+0x334>)
 8002b3a:	69bb      	ldr	r3, [r7, #24]
 8002b3c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	3301      	adds	r3, #1
 8002b42:	61fb      	str	r3, [r7, #28]
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	2b0f      	cmp	r3, #15
 8002b48:	f67f ae90 	bls.w	800286c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b4c:	bf00      	nop
 8002b4e:	bf00      	nop
 8002b50:	3724      	adds	r7, #36	; 0x24
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr
 8002b5a:	bf00      	nop
 8002b5c:	40023800 	.word	0x40023800
 8002b60:	40013800 	.word	0x40013800
 8002b64:	40020000 	.word	0x40020000
 8002b68:	40020400 	.word	0x40020400
 8002b6c:	40020800 	.word	0x40020800
 8002b70:	40020c00 	.word	0x40020c00
 8002b74:	40021000 	.word	0x40021000
 8002b78:	40021400 	.word	0x40021400
 8002b7c:	40021800 	.word	0x40021800
 8002b80:	40021c00 	.word	0x40021c00
 8002b84:	40013c00 	.word	0x40013c00

08002b88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	460b      	mov	r3, r1
 8002b92:	807b      	strh	r3, [r7, #2]
 8002b94:	4613      	mov	r3, r2
 8002b96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b98:	787b      	ldrb	r3, [r7, #1]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d003      	beq.n	8002ba6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b9e:	887a      	ldrh	r2, [r7, #2]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ba4:	e003      	b.n	8002bae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ba6:	887b      	ldrh	r3, [r7, #2]
 8002ba8:	041a      	lsls	r2, r3, #16
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	619a      	str	r2, [r3, #24]
}
 8002bae:	bf00      	nop
 8002bb0:	370c      	adds	r7, #12
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr

08002bba <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002bba:	b480      	push	{r7}
 8002bbc:	b085      	sub	sp, #20
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
 8002bc2:	460b      	mov	r3, r1
 8002bc4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	695b      	ldr	r3, [r3, #20]
 8002bca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002bcc:	887a      	ldrh	r2, [r7, #2]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	041a      	lsls	r2, r3, #16
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	43d9      	mvns	r1, r3
 8002bd8:	887b      	ldrh	r3, [r7, #2]
 8002bda:	400b      	ands	r3, r1
 8002bdc:	431a      	orrs	r2, r3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	619a      	str	r2, [r3, #24]
}
 8002be2:	bf00      	nop
 8002be4:	3714      	adds	r7, #20
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
	...

08002bf0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d101      	bne.n	8002c02 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e12b      	b.n	8002e5a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d106      	bne.n	8002c1c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f7ff f976 	bl	8001f08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2224      	movs	r2, #36	; 0x24
 8002c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f022 0201 	bic.w	r2, r2, #1
 8002c32:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c42:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c52:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c54:	f001 fbba 	bl	80043cc <HAL_RCC_GetPCLK1Freq>
 8002c58:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	4a81      	ldr	r2, [pc, #516]	; (8002e64 <HAL_I2C_Init+0x274>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d807      	bhi.n	8002c74 <HAL_I2C_Init+0x84>
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	4a80      	ldr	r2, [pc, #512]	; (8002e68 <HAL_I2C_Init+0x278>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	bf94      	ite	ls
 8002c6c:	2301      	movls	r3, #1
 8002c6e:	2300      	movhi	r3, #0
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	e006      	b.n	8002c82 <HAL_I2C_Init+0x92>
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	4a7d      	ldr	r2, [pc, #500]	; (8002e6c <HAL_I2C_Init+0x27c>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	bf94      	ite	ls
 8002c7c:	2301      	movls	r3, #1
 8002c7e:	2300      	movhi	r3, #0
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d001      	beq.n	8002c8a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e0e7      	b.n	8002e5a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	4a78      	ldr	r2, [pc, #480]	; (8002e70 <HAL_I2C_Init+0x280>)
 8002c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c92:	0c9b      	lsrs	r3, r3, #18
 8002c94:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	68ba      	ldr	r2, [r7, #8]
 8002ca6:	430a      	orrs	r2, r1
 8002ca8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	6a1b      	ldr	r3, [r3, #32]
 8002cb0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	4a6a      	ldr	r2, [pc, #424]	; (8002e64 <HAL_I2C_Init+0x274>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d802      	bhi.n	8002cc4 <HAL_I2C_Init+0xd4>
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	e009      	b.n	8002cd8 <HAL_I2C_Init+0xe8>
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002cca:	fb02 f303 	mul.w	r3, r2, r3
 8002cce:	4a69      	ldr	r2, [pc, #420]	; (8002e74 <HAL_I2C_Init+0x284>)
 8002cd0:	fba2 2303 	umull	r2, r3, r2, r3
 8002cd4:	099b      	lsrs	r3, r3, #6
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	6812      	ldr	r2, [r2, #0]
 8002cdc:	430b      	orrs	r3, r1
 8002cde:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	69db      	ldr	r3, [r3, #28]
 8002ce6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002cea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	495c      	ldr	r1, [pc, #368]	; (8002e64 <HAL_I2C_Init+0x274>)
 8002cf4:	428b      	cmp	r3, r1
 8002cf6:	d819      	bhi.n	8002d2c <HAL_I2C_Init+0x13c>
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	1e59      	subs	r1, r3, #1
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	005b      	lsls	r3, r3, #1
 8002d02:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d06:	1c59      	adds	r1, r3, #1
 8002d08:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002d0c:	400b      	ands	r3, r1
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d00a      	beq.n	8002d28 <HAL_I2C_Init+0x138>
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	1e59      	subs	r1, r3, #1
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	005b      	lsls	r3, r3, #1
 8002d1c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d20:	3301      	adds	r3, #1
 8002d22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d26:	e051      	b.n	8002dcc <HAL_I2C_Init+0x1dc>
 8002d28:	2304      	movs	r3, #4
 8002d2a:	e04f      	b.n	8002dcc <HAL_I2C_Init+0x1dc>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d111      	bne.n	8002d58 <HAL_I2C_Init+0x168>
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	1e58      	subs	r0, r3, #1
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6859      	ldr	r1, [r3, #4]
 8002d3c:	460b      	mov	r3, r1
 8002d3e:	005b      	lsls	r3, r3, #1
 8002d40:	440b      	add	r3, r1
 8002d42:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d46:	3301      	adds	r3, #1
 8002d48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	bf0c      	ite	eq
 8002d50:	2301      	moveq	r3, #1
 8002d52:	2300      	movne	r3, #0
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	e012      	b.n	8002d7e <HAL_I2C_Init+0x18e>
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	1e58      	subs	r0, r3, #1
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6859      	ldr	r1, [r3, #4]
 8002d60:	460b      	mov	r3, r1
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	440b      	add	r3, r1
 8002d66:	0099      	lsls	r1, r3, #2
 8002d68:	440b      	add	r3, r1
 8002d6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d6e:	3301      	adds	r3, #1
 8002d70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	bf0c      	ite	eq
 8002d78:	2301      	moveq	r3, #1
 8002d7a:	2300      	movne	r3, #0
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d001      	beq.n	8002d86 <HAL_I2C_Init+0x196>
 8002d82:	2301      	movs	r3, #1
 8002d84:	e022      	b.n	8002dcc <HAL_I2C_Init+0x1dc>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d10e      	bne.n	8002dac <HAL_I2C_Init+0x1bc>
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	1e58      	subs	r0, r3, #1
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6859      	ldr	r1, [r3, #4]
 8002d96:	460b      	mov	r3, r1
 8002d98:	005b      	lsls	r3, r3, #1
 8002d9a:	440b      	add	r3, r1
 8002d9c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002da0:	3301      	adds	r3, #1
 8002da2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002da6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002daa:	e00f      	b.n	8002dcc <HAL_I2C_Init+0x1dc>
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	1e58      	subs	r0, r3, #1
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6859      	ldr	r1, [r3, #4]
 8002db4:	460b      	mov	r3, r1
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	440b      	add	r3, r1
 8002dba:	0099      	lsls	r1, r3, #2
 8002dbc:	440b      	add	r3, r1
 8002dbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dc8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002dcc:	6879      	ldr	r1, [r7, #4]
 8002dce:	6809      	ldr	r1, [r1, #0]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	69da      	ldr	r2, [r3, #28]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6a1b      	ldr	r3, [r3, #32]
 8002de6:	431a      	orrs	r2, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	430a      	orrs	r2, r1
 8002dee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002dfa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	6911      	ldr	r1, [r2, #16]
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	68d2      	ldr	r2, [r2, #12]
 8002e06:	4311      	orrs	r1, r2
 8002e08:	687a      	ldr	r2, [r7, #4]
 8002e0a:	6812      	ldr	r2, [r2, #0]
 8002e0c:	430b      	orrs	r3, r1
 8002e0e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	695a      	ldr	r2, [r3, #20]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	699b      	ldr	r3, [r3, #24]
 8002e22:	431a      	orrs	r2, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	430a      	orrs	r2, r1
 8002e2a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f042 0201 	orr.w	r2, r2, #1
 8002e3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2220      	movs	r2, #32
 8002e46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2200      	movs	r2, #0
 8002e54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e58:	2300      	movs	r3, #0
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3710      	adds	r7, #16
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	000186a0 	.word	0x000186a0
 8002e68:	001e847f 	.word	0x001e847f
 8002e6c:	003d08ff 	.word	0x003d08ff
 8002e70:	431bde83 	.word	0x431bde83
 8002e74:	10624dd3 	.word	0x10624dd3

08002e78 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b088      	sub	sp, #32
 8002e7c:	af02      	add	r7, sp, #8
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	607a      	str	r2, [r7, #4]
 8002e82:	461a      	mov	r2, r3
 8002e84:	460b      	mov	r3, r1
 8002e86:	817b      	strh	r3, [r7, #10]
 8002e88:	4613      	mov	r3, r2
 8002e8a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e8c:	f7ff fb0c 	bl	80024a8 <HAL_GetTick>
 8002e90:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	2b20      	cmp	r3, #32
 8002e9c:	f040 80e0 	bne.w	8003060 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	9300      	str	r3, [sp, #0]
 8002ea4:	2319      	movs	r3, #25
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	4970      	ldr	r1, [pc, #448]	; (800306c <HAL_I2C_Master_Transmit+0x1f4>)
 8002eaa:	68f8      	ldr	r0, [r7, #12]
 8002eac:	f000 fc58 	bl	8003760 <I2C_WaitOnFlagUntilTimeout>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d001      	beq.n	8002eba <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002eb6:	2302      	movs	r3, #2
 8002eb8:	e0d3      	b.n	8003062 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d101      	bne.n	8002ec8 <HAL_I2C_Master_Transmit+0x50>
 8002ec4:	2302      	movs	r3, #2
 8002ec6:	e0cc      	b.n	8003062 <HAL_I2C_Master_Transmit+0x1ea>
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0301 	and.w	r3, r3, #1
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d007      	beq.n	8002eee <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f042 0201 	orr.w	r2, r2, #1
 8002eec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002efc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2221      	movs	r2, #33	; 0x21
 8002f02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2210      	movs	r2, #16
 8002f0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2200      	movs	r2, #0
 8002f12:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	893a      	ldrh	r2, [r7, #8]
 8002f1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f24:	b29a      	uxth	r2, r3
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	4a50      	ldr	r2, [pc, #320]	; (8003070 <HAL_I2C_Master_Transmit+0x1f8>)
 8002f2e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002f30:	8979      	ldrh	r1, [r7, #10]
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	6a3a      	ldr	r2, [r7, #32]
 8002f36:	68f8      	ldr	r0, [r7, #12]
 8002f38:	f000 fac2 	bl	80034c0 <I2C_MasterRequestWrite>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d001      	beq.n	8002f46 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e08d      	b.n	8003062 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f46:	2300      	movs	r3, #0
 8002f48:	613b      	str	r3, [r7, #16]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	695b      	ldr	r3, [r3, #20]
 8002f50:	613b      	str	r3, [r7, #16]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	699b      	ldr	r3, [r3, #24]
 8002f58:	613b      	str	r3, [r7, #16]
 8002f5a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002f5c:	e066      	b.n	800302c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f5e:	697a      	ldr	r2, [r7, #20]
 8002f60:	6a39      	ldr	r1, [r7, #32]
 8002f62:	68f8      	ldr	r0, [r7, #12]
 8002f64:	f000 fcd2 	bl	800390c <I2C_WaitOnTXEFlagUntilTimeout>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d00d      	beq.n	8002f8a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f72:	2b04      	cmp	r3, #4
 8002f74:	d107      	bne.n	8002f86 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f84:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e06b      	b.n	8003062 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8e:	781a      	ldrb	r2, [r3, #0]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9a:	1c5a      	adds	r2, r3, #1
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	3b01      	subs	r3, #1
 8002fa8:	b29a      	uxth	r2, r3
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fb2:	3b01      	subs	r3, #1
 8002fb4:	b29a      	uxth	r2, r3
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	695b      	ldr	r3, [r3, #20]
 8002fc0:	f003 0304 	and.w	r3, r3, #4
 8002fc4:	2b04      	cmp	r3, #4
 8002fc6:	d11b      	bne.n	8003000 <HAL_I2C_Master_Transmit+0x188>
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d017      	beq.n	8003000 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd4:	781a      	ldrb	r2, [r3, #0]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe0:	1c5a      	adds	r2, r3, #1
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	3b01      	subs	r3, #1
 8002fee:	b29a      	uxth	r2, r3
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ff8:	3b01      	subs	r3, #1
 8002ffa:	b29a      	uxth	r2, r3
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003000:	697a      	ldr	r2, [r7, #20]
 8003002:	6a39      	ldr	r1, [r7, #32]
 8003004:	68f8      	ldr	r0, [r7, #12]
 8003006:	f000 fcc2 	bl	800398e <I2C_WaitOnBTFFlagUntilTimeout>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d00d      	beq.n	800302c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003014:	2b04      	cmp	r3, #4
 8003016:	d107      	bne.n	8003028 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003026:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e01a      	b.n	8003062 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003030:	2b00      	cmp	r3, #0
 8003032:	d194      	bne.n	8002f5e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003042:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2220      	movs	r2, #32
 8003048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2200      	movs	r2, #0
 8003050:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2200      	movs	r2, #0
 8003058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800305c:	2300      	movs	r3, #0
 800305e:	e000      	b.n	8003062 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003060:	2302      	movs	r3, #2
  }
}
 8003062:	4618      	mov	r0, r3
 8003064:	3718      	adds	r7, #24
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop
 800306c:	00100002 	.word	0x00100002
 8003070:	ffff0000 	.word	0xffff0000

08003074 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b08c      	sub	sp, #48	; 0x30
 8003078:	af02      	add	r7, sp, #8
 800307a:	60f8      	str	r0, [r7, #12]
 800307c:	607a      	str	r2, [r7, #4]
 800307e:	461a      	mov	r2, r3
 8003080:	460b      	mov	r3, r1
 8003082:	817b      	strh	r3, [r7, #10]
 8003084:	4613      	mov	r3, r2
 8003086:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003088:	f7ff fa0e 	bl	80024a8 <HAL_GetTick>
 800308c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003094:	b2db      	uxtb	r3, r3
 8003096:	2b20      	cmp	r3, #32
 8003098:	f040 820b 	bne.w	80034b2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800309c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309e:	9300      	str	r3, [sp, #0]
 80030a0:	2319      	movs	r3, #25
 80030a2:	2201      	movs	r2, #1
 80030a4:	497c      	ldr	r1, [pc, #496]	; (8003298 <HAL_I2C_Master_Receive+0x224>)
 80030a6:	68f8      	ldr	r0, [r7, #12]
 80030a8:	f000 fb5a 	bl	8003760 <I2C_WaitOnFlagUntilTimeout>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d001      	beq.n	80030b6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80030b2:	2302      	movs	r3, #2
 80030b4:	e1fe      	b.n	80034b4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d101      	bne.n	80030c4 <HAL_I2C_Master_Receive+0x50>
 80030c0:	2302      	movs	r3, #2
 80030c2:	e1f7      	b.n	80034b4 <HAL_I2C_Master_Receive+0x440>
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2201      	movs	r2, #1
 80030c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0301 	and.w	r3, r3, #1
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d007      	beq.n	80030ea <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f042 0201 	orr.w	r2, r2, #1
 80030e8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030f8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2222      	movs	r2, #34	; 0x22
 80030fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2210      	movs	r2, #16
 8003106:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2200      	movs	r2, #0
 800310e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	893a      	ldrh	r2, [r7, #8]
 800311a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003120:	b29a      	uxth	r2, r3
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	4a5c      	ldr	r2, [pc, #368]	; (800329c <HAL_I2C_Master_Receive+0x228>)
 800312a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800312c:	8979      	ldrh	r1, [r7, #10]
 800312e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003130:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003132:	68f8      	ldr	r0, [r7, #12]
 8003134:	f000 fa46 	bl	80035c4 <I2C_MasterRequestRead>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d001      	beq.n	8003142 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e1b8      	b.n	80034b4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003146:	2b00      	cmp	r3, #0
 8003148:	d113      	bne.n	8003172 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800314a:	2300      	movs	r3, #0
 800314c:	623b      	str	r3, [r7, #32]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	695b      	ldr	r3, [r3, #20]
 8003154:	623b      	str	r3, [r7, #32]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	699b      	ldr	r3, [r3, #24]
 800315c:	623b      	str	r3, [r7, #32]
 800315e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800316e:	601a      	str	r2, [r3, #0]
 8003170:	e18c      	b.n	800348c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003176:	2b01      	cmp	r3, #1
 8003178:	d11b      	bne.n	80031b2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003188:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800318a:	2300      	movs	r3, #0
 800318c:	61fb      	str	r3, [r7, #28]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	695b      	ldr	r3, [r3, #20]
 8003194:	61fb      	str	r3, [r7, #28]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	699b      	ldr	r3, [r3, #24]
 800319c:	61fb      	str	r3, [r7, #28]
 800319e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031ae:	601a      	str	r2, [r3, #0]
 80031b0:	e16c      	b.n	800348c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d11b      	bne.n	80031f2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031c8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031d8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031da:	2300      	movs	r3, #0
 80031dc:	61bb      	str	r3, [r7, #24]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	695b      	ldr	r3, [r3, #20]
 80031e4:	61bb      	str	r3, [r7, #24]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	699b      	ldr	r3, [r3, #24]
 80031ec:	61bb      	str	r3, [r7, #24]
 80031ee:	69bb      	ldr	r3, [r7, #24]
 80031f0:	e14c      	b.n	800348c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003200:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003202:	2300      	movs	r3, #0
 8003204:	617b      	str	r3, [r7, #20]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	695b      	ldr	r3, [r3, #20]
 800320c:	617b      	str	r3, [r7, #20]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	699b      	ldr	r3, [r3, #24]
 8003214:	617b      	str	r3, [r7, #20]
 8003216:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003218:	e138      	b.n	800348c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800321e:	2b03      	cmp	r3, #3
 8003220:	f200 80f1 	bhi.w	8003406 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003228:	2b01      	cmp	r3, #1
 800322a:	d123      	bne.n	8003274 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800322c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800322e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003230:	68f8      	ldr	r0, [r7, #12]
 8003232:	f000 fbed 	bl	8003a10 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003236:	4603      	mov	r3, r0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d001      	beq.n	8003240 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e139      	b.n	80034b4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	691a      	ldr	r2, [r3, #16]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324a:	b2d2      	uxtb	r2, r2
 800324c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003252:	1c5a      	adds	r2, r3, #1
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800325c:	3b01      	subs	r3, #1
 800325e:	b29a      	uxth	r2, r3
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003268:	b29b      	uxth	r3, r3
 800326a:	3b01      	subs	r3, #1
 800326c:	b29a      	uxth	r2, r3
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003272:	e10b      	b.n	800348c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003278:	2b02      	cmp	r3, #2
 800327a:	d14e      	bne.n	800331a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800327c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327e:	9300      	str	r3, [sp, #0]
 8003280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003282:	2200      	movs	r2, #0
 8003284:	4906      	ldr	r1, [pc, #24]	; (80032a0 <HAL_I2C_Master_Receive+0x22c>)
 8003286:	68f8      	ldr	r0, [r7, #12]
 8003288:	f000 fa6a 	bl	8003760 <I2C_WaitOnFlagUntilTimeout>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d008      	beq.n	80032a4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e10e      	b.n	80034b4 <HAL_I2C_Master_Receive+0x440>
 8003296:	bf00      	nop
 8003298:	00100002 	.word	0x00100002
 800329c:	ffff0000 	.word	0xffff0000
 80032a0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	691a      	ldr	r2, [r3, #16]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032be:	b2d2      	uxtb	r2, r2
 80032c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c6:	1c5a      	adds	r2, r3, #1
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032d0:	3b01      	subs	r3, #1
 80032d2:	b29a      	uxth	r2, r3
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032dc:	b29b      	uxth	r3, r3
 80032de:	3b01      	subs	r3, #1
 80032e0:	b29a      	uxth	r2, r3
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	691a      	ldr	r2, [r3, #16]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f0:	b2d2      	uxtb	r2, r2
 80032f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f8:	1c5a      	adds	r2, r3, #1
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003302:	3b01      	subs	r3, #1
 8003304:	b29a      	uxth	r2, r3
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800330e:	b29b      	uxth	r3, r3
 8003310:	3b01      	subs	r3, #1
 8003312:	b29a      	uxth	r2, r3
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003318:	e0b8      	b.n	800348c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800331a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331c:	9300      	str	r3, [sp, #0]
 800331e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003320:	2200      	movs	r2, #0
 8003322:	4966      	ldr	r1, [pc, #408]	; (80034bc <HAL_I2C_Master_Receive+0x448>)
 8003324:	68f8      	ldr	r0, [r7, #12]
 8003326:	f000 fa1b 	bl	8003760 <I2C_WaitOnFlagUntilTimeout>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d001      	beq.n	8003334 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e0bf      	b.n	80034b4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003342:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	691a      	ldr	r2, [r3, #16]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334e:	b2d2      	uxtb	r2, r2
 8003350:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003356:	1c5a      	adds	r2, r3, #1
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003360:	3b01      	subs	r3, #1
 8003362:	b29a      	uxth	r2, r3
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800336c:	b29b      	uxth	r3, r3
 800336e:	3b01      	subs	r3, #1
 8003370:	b29a      	uxth	r2, r3
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003378:	9300      	str	r3, [sp, #0]
 800337a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800337c:	2200      	movs	r2, #0
 800337e:	494f      	ldr	r1, [pc, #316]	; (80034bc <HAL_I2C_Master_Receive+0x448>)
 8003380:	68f8      	ldr	r0, [r7, #12]
 8003382:	f000 f9ed 	bl	8003760 <I2C_WaitOnFlagUntilTimeout>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d001      	beq.n	8003390 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e091      	b.n	80034b4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800339e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	691a      	ldr	r2, [r3, #16]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033aa:	b2d2      	uxtb	r2, r2
 80033ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b2:	1c5a      	adds	r2, r3, #1
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033bc:	3b01      	subs	r3, #1
 80033be:	b29a      	uxth	r2, r3
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	3b01      	subs	r3, #1
 80033cc:	b29a      	uxth	r2, r3
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	691a      	ldr	r2, [r3, #16]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033dc:	b2d2      	uxtb	r2, r2
 80033de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e4:	1c5a      	adds	r2, r3, #1
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033ee:	3b01      	subs	r3, #1
 80033f0:	b29a      	uxth	r2, r3
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	3b01      	subs	r3, #1
 80033fe:	b29a      	uxth	r2, r3
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003404:	e042      	b.n	800348c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003406:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003408:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800340a:	68f8      	ldr	r0, [r7, #12]
 800340c:	f000 fb00 	bl	8003a10 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003410:	4603      	mov	r3, r0
 8003412:	2b00      	cmp	r3, #0
 8003414:	d001      	beq.n	800341a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e04c      	b.n	80034b4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	691a      	ldr	r2, [r3, #16]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003424:	b2d2      	uxtb	r2, r2
 8003426:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342c:	1c5a      	adds	r2, r3, #1
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003436:	3b01      	subs	r3, #1
 8003438:	b29a      	uxth	r2, r3
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003442:	b29b      	uxth	r3, r3
 8003444:	3b01      	subs	r3, #1
 8003446:	b29a      	uxth	r2, r3
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	695b      	ldr	r3, [r3, #20]
 8003452:	f003 0304 	and.w	r3, r3, #4
 8003456:	2b04      	cmp	r3, #4
 8003458:	d118      	bne.n	800348c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	691a      	ldr	r2, [r3, #16]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003464:	b2d2      	uxtb	r2, r2
 8003466:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346c:	1c5a      	adds	r2, r3, #1
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003476:	3b01      	subs	r3, #1
 8003478:	b29a      	uxth	r2, r3
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003482:	b29b      	uxth	r3, r3
 8003484:	3b01      	subs	r3, #1
 8003486:	b29a      	uxth	r2, r3
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003490:	2b00      	cmp	r3, #0
 8003492:	f47f aec2 	bne.w	800321a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2220      	movs	r2, #32
 800349a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2200      	movs	r2, #0
 80034aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80034ae:	2300      	movs	r3, #0
 80034b0:	e000      	b.n	80034b4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80034b2:	2302      	movs	r3, #2
  }
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3728      	adds	r7, #40	; 0x28
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	00010004 	.word	0x00010004

080034c0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b088      	sub	sp, #32
 80034c4:	af02      	add	r7, sp, #8
 80034c6:	60f8      	str	r0, [r7, #12]
 80034c8:	607a      	str	r2, [r7, #4]
 80034ca:	603b      	str	r3, [r7, #0]
 80034cc:	460b      	mov	r3, r1
 80034ce:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	2b08      	cmp	r3, #8
 80034da:	d006      	beq.n	80034ea <I2C_MasterRequestWrite+0x2a>
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d003      	beq.n	80034ea <I2C_MasterRequestWrite+0x2a>
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80034e8:	d108      	bne.n	80034fc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034f8:	601a      	str	r2, [r3, #0]
 80034fa:	e00b      	b.n	8003514 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003500:	2b12      	cmp	r3, #18
 8003502:	d107      	bne.n	8003514 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003512:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	9300      	str	r3, [sp, #0]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003520:	68f8      	ldr	r0, [r7, #12]
 8003522:	f000 f91d 	bl	8003760 <I2C_WaitOnFlagUntilTimeout>
 8003526:	4603      	mov	r3, r0
 8003528:	2b00      	cmp	r3, #0
 800352a:	d00d      	beq.n	8003548 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003536:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800353a:	d103      	bne.n	8003544 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003542:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	e035      	b.n	80035b4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	691b      	ldr	r3, [r3, #16]
 800354c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003550:	d108      	bne.n	8003564 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003552:	897b      	ldrh	r3, [r7, #10]
 8003554:	b2db      	uxtb	r3, r3
 8003556:	461a      	mov	r2, r3
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003560:	611a      	str	r2, [r3, #16]
 8003562:	e01b      	b.n	800359c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003564:	897b      	ldrh	r3, [r7, #10]
 8003566:	11db      	asrs	r3, r3, #7
 8003568:	b2db      	uxtb	r3, r3
 800356a:	f003 0306 	and.w	r3, r3, #6
 800356e:	b2db      	uxtb	r3, r3
 8003570:	f063 030f 	orn	r3, r3, #15
 8003574:	b2da      	uxtb	r2, r3
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	490e      	ldr	r1, [pc, #56]	; (80035bc <I2C_MasterRequestWrite+0xfc>)
 8003582:	68f8      	ldr	r0, [r7, #12]
 8003584:	f000 f943 	bl	800380e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003588:	4603      	mov	r3, r0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d001      	beq.n	8003592 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e010      	b.n	80035b4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003592:	897b      	ldrh	r3, [r7, #10]
 8003594:	b2da      	uxtb	r2, r3
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	4907      	ldr	r1, [pc, #28]	; (80035c0 <I2C_MasterRequestWrite+0x100>)
 80035a2:	68f8      	ldr	r0, [r7, #12]
 80035a4:	f000 f933 	bl	800380e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d001      	beq.n	80035b2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e000      	b.n	80035b4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80035b2:	2300      	movs	r3, #0
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3718      	adds	r7, #24
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	00010008 	.word	0x00010008
 80035c0:	00010002 	.word	0x00010002

080035c4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b088      	sub	sp, #32
 80035c8:	af02      	add	r7, sp, #8
 80035ca:	60f8      	str	r0, [r7, #12]
 80035cc:	607a      	str	r2, [r7, #4]
 80035ce:	603b      	str	r3, [r7, #0]
 80035d0:	460b      	mov	r3, r1
 80035d2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80035e8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	2b08      	cmp	r3, #8
 80035ee:	d006      	beq.n	80035fe <I2C_MasterRequestRead+0x3a>
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d003      	beq.n	80035fe <I2C_MasterRequestRead+0x3a>
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80035fc:	d108      	bne.n	8003610 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800360c:	601a      	str	r2, [r3, #0]
 800360e:	e00b      	b.n	8003628 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003614:	2b11      	cmp	r3, #17
 8003616:	d107      	bne.n	8003628 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003626:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	9300      	str	r3, [sp, #0]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003634:	68f8      	ldr	r0, [r7, #12]
 8003636:	f000 f893 	bl	8003760 <I2C_WaitOnFlagUntilTimeout>
 800363a:	4603      	mov	r3, r0
 800363c:	2b00      	cmp	r3, #0
 800363e:	d00d      	beq.n	800365c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800364a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800364e:	d103      	bne.n	8003658 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003656:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003658:	2303      	movs	r3, #3
 800365a:	e079      	b.n	8003750 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	691b      	ldr	r3, [r3, #16]
 8003660:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003664:	d108      	bne.n	8003678 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003666:	897b      	ldrh	r3, [r7, #10]
 8003668:	b2db      	uxtb	r3, r3
 800366a:	f043 0301 	orr.w	r3, r3, #1
 800366e:	b2da      	uxtb	r2, r3
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	611a      	str	r2, [r3, #16]
 8003676:	e05f      	b.n	8003738 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003678:	897b      	ldrh	r3, [r7, #10]
 800367a:	11db      	asrs	r3, r3, #7
 800367c:	b2db      	uxtb	r3, r3
 800367e:	f003 0306 	and.w	r3, r3, #6
 8003682:	b2db      	uxtb	r3, r3
 8003684:	f063 030f 	orn	r3, r3, #15
 8003688:	b2da      	uxtb	r2, r3
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	4930      	ldr	r1, [pc, #192]	; (8003758 <I2C_MasterRequestRead+0x194>)
 8003696:	68f8      	ldr	r0, [r7, #12]
 8003698:	f000 f8b9 	bl	800380e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800369c:	4603      	mov	r3, r0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d001      	beq.n	80036a6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e054      	b.n	8003750 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80036a6:	897b      	ldrh	r3, [r7, #10]
 80036a8:	b2da      	uxtb	r2, r3
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	4929      	ldr	r1, [pc, #164]	; (800375c <I2C_MasterRequestRead+0x198>)
 80036b6:	68f8      	ldr	r0, [r7, #12]
 80036b8:	f000 f8a9 	bl	800380e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d001      	beq.n	80036c6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e044      	b.n	8003750 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036c6:	2300      	movs	r3, #0
 80036c8:	613b      	str	r3, [r7, #16]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	695b      	ldr	r3, [r3, #20]
 80036d0:	613b      	str	r3, [r7, #16]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	699b      	ldr	r3, [r3, #24]
 80036d8:	613b      	str	r3, [r7, #16]
 80036da:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036ea:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	9300      	str	r3, [sp, #0]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80036f8:	68f8      	ldr	r0, [r7, #12]
 80036fa:	f000 f831 	bl	8003760 <I2C_WaitOnFlagUntilTimeout>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d00d      	beq.n	8003720 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800370e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003712:	d103      	bne.n	800371c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f44f 7200 	mov.w	r2, #512	; 0x200
 800371a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800371c:	2303      	movs	r3, #3
 800371e:	e017      	b.n	8003750 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003720:	897b      	ldrh	r3, [r7, #10]
 8003722:	11db      	asrs	r3, r3, #7
 8003724:	b2db      	uxtb	r3, r3
 8003726:	f003 0306 	and.w	r3, r3, #6
 800372a:	b2db      	uxtb	r3, r3
 800372c:	f063 030e 	orn	r3, r3, #14
 8003730:	b2da      	uxtb	r2, r3
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	4907      	ldr	r1, [pc, #28]	; (800375c <I2C_MasterRequestRead+0x198>)
 800373e:	68f8      	ldr	r0, [r7, #12]
 8003740:	f000 f865 	bl	800380e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003744:	4603      	mov	r3, r0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d001      	beq.n	800374e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e000      	b.n	8003750 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800374e:	2300      	movs	r3, #0
}
 8003750:	4618      	mov	r0, r3
 8003752:	3718      	adds	r7, #24
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}
 8003758:	00010008 	.word	0x00010008
 800375c:	00010002 	.word	0x00010002

08003760 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b084      	sub	sp, #16
 8003764:	af00      	add	r7, sp, #0
 8003766:	60f8      	str	r0, [r7, #12]
 8003768:	60b9      	str	r1, [r7, #8]
 800376a:	603b      	str	r3, [r7, #0]
 800376c:	4613      	mov	r3, r2
 800376e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003770:	e025      	b.n	80037be <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003778:	d021      	beq.n	80037be <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800377a:	f7fe fe95 	bl	80024a8 <HAL_GetTick>
 800377e:	4602      	mov	r2, r0
 8003780:	69bb      	ldr	r3, [r7, #24]
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	683a      	ldr	r2, [r7, #0]
 8003786:	429a      	cmp	r2, r3
 8003788:	d302      	bcc.n	8003790 <I2C_WaitOnFlagUntilTimeout+0x30>
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d116      	bne.n	80037be <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2200      	movs	r2, #0
 8003794:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2220      	movs	r2, #32
 800379a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2200      	movs	r2, #0
 80037a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037aa:	f043 0220 	orr.w	r2, r3, #32
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e023      	b.n	8003806 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	0c1b      	lsrs	r3, r3, #16
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d10d      	bne.n	80037e4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	695b      	ldr	r3, [r3, #20]
 80037ce:	43da      	mvns	r2, r3
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	4013      	ands	r3, r2
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	bf0c      	ite	eq
 80037da:	2301      	moveq	r3, #1
 80037dc:	2300      	movne	r3, #0
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	461a      	mov	r2, r3
 80037e2:	e00c      	b.n	80037fe <I2C_WaitOnFlagUntilTimeout+0x9e>
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	699b      	ldr	r3, [r3, #24]
 80037ea:	43da      	mvns	r2, r3
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	4013      	ands	r3, r2
 80037f0:	b29b      	uxth	r3, r3
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	bf0c      	ite	eq
 80037f6:	2301      	moveq	r3, #1
 80037f8:	2300      	movne	r3, #0
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	461a      	mov	r2, r3
 80037fe:	79fb      	ldrb	r3, [r7, #7]
 8003800:	429a      	cmp	r2, r3
 8003802:	d0b6      	beq.n	8003772 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003804:	2300      	movs	r3, #0
}
 8003806:	4618      	mov	r0, r3
 8003808:	3710      	adds	r7, #16
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}

0800380e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800380e:	b580      	push	{r7, lr}
 8003810:	b084      	sub	sp, #16
 8003812:	af00      	add	r7, sp, #0
 8003814:	60f8      	str	r0, [r7, #12]
 8003816:	60b9      	str	r1, [r7, #8]
 8003818:	607a      	str	r2, [r7, #4]
 800381a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800381c:	e051      	b.n	80038c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	695b      	ldr	r3, [r3, #20]
 8003824:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003828:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800382c:	d123      	bne.n	8003876 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800383c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003846:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2200      	movs	r2, #0
 800384c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2220      	movs	r2, #32
 8003852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2200      	movs	r2, #0
 800385a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003862:	f043 0204 	orr.w	r2, r3, #4
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e046      	b.n	8003904 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800387c:	d021      	beq.n	80038c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800387e:	f7fe fe13 	bl	80024a8 <HAL_GetTick>
 8003882:	4602      	mov	r2, r0
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	1ad3      	subs	r3, r2, r3
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	429a      	cmp	r2, r3
 800388c:	d302      	bcc.n	8003894 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d116      	bne.n	80038c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2200      	movs	r2, #0
 8003898:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2220      	movs	r2, #32
 800389e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2200      	movs	r2, #0
 80038a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ae:	f043 0220 	orr.w	r2, r3, #32
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2200      	movs	r2, #0
 80038ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e020      	b.n	8003904 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	0c1b      	lsrs	r3, r3, #16
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d10c      	bne.n	80038e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	695b      	ldr	r3, [r3, #20]
 80038d2:	43da      	mvns	r2, r3
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	4013      	ands	r3, r2
 80038d8:	b29b      	uxth	r3, r3
 80038da:	2b00      	cmp	r3, #0
 80038dc:	bf14      	ite	ne
 80038de:	2301      	movne	r3, #1
 80038e0:	2300      	moveq	r3, #0
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	e00b      	b.n	80038fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	699b      	ldr	r3, [r3, #24]
 80038ec:	43da      	mvns	r2, r3
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	4013      	ands	r3, r2
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	bf14      	ite	ne
 80038f8:	2301      	movne	r3, #1
 80038fa:	2300      	moveq	r3, #0
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d18d      	bne.n	800381e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003902:	2300      	movs	r3, #0
}
 8003904:	4618      	mov	r0, r3
 8003906:	3710      	adds	r7, #16
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
 8003912:	60f8      	str	r0, [r7, #12]
 8003914:	60b9      	str	r1, [r7, #8]
 8003916:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003918:	e02d      	b.n	8003976 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800391a:	68f8      	ldr	r0, [r7, #12]
 800391c:	f000 f8ce 	bl	8003abc <I2C_IsAcknowledgeFailed>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d001      	beq.n	800392a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e02d      	b.n	8003986 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003930:	d021      	beq.n	8003976 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003932:	f7fe fdb9 	bl	80024a8 <HAL_GetTick>
 8003936:	4602      	mov	r2, r0
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	68ba      	ldr	r2, [r7, #8]
 800393e:	429a      	cmp	r2, r3
 8003940:	d302      	bcc.n	8003948 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d116      	bne.n	8003976 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2200      	movs	r2, #0
 800394c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2220      	movs	r2, #32
 8003952:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2200      	movs	r2, #0
 800395a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003962:	f043 0220 	orr.w	r2, r3, #32
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2200      	movs	r2, #0
 800396e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e007      	b.n	8003986 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	695b      	ldr	r3, [r3, #20]
 800397c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003980:	2b80      	cmp	r3, #128	; 0x80
 8003982:	d1ca      	bne.n	800391a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003984:	2300      	movs	r3, #0
}
 8003986:	4618      	mov	r0, r3
 8003988:	3710      	adds	r7, #16
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}

0800398e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800398e:	b580      	push	{r7, lr}
 8003990:	b084      	sub	sp, #16
 8003992:	af00      	add	r7, sp, #0
 8003994:	60f8      	str	r0, [r7, #12]
 8003996:	60b9      	str	r1, [r7, #8]
 8003998:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800399a:	e02d      	b.n	80039f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800399c:	68f8      	ldr	r0, [r7, #12]
 800399e:	f000 f88d 	bl	8003abc <I2C_IsAcknowledgeFailed>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d001      	beq.n	80039ac <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e02d      	b.n	8003a08 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039b2:	d021      	beq.n	80039f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039b4:	f7fe fd78 	bl	80024a8 <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	68ba      	ldr	r2, [r7, #8]
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d302      	bcc.n	80039ca <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d116      	bne.n	80039f8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2200      	movs	r2, #0
 80039ce:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2220      	movs	r2, #32
 80039d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2200      	movs	r2, #0
 80039dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e4:	f043 0220 	orr.w	r2, r3, #32
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e007      	b.n	8003a08 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	695b      	ldr	r3, [r3, #20]
 80039fe:	f003 0304 	and.w	r3, r3, #4
 8003a02:	2b04      	cmp	r3, #4
 8003a04:	d1ca      	bne.n	800399c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a06:	2300      	movs	r3, #0
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3710      	adds	r7, #16
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b084      	sub	sp, #16
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	60f8      	str	r0, [r7, #12]
 8003a18:	60b9      	str	r1, [r7, #8]
 8003a1a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003a1c:	e042      	b.n	8003aa4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	695b      	ldr	r3, [r3, #20]
 8003a24:	f003 0310 	and.w	r3, r3, #16
 8003a28:	2b10      	cmp	r3, #16
 8003a2a:	d119      	bne.n	8003a60 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f06f 0210 	mvn.w	r2, #16
 8003a34:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2220      	movs	r2, #32
 8003a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2200      	movs	r2, #0
 8003a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e029      	b.n	8003ab4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a60:	f7fe fd22 	bl	80024a8 <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	68ba      	ldr	r2, [r7, #8]
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d302      	bcc.n	8003a76 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d116      	bne.n	8003aa4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2220      	movs	r2, #32
 8003a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2200      	movs	r2, #0
 8003a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a90:	f043 0220 	orr.w	r2, r3, #32
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e007      	b.n	8003ab4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	695b      	ldr	r3, [r3, #20]
 8003aaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aae:	2b40      	cmp	r3, #64	; 0x40
 8003ab0:	d1b5      	bne.n	8003a1e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003ab2:	2300      	movs	r3, #0
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3710      	adds	r7, #16
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}

08003abc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	695b      	ldr	r3, [r3, #20]
 8003aca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ace:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ad2:	d11b      	bne.n	8003b0c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003adc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2220      	movs	r2, #32
 8003ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af8:	f043 0204 	orr.w	r2, r3, #4
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e000      	b.n	8003b0e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	370c      	adds	r7, #12
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr
	...

08003b1c <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b083      	sub	sp, #12
 8003b20:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8003b22:	4b06      	ldr	r3, [pc, #24]	; (8003b3c <HAL_PWR_EnableBkUpAccess+0x20>)
 8003b24:	2201      	movs	r2, #1
 8003b26:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8003b28:	4b05      	ldr	r3, [pc, #20]	; (8003b40 <HAL_PWR_EnableBkUpAccess+0x24>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8003b2e:	687b      	ldr	r3, [r7, #4]
}
 8003b30:	bf00      	nop
 8003b32:	370c      	adds	r7, #12
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr
 8003b3c:	420e0020 	.word	0x420e0020
 8003b40:	40007000 	.word	0x40007000

08003b44 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b083      	sub	sp, #12
 8003b48:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8003b4a:	4b06      	ldr	r3, [pc, #24]	; (8003b64 <HAL_PWR_DisableBkUpAccess+0x20>)
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8003b50:	4b05      	ldr	r3, [pc, #20]	; (8003b68 <HAL_PWR_DisableBkUpAccess+0x24>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8003b56:	687b      	ldr	r3, [r7, #4]
}
 8003b58:	bf00      	nop
 8003b5a:	370c      	adds	r7, #12
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr
 8003b64:	420e0020 	.word	0x420e0020
 8003b68:	40007000 	.word	0x40007000

08003b6c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b086      	sub	sp, #24
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d101      	bne.n	8003b7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e267      	b.n	800404e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0301 	and.w	r3, r3, #1
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d075      	beq.n	8003c76 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b8a:	4b88      	ldr	r3, [pc, #544]	; (8003dac <HAL_RCC_OscConfig+0x240>)
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	f003 030c 	and.w	r3, r3, #12
 8003b92:	2b04      	cmp	r3, #4
 8003b94:	d00c      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b96:	4b85      	ldr	r3, [pc, #532]	; (8003dac <HAL_RCC_OscConfig+0x240>)
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b9e:	2b08      	cmp	r3, #8
 8003ba0:	d112      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ba2:	4b82      	ldr	r3, [pc, #520]	; (8003dac <HAL_RCC_OscConfig+0x240>)
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003baa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bae:	d10b      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bb0:	4b7e      	ldr	r3, [pc, #504]	; (8003dac <HAL_RCC_OscConfig+0x240>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d05b      	beq.n	8003c74 <HAL_RCC_OscConfig+0x108>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d157      	bne.n	8003c74 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e242      	b.n	800404e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bd0:	d106      	bne.n	8003be0 <HAL_RCC_OscConfig+0x74>
 8003bd2:	4b76      	ldr	r3, [pc, #472]	; (8003dac <HAL_RCC_OscConfig+0x240>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a75      	ldr	r2, [pc, #468]	; (8003dac <HAL_RCC_OscConfig+0x240>)
 8003bd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bdc:	6013      	str	r3, [r2, #0]
 8003bde:	e01d      	b.n	8003c1c <HAL_RCC_OscConfig+0xb0>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003be8:	d10c      	bne.n	8003c04 <HAL_RCC_OscConfig+0x98>
 8003bea:	4b70      	ldr	r3, [pc, #448]	; (8003dac <HAL_RCC_OscConfig+0x240>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a6f      	ldr	r2, [pc, #444]	; (8003dac <HAL_RCC_OscConfig+0x240>)
 8003bf0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bf4:	6013      	str	r3, [r2, #0]
 8003bf6:	4b6d      	ldr	r3, [pc, #436]	; (8003dac <HAL_RCC_OscConfig+0x240>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a6c      	ldr	r2, [pc, #432]	; (8003dac <HAL_RCC_OscConfig+0x240>)
 8003bfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c00:	6013      	str	r3, [r2, #0]
 8003c02:	e00b      	b.n	8003c1c <HAL_RCC_OscConfig+0xb0>
 8003c04:	4b69      	ldr	r3, [pc, #420]	; (8003dac <HAL_RCC_OscConfig+0x240>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a68      	ldr	r2, [pc, #416]	; (8003dac <HAL_RCC_OscConfig+0x240>)
 8003c0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c0e:	6013      	str	r3, [r2, #0]
 8003c10:	4b66      	ldr	r3, [pc, #408]	; (8003dac <HAL_RCC_OscConfig+0x240>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a65      	ldr	r2, [pc, #404]	; (8003dac <HAL_RCC_OscConfig+0x240>)
 8003c16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d013      	beq.n	8003c4c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c24:	f7fe fc40 	bl	80024a8 <HAL_GetTick>
 8003c28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c2a:	e008      	b.n	8003c3e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c2c:	f7fe fc3c 	bl	80024a8 <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	2b64      	cmp	r3, #100	; 0x64
 8003c38:	d901      	bls.n	8003c3e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e207      	b.n	800404e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c3e:	4b5b      	ldr	r3, [pc, #364]	; (8003dac <HAL_RCC_OscConfig+0x240>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d0f0      	beq.n	8003c2c <HAL_RCC_OscConfig+0xc0>
 8003c4a:	e014      	b.n	8003c76 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c4c:	f7fe fc2c 	bl	80024a8 <HAL_GetTick>
 8003c50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c52:	e008      	b.n	8003c66 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c54:	f7fe fc28 	bl	80024a8 <HAL_GetTick>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	2b64      	cmp	r3, #100	; 0x64
 8003c60:	d901      	bls.n	8003c66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e1f3      	b.n	800404e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c66:	4b51      	ldr	r3, [pc, #324]	; (8003dac <HAL_RCC_OscConfig+0x240>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d1f0      	bne.n	8003c54 <HAL_RCC_OscConfig+0xe8>
 8003c72:	e000      	b.n	8003c76 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0302 	and.w	r3, r3, #2
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d063      	beq.n	8003d4a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c82:	4b4a      	ldr	r3, [pc, #296]	; (8003dac <HAL_RCC_OscConfig+0x240>)
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	f003 030c 	and.w	r3, r3, #12
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d00b      	beq.n	8003ca6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c8e:	4b47      	ldr	r3, [pc, #284]	; (8003dac <HAL_RCC_OscConfig+0x240>)
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c96:	2b08      	cmp	r3, #8
 8003c98:	d11c      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c9a:	4b44      	ldr	r3, [pc, #272]	; (8003dac <HAL_RCC_OscConfig+0x240>)
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d116      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ca6:	4b41      	ldr	r3, [pc, #260]	; (8003dac <HAL_RCC_OscConfig+0x240>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0302 	and.w	r3, r3, #2
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d005      	beq.n	8003cbe <HAL_RCC_OscConfig+0x152>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d001      	beq.n	8003cbe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e1c7      	b.n	800404e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cbe:	4b3b      	ldr	r3, [pc, #236]	; (8003dac <HAL_RCC_OscConfig+0x240>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	691b      	ldr	r3, [r3, #16]
 8003cca:	00db      	lsls	r3, r3, #3
 8003ccc:	4937      	ldr	r1, [pc, #220]	; (8003dac <HAL_RCC_OscConfig+0x240>)
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cd2:	e03a      	b.n	8003d4a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d020      	beq.n	8003d1e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cdc:	4b34      	ldr	r3, [pc, #208]	; (8003db0 <HAL_RCC_OscConfig+0x244>)
 8003cde:	2201      	movs	r2, #1
 8003ce0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ce2:	f7fe fbe1 	bl	80024a8 <HAL_GetTick>
 8003ce6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ce8:	e008      	b.n	8003cfc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cea:	f7fe fbdd 	bl	80024a8 <HAL_GetTick>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	1ad3      	subs	r3, r2, r3
 8003cf4:	2b02      	cmp	r3, #2
 8003cf6:	d901      	bls.n	8003cfc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003cf8:	2303      	movs	r3, #3
 8003cfa:	e1a8      	b.n	800404e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cfc:	4b2b      	ldr	r3, [pc, #172]	; (8003dac <HAL_RCC_OscConfig+0x240>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0302 	and.w	r3, r3, #2
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d0f0      	beq.n	8003cea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d08:	4b28      	ldr	r3, [pc, #160]	; (8003dac <HAL_RCC_OscConfig+0x240>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	691b      	ldr	r3, [r3, #16]
 8003d14:	00db      	lsls	r3, r3, #3
 8003d16:	4925      	ldr	r1, [pc, #148]	; (8003dac <HAL_RCC_OscConfig+0x240>)
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	600b      	str	r3, [r1, #0]
 8003d1c:	e015      	b.n	8003d4a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d1e:	4b24      	ldr	r3, [pc, #144]	; (8003db0 <HAL_RCC_OscConfig+0x244>)
 8003d20:	2200      	movs	r2, #0
 8003d22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d24:	f7fe fbc0 	bl	80024a8 <HAL_GetTick>
 8003d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d2a:	e008      	b.n	8003d3e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d2c:	f7fe fbbc 	bl	80024a8 <HAL_GetTick>
 8003d30:	4602      	mov	r2, r0
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	2b02      	cmp	r3, #2
 8003d38:	d901      	bls.n	8003d3e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	e187      	b.n	800404e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d3e:	4b1b      	ldr	r3, [pc, #108]	; (8003dac <HAL_RCC_OscConfig+0x240>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 0302 	and.w	r3, r3, #2
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d1f0      	bne.n	8003d2c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0308 	and.w	r3, r3, #8
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d036      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	695b      	ldr	r3, [r3, #20]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d016      	beq.n	8003d8c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d5e:	4b15      	ldr	r3, [pc, #84]	; (8003db4 <HAL_RCC_OscConfig+0x248>)
 8003d60:	2201      	movs	r2, #1
 8003d62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d64:	f7fe fba0 	bl	80024a8 <HAL_GetTick>
 8003d68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d6a:	e008      	b.n	8003d7e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d6c:	f7fe fb9c 	bl	80024a8 <HAL_GetTick>
 8003d70:	4602      	mov	r2, r0
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	2b02      	cmp	r3, #2
 8003d78:	d901      	bls.n	8003d7e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e167      	b.n	800404e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d7e:	4b0b      	ldr	r3, [pc, #44]	; (8003dac <HAL_RCC_OscConfig+0x240>)
 8003d80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d82:	f003 0302 	and.w	r3, r3, #2
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d0f0      	beq.n	8003d6c <HAL_RCC_OscConfig+0x200>
 8003d8a:	e01b      	b.n	8003dc4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d8c:	4b09      	ldr	r3, [pc, #36]	; (8003db4 <HAL_RCC_OscConfig+0x248>)
 8003d8e:	2200      	movs	r2, #0
 8003d90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d92:	f7fe fb89 	bl	80024a8 <HAL_GetTick>
 8003d96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d98:	e00e      	b.n	8003db8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d9a:	f7fe fb85 	bl	80024a8 <HAL_GetTick>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	1ad3      	subs	r3, r2, r3
 8003da4:	2b02      	cmp	r3, #2
 8003da6:	d907      	bls.n	8003db8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003da8:	2303      	movs	r3, #3
 8003daa:	e150      	b.n	800404e <HAL_RCC_OscConfig+0x4e2>
 8003dac:	40023800 	.word	0x40023800
 8003db0:	42470000 	.word	0x42470000
 8003db4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003db8:	4b88      	ldr	r3, [pc, #544]	; (8003fdc <HAL_RCC_OscConfig+0x470>)
 8003dba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dbc:	f003 0302 	and.w	r3, r3, #2
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d1ea      	bne.n	8003d9a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 0304 	and.w	r3, r3, #4
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	f000 8097 	beq.w	8003f00 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dd6:	4b81      	ldr	r3, [pc, #516]	; (8003fdc <HAL_RCC_OscConfig+0x470>)
 8003dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d10f      	bne.n	8003e02 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003de2:	2300      	movs	r3, #0
 8003de4:	60bb      	str	r3, [r7, #8]
 8003de6:	4b7d      	ldr	r3, [pc, #500]	; (8003fdc <HAL_RCC_OscConfig+0x470>)
 8003de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dea:	4a7c      	ldr	r2, [pc, #496]	; (8003fdc <HAL_RCC_OscConfig+0x470>)
 8003dec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003df0:	6413      	str	r3, [r2, #64]	; 0x40
 8003df2:	4b7a      	ldr	r3, [pc, #488]	; (8003fdc <HAL_RCC_OscConfig+0x470>)
 8003df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dfa:	60bb      	str	r3, [r7, #8]
 8003dfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e02:	4b77      	ldr	r3, [pc, #476]	; (8003fe0 <HAL_RCC_OscConfig+0x474>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d118      	bne.n	8003e40 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e0e:	4b74      	ldr	r3, [pc, #464]	; (8003fe0 <HAL_RCC_OscConfig+0x474>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a73      	ldr	r2, [pc, #460]	; (8003fe0 <HAL_RCC_OscConfig+0x474>)
 8003e14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e1a:	f7fe fb45 	bl	80024a8 <HAL_GetTick>
 8003e1e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e20:	e008      	b.n	8003e34 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e22:	f7fe fb41 	bl	80024a8 <HAL_GetTick>
 8003e26:	4602      	mov	r2, r0
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d901      	bls.n	8003e34 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003e30:	2303      	movs	r3, #3
 8003e32:	e10c      	b.n	800404e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e34:	4b6a      	ldr	r3, [pc, #424]	; (8003fe0 <HAL_RCC_OscConfig+0x474>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d0f0      	beq.n	8003e22 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d106      	bne.n	8003e56 <HAL_RCC_OscConfig+0x2ea>
 8003e48:	4b64      	ldr	r3, [pc, #400]	; (8003fdc <HAL_RCC_OscConfig+0x470>)
 8003e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e4c:	4a63      	ldr	r2, [pc, #396]	; (8003fdc <HAL_RCC_OscConfig+0x470>)
 8003e4e:	f043 0301 	orr.w	r3, r3, #1
 8003e52:	6713      	str	r3, [r2, #112]	; 0x70
 8003e54:	e01c      	b.n	8003e90 <HAL_RCC_OscConfig+0x324>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	2b05      	cmp	r3, #5
 8003e5c:	d10c      	bne.n	8003e78 <HAL_RCC_OscConfig+0x30c>
 8003e5e:	4b5f      	ldr	r3, [pc, #380]	; (8003fdc <HAL_RCC_OscConfig+0x470>)
 8003e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e62:	4a5e      	ldr	r2, [pc, #376]	; (8003fdc <HAL_RCC_OscConfig+0x470>)
 8003e64:	f043 0304 	orr.w	r3, r3, #4
 8003e68:	6713      	str	r3, [r2, #112]	; 0x70
 8003e6a:	4b5c      	ldr	r3, [pc, #368]	; (8003fdc <HAL_RCC_OscConfig+0x470>)
 8003e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e6e:	4a5b      	ldr	r2, [pc, #364]	; (8003fdc <HAL_RCC_OscConfig+0x470>)
 8003e70:	f043 0301 	orr.w	r3, r3, #1
 8003e74:	6713      	str	r3, [r2, #112]	; 0x70
 8003e76:	e00b      	b.n	8003e90 <HAL_RCC_OscConfig+0x324>
 8003e78:	4b58      	ldr	r3, [pc, #352]	; (8003fdc <HAL_RCC_OscConfig+0x470>)
 8003e7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e7c:	4a57      	ldr	r2, [pc, #348]	; (8003fdc <HAL_RCC_OscConfig+0x470>)
 8003e7e:	f023 0301 	bic.w	r3, r3, #1
 8003e82:	6713      	str	r3, [r2, #112]	; 0x70
 8003e84:	4b55      	ldr	r3, [pc, #340]	; (8003fdc <HAL_RCC_OscConfig+0x470>)
 8003e86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e88:	4a54      	ldr	r2, [pc, #336]	; (8003fdc <HAL_RCC_OscConfig+0x470>)
 8003e8a:	f023 0304 	bic.w	r3, r3, #4
 8003e8e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d015      	beq.n	8003ec4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e98:	f7fe fb06 	bl	80024a8 <HAL_GetTick>
 8003e9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e9e:	e00a      	b.n	8003eb6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ea0:	f7fe fb02 	bl	80024a8 <HAL_GetTick>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d901      	bls.n	8003eb6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	e0cb      	b.n	800404e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eb6:	4b49      	ldr	r3, [pc, #292]	; (8003fdc <HAL_RCC_OscConfig+0x470>)
 8003eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eba:	f003 0302 	and.w	r3, r3, #2
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d0ee      	beq.n	8003ea0 <HAL_RCC_OscConfig+0x334>
 8003ec2:	e014      	b.n	8003eee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ec4:	f7fe faf0 	bl	80024a8 <HAL_GetTick>
 8003ec8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003eca:	e00a      	b.n	8003ee2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ecc:	f7fe faec 	bl	80024a8 <HAL_GetTick>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d901      	bls.n	8003ee2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e0b5      	b.n	800404e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ee2:	4b3e      	ldr	r3, [pc, #248]	; (8003fdc <HAL_RCC_OscConfig+0x470>)
 8003ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee6:	f003 0302 	and.w	r3, r3, #2
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d1ee      	bne.n	8003ecc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003eee:	7dfb      	ldrb	r3, [r7, #23]
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d105      	bne.n	8003f00 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ef4:	4b39      	ldr	r3, [pc, #228]	; (8003fdc <HAL_RCC_OscConfig+0x470>)
 8003ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef8:	4a38      	ldr	r2, [pc, #224]	; (8003fdc <HAL_RCC_OscConfig+0x470>)
 8003efa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003efe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	699b      	ldr	r3, [r3, #24]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	f000 80a1 	beq.w	800404c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f0a:	4b34      	ldr	r3, [pc, #208]	; (8003fdc <HAL_RCC_OscConfig+0x470>)
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	f003 030c 	and.w	r3, r3, #12
 8003f12:	2b08      	cmp	r3, #8
 8003f14:	d05c      	beq.n	8003fd0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	699b      	ldr	r3, [r3, #24]
 8003f1a:	2b02      	cmp	r3, #2
 8003f1c:	d141      	bne.n	8003fa2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f1e:	4b31      	ldr	r3, [pc, #196]	; (8003fe4 <HAL_RCC_OscConfig+0x478>)
 8003f20:	2200      	movs	r2, #0
 8003f22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f24:	f7fe fac0 	bl	80024a8 <HAL_GetTick>
 8003f28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f2a:	e008      	b.n	8003f3e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f2c:	f7fe fabc 	bl	80024a8 <HAL_GetTick>
 8003f30:	4602      	mov	r2, r0
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	2b02      	cmp	r3, #2
 8003f38:	d901      	bls.n	8003f3e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	e087      	b.n	800404e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f3e:	4b27      	ldr	r3, [pc, #156]	; (8003fdc <HAL_RCC_OscConfig+0x470>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d1f0      	bne.n	8003f2c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	69da      	ldr	r2, [r3, #28]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6a1b      	ldr	r3, [r3, #32]
 8003f52:	431a      	orrs	r2, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f58:	019b      	lsls	r3, r3, #6
 8003f5a:	431a      	orrs	r2, r3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f60:	085b      	lsrs	r3, r3, #1
 8003f62:	3b01      	subs	r3, #1
 8003f64:	041b      	lsls	r3, r3, #16
 8003f66:	431a      	orrs	r2, r3
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f6c:	061b      	lsls	r3, r3, #24
 8003f6e:	491b      	ldr	r1, [pc, #108]	; (8003fdc <HAL_RCC_OscConfig+0x470>)
 8003f70:	4313      	orrs	r3, r2
 8003f72:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f74:	4b1b      	ldr	r3, [pc, #108]	; (8003fe4 <HAL_RCC_OscConfig+0x478>)
 8003f76:	2201      	movs	r2, #1
 8003f78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f7a:	f7fe fa95 	bl	80024a8 <HAL_GetTick>
 8003f7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f80:	e008      	b.n	8003f94 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f82:	f7fe fa91 	bl	80024a8 <HAL_GetTick>
 8003f86:	4602      	mov	r2, r0
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	1ad3      	subs	r3, r2, r3
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	d901      	bls.n	8003f94 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003f90:	2303      	movs	r3, #3
 8003f92:	e05c      	b.n	800404e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f94:	4b11      	ldr	r3, [pc, #68]	; (8003fdc <HAL_RCC_OscConfig+0x470>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d0f0      	beq.n	8003f82 <HAL_RCC_OscConfig+0x416>
 8003fa0:	e054      	b.n	800404c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fa2:	4b10      	ldr	r3, [pc, #64]	; (8003fe4 <HAL_RCC_OscConfig+0x478>)
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fa8:	f7fe fa7e 	bl	80024a8 <HAL_GetTick>
 8003fac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fae:	e008      	b.n	8003fc2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fb0:	f7fe fa7a 	bl	80024a8 <HAL_GetTick>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	2b02      	cmp	r3, #2
 8003fbc:	d901      	bls.n	8003fc2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e045      	b.n	800404e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fc2:	4b06      	ldr	r3, [pc, #24]	; (8003fdc <HAL_RCC_OscConfig+0x470>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d1f0      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x444>
 8003fce:	e03d      	b.n	800404c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	699b      	ldr	r3, [r3, #24]
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d107      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e038      	b.n	800404e <HAL_RCC_OscConfig+0x4e2>
 8003fdc:	40023800 	.word	0x40023800
 8003fe0:	40007000 	.word	0x40007000
 8003fe4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003fe8:	4b1b      	ldr	r3, [pc, #108]	; (8004058 <HAL_RCC_OscConfig+0x4ec>)
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	699b      	ldr	r3, [r3, #24]
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d028      	beq.n	8004048 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004000:	429a      	cmp	r2, r3
 8004002:	d121      	bne.n	8004048 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800400e:	429a      	cmp	r2, r3
 8004010:	d11a      	bne.n	8004048 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004012:	68fa      	ldr	r2, [r7, #12]
 8004014:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004018:	4013      	ands	r3, r2
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800401e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004020:	4293      	cmp	r3, r2
 8004022:	d111      	bne.n	8004048 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800402e:	085b      	lsrs	r3, r3, #1
 8004030:	3b01      	subs	r3, #1
 8004032:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004034:	429a      	cmp	r2, r3
 8004036:	d107      	bne.n	8004048 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004042:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004044:	429a      	cmp	r2, r3
 8004046:	d001      	beq.n	800404c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	e000      	b.n	800404e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800404c:	2300      	movs	r3, #0
}
 800404e:	4618      	mov	r0, r3
 8004050:	3718      	adds	r7, #24
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop
 8004058:	40023800 	.word	0x40023800

0800405c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b084      	sub	sp, #16
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d101      	bne.n	8004070 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e0cc      	b.n	800420a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004070:	4b68      	ldr	r3, [pc, #416]	; (8004214 <HAL_RCC_ClockConfig+0x1b8>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 0307 	and.w	r3, r3, #7
 8004078:	683a      	ldr	r2, [r7, #0]
 800407a:	429a      	cmp	r2, r3
 800407c:	d90c      	bls.n	8004098 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800407e:	4b65      	ldr	r3, [pc, #404]	; (8004214 <HAL_RCC_ClockConfig+0x1b8>)
 8004080:	683a      	ldr	r2, [r7, #0]
 8004082:	b2d2      	uxtb	r2, r2
 8004084:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004086:	4b63      	ldr	r3, [pc, #396]	; (8004214 <HAL_RCC_ClockConfig+0x1b8>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 0307 	and.w	r3, r3, #7
 800408e:	683a      	ldr	r2, [r7, #0]
 8004090:	429a      	cmp	r2, r3
 8004092:	d001      	beq.n	8004098 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e0b8      	b.n	800420a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0302 	and.w	r3, r3, #2
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d020      	beq.n	80040e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0304 	and.w	r3, r3, #4
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d005      	beq.n	80040bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040b0:	4b59      	ldr	r3, [pc, #356]	; (8004218 <HAL_RCC_ClockConfig+0x1bc>)
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	4a58      	ldr	r2, [pc, #352]	; (8004218 <HAL_RCC_ClockConfig+0x1bc>)
 80040b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80040ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 0308 	and.w	r3, r3, #8
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d005      	beq.n	80040d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040c8:	4b53      	ldr	r3, [pc, #332]	; (8004218 <HAL_RCC_ClockConfig+0x1bc>)
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	4a52      	ldr	r2, [pc, #328]	; (8004218 <HAL_RCC_ClockConfig+0x1bc>)
 80040ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80040d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040d4:	4b50      	ldr	r3, [pc, #320]	; (8004218 <HAL_RCC_ClockConfig+0x1bc>)
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	494d      	ldr	r1, [pc, #308]	; (8004218 <HAL_RCC_ClockConfig+0x1bc>)
 80040e2:	4313      	orrs	r3, r2
 80040e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 0301 	and.w	r3, r3, #1
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d044      	beq.n	800417c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d107      	bne.n	800410a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040fa:	4b47      	ldr	r3, [pc, #284]	; (8004218 <HAL_RCC_ClockConfig+0x1bc>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d119      	bne.n	800413a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e07f      	b.n	800420a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	2b02      	cmp	r3, #2
 8004110:	d003      	beq.n	800411a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004116:	2b03      	cmp	r3, #3
 8004118:	d107      	bne.n	800412a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800411a:	4b3f      	ldr	r3, [pc, #252]	; (8004218 <HAL_RCC_ClockConfig+0x1bc>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d109      	bne.n	800413a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e06f      	b.n	800420a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800412a:	4b3b      	ldr	r3, [pc, #236]	; (8004218 <HAL_RCC_ClockConfig+0x1bc>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0302 	and.w	r3, r3, #2
 8004132:	2b00      	cmp	r3, #0
 8004134:	d101      	bne.n	800413a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e067      	b.n	800420a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800413a:	4b37      	ldr	r3, [pc, #220]	; (8004218 <HAL_RCC_ClockConfig+0x1bc>)
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	f023 0203 	bic.w	r2, r3, #3
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	4934      	ldr	r1, [pc, #208]	; (8004218 <HAL_RCC_ClockConfig+0x1bc>)
 8004148:	4313      	orrs	r3, r2
 800414a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800414c:	f7fe f9ac 	bl	80024a8 <HAL_GetTick>
 8004150:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004152:	e00a      	b.n	800416a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004154:	f7fe f9a8 	bl	80024a8 <HAL_GetTick>
 8004158:	4602      	mov	r2, r0
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	1ad3      	subs	r3, r2, r3
 800415e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004162:	4293      	cmp	r3, r2
 8004164:	d901      	bls.n	800416a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004166:	2303      	movs	r3, #3
 8004168:	e04f      	b.n	800420a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800416a:	4b2b      	ldr	r3, [pc, #172]	; (8004218 <HAL_RCC_ClockConfig+0x1bc>)
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	f003 020c 	and.w	r2, r3, #12
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	429a      	cmp	r2, r3
 800417a:	d1eb      	bne.n	8004154 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800417c:	4b25      	ldr	r3, [pc, #148]	; (8004214 <HAL_RCC_ClockConfig+0x1b8>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0307 	and.w	r3, r3, #7
 8004184:	683a      	ldr	r2, [r7, #0]
 8004186:	429a      	cmp	r2, r3
 8004188:	d20c      	bcs.n	80041a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800418a:	4b22      	ldr	r3, [pc, #136]	; (8004214 <HAL_RCC_ClockConfig+0x1b8>)
 800418c:	683a      	ldr	r2, [r7, #0]
 800418e:	b2d2      	uxtb	r2, r2
 8004190:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004192:	4b20      	ldr	r3, [pc, #128]	; (8004214 <HAL_RCC_ClockConfig+0x1b8>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 0307 	and.w	r3, r3, #7
 800419a:	683a      	ldr	r2, [r7, #0]
 800419c:	429a      	cmp	r2, r3
 800419e:	d001      	beq.n	80041a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e032      	b.n	800420a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 0304 	and.w	r3, r3, #4
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d008      	beq.n	80041c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041b0:	4b19      	ldr	r3, [pc, #100]	; (8004218 <HAL_RCC_ClockConfig+0x1bc>)
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	4916      	ldr	r1, [pc, #88]	; (8004218 <HAL_RCC_ClockConfig+0x1bc>)
 80041be:	4313      	orrs	r3, r2
 80041c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0308 	and.w	r3, r3, #8
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d009      	beq.n	80041e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041ce:	4b12      	ldr	r3, [pc, #72]	; (8004218 <HAL_RCC_ClockConfig+0x1bc>)
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	691b      	ldr	r3, [r3, #16]
 80041da:	00db      	lsls	r3, r3, #3
 80041dc:	490e      	ldr	r1, [pc, #56]	; (8004218 <HAL_RCC_ClockConfig+0x1bc>)
 80041de:	4313      	orrs	r3, r2
 80041e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80041e2:	f000 f821 	bl	8004228 <HAL_RCC_GetSysClockFreq>
 80041e6:	4602      	mov	r2, r0
 80041e8:	4b0b      	ldr	r3, [pc, #44]	; (8004218 <HAL_RCC_ClockConfig+0x1bc>)
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	091b      	lsrs	r3, r3, #4
 80041ee:	f003 030f 	and.w	r3, r3, #15
 80041f2:	490a      	ldr	r1, [pc, #40]	; (800421c <HAL_RCC_ClockConfig+0x1c0>)
 80041f4:	5ccb      	ldrb	r3, [r1, r3]
 80041f6:	fa22 f303 	lsr.w	r3, r2, r3
 80041fa:	4a09      	ldr	r2, [pc, #36]	; (8004220 <HAL_RCC_ClockConfig+0x1c4>)
 80041fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80041fe:	4b09      	ldr	r3, [pc, #36]	; (8004224 <HAL_RCC_ClockConfig+0x1c8>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4618      	mov	r0, r3
 8004204:	f7fe f90c 	bl	8002420 <HAL_InitTick>

  return HAL_OK;
 8004208:	2300      	movs	r3, #0
}
 800420a:	4618      	mov	r0, r3
 800420c:	3710      	adds	r7, #16
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	40023c00 	.word	0x40023c00
 8004218:	40023800 	.word	0x40023800
 800421c:	08009fbc 	.word	0x08009fbc
 8004220:	20000008 	.word	0x20000008
 8004224:	2000000c 	.word	0x2000000c

08004228 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004228:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800422c:	b090      	sub	sp, #64	; 0x40
 800422e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004230:	2300      	movs	r3, #0
 8004232:	637b      	str	r3, [r7, #52]	; 0x34
 8004234:	2300      	movs	r3, #0
 8004236:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004238:	2300      	movs	r3, #0
 800423a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800423c:	2300      	movs	r3, #0
 800423e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004240:	4b59      	ldr	r3, [pc, #356]	; (80043a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004242:	689b      	ldr	r3, [r3, #8]
 8004244:	f003 030c 	and.w	r3, r3, #12
 8004248:	2b08      	cmp	r3, #8
 800424a:	d00d      	beq.n	8004268 <HAL_RCC_GetSysClockFreq+0x40>
 800424c:	2b08      	cmp	r3, #8
 800424e:	f200 80a1 	bhi.w	8004394 <HAL_RCC_GetSysClockFreq+0x16c>
 8004252:	2b00      	cmp	r3, #0
 8004254:	d002      	beq.n	800425c <HAL_RCC_GetSysClockFreq+0x34>
 8004256:	2b04      	cmp	r3, #4
 8004258:	d003      	beq.n	8004262 <HAL_RCC_GetSysClockFreq+0x3a>
 800425a:	e09b      	b.n	8004394 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800425c:	4b53      	ldr	r3, [pc, #332]	; (80043ac <HAL_RCC_GetSysClockFreq+0x184>)
 800425e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004260:	e09b      	b.n	800439a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004262:	4b53      	ldr	r3, [pc, #332]	; (80043b0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004264:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004266:	e098      	b.n	800439a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004268:	4b4f      	ldr	r3, [pc, #316]	; (80043a8 <HAL_RCC_GetSysClockFreq+0x180>)
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004270:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004272:	4b4d      	ldr	r3, [pc, #308]	; (80043a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800427a:	2b00      	cmp	r3, #0
 800427c:	d028      	beq.n	80042d0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800427e:	4b4a      	ldr	r3, [pc, #296]	; (80043a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	099b      	lsrs	r3, r3, #6
 8004284:	2200      	movs	r2, #0
 8004286:	623b      	str	r3, [r7, #32]
 8004288:	627a      	str	r2, [r7, #36]	; 0x24
 800428a:	6a3b      	ldr	r3, [r7, #32]
 800428c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004290:	2100      	movs	r1, #0
 8004292:	4b47      	ldr	r3, [pc, #284]	; (80043b0 <HAL_RCC_GetSysClockFreq+0x188>)
 8004294:	fb03 f201 	mul.w	r2, r3, r1
 8004298:	2300      	movs	r3, #0
 800429a:	fb00 f303 	mul.w	r3, r0, r3
 800429e:	4413      	add	r3, r2
 80042a0:	4a43      	ldr	r2, [pc, #268]	; (80043b0 <HAL_RCC_GetSysClockFreq+0x188>)
 80042a2:	fba0 1202 	umull	r1, r2, r0, r2
 80042a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80042a8:	460a      	mov	r2, r1
 80042aa:	62ba      	str	r2, [r7, #40]	; 0x28
 80042ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042ae:	4413      	add	r3, r2
 80042b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042b4:	2200      	movs	r2, #0
 80042b6:	61bb      	str	r3, [r7, #24]
 80042b8:	61fa      	str	r2, [r7, #28]
 80042ba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042be:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80042c2:	f7fc fbeb 	bl	8000a9c <__aeabi_uldivmod>
 80042c6:	4602      	mov	r2, r0
 80042c8:	460b      	mov	r3, r1
 80042ca:	4613      	mov	r3, r2
 80042cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042ce:	e053      	b.n	8004378 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042d0:	4b35      	ldr	r3, [pc, #212]	; (80043a8 <HAL_RCC_GetSysClockFreq+0x180>)
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	099b      	lsrs	r3, r3, #6
 80042d6:	2200      	movs	r2, #0
 80042d8:	613b      	str	r3, [r7, #16]
 80042da:	617a      	str	r2, [r7, #20]
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80042e2:	f04f 0b00 	mov.w	fp, #0
 80042e6:	4652      	mov	r2, sl
 80042e8:	465b      	mov	r3, fp
 80042ea:	f04f 0000 	mov.w	r0, #0
 80042ee:	f04f 0100 	mov.w	r1, #0
 80042f2:	0159      	lsls	r1, r3, #5
 80042f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042f8:	0150      	lsls	r0, r2, #5
 80042fa:	4602      	mov	r2, r0
 80042fc:	460b      	mov	r3, r1
 80042fe:	ebb2 080a 	subs.w	r8, r2, sl
 8004302:	eb63 090b 	sbc.w	r9, r3, fp
 8004306:	f04f 0200 	mov.w	r2, #0
 800430a:	f04f 0300 	mov.w	r3, #0
 800430e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004312:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004316:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800431a:	ebb2 0408 	subs.w	r4, r2, r8
 800431e:	eb63 0509 	sbc.w	r5, r3, r9
 8004322:	f04f 0200 	mov.w	r2, #0
 8004326:	f04f 0300 	mov.w	r3, #0
 800432a:	00eb      	lsls	r3, r5, #3
 800432c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004330:	00e2      	lsls	r2, r4, #3
 8004332:	4614      	mov	r4, r2
 8004334:	461d      	mov	r5, r3
 8004336:	eb14 030a 	adds.w	r3, r4, sl
 800433a:	603b      	str	r3, [r7, #0]
 800433c:	eb45 030b 	adc.w	r3, r5, fp
 8004340:	607b      	str	r3, [r7, #4]
 8004342:	f04f 0200 	mov.w	r2, #0
 8004346:	f04f 0300 	mov.w	r3, #0
 800434a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800434e:	4629      	mov	r1, r5
 8004350:	028b      	lsls	r3, r1, #10
 8004352:	4621      	mov	r1, r4
 8004354:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004358:	4621      	mov	r1, r4
 800435a:	028a      	lsls	r2, r1, #10
 800435c:	4610      	mov	r0, r2
 800435e:	4619      	mov	r1, r3
 8004360:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004362:	2200      	movs	r2, #0
 8004364:	60bb      	str	r3, [r7, #8]
 8004366:	60fa      	str	r2, [r7, #12]
 8004368:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800436c:	f7fc fb96 	bl	8000a9c <__aeabi_uldivmod>
 8004370:	4602      	mov	r2, r0
 8004372:	460b      	mov	r3, r1
 8004374:	4613      	mov	r3, r2
 8004376:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004378:	4b0b      	ldr	r3, [pc, #44]	; (80043a8 <HAL_RCC_GetSysClockFreq+0x180>)
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	0c1b      	lsrs	r3, r3, #16
 800437e:	f003 0303 	and.w	r3, r3, #3
 8004382:	3301      	adds	r3, #1
 8004384:	005b      	lsls	r3, r3, #1
 8004386:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004388:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800438a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800438c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004390:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004392:	e002      	b.n	800439a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004394:	4b05      	ldr	r3, [pc, #20]	; (80043ac <HAL_RCC_GetSysClockFreq+0x184>)
 8004396:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004398:	bf00      	nop
    }
  }
  return sysclockfreq;
 800439a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800439c:	4618      	mov	r0, r3
 800439e:	3740      	adds	r7, #64	; 0x40
 80043a0:	46bd      	mov	sp, r7
 80043a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043a6:	bf00      	nop
 80043a8:	40023800 	.word	0x40023800
 80043ac:	00f42400 	.word	0x00f42400
 80043b0:	017d7840 	.word	0x017d7840

080043b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043b4:	b480      	push	{r7}
 80043b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043b8:	4b03      	ldr	r3, [pc, #12]	; (80043c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80043ba:	681b      	ldr	r3, [r3, #0]
}
 80043bc:	4618      	mov	r0, r3
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr
 80043c6:	bf00      	nop
 80043c8:	20000008 	.word	0x20000008

080043cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80043d0:	f7ff fff0 	bl	80043b4 <HAL_RCC_GetHCLKFreq>
 80043d4:	4602      	mov	r2, r0
 80043d6:	4b05      	ldr	r3, [pc, #20]	; (80043ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	0a9b      	lsrs	r3, r3, #10
 80043dc:	f003 0307 	and.w	r3, r3, #7
 80043e0:	4903      	ldr	r1, [pc, #12]	; (80043f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043e2:	5ccb      	ldrb	r3, [r1, r3]
 80043e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	40023800 	.word	0x40023800
 80043f0:	08009fcc 	.word	0x08009fcc

080043f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80043f8:	f7ff ffdc 	bl	80043b4 <HAL_RCC_GetHCLKFreq>
 80043fc:	4602      	mov	r2, r0
 80043fe:	4b05      	ldr	r3, [pc, #20]	; (8004414 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	0b5b      	lsrs	r3, r3, #13
 8004404:	f003 0307 	and.w	r3, r3, #7
 8004408:	4903      	ldr	r1, [pc, #12]	; (8004418 <HAL_RCC_GetPCLK2Freq+0x24>)
 800440a:	5ccb      	ldrb	r3, [r1, r3]
 800440c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004410:	4618      	mov	r0, r3
 8004412:	bd80      	pop	{r7, pc}
 8004414:	40023800 	.word	0x40023800
 8004418:	08009fcc 	.word	0x08009fcc

0800441c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b082      	sub	sp, #8
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d101      	bne.n	800442e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e041      	b.n	80044b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004434:	b2db      	uxtb	r3, r3
 8004436:	2b00      	cmp	r3, #0
 8004438:	d106      	bne.n	8004448 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f7fd fda8 	bl	8001f98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2202      	movs	r2, #2
 800444c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	3304      	adds	r3, #4
 8004458:	4619      	mov	r1, r3
 800445a:	4610      	mov	r0, r2
 800445c:	f000 fc0c 	bl	8004c78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2201      	movs	r2, #1
 8004474:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2201      	movs	r2, #1
 800447c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2201      	movs	r2, #1
 800448c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044b0:	2300      	movs	r3, #0
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3708      	adds	r7, #8
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}

080044ba <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80044ba:	b580      	push	{r7, lr}
 80044bc:	b082      	sub	sp, #8
 80044be:	af00      	add	r7, sp, #0
 80044c0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d101      	bne.n	80044cc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e041      	b.n	8004550 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d106      	bne.n	80044e6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2200      	movs	r2, #0
 80044dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f000 f839 	bl	8004558 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2202      	movs	r2, #2
 80044ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	3304      	adds	r3, #4
 80044f6:	4619      	mov	r1, r3
 80044f8:	4610      	mov	r0, r2
 80044fa:	f000 fbbd 	bl	8004c78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2201      	movs	r2, #1
 8004502:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2201      	movs	r2, #1
 800450a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2201      	movs	r2, #1
 8004512:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2201      	movs	r2, #1
 800451a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2201      	movs	r2, #1
 8004522:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2201      	movs	r2, #1
 800452a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2201      	movs	r2, #1
 8004532:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2201      	movs	r2, #1
 800453a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2201      	movs	r2, #1
 8004542:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2201      	movs	r2, #1
 800454a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800454e:	2300      	movs	r3, #0
}
 8004550:	4618      	mov	r0, r3
 8004552:	3708      	adds	r7, #8
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}

08004558 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004558:	b480      	push	{r7}
 800455a:	b083      	sub	sp, #12
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004560:	bf00      	nop
 8004562:	370c      	adds	r7, #12
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr

0800456c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b084      	sub	sp, #16
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d109      	bne.n	8004590 <HAL_TIM_PWM_Start+0x24>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004582:	b2db      	uxtb	r3, r3
 8004584:	2b01      	cmp	r3, #1
 8004586:	bf14      	ite	ne
 8004588:	2301      	movne	r3, #1
 800458a:	2300      	moveq	r3, #0
 800458c:	b2db      	uxtb	r3, r3
 800458e:	e022      	b.n	80045d6 <HAL_TIM_PWM_Start+0x6a>
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	2b04      	cmp	r3, #4
 8004594:	d109      	bne.n	80045aa <HAL_TIM_PWM_Start+0x3e>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800459c:	b2db      	uxtb	r3, r3
 800459e:	2b01      	cmp	r3, #1
 80045a0:	bf14      	ite	ne
 80045a2:	2301      	movne	r3, #1
 80045a4:	2300      	moveq	r3, #0
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	e015      	b.n	80045d6 <HAL_TIM_PWM_Start+0x6a>
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	2b08      	cmp	r3, #8
 80045ae:	d109      	bne.n	80045c4 <HAL_TIM_PWM_Start+0x58>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	bf14      	ite	ne
 80045bc:	2301      	movne	r3, #1
 80045be:	2300      	moveq	r3, #0
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	e008      	b.n	80045d6 <HAL_TIM_PWM_Start+0x6a>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	bf14      	ite	ne
 80045d0:	2301      	movne	r3, #1
 80045d2:	2300      	moveq	r3, #0
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d001      	beq.n	80045de <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e07c      	b.n	80046d8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d104      	bne.n	80045ee <HAL_TIM_PWM_Start+0x82>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2202      	movs	r2, #2
 80045e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045ec:	e013      	b.n	8004616 <HAL_TIM_PWM_Start+0xaa>
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	2b04      	cmp	r3, #4
 80045f2:	d104      	bne.n	80045fe <HAL_TIM_PWM_Start+0x92>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2202      	movs	r2, #2
 80045f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045fc:	e00b      	b.n	8004616 <HAL_TIM_PWM_Start+0xaa>
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	2b08      	cmp	r3, #8
 8004602:	d104      	bne.n	800460e <HAL_TIM_PWM_Start+0xa2>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2202      	movs	r2, #2
 8004608:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800460c:	e003      	b.n	8004616 <HAL_TIM_PWM_Start+0xaa>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2202      	movs	r2, #2
 8004612:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	2201      	movs	r2, #1
 800461c:	6839      	ldr	r1, [r7, #0]
 800461e:	4618      	mov	r0, r3
 8004620:	f000 fe14 	bl	800524c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a2d      	ldr	r2, [pc, #180]	; (80046e0 <HAL_TIM_PWM_Start+0x174>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d004      	beq.n	8004638 <HAL_TIM_PWM_Start+0xcc>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a2c      	ldr	r2, [pc, #176]	; (80046e4 <HAL_TIM_PWM_Start+0x178>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d101      	bne.n	800463c <HAL_TIM_PWM_Start+0xd0>
 8004638:	2301      	movs	r3, #1
 800463a:	e000      	b.n	800463e <HAL_TIM_PWM_Start+0xd2>
 800463c:	2300      	movs	r3, #0
 800463e:	2b00      	cmp	r3, #0
 8004640:	d007      	beq.n	8004652 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004650:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4a22      	ldr	r2, [pc, #136]	; (80046e0 <HAL_TIM_PWM_Start+0x174>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d022      	beq.n	80046a2 <HAL_TIM_PWM_Start+0x136>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004664:	d01d      	beq.n	80046a2 <HAL_TIM_PWM_Start+0x136>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a1f      	ldr	r2, [pc, #124]	; (80046e8 <HAL_TIM_PWM_Start+0x17c>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d018      	beq.n	80046a2 <HAL_TIM_PWM_Start+0x136>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a1d      	ldr	r2, [pc, #116]	; (80046ec <HAL_TIM_PWM_Start+0x180>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d013      	beq.n	80046a2 <HAL_TIM_PWM_Start+0x136>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a1c      	ldr	r2, [pc, #112]	; (80046f0 <HAL_TIM_PWM_Start+0x184>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d00e      	beq.n	80046a2 <HAL_TIM_PWM_Start+0x136>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a16      	ldr	r2, [pc, #88]	; (80046e4 <HAL_TIM_PWM_Start+0x178>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d009      	beq.n	80046a2 <HAL_TIM_PWM_Start+0x136>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a18      	ldr	r2, [pc, #96]	; (80046f4 <HAL_TIM_PWM_Start+0x188>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d004      	beq.n	80046a2 <HAL_TIM_PWM_Start+0x136>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a16      	ldr	r2, [pc, #88]	; (80046f8 <HAL_TIM_PWM_Start+0x18c>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d111      	bne.n	80046c6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	f003 0307 	and.w	r3, r3, #7
 80046ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2b06      	cmp	r3, #6
 80046b2:	d010      	beq.n	80046d6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f042 0201 	orr.w	r2, r2, #1
 80046c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046c4:	e007      	b.n	80046d6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f042 0201 	orr.w	r2, r2, #1
 80046d4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046d6:	2300      	movs	r3, #0
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3710      	adds	r7, #16
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	40010000 	.word	0x40010000
 80046e4:	40010400 	.word	0x40010400
 80046e8:	40000400 	.word	0x40000400
 80046ec:	40000800 	.word	0x40000800
 80046f0:	40000c00 	.word	0x40000c00
 80046f4:	40014000 	.word	0x40014000
 80046f8:	40001800 	.word	0x40001800

080046fc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b086      	sub	sp, #24
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d101      	bne.n	8004710 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	e097      	b.n	8004840 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004716:	b2db      	uxtb	r3, r3
 8004718:	2b00      	cmp	r3, #0
 800471a:	d106      	bne.n	800472a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f7fd fc95 	bl	8002054 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2202      	movs	r2, #2
 800472e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	6812      	ldr	r2, [r2, #0]
 800473c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004740:	f023 0307 	bic.w	r3, r3, #7
 8004744:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	3304      	adds	r3, #4
 800474e:	4619      	mov	r1, r3
 8004750:	4610      	mov	r0, r2
 8004752:	f000 fa91 	bl	8004c78 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	699b      	ldr	r3, [r3, #24]
 8004764:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	6a1b      	ldr	r3, [r3, #32]
 800476c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	697a      	ldr	r2, [r7, #20]
 8004774:	4313      	orrs	r3, r2
 8004776:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800477e:	f023 0303 	bic.w	r3, r3, #3
 8004782:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	689a      	ldr	r2, [r3, #8]
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	699b      	ldr	r3, [r3, #24]
 800478c:	021b      	lsls	r3, r3, #8
 800478e:	4313      	orrs	r3, r2
 8004790:	693a      	ldr	r2, [r7, #16]
 8004792:	4313      	orrs	r3, r2
 8004794:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800479c:	f023 030c 	bic.w	r3, r3, #12
 80047a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80047a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80047ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	68da      	ldr	r2, [r3, #12]
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	69db      	ldr	r3, [r3, #28]
 80047b6:	021b      	lsls	r3, r3, #8
 80047b8:	4313      	orrs	r3, r2
 80047ba:	693a      	ldr	r2, [r7, #16]
 80047bc:	4313      	orrs	r3, r2
 80047be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	691b      	ldr	r3, [r3, #16]
 80047c4:	011a      	lsls	r2, r3, #4
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	6a1b      	ldr	r3, [r3, #32]
 80047ca:	031b      	lsls	r3, r3, #12
 80047cc:	4313      	orrs	r3, r2
 80047ce:	693a      	ldr	r2, [r7, #16]
 80047d0:	4313      	orrs	r3, r2
 80047d2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80047da:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80047e2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	685a      	ldr	r2, [r3, #4]
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	695b      	ldr	r3, [r3, #20]
 80047ec:	011b      	lsls	r3, r3, #4
 80047ee:	4313      	orrs	r3, r2
 80047f0:	68fa      	ldr	r2, [r7, #12]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	697a      	ldr	r2, [r7, #20]
 80047fc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	693a      	ldr	r2, [r7, #16]
 8004804:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	68fa      	ldr	r2, [r7, #12]
 800480c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2201      	movs	r2, #1
 8004812:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2201      	movs	r2, #1
 800481a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2201      	movs	r2, #1
 8004822:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2201      	movs	r2, #1
 800482a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2201      	movs	r2, #1
 8004832:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2201      	movs	r2, #1
 800483a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800483e:	2300      	movs	r3, #0
}
 8004840:	4618      	mov	r0, r3
 8004842:	3718      	adds	r7, #24
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}

08004848 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b084      	sub	sp, #16
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004858:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004860:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004868:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004870:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d110      	bne.n	800489a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004878:	7bfb      	ldrb	r3, [r7, #15]
 800487a:	2b01      	cmp	r3, #1
 800487c:	d102      	bne.n	8004884 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800487e:	7b7b      	ldrb	r3, [r7, #13]
 8004880:	2b01      	cmp	r3, #1
 8004882:	d001      	beq.n	8004888 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e069      	b.n	800495c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2202      	movs	r2, #2
 800488c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2202      	movs	r2, #2
 8004894:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004898:	e031      	b.n	80048fe <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	2b04      	cmp	r3, #4
 800489e:	d110      	bne.n	80048c2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80048a0:	7bbb      	ldrb	r3, [r7, #14]
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d102      	bne.n	80048ac <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80048a6:	7b3b      	ldrb	r3, [r7, #12]
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d001      	beq.n	80048b0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	e055      	b.n	800495c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2202      	movs	r2, #2
 80048b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2202      	movs	r2, #2
 80048bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80048c0:	e01d      	b.n	80048fe <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80048c2:	7bfb      	ldrb	r3, [r7, #15]
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d108      	bne.n	80048da <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80048c8:	7bbb      	ldrb	r3, [r7, #14]
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d105      	bne.n	80048da <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80048ce:	7b7b      	ldrb	r3, [r7, #13]
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d102      	bne.n	80048da <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80048d4:	7b3b      	ldrb	r3, [r7, #12]
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d001      	beq.n	80048de <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e03e      	b.n	800495c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2202      	movs	r2, #2
 80048e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2202      	movs	r2, #2
 80048ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2202      	movs	r2, #2
 80048f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2202      	movs	r2, #2
 80048fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d003      	beq.n	800490c <HAL_TIM_Encoder_Start+0xc4>
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	2b04      	cmp	r3, #4
 8004908:	d008      	beq.n	800491c <HAL_TIM_Encoder_Start+0xd4>
 800490a:	e00f      	b.n	800492c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	2201      	movs	r2, #1
 8004912:	2100      	movs	r1, #0
 8004914:	4618      	mov	r0, r3
 8004916:	f000 fc99 	bl	800524c <TIM_CCxChannelCmd>
      break;
 800491a:	e016      	b.n	800494a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	2201      	movs	r2, #1
 8004922:	2104      	movs	r1, #4
 8004924:	4618      	mov	r0, r3
 8004926:	f000 fc91 	bl	800524c <TIM_CCxChannelCmd>
      break;
 800492a:	e00e      	b.n	800494a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	2201      	movs	r2, #1
 8004932:	2100      	movs	r1, #0
 8004934:	4618      	mov	r0, r3
 8004936:	f000 fc89 	bl	800524c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	2201      	movs	r2, #1
 8004940:	2104      	movs	r1, #4
 8004942:	4618      	mov	r0, r3
 8004944:	f000 fc82 	bl	800524c <TIM_CCxChannelCmd>
      break;
 8004948:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f042 0201 	orr.w	r2, r2, #1
 8004958:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800495a:	2300      	movs	r3, #0
}
 800495c:	4618      	mov	r0, r3
 800495e:	3710      	adds	r7, #16
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}

08004964 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b086      	sub	sp, #24
 8004968:	af00      	add	r7, sp, #0
 800496a:	60f8      	str	r0, [r7, #12]
 800496c:	60b9      	str	r1, [r7, #8]
 800496e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004970:	2300      	movs	r3, #0
 8004972:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800497a:	2b01      	cmp	r3, #1
 800497c:	d101      	bne.n	8004982 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800497e:	2302      	movs	r3, #2
 8004980:	e0ae      	b.n	8004ae0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2201      	movs	r2, #1
 8004986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2b0c      	cmp	r3, #12
 800498e:	f200 809f 	bhi.w	8004ad0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004992:	a201      	add	r2, pc, #4	; (adr r2, 8004998 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004998:	080049cd 	.word	0x080049cd
 800499c:	08004ad1 	.word	0x08004ad1
 80049a0:	08004ad1 	.word	0x08004ad1
 80049a4:	08004ad1 	.word	0x08004ad1
 80049a8:	08004a0d 	.word	0x08004a0d
 80049ac:	08004ad1 	.word	0x08004ad1
 80049b0:	08004ad1 	.word	0x08004ad1
 80049b4:	08004ad1 	.word	0x08004ad1
 80049b8:	08004a4f 	.word	0x08004a4f
 80049bc:	08004ad1 	.word	0x08004ad1
 80049c0:	08004ad1 	.word	0x08004ad1
 80049c4:	08004ad1 	.word	0x08004ad1
 80049c8:	08004a8f 	.word	0x08004a8f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	68b9      	ldr	r1, [r7, #8]
 80049d2:	4618      	mov	r0, r3
 80049d4:	f000 f9f0 	bl	8004db8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	699a      	ldr	r2, [r3, #24]
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f042 0208 	orr.w	r2, r2, #8
 80049e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	699a      	ldr	r2, [r3, #24]
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f022 0204 	bic.w	r2, r2, #4
 80049f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	6999      	ldr	r1, [r3, #24]
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	691a      	ldr	r2, [r3, #16]
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	430a      	orrs	r2, r1
 8004a08:	619a      	str	r2, [r3, #24]
      break;
 8004a0a:	e064      	b.n	8004ad6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	68b9      	ldr	r1, [r7, #8]
 8004a12:	4618      	mov	r0, r3
 8004a14:	f000 fa40 	bl	8004e98 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	699a      	ldr	r2, [r3, #24]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	699a      	ldr	r2, [r3, #24]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	6999      	ldr	r1, [r3, #24]
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	691b      	ldr	r3, [r3, #16]
 8004a42:	021a      	lsls	r2, r3, #8
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	430a      	orrs	r2, r1
 8004a4a:	619a      	str	r2, [r3, #24]
      break;
 8004a4c:	e043      	b.n	8004ad6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	68b9      	ldr	r1, [r7, #8]
 8004a54:	4618      	mov	r0, r3
 8004a56:	f000 fa95 	bl	8004f84 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	69da      	ldr	r2, [r3, #28]
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f042 0208 	orr.w	r2, r2, #8
 8004a68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	69da      	ldr	r2, [r3, #28]
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f022 0204 	bic.w	r2, r2, #4
 8004a78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	69d9      	ldr	r1, [r3, #28]
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	691a      	ldr	r2, [r3, #16]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	430a      	orrs	r2, r1
 8004a8a:	61da      	str	r2, [r3, #28]
      break;
 8004a8c:	e023      	b.n	8004ad6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	68b9      	ldr	r1, [r7, #8]
 8004a94:	4618      	mov	r0, r3
 8004a96:	f000 fae9 	bl	800506c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	69da      	ldr	r2, [r3, #28]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004aa8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	69da      	ldr	r2, [r3, #28]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ab8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	69d9      	ldr	r1, [r3, #28]
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	691b      	ldr	r3, [r3, #16]
 8004ac4:	021a      	lsls	r2, r3, #8
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	430a      	orrs	r2, r1
 8004acc:	61da      	str	r2, [r3, #28]
      break;
 8004ace:	e002      	b.n	8004ad6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	75fb      	strb	r3, [r7, #23]
      break;
 8004ad4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004ade:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3718      	adds	r7, #24
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}

08004ae8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b084      	sub	sp, #16
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004af2:	2300      	movs	r3, #0
 8004af4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d101      	bne.n	8004b04 <HAL_TIM_ConfigClockSource+0x1c>
 8004b00:	2302      	movs	r3, #2
 8004b02:	e0b4      	b.n	8004c6e <HAL_TIM_ConfigClockSource+0x186>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2202      	movs	r2, #2
 8004b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004b22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b2a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	68ba      	ldr	r2, [r7, #8]
 8004b32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b3c:	d03e      	beq.n	8004bbc <HAL_TIM_ConfigClockSource+0xd4>
 8004b3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b42:	f200 8087 	bhi.w	8004c54 <HAL_TIM_ConfigClockSource+0x16c>
 8004b46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b4a:	f000 8086 	beq.w	8004c5a <HAL_TIM_ConfigClockSource+0x172>
 8004b4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b52:	d87f      	bhi.n	8004c54 <HAL_TIM_ConfigClockSource+0x16c>
 8004b54:	2b70      	cmp	r3, #112	; 0x70
 8004b56:	d01a      	beq.n	8004b8e <HAL_TIM_ConfigClockSource+0xa6>
 8004b58:	2b70      	cmp	r3, #112	; 0x70
 8004b5a:	d87b      	bhi.n	8004c54 <HAL_TIM_ConfigClockSource+0x16c>
 8004b5c:	2b60      	cmp	r3, #96	; 0x60
 8004b5e:	d050      	beq.n	8004c02 <HAL_TIM_ConfigClockSource+0x11a>
 8004b60:	2b60      	cmp	r3, #96	; 0x60
 8004b62:	d877      	bhi.n	8004c54 <HAL_TIM_ConfigClockSource+0x16c>
 8004b64:	2b50      	cmp	r3, #80	; 0x50
 8004b66:	d03c      	beq.n	8004be2 <HAL_TIM_ConfigClockSource+0xfa>
 8004b68:	2b50      	cmp	r3, #80	; 0x50
 8004b6a:	d873      	bhi.n	8004c54 <HAL_TIM_ConfigClockSource+0x16c>
 8004b6c:	2b40      	cmp	r3, #64	; 0x40
 8004b6e:	d058      	beq.n	8004c22 <HAL_TIM_ConfigClockSource+0x13a>
 8004b70:	2b40      	cmp	r3, #64	; 0x40
 8004b72:	d86f      	bhi.n	8004c54 <HAL_TIM_ConfigClockSource+0x16c>
 8004b74:	2b30      	cmp	r3, #48	; 0x30
 8004b76:	d064      	beq.n	8004c42 <HAL_TIM_ConfigClockSource+0x15a>
 8004b78:	2b30      	cmp	r3, #48	; 0x30
 8004b7a:	d86b      	bhi.n	8004c54 <HAL_TIM_ConfigClockSource+0x16c>
 8004b7c:	2b20      	cmp	r3, #32
 8004b7e:	d060      	beq.n	8004c42 <HAL_TIM_ConfigClockSource+0x15a>
 8004b80:	2b20      	cmp	r3, #32
 8004b82:	d867      	bhi.n	8004c54 <HAL_TIM_ConfigClockSource+0x16c>
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d05c      	beq.n	8004c42 <HAL_TIM_ConfigClockSource+0x15a>
 8004b88:	2b10      	cmp	r3, #16
 8004b8a:	d05a      	beq.n	8004c42 <HAL_TIM_ConfigClockSource+0x15a>
 8004b8c:	e062      	b.n	8004c54 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6818      	ldr	r0, [r3, #0]
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	6899      	ldr	r1, [r3, #8]
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	685a      	ldr	r2, [r3, #4]
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	68db      	ldr	r3, [r3, #12]
 8004b9e:	f000 fb35 	bl	800520c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004bb0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	68ba      	ldr	r2, [r7, #8]
 8004bb8:	609a      	str	r2, [r3, #8]
      break;
 8004bba:	e04f      	b.n	8004c5c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6818      	ldr	r0, [r3, #0]
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	6899      	ldr	r1, [r3, #8]
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	685a      	ldr	r2, [r3, #4]
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	f000 fb1e 	bl	800520c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	689a      	ldr	r2, [r3, #8]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004bde:	609a      	str	r2, [r3, #8]
      break;
 8004be0:	e03c      	b.n	8004c5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6818      	ldr	r0, [r3, #0]
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	6859      	ldr	r1, [r3, #4]
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	68db      	ldr	r3, [r3, #12]
 8004bee:	461a      	mov	r2, r3
 8004bf0:	f000 fa92 	bl	8005118 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	2150      	movs	r1, #80	; 0x50
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f000 faeb 	bl	80051d6 <TIM_ITRx_SetConfig>
      break;
 8004c00:	e02c      	b.n	8004c5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6818      	ldr	r0, [r3, #0]
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	6859      	ldr	r1, [r3, #4]
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	461a      	mov	r2, r3
 8004c10:	f000 fab1 	bl	8005176 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	2160      	movs	r1, #96	; 0x60
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f000 fadb 	bl	80051d6 <TIM_ITRx_SetConfig>
      break;
 8004c20:	e01c      	b.n	8004c5c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6818      	ldr	r0, [r3, #0]
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	6859      	ldr	r1, [r3, #4]
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	461a      	mov	r2, r3
 8004c30:	f000 fa72 	bl	8005118 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	2140      	movs	r1, #64	; 0x40
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f000 facb 	bl	80051d6 <TIM_ITRx_SetConfig>
      break;
 8004c40:	e00c      	b.n	8004c5c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4619      	mov	r1, r3
 8004c4c:	4610      	mov	r0, r2
 8004c4e:	f000 fac2 	bl	80051d6 <TIM_ITRx_SetConfig>
      break;
 8004c52:	e003      	b.n	8004c5c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	73fb      	strb	r3, [r7, #15]
      break;
 8004c58:	e000      	b.n	8004c5c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004c5a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2200      	movs	r2, #0
 8004c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3710      	adds	r7, #16
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
	...

08004c78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b085      	sub	sp, #20
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
 8004c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	4a40      	ldr	r2, [pc, #256]	; (8004d8c <TIM_Base_SetConfig+0x114>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d013      	beq.n	8004cb8 <TIM_Base_SetConfig+0x40>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c96:	d00f      	beq.n	8004cb8 <TIM_Base_SetConfig+0x40>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	4a3d      	ldr	r2, [pc, #244]	; (8004d90 <TIM_Base_SetConfig+0x118>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d00b      	beq.n	8004cb8 <TIM_Base_SetConfig+0x40>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	4a3c      	ldr	r2, [pc, #240]	; (8004d94 <TIM_Base_SetConfig+0x11c>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d007      	beq.n	8004cb8 <TIM_Base_SetConfig+0x40>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	4a3b      	ldr	r2, [pc, #236]	; (8004d98 <TIM_Base_SetConfig+0x120>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d003      	beq.n	8004cb8 <TIM_Base_SetConfig+0x40>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	4a3a      	ldr	r2, [pc, #232]	; (8004d9c <TIM_Base_SetConfig+0x124>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d108      	bne.n	8004cca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	68fa      	ldr	r2, [r7, #12]
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a2f      	ldr	r2, [pc, #188]	; (8004d8c <TIM_Base_SetConfig+0x114>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d02b      	beq.n	8004d2a <TIM_Base_SetConfig+0xb2>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cd8:	d027      	beq.n	8004d2a <TIM_Base_SetConfig+0xb2>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a2c      	ldr	r2, [pc, #176]	; (8004d90 <TIM_Base_SetConfig+0x118>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d023      	beq.n	8004d2a <TIM_Base_SetConfig+0xb2>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a2b      	ldr	r2, [pc, #172]	; (8004d94 <TIM_Base_SetConfig+0x11c>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d01f      	beq.n	8004d2a <TIM_Base_SetConfig+0xb2>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4a2a      	ldr	r2, [pc, #168]	; (8004d98 <TIM_Base_SetConfig+0x120>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d01b      	beq.n	8004d2a <TIM_Base_SetConfig+0xb2>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4a29      	ldr	r2, [pc, #164]	; (8004d9c <TIM_Base_SetConfig+0x124>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d017      	beq.n	8004d2a <TIM_Base_SetConfig+0xb2>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	4a28      	ldr	r2, [pc, #160]	; (8004da0 <TIM_Base_SetConfig+0x128>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d013      	beq.n	8004d2a <TIM_Base_SetConfig+0xb2>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	4a27      	ldr	r2, [pc, #156]	; (8004da4 <TIM_Base_SetConfig+0x12c>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d00f      	beq.n	8004d2a <TIM_Base_SetConfig+0xb2>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	4a26      	ldr	r2, [pc, #152]	; (8004da8 <TIM_Base_SetConfig+0x130>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d00b      	beq.n	8004d2a <TIM_Base_SetConfig+0xb2>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	4a25      	ldr	r2, [pc, #148]	; (8004dac <TIM_Base_SetConfig+0x134>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d007      	beq.n	8004d2a <TIM_Base_SetConfig+0xb2>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	4a24      	ldr	r2, [pc, #144]	; (8004db0 <TIM_Base_SetConfig+0x138>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d003      	beq.n	8004d2a <TIM_Base_SetConfig+0xb2>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	4a23      	ldr	r2, [pc, #140]	; (8004db4 <TIM_Base_SetConfig+0x13c>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d108      	bne.n	8004d3c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	68fa      	ldr	r2, [r7, #12]
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	695b      	ldr	r3, [r3, #20]
 8004d46:	4313      	orrs	r3, r2
 8004d48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	68fa      	ldr	r2, [r7, #12]
 8004d4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	689a      	ldr	r2, [r3, #8]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	4a0a      	ldr	r2, [pc, #40]	; (8004d8c <TIM_Base_SetConfig+0x114>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d003      	beq.n	8004d70 <TIM_Base_SetConfig+0xf8>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	4a0c      	ldr	r2, [pc, #48]	; (8004d9c <TIM_Base_SetConfig+0x124>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d103      	bne.n	8004d78 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	691a      	ldr	r2, [r3, #16]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	615a      	str	r2, [r3, #20]
}
 8004d7e:	bf00      	nop
 8004d80:	3714      	adds	r7, #20
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr
 8004d8a:	bf00      	nop
 8004d8c:	40010000 	.word	0x40010000
 8004d90:	40000400 	.word	0x40000400
 8004d94:	40000800 	.word	0x40000800
 8004d98:	40000c00 	.word	0x40000c00
 8004d9c:	40010400 	.word	0x40010400
 8004da0:	40014000 	.word	0x40014000
 8004da4:	40014400 	.word	0x40014400
 8004da8:	40014800 	.word	0x40014800
 8004dac:	40001800 	.word	0x40001800
 8004db0:	40001c00 	.word	0x40001c00
 8004db4:	40002000 	.word	0x40002000

08004db8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b087      	sub	sp, #28
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6a1b      	ldr	r3, [r3, #32]
 8004dc6:	f023 0201 	bic.w	r2, r3, #1
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6a1b      	ldr	r3, [r3, #32]
 8004dd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	699b      	ldr	r3, [r3, #24]
 8004dde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004de6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f023 0303 	bic.w	r3, r3, #3
 8004dee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	68fa      	ldr	r2, [r7, #12]
 8004df6:	4313      	orrs	r3, r2
 8004df8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	f023 0302 	bic.w	r3, r3, #2
 8004e00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	697a      	ldr	r2, [r7, #20]
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4a20      	ldr	r2, [pc, #128]	; (8004e90 <TIM_OC1_SetConfig+0xd8>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d003      	beq.n	8004e1c <TIM_OC1_SetConfig+0x64>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	4a1f      	ldr	r2, [pc, #124]	; (8004e94 <TIM_OC1_SetConfig+0xdc>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d10c      	bne.n	8004e36 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	f023 0308 	bic.w	r3, r3, #8
 8004e22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	68db      	ldr	r3, [r3, #12]
 8004e28:	697a      	ldr	r2, [r7, #20]
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	f023 0304 	bic.w	r3, r3, #4
 8004e34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4a15      	ldr	r2, [pc, #84]	; (8004e90 <TIM_OC1_SetConfig+0xd8>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d003      	beq.n	8004e46 <TIM_OC1_SetConfig+0x8e>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a14      	ldr	r2, [pc, #80]	; (8004e94 <TIM_OC1_SetConfig+0xdc>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d111      	bne.n	8004e6a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	695b      	ldr	r3, [r3, #20]
 8004e5a:	693a      	ldr	r2, [r7, #16]
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	699b      	ldr	r3, [r3, #24]
 8004e64:	693a      	ldr	r2, [r7, #16]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	693a      	ldr	r2, [r7, #16]
 8004e6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	68fa      	ldr	r2, [r7, #12]
 8004e74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	685a      	ldr	r2, [r3, #4]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	697a      	ldr	r2, [r7, #20]
 8004e82:	621a      	str	r2, [r3, #32]
}
 8004e84:	bf00      	nop
 8004e86:	371c      	adds	r7, #28
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr
 8004e90:	40010000 	.word	0x40010000
 8004e94:	40010400 	.word	0x40010400

08004e98 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b087      	sub	sp, #28
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6a1b      	ldr	r3, [r3, #32]
 8004ea6:	f023 0210 	bic.w	r2, r3, #16
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6a1b      	ldr	r3, [r3, #32]
 8004eb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	699b      	ldr	r3, [r3, #24]
 8004ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ec6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ece:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	021b      	lsls	r3, r3, #8
 8004ed6:	68fa      	ldr	r2, [r7, #12]
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	f023 0320 	bic.w	r3, r3, #32
 8004ee2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	011b      	lsls	r3, r3, #4
 8004eea:	697a      	ldr	r2, [r7, #20]
 8004eec:	4313      	orrs	r3, r2
 8004eee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	4a22      	ldr	r2, [pc, #136]	; (8004f7c <TIM_OC2_SetConfig+0xe4>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d003      	beq.n	8004f00 <TIM_OC2_SetConfig+0x68>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	4a21      	ldr	r2, [pc, #132]	; (8004f80 <TIM_OC2_SetConfig+0xe8>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d10d      	bne.n	8004f1c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	68db      	ldr	r3, [r3, #12]
 8004f0c:	011b      	lsls	r3, r3, #4
 8004f0e:	697a      	ldr	r2, [r7, #20]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f1a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	4a17      	ldr	r2, [pc, #92]	; (8004f7c <TIM_OC2_SetConfig+0xe4>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d003      	beq.n	8004f2c <TIM_OC2_SetConfig+0x94>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	4a16      	ldr	r2, [pc, #88]	; (8004f80 <TIM_OC2_SetConfig+0xe8>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d113      	bne.n	8004f54 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f32:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f3a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	695b      	ldr	r3, [r3, #20]
 8004f40:	009b      	lsls	r3, r3, #2
 8004f42:	693a      	ldr	r2, [r7, #16]
 8004f44:	4313      	orrs	r3, r2
 8004f46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	699b      	ldr	r3, [r3, #24]
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	693a      	ldr	r2, [r7, #16]
 8004f50:	4313      	orrs	r3, r2
 8004f52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	693a      	ldr	r2, [r7, #16]
 8004f58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	68fa      	ldr	r2, [r7, #12]
 8004f5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	685a      	ldr	r2, [r3, #4]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	697a      	ldr	r2, [r7, #20]
 8004f6c:	621a      	str	r2, [r3, #32]
}
 8004f6e:	bf00      	nop
 8004f70:	371c      	adds	r7, #28
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr
 8004f7a:	bf00      	nop
 8004f7c:	40010000 	.word	0x40010000
 8004f80:	40010400 	.word	0x40010400

08004f84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b087      	sub	sp, #28
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6a1b      	ldr	r3, [r3, #32]
 8004f92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a1b      	ldr	r3, [r3, #32]
 8004f9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	69db      	ldr	r3, [r3, #28]
 8004faa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f023 0303 	bic.w	r3, r3, #3
 8004fba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	68fa      	ldr	r2, [r7, #12]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004fcc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	021b      	lsls	r3, r3, #8
 8004fd4:	697a      	ldr	r2, [r7, #20]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4a21      	ldr	r2, [pc, #132]	; (8005064 <TIM_OC3_SetConfig+0xe0>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d003      	beq.n	8004fea <TIM_OC3_SetConfig+0x66>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	4a20      	ldr	r2, [pc, #128]	; (8005068 <TIM_OC3_SetConfig+0xe4>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d10d      	bne.n	8005006 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ff0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	68db      	ldr	r3, [r3, #12]
 8004ff6:	021b      	lsls	r3, r3, #8
 8004ff8:	697a      	ldr	r2, [r7, #20]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005004:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4a16      	ldr	r2, [pc, #88]	; (8005064 <TIM_OC3_SetConfig+0xe0>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d003      	beq.n	8005016 <TIM_OC3_SetConfig+0x92>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4a15      	ldr	r2, [pc, #84]	; (8005068 <TIM_OC3_SetConfig+0xe4>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d113      	bne.n	800503e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800501c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005024:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	695b      	ldr	r3, [r3, #20]
 800502a:	011b      	lsls	r3, r3, #4
 800502c:	693a      	ldr	r2, [r7, #16]
 800502e:	4313      	orrs	r3, r2
 8005030:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	699b      	ldr	r3, [r3, #24]
 8005036:	011b      	lsls	r3, r3, #4
 8005038:	693a      	ldr	r2, [r7, #16]
 800503a:	4313      	orrs	r3, r2
 800503c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	693a      	ldr	r2, [r7, #16]
 8005042:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	68fa      	ldr	r2, [r7, #12]
 8005048:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	685a      	ldr	r2, [r3, #4]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	697a      	ldr	r2, [r7, #20]
 8005056:	621a      	str	r2, [r3, #32]
}
 8005058:	bf00      	nop
 800505a:	371c      	adds	r7, #28
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr
 8005064:	40010000 	.word	0x40010000
 8005068:	40010400 	.word	0x40010400

0800506c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800506c:	b480      	push	{r7}
 800506e:	b087      	sub	sp, #28
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6a1b      	ldr	r3, [r3, #32]
 800507a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6a1b      	ldr	r3, [r3, #32]
 8005086:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	69db      	ldr	r3, [r3, #28]
 8005092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800509a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	021b      	lsls	r3, r3, #8
 80050aa:	68fa      	ldr	r2, [r7, #12]
 80050ac:	4313      	orrs	r3, r2
 80050ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80050b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	031b      	lsls	r3, r3, #12
 80050be:	693a      	ldr	r2, [r7, #16]
 80050c0:	4313      	orrs	r3, r2
 80050c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	4a12      	ldr	r2, [pc, #72]	; (8005110 <TIM_OC4_SetConfig+0xa4>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d003      	beq.n	80050d4 <TIM_OC4_SetConfig+0x68>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	4a11      	ldr	r2, [pc, #68]	; (8005114 <TIM_OC4_SetConfig+0xa8>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d109      	bne.n	80050e8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	695b      	ldr	r3, [r3, #20]
 80050e0:	019b      	lsls	r3, r3, #6
 80050e2:	697a      	ldr	r2, [r7, #20]
 80050e4:	4313      	orrs	r3, r2
 80050e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	697a      	ldr	r2, [r7, #20]
 80050ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	68fa      	ldr	r2, [r7, #12]
 80050f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	685a      	ldr	r2, [r3, #4]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	693a      	ldr	r2, [r7, #16]
 8005100:	621a      	str	r2, [r3, #32]
}
 8005102:	bf00      	nop
 8005104:	371c      	adds	r7, #28
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr
 800510e:	bf00      	nop
 8005110:	40010000 	.word	0x40010000
 8005114:	40010400 	.word	0x40010400

08005118 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005118:	b480      	push	{r7}
 800511a:	b087      	sub	sp, #28
 800511c:	af00      	add	r7, sp, #0
 800511e:	60f8      	str	r0, [r7, #12]
 8005120:	60b9      	str	r1, [r7, #8]
 8005122:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	6a1b      	ldr	r3, [r3, #32]
 8005128:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	6a1b      	ldr	r3, [r3, #32]
 800512e:	f023 0201 	bic.w	r2, r3, #1
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	699b      	ldr	r3, [r3, #24]
 800513a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005142:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	011b      	lsls	r3, r3, #4
 8005148:	693a      	ldr	r2, [r7, #16]
 800514a:	4313      	orrs	r3, r2
 800514c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	f023 030a 	bic.w	r3, r3, #10
 8005154:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005156:	697a      	ldr	r2, [r7, #20]
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	4313      	orrs	r3, r2
 800515c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	693a      	ldr	r2, [r7, #16]
 8005162:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	697a      	ldr	r2, [r7, #20]
 8005168:	621a      	str	r2, [r3, #32]
}
 800516a:	bf00      	nop
 800516c:	371c      	adds	r7, #28
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr

08005176 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005176:	b480      	push	{r7}
 8005178:	b087      	sub	sp, #28
 800517a:	af00      	add	r7, sp, #0
 800517c:	60f8      	str	r0, [r7, #12]
 800517e:	60b9      	str	r1, [r7, #8]
 8005180:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	6a1b      	ldr	r3, [r3, #32]
 8005186:	f023 0210 	bic.w	r2, r3, #16
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	699b      	ldr	r3, [r3, #24]
 8005192:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6a1b      	ldr	r3, [r3, #32]
 8005198:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80051a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	031b      	lsls	r3, r3, #12
 80051a6:	697a      	ldr	r2, [r7, #20]
 80051a8:	4313      	orrs	r3, r2
 80051aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80051b2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	011b      	lsls	r3, r3, #4
 80051b8:	693a      	ldr	r2, [r7, #16]
 80051ba:	4313      	orrs	r3, r2
 80051bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	697a      	ldr	r2, [r7, #20]
 80051c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	693a      	ldr	r2, [r7, #16]
 80051c8:	621a      	str	r2, [r3, #32]
}
 80051ca:	bf00      	nop
 80051cc:	371c      	adds	r7, #28
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr

080051d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80051d6:	b480      	push	{r7}
 80051d8:	b085      	sub	sp, #20
 80051da:	af00      	add	r7, sp, #0
 80051dc:	6078      	str	r0, [r7, #4]
 80051de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80051ee:	683a      	ldr	r2, [r7, #0]
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	4313      	orrs	r3, r2
 80051f4:	f043 0307 	orr.w	r3, r3, #7
 80051f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	68fa      	ldr	r2, [r7, #12]
 80051fe:	609a      	str	r2, [r3, #8]
}
 8005200:	bf00      	nop
 8005202:	3714      	adds	r7, #20
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr

0800520c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800520c:	b480      	push	{r7}
 800520e:	b087      	sub	sp, #28
 8005210:	af00      	add	r7, sp, #0
 8005212:	60f8      	str	r0, [r7, #12]
 8005214:	60b9      	str	r1, [r7, #8]
 8005216:	607a      	str	r2, [r7, #4]
 8005218:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005226:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	021a      	lsls	r2, r3, #8
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	431a      	orrs	r2, r3
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	4313      	orrs	r3, r2
 8005234:	697a      	ldr	r2, [r7, #20]
 8005236:	4313      	orrs	r3, r2
 8005238:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	697a      	ldr	r2, [r7, #20]
 800523e:	609a      	str	r2, [r3, #8]
}
 8005240:	bf00      	nop
 8005242:	371c      	adds	r7, #28
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr

0800524c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800524c:	b480      	push	{r7}
 800524e:	b087      	sub	sp, #28
 8005250:	af00      	add	r7, sp, #0
 8005252:	60f8      	str	r0, [r7, #12]
 8005254:	60b9      	str	r1, [r7, #8]
 8005256:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	f003 031f 	and.w	r3, r3, #31
 800525e:	2201      	movs	r2, #1
 8005260:	fa02 f303 	lsl.w	r3, r2, r3
 8005264:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	6a1a      	ldr	r2, [r3, #32]
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	43db      	mvns	r3, r3
 800526e:	401a      	ands	r2, r3
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	6a1a      	ldr	r2, [r3, #32]
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	f003 031f 	and.w	r3, r3, #31
 800527e:	6879      	ldr	r1, [r7, #4]
 8005280:	fa01 f303 	lsl.w	r3, r1, r3
 8005284:	431a      	orrs	r2, r3
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	621a      	str	r2, [r3, #32]
}
 800528a:	bf00      	nop
 800528c:	371c      	adds	r7, #28
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr
	...

08005298 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005298:	b480      	push	{r7}
 800529a:	b085      	sub	sp, #20
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
 80052a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d101      	bne.n	80052b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80052ac:	2302      	movs	r3, #2
 80052ae:	e05a      	b.n	8005366 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2201      	movs	r2, #1
 80052b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2202      	movs	r2, #2
 80052bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	689b      	ldr	r3, [r3, #8]
 80052ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	68fa      	ldr	r2, [r7, #12]
 80052de:	4313      	orrs	r3, r2
 80052e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	68fa      	ldr	r2, [r7, #12]
 80052e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a21      	ldr	r2, [pc, #132]	; (8005374 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d022      	beq.n	800533a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052fc:	d01d      	beq.n	800533a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a1d      	ldr	r2, [pc, #116]	; (8005378 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d018      	beq.n	800533a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a1b      	ldr	r2, [pc, #108]	; (800537c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d013      	beq.n	800533a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a1a      	ldr	r2, [pc, #104]	; (8005380 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d00e      	beq.n	800533a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a18      	ldr	r2, [pc, #96]	; (8005384 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d009      	beq.n	800533a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a17      	ldr	r2, [pc, #92]	; (8005388 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d004      	beq.n	800533a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a15      	ldr	r2, [pc, #84]	; (800538c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d10c      	bne.n	8005354 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005340:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	68ba      	ldr	r2, [r7, #8]
 8005348:	4313      	orrs	r3, r2
 800534a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	68ba      	ldr	r2, [r7, #8]
 8005352:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005364:	2300      	movs	r3, #0
}
 8005366:	4618      	mov	r0, r3
 8005368:	3714      	adds	r7, #20
 800536a:	46bd      	mov	sp, r7
 800536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005370:	4770      	bx	lr
 8005372:	bf00      	nop
 8005374:	40010000 	.word	0x40010000
 8005378:	40000400 	.word	0x40000400
 800537c:	40000800 	.word	0x40000800
 8005380:	40000c00 	.word	0x40000c00
 8005384:	40010400 	.word	0x40010400
 8005388:	40014000 	.word	0x40014000
 800538c:	40001800 	.word	0x40001800

08005390 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005390:	b480      	push	{r7}
 8005392:	b085      	sub	sp, #20
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800539a:	2300      	movs	r3, #0
 800539c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d101      	bne.n	80053ac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80053a8:	2302      	movs	r3, #2
 80053aa:	e03d      	b.n	8005428 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2201      	movs	r2, #1
 80053b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	68db      	ldr	r3, [r3, #12]
 80053be:	4313      	orrs	r3, r2
 80053c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	4313      	orrs	r3, r2
 80053ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	4313      	orrs	r3, r2
 80053dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4313      	orrs	r3, r2
 80053ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	691b      	ldr	r3, [r3, #16]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	695b      	ldr	r3, [r3, #20]
 8005404:	4313      	orrs	r3, r2
 8005406:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	69db      	ldr	r3, [r3, #28]
 8005412:	4313      	orrs	r3, r2
 8005414:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	68fa      	ldr	r2, [r7, #12]
 800541c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2200      	movs	r2, #0
 8005422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005426:	2300      	movs	r3, #0
}
 8005428:	4618      	mov	r0, r3
 800542a:	3714      	adds	r7, #20
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr

08005434 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b082      	sub	sp, #8
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d101      	bne.n	8005446 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	e03f      	b.n	80054c6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800544c:	b2db      	uxtb	r3, r3
 800544e:	2b00      	cmp	r3, #0
 8005450:	d106      	bne.n	8005460 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2200      	movs	r2, #0
 8005456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f7fc fece 	bl	80021fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2224      	movs	r2, #36	; 0x24
 8005464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	68da      	ldr	r2, [r3, #12]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005476:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f000 fcdf 	bl	8005e3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	691a      	ldr	r2, [r3, #16]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800548c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	695a      	ldr	r2, [r3, #20]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800549c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	68da      	ldr	r2, [r3, #12]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80054ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2200      	movs	r2, #0
 80054b2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2220      	movs	r2, #32
 80054b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2220      	movs	r2, #32
 80054c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80054c4:	2300      	movs	r3, #0
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3708      	adds	r7, #8
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}

080054ce <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80054ce:	b580      	push	{r7, lr}
 80054d0:	b084      	sub	sp, #16
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	60f8      	str	r0, [r7, #12]
 80054d6:	60b9      	str	r1, [r7, #8]
 80054d8:	4613      	mov	r3, r2
 80054da:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	2b20      	cmp	r3, #32
 80054e6:	d11d      	bne.n	8005524 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d002      	beq.n	80054f4 <HAL_UART_Receive_IT+0x26>
 80054ee:	88fb      	ldrh	r3, [r7, #6]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d101      	bne.n	80054f8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	e016      	b.n	8005526 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d101      	bne.n	8005506 <HAL_UART_Receive_IT+0x38>
 8005502:	2302      	movs	r3, #2
 8005504:	e00f      	b.n	8005526 <HAL_UART_Receive_IT+0x58>
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2201      	movs	r2, #1
 800550a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2200      	movs	r2, #0
 8005512:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005514:	88fb      	ldrh	r3, [r7, #6]
 8005516:	461a      	mov	r2, r3
 8005518:	68b9      	ldr	r1, [r7, #8]
 800551a:	68f8      	ldr	r0, [r7, #12]
 800551c:	f000 fab6 	bl	8005a8c <UART_Start_Receive_IT>
 8005520:	4603      	mov	r3, r0
 8005522:	e000      	b.n	8005526 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005524:	2302      	movs	r3, #2
  }
}
 8005526:	4618      	mov	r0, r3
 8005528:	3710      	adds	r7, #16
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
	...

08005530 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b0ba      	sub	sp, #232	; 0xe8
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	68db      	ldr	r3, [r3, #12]
 8005548:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	695b      	ldr	r3, [r3, #20]
 8005552:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005556:	2300      	movs	r3, #0
 8005558:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800555c:	2300      	movs	r3, #0
 800555e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005562:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005566:	f003 030f 	and.w	r3, r3, #15
 800556a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800556e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005572:	2b00      	cmp	r3, #0
 8005574:	d10f      	bne.n	8005596 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005576:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800557a:	f003 0320 	and.w	r3, r3, #32
 800557e:	2b00      	cmp	r3, #0
 8005580:	d009      	beq.n	8005596 <HAL_UART_IRQHandler+0x66>
 8005582:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005586:	f003 0320 	and.w	r3, r3, #32
 800558a:	2b00      	cmp	r3, #0
 800558c:	d003      	beq.n	8005596 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f000 fb99 	bl	8005cc6 <UART_Receive_IT>
      return;
 8005594:	e256      	b.n	8005a44 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005596:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800559a:	2b00      	cmp	r3, #0
 800559c:	f000 80de 	beq.w	800575c <HAL_UART_IRQHandler+0x22c>
 80055a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055a4:	f003 0301 	and.w	r3, r3, #1
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d106      	bne.n	80055ba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80055ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055b0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	f000 80d1 	beq.w	800575c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80055ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055be:	f003 0301 	and.w	r3, r3, #1
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d00b      	beq.n	80055de <HAL_UART_IRQHandler+0xae>
 80055c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d005      	beq.n	80055de <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d6:	f043 0201 	orr.w	r2, r3, #1
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80055de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055e2:	f003 0304 	and.w	r3, r3, #4
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d00b      	beq.n	8005602 <HAL_UART_IRQHandler+0xd2>
 80055ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055ee:	f003 0301 	and.w	r3, r3, #1
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d005      	beq.n	8005602 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055fa:	f043 0202 	orr.w	r2, r3, #2
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005602:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005606:	f003 0302 	and.w	r3, r3, #2
 800560a:	2b00      	cmp	r3, #0
 800560c:	d00b      	beq.n	8005626 <HAL_UART_IRQHandler+0xf6>
 800560e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005612:	f003 0301 	and.w	r3, r3, #1
 8005616:	2b00      	cmp	r3, #0
 8005618:	d005      	beq.n	8005626 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800561e:	f043 0204 	orr.w	r2, r3, #4
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800562a:	f003 0308 	and.w	r3, r3, #8
 800562e:	2b00      	cmp	r3, #0
 8005630:	d011      	beq.n	8005656 <HAL_UART_IRQHandler+0x126>
 8005632:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005636:	f003 0320 	and.w	r3, r3, #32
 800563a:	2b00      	cmp	r3, #0
 800563c:	d105      	bne.n	800564a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800563e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005642:	f003 0301 	and.w	r3, r3, #1
 8005646:	2b00      	cmp	r3, #0
 8005648:	d005      	beq.n	8005656 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800564e:	f043 0208 	orr.w	r2, r3, #8
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800565a:	2b00      	cmp	r3, #0
 800565c:	f000 81ed 	beq.w	8005a3a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005660:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005664:	f003 0320 	and.w	r3, r3, #32
 8005668:	2b00      	cmp	r3, #0
 800566a:	d008      	beq.n	800567e <HAL_UART_IRQHandler+0x14e>
 800566c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005670:	f003 0320 	and.w	r3, r3, #32
 8005674:	2b00      	cmp	r3, #0
 8005676:	d002      	beq.n	800567e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f000 fb24 	bl	8005cc6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	695b      	ldr	r3, [r3, #20]
 8005684:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005688:	2b40      	cmp	r3, #64	; 0x40
 800568a:	bf0c      	ite	eq
 800568c:	2301      	moveq	r3, #1
 800568e:	2300      	movne	r3, #0
 8005690:	b2db      	uxtb	r3, r3
 8005692:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800569a:	f003 0308 	and.w	r3, r3, #8
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d103      	bne.n	80056aa <HAL_UART_IRQHandler+0x17a>
 80056a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d04f      	beq.n	800574a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f000 fa2c 	bl	8005b08 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	695b      	ldr	r3, [r3, #20]
 80056b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ba:	2b40      	cmp	r3, #64	; 0x40
 80056bc:	d141      	bne.n	8005742 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	3314      	adds	r3, #20
 80056c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80056cc:	e853 3f00 	ldrex	r3, [r3]
 80056d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80056d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80056d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	3314      	adds	r3, #20
 80056e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80056ea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80056ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80056f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80056fa:	e841 2300 	strex	r3, r2, [r1]
 80056fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005702:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005706:	2b00      	cmp	r3, #0
 8005708:	d1d9      	bne.n	80056be <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800570e:	2b00      	cmp	r3, #0
 8005710:	d013      	beq.n	800573a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005716:	4a7d      	ldr	r2, [pc, #500]	; (800590c <HAL_UART_IRQHandler+0x3dc>)
 8005718:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800571e:	4618      	mov	r0, r3
 8005720:	f7fd f873 	bl	800280a <HAL_DMA_Abort_IT>
 8005724:	4603      	mov	r3, r0
 8005726:	2b00      	cmp	r3, #0
 8005728:	d016      	beq.n	8005758 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800572e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005730:	687a      	ldr	r2, [r7, #4]
 8005732:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005734:	4610      	mov	r0, r2
 8005736:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005738:	e00e      	b.n	8005758 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f000 f990 	bl	8005a60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005740:	e00a      	b.n	8005758 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f000 f98c 	bl	8005a60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005748:	e006      	b.n	8005758 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f000 f988 	bl	8005a60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2200      	movs	r2, #0
 8005754:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005756:	e170      	b.n	8005a3a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005758:	bf00      	nop
    return;
 800575a:	e16e      	b.n	8005a3a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005760:	2b01      	cmp	r3, #1
 8005762:	f040 814a 	bne.w	80059fa <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005766:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800576a:	f003 0310 	and.w	r3, r3, #16
 800576e:	2b00      	cmp	r3, #0
 8005770:	f000 8143 	beq.w	80059fa <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005774:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005778:	f003 0310 	and.w	r3, r3, #16
 800577c:	2b00      	cmp	r3, #0
 800577e:	f000 813c 	beq.w	80059fa <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005782:	2300      	movs	r3, #0
 8005784:	60bb      	str	r3, [r7, #8]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	60bb      	str	r3, [r7, #8]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	60bb      	str	r3, [r7, #8]
 8005796:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	695b      	ldr	r3, [r3, #20]
 800579e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057a2:	2b40      	cmp	r3, #64	; 0x40
 80057a4:	f040 80b4 	bne.w	8005910 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80057b4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	f000 8140 	beq.w	8005a3e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80057c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80057c6:	429a      	cmp	r2, r3
 80057c8:	f080 8139 	bcs.w	8005a3e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80057d2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057d8:	69db      	ldr	r3, [r3, #28]
 80057da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057de:	f000 8088 	beq.w	80058f2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	330c      	adds	r3, #12
 80057e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80057f0:	e853 3f00 	ldrex	r3, [r3]
 80057f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80057f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80057fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005800:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	330c      	adds	r3, #12
 800580a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800580e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005812:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005816:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800581a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800581e:	e841 2300 	strex	r3, r2, [r1]
 8005822:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005826:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800582a:	2b00      	cmp	r3, #0
 800582c:	d1d9      	bne.n	80057e2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	3314      	adds	r3, #20
 8005834:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005836:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005838:	e853 3f00 	ldrex	r3, [r3]
 800583c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800583e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005840:	f023 0301 	bic.w	r3, r3, #1
 8005844:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	3314      	adds	r3, #20
 800584e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005852:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005856:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005858:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800585a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800585e:	e841 2300 	strex	r3, r2, [r1]
 8005862:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005864:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005866:	2b00      	cmp	r3, #0
 8005868:	d1e1      	bne.n	800582e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	3314      	adds	r3, #20
 8005870:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005872:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005874:	e853 3f00 	ldrex	r3, [r3]
 8005878:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800587a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800587c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005880:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	3314      	adds	r3, #20
 800588a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800588e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005890:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005892:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005894:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005896:	e841 2300 	strex	r3, r2, [r1]
 800589a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800589c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d1e3      	bne.n	800586a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2220      	movs	r2, #32
 80058a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2200      	movs	r2, #0
 80058ae:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	330c      	adds	r3, #12
 80058b6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058ba:	e853 3f00 	ldrex	r3, [r3]
 80058be:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80058c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058c2:	f023 0310 	bic.w	r3, r3, #16
 80058c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	330c      	adds	r3, #12
 80058d0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80058d4:	65ba      	str	r2, [r7, #88]	; 0x58
 80058d6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058d8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80058da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80058dc:	e841 2300 	strex	r3, r2, [r1]
 80058e0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80058e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d1e3      	bne.n	80058b0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ec:	4618      	mov	r0, r3
 80058ee:	f7fc ff1c 	bl	800272a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	1ad3      	subs	r3, r2, r3
 80058fe:	b29b      	uxth	r3, r3
 8005900:	4619      	mov	r1, r3
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f000 f8b6 	bl	8005a74 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005908:	e099      	b.n	8005a3e <HAL_UART_IRQHandler+0x50e>
 800590a:	bf00      	nop
 800590c:	08005bcf 	.word	0x08005bcf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005918:	b29b      	uxth	r3, r3
 800591a:	1ad3      	subs	r3, r2, r3
 800591c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005924:	b29b      	uxth	r3, r3
 8005926:	2b00      	cmp	r3, #0
 8005928:	f000 808b 	beq.w	8005a42 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800592c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005930:	2b00      	cmp	r3, #0
 8005932:	f000 8086 	beq.w	8005a42 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	330c      	adds	r3, #12
 800593c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800593e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005940:	e853 3f00 	ldrex	r3, [r3]
 8005944:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005948:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800594c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	330c      	adds	r3, #12
 8005956:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800595a:	647a      	str	r2, [r7, #68]	; 0x44
 800595c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800595e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005960:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005962:	e841 2300 	strex	r3, r2, [r1]
 8005966:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005968:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800596a:	2b00      	cmp	r3, #0
 800596c:	d1e3      	bne.n	8005936 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	3314      	adds	r3, #20
 8005974:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005978:	e853 3f00 	ldrex	r3, [r3]
 800597c:	623b      	str	r3, [r7, #32]
   return(result);
 800597e:	6a3b      	ldr	r3, [r7, #32]
 8005980:	f023 0301 	bic.w	r3, r3, #1
 8005984:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	3314      	adds	r3, #20
 800598e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005992:	633a      	str	r2, [r7, #48]	; 0x30
 8005994:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005996:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005998:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800599a:	e841 2300 	strex	r3, r2, [r1]
 800599e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80059a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d1e3      	bne.n	800596e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2220      	movs	r2, #32
 80059aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2200      	movs	r2, #0
 80059b2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	330c      	adds	r3, #12
 80059ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	e853 3f00 	ldrex	r3, [r3]
 80059c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f023 0310 	bic.w	r3, r3, #16
 80059ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	330c      	adds	r3, #12
 80059d4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80059d8:	61fa      	str	r2, [r7, #28]
 80059da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059dc:	69b9      	ldr	r1, [r7, #24]
 80059de:	69fa      	ldr	r2, [r7, #28]
 80059e0:	e841 2300 	strex	r3, r2, [r1]
 80059e4:	617b      	str	r3, [r7, #20]
   return(result);
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d1e3      	bne.n	80059b4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80059ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80059f0:	4619      	mov	r1, r3
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f000 f83e 	bl	8005a74 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80059f8:	e023      	b.n	8005a42 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80059fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d009      	beq.n	8005a1a <HAL_UART_IRQHandler+0x4ea>
 8005a06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d003      	beq.n	8005a1a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f000 f8ef 	bl	8005bf6 <UART_Transmit_IT>
    return;
 8005a18:	e014      	b.n	8005a44 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005a1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d00e      	beq.n	8005a44 <HAL_UART_IRQHandler+0x514>
 8005a26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d008      	beq.n	8005a44 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f000 f92f 	bl	8005c96 <UART_EndTransmit_IT>
    return;
 8005a38:	e004      	b.n	8005a44 <HAL_UART_IRQHandler+0x514>
    return;
 8005a3a:	bf00      	nop
 8005a3c:	e002      	b.n	8005a44 <HAL_UART_IRQHandler+0x514>
      return;
 8005a3e:	bf00      	nop
 8005a40:	e000      	b.n	8005a44 <HAL_UART_IRQHandler+0x514>
      return;
 8005a42:	bf00      	nop
  }
}
 8005a44:	37e8      	adds	r7, #232	; 0xe8
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}
 8005a4a:	bf00      	nop

08005a4c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b083      	sub	sp, #12
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005a54:	bf00      	nop
 8005a56:	370c      	adds	r7, #12
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5e:	4770      	bx	lr

08005a60 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b083      	sub	sp, #12
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005a68:	bf00      	nop
 8005a6a:	370c      	adds	r7, #12
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a72:	4770      	bx	lr

08005a74 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b083      	sub	sp, #12
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
 8005a7c:	460b      	mov	r3, r1
 8005a7e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005a80:	bf00      	nop
 8005a82:	370c      	adds	r7, #12
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr

08005a8c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b085      	sub	sp, #20
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	60f8      	str	r0, [r7, #12]
 8005a94:	60b9      	str	r1, [r7, #8]
 8005a96:	4613      	mov	r3, r2
 8005a98:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	68ba      	ldr	r2, [r7, #8]
 8005a9e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	88fa      	ldrh	r2, [r7, #6]
 8005aa4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	88fa      	ldrh	r2, [r7, #6]
 8005aaa:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2222      	movs	r2, #34	; 0x22
 8005ab6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2200      	movs	r2, #0
 8005abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	691b      	ldr	r3, [r3, #16]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d007      	beq.n	8005ada <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	68da      	ldr	r2, [r3, #12]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ad8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	695a      	ldr	r2, [r3, #20]
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f042 0201 	orr.w	r2, r2, #1
 8005ae8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	68da      	ldr	r2, [r3, #12]
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f042 0220 	orr.w	r2, r2, #32
 8005af8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005afa:	2300      	movs	r3, #0
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	3714      	adds	r7, #20
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr

08005b08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b095      	sub	sp, #84	; 0x54
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	330c      	adds	r3, #12
 8005b16:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b1a:	e853 3f00 	ldrex	r3, [r3]
 8005b1e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b22:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	330c      	adds	r3, #12
 8005b2e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005b30:	643a      	str	r2, [r7, #64]	; 0x40
 8005b32:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b34:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005b36:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005b38:	e841 2300 	strex	r3, r2, [r1]
 8005b3c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d1e5      	bne.n	8005b10 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	3314      	adds	r3, #20
 8005b4a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b4c:	6a3b      	ldr	r3, [r7, #32]
 8005b4e:	e853 3f00 	ldrex	r3, [r3]
 8005b52:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b54:	69fb      	ldr	r3, [r7, #28]
 8005b56:	f023 0301 	bic.w	r3, r3, #1
 8005b5a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	3314      	adds	r3, #20
 8005b62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b64:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b66:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b6c:	e841 2300 	strex	r3, r2, [r1]
 8005b70:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d1e5      	bne.n	8005b44 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	d119      	bne.n	8005bb4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	330c      	adds	r3, #12
 8005b86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	e853 3f00 	ldrex	r3, [r3]
 8005b8e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	f023 0310 	bic.w	r3, r3, #16
 8005b96:	647b      	str	r3, [r7, #68]	; 0x44
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	330c      	adds	r3, #12
 8005b9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ba0:	61ba      	str	r2, [r7, #24]
 8005ba2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ba4:	6979      	ldr	r1, [r7, #20]
 8005ba6:	69ba      	ldr	r2, [r7, #24]
 8005ba8:	e841 2300 	strex	r3, r2, [r1]
 8005bac:	613b      	str	r3, [r7, #16]
   return(result);
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d1e5      	bne.n	8005b80 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2220      	movs	r2, #32
 8005bb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005bc2:	bf00      	nop
 8005bc4:	3754      	adds	r7, #84	; 0x54
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr

08005bce <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005bce:	b580      	push	{r7, lr}
 8005bd0:	b084      	sub	sp, #16
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bda:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2200      	movs	r2, #0
 8005be0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2200      	movs	r2, #0
 8005be6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005be8:	68f8      	ldr	r0, [r7, #12]
 8005bea:	f7ff ff39 	bl	8005a60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005bee:	bf00      	nop
 8005bf0:	3710      	adds	r7, #16
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd80      	pop	{r7, pc}

08005bf6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005bf6:	b480      	push	{r7}
 8005bf8:	b085      	sub	sp, #20
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c04:	b2db      	uxtb	r3, r3
 8005c06:	2b21      	cmp	r3, #33	; 0x21
 8005c08:	d13e      	bne.n	8005c88 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c12:	d114      	bne.n	8005c3e <UART_Transmit_IT+0x48>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	691b      	ldr	r3, [r3, #16]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d110      	bne.n	8005c3e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6a1b      	ldr	r3, [r3, #32]
 8005c20:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	881b      	ldrh	r3, [r3, #0]
 8005c26:	461a      	mov	r2, r3
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c30:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6a1b      	ldr	r3, [r3, #32]
 8005c36:	1c9a      	adds	r2, r3, #2
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	621a      	str	r2, [r3, #32]
 8005c3c:	e008      	b.n	8005c50 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6a1b      	ldr	r3, [r3, #32]
 8005c42:	1c59      	adds	r1, r3, #1
 8005c44:	687a      	ldr	r2, [r7, #4]
 8005c46:	6211      	str	r1, [r2, #32]
 8005c48:	781a      	ldrb	r2, [r3, #0]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c54:	b29b      	uxth	r3, r3
 8005c56:	3b01      	subs	r3, #1
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	687a      	ldr	r2, [r7, #4]
 8005c5c:	4619      	mov	r1, r3
 8005c5e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d10f      	bne.n	8005c84 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	68da      	ldr	r2, [r3, #12]
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c72:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	68da      	ldr	r2, [r3, #12]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c82:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005c84:	2300      	movs	r3, #0
 8005c86:	e000      	b.n	8005c8a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005c88:	2302      	movs	r3, #2
  }
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3714      	adds	r7, #20
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c94:	4770      	bx	lr

08005c96 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005c96:	b580      	push	{r7, lr}
 8005c98:	b082      	sub	sp, #8
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	68da      	ldr	r2, [r3, #12]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cac:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2220      	movs	r2, #32
 8005cb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f7ff fec8 	bl	8005a4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005cbc:	2300      	movs	r3, #0
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3708      	adds	r7, #8
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}

08005cc6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005cc6:	b580      	push	{r7, lr}
 8005cc8:	b08c      	sub	sp, #48	; 0x30
 8005cca:	af00      	add	r7, sp, #0
 8005ccc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005cd4:	b2db      	uxtb	r3, r3
 8005cd6:	2b22      	cmp	r3, #34	; 0x22
 8005cd8:	f040 80ab 	bne.w	8005e32 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ce4:	d117      	bne.n	8005d16 <UART_Receive_IT+0x50>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	691b      	ldr	r3, [r3, #16]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d113      	bne.n	8005d16 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cf6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	b29b      	uxth	r3, r3
 8005d00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d04:	b29a      	uxth	r2, r3
 8005d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d08:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d0e:	1c9a      	adds	r2, r3, #2
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	629a      	str	r2, [r3, #40]	; 0x28
 8005d14:	e026      	b.n	8005d64 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d28:	d007      	beq.n	8005d3a <UART_Receive_IT+0x74>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	689b      	ldr	r3, [r3, #8]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d10a      	bne.n	8005d48 <UART_Receive_IT+0x82>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	691b      	ldr	r3, [r3, #16]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d106      	bne.n	8005d48 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	b2da      	uxtb	r2, r3
 8005d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d44:	701a      	strb	r2, [r3, #0]
 8005d46:	e008      	b.n	8005d5a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d54:	b2da      	uxtb	r2, r3
 8005d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d58:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d5e:	1c5a      	adds	r2, r3, #1
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d68:	b29b      	uxth	r3, r3
 8005d6a:	3b01      	subs	r3, #1
 8005d6c:	b29b      	uxth	r3, r3
 8005d6e:	687a      	ldr	r2, [r7, #4]
 8005d70:	4619      	mov	r1, r3
 8005d72:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d15a      	bne.n	8005e2e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	68da      	ldr	r2, [r3, #12]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f022 0220 	bic.w	r2, r2, #32
 8005d86:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	68da      	ldr	r2, [r3, #12]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d96:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	695a      	ldr	r2, [r3, #20]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f022 0201 	bic.w	r2, r2, #1
 8005da6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2220      	movs	r2, #32
 8005dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d135      	bne.n	8005e24 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	330c      	adds	r3, #12
 8005dc4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	e853 3f00 	ldrex	r3, [r3]
 8005dcc:	613b      	str	r3, [r7, #16]
   return(result);
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	f023 0310 	bic.w	r3, r3, #16
 8005dd4:	627b      	str	r3, [r7, #36]	; 0x24
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	330c      	adds	r3, #12
 8005ddc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dde:	623a      	str	r2, [r7, #32]
 8005de0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005de2:	69f9      	ldr	r1, [r7, #28]
 8005de4:	6a3a      	ldr	r2, [r7, #32]
 8005de6:	e841 2300 	strex	r3, r2, [r1]
 8005dea:	61bb      	str	r3, [r7, #24]
   return(result);
 8005dec:	69bb      	ldr	r3, [r7, #24]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d1e5      	bne.n	8005dbe <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f003 0310 	and.w	r3, r3, #16
 8005dfc:	2b10      	cmp	r3, #16
 8005dfe:	d10a      	bne.n	8005e16 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005e00:	2300      	movs	r3, #0
 8005e02:	60fb      	str	r3, [r7, #12]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	60fb      	str	r3, [r7, #12]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	60fb      	str	r3, [r7, #12]
 8005e14:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005e1a:	4619      	mov	r1, r3
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f7ff fe29 	bl	8005a74 <HAL_UARTEx_RxEventCallback>
 8005e22:	e002      	b.n	8005e2a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f7fb fb35 	bl	8001494 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	e002      	b.n	8005e34 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	e000      	b.n	8005e34 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005e32:	2302      	movs	r3, #2
  }
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	3730      	adds	r7, #48	; 0x30
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}

08005e3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e40:	b0c0      	sub	sp, #256	; 0x100
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	691b      	ldr	r3, [r3, #16]
 8005e50:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005e54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e58:	68d9      	ldr	r1, [r3, #12]
 8005e5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e5e:	681a      	ldr	r2, [r3, #0]
 8005e60:	ea40 0301 	orr.w	r3, r0, r1
 8005e64:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005e66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e6a:	689a      	ldr	r2, [r3, #8]
 8005e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e70:	691b      	ldr	r3, [r3, #16]
 8005e72:	431a      	orrs	r2, r3
 8005e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e78:	695b      	ldr	r3, [r3, #20]
 8005e7a:	431a      	orrs	r2, r3
 8005e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e80:	69db      	ldr	r3, [r3, #28]
 8005e82:	4313      	orrs	r3, r2
 8005e84:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	68db      	ldr	r3, [r3, #12]
 8005e90:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005e94:	f021 010c 	bic.w	r1, r1, #12
 8005e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e9c:	681a      	ldr	r2, [r3, #0]
 8005e9e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005ea2:	430b      	orrs	r3, r1
 8005ea4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005ea6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	695b      	ldr	r3, [r3, #20]
 8005eae:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005eb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eb6:	6999      	ldr	r1, [r3, #24]
 8005eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	ea40 0301 	orr.w	r3, r0, r1
 8005ec2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	4b8f      	ldr	r3, [pc, #572]	; (8006108 <UART_SetConfig+0x2cc>)
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d005      	beq.n	8005edc <UART_SetConfig+0xa0>
 8005ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	4b8d      	ldr	r3, [pc, #564]	; (800610c <UART_SetConfig+0x2d0>)
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	d104      	bne.n	8005ee6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005edc:	f7fe fa8a 	bl	80043f4 <HAL_RCC_GetPCLK2Freq>
 8005ee0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005ee4:	e003      	b.n	8005eee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005ee6:	f7fe fa71 	bl	80043cc <HAL_RCC_GetPCLK1Freq>
 8005eea:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005eee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ef2:	69db      	ldr	r3, [r3, #28]
 8005ef4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ef8:	f040 810c 	bne.w	8006114 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005efc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f00:	2200      	movs	r2, #0
 8005f02:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005f06:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005f0a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005f0e:	4622      	mov	r2, r4
 8005f10:	462b      	mov	r3, r5
 8005f12:	1891      	adds	r1, r2, r2
 8005f14:	65b9      	str	r1, [r7, #88]	; 0x58
 8005f16:	415b      	adcs	r3, r3
 8005f18:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f1a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005f1e:	4621      	mov	r1, r4
 8005f20:	eb12 0801 	adds.w	r8, r2, r1
 8005f24:	4629      	mov	r1, r5
 8005f26:	eb43 0901 	adc.w	r9, r3, r1
 8005f2a:	f04f 0200 	mov.w	r2, #0
 8005f2e:	f04f 0300 	mov.w	r3, #0
 8005f32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005f36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005f3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005f3e:	4690      	mov	r8, r2
 8005f40:	4699      	mov	r9, r3
 8005f42:	4623      	mov	r3, r4
 8005f44:	eb18 0303 	adds.w	r3, r8, r3
 8005f48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005f4c:	462b      	mov	r3, r5
 8005f4e:	eb49 0303 	adc.w	r3, r9, r3
 8005f52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005f56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005f62:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005f66:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005f6a:	460b      	mov	r3, r1
 8005f6c:	18db      	adds	r3, r3, r3
 8005f6e:	653b      	str	r3, [r7, #80]	; 0x50
 8005f70:	4613      	mov	r3, r2
 8005f72:	eb42 0303 	adc.w	r3, r2, r3
 8005f76:	657b      	str	r3, [r7, #84]	; 0x54
 8005f78:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005f7c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005f80:	f7fa fd8c 	bl	8000a9c <__aeabi_uldivmod>
 8005f84:	4602      	mov	r2, r0
 8005f86:	460b      	mov	r3, r1
 8005f88:	4b61      	ldr	r3, [pc, #388]	; (8006110 <UART_SetConfig+0x2d4>)
 8005f8a:	fba3 2302 	umull	r2, r3, r3, r2
 8005f8e:	095b      	lsrs	r3, r3, #5
 8005f90:	011c      	lsls	r4, r3, #4
 8005f92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f96:	2200      	movs	r2, #0
 8005f98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005f9c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005fa0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005fa4:	4642      	mov	r2, r8
 8005fa6:	464b      	mov	r3, r9
 8005fa8:	1891      	adds	r1, r2, r2
 8005faa:	64b9      	str	r1, [r7, #72]	; 0x48
 8005fac:	415b      	adcs	r3, r3
 8005fae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005fb0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005fb4:	4641      	mov	r1, r8
 8005fb6:	eb12 0a01 	adds.w	sl, r2, r1
 8005fba:	4649      	mov	r1, r9
 8005fbc:	eb43 0b01 	adc.w	fp, r3, r1
 8005fc0:	f04f 0200 	mov.w	r2, #0
 8005fc4:	f04f 0300 	mov.w	r3, #0
 8005fc8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005fcc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005fd0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005fd4:	4692      	mov	sl, r2
 8005fd6:	469b      	mov	fp, r3
 8005fd8:	4643      	mov	r3, r8
 8005fda:	eb1a 0303 	adds.w	r3, sl, r3
 8005fde:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005fe2:	464b      	mov	r3, r9
 8005fe4:	eb4b 0303 	adc.w	r3, fp, r3
 8005fe8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005ff8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005ffc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006000:	460b      	mov	r3, r1
 8006002:	18db      	adds	r3, r3, r3
 8006004:	643b      	str	r3, [r7, #64]	; 0x40
 8006006:	4613      	mov	r3, r2
 8006008:	eb42 0303 	adc.w	r3, r2, r3
 800600c:	647b      	str	r3, [r7, #68]	; 0x44
 800600e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006012:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006016:	f7fa fd41 	bl	8000a9c <__aeabi_uldivmod>
 800601a:	4602      	mov	r2, r0
 800601c:	460b      	mov	r3, r1
 800601e:	4611      	mov	r1, r2
 8006020:	4b3b      	ldr	r3, [pc, #236]	; (8006110 <UART_SetConfig+0x2d4>)
 8006022:	fba3 2301 	umull	r2, r3, r3, r1
 8006026:	095b      	lsrs	r3, r3, #5
 8006028:	2264      	movs	r2, #100	; 0x64
 800602a:	fb02 f303 	mul.w	r3, r2, r3
 800602e:	1acb      	subs	r3, r1, r3
 8006030:	00db      	lsls	r3, r3, #3
 8006032:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006036:	4b36      	ldr	r3, [pc, #216]	; (8006110 <UART_SetConfig+0x2d4>)
 8006038:	fba3 2302 	umull	r2, r3, r3, r2
 800603c:	095b      	lsrs	r3, r3, #5
 800603e:	005b      	lsls	r3, r3, #1
 8006040:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006044:	441c      	add	r4, r3
 8006046:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800604a:	2200      	movs	r2, #0
 800604c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006050:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006054:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006058:	4642      	mov	r2, r8
 800605a:	464b      	mov	r3, r9
 800605c:	1891      	adds	r1, r2, r2
 800605e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006060:	415b      	adcs	r3, r3
 8006062:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006064:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006068:	4641      	mov	r1, r8
 800606a:	1851      	adds	r1, r2, r1
 800606c:	6339      	str	r1, [r7, #48]	; 0x30
 800606e:	4649      	mov	r1, r9
 8006070:	414b      	adcs	r3, r1
 8006072:	637b      	str	r3, [r7, #52]	; 0x34
 8006074:	f04f 0200 	mov.w	r2, #0
 8006078:	f04f 0300 	mov.w	r3, #0
 800607c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006080:	4659      	mov	r1, fp
 8006082:	00cb      	lsls	r3, r1, #3
 8006084:	4651      	mov	r1, sl
 8006086:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800608a:	4651      	mov	r1, sl
 800608c:	00ca      	lsls	r2, r1, #3
 800608e:	4610      	mov	r0, r2
 8006090:	4619      	mov	r1, r3
 8006092:	4603      	mov	r3, r0
 8006094:	4642      	mov	r2, r8
 8006096:	189b      	adds	r3, r3, r2
 8006098:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800609c:	464b      	mov	r3, r9
 800609e:	460a      	mov	r2, r1
 80060a0:	eb42 0303 	adc.w	r3, r2, r3
 80060a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80060a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060ac:	685b      	ldr	r3, [r3, #4]
 80060ae:	2200      	movs	r2, #0
 80060b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80060b4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80060b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80060bc:	460b      	mov	r3, r1
 80060be:	18db      	adds	r3, r3, r3
 80060c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80060c2:	4613      	mov	r3, r2
 80060c4:	eb42 0303 	adc.w	r3, r2, r3
 80060c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80060ce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80060d2:	f7fa fce3 	bl	8000a9c <__aeabi_uldivmod>
 80060d6:	4602      	mov	r2, r0
 80060d8:	460b      	mov	r3, r1
 80060da:	4b0d      	ldr	r3, [pc, #52]	; (8006110 <UART_SetConfig+0x2d4>)
 80060dc:	fba3 1302 	umull	r1, r3, r3, r2
 80060e0:	095b      	lsrs	r3, r3, #5
 80060e2:	2164      	movs	r1, #100	; 0x64
 80060e4:	fb01 f303 	mul.w	r3, r1, r3
 80060e8:	1ad3      	subs	r3, r2, r3
 80060ea:	00db      	lsls	r3, r3, #3
 80060ec:	3332      	adds	r3, #50	; 0x32
 80060ee:	4a08      	ldr	r2, [pc, #32]	; (8006110 <UART_SetConfig+0x2d4>)
 80060f0:	fba2 2303 	umull	r2, r3, r2, r3
 80060f4:	095b      	lsrs	r3, r3, #5
 80060f6:	f003 0207 	and.w	r2, r3, #7
 80060fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4422      	add	r2, r4
 8006102:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006104:	e105      	b.n	8006312 <UART_SetConfig+0x4d6>
 8006106:	bf00      	nop
 8006108:	40011000 	.word	0x40011000
 800610c:	40011400 	.word	0x40011400
 8006110:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006114:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006118:	2200      	movs	r2, #0
 800611a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800611e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006122:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006126:	4642      	mov	r2, r8
 8006128:	464b      	mov	r3, r9
 800612a:	1891      	adds	r1, r2, r2
 800612c:	6239      	str	r1, [r7, #32]
 800612e:	415b      	adcs	r3, r3
 8006130:	627b      	str	r3, [r7, #36]	; 0x24
 8006132:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006136:	4641      	mov	r1, r8
 8006138:	1854      	adds	r4, r2, r1
 800613a:	4649      	mov	r1, r9
 800613c:	eb43 0501 	adc.w	r5, r3, r1
 8006140:	f04f 0200 	mov.w	r2, #0
 8006144:	f04f 0300 	mov.w	r3, #0
 8006148:	00eb      	lsls	r3, r5, #3
 800614a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800614e:	00e2      	lsls	r2, r4, #3
 8006150:	4614      	mov	r4, r2
 8006152:	461d      	mov	r5, r3
 8006154:	4643      	mov	r3, r8
 8006156:	18e3      	adds	r3, r4, r3
 8006158:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800615c:	464b      	mov	r3, r9
 800615e:	eb45 0303 	adc.w	r3, r5, r3
 8006162:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006166:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	2200      	movs	r2, #0
 800616e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006172:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006176:	f04f 0200 	mov.w	r2, #0
 800617a:	f04f 0300 	mov.w	r3, #0
 800617e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006182:	4629      	mov	r1, r5
 8006184:	008b      	lsls	r3, r1, #2
 8006186:	4621      	mov	r1, r4
 8006188:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800618c:	4621      	mov	r1, r4
 800618e:	008a      	lsls	r2, r1, #2
 8006190:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006194:	f7fa fc82 	bl	8000a9c <__aeabi_uldivmod>
 8006198:	4602      	mov	r2, r0
 800619a:	460b      	mov	r3, r1
 800619c:	4b60      	ldr	r3, [pc, #384]	; (8006320 <UART_SetConfig+0x4e4>)
 800619e:	fba3 2302 	umull	r2, r3, r3, r2
 80061a2:	095b      	lsrs	r3, r3, #5
 80061a4:	011c      	lsls	r4, r3, #4
 80061a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061aa:	2200      	movs	r2, #0
 80061ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80061b0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80061b4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80061b8:	4642      	mov	r2, r8
 80061ba:	464b      	mov	r3, r9
 80061bc:	1891      	adds	r1, r2, r2
 80061be:	61b9      	str	r1, [r7, #24]
 80061c0:	415b      	adcs	r3, r3
 80061c2:	61fb      	str	r3, [r7, #28]
 80061c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80061c8:	4641      	mov	r1, r8
 80061ca:	1851      	adds	r1, r2, r1
 80061cc:	6139      	str	r1, [r7, #16]
 80061ce:	4649      	mov	r1, r9
 80061d0:	414b      	adcs	r3, r1
 80061d2:	617b      	str	r3, [r7, #20]
 80061d4:	f04f 0200 	mov.w	r2, #0
 80061d8:	f04f 0300 	mov.w	r3, #0
 80061dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80061e0:	4659      	mov	r1, fp
 80061e2:	00cb      	lsls	r3, r1, #3
 80061e4:	4651      	mov	r1, sl
 80061e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80061ea:	4651      	mov	r1, sl
 80061ec:	00ca      	lsls	r2, r1, #3
 80061ee:	4610      	mov	r0, r2
 80061f0:	4619      	mov	r1, r3
 80061f2:	4603      	mov	r3, r0
 80061f4:	4642      	mov	r2, r8
 80061f6:	189b      	adds	r3, r3, r2
 80061f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80061fc:	464b      	mov	r3, r9
 80061fe:	460a      	mov	r2, r1
 8006200:	eb42 0303 	adc.w	r3, r2, r3
 8006204:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	2200      	movs	r2, #0
 8006210:	67bb      	str	r3, [r7, #120]	; 0x78
 8006212:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006214:	f04f 0200 	mov.w	r2, #0
 8006218:	f04f 0300 	mov.w	r3, #0
 800621c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006220:	4649      	mov	r1, r9
 8006222:	008b      	lsls	r3, r1, #2
 8006224:	4641      	mov	r1, r8
 8006226:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800622a:	4641      	mov	r1, r8
 800622c:	008a      	lsls	r2, r1, #2
 800622e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006232:	f7fa fc33 	bl	8000a9c <__aeabi_uldivmod>
 8006236:	4602      	mov	r2, r0
 8006238:	460b      	mov	r3, r1
 800623a:	4b39      	ldr	r3, [pc, #228]	; (8006320 <UART_SetConfig+0x4e4>)
 800623c:	fba3 1302 	umull	r1, r3, r3, r2
 8006240:	095b      	lsrs	r3, r3, #5
 8006242:	2164      	movs	r1, #100	; 0x64
 8006244:	fb01 f303 	mul.w	r3, r1, r3
 8006248:	1ad3      	subs	r3, r2, r3
 800624a:	011b      	lsls	r3, r3, #4
 800624c:	3332      	adds	r3, #50	; 0x32
 800624e:	4a34      	ldr	r2, [pc, #208]	; (8006320 <UART_SetConfig+0x4e4>)
 8006250:	fba2 2303 	umull	r2, r3, r2, r3
 8006254:	095b      	lsrs	r3, r3, #5
 8006256:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800625a:	441c      	add	r4, r3
 800625c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006260:	2200      	movs	r2, #0
 8006262:	673b      	str	r3, [r7, #112]	; 0x70
 8006264:	677a      	str	r2, [r7, #116]	; 0x74
 8006266:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800626a:	4642      	mov	r2, r8
 800626c:	464b      	mov	r3, r9
 800626e:	1891      	adds	r1, r2, r2
 8006270:	60b9      	str	r1, [r7, #8]
 8006272:	415b      	adcs	r3, r3
 8006274:	60fb      	str	r3, [r7, #12]
 8006276:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800627a:	4641      	mov	r1, r8
 800627c:	1851      	adds	r1, r2, r1
 800627e:	6039      	str	r1, [r7, #0]
 8006280:	4649      	mov	r1, r9
 8006282:	414b      	adcs	r3, r1
 8006284:	607b      	str	r3, [r7, #4]
 8006286:	f04f 0200 	mov.w	r2, #0
 800628a:	f04f 0300 	mov.w	r3, #0
 800628e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006292:	4659      	mov	r1, fp
 8006294:	00cb      	lsls	r3, r1, #3
 8006296:	4651      	mov	r1, sl
 8006298:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800629c:	4651      	mov	r1, sl
 800629e:	00ca      	lsls	r2, r1, #3
 80062a0:	4610      	mov	r0, r2
 80062a2:	4619      	mov	r1, r3
 80062a4:	4603      	mov	r3, r0
 80062a6:	4642      	mov	r2, r8
 80062a8:	189b      	adds	r3, r3, r2
 80062aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80062ac:	464b      	mov	r3, r9
 80062ae:	460a      	mov	r2, r1
 80062b0:	eb42 0303 	adc.w	r3, r2, r3
 80062b4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80062b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	2200      	movs	r2, #0
 80062be:	663b      	str	r3, [r7, #96]	; 0x60
 80062c0:	667a      	str	r2, [r7, #100]	; 0x64
 80062c2:	f04f 0200 	mov.w	r2, #0
 80062c6:	f04f 0300 	mov.w	r3, #0
 80062ca:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80062ce:	4649      	mov	r1, r9
 80062d0:	008b      	lsls	r3, r1, #2
 80062d2:	4641      	mov	r1, r8
 80062d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80062d8:	4641      	mov	r1, r8
 80062da:	008a      	lsls	r2, r1, #2
 80062dc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80062e0:	f7fa fbdc 	bl	8000a9c <__aeabi_uldivmod>
 80062e4:	4602      	mov	r2, r0
 80062e6:	460b      	mov	r3, r1
 80062e8:	4b0d      	ldr	r3, [pc, #52]	; (8006320 <UART_SetConfig+0x4e4>)
 80062ea:	fba3 1302 	umull	r1, r3, r3, r2
 80062ee:	095b      	lsrs	r3, r3, #5
 80062f0:	2164      	movs	r1, #100	; 0x64
 80062f2:	fb01 f303 	mul.w	r3, r1, r3
 80062f6:	1ad3      	subs	r3, r2, r3
 80062f8:	011b      	lsls	r3, r3, #4
 80062fa:	3332      	adds	r3, #50	; 0x32
 80062fc:	4a08      	ldr	r2, [pc, #32]	; (8006320 <UART_SetConfig+0x4e4>)
 80062fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006302:	095b      	lsrs	r3, r3, #5
 8006304:	f003 020f 	and.w	r2, r3, #15
 8006308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4422      	add	r2, r4
 8006310:	609a      	str	r2, [r3, #8]
}
 8006312:	bf00      	nop
 8006314:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006318:	46bd      	mov	sp, r7
 800631a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800631e:	bf00      	nop
 8006320:	51eb851f 	.word	0x51eb851f

08006324 <__NVIC_SetPriority>:
{
 8006324:	b480      	push	{r7}
 8006326:	b083      	sub	sp, #12
 8006328:	af00      	add	r7, sp, #0
 800632a:	4603      	mov	r3, r0
 800632c:	6039      	str	r1, [r7, #0]
 800632e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006330:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006334:	2b00      	cmp	r3, #0
 8006336:	db0a      	blt.n	800634e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	b2da      	uxtb	r2, r3
 800633c:	490c      	ldr	r1, [pc, #48]	; (8006370 <__NVIC_SetPriority+0x4c>)
 800633e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006342:	0112      	lsls	r2, r2, #4
 8006344:	b2d2      	uxtb	r2, r2
 8006346:	440b      	add	r3, r1
 8006348:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800634c:	e00a      	b.n	8006364 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	b2da      	uxtb	r2, r3
 8006352:	4908      	ldr	r1, [pc, #32]	; (8006374 <__NVIC_SetPriority+0x50>)
 8006354:	79fb      	ldrb	r3, [r7, #7]
 8006356:	f003 030f 	and.w	r3, r3, #15
 800635a:	3b04      	subs	r3, #4
 800635c:	0112      	lsls	r2, r2, #4
 800635e:	b2d2      	uxtb	r2, r2
 8006360:	440b      	add	r3, r1
 8006362:	761a      	strb	r2, [r3, #24]
}
 8006364:	bf00      	nop
 8006366:	370c      	adds	r7, #12
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr
 8006370:	e000e100 	.word	0xe000e100
 8006374:	e000ed00 	.word	0xe000ed00

08006378 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006378:	b580      	push	{r7, lr}
 800637a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800637c:	2100      	movs	r1, #0
 800637e:	f06f 0004 	mvn.w	r0, #4
 8006382:	f7ff ffcf 	bl	8006324 <__NVIC_SetPriority>
#endif
}
 8006386:	bf00      	nop
 8006388:	bd80      	pop	{r7, pc}
	...

0800638c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800638c:	b480      	push	{r7}
 800638e:	b083      	sub	sp, #12
 8006390:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006392:	f3ef 8305 	mrs	r3, IPSR
 8006396:	603b      	str	r3, [r7, #0]
  return(result);
 8006398:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800639a:	2b00      	cmp	r3, #0
 800639c:	d003      	beq.n	80063a6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800639e:	f06f 0305 	mvn.w	r3, #5
 80063a2:	607b      	str	r3, [r7, #4]
 80063a4:	e00c      	b.n	80063c0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80063a6:	4b0a      	ldr	r3, [pc, #40]	; (80063d0 <osKernelInitialize+0x44>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d105      	bne.n	80063ba <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80063ae:	4b08      	ldr	r3, [pc, #32]	; (80063d0 <osKernelInitialize+0x44>)
 80063b0:	2201      	movs	r2, #1
 80063b2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80063b4:	2300      	movs	r3, #0
 80063b6:	607b      	str	r3, [r7, #4]
 80063b8:	e002      	b.n	80063c0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80063ba:	f04f 33ff 	mov.w	r3, #4294967295
 80063be:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80063c0:	687b      	ldr	r3, [r7, #4]
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	370c      	adds	r7, #12
 80063c6:	46bd      	mov	sp, r7
 80063c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063cc:	4770      	bx	lr
 80063ce:	bf00      	nop
 80063d0:	200002b8 	.word	0x200002b8

080063d4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b082      	sub	sp, #8
 80063d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063da:	f3ef 8305 	mrs	r3, IPSR
 80063de:	603b      	str	r3, [r7, #0]
  return(result);
 80063e0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d003      	beq.n	80063ee <osKernelStart+0x1a>
    stat = osErrorISR;
 80063e6:	f06f 0305 	mvn.w	r3, #5
 80063ea:	607b      	str	r3, [r7, #4]
 80063ec:	e010      	b.n	8006410 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80063ee:	4b0b      	ldr	r3, [pc, #44]	; (800641c <osKernelStart+0x48>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	2b01      	cmp	r3, #1
 80063f4:	d109      	bne.n	800640a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80063f6:	f7ff ffbf 	bl	8006378 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80063fa:	4b08      	ldr	r3, [pc, #32]	; (800641c <osKernelStart+0x48>)
 80063fc:	2202      	movs	r2, #2
 80063fe:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006400:	f001 fd4a 	bl	8007e98 <vTaskStartScheduler>
      stat = osOK;
 8006404:	2300      	movs	r3, #0
 8006406:	607b      	str	r3, [r7, #4]
 8006408:	e002      	b.n	8006410 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800640a:	f04f 33ff 	mov.w	r3, #4294967295
 800640e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006410:	687b      	ldr	r3, [r7, #4]
}
 8006412:	4618      	mov	r0, r3
 8006414:	3708      	adds	r7, #8
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}
 800641a:	bf00      	nop
 800641c:	200002b8 	.word	0x200002b8

08006420 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006420:	b580      	push	{r7, lr}
 8006422:	b08e      	sub	sp, #56	; 0x38
 8006424:	af04      	add	r7, sp, #16
 8006426:	60f8      	str	r0, [r7, #12]
 8006428:	60b9      	str	r1, [r7, #8]
 800642a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800642c:	2300      	movs	r3, #0
 800642e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006430:	f3ef 8305 	mrs	r3, IPSR
 8006434:	617b      	str	r3, [r7, #20]
  return(result);
 8006436:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006438:	2b00      	cmp	r3, #0
 800643a:	d17e      	bne.n	800653a <osThreadNew+0x11a>
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d07b      	beq.n	800653a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006442:	2380      	movs	r3, #128	; 0x80
 8006444:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006446:	2318      	movs	r3, #24
 8006448:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800644a:	2300      	movs	r3, #0
 800644c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800644e:	f04f 33ff 	mov.w	r3, #4294967295
 8006452:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d045      	beq.n	80064e6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d002      	beq.n	8006468 <osThreadNew+0x48>
        name = attr->name;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	699b      	ldr	r3, [r3, #24]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d002      	beq.n	8006476 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	699b      	ldr	r3, [r3, #24]
 8006474:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006476:	69fb      	ldr	r3, [r7, #28]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d008      	beq.n	800648e <osThreadNew+0x6e>
 800647c:	69fb      	ldr	r3, [r7, #28]
 800647e:	2b38      	cmp	r3, #56	; 0x38
 8006480:	d805      	bhi.n	800648e <osThreadNew+0x6e>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	f003 0301 	and.w	r3, r3, #1
 800648a:	2b00      	cmp	r3, #0
 800648c:	d001      	beq.n	8006492 <osThreadNew+0x72>
        return (NULL);
 800648e:	2300      	movs	r3, #0
 8006490:	e054      	b.n	800653c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	695b      	ldr	r3, [r3, #20]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d003      	beq.n	80064a2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	695b      	ldr	r3, [r3, #20]
 800649e:	089b      	lsrs	r3, r3, #2
 80064a0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d00e      	beq.n	80064c8 <osThreadNew+0xa8>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	68db      	ldr	r3, [r3, #12]
 80064ae:	2b5b      	cmp	r3, #91	; 0x5b
 80064b0:	d90a      	bls.n	80064c8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d006      	beq.n	80064c8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	695b      	ldr	r3, [r3, #20]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d002      	beq.n	80064c8 <osThreadNew+0xa8>
        mem = 1;
 80064c2:	2301      	movs	r3, #1
 80064c4:	61bb      	str	r3, [r7, #24]
 80064c6:	e010      	b.n	80064ea <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	689b      	ldr	r3, [r3, #8]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d10c      	bne.n	80064ea <osThreadNew+0xca>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	68db      	ldr	r3, [r3, #12]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d108      	bne.n	80064ea <osThreadNew+0xca>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	691b      	ldr	r3, [r3, #16]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d104      	bne.n	80064ea <osThreadNew+0xca>
          mem = 0;
 80064e0:	2300      	movs	r3, #0
 80064e2:	61bb      	str	r3, [r7, #24]
 80064e4:	e001      	b.n	80064ea <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80064e6:	2300      	movs	r3, #0
 80064e8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80064ea:	69bb      	ldr	r3, [r7, #24]
 80064ec:	2b01      	cmp	r3, #1
 80064ee:	d110      	bne.n	8006512 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80064f4:	687a      	ldr	r2, [r7, #4]
 80064f6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80064f8:	9202      	str	r2, [sp, #8]
 80064fa:	9301      	str	r3, [sp, #4]
 80064fc:	69fb      	ldr	r3, [r7, #28]
 80064fe:	9300      	str	r3, [sp, #0]
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	6a3a      	ldr	r2, [r7, #32]
 8006504:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006506:	68f8      	ldr	r0, [r7, #12]
 8006508:	f001 fa72 	bl	80079f0 <xTaskCreateStatic>
 800650c:	4603      	mov	r3, r0
 800650e:	613b      	str	r3, [r7, #16]
 8006510:	e013      	b.n	800653a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006512:	69bb      	ldr	r3, [r7, #24]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d110      	bne.n	800653a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006518:	6a3b      	ldr	r3, [r7, #32]
 800651a:	b29a      	uxth	r2, r3
 800651c:	f107 0310 	add.w	r3, r7, #16
 8006520:	9301      	str	r3, [sp, #4]
 8006522:	69fb      	ldr	r3, [r7, #28]
 8006524:	9300      	str	r3, [sp, #0]
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800652a:	68f8      	ldr	r0, [r7, #12]
 800652c:	f001 fabd 	bl	8007aaa <xTaskCreate>
 8006530:	4603      	mov	r3, r0
 8006532:	2b01      	cmp	r3, #1
 8006534:	d001      	beq.n	800653a <osThreadNew+0x11a>
            hTask = NULL;
 8006536:	2300      	movs	r3, #0
 8006538:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800653a:	693b      	ldr	r3, [r7, #16]
}
 800653c:	4618      	mov	r0, r3
 800653e:	3728      	adds	r7, #40	; 0x28
 8006540:	46bd      	mov	sp, r7
 8006542:	bd80      	pop	{r7, pc}

08006544 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006544:	b580      	push	{r7, lr}
 8006546:	b084      	sub	sp, #16
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800654c:	f3ef 8305 	mrs	r3, IPSR
 8006550:	60bb      	str	r3, [r7, #8]
  return(result);
 8006552:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006554:	2b00      	cmp	r3, #0
 8006556:	d003      	beq.n	8006560 <osDelay+0x1c>
    stat = osErrorISR;
 8006558:	f06f 0305 	mvn.w	r3, #5
 800655c:	60fb      	str	r3, [r7, #12]
 800655e:	e007      	b.n	8006570 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006560:	2300      	movs	r3, #0
 8006562:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d002      	beq.n	8006570 <osDelay+0x2c>
      vTaskDelay(ticks);
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f001 fc60 	bl	8007e30 <vTaskDelay>
    }
  }

  return (stat);
 8006570:	68fb      	ldr	r3, [r7, #12]
}
 8006572:	4618      	mov	r0, r3
 8006574:	3710      	adds	r7, #16
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}

0800657a <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 800657a:	b580      	push	{r7, lr}
 800657c:	b086      	sub	sp, #24
 800657e:	af00      	add	r7, sp, #0
 8006580:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006582:	f3ef 8305 	mrs	r3, IPSR
 8006586:	60fb      	str	r3, [r7, #12]
  return(result);
 8006588:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 800658a:	2b00      	cmp	r3, #0
 800658c:	d003      	beq.n	8006596 <osDelayUntil+0x1c>
    stat = osErrorISR;
 800658e:	f06f 0305 	mvn.w	r3, #5
 8006592:	617b      	str	r3, [r7, #20]
 8006594:	e019      	b.n	80065ca <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 8006596:	2300      	movs	r3, #0
 8006598:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 800659a:	f001 fd8f 	bl	80080bc <xTaskGetTickCount>
 800659e:	4603      	mov	r3, r0
 80065a0:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	687a      	ldr	r2, [r7, #4]
 80065a6:	1ad3      	subs	r3, r2, r3
 80065a8:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d009      	beq.n	80065c4 <osDelayUntil+0x4a>
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	db06      	blt.n	80065c4 <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 80065b6:	f107 0308 	add.w	r3, r7, #8
 80065ba:	6939      	ldr	r1, [r7, #16]
 80065bc:	4618      	mov	r0, r3
 80065be:	f001 fbb9 	bl	8007d34 <vTaskDelayUntil>
 80065c2:	e002      	b.n	80065ca <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 80065c4:	f06f 0303 	mvn.w	r3, #3
 80065c8:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80065ca:	697b      	ldr	r3, [r7, #20]
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3718      	adds	r7, #24
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}

080065d4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80065d4:	b480      	push	{r7}
 80065d6:	b085      	sub	sp, #20
 80065d8:	af00      	add	r7, sp, #0
 80065da:	60f8      	str	r0, [r7, #12]
 80065dc:	60b9      	str	r1, [r7, #8]
 80065de:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	4a07      	ldr	r2, [pc, #28]	; (8006600 <vApplicationGetIdleTaskMemory+0x2c>)
 80065e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	4a06      	ldr	r2, [pc, #24]	; (8006604 <vApplicationGetIdleTaskMemory+0x30>)
 80065ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2280      	movs	r2, #128	; 0x80
 80065f0:	601a      	str	r2, [r3, #0]
}
 80065f2:	bf00      	nop
 80065f4:	3714      	adds	r7, #20
 80065f6:	46bd      	mov	sp, r7
 80065f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fc:	4770      	bx	lr
 80065fe:	bf00      	nop
 8006600:	200002bc 	.word	0x200002bc
 8006604:	20000318 	.word	0x20000318

08006608 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006608:	b480      	push	{r7}
 800660a:	b085      	sub	sp, #20
 800660c:	af00      	add	r7, sp, #0
 800660e:	60f8      	str	r0, [r7, #12]
 8006610:	60b9      	str	r1, [r7, #8]
 8006612:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	4a07      	ldr	r2, [pc, #28]	; (8006634 <vApplicationGetTimerTaskMemory+0x2c>)
 8006618:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	4a06      	ldr	r2, [pc, #24]	; (8006638 <vApplicationGetTimerTaskMemory+0x30>)
 800661e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006626:	601a      	str	r2, [r3, #0]
}
 8006628:	bf00      	nop
 800662a:	3714      	adds	r7, #20
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr
 8006634:	20000518 	.word	0x20000518
 8006638:	20000574 	.word	0x20000574

0800663c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b08a      	sub	sp, #40	; 0x28
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006644:	2300      	movs	r3, #0
 8006646:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006648:	f001 fc8c 	bl	8007f64 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800664c:	4b5b      	ldr	r3, [pc, #364]	; (80067bc <pvPortMalloc+0x180>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d101      	bne.n	8006658 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006654:	f000 f920 	bl	8006898 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006658:	4b59      	ldr	r3, [pc, #356]	; (80067c0 <pvPortMalloc+0x184>)
 800665a:	681a      	ldr	r2, [r3, #0]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	4013      	ands	r3, r2
 8006660:	2b00      	cmp	r3, #0
 8006662:	f040 8093 	bne.w	800678c <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d01d      	beq.n	80066a8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800666c:	2208      	movs	r2, #8
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	4413      	add	r3, r2
 8006672:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f003 0307 	and.w	r3, r3, #7
 800667a:	2b00      	cmp	r3, #0
 800667c:	d014      	beq.n	80066a8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f023 0307 	bic.w	r3, r3, #7
 8006684:	3308      	adds	r3, #8
 8006686:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f003 0307 	and.w	r3, r3, #7
 800668e:	2b00      	cmp	r3, #0
 8006690:	d00a      	beq.n	80066a8 <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006696:	f383 8811 	msr	BASEPRI, r3
 800669a:	f3bf 8f6f 	isb	sy
 800669e:	f3bf 8f4f 	dsb	sy
 80066a2:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80066a4:	bf00      	nop
 80066a6:	e7fe      	b.n	80066a6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d06e      	beq.n	800678c <pvPortMalloc+0x150>
 80066ae:	4b45      	ldr	r3, [pc, #276]	; (80067c4 <pvPortMalloc+0x188>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	687a      	ldr	r2, [r7, #4]
 80066b4:	429a      	cmp	r2, r3
 80066b6:	d869      	bhi.n	800678c <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80066b8:	4b43      	ldr	r3, [pc, #268]	; (80067c8 <pvPortMalloc+0x18c>)
 80066ba:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80066bc:	4b42      	ldr	r3, [pc, #264]	; (80067c8 <pvPortMalloc+0x18c>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80066c2:	e004      	b.n	80066ce <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80066c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80066c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80066ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d0:	685b      	ldr	r3, [r3, #4]
 80066d2:	687a      	ldr	r2, [r7, #4]
 80066d4:	429a      	cmp	r2, r3
 80066d6:	d903      	bls.n	80066e0 <pvPortMalloc+0xa4>
 80066d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d1f1      	bne.n	80066c4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80066e0:	4b36      	ldr	r3, [pc, #216]	; (80067bc <pvPortMalloc+0x180>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066e6:	429a      	cmp	r2, r3
 80066e8:	d050      	beq.n	800678c <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80066ea:	6a3b      	ldr	r3, [r7, #32]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	2208      	movs	r2, #8
 80066f0:	4413      	add	r3, r2
 80066f2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80066f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f6:	681a      	ldr	r2, [r3, #0]
 80066f8:	6a3b      	ldr	r3, [r7, #32]
 80066fa:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80066fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066fe:	685a      	ldr	r2, [r3, #4]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	1ad2      	subs	r2, r2, r3
 8006704:	2308      	movs	r3, #8
 8006706:	005b      	lsls	r3, r3, #1
 8006708:	429a      	cmp	r2, r3
 800670a:	d91f      	bls.n	800674c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800670c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	4413      	add	r3, r2
 8006712:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006714:	69bb      	ldr	r3, [r7, #24]
 8006716:	f003 0307 	and.w	r3, r3, #7
 800671a:	2b00      	cmp	r3, #0
 800671c:	d00a      	beq.n	8006734 <pvPortMalloc+0xf8>
	__asm volatile
 800671e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006722:	f383 8811 	msr	BASEPRI, r3
 8006726:	f3bf 8f6f 	isb	sy
 800672a:	f3bf 8f4f 	dsb	sy
 800672e:	613b      	str	r3, [r7, #16]
}
 8006730:	bf00      	nop
 8006732:	e7fe      	b.n	8006732 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006736:	685a      	ldr	r2, [r3, #4]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	1ad2      	subs	r2, r2, r3
 800673c:	69bb      	ldr	r3, [r7, #24]
 800673e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006742:	687a      	ldr	r2, [r7, #4]
 8006744:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006746:	69b8      	ldr	r0, [r7, #24]
 8006748:	f000 f908 	bl	800695c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800674c:	4b1d      	ldr	r3, [pc, #116]	; (80067c4 <pvPortMalloc+0x188>)
 800674e:	681a      	ldr	r2, [r3, #0]
 8006750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	1ad3      	subs	r3, r2, r3
 8006756:	4a1b      	ldr	r2, [pc, #108]	; (80067c4 <pvPortMalloc+0x188>)
 8006758:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800675a:	4b1a      	ldr	r3, [pc, #104]	; (80067c4 <pvPortMalloc+0x188>)
 800675c:	681a      	ldr	r2, [r3, #0]
 800675e:	4b1b      	ldr	r3, [pc, #108]	; (80067cc <pvPortMalloc+0x190>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	429a      	cmp	r2, r3
 8006764:	d203      	bcs.n	800676e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006766:	4b17      	ldr	r3, [pc, #92]	; (80067c4 <pvPortMalloc+0x188>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a18      	ldr	r2, [pc, #96]	; (80067cc <pvPortMalloc+0x190>)
 800676c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800676e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006770:	685a      	ldr	r2, [r3, #4]
 8006772:	4b13      	ldr	r3, [pc, #76]	; (80067c0 <pvPortMalloc+0x184>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	431a      	orrs	r2, r3
 8006778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800677a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800677c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800677e:	2200      	movs	r2, #0
 8006780:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006782:	4b13      	ldr	r3, [pc, #76]	; (80067d0 <pvPortMalloc+0x194>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	3301      	adds	r3, #1
 8006788:	4a11      	ldr	r2, [pc, #68]	; (80067d0 <pvPortMalloc+0x194>)
 800678a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800678c:	f001 fbf8 	bl	8007f80 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006790:	69fb      	ldr	r3, [r7, #28]
 8006792:	f003 0307 	and.w	r3, r3, #7
 8006796:	2b00      	cmp	r3, #0
 8006798:	d00a      	beq.n	80067b0 <pvPortMalloc+0x174>
	__asm volatile
 800679a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800679e:	f383 8811 	msr	BASEPRI, r3
 80067a2:	f3bf 8f6f 	isb	sy
 80067a6:	f3bf 8f4f 	dsb	sy
 80067aa:	60fb      	str	r3, [r7, #12]
}
 80067ac:	bf00      	nop
 80067ae:	e7fe      	b.n	80067ae <pvPortMalloc+0x172>
	return pvReturn;
 80067b0:	69fb      	ldr	r3, [r7, #28]
}
 80067b2:	4618      	mov	r0, r3
 80067b4:	3728      	adds	r7, #40	; 0x28
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}
 80067ba:	bf00      	nop
 80067bc:	2000457c 	.word	0x2000457c
 80067c0:	20004590 	.word	0x20004590
 80067c4:	20004580 	.word	0x20004580
 80067c8:	20004574 	.word	0x20004574
 80067cc:	20004584 	.word	0x20004584
 80067d0:	20004588 	.word	0x20004588

080067d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b086      	sub	sp, #24
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d04d      	beq.n	8006882 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80067e6:	2308      	movs	r3, #8
 80067e8:	425b      	negs	r3, r3
 80067ea:	697a      	ldr	r2, [r7, #20]
 80067ec:	4413      	add	r3, r2
 80067ee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	685a      	ldr	r2, [r3, #4]
 80067f8:	4b24      	ldr	r3, [pc, #144]	; (800688c <vPortFree+0xb8>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4013      	ands	r3, r2
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d10a      	bne.n	8006818 <vPortFree+0x44>
	__asm volatile
 8006802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006806:	f383 8811 	msr	BASEPRI, r3
 800680a:	f3bf 8f6f 	isb	sy
 800680e:	f3bf 8f4f 	dsb	sy
 8006812:	60fb      	str	r3, [r7, #12]
}
 8006814:	bf00      	nop
 8006816:	e7fe      	b.n	8006816 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d00a      	beq.n	8006836 <vPortFree+0x62>
	__asm volatile
 8006820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006824:	f383 8811 	msr	BASEPRI, r3
 8006828:	f3bf 8f6f 	isb	sy
 800682c:	f3bf 8f4f 	dsb	sy
 8006830:	60bb      	str	r3, [r7, #8]
}
 8006832:	bf00      	nop
 8006834:	e7fe      	b.n	8006834 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	685a      	ldr	r2, [r3, #4]
 800683a:	4b14      	ldr	r3, [pc, #80]	; (800688c <vPortFree+0xb8>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4013      	ands	r3, r2
 8006840:	2b00      	cmp	r3, #0
 8006842:	d01e      	beq.n	8006882 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d11a      	bne.n	8006882 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	685a      	ldr	r2, [r3, #4]
 8006850:	4b0e      	ldr	r3, [pc, #56]	; (800688c <vPortFree+0xb8>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	43db      	mvns	r3, r3
 8006856:	401a      	ands	r2, r3
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800685c:	f001 fb82 	bl	8007f64 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	685a      	ldr	r2, [r3, #4]
 8006864:	4b0a      	ldr	r3, [pc, #40]	; (8006890 <vPortFree+0xbc>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4413      	add	r3, r2
 800686a:	4a09      	ldr	r2, [pc, #36]	; (8006890 <vPortFree+0xbc>)
 800686c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800686e:	6938      	ldr	r0, [r7, #16]
 8006870:	f000 f874 	bl	800695c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006874:	4b07      	ldr	r3, [pc, #28]	; (8006894 <vPortFree+0xc0>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	3301      	adds	r3, #1
 800687a:	4a06      	ldr	r2, [pc, #24]	; (8006894 <vPortFree+0xc0>)
 800687c:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800687e:	f001 fb7f 	bl	8007f80 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006882:	bf00      	nop
 8006884:	3718      	adds	r7, #24
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}
 800688a:	bf00      	nop
 800688c:	20004590 	.word	0x20004590
 8006890:	20004580 	.word	0x20004580
 8006894:	2000458c 	.word	0x2000458c

08006898 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006898:	b480      	push	{r7}
 800689a:	b085      	sub	sp, #20
 800689c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800689e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80068a2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80068a4:	4b27      	ldr	r3, [pc, #156]	; (8006944 <prvHeapInit+0xac>)
 80068a6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	f003 0307 	and.w	r3, r3, #7
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d00c      	beq.n	80068cc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	3307      	adds	r3, #7
 80068b6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	f023 0307 	bic.w	r3, r3, #7
 80068be:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80068c0:	68ba      	ldr	r2, [r7, #8]
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	1ad3      	subs	r3, r2, r3
 80068c6:	4a1f      	ldr	r2, [pc, #124]	; (8006944 <prvHeapInit+0xac>)
 80068c8:	4413      	add	r3, r2
 80068ca:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80068d0:	4a1d      	ldr	r2, [pc, #116]	; (8006948 <prvHeapInit+0xb0>)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80068d6:	4b1c      	ldr	r3, [pc, #112]	; (8006948 <prvHeapInit+0xb0>)
 80068d8:	2200      	movs	r2, #0
 80068da:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	68ba      	ldr	r2, [r7, #8]
 80068e0:	4413      	add	r3, r2
 80068e2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80068e4:	2208      	movs	r2, #8
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	1a9b      	subs	r3, r3, r2
 80068ea:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f023 0307 	bic.w	r3, r3, #7
 80068f2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	4a15      	ldr	r2, [pc, #84]	; (800694c <prvHeapInit+0xb4>)
 80068f8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80068fa:	4b14      	ldr	r3, [pc, #80]	; (800694c <prvHeapInit+0xb4>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	2200      	movs	r2, #0
 8006900:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006902:	4b12      	ldr	r3, [pc, #72]	; (800694c <prvHeapInit+0xb4>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	2200      	movs	r2, #0
 8006908:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	68fa      	ldr	r2, [r7, #12]
 8006912:	1ad2      	subs	r2, r2, r3
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006918:	4b0c      	ldr	r3, [pc, #48]	; (800694c <prvHeapInit+0xb4>)
 800691a:	681a      	ldr	r2, [r3, #0]
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	4a0a      	ldr	r2, [pc, #40]	; (8006950 <prvHeapInit+0xb8>)
 8006926:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	4a09      	ldr	r2, [pc, #36]	; (8006954 <prvHeapInit+0xbc>)
 800692e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006930:	4b09      	ldr	r3, [pc, #36]	; (8006958 <prvHeapInit+0xc0>)
 8006932:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006936:	601a      	str	r2, [r3, #0]
}
 8006938:	bf00      	nop
 800693a:	3714      	adds	r7, #20
 800693c:	46bd      	mov	sp, r7
 800693e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006942:	4770      	bx	lr
 8006944:	20000974 	.word	0x20000974
 8006948:	20004574 	.word	0x20004574
 800694c:	2000457c 	.word	0x2000457c
 8006950:	20004584 	.word	0x20004584
 8006954:	20004580 	.word	0x20004580
 8006958:	20004590 	.word	0x20004590

0800695c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800695c:	b480      	push	{r7}
 800695e:	b085      	sub	sp, #20
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006964:	4b28      	ldr	r3, [pc, #160]	; (8006a08 <prvInsertBlockIntoFreeList+0xac>)
 8006966:	60fb      	str	r3, [r7, #12]
 8006968:	e002      	b.n	8006970 <prvInsertBlockIntoFreeList+0x14>
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	60fb      	str	r3, [r7, #12]
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	687a      	ldr	r2, [r7, #4]
 8006976:	429a      	cmp	r2, r3
 8006978:	d8f7      	bhi.n	800696a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	68ba      	ldr	r2, [r7, #8]
 8006984:	4413      	add	r3, r2
 8006986:	687a      	ldr	r2, [r7, #4]
 8006988:	429a      	cmp	r2, r3
 800698a:	d108      	bne.n	800699e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	685a      	ldr	r2, [r3, #4]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	441a      	add	r2, r3
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	68ba      	ldr	r2, [r7, #8]
 80069a8:	441a      	add	r2, r3
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	429a      	cmp	r2, r3
 80069b0:	d118      	bne.n	80069e4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681a      	ldr	r2, [r3, #0]
 80069b6:	4b15      	ldr	r3, [pc, #84]	; (8006a0c <prvInsertBlockIntoFreeList+0xb0>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	429a      	cmp	r2, r3
 80069bc:	d00d      	beq.n	80069da <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	685a      	ldr	r2, [r3, #4]
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	685b      	ldr	r3, [r3, #4]
 80069c8:	441a      	add	r2, r3
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	681a      	ldr	r2, [r3, #0]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	601a      	str	r2, [r3, #0]
 80069d8:	e008      	b.n	80069ec <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80069da:	4b0c      	ldr	r3, [pc, #48]	; (8006a0c <prvInsertBlockIntoFreeList+0xb0>)
 80069dc:	681a      	ldr	r2, [r3, #0]
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	601a      	str	r2, [r3, #0]
 80069e2:	e003      	b.n	80069ec <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681a      	ldr	r2, [r3, #0]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80069ec:	68fa      	ldr	r2, [r7, #12]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	429a      	cmp	r2, r3
 80069f2:	d002      	beq.n	80069fa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	687a      	ldr	r2, [r7, #4]
 80069f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80069fa:	bf00      	nop
 80069fc:	3714      	adds	r7, #20
 80069fe:	46bd      	mov	sp, r7
 8006a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a04:	4770      	bx	lr
 8006a06:	bf00      	nop
 8006a08:	20004574 	.word	0x20004574
 8006a0c:	2000457c 	.word	0x2000457c

08006a10 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006a10:	b480      	push	{r7}
 8006a12:	b083      	sub	sp, #12
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f103 0208 	add.w	r2, r3, #8
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f04f 32ff 	mov.w	r2, #4294967295
 8006a28:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f103 0208 	add.w	r2, r3, #8
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f103 0208 	add.w	r2, r3, #8
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2200      	movs	r2, #0
 8006a42:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006a44:	bf00      	nop
 8006a46:	370c      	adds	r7, #12
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4e:	4770      	bx	lr

08006a50 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006a50:	b480      	push	{r7}
 8006a52:	b083      	sub	sp, #12
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006a5e:	bf00      	nop
 8006a60:	370c      	adds	r7, #12
 8006a62:	46bd      	mov	sp, r7
 8006a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a68:	4770      	bx	lr

08006a6a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006a6a:	b480      	push	{r7}
 8006a6c:	b085      	sub	sp, #20
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	6078      	str	r0, [r7, #4]
 8006a72:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	68fa      	ldr	r2, [r7, #12]
 8006a7e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	689a      	ldr	r2, [r3, #8]
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	689b      	ldr	r3, [r3, #8]
 8006a8c:	683a      	ldr	r2, [r7, #0]
 8006a8e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	683a      	ldr	r2, [r7, #0]
 8006a94:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	687a      	ldr	r2, [r7, #4]
 8006a9a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	1c5a      	adds	r2, r3, #1
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	601a      	str	r2, [r3, #0]
}
 8006aa6:	bf00      	nop
 8006aa8:	3714      	adds	r7, #20
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab0:	4770      	bx	lr

08006ab2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006ab2:	b480      	push	{r7}
 8006ab4:	b085      	sub	sp, #20
 8006ab6:	af00      	add	r7, sp, #0
 8006ab8:	6078      	str	r0, [r7, #4]
 8006aba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ac8:	d103      	bne.n	8006ad2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	691b      	ldr	r3, [r3, #16]
 8006ace:	60fb      	str	r3, [r7, #12]
 8006ad0:	e00c      	b.n	8006aec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	3308      	adds	r3, #8
 8006ad6:	60fb      	str	r3, [r7, #12]
 8006ad8:	e002      	b.n	8006ae0 <vListInsert+0x2e>
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	60fb      	str	r3, [r7, #12]
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	68ba      	ldr	r2, [r7, #8]
 8006ae8:	429a      	cmp	r2, r3
 8006aea:	d2f6      	bcs.n	8006ada <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	685a      	ldr	r2, [r3, #4]
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	683a      	ldr	r2, [r7, #0]
 8006afa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	68fa      	ldr	r2, [r7, #12]
 8006b00:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	683a      	ldr	r2, [r7, #0]
 8006b06:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	687a      	ldr	r2, [r7, #4]
 8006b0c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	1c5a      	adds	r2, r3, #1
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	601a      	str	r2, [r3, #0]
}
 8006b18:	bf00      	nop
 8006b1a:	3714      	adds	r7, #20
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b22:	4770      	bx	lr

08006b24 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006b24:	b480      	push	{r7}
 8006b26:	b085      	sub	sp, #20
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	691b      	ldr	r3, [r3, #16]
 8006b30:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	685b      	ldr	r3, [r3, #4]
 8006b36:	687a      	ldr	r2, [r7, #4]
 8006b38:	6892      	ldr	r2, [r2, #8]
 8006b3a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	689b      	ldr	r3, [r3, #8]
 8006b40:	687a      	ldr	r2, [r7, #4]
 8006b42:	6852      	ldr	r2, [r2, #4]
 8006b44:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	685b      	ldr	r3, [r3, #4]
 8006b4a:	687a      	ldr	r2, [r7, #4]
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	d103      	bne.n	8006b58 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	689a      	ldr	r2, [r3, #8]
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	1e5a      	subs	r2, r3, #1
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3714      	adds	r7, #20
 8006b70:	46bd      	mov	sp, r7
 8006b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b76:	4770      	bx	lr

08006b78 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b085      	sub	sp, #20
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	60f8      	str	r0, [r7, #12]
 8006b80:	60b9      	str	r1, [r7, #8]
 8006b82:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	3b04      	subs	r3, #4
 8006b88:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006b90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	3b04      	subs	r3, #4
 8006b96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	f023 0201 	bic.w	r2, r3, #1
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	3b04      	subs	r3, #4
 8006ba6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006ba8:	4a0c      	ldr	r2, [pc, #48]	; (8006bdc <pxPortInitialiseStack+0x64>)
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	3b14      	subs	r3, #20
 8006bb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006bb4:	687a      	ldr	r2, [r7, #4]
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	3b04      	subs	r3, #4
 8006bbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f06f 0202 	mvn.w	r2, #2
 8006bc6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	3b20      	subs	r3, #32
 8006bcc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006bce:	68fb      	ldr	r3, [r7, #12]
}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	3714      	adds	r7, #20
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bda:	4770      	bx	lr
 8006bdc:	08006be1 	.word	0x08006be1

08006be0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006be0:	b480      	push	{r7}
 8006be2:	b085      	sub	sp, #20
 8006be4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006be6:	2300      	movs	r3, #0
 8006be8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006bea:	4b12      	ldr	r3, [pc, #72]	; (8006c34 <prvTaskExitError+0x54>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bf2:	d00a      	beq.n	8006c0a <prvTaskExitError+0x2a>
	__asm volatile
 8006bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bf8:	f383 8811 	msr	BASEPRI, r3
 8006bfc:	f3bf 8f6f 	isb	sy
 8006c00:	f3bf 8f4f 	dsb	sy
 8006c04:	60fb      	str	r3, [r7, #12]
}
 8006c06:	bf00      	nop
 8006c08:	e7fe      	b.n	8006c08 <prvTaskExitError+0x28>
	__asm volatile
 8006c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c0e:	f383 8811 	msr	BASEPRI, r3
 8006c12:	f3bf 8f6f 	isb	sy
 8006c16:	f3bf 8f4f 	dsb	sy
 8006c1a:	60bb      	str	r3, [r7, #8]
}
 8006c1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006c1e:	bf00      	nop
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d0fc      	beq.n	8006c20 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006c26:	bf00      	nop
 8006c28:	bf00      	nop
 8006c2a:	3714      	adds	r7, #20
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c32:	4770      	bx	lr
 8006c34:	20000014 	.word	0x20000014
	...

08006c40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006c40:	4b07      	ldr	r3, [pc, #28]	; (8006c60 <pxCurrentTCBConst2>)
 8006c42:	6819      	ldr	r1, [r3, #0]
 8006c44:	6808      	ldr	r0, [r1, #0]
 8006c46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c4a:	f380 8809 	msr	PSP, r0
 8006c4e:	f3bf 8f6f 	isb	sy
 8006c52:	f04f 0000 	mov.w	r0, #0
 8006c56:	f380 8811 	msr	BASEPRI, r0
 8006c5a:	4770      	bx	lr
 8006c5c:	f3af 8000 	nop.w

08006c60 <pxCurrentTCBConst2>:
 8006c60:	200045dc 	.word	0x200045dc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006c64:	bf00      	nop
 8006c66:	bf00      	nop

08006c68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006c68:	4808      	ldr	r0, [pc, #32]	; (8006c8c <prvPortStartFirstTask+0x24>)
 8006c6a:	6800      	ldr	r0, [r0, #0]
 8006c6c:	6800      	ldr	r0, [r0, #0]
 8006c6e:	f380 8808 	msr	MSP, r0
 8006c72:	f04f 0000 	mov.w	r0, #0
 8006c76:	f380 8814 	msr	CONTROL, r0
 8006c7a:	b662      	cpsie	i
 8006c7c:	b661      	cpsie	f
 8006c7e:	f3bf 8f4f 	dsb	sy
 8006c82:	f3bf 8f6f 	isb	sy
 8006c86:	df00      	svc	0
 8006c88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006c8a:	bf00      	nop
 8006c8c:	e000ed08 	.word	0xe000ed08

08006c90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b086      	sub	sp, #24
 8006c94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006c96:	4b46      	ldr	r3, [pc, #280]	; (8006db0 <xPortStartScheduler+0x120>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a46      	ldr	r2, [pc, #280]	; (8006db4 <xPortStartScheduler+0x124>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d10a      	bne.n	8006cb6 <xPortStartScheduler+0x26>
	__asm volatile
 8006ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ca4:	f383 8811 	msr	BASEPRI, r3
 8006ca8:	f3bf 8f6f 	isb	sy
 8006cac:	f3bf 8f4f 	dsb	sy
 8006cb0:	613b      	str	r3, [r7, #16]
}
 8006cb2:	bf00      	nop
 8006cb4:	e7fe      	b.n	8006cb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006cb6:	4b3e      	ldr	r3, [pc, #248]	; (8006db0 <xPortStartScheduler+0x120>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a3f      	ldr	r2, [pc, #252]	; (8006db8 <xPortStartScheduler+0x128>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d10a      	bne.n	8006cd6 <xPortStartScheduler+0x46>
	__asm volatile
 8006cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cc4:	f383 8811 	msr	BASEPRI, r3
 8006cc8:	f3bf 8f6f 	isb	sy
 8006ccc:	f3bf 8f4f 	dsb	sy
 8006cd0:	60fb      	str	r3, [r7, #12]
}
 8006cd2:	bf00      	nop
 8006cd4:	e7fe      	b.n	8006cd4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006cd6:	4b39      	ldr	r3, [pc, #228]	; (8006dbc <xPortStartScheduler+0x12c>)
 8006cd8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	781b      	ldrb	r3, [r3, #0]
 8006cde:	b2db      	uxtb	r3, r3
 8006ce0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	22ff      	movs	r2, #255	; 0xff
 8006ce6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	781b      	ldrb	r3, [r3, #0]
 8006cec:	b2db      	uxtb	r3, r3
 8006cee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006cf0:	78fb      	ldrb	r3, [r7, #3]
 8006cf2:	b2db      	uxtb	r3, r3
 8006cf4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006cf8:	b2da      	uxtb	r2, r3
 8006cfa:	4b31      	ldr	r3, [pc, #196]	; (8006dc0 <xPortStartScheduler+0x130>)
 8006cfc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006cfe:	4b31      	ldr	r3, [pc, #196]	; (8006dc4 <xPortStartScheduler+0x134>)
 8006d00:	2207      	movs	r2, #7
 8006d02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006d04:	e009      	b.n	8006d1a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006d06:	4b2f      	ldr	r3, [pc, #188]	; (8006dc4 <xPortStartScheduler+0x134>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	3b01      	subs	r3, #1
 8006d0c:	4a2d      	ldr	r2, [pc, #180]	; (8006dc4 <xPortStartScheduler+0x134>)
 8006d0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006d10:	78fb      	ldrb	r3, [r7, #3]
 8006d12:	b2db      	uxtb	r3, r3
 8006d14:	005b      	lsls	r3, r3, #1
 8006d16:	b2db      	uxtb	r3, r3
 8006d18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006d1a:	78fb      	ldrb	r3, [r7, #3]
 8006d1c:	b2db      	uxtb	r3, r3
 8006d1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d22:	2b80      	cmp	r3, #128	; 0x80
 8006d24:	d0ef      	beq.n	8006d06 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006d26:	4b27      	ldr	r3, [pc, #156]	; (8006dc4 <xPortStartScheduler+0x134>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f1c3 0307 	rsb	r3, r3, #7
 8006d2e:	2b04      	cmp	r3, #4
 8006d30:	d00a      	beq.n	8006d48 <xPortStartScheduler+0xb8>
	__asm volatile
 8006d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d36:	f383 8811 	msr	BASEPRI, r3
 8006d3a:	f3bf 8f6f 	isb	sy
 8006d3e:	f3bf 8f4f 	dsb	sy
 8006d42:	60bb      	str	r3, [r7, #8]
}
 8006d44:	bf00      	nop
 8006d46:	e7fe      	b.n	8006d46 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006d48:	4b1e      	ldr	r3, [pc, #120]	; (8006dc4 <xPortStartScheduler+0x134>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	021b      	lsls	r3, r3, #8
 8006d4e:	4a1d      	ldr	r2, [pc, #116]	; (8006dc4 <xPortStartScheduler+0x134>)
 8006d50:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006d52:	4b1c      	ldr	r3, [pc, #112]	; (8006dc4 <xPortStartScheduler+0x134>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006d5a:	4a1a      	ldr	r2, [pc, #104]	; (8006dc4 <xPortStartScheduler+0x134>)
 8006d5c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	b2da      	uxtb	r2, r3
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006d66:	4b18      	ldr	r3, [pc, #96]	; (8006dc8 <xPortStartScheduler+0x138>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a17      	ldr	r2, [pc, #92]	; (8006dc8 <xPortStartScheduler+0x138>)
 8006d6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006d70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006d72:	4b15      	ldr	r3, [pc, #84]	; (8006dc8 <xPortStartScheduler+0x138>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a14      	ldr	r2, [pc, #80]	; (8006dc8 <xPortStartScheduler+0x138>)
 8006d78:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006d7c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006d7e:	f000 f8dd 	bl	8006f3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006d82:	4b12      	ldr	r3, [pc, #72]	; (8006dcc <xPortStartScheduler+0x13c>)
 8006d84:	2200      	movs	r2, #0
 8006d86:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006d88:	f000 f8fc 	bl	8006f84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006d8c:	4b10      	ldr	r3, [pc, #64]	; (8006dd0 <xPortStartScheduler+0x140>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a0f      	ldr	r2, [pc, #60]	; (8006dd0 <xPortStartScheduler+0x140>)
 8006d92:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006d96:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006d98:	f7ff ff66 	bl	8006c68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006d9c:	f001 fa58 	bl	8008250 <vTaskSwitchContext>
	prvTaskExitError();
 8006da0:	f7ff ff1e 	bl	8006be0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006da4:	2300      	movs	r3, #0
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	3718      	adds	r7, #24
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}
 8006dae:	bf00      	nop
 8006db0:	e000ed00 	.word	0xe000ed00
 8006db4:	410fc271 	.word	0x410fc271
 8006db8:	410fc270 	.word	0x410fc270
 8006dbc:	e000e400 	.word	0xe000e400
 8006dc0:	20004594 	.word	0x20004594
 8006dc4:	20004598 	.word	0x20004598
 8006dc8:	e000ed20 	.word	0xe000ed20
 8006dcc:	20000014 	.word	0x20000014
 8006dd0:	e000ef34 	.word	0xe000ef34

08006dd4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b083      	sub	sp, #12
 8006dd8:	af00      	add	r7, sp, #0
	__asm volatile
 8006dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dde:	f383 8811 	msr	BASEPRI, r3
 8006de2:	f3bf 8f6f 	isb	sy
 8006de6:	f3bf 8f4f 	dsb	sy
 8006dea:	607b      	str	r3, [r7, #4]
}
 8006dec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006dee:	4b0f      	ldr	r3, [pc, #60]	; (8006e2c <vPortEnterCritical+0x58>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	3301      	adds	r3, #1
 8006df4:	4a0d      	ldr	r2, [pc, #52]	; (8006e2c <vPortEnterCritical+0x58>)
 8006df6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006df8:	4b0c      	ldr	r3, [pc, #48]	; (8006e2c <vPortEnterCritical+0x58>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	2b01      	cmp	r3, #1
 8006dfe:	d10f      	bne.n	8006e20 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006e00:	4b0b      	ldr	r3, [pc, #44]	; (8006e30 <vPortEnterCritical+0x5c>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	b2db      	uxtb	r3, r3
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d00a      	beq.n	8006e20 <vPortEnterCritical+0x4c>
	__asm volatile
 8006e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e0e:	f383 8811 	msr	BASEPRI, r3
 8006e12:	f3bf 8f6f 	isb	sy
 8006e16:	f3bf 8f4f 	dsb	sy
 8006e1a:	603b      	str	r3, [r7, #0]
}
 8006e1c:	bf00      	nop
 8006e1e:	e7fe      	b.n	8006e1e <vPortEnterCritical+0x4a>
	}
}
 8006e20:	bf00      	nop
 8006e22:	370c      	adds	r7, #12
 8006e24:	46bd      	mov	sp, r7
 8006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2a:	4770      	bx	lr
 8006e2c:	20000014 	.word	0x20000014
 8006e30:	e000ed04 	.word	0xe000ed04

08006e34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006e34:	b480      	push	{r7}
 8006e36:	b083      	sub	sp, #12
 8006e38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006e3a:	4b12      	ldr	r3, [pc, #72]	; (8006e84 <vPortExitCritical+0x50>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d10a      	bne.n	8006e58 <vPortExitCritical+0x24>
	__asm volatile
 8006e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e46:	f383 8811 	msr	BASEPRI, r3
 8006e4a:	f3bf 8f6f 	isb	sy
 8006e4e:	f3bf 8f4f 	dsb	sy
 8006e52:	607b      	str	r3, [r7, #4]
}
 8006e54:	bf00      	nop
 8006e56:	e7fe      	b.n	8006e56 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006e58:	4b0a      	ldr	r3, [pc, #40]	; (8006e84 <vPortExitCritical+0x50>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	3b01      	subs	r3, #1
 8006e5e:	4a09      	ldr	r2, [pc, #36]	; (8006e84 <vPortExitCritical+0x50>)
 8006e60:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006e62:	4b08      	ldr	r3, [pc, #32]	; (8006e84 <vPortExitCritical+0x50>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d105      	bne.n	8006e76 <vPortExitCritical+0x42>
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006e74:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006e76:	bf00      	nop
 8006e78:	370c      	adds	r7, #12
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e80:	4770      	bx	lr
 8006e82:	bf00      	nop
 8006e84:	20000014 	.word	0x20000014
	...

08006e90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006e90:	f3ef 8009 	mrs	r0, PSP
 8006e94:	f3bf 8f6f 	isb	sy
 8006e98:	4b15      	ldr	r3, [pc, #84]	; (8006ef0 <pxCurrentTCBConst>)
 8006e9a:	681a      	ldr	r2, [r3, #0]
 8006e9c:	f01e 0f10 	tst.w	lr, #16
 8006ea0:	bf08      	it	eq
 8006ea2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006ea6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006eaa:	6010      	str	r0, [r2, #0]
 8006eac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006eb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006eb4:	f380 8811 	msr	BASEPRI, r0
 8006eb8:	f3bf 8f4f 	dsb	sy
 8006ebc:	f3bf 8f6f 	isb	sy
 8006ec0:	f001 f9c6 	bl	8008250 <vTaskSwitchContext>
 8006ec4:	f04f 0000 	mov.w	r0, #0
 8006ec8:	f380 8811 	msr	BASEPRI, r0
 8006ecc:	bc09      	pop	{r0, r3}
 8006ece:	6819      	ldr	r1, [r3, #0]
 8006ed0:	6808      	ldr	r0, [r1, #0]
 8006ed2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ed6:	f01e 0f10 	tst.w	lr, #16
 8006eda:	bf08      	it	eq
 8006edc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006ee0:	f380 8809 	msr	PSP, r0
 8006ee4:	f3bf 8f6f 	isb	sy
 8006ee8:	4770      	bx	lr
 8006eea:	bf00      	nop
 8006eec:	f3af 8000 	nop.w

08006ef0 <pxCurrentTCBConst>:
 8006ef0:	200045dc 	.word	0x200045dc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006ef4:	bf00      	nop
 8006ef6:	bf00      	nop

08006ef8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b082      	sub	sp, #8
 8006efc:	af00      	add	r7, sp, #0
	__asm volatile
 8006efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f02:	f383 8811 	msr	BASEPRI, r3
 8006f06:	f3bf 8f6f 	isb	sy
 8006f0a:	f3bf 8f4f 	dsb	sy
 8006f0e:	607b      	str	r3, [r7, #4]
}
 8006f10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006f12:	f001 f8e3 	bl	80080dc <xTaskIncrementTick>
 8006f16:	4603      	mov	r3, r0
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d003      	beq.n	8006f24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006f1c:	4b06      	ldr	r3, [pc, #24]	; (8006f38 <xPortSysTickHandler+0x40>)
 8006f1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f22:	601a      	str	r2, [r3, #0]
 8006f24:	2300      	movs	r3, #0
 8006f26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	f383 8811 	msr	BASEPRI, r3
}
 8006f2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006f30:	bf00      	nop
 8006f32:	3708      	adds	r7, #8
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}
 8006f38:	e000ed04 	.word	0xe000ed04

08006f3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006f40:	4b0b      	ldr	r3, [pc, #44]	; (8006f70 <vPortSetupTimerInterrupt+0x34>)
 8006f42:	2200      	movs	r2, #0
 8006f44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006f46:	4b0b      	ldr	r3, [pc, #44]	; (8006f74 <vPortSetupTimerInterrupt+0x38>)
 8006f48:	2200      	movs	r2, #0
 8006f4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006f4c:	4b0a      	ldr	r3, [pc, #40]	; (8006f78 <vPortSetupTimerInterrupt+0x3c>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4a0a      	ldr	r2, [pc, #40]	; (8006f7c <vPortSetupTimerInterrupt+0x40>)
 8006f52:	fba2 2303 	umull	r2, r3, r2, r3
 8006f56:	099b      	lsrs	r3, r3, #6
 8006f58:	4a09      	ldr	r2, [pc, #36]	; (8006f80 <vPortSetupTimerInterrupt+0x44>)
 8006f5a:	3b01      	subs	r3, #1
 8006f5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006f5e:	4b04      	ldr	r3, [pc, #16]	; (8006f70 <vPortSetupTimerInterrupt+0x34>)
 8006f60:	2207      	movs	r2, #7
 8006f62:	601a      	str	r2, [r3, #0]
}
 8006f64:	bf00      	nop
 8006f66:	46bd      	mov	sp, r7
 8006f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6c:	4770      	bx	lr
 8006f6e:	bf00      	nop
 8006f70:	e000e010 	.word	0xe000e010
 8006f74:	e000e018 	.word	0xe000e018
 8006f78:	20000008 	.word	0x20000008
 8006f7c:	10624dd3 	.word	0x10624dd3
 8006f80:	e000e014 	.word	0xe000e014

08006f84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006f84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006f94 <vPortEnableVFP+0x10>
 8006f88:	6801      	ldr	r1, [r0, #0]
 8006f8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006f8e:	6001      	str	r1, [r0, #0]
 8006f90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006f92:	bf00      	nop
 8006f94:	e000ed88 	.word	0xe000ed88

08006f98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006f98:	b480      	push	{r7}
 8006f9a:	b085      	sub	sp, #20
 8006f9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006f9e:	f3ef 8305 	mrs	r3, IPSR
 8006fa2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	2b0f      	cmp	r3, #15
 8006fa8:	d914      	bls.n	8006fd4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006faa:	4a17      	ldr	r2, [pc, #92]	; (8007008 <vPortValidateInterruptPriority+0x70>)
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	4413      	add	r3, r2
 8006fb0:	781b      	ldrb	r3, [r3, #0]
 8006fb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006fb4:	4b15      	ldr	r3, [pc, #84]	; (800700c <vPortValidateInterruptPriority+0x74>)
 8006fb6:	781b      	ldrb	r3, [r3, #0]
 8006fb8:	7afa      	ldrb	r2, [r7, #11]
 8006fba:	429a      	cmp	r2, r3
 8006fbc:	d20a      	bcs.n	8006fd4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fc2:	f383 8811 	msr	BASEPRI, r3
 8006fc6:	f3bf 8f6f 	isb	sy
 8006fca:	f3bf 8f4f 	dsb	sy
 8006fce:	607b      	str	r3, [r7, #4]
}
 8006fd0:	bf00      	nop
 8006fd2:	e7fe      	b.n	8006fd2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006fd4:	4b0e      	ldr	r3, [pc, #56]	; (8007010 <vPortValidateInterruptPriority+0x78>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006fdc:	4b0d      	ldr	r3, [pc, #52]	; (8007014 <vPortValidateInterruptPriority+0x7c>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	429a      	cmp	r2, r3
 8006fe2:	d90a      	bls.n	8006ffa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fe8:	f383 8811 	msr	BASEPRI, r3
 8006fec:	f3bf 8f6f 	isb	sy
 8006ff0:	f3bf 8f4f 	dsb	sy
 8006ff4:	603b      	str	r3, [r7, #0]
}
 8006ff6:	bf00      	nop
 8006ff8:	e7fe      	b.n	8006ff8 <vPortValidateInterruptPriority+0x60>
	}
 8006ffa:	bf00      	nop
 8006ffc:	3714      	adds	r7, #20
 8006ffe:	46bd      	mov	sp, r7
 8007000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007004:	4770      	bx	lr
 8007006:	bf00      	nop
 8007008:	e000e3f0 	.word	0xe000e3f0
 800700c:	20004594 	.word	0x20004594
 8007010:	e000ed0c 	.word	0xe000ed0c
 8007014:	20004598 	.word	0x20004598

08007018 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b084      	sub	sp, #16
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
 8007020:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d10a      	bne.n	8007042 <xQueueGenericReset+0x2a>
	__asm volatile
 800702c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007030:	f383 8811 	msr	BASEPRI, r3
 8007034:	f3bf 8f6f 	isb	sy
 8007038:	f3bf 8f4f 	dsb	sy
 800703c:	60bb      	str	r3, [r7, #8]
}
 800703e:	bf00      	nop
 8007040:	e7fe      	b.n	8007040 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007042:	f7ff fec7 	bl	8006dd4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681a      	ldr	r2, [r3, #0]
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800704e:	68f9      	ldr	r1, [r7, #12]
 8007050:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007052:	fb01 f303 	mul.w	r3, r1, r3
 8007056:	441a      	add	r2, r3
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	2200      	movs	r2, #0
 8007060:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681a      	ldr	r2, [r3, #0]
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681a      	ldr	r2, [r3, #0]
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007072:	3b01      	subs	r3, #1
 8007074:	68f9      	ldr	r1, [r7, #12]
 8007076:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007078:	fb01 f303 	mul.w	r3, r1, r3
 800707c:	441a      	add	r2, r3
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	22ff      	movs	r2, #255	; 0xff
 8007086:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	22ff      	movs	r2, #255	; 0xff
 800708e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d114      	bne.n	80070c2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	691b      	ldr	r3, [r3, #16]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d01a      	beq.n	80070d6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	3310      	adds	r3, #16
 80070a4:	4618      	mov	r0, r3
 80070a6:	f001 f981 	bl	80083ac <xTaskRemoveFromEventList>
 80070aa:	4603      	mov	r3, r0
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d012      	beq.n	80070d6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80070b0:	4b0c      	ldr	r3, [pc, #48]	; (80070e4 <xQueueGenericReset+0xcc>)
 80070b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070b6:	601a      	str	r2, [r3, #0]
 80070b8:	f3bf 8f4f 	dsb	sy
 80070bc:	f3bf 8f6f 	isb	sy
 80070c0:	e009      	b.n	80070d6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	3310      	adds	r3, #16
 80070c6:	4618      	mov	r0, r3
 80070c8:	f7ff fca2 	bl	8006a10 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	3324      	adds	r3, #36	; 0x24
 80070d0:	4618      	mov	r0, r3
 80070d2:	f7ff fc9d 	bl	8006a10 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80070d6:	f7ff fead 	bl	8006e34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80070da:	2301      	movs	r3, #1
}
 80070dc:	4618      	mov	r0, r3
 80070de:	3710      	adds	r7, #16
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}
 80070e4:	e000ed04 	.word	0xe000ed04

080070e8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b08e      	sub	sp, #56	; 0x38
 80070ec:	af02      	add	r7, sp, #8
 80070ee:	60f8      	str	r0, [r7, #12]
 80070f0:	60b9      	str	r1, [r7, #8]
 80070f2:	607a      	str	r2, [r7, #4]
 80070f4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d10a      	bne.n	8007112 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80070fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007100:	f383 8811 	msr	BASEPRI, r3
 8007104:	f3bf 8f6f 	isb	sy
 8007108:	f3bf 8f4f 	dsb	sy
 800710c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800710e:	bf00      	nop
 8007110:	e7fe      	b.n	8007110 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d10a      	bne.n	800712e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800711c:	f383 8811 	msr	BASEPRI, r3
 8007120:	f3bf 8f6f 	isb	sy
 8007124:	f3bf 8f4f 	dsb	sy
 8007128:	627b      	str	r3, [r7, #36]	; 0x24
}
 800712a:	bf00      	nop
 800712c:	e7fe      	b.n	800712c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d002      	beq.n	800713a <xQueueGenericCreateStatic+0x52>
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d001      	beq.n	800713e <xQueueGenericCreateStatic+0x56>
 800713a:	2301      	movs	r3, #1
 800713c:	e000      	b.n	8007140 <xQueueGenericCreateStatic+0x58>
 800713e:	2300      	movs	r3, #0
 8007140:	2b00      	cmp	r3, #0
 8007142:	d10a      	bne.n	800715a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007148:	f383 8811 	msr	BASEPRI, r3
 800714c:	f3bf 8f6f 	isb	sy
 8007150:	f3bf 8f4f 	dsb	sy
 8007154:	623b      	str	r3, [r7, #32]
}
 8007156:	bf00      	nop
 8007158:	e7fe      	b.n	8007158 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d102      	bne.n	8007166 <xQueueGenericCreateStatic+0x7e>
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d101      	bne.n	800716a <xQueueGenericCreateStatic+0x82>
 8007166:	2301      	movs	r3, #1
 8007168:	e000      	b.n	800716c <xQueueGenericCreateStatic+0x84>
 800716a:	2300      	movs	r3, #0
 800716c:	2b00      	cmp	r3, #0
 800716e:	d10a      	bne.n	8007186 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007174:	f383 8811 	msr	BASEPRI, r3
 8007178:	f3bf 8f6f 	isb	sy
 800717c:	f3bf 8f4f 	dsb	sy
 8007180:	61fb      	str	r3, [r7, #28]
}
 8007182:	bf00      	nop
 8007184:	e7fe      	b.n	8007184 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007186:	2350      	movs	r3, #80	; 0x50
 8007188:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	2b50      	cmp	r3, #80	; 0x50
 800718e:	d00a      	beq.n	80071a6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007194:	f383 8811 	msr	BASEPRI, r3
 8007198:	f3bf 8f6f 	isb	sy
 800719c:	f3bf 8f4f 	dsb	sy
 80071a0:	61bb      	str	r3, [r7, #24]
}
 80071a2:	bf00      	nop
 80071a4:	e7fe      	b.n	80071a4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80071a6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80071ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d00d      	beq.n	80071ce <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80071b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071b4:	2201      	movs	r2, #1
 80071b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80071ba:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80071be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071c0:	9300      	str	r3, [sp, #0]
 80071c2:	4613      	mov	r3, r2
 80071c4:	687a      	ldr	r2, [r7, #4]
 80071c6:	68b9      	ldr	r1, [r7, #8]
 80071c8:	68f8      	ldr	r0, [r7, #12]
 80071ca:	f000 f805 	bl	80071d8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80071ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80071d0:	4618      	mov	r0, r3
 80071d2:	3730      	adds	r7, #48	; 0x30
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}

080071d8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b084      	sub	sp, #16
 80071dc:	af00      	add	r7, sp, #0
 80071de:	60f8      	str	r0, [r7, #12]
 80071e0:	60b9      	str	r1, [r7, #8]
 80071e2:	607a      	str	r2, [r7, #4]
 80071e4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d103      	bne.n	80071f4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80071ec:	69bb      	ldr	r3, [r7, #24]
 80071ee:	69ba      	ldr	r2, [r7, #24]
 80071f0:	601a      	str	r2, [r3, #0]
 80071f2:	e002      	b.n	80071fa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80071f4:	69bb      	ldr	r3, [r7, #24]
 80071f6:	687a      	ldr	r2, [r7, #4]
 80071f8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80071fa:	69bb      	ldr	r3, [r7, #24]
 80071fc:	68fa      	ldr	r2, [r7, #12]
 80071fe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007200:	69bb      	ldr	r3, [r7, #24]
 8007202:	68ba      	ldr	r2, [r7, #8]
 8007204:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007206:	2101      	movs	r1, #1
 8007208:	69b8      	ldr	r0, [r7, #24]
 800720a:	f7ff ff05 	bl	8007018 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800720e:	69bb      	ldr	r3, [r7, #24]
 8007210:	78fa      	ldrb	r2, [r7, #3]
 8007212:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007216:	bf00      	nop
 8007218:	3710      	adds	r7, #16
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}
	...

08007220 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b08e      	sub	sp, #56	; 0x38
 8007224:	af00      	add	r7, sp, #0
 8007226:	60f8      	str	r0, [r7, #12]
 8007228:	60b9      	str	r1, [r7, #8]
 800722a:	607a      	str	r2, [r7, #4]
 800722c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800722e:	2300      	movs	r3, #0
 8007230:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007238:	2b00      	cmp	r3, #0
 800723a:	d10a      	bne.n	8007252 <xQueueGenericSend+0x32>
	__asm volatile
 800723c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007240:	f383 8811 	msr	BASEPRI, r3
 8007244:	f3bf 8f6f 	isb	sy
 8007248:	f3bf 8f4f 	dsb	sy
 800724c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800724e:	bf00      	nop
 8007250:	e7fe      	b.n	8007250 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d103      	bne.n	8007260 <xQueueGenericSend+0x40>
 8007258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800725a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800725c:	2b00      	cmp	r3, #0
 800725e:	d101      	bne.n	8007264 <xQueueGenericSend+0x44>
 8007260:	2301      	movs	r3, #1
 8007262:	e000      	b.n	8007266 <xQueueGenericSend+0x46>
 8007264:	2300      	movs	r3, #0
 8007266:	2b00      	cmp	r3, #0
 8007268:	d10a      	bne.n	8007280 <xQueueGenericSend+0x60>
	__asm volatile
 800726a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800726e:	f383 8811 	msr	BASEPRI, r3
 8007272:	f3bf 8f6f 	isb	sy
 8007276:	f3bf 8f4f 	dsb	sy
 800727a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800727c:	bf00      	nop
 800727e:	e7fe      	b.n	800727e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	2b02      	cmp	r3, #2
 8007284:	d103      	bne.n	800728e <xQueueGenericSend+0x6e>
 8007286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800728a:	2b01      	cmp	r3, #1
 800728c:	d101      	bne.n	8007292 <xQueueGenericSend+0x72>
 800728e:	2301      	movs	r3, #1
 8007290:	e000      	b.n	8007294 <xQueueGenericSend+0x74>
 8007292:	2300      	movs	r3, #0
 8007294:	2b00      	cmp	r3, #0
 8007296:	d10a      	bne.n	80072ae <xQueueGenericSend+0x8e>
	__asm volatile
 8007298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800729c:	f383 8811 	msr	BASEPRI, r3
 80072a0:	f3bf 8f6f 	isb	sy
 80072a4:	f3bf 8f4f 	dsb	sy
 80072a8:	623b      	str	r3, [r7, #32]
}
 80072aa:	bf00      	nop
 80072ac:	e7fe      	b.n	80072ac <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80072ae:	f001 fa3b 	bl	8008728 <xTaskGetSchedulerState>
 80072b2:	4603      	mov	r3, r0
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d102      	bne.n	80072be <xQueueGenericSend+0x9e>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d101      	bne.n	80072c2 <xQueueGenericSend+0xa2>
 80072be:	2301      	movs	r3, #1
 80072c0:	e000      	b.n	80072c4 <xQueueGenericSend+0xa4>
 80072c2:	2300      	movs	r3, #0
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d10a      	bne.n	80072de <xQueueGenericSend+0xbe>
	__asm volatile
 80072c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072cc:	f383 8811 	msr	BASEPRI, r3
 80072d0:	f3bf 8f6f 	isb	sy
 80072d4:	f3bf 8f4f 	dsb	sy
 80072d8:	61fb      	str	r3, [r7, #28]
}
 80072da:	bf00      	nop
 80072dc:	e7fe      	b.n	80072dc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80072de:	f7ff fd79 	bl	8006dd4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80072e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072ea:	429a      	cmp	r2, r3
 80072ec:	d302      	bcc.n	80072f4 <xQueueGenericSend+0xd4>
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	2b02      	cmp	r3, #2
 80072f2:	d129      	bne.n	8007348 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80072f4:	683a      	ldr	r2, [r7, #0]
 80072f6:	68b9      	ldr	r1, [r7, #8]
 80072f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80072fa:	f000 fa0b 	bl	8007714 <prvCopyDataToQueue>
 80072fe:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007304:	2b00      	cmp	r3, #0
 8007306:	d010      	beq.n	800732a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800730a:	3324      	adds	r3, #36	; 0x24
 800730c:	4618      	mov	r0, r3
 800730e:	f001 f84d 	bl	80083ac <xTaskRemoveFromEventList>
 8007312:	4603      	mov	r3, r0
 8007314:	2b00      	cmp	r3, #0
 8007316:	d013      	beq.n	8007340 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007318:	4b3f      	ldr	r3, [pc, #252]	; (8007418 <xQueueGenericSend+0x1f8>)
 800731a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800731e:	601a      	str	r2, [r3, #0]
 8007320:	f3bf 8f4f 	dsb	sy
 8007324:	f3bf 8f6f 	isb	sy
 8007328:	e00a      	b.n	8007340 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800732a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800732c:	2b00      	cmp	r3, #0
 800732e:	d007      	beq.n	8007340 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007330:	4b39      	ldr	r3, [pc, #228]	; (8007418 <xQueueGenericSend+0x1f8>)
 8007332:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007336:	601a      	str	r2, [r3, #0]
 8007338:	f3bf 8f4f 	dsb	sy
 800733c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007340:	f7ff fd78 	bl	8006e34 <vPortExitCritical>
				return pdPASS;
 8007344:	2301      	movs	r3, #1
 8007346:	e063      	b.n	8007410 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d103      	bne.n	8007356 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800734e:	f7ff fd71 	bl	8006e34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007352:	2300      	movs	r3, #0
 8007354:	e05c      	b.n	8007410 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007358:	2b00      	cmp	r3, #0
 800735a:	d106      	bne.n	800736a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800735c:	f107 0314 	add.w	r3, r7, #20
 8007360:	4618      	mov	r0, r3
 8007362:	f001 f887 	bl	8008474 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007366:	2301      	movs	r3, #1
 8007368:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800736a:	f7ff fd63 	bl	8006e34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800736e:	f000 fdf9 	bl	8007f64 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007372:	f7ff fd2f 	bl	8006dd4 <vPortEnterCritical>
 8007376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007378:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800737c:	b25b      	sxtb	r3, r3
 800737e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007382:	d103      	bne.n	800738c <xQueueGenericSend+0x16c>
 8007384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007386:	2200      	movs	r2, #0
 8007388:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800738c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800738e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007392:	b25b      	sxtb	r3, r3
 8007394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007398:	d103      	bne.n	80073a2 <xQueueGenericSend+0x182>
 800739a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800739c:	2200      	movs	r2, #0
 800739e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80073a2:	f7ff fd47 	bl	8006e34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80073a6:	1d3a      	adds	r2, r7, #4
 80073a8:	f107 0314 	add.w	r3, r7, #20
 80073ac:	4611      	mov	r1, r2
 80073ae:	4618      	mov	r0, r3
 80073b0:	f001 f876 	bl	80084a0 <xTaskCheckForTimeOut>
 80073b4:	4603      	mov	r3, r0
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d124      	bne.n	8007404 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80073ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80073bc:	f000 faa2 	bl	8007904 <prvIsQueueFull>
 80073c0:	4603      	mov	r3, r0
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d018      	beq.n	80073f8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80073c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c8:	3310      	adds	r3, #16
 80073ca:	687a      	ldr	r2, [r7, #4]
 80073cc:	4611      	mov	r1, r2
 80073ce:	4618      	mov	r0, r3
 80073d0:	f000 ff9c 	bl	800830c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80073d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80073d6:	f000 fa2d 	bl	8007834 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80073da:	f000 fdd1 	bl	8007f80 <xTaskResumeAll>
 80073de:	4603      	mov	r3, r0
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	f47f af7c 	bne.w	80072de <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80073e6:	4b0c      	ldr	r3, [pc, #48]	; (8007418 <xQueueGenericSend+0x1f8>)
 80073e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80073ec:	601a      	str	r2, [r3, #0]
 80073ee:	f3bf 8f4f 	dsb	sy
 80073f2:	f3bf 8f6f 	isb	sy
 80073f6:	e772      	b.n	80072de <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80073f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80073fa:	f000 fa1b 	bl	8007834 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80073fe:	f000 fdbf 	bl	8007f80 <xTaskResumeAll>
 8007402:	e76c      	b.n	80072de <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007404:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007406:	f000 fa15 	bl	8007834 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800740a:	f000 fdb9 	bl	8007f80 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800740e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007410:	4618      	mov	r0, r3
 8007412:	3738      	adds	r7, #56	; 0x38
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}
 8007418:	e000ed04 	.word	0xe000ed04

0800741c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b090      	sub	sp, #64	; 0x40
 8007420:	af00      	add	r7, sp, #0
 8007422:	60f8      	str	r0, [r7, #12]
 8007424:	60b9      	str	r1, [r7, #8]
 8007426:	607a      	str	r2, [r7, #4]
 8007428:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800742e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007430:	2b00      	cmp	r3, #0
 8007432:	d10a      	bne.n	800744a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007438:	f383 8811 	msr	BASEPRI, r3
 800743c:	f3bf 8f6f 	isb	sy
 8007440:	f3bf 8f4f 	dsb	sy
 8007444:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007446:	bf00      	nop
 8007448:	e7fe      	b.n	8007448 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d103      	bne.n	8007458 <xQueueGenericSendFromISR+0x3c>
 8007450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007454:	2b00      	cmp	r3, #0
 8007456:	d101      	bne.n	800745c <xQueueGenericSendFromISR+0x40>
 8007458:	2301      	movs	r3, #1
 800745a:	e000      	b.n	800745e <xQueueGenericSendFromISR+0x42>
 800745c:	2300      	movs	r3, #0
 800745e:	2b00      	cmp	r3, #0
 8007460:	d10a      	bne.n	8007478 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007466:	f383 8811 	msr	BASEPRI, r3
 800746a:	f3bf 8f6f 	isb	sy
 800746e:	f3bf 8f4f 	dsb	sy
 8007472:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007474:	bf00      	nop
 8007476:	e7fe      	b.n	8007476 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	2b02      	cmp	r3, #2
 800747c:	d103      	bne.n	8007486 <xQueueGenericSendFromISR+0x6a>
 800747e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007482:	2b01      	cmp	r3, #1
 8007484:	d101      	bne.n	800748a <xQueueGenericSendFromISR+0x6e>
 8007486:	2301      	movs	r3, #1
 8007488:	e000      	b.n	800748c <xQueueGenericSendFromISR+0x70>
 800748a:	2300      	movs	r3, #0
 800748c:	2b00      	cmp	r3, #0
 800748e:	d10a      	bne.n	80074a6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007494:	f383 8811 	msr	BASEPRI, r3
 8007498:	f3bf 8f6f 	isb	sy
 800749c:	f3bf 8f4f 	dsb	sy
 80074a0:	623b      	str	r3, [r7, #32]
}
 80074a2:	bf00      	nop
 80074a4:	e7fe      	b.n	80074a4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80074a6:	f7ff fd77 	bl	8006f98 <vPortValidateInterruptPriority>
	__asm volatile
 80074aa:	f3ef 8211 	mrs	r2, BASEPRI
 80074ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074b2:	f383 8811 	msr	BASEPRI, r3
 80074b6:	f3bf 8f6f 	isb	sy
 80074ba:	f3bf 8f4f 	dsb	sy
 80074be:	61fa      	str	r2, [r7, #28]
 80074c0:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 80074c2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80074c4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80074c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074ce:	429a      	cmp	r2, r3
 80074d0:	d302      	bcc.n	80074d8 <xQueueGenericSendFromISR+0xbc>
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	2b02      	cmp	r3, #2
 80074d6:	d12f      	bne.n	8007538 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80074d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80074de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80074e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074e6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80074e8:	683a      	ldr	r2, [r7, #0]
 80074ea:	68b9      	ldr	r1, [r7, #8]
 80074ec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80074ee:	f000 f911 	bl	8007714 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80074f2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80074f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074fa:	d112      	bne.n	8007522 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80074fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007500:	2b00      	cmp	r3, #0
 8007502:	d016      	beq.n	8007532 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007506:	3324      	adds	r3, #36	; 0x24
 8007508:	4618      	mov	r0, r3
 800750a:	f000 ff4f 	bl	80083ac <xTaskRemoveFromEventList>
 800750e:	4603      	mov	r3, r0
 8007510:	2b00      	cmp	r3, #0
 8007512:	d00e      	beq.n	8007532 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d00b      	beq.n	8007532 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2201      	movs	r2, #1
 800751e:	601a      	str	r2, [r3, #0]
 8007520:	e007      	b.n	8007532 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007522:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007526:	3301      	adds	r3, #1
 8007528:	b2db      	uxtb	r3, r3
 800752a:	b25a      	sxtb	r2, r3
 800752c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800752e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007532:	2301      	movs	r3, #1
 8007534:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007536:	e001      	b.n	800753c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007538:	2300      	movs	r3, #0
 800753a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800753c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800753e:	617b      	str	r3, [r7, #20]
	__asm volatile
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	f383 8811 	msr	BASEPRI, r3
}
 8007546:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007548:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800754a:	4618      	mov	r0, r3
 800754c:	3740      	adds	r7, #64	; 0x40
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}
	...

08007554 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b08c      	sub	sp, #48	; 0x30
 8007558:	af00      	add	r7, sp, #0
 800755a:	60f8      	str	r0, [r7, #12]
 800755c:	60b9      	str	r1, [r7, #8]
 800755e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007560:	2300      	movs	r3, #0
 8007562:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800756a:	2b00      	cmp	r3, #0
 800756c:	d10a      	bne.n	8007584 <xQueueReceive+0x30>
	__asm volatile
 800756e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007572:	f383 8811 	msr	BASEPRI, r3
 8007576:	f3bf 8f6f 	isb	sy
 800757a:	f3bf 8f4f 	dsb	sy
 800757e:	623b      	str	r3, [r7, #32]
}
 8007580:	bf00      	nop
 8007582:	e7fe      	b.n	8007582 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d103      	bne.n	8007592 <xQueueReceive+0x3e>
 800758a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800758c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800758e:	2b00      	cmp	r3, #0
 8007590:	d101      	bne.n	8007596 <xQueueReceive+0x42>
 8007592:	2301      	movs	r3, #1
 8007594:	e000      	b.n	8007598 <xQueueReceive+0x44>
 8007596:	2300      	movs	r3, #0
 8007598:	2b00      	cmp	r3, #0
 800759a:	d10a      	bne.n	80075b2 <xQueueReceive+0x5e>
	__asm volatile
 800759c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075a0:	f383 8811 	msr	BASEPRI, r3
 80075a4:	f3bf 8f6f 	isb	sy
 80075a8:	f3bf 8f4f 	dsb	sy
 80075ac:	61fb      	str	r3, [r7, #28]
}
 80075ae:	bf00      	nop
 80075b0:	e7fe      	b.n	80075b0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80075b2:	f001 f8b9 	bl	8008728 <xTaskGetSchedulerState>
 80075b6:	4603      	mov	r3, r0
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d102      	bne.n	80075c2 <xQueueReceive+0x6e>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d101      	bne.n	80075c6 <xQueueReceive+0x72>
 80075c2:	2301      	movs	r3, #1
 80075c4:	e000      	b.n	80075c8 <xQueueReceive+0x74>
 80075c6:	2300      	movs	r3, #0
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d10a      	bne.n	80075e2 <xQueueReceive+0x8e>
	__asm volatile
 80075cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075d0:	f383 8811 	msr	BASEPRI, r3
 80075d4:	f3bf 8f6f 	isb	sy
 80075d8:	f3bf 8f4f 	dsb	sy
 80075dc:	61bb      	str	r3, [r7, #24]
}
 80075de:	bf00      	nop
 80075e0:	e7fe      	b.n	80075e0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80075e2:	f7ff fbf7 	bl	8006dd4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80075e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ea:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80075ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d01f      	beq.n	8007632 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80075f2:	68b9      	ldr	r1, [r7, #8]
 80075f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075f6:	f000 f8f7 	bl	80077e8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80075fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075fc:	1e5a      	subs	r2, r3, #1
 80075fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007600:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007604:	691b      	ldr	r3, [r3, #16]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d00f      	beq.n	800762a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800760a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800760c:	3310      	adds	r3, #16
 800760e:	4618      	mov	r0, r3
 8007610:	f000 fecc 	bl	80083ac <xTaskRemoveFromEventList>
 8007614:	4603      	mov	r3, r0
 8007616:	2b00      	cmp	r3, #0
 8007618:	d007      	beq.n	800762a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800761a:	4b3d      	ldr	r3, [pc, #244]	; (8007710 <xQueueReceive+0x1bc>)
 800761c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007620:	601a      	str	r2, [r3, #0]
 8007622:	f3bf 8f4f 	dsb	sy
 8007626:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800762a:	f7ff fc03 	bl	8006e34 <vPortExitCritical>
				return pdPASS;
 800762e:	2301      	movs	r3, #1
 8007630:	e069      	b.n	8007706 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d103      	bne.n	8007640 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007638:	f7ff fbfc 	bl	8006e34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800763c:	2300      	movs	r3, #0
 800763e:	e062      	b.n	8007706 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007642:	2b00      	cmp	r3, #0
 8007644:	d106      	bne.n	8007654 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007646:	f107 0310 	add.w	r3, r7, #16
 800764a:	4618      	mov	r0, r3
 800764c:	f000 ff12 	bl	8008474 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007650:	2301      	movs	r3, #1
 8007652:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007654:	f7ff fbee 	bl	8006e34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007658:	f000 fc84 	bl	8007f64 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800765c:	f7ff fbba 	bl	8006dd4 <vPortEnterCritical>
 8007660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007662:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007666:	b25b      	sxtb	r3, r3
 8007668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800766c:	d103      	bne.n	8007676 <xQueueReceive+0x122>
 800766e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007670:	2200      	movs	r2, #0
 8007672:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007678:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800767c:	b25b      	sxtb	r3, r3
 800767e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007682:	d103      	bne.n	800768c <xQueueReceive+0x138>
 8007684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007686:	2200      	movs	r2, #0
 8007688:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800768c:	f7ff fbd2 	bl	8006e34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007690:	1d3a      	adds	r2, r7, #4
 8007692:	f107 0310 	add.w	r3, r7, #16
 8007696:	4611      	mov	r1, r2
 8007698:	4618      	mov	r0, r3
 800769a:	f000 ff01 	bl	80084a0 <xTaskCheckForTimeOut>
 800769e:	4603      	mov	r3, r0
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d123      	bne.n	80076ec <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80076a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80076a6:	f000 f917 	bl	80078d8 <prvIsQueueEmpty>
 80076aa:	4603      	mov	r3, r0
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d017      	beq.n	80076e0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80076b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076b2:	3324      	adds	r3, #36	; 0x24
 80076b4:	687a      	ldr	r2, [r7, #4]
 80076b6:	4611      	mov	r1, r2
 80076b8:	4618      	mov	r0, r3
 80076ba:	f000 fe27 	bl	800830c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80076be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80076c0:	f000 f8b8 	bl	8007834 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80076c4:	f000 fc5c 	bl	8007f80 <xTaskResumeAll>
 80076c8:	4603      	mov	r3, r0
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d189      	bne.n	80075e2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80076ce:	4b10      	ldr	r3, [pc, #64]	; (8007710 <xQueueReceive+0x1bc>)
 80076d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076d4:	601a      	str	r2, [r3, #0]
 80076d6:	f3bf 8f4f 	dsb	sy
 80076da:	f3bf 8f6f 	isb	sy
 80076de:	e780      	b.n	80075e2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80076e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80076e2:	f000 f8a7 	bl	8007834 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80076e6:	f000 fc4b 	bl	8007f80 <xTaskResumeAll>
 80076ea:	e77a      	b.n	80075e2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80076ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80076ee:	f000 f8a1 	bl	8007834 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80076f2:	f000 fc45 	bl	8007f80 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80076f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80076f8:	f000 f8ee 	bl	80078d8 <prvIsQueueEmpty>
 80076fc:	4603      	mov	r3, r0
 80076fe:	2b00      	cmp	r3, #0
 8007700:	f43f af6f 	beq.w	80075e2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007704:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007706:	4618      	mov	r0, r3
 8007708:	3730      	adds	r7, #48	; 0x30
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}
 800770e:	bf00      	nop
 8007710:	e000ed04 	.word	0xe000ed04

08007714 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b086      	sub	sp, #24
 8007718:	af00      	add	r7, sp, #0
 800771a:	60f8      	str	r0, [r7, #12]
 800771c:	60b9      	str	r1, [r7, #8]
 800771e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007720:	2300      	movs	r3, #0
 8007722:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007728:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800772e:	2b00      	cmp	r3, #0
 8007730:	d10d      	bne.n	800774e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d14d      	bne.n	80077d6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	689b      	ldr	r3, [r3, #8]
 800773e:	4618      	mov	r0, r3
 8007740:	f001 f810 	bl	8008764 <xTaskPriorityDisinherit>
 8007744:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	2200      	movs	r2, #0
 800774a:	609a      	str	r2, [r3, #8]
 800774c:	e043      	b.n	80077d6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d119      	bne.n	8007788 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	6858      	ldr	r0, [r3, #4]
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800775c:	461a      	mov	r2, r3
 800775e:	68b9      	ldr	r1, [r7, #8]
 8007760:	f001 ff22 	bl	80095a8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	685a      	ldr	r2, [r3, #4]
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800776c:	441a      	add	r2, r3
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	685a      	ldr	r2, [r3, #4]
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	689b      	ldr	r3, [r3, #8]
 800777a:	429a      	cmp	r2, r3
 800777c:	d32b      	bcc.n	80077d6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681a      	ldr	r2, [r3, #0]
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	605a      	str	r2, [r3, #4]
 8007786:	e026      	b.n	80077d6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	68d8      	ldr	r0, [r3, #12]
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007790:	461a      	mov	r2, r3
 8007792:	68b9      	ldr	r1, [r7, #8]
 8007794:	f001 ff08 	bl	80095a8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	68da      	ldr	r2, [r3, #12]
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077a0:	425b      	negs	r3, r3
 80077a2:	441a      	add	r2, r3
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	68da      	ldr	r2, [r3, #12]
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	429a      	cmp	r2, r3
 80077b2:	d207      	bcs.n	80077c4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	689a      	ldr	r2, [r3, #8]
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077bc:	425b      	negs	r3, r3
 80077be:	441a      	add	r2, r3
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2b02      	cmp	r3, #2
 80077c8:	d105      	bne.n	80077d6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80077ca:	693b      	ldr	r3, [r7, #16]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d002      	beq.n	80077d6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	3b01      	subs	r3, #1
 80077d4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80077d6:	693b      	ldr	r3, [r7, #16]
 80077d8:	1c5a      	adds	r2, r3, #1
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80077de:	697b      	ldr	r3, [r7, #20]
}
 80077e0:	4618      	mov	r0, r3
 80077e2:	3718      	adds	r7, #24
 80077e4:	46bd      	mov	sp, r7
 80077e6:	bd80      	pop	{r7, pc}

080077e8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b082      	sub	sp, #8
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
 80077f0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d018      	beq.n	800782c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	68da      	ldr	r2, [r3, #12]
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007802:	441a      	add	r2, r3
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	68da      	ldr	r2, [r3, #12]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	689b      	ldr	r3, [r3, #8]
 8007810:	429a      	cmp	r2, r3
 8007812:	d303      	bcc.n	800781c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681a      	ldr	r2, [r3, #0]
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	68d9      	ldr	r1, [r3, #12]
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007824:	461a      	mov	r2, r3
 8007826:	6838      	ldr	r0, [r7, #0]
 8007828:	f001 febe 	bl	80095a8 <memcpy>
	}
}
 800782c:	bf00      	nop
 800782e:	3708      	adds	r7, #8
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}

08007834 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b084      	sub	sp, #16
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800783c:	f7ff faca 	bl	8006dd4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007846:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007848:	e011      	b.n	800786e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800784e:	2b00      	cmp	r3, #0
 8007850:	d012      	beq.n	8007878 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	3324      	adds	r3, #36	; 0x24
 8007856:	4618      	mov	r0, r3
 8007858:	f000 fda8 	bl	80083ac <xTaskRemoveFromEventList>
 800785c:	4603      	mov	r3, r0
 800785e:	2b00      	cmp	r3, #0
 8007860:	d001      	beq.n	8007866 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007862:	f000 fe7f 	bl	8008564 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007866:	7bfb      	ldrb	r3, [r7, #15]
 8007868:	3b01      	subs	r3, #1
 800786a:	b2db      	uxtb	r3, r3
 800786c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800786e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007872:	2b00      	cmp	r3, #0
 8007874:	dce9      	bgt.n	800784a <prvUnlockQueue+0x16>
 8007876:	e000      	b.n	800787a <prvUnlockQueue+0x46>
					break;
 8007878:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	22ff      	movs	r2, #255	; 0xff
 800787e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007882:	f7ff fad7 	bl	8006e34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007886:	f7ff faa5 	bl	8006dd4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007890:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007892:	e011      	b.n	80078b8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	691b      	ldr	r3, [r3, #16]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d012      	beq.n	80078c2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	3310      	adds	r3, #16
 80078a0:	4618      	mov	r0, r3
 80078a2:	f000 fd83 	bl	80083ac <xTaskRemoveFromEventList>
 80078a6:	4603      	mov	r3, r0
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d001      	beq.n	80078b0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80078ac:	f000 fe5a 	bl	8008564 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80078b0:	7bbb      	ldrb	r3, [r7, #14]
 80078b2:	3b01      	subs	r3, #1
 80078b4:	b2db      	uxtb	r3, r3
 80078b6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80078b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	dce9      	bgt.n	8007894 <prvUnlockQueue+0x60>
 80078c0:	e000      	b.n	80078c4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80078c2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	22ff      	movs	r2, #255	; 0xff
 80078c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80078cc:	f7ff fab2 	bl	8006e34 <vPortExitCritical>
}
 80078d0:	bf00      	nop
 80078d2:	3710      	adds	r7, #16
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bd80      	pop	{r7, pc}

080078d8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b084      	sub	sp, #16
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80078e0:	f7ff fa78 	bl	8006dd4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d102      	bne.n	80078f2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80078ec:	2301      	movs	r3, #1
 80078ee:	60fb      	str	r3, [r7, #12]
 80078f0:	e001      	b.n	80078f6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80078f2:	2300      	movs	r3, #0
 80078f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80078f6:	f7ff fa9d 	bl	8006e34 <vPortExitCritical>

	return xReturn;
 80078fa:	68fb      	ldr	r3, [r7, #12]
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	3710      	adds	r7, #16
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}

08007904 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b084      	sub	sp, #16
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800790c:	f7ff fa62 	bl	8006dd4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007918:	429a      	cmp	r2, r3
 800791a:	d102      	bne.n	8007922 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800791c:	2301      	movs	r3, #1
 800791e:	60fb      	str	r3, [r7, #12]
 8007920:	e001      	b.n	8007926 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007922:	2300      	movs	r3, #0
 8007924:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007926:	f7ff fa85 	bl	8006e34 <vPortExitCritical>

	return xReturn;
 800792a:	68fb      	ldr	r3, [r7, #12]
}
 800792c:	4618      	mov	r0, r3
 800792e:	3710      	adds	r7, #16
 8007930:	46bd      	mov	sp, r7
 8007932:	bd80      	pop	{r7, pc}

08007934 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007934:	b480      	push	{r7}
 8007936:	b085      	sub	sp, #20
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
 800793c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800793e:	2300      	movs	r3, #0
 8007940:	60fb      	str	r3, [r7, #12]
 8007942:	e014      	b.n	800796e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007944:	4a0f      	ldr	r2, [pc, #60]	; (8007984 <vQueueAddToRegistry+0x50>)
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d10b      	bne.n	8007968 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007950:	490c      	ldr	r1, [pc, #48]	; (8007984 <vQueueAddToRegistry+0x50>)
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	683a      	ldr	r2, [r7, #0]
 8007956:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800795a:	4a0a      	ldr	r2, [pc, #40]	; (8007984 <vQueueAddToRegistry+0x50>)
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	00db      	lsls	r3, r3, #3
 8007960:	4413      	add	r3, r2
 8007962:	687a      	ldr	r2, [r7, #4]
 8007964:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007966:	e006      	b.n	8007976 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	3301      	adds	r3, #1
 800796c:	60fb      	str	r3, [r7, #12]
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	2b07      	cmp	r3, #7
 8007972:	d9e7      	bls.n	8007944 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007974:	bf00      	nop
 8007976:	bf00      	nop
 8007978:	3714      	adds	r7, #20
 800797a:	46bd      	mov	sp, r7
 800797c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007980:	4770      	bx	lr
 8007982:	bf00      	nop
 8007984:	2000459c 	.word	0x2000459c

08007988 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007988:	b580      	push	{r7, lr}
 800798a:	b086      	sub	sp, #24
 800798c:	af00      	add	r7, sp, #0
 800798e:	60f8      	str	r0, [r7, #12]
 8007990:	60b9      	str	r1, [r7, #8]
 8007992:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007998:	f7ff fa1c 	bl	8006dd4 <vPortEnterCritical>
 800799c:	697b      	ldr	r3, [r7, #20]
 800799e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80079a2:	b25b      	sxtb	r3, r3
 80079a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079a8:	d103      	bne.n	80079b2 <vQueueWaitForMessageRestricted+0x2a>
 80079aa:	697b      	ldr	r3, [r7, #20]
 80079ac:	2200      	movs	r2, #0
 80079ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80079b2:	697b      	ldr	r3, [r7, #20]
 80079b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80079b8:	b25b      	sxtb	r3, r3
 80079ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079be:	d103      	bne.n	80079c8 <vQueueWaitForMessageRestricted+0x40>
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	2200      	movs	r2, #0
 80079c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80079c8:	f7ff fa34 	bl	8006e34 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80079cc:	697b      	ldr	r3, [r7, #20]
 80079ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d106      	bne.n	80079e2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	3324      	adds	r3, #36	; 0x24
 80079d8:	687a      	ldr	r2, [r7, #4]
 80079da:	68b9      	ldr	r1, [r7, #8]
 80079dc:	4618      	mov	r0, r3
 80079de:	f000 fcb9 	bl	8008354 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80079e2:	6978      	ldr	r0, [r7, #20]
 80079e4:	f7ff ff26 	bl	8007834 <prvUnlockQueue>
	}
 80079e8:	bf00      	nop
 80079ea:	3718      	adds	r7, #24
 80079ec:	46bd      	mov	sp, r7
 80079ee:	bd80      	pop	{r7, pc}

080079f0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b08e      	sub	sp, #56	; 0x38
 80079f4:	af04      	add	r7, sp, #16
 80079f6:	60f8      	str	r0, [r7, #12]
 80079f8:	60b9      	str	r1, [r7, #8]
 80079fa:	607a      	str	r2, [r7, #4]
 80079fc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80079fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d10a      	bne.n	8007a1a <xTaskCreateStatic+0x2a>
	__asm volatile
 8007a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a08:	f383 8811 	msr	BASEPRI, r3
 8007a0c:	f3bf 8f6f 	isb	sy
 8007a10:	f3bf 8f4f 	dsb	sy
 8007a14:	623b      	str	r3, [r7, #32]
}
 8007a16:	bf00      	nop
 8007a18:	e7fe      	b.n	8007a18 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d10a      	bne.n	8007a36 <xTaskCreateStatic+0x46>
	__asm volatile
 8007a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a24:	f383 8811 	msr	BASEPRI, r3
 8007a28:	f3bf 8f6f 	isb	sy
 8007a2c:	f3bf 8f4f 	dsb	sy
 8007a30:	61fb      	str	r3, [r7, #28]
}
 8007a32:	bf00      	nop
 8007a34:	e7fe      	b.n	8007a34 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007a36:	235c      	movs	r3, #92	; 0x5c
 8007a38:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007a3a:	693b      	ldr	r3, [r7, #16]
 8007a3c:	2b5c      	cmp	r3, #92	; 0x5c
 8007a3e:	d00a      	beq.n	8007a56 <xTaskCreateStatic+0x66>
	__asm volatile
 8007a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a44:	f383 8811 	msr	BASEPRI, r3
 8007a48:	f3bf 8f6f 	isb	sy
 8007a4c:	f3bf 8f4f 	dsb	sy
 8007a50:	61bb      	str	r3, [r7, #24]
}
 8007a52:	bf00      	nop
 8007a54:	e7fe      	b.n	8007a54 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007a56:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d01e      	beq.n	8007a9c <xTaskCreateStatic+0xac>
 8007a5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d01b      	beq.n	8007a9c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a66:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a6c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a70:	2202      	movs	r2, #2
 8007a72:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007a76:	2300      	movs	r3, #0
 8007a78:	9303      	str	r3, [sp, #12]
 8007a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a7c:	9302      	str	r3, [sp, #8]
 8007a7e:	f107 0314 	add.w	r3, r7, #20
 8007a82:	9301      	str	r3, [sp, #4]
 8007a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a86:	9300      	str	r3, [sp, #0]
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	687a      	ldr	r2, [r7, #4]
 8007a8c:	68b9      	ldr	r1, [r7, #8]
 8007a8e:	68f8      	ldr	r0, [r7, #12]
 8007a90:	f000 f850 	bl	8007b34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007a94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007a96:	f000 f8dd 	bl	8007c54 <prvAddNewTaskToReadyList>
 8007a9a:	e001      	b.n	8007aa0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007aa0:	697b      	ldr	r3, [r7, #20]
	}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3728      	adds	r7, #40	; 0x28
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}

08007aaa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007aaa:	b580      	push	{r7, lr}
 8007aac:	b08c      	sub	sp, #48	; 0x30
 8007aae:	af04      	add	r7, sp, #16
 8007ab0:	60f8      	str	r0, [r7, #12]
 8007ab2:	60b9      	str	r1, [r7, #8]
 8007ab4:	603b      	str	r3, [r7, #0]
 8007ab6:	4613      	mov	r3, r2
 8007ab8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007aba:	88fb      	ldrh	r3, [r7, #6]
 8007abc:	009b      	lsls	r3, r3, #2
 8007abe:	4618      	mov	r0, r3
 8007ac0:	f7fe fdbc 	bl	800663c <pvPortMalloc>
 8007ac4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d00e      	beq.n	8007aea <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007acc:	205c      	movs	r0, #92	; 0x5c
 8007ace:	f7fe fdb5 	bl	800663c <pvPortMalloc>
 8007ad2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007ad4:	69fb      	ldr	r3, [r7, #28]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d003      	beq.n	8007ae2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007ada:	69fb      	ldr	r3, [r7, #28]
 8007adc:	697a      	ldr	r2, [r7, #20]
 8007ade:	631a      	str	r2, [r3, #48]	; 0x30
 8007ae0:	e005      	b.n	8007aee <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007ae2:	6978      	ldr	r0, [r7, #20]
 8007ae4:	f7fe fe76 	bl	80067d4 <vPortFree>
 8007ae8:	e001      	b.n	8007aee <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007aea:	2300      	movs	r3, #0
 8007aec:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007aee:	69fb      	ldr	r3, [r7, #28]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d017      	beq.n	8007b24 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007af4:	69fb      	ldr	r3, [r7, #28]
 8007af6:	2200      	movs	r2, #0
 8007af8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007afc:	88fa      	ldrh	r2, [r7, #6]
 8007afe:	2300      	movs	r3, #0
 8007b00:	9303      	str	r3, [sp, #12]
 8007b02:	69fb      	ldr	r3, [r7, #28]
 8007b04:	9302      	str	r3, [sp, #8]
 8007b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b08:	9301      	str	r3, [sp, #4]
 8007b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b0c:	9300      	str	r3, [sp, #0]
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	68b9      	ldr	r1, [r7, #8]
 8007b12:	68f8      	ldr	r0, [r7, #12]
 8007b14:	f000 f80e 	bl	8007b34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007b18:	69f8      	ldr	r0, [r7, #28]
 8007b1a:	f000 f89b 	bl	8007c54 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007b1e:	2301      	movs	r3, #1
 8007b20:	61bb      	str	r3, [r7, #24]
 8007b22:	e002      	b.n	8007b2a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007b24:	f04f 33ff 	mov.w	r3, #4294967295
 8007b28:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007b2a:	69bb      	ldr	r3, [r7, #24]
	}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	3720      	adds	r7, #32
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}

08007b34 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b088      	sub	sp, #32
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	60f8      	str	r0, [r7, #12]
 8007b3c:	60b9      	str	r1, [r7, #8]
 8007b3e:	607a      	str	r2, [r7, #4]
 8007b40:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b44:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	009b      	lsls	r3, r3, #2
 8007b4a:	461a      	mov	r2, r3
 8007b4c:	21a5      	movs	r1, #165	; 0xa5
 8007b4e:	f001 fd39 	bl	80095c4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007b5c:	3b01      	subs	r3, #1
 8007b5e:	009b      	lsls	r3, r3, #2
 8007b60:	4413      	add	r3, r2
 8007b62:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007b64:	69bb      	ldr	r3, [r7, #24]
 8007b66:	f023 0307 	bic.w	r3, r3, #7
 8007b6a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007b6c:	69bb      	ldr	r3, [r7, #24]
 8007b6e:	f003 0307 	and.w	r3, r3, #7
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d00a      	beq.n	8007b8c <prvInitialiseNewTask+0x58>
	__asm volatile
 8007b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b7a:	f383 8811 	msr	BASEPRI, r3
 8007b7e:	f3bf 8f6f 	isb	sy
 8007b82:	f3bf 8f4f 	dsb	sy
 8007b86:	617b      	str	r3, [r7, #20]
}
 8007b88:	bf00      	nop
 8007b8a:	e7fe      	b.n	8007b8a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d01f      	beq.n	8007bd2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007b92:	2300      	movs	r3, #0
 8007b94:	61fb      	str	r3, [r7, #28]
 8007b96:	e012      	b.n	8007bbe <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007b98:	68ba      	ldr	r2, [r7, #8]
 8007b9a:	69fb      	ldr	r3, [r7, #28]
 8007b9c:	4413      	add	r3, r2
 8007b9e:	7819      	ldrb	r1, [r3, #0]
 8007ba0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ba2:	69fb      	ldr	r3, [r7, #28]
 8007ba4:	4413      	add	r3, r2
 8007ba6:	3334      	adds	r3, #52	; 0x34
 8007ba8:	460a      	mov	r2, r1
 8007baa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007bac:	68ba      	ldr	r2, [r7, #8]
 8007bae:	69fb      	ldr	r3, [r7, #28]
 8007bb0:	4413      	add	r3, r2
 8007bb2:	781b      	ldrb	r3, [r3, #0]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d006      	beq.n	8007bc6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007bb8:	69fb      	ldr	r3, [r7, #28]
 8007bba:	3301      	adds	r3, #1
 8007bbc:	61fb      	str	r3, [r7, #28]
 8007bbe:	69fb      	ldr	r3, [r7, #28]
 8007bc0:	2b0f      	cmp	r3, #15
 8007bc2:	d9e9      	bls.n	8007b98 <prvInitialiseNewTask+0x64>
 8007bc4:	e000      	b.n	8007bc8 <prvInitialiseNewTask+0x94>
			{
				break;
 8007bc6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bca:	2200      	movs	r2, #0
 8007bcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007bd0:	e003      	b.n	8007bda <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bdc:	2b37      	cmp	r3, #55	; 0x37
 8007bde:	d901      	bls.n	8007be4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007be0:	2337      	movs	r3, #55	; 0x37
 8007be2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007be6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007be8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007bee:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bf8:	3304      	adds	r3, #4
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f7fe ff28 	bl	8006a50 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c02:	3318      	adds	r3, #24
 8007c04:	4618      	mov	r0, r3
 8007c06:	f7fe ff23 	bl	8006a50 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c0e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c12:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c18:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c1e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c22:	2200      	movs	r2, #0
 8007c24:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c28:	2200      	movs	r2, #0
 8007c2a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007c2e:	683a      	ldr	r2, [r7, #0]
 8007c30:	68f9      	ldr	r1, [r7, #12]
 8007c32:	69b8      	ldr	r0, [r7, #24]
 8007c34:	f7fe ffa0 	bl	8006b78 <pxPortInitialiseStack>
 8007c38:	4602      	mov	r2, r0
 8007c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c3c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d002      	beq.n	8007c4a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c48:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c4a:	bf00      	nop
 8007c4c:	3720      	adds	r7, #32
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}
	...

08007c54 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b082      	sub	sp, #8
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007c5c:	f7ff f8ba 	bl	8006dd4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007c60:	4b2d      	ldr	r3, [pc, #180]	; (8007d18 <prvAddNewTaskToReadyList+0xc4>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	3301      	adds	r3, #1
 8007c66:	4a2c      	ldr	r2, [pc, #176]	; (8007d18 <prvAddNewTaskToReadyList+0xc4>)
 8007c68:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007c6a:	4b2c      	ldr	r3, [pc, #176]	; (8007d1c <prvAddNewTaskToReadyList+0xc8>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d109      	bne.n	8007c86 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007c72:	4a2a      	ldr	r2, [pc, #168]	; (8007d1c <prvAddNewTaskToReadyList+0xc8>)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007c78:	4b27      	ldr	r3, [pc, #156]	; (8007d18 <prvAddNewTaskToReadyList+0xc4>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	2b01      	cmp	r3, #1
 8007c7e:	d110      	bne.n	8007ca2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007c80:	f000 fc94 	bl	80085ac <prvInitialiseTaskLists>
 8007c84:	e00d      	b.n	8007ca2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007c86:	4b26      	ldr	r3, [pc, #152]	; (8007d20 <prvAddNewTaskToReadyList+0xcc>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d109      	bne.n	8007ca2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007c8e:	4b23      	ldr	r3, [pc, #140]	; (8007d1c <prvAddNewTaskToReadyList+0xc8>)
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c98:	429a      	cmp	r2, r3
 8007c9a:	d802      	bhi.n	8007ca2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007c9c:	4a1f      	ldr	r2, [pc, #124]	; (8007d1c <prvAddNewTaskToReadyList+0xc8>)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007ca2:	4b20      	ldr	r3, [pc, #128]	; (8007d24 <prvAddNewTaskToReadyList+0xd0>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	3301      	adds	r3, #1
 8007ca8:	4a1e      	ldr	r2, [pc, #120]	; (8007d24 <prvAddNewTaskToReadyList+0xd0>)
 8007caa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007cac:	4b1d      	ldr	r3, [pc, #116]	; (8007d24 <prvAddNewTaskToReadyList+0xd0>)
 8007cae:	681a      	ldr	r2, [r3, #0]
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cb8:	4b1b      	ldr	r3, [pc, #108]	; (8007d28 <prvAddNewTaskToReadyList+0xd4>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	429a      	cmp	r2, r3
 8007cbe:	d903      	bls.n	8007cc8 <prvAddNewTaskToReadyList+0x74>
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cc4:	4a18      	ldr	r2, [pc, #96]	; (8007d28 <prvAddNewTaskToReadyList+0xd4>)
 8007cc6:	6013      	str	r3, [r2, #0]
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ccc:	4613      	mov	r3, r2
 8007cce:	009b      	lsls	r3, r3, #2
 8007cd0:	4413      	add	r3, r2
 8007cd2:	009b      	lsls	r3, r3, #2
 8007cd4:	4a15      	ldr	r2, [pc, #84]	; (8007d2c <prvAddNewTaskToReadyList+0xd8>)
 8007cd6:	441a      	add	r2, r3
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	3304      	adds	r3, #4
 8007cdc:	4619      	mov	r1, r3
 8007cde:	4610      	mov	r0, r2
 8007ce0:	f7fe fec3 	bl	8006a6a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007ce4:	f7ff f8a6 	bl	8006e34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007ce8:	4b0d      	ldr	r3, [pc, #52]	; (8007d20 <prvAddNewTaskToReadyList+0xcc>)
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d00e      	beq.n	8007d0e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007cf0:	4b0a      	ldr	r3, [pc, #40]	; (8007d1c <prvAddNewTaskToReadyList+0xc8>)
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cfa:	429a      	cmp	r2, r3
 8007cfc:	d207      	bcs.n	8007d0e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007cfe:	4b0c      	ldr	r3, [pc, #48]	; (8007d30 <prvAddNewTaskToReadyList+0xdc>)
 8007d00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d04:	601a      	str	r2, [r3, #0]
 8007d06:	f3bf 8f4f 	dsb	sy
 8007d0a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007d0e:	bf00      	nop
 8007d10:	3708      	adds	r7, #8
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}
 8007d16:	bf00      	nop
 8007d18:	20004ab0 	.word	0x20004ab0
 8007d1c:	200045dc 	.word	0x200045dc
 8007d20:	20004abc 	.word	0x20004abc
 8007d24:	20004acc 	.word	0x20004acc
 8007d28:	20004ab8 	.word	0x20004ab8
 8007d2c:	200045e0 	.word	0x200045e0
 8007d30:	e000ed04 	.word	0xe000ed04

08007d34 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b08a      	sub	sp, #40	; 0x28
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
 8007d3c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8007d3e:	2300      	movs	r3, #0
 8007d40:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d10a      	bne.n	8007d5e <vTaskDelayUntil+0x2a>
	__asm volatile
 8007d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d4c:	f383 8811 	msr	BASEPRI, r3
 8007d50:	f3bf 8f6f 	isb	sy
 8007d54:	f3bf 8f4f 	dsb	sy
 8007d58:	617b      	str	r3, [r7, #20]
}
 8007d5a:	bf00      	nop
 8007d5c:	e7fe      	b.n	8007d5c <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d10a      	bne.n	8007d7a <vTaskDelayUntil+0x46>
	__asm volatile
 8007d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d68:	f383 8811 	msr	BASEPRI, r3
 8007d6c:	f3bf 8f6f 	isb	sy
 8007d70:	f3bf 8f4f 	dsb	sy
 8007d74:	613b      	str	r3, [r7, #16]
}
 8007d76:	bf00      	nop
 8007d78:	e7fe      	b.n	8007d78 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8007d7a:	4b2a      	ldr	r3, [pc, #168]	; (8007e24 <vTaskDelayUntil+0xf0>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d00a      	beq.n	8007d98 <vTaskDelayUntil+0x64>
	__asm volatile
 8007d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d86:	f383 8811 	msr	BASEPRI, r3
 8007d8a:	f3bf 8f6f 	isb	sy
 8007d8e:	f3bf 8f4f 	dsb	sy
 8007d92:	60fb      	str	r3, [r7, #12]
}
 8007d94:	bf00      	nop
 8007d96:	e7fe      	b.n	8007d96 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8007d98:	f000 f8e4 	bl	8007f64 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8007d9c:	4b22      	ldr	r3, [pc, #136]	; (8007e28 <vTaskDelayUntil+0xf4>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	683a      	ldr	r2, [r7, #0]
 8007da8:	4413      	add	r3, r2
 8007daa:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	6a3a      	ldr	r2, [r7, #32]
 8007db2:	429a      	cmp	r2, r3
 8007db4:	d20b      	bcs.n	8007dce <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	69fa      	ldr	r2, [r7, #28]
 8007dbc:	429a      	cmp	r2, r3
 8007dbe:	d211      	bcs.n	8007de4 <vTaskDelayUntil+0xb0>
 8007dc0:	69fa      	ldr	r2, [r7, #28]
 8007dc2:	6a3b      	ldr	r3, [r7, #32]
 8007dc4:	429a      	cmp	r2, r3
 8007dc6:	d90d      	bls.n	8007de4 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8007dc8:	2301      	movs	r3, #1
 8007dca:	627b      	str	r3, [r7, #36]	; 0x24
 8007dcc:	e00a      	b.n	8007de4 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	69fa      	ldr	r2, [r7, #28]
 8007dd4:	429a      	cmp	r2, r3
 8007dd6:	d303      	bcc.n	8007de0 <vTaskDelayUntil+0xac>
 8007dd8:	69fa      	ldr	r2, [r7, #28]
 8007dda:	6a3b      	ldr	r3, [r7, #32]
 8007ddc:	429a      	cmp	r2, r3
 8007dde:	d901      	bls.n	8007de4 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8007de0:	2301      	movs	r3, #1
 8007de2:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	69fa      	ldr	r2, [r7, #28]
 8007de8:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8007dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d006      	beq.n	8007dfe <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8007df0:	69fa      	ldr	r2, [r7, #28]
 8007df2:	6a3b      	ldr	r3, [r7, #32]
 8007df4:	1ad3      	subs	r3, r2, r3
 8007df6:	2100      	movs	r1, #0
 8007df8:	4618      	mov	r0, r3
 8007dfa:	f000 fd21 	bl	8008840 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8007dfe:	f000 f8bf 	bl	8007f80 <xTaskResumeAll>
 8007e02:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007e04:	69bb      	ldr	r3, [r7, #24]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d107      	bne.n	8007e1a <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8007e0a:	4b08      	ldr	r3, [pc, #32]	; (8007e2c <vTaskDelayUntil+0xf8>)
 8007e0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e10:	601a      	str	r2, [r3, #0]
 8007e12:	f3bf 8f4f 	dsb	sy
 8007e16:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007e1a:	bf00      	nop
 8007e1c:	3728      	adds	r7, #40	; 0x28
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}
 8007e22:	bf00      	nop
 8007e24:	20004ad8 	.word	0x20004ad8
 8007e28:	20004ab4 	.word	0x20004ab4
 8007e2c:	e000ed04 	.word	0xe000ed04

08007e30 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b084      	sub	sp, #16
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007e38:	2300      	movs	r3, #0
 8007e3a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d017      	beq.n	8007e72 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007e42:	4b13      	ldr	r3, [pc, #76]	; (8007e90 <vTaskDelay+0x60>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d00a      	beq.n	8007e60 <vTaskDelay+0x30>
	__asm volatile
 8007e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e4e:	f383 8811 	msr	BASEPRI, r3
 8007e52:	f3bf 8f6f 	isb	sy
 8007e56:	f3bf 8f4f 	dsb	sy
 8007e5a:	60bb      	str	r3, [r7, #8]
}
 8007e5c:	bf00      	nop
 8007e5e:	e7fe      	b.n	8007e5e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007e60:	f000 f880 	bl	8007f64 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007e64:	2100      	movs	r1, #0
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f000 fcea 	bl	8008840 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007e6c:	f000 f888 	bl	8007f80 <xTaskResumeAll>
 8007e70:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d107      	bne.n	8007e88 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007e78:	4b06      	ldr	r3, [pc, #24]	; (8007e94 <vTaskDelay+0x64>)
 8007e7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e7e:	601a      	str	r2, [r3, #0]
 8007e80:	f3bf 8f4f 	dsb	sy
 8007e84:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007e88:	bf00      	nop
 8007e8a:	3710      	adds	r7, #16
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}
 8007e90:	20004ad8 	.word	0x20004ad8
 8007e94:	e000ed04 	.word	0xe000ed04

08007e98 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b08a      	sub	sp, #40	; 0x28
 8007e9c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007ea6:	463a      	mov	r2, r7
 8007ea8:	1d39      	adds	r1, r7, #4
 8007eaa:	f107 0308 	add.w	r3, r7, #8
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f7fe fb90 	bl	80065d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007eb4:	6839      	ldr	r1, [r7, #0]
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	68ba      	ldr	r2, [r7, #8]
 8007eba:	9202      	str	r2, [sp, #8]
 8007ebc:	9301      	str	r3, [sp, #4]
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	9300      	str	r3, [sp, #0]
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	460a      	mov	r2, r1
 8007ec6:	4921      	ldr	r1, [pc, #132]	; (8007f4c <vTaskStartScheduler+0xb4>)
 8007ec8:	4821      	ldr	r0, [pc, #132]	; (8007f50 <vTaskStartScheduler+0xb8>)
 8007eca:	f7ff fd91 	bl	80079f0 <xTaskCreateStatic>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	4a20      	ldr	r2, [pc, #128]	; (8007f54 <vTaskStartScheduler+0xbc>)
 8007ed2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007ed4:	4b1f      	ldr	r3, [pc, #124]	; (8007f54 <vTaskStartScheduler+0xbc>)
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d002      	beq.n	8007ee2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007edc:	2301      	movs	r3, #1
 8007ede:	617b      	str	r3, [r7, #20]
 8007ee0:	e001      	b.n	8007ee6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007ee6:	697b      	ldr	r3, [r7, #20]
 8007ee8:	2b01      	cmp	r3, #1
 8007eea:	d102      	bne.n	8007ef2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007eec:	f000 fcfc 	bl	80088e8 <xTimerCreateTimerTask>
 8007ef0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007ef2:	697b      	ldr	r3, [r7, #20]
 8007ef4:	2b01      	cmp	r3, #1
 8007ef6:	d116      	bne.n	8007f26 <vTaskStartScheduler+0x8e>
	__asm volatile
 8007ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007efc:	f383 8811 	msr	BASEPRI, r3
 8007f00:	f3bf 8f6f 	isb	sy
 8007f04:	f3bf 8f4f 	dsb	sy
 8007f08:	613b      	str	r3, [r7, #16]
}
 8007f0a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007f0c:	4b12      	ldr	r3, [pc, #72]	; (8007f58 <vTaskStartScheduler+0xc0>)
 8007f0e:	f04f 32ff 	mov.w	r2, #4294967295
 8007f12:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007f14:	4b11      	ldr	r3, [pc, #68]	; (8007f5c <vTaskStartScheduler+0xc4>)
 8007f16:	2201      	movs	r2, #1
 8007f18:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007f1a:	4b11      	ldr	r3, [pc, #68]	; (8007f60 <vTaskStartScheduler+0xc8>)
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007f20:	f7fe feb6 	bl	8006c90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007f24:	e00e      	b.n	8007f44 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007f26:	697b      	ldr	r3, [r7, #20]
 8007f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f2c:	d10a      	bne.n	8007f44 <vTaskStartScheduler+0xac>
	__asm volatile
 8007f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f32:	f383 8811 	msr	BASEPRI, r3
 8007f36:	f3bf 8f6f 	isb	sy
 8007f3a:	f3bf 8f4f 	dsb	sy
 8007f3e:	60fb      	str	r3, [r7, #12]
}
 8007f40:	bf00      	nop
 8007f42:	e7fe      	b.n	8007f42 <vTaskStartScheduler+0xaa>
}
 8007f44:	bf00      	nop
 8007f46:	3718      	adds	r7, #24
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bd80      	pop	{r7, pc}
 8007f4c:	08009f14 	.word	0x08009f14
 8007f50:	0800857d 	.word	0x0800857d
 8007f54:	20004ad4 	.word	0x20004ad4
 8007f58:	20004ad0 	.word	0x20004ad0
 8007f5c:	20004abc 	.word	0x20004abc
 8007f60:	20004ab4 	.word	0x20004ab4

08007f64 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007f64:	b480      	push	{r7}
 8007f66:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007f68:	4b04      	ldr	r3, [pc, #16]	; (8007f7c <vTaskSuspendAll+0x18>)
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	3301      	adds	r3, #1
 8007f6e:	4a03      	ldr	r2, [pc, #12]	; (8007f7c <vTaskSuspendAll+0x18>)
 8007f70:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007f72:	bf00      	nop
 8007f74:	46bd      	mov	sp, r7
 8007f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7a:	4770      	bx	lr
 8007f7c:	20004ad8 	.word	0x20004ad8

08007f80 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b084      	sub	sp, #16
 8007f84:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007f86:	2300      	movs	r3, #0
 8007f88:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007f8e:	4b42      	ldr	r3, [pc, #264]	; (8008098 <xTaskResumeAll+0x118>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d10a      	bne.n	8007fac <xTaskResumeAll+0x2c>
	__asm volatile
 8007f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f9a:	f383 8811 	msr	BASEPRI, r3
 8007f9e:	f3bf 8f6f 	isb	sy
 8007fa2:	f3bf 8f4f 	dsb	sy
 8007fa6:	603b      	str	r3, [r7, #0]
}
 8007fa8:	bf00      	nop
 8007faa:	e7fe      	b.n	8007faa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007fac:	f7fe ff12 	bl	8006dd4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007fb0:	4b39      	ldr	r3, [pc, #228]	; (8008098 <xTaskResumeAll+0x118>)
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	3b01      	subs	r3, #1
 8007fb6:	4a38      	ldr	r2, [pc, #224]	; (8008098 <xTaskResumeAll+0x118>)
 8007fb8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007fba:	4b37      	ldr	r3, [pc, #220]	; (8008098 <xTaskResumeAll+0x118>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d162      	bne.n	8008088 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007fc2:	4b36      	ldr	r3, [pc, #216]	; (800809c <xTaskResumeAll+0x11c>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d05e      	beq.n	8008088 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007fca:	e02f      	b.n	800802c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fcc:	4b34      	ldr	r3, [pc, #208]	; (80080a0 <xTaskResumeAll+0x120>)
 8007fce:	68db      	ldr	r3, [r3, #12]
 8007fd0:	68db      	ldr	r3, [r3, #12]
 8007fd2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	3318      	adds	r3, #24
 8007fd8:	4618      	mov	r0, r3
 8007fda:	f7fe fda3 	bl	8006b24 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	3304      	adds	r3, #4
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	f7fe fd9e 	bl	8006b24 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fec:	4b2d      	ldr	r3, [pc, #180]	; (80080a4 <xTaskResumeAll+0x124>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	429a      	cmp	r2, r3
 8007ff2:	d903      	bls.n	8007ffc <xTaskResumeAll+0x7c>
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ff8:	4a2a      	ldr	r2, [pc, #168]	; (80080a4 <xTaskResumeAll+0x124>)
 8007ffa:	6013      	str	r3, [r2, #0]
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008000:	4613      	mov	r3, r2
 8008002:	009b      	lsls	r3, r3, #2
 8008004:	4413      	add	r3, r2
 8008006:	009b      	lsls	r3, r3, #2
 8008008:	4a27      	ldr	r2, [pc, #156]	; (80080a8 <xTaskResumeAll+0x128>)
 800800a:	441a      	add	r2, r3
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	3304      	adds	r3, #4
 8008010:	4619      	mov	r1, r3
 8008012:	4610      	mov	r0, r2
 8008014:	f7fe fd29 	bl	8006a6a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800801c:	4b23      	ldr	r3, [pc, #140]	; (80080ac <xTaskResumeAll+0x12c>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008022:	429a      	cmp	r2, r3
 8008024:	d302      	bcc.n	800802c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008026:	4b22      	ldr	r3, [pc, #136]	; (80080b0 <xTaskResumeAll+0x130>)
 8008028:	2201      	movs	r2, #1
 800802a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800802c:	4b1c      	ldr	r3, [pc, #112]	; (80080a0 <xTaskResumeAll+0x120>)
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d1cb      	bne.n	8007fcc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d001      	beq.n	800803e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800803a:	f000 fb55 	bl	80086e8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800803e:	4b1d      	ldr	r3, [pc, #116]	; (80080b4 <xTaskResumeAll+0x134>)
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d010      	beq.n	800806c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800804a:	f000 f847 	bl	80080dc <xTaskIncrementTick>
 800804e:	4603      	mov	r3, r0
 8008050:	2b00      	cmp	r3, #0
 8008052:	d002      	beq.n	800805a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008054:	4b16      	ldr	r3, [pc, #88]	; (80080b0 <xTaskResumeAll+0x130>)
 8008056:	2201      	movs	r2, #1
 8008058:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	3b01      	subs	r3, #1
 800805e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d1f1      	bne.n	800804a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008066:	4b13      	ldr	r3, [pc, #76]	; (80080b4 <xTaskResumeAll+0x134>)
 8008068:	2200      	movs	r2, #0
 800806a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800806c:	4b10      	ldr	r3, [pc, #64]	; (80080b0 <xTaskResumeAll+0x130>)
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d009      	beq.n	8008088 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008074:	2301      	movs	r3, #1
 8008076:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008078:	4b0f      	ldr	r3, [pc, #60]	; (80080b8 <xTaskResumeAll+0x138>)
 800807a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800807e:	601a      	str	r2, [r3, #0]
 8008080:	f3bf 8f4f 	dsb	sy
 8008084:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008088:	f7fe fed4 	bl	8006e34 <vPortExitCritical>

	return xAlreadyYielded;
 800808c:	68bb      	ldr	r3, [r7, #8]
}
 800808e:	4618      	mov	r0, r3
 8008090:	3710      	adds	r7, #16
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}
 8008096:	bf00      	nop
 8008098:	20004ad8 	.word	0x20004ad8
 800809c:	20004ab0 	.word	0x20004ab0
 80080a0:	20004a70 	.word	0x20004a70
 80080a4:	20004ab8 	.word	0x20004ab8
 80080a8:	200045e0 	.word	0x200045e0
 80080ac:	200045dc 	.word	0x200045dc
 80080b0:	20004ac4 	.word	0x20004ac4
 80080b4:	20004ac0 	.word	0x20004ac0
 80080b8:	e000ed04 	.word	0xe000ed04

080080bc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80080bc:	b480      	push	{r7}
 80080be:	b083      	sub	sp, #12
 80080c0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80080c2:	4b05      	ldr	r3, [pc, #20]	; (80080d8 <xTaskGetTickCount+0x1c>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80080c8:	687b      	ldr	r3, [r7, #4]
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	370c      	adds	r7, #12
 80080ce:	46bd      	mov	sp, r7
 80080d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d4:	4770      	bx	lr
 80080d6:	bf00      	nop
 80080d8:	20004ab4 	.word	0x20004ab4

080080dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b086      	sub	sp, #24
 80080e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80080e2:	2300      	movs	r3, #0
 80080e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80080e6:	4b4f      	ldr	r3, [pc, #316]	; (8008224 <xTaskIncrementTick+0x148>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	f040 808f 	bne.w	800820e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80080f0:	4b4d      	ldr	r3, [pc, #308]	; (8008228 <xTaskIncrementTick+0x14c>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	3301      	adds	r3, #1
 80080f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80080f8:	4a4b      	ldr	r2, [pc, #300]	; (8008228 <xTaskIncrementTick+0x14c>)
 80080fa:	693b      	ldr	r3, [r7, #16]
 80080fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80080fe:	693b      	ldr	r3, [r7, #16]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d120      	bne.n	8008146 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008104:	4b49      	ldr	r3, [pc, #292]	; (800822c <xTaskIncrementTick+0x150>)
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d00a      	beq.n	8008124 <xTaskIncrementTick+0x48>
	__asm volatile
 800810e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008112:	f383 8811 	msr	BASEPRI, r3
 8008116:	f3bf 8f6f 	isb	sy
 800811a:	f3bf 8f4f 	dsb	sy
 800811e:	603b      	str	r3, [r7, #0]
}
 8008120:	bf00      	nop
 8008122:	e7fe      	b.n	8008122 <xTaskIncrementTick+0x46>
 8008124:	4b41      	ldr	r3, [pc, #260]	; (800822c <xTaskIncrementTick+0x150>)
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	60fb      	str	r3, [r7, #12]
 800812a:	4b41      	ldr	r3, [pc, #260]	; (8008230 <xTaskIncrementTick+0x154>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	4a3f      	ldr	r2, [pc, #252]	; (800822c <xTaskIncrementTick+0x150>)
 8008130:	6013      	str	r3, [r2, #0]
 8008132:	4a3f      	ldr	r2, [pc, #252]	; (8008230 <xTaskIncrementTick+0x154>)
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	6013      	str	r3, [r2, #0]
 8008138:	4b3e      	ldr	r3, [pc, #248]	; (8008234 <xTaskIncrementTick+0x158>)
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	3301      	adds	r3, #1
 800813e:	4a3d      	ldr	r2, [pc, #244]	; (8008234 <xTaskIncrementTick+0x158>)
 8008140:	6013      	str	r3, [r2, #0]
 8008142:	f000 fad1 	bl	80086e8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008146:	4b3c      	ldr	r3, [pc, #240]	; (8008238 <xTaskIncrementTick+0x15c>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	693a      	ldr	r2, [r7, #16]
 800814c:	429a      	cmp	r2, r3
 800814e:	d349      	bcc.n	80081e4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008150:	4b36      	ldr	r3, [pc, #216]	; (800822c <xTaskIncrementTick+0x150>)
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d104      	bne.n	8008164 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800815a:	4b37      	ldr	r3, [pc, #220]	; (8008238 <xTaskIncrementTick+0x15c>)
 800815c:	f04f 32ff 	mov.w	r2, #4294967295
 8008160:	601a      	str	r2, [r3, #0]
					break;
 8008162:	e03f      	b.n	80081e4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008164:	4b31      	ldr	r3, [pc, #196]	; (800822c <xTaskIncrementTick+0x150>)
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	68db      	ldr	r3, [r3, #12]
 800816a:	68db      	ldr	r3, [r3, #12]
 800816c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800816e:	68bb      	ldr	r3, [r7, #8]
 8008170:	685b      	ldr	r3, [r3, #4]
 8008172:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008174:	693a      	ldr	r2, [r7, #16]
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	429a      	cmp	r2, r3
 800817a:	d203      	bcs.n	8008184 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800817c:	4a2e      	ldr	r2, [pc, #184]	; (8008238 <xTaskIncrementTick+0x15c>)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008182:	e02f      	b.n	80081e4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	3304      	adds	r3, #4
 8008188:	4618      	mov	r0, r3
 800818a:	f7fe fccb 	bl	8006b24 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008192:	2b00      	cmp	r3, #0
 8008194:	d004      	beq.n	80081a0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	3318      	adds	r3, #24
 800819a:	4618      	mov	r0, r3
 800819c:	f7fe fcc2 	bl	8006b24 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081a4:	4b25      	ldr	r3, [pc, #148]	; (800823c <xTaskIncrementTick+0x160>)
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	429a      	cmp	r2, r3
 80081aa:	d903      	bls.n	80081b4 <xTaskIncrementTick+0xd8>
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081b0:	4a22      	ldr	r2, [pc, #136]	; (800823c <xTaskIncrementTick+0x160>)
 80081b2:	6013      	str	r3, [r2, #0]
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081b8:	4613      	mov	r3, r2
 80081ba:	009b      	lsls	r3, r3, #2
 80081bc:	4413      	add	r3, r2
 80081be:	009b      	lsls	r3, r3, #2
 80081c0:	4a1f      	ldr	r2, [pc, #124]	; (8008240 <xTaskIncrementTick+0x164>)
 80081c2:	441a      	add	r2, r3
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	3304      	adds	r3, #4
 80081c8:	4619      	mov	r1, r3
 80081ca:	4610      	mov	r0, r2
 80081cc:	f7fe fc4d 	bl	8006a6a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081d4:	4b1b      	ldr	r3, [pc, #108]	; (8008244 <xTaskIncrementTick+0x168>)
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081da:	429a      	cmp	r2, r3
 80081dc:	d3b8      	bcc.n	8008150 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80081de:	2301      	movs	r3, #1
 80081e0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80081e2:	e7b5      	b.n	8008150 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80081e4:	4b17      	ldr	r3, [pc, #92]	; (8008244 <xTaskIncrementTick+0x168>)
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081ea:	4915      	ldr	r1, [pc, #84]	; (8008240 <xTaskIncrementTick+0x164>)
 80081ec:	4613      	mov	r3, r2
 80081ee:	009b      	lsls	r3, r3, #2
 80081f0:	4413      	add	r3, r2
 80081f2:	009b      	lsls	r3, r3, #2
 80081f4:	440b      	add	r3, r1
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	2b01      	cmp	r3, #1
 80081fa:	d901      	bls.n	8008200 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80081fc:	2301      	movs	r3, #1
 80081fe:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008200:	4b11      	ldr	r3, [pc, #68]	; (8008248 <xTaskIncrementTick+0x16c>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d007      	beq.n	8008218 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008208:	2301      	movs	r3, #1
 800820a:	617b      	str	r3, [r7, #20]
 800820c:	e004      	b.n	8008218 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800820e:	4b0f      	ldr	r3, [pc, #60]	; (800824c <xTaskIncrementTick+0x170>)
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	3301      	adds	r3, #1
 8008214:	4a0d      	ldr	r2, [pc, #52]	; (800824c <xTaskIncrementTick+0x170>)
 8008216:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008218:	697b      	ldr	r3, [r7, #20]
}
 800821a:	4618      	mov	r0, r3
 800821c:	3718      	adds	r7, #24
 800821e:	46bd      	mov	sp, r7
 8008220:	bd80      	pop	{r7, pc}
 8008222:	bf00      	nop
 8008224:	20004ad8 	.word	0x20004ad8
 8008228:	20004ab4 	.word	0x20004ab4
 800822c:	20004a68 	.word	0x20004a68
 8008230:	20004a6c 	.word	0x20004a6c
 8008234:	20004ac8 	.word	0x20004ac8
 8008238:	20004ad0 	.word	0x20004ad0
 800823c:	20004ab8 	.word	0x20004ab8
 8008240:	200045e0 	.word	0x200045e0
 8008244:	200045dc 	.word	0x200045dc
 8008248:	20004ac4 	.word	0x20004ac4
 800824c:	20004ac0 	.word	0x20004ac0

08008250 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008250:	b480      	push	{r7}
 8008252:	b085      	sub	sp, #20
 8008254:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008256:	4b28      	ldr	r3, [pc, #160]	; (80082f8 <vTaskSwitchContext+0xa8>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d003      	beq.n	8008266 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800825e:	4b27      	ldr	r3, [pc, #156]	; (80082fc <vTaskSwitchContext+0xac>)
 8008260:	2201      	movs	r2, #1
 8008262:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008264:	e041      	b.n	80082ea <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8008266:	4b25      	ldr	r3, [pc, #148]	; (80082fc <vTaskSwitchContext+0xac>)
 8008268:	2200      	movs	r2, #0
 800826a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800826c:	4b24      	ldr	r3, [pc, #144]	; (8008300 <vTaskSwitchContext+0xb0>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	60fb      	str	r3, [r7, #12]
 8008272:	e010      	b.n	8008296 <vTaskSwitchContext+0x46>
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d10a      	bne.n	8008290 <vTaskSwitchContext+0x40>
	__asm volatile
 800827a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800827e:	f383 8811 	msr	BASEPRI, r3
 8008282:	f3bf 8f6f 	isb	sy
 8008286:	f3bf 8f4f 	dsb	sy
 800828a:	607b      	str	r3, [r7, #4]
}
 800828c:	bf00      	nop
 800828e:	e7fe      	b.n	800828e <vTaskSwitchContext+0x3e>
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	3b01      	subs	r3, #1
 8008294:	60fb      	str	r3, [r7, #12]
 8008296:	491b      	ldr	r1, [pc, #108]	; (8008304 <vTaskSwitchContext+0xb4>)
 8008298:	68fa      	ldr	r2, [r7, #12]
 800829a:	4613      	mov	r3, r2
 800829c:	009b      	lsls	r3, r3, #2
 800829e:	4413      	add	r3, r2
 80082a0:	009b      	lsls	r3, r3, #2
 80082a2:	440b      	add	r3, r1
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d0e4      	beq.n	8008274 <vTaskSwitchContext+0x24>
 80082aa:	68fa      	ldr	r2, [r7, #12]
 80082ac:	4613      	mov	r3, r2
 80082ae:	009b      	lsls	r3, r3, #2
 80082b0:	4413      	add	r3, r2
 80082b2:	009b      	lsls	r3, r3, #2
 80082b4:	4a13      	ldr	r2, [pc, #76]	; (8008304 <vTaskSwitchContext+0xb4>)
 80082b6:	4413      	add	r3, r2
 80082b8:	60bb      	str	r3, [r7, #8]
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	685b      	ldr	r3, [r3, #4]
 80082be:	685a      	ldr	r2, [r3, #4]
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	605a      	str	r2, [r3, #4]
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	685a      	ldr	r2, [r3, #4]
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	3308      	adds	r3, #8
 80082cc:	429a      	cmp	r2, r3
 80082ce:	d104      	bne.n	80082da <vTaskSwitchContext+0x8a>
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	685b      	ldr	r3, [r3, #4]
 80082d4:	685a      	ldr	r2, [r3, #4]
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	605a      	str	r2, [r3, #4]
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	685b      	ldr	r3, [r3, #4]
 80082de:	68db      	ldr	r3, [r3, #12]
 80082e0:	4a09      	ldr	r2, [pc, #36]	; (8008308 <vTaskSwitchContext+0xb8>)
 80082e2:	6013      	str	r3, [r2, #0]
 80082e4:	4a06      	ldr	r2, [pc, #24]	; (8008300 <vTaskSwitchContext+0xb0>)
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	6013      	str	r3, [r2, #0]
}
 80082ea:	bf00      	nop
 80082ec:	3714      	adds	r7, #20
 80082ee:	46bd      	mov	sp, r7
 80082f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f4:	4770      	bx	lr
 80082f6:	bf00      	nop
 80082f8:	20004ad8 	.word	0x20004ad8
 80082fc:	20004ac4 	.word	0x20004ac4
 8008300:	20004ab8 	.word	0x20004ab8
 8008304:	200045e0 	.word	0x200045e0
 8008308:	200045dc 	.word	0x200045dc

0800830c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b084      	sub	sp, #16
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
 8008314:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d10a      	bne.n	8008332 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800831c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008320:	f383 8811 	msr	BASEPRI, r3
 8008324:	f3bf 8f6f 	isb	sy
 8008328:	f3bf 8f4f 	dsb	sy
 800832c:	60fb      	str	r3, [r7, #12]
}
 800832e:	bf00      	nop
 8008330:	e7fe      	b.n	8008330 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008332:	4b07      	ldr	r3, [pc, #28]	; (8008350 <vTaskPlaceOnEventList+0x44>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	3318      	adds	r3, #24
 8008338:	4619      	mov	r1, r3
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f7fe fbb9 	bl	8006ab2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008340:	2101      	movs	r1, #1
 8008342:	6838      	ldr	r0, [r7, #0]
 8008344:	f000 fa7c 	bl	8008840 <prvAddCurrentTaskToDelayedList>
}
 8008348:	bf00      	nop
 800834a:	3710      	adds	r7, #16
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}
 8008350:	200045dc 	.word	0x200045dc

08008354 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008354:	b580      	push	{r7, lr}
 8008356:	b086      	sub	sp, #24
 8008358:	af00      	add	r7, sp, #0
 800835a:	60f8      	str	r0, [r7, #12]
 800835c:	60b9      	str	r1, [r7, #8]
 800835e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d10a      	bne.n	800837c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800836a:	f383 8811 	msr	BASEPRI, r3
 800836e:	f3bf 8f6f 	isb	sy
 8008372:	f3bf 8f4f 	dsb	sy
 8008376:	617b      	str	r3, [r7, #20]
}
 8008378:	bf00      	nop
 800837a:	e7fe      	b.n	800837a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800837c:	4b0a      	ldr	r3, [pc, #40]	; (80083a8 <vTaskPlaceOnEventListRestricted+0x54>)
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	3318      	adds	r3, #24
 8008382:	4619      	mov	r1, r3
 8008384:	68f8      	ldr	r0, [r7, #12]
 8008386:	f7fe fb70 	bl	8006a6a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d002      	beq.n	8008396 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008390:	f04f 33ff 	mov.w	r3, #4294967295
 8008394:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008396:	6879      	ldr	r1, [r7, #4]
 8008398:	68b8      	ldr	r0, [r7, #8]
 800839a:	f000 fa51 	bl	8008840 <prvAddCurrentTaskToDelayedList>
	}
 800839e:	bf00      	nop
 80083a0:	3718      	adds	r7, #24
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}
 80083a6:	bf00      	nop
 80083a8:	200045dc 	.word	0x200045dc

080083ac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b086      	sub	sp, #24
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	68db      	ldr	r3, [r3, #12]
 80083b8:	68db      	ldr	r3, [r3, #12]
 80083ba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80083bc:	693b      	ldr	r3, [r7, #16]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d10a      	bne.n	80083d8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80083c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083c6:	f383 8811 	msr	BASEPRI, r3
 80083ca:	f3bf 8f6f 	isb	sy
 80083ce:	f3bf 8f4f 	dsb	sy
 80083d2:	60fb      	str	r3, [r7, #12]
}
 80083d4:	bf00      	nop
 80083d6:	e7fe      	b.n	80083d6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80083d8:	693b      	ldr	r3, [r7, #16]
 80083da:	3318      	adds	r3, #24
 80083dc:	4618      	mov	r0, r3
 80083de:	f7fe fba1 	bl	8006b24 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80083e2:	4b1e      	ldr	r3, [pc, #120]	; (800845c <xTaskRemoveFromEventList+0xb0>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d11d      	bne.n	8008426 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80083ea:	693b      	ldr	r3, [r7, #16]
 80083ec:	3304      	adds	r3, #4
 80083ee:	4618      	mov	r0, r3
 80083f0:	f7fe fb98 	bl	8006b24 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80083f4:	693b      	ldr	r3, [r7, #16]
 80083f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083f8:	4b19      	ldr	r3, [pc, #100]	; (8008460 <xTaskRemoveFromEventList+0xb4>)
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	429a      	cmp	r2, r3
 80083fe:	d903      	bls.n	8008408 <xTaskRemoveFromEventList+0x5c>
 8008400:	693b      	ldr	r3, [r7, #16]
 8008402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008404:	4a16      	ldr	r2, [pc, #88]	; (8008460 <xTaskRemoveFromEventList+0xb4>)
 8008406:	6013      	str	r3, [r2, #0]
 8008408:	693b      	ldr	r3, [r7, #16]
 800840a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800840c:	4613      	mov	r3, r2
 800840e:	009b      	lsls	r3, r3, #2
 8008410:	4413      	add	r3, r2
 8008412:	009b      	lsls	r3, r3, #2
 8008414:	4a13      	ldr	r2, [pc, #76]	; (8008464 <xTaskRemoveFromEventList+0xb8>)
 8008416:	441a      	add	r2, r3
 8008418:	693b      	ldr	r3, [r7, #16]
 800841a:	3304      	adds	r3, #4
 800841c:	4619      	mov	r1, r3
 800841e:	4610      	mov	r0, r2
 8008420:	f7fe fb23 	bl	8006a6a <vListInsertEnd>
 8008424:	e005      	b.n	8008432 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008426:	693b      	ldr	r3, [r7, #16]
 8008428:	3318      	adds	r3, #24
 800842a:	4619      	mov	r1, r3
 800842c:	480e      	ldr	r0, [pc, #56]	; (8008468 <xTaskRemoveFromEventList+0xbc>)
 800842e:	f7fe fb1c 	bl	8006a6a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008432:	693b      	ldr	r3, [r7, #16]
 8008434:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008436:	4b0d      	ldr	r3, [pc, #52]	; (800846c <xTaskRemoveFromEventList+0xc0>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800843c:	429a      	cmp	r2, r3
 800843e:	d905      	bls.n	800844c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008440:	2301      	movs	r3, #1
 8008442:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008444:	4b0a      	ldr	r3, [pc, #40]	; (8008470 <xTaskRemoveFromEventList+0xc4>)
 8008446:	2201      	movs	r2, #1
 8008448:	601a      	str	r2, [r3, #0]
 800844a:	e001      	b.n	8008450 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800844c:	2300      	movs	r3, #0
 800844e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008450:	697b      	ldr	r3, [r7, #20]
}
 8008452:	4618      	mov	r0, r3
 8008454:	3718      	adds	r7, #24
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}
 800845a:	bf00      	nop
 800845c:	20004ad8 	.word	0x20004ad8
 8008460:	20004ab8 	.word	0x20004ab8
 8008464:	200045e0 	.word	0x200045e0
 8008468:	20004a70 	.word	0x20004a70
 800846c:	200045dc 	.word	0x200045dc
 8008470:	20004ac4 	.word	0x20004ac4

08008474 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008474:	b480      	push	{r7}
 8008476:	b083      	sub	sp, #12
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800847c:	4b06      	ldr	r3, [pc, #24]	; (8008498 <vTaskInternalSetTimeOutState+0x24>)
 800847e:	681a      	ldr	r2, [r3, #0]
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008484:	4b05      	ldr	r3, [pc, #20]	; (800849c <vTaskInternalSetTimeOutState+0x28>)
 8008486:	681a      	ldr	r2, [r3, #0]
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	605a      	str	r2, [r3, #4]
}
 800848c:	bf00      	nop
 800848e:	370c      	adds	r7, #12
 8008490:	46bd      	mov	sp, r7
 8008492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008496:	4770      	bx	lr
 8008498:	20004ac8 	.word	0x20004ac8
 800849c:	20004ab4 	.word	0x20004ab4

080084a0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b088      	sub	sp, #32
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
 80084a8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d10a      	bne.n	80084c6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80084b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084b4:	f383 8811 	msr	BASEPRI, r3
 80084b8:	f3bf 8f6f 	isb	sy
 80084bc:	f3bf 8f4f 	dsb	sy
 80084c0:	613b      	str	r3, [r7, #16]
}
 80084c2:	bf00      	nop
 80084c4:	e7fe      	b.n	80084c4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d10a      	bne.n	80084e2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80084cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084d0:	f383 8811 	msr	BASEPRI, r3
 80084d4:	f3bf 8f6f 	isb	sy
 80084d8:	f3bf 8f4f 	dsb	sy
 80084dc:	60fb      	str	r3, [r7, #12]
}
 80084de:	bf00      	nop
 80084e0:	e7fe      	b.n	80084e0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80084e2:	f7fe fc77 	bl	8006dd4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80084e6:	4b1d      	ldr	r3, [pc, #116]	; (800855c <xTaskCheckForTimeOut+0xbc>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	685b      	ldr	r3, [r3, #4]
 80084f0:	69ba      	ldr	r2, [r7, #24]
 80084f2:	1ad3      	subs	r3, r2, r3
 80084f4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084fe:	d102      	bne.n	8008506 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008500:	2300      	movs	r3, #0
 8008502:	61fb      	str	r3, [r7, #28]
 8008504:	e023      	b.n	800854e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681a      	ldr	r2, [r3, #0]
 800850a:	4b15      	ldr	r3, [pc, #84]	; (8008560 <xTaskCheckForTimeOut+0xc0>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	429a      	cmp	r2, r3
 8008510:	d007      	beq.n	8008522 <xTaskCheckForTimeOut+0x82>
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	685b      	ldr	r3, [r3, #4]
 8008516:	69ba      	ldr	r2, [r7, #24]
 8008518:	429a      	cmp	r2, r3
 800851a:	d302      	bcc.n	8008522 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800851c:	2301      	movs	r3, #1
 800851e:	61fb      	str	r3, [r7, #28]
 8008520:	e015      	b.n	800854e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	697a      	ldr	r2, [r7, #20]
 8008528:	429a      	cmp	r2, r3
 800852a:	d20b      	bcs.n	8008544 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	681a      	ldr	r2, [r3, #0]
 8008530:	697b      	ldr	r3, [r7, #20]
 8008532:	1ad2      	subs	r2, r2, r3
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	f7ff ff9b 	bl	8008474 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800853e:	2300      	movs	r3, #0
 8008540:	61fb      	str	r3, [r7, #28]
 8008542:	e004      	b.n	800854e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	2200      	movs	r2, #0
 8008548:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800854a:	2301      	movs	r3, #1
 800854c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800854e:	f7fe fc71 	bl	8006e34 <vPortExitCritical>

	return xReturn;
 8008552:	69fb      	ldr	r3, [r7, #28]
}
 8008554:	4618      	mov	r0, r3
 8008556:	3720      	adds	r7, #32
 8008558:	46bd      	mov	sp, r7
 800855a:	bd80      	pop	{r7, pc}
 800855c:	20004ab4 	.word	0x20004ab4
 8008560:	20004ac8 	.word	0x20004ac8

08008564 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008564:	b480      	push	{r7}
 8008566:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008568:	4b03      	ldr	r3, [pc, #12]	; (8008578 <vTaskMissedYield+0x14>)
 800856a:	2201      	movs	r2, #1
 800856c:	601a      	str	r2, [r3, #0]
}
 800856e:	bf00      	nop
 8008570:	46bd      	mov	sp, r7
 8008572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008576:	4770      	bx	lr
 8008578:	20004ac4 	.word	0x20004ac4

0800857c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b082      	sub	sp, #8
 8008580:	af00      	add	r7, sp, #0
 8008582:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008584:	f000 f852 	bl	800862c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008588:	4b06      	ldr	r3, [pc, #24]	; (80085a4 <prvIdleTask+0x28>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	2b01      	cmp	r3, #1
 800858e:	d9f9      	bls.n	8008584 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008590:	4b05      	ldr	r3, [pc, #20]	; (80085a8 <prvIdleTask+0x2c>)
 8008592:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008596:	601a      	str	r2, [r3, #0]
 8008598:	f3bf 8f4f 	dsb	sy
 800859c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80085a0:	e7f0      	b.n	8008584 <prvIdleTask+0x8>
 80085a2:	bf00      	nop
 80085a4:	200045e0 	.word	0x200045e0
 80085a8:	e000ed04 	.word	0xe000ed04

080085ac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b082      	sub	sp, #8
 80085b0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80085b2:	2300      	movs	r3, #0
 80085b4:	607b      	str	r3, [r7, #4]
 80085b6:	e00c      	b.n	80085d2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80085b8:	687a      	ldr	r2, [r7, #4]
 80085ba:	4613      	mov	r3, r2
 80085bc:	009b      	lsls	r3, r3, #2
 80085be:	4413      	add	r3, r2
 80085c0:	009b      	lsls	r3, r3, #2
 80085c2:	4a12      	ldr	r2, [pc, #72]	; (800860c <prvInitialiseTaskLists+0x60>)
 80085c4:	4413      	add	r3, r2
 80085c6:	4618      	mov	r0, r3
 80085c8:	f7fe fa22 	bl	8006a10 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	3301      	adds	r3, #1
 80085d0:	607b      	str	r3, [r7, #4]
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2b37      	cmp	r3, #55	; 0x37
 80085d6:	d9ef      	bls.n	80085b8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80085d8:	480d      	ldr	r0, [pc, #52]	; (8008610 <prvInitialiseTaskLists+0x64>)
 80085da:	f7fe fa19 	bl	8006a10 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80085de:	480d      	ldr	r0, [pc, #52]	; (8008614 <prvInitialiseTaskLists+0x68>)
 80085e0:	f7fe fa16 	bl	8006a10 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80085e4:	480c      	ldr	r0, [pc, #48]	; (8008618 <prvInitialiseTaskLists+0x6c>)
 80085e6:	f7fe fa13 	bl	8006a10 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80085ea:	480c      	ldr	r0, [pc, #48]	; (800861c <prvInitialiseTaskLists+0x70>)
 80085ec:	f7fe fa10 	bl	8006a10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80085f0:	480b      	ldr	r0, [pc, #44]	; (8008620 <prvInitialiseTaskLists+0x74>)
 80085f2:	f7fe fa0d 	bl	8006a10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80085f6:	4b0b      	ldr	r3, [pc, #44]	; (8008624 <prvInitialiseTaskLists+0x78>)
 80085f8:	4a05      	ldr	r2, [pc, #20]	; (8008610 <prvInitialiseTaskLists+0x64>)
 80085fa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80085fc:	4b0a      	ldr	r3, [pc, #40]	; (8008628 <prvInitialiseTaskLists+0x7c>)
 80085fe:	4a05      	ldr	r2, [pc, #20]	; (8008614 <prvInitialiseTaskLists+0x68>)
 8008600:	601a      	str	r2, [r3, #0]
}
 8008602:	bf00      	nop
 8008604:	3708      	adds	r7, #8
 8008606:	46bd      	mov	sp, r7
 8008608:	bd80      	pop	{r7, pc}
 800860a:	bf00      	nop
 800860c:	200045e0 	.word	0x200045e0
 8008610:	20004a40 	.word	0x20004a40
 8008614:	20004a54 	.word	0x20004a54
 8008618:	20004a70 	.word	0x20004a70
 800861c:	20004a84 	.word	0x20004a84
 8008620:	20004a9c 	.word	0x20004a9c
 8008624:	20004a68 	.word	0x20004a68
 8008628:	20004a6c 	.word	0x20004a6c

0800862c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b082      	sub	sp, #8
 8008630:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008632:	e019      	b.n	8008668 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008634:	f7fe fbce 	bl	8006dd4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008638:	4b10      	ldr	r3, [pc, #64]	; (800867c <prvCheckTasksWaitingTermination+0x50>)
 800863a:	68db      	ldr	r3, [r3, #12]
 800863c:	68db      	ldr	r3, [r3, #12]
 800863e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	3304      	adds	r3, #4
 8008644:	4618      	mov	r0, r3
 8008646:	f7fe fa6d 	bl	8006b24 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800864a:	4b0d      	ldr	r3, [pc, #52]	; (8008680 <prvCheckTasksWaitingTermination+0x54>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	3b01      	subs	r3, #1
 8008650:	4a0b      	ldr	r2, [pc, #44]	; (8008680 <prvCheckTasksWaitingTermination+0x54>)
 8008652:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008654:	4b0b      	ldr	r3, [pc, #44]	; (8008684 <prvCheckTasksWaitingTermination+0x58>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	3b01      	subs	r3, #1
 800865a:	4a0a      	ldr	r2, [pc, #40]	; (8008684 <prvCheckTasksWaitingTermination+0x58>)
 800865c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800865e:	f7fe fbe9 	bl	8006e34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	f000 f810 	bl	8008688 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008668:	4b06      	ldr	r3, [pc, #24]	; (8008684 <prvCheckTasksWaitingTermination+0x58>)
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d1e1      	bne.n	8008634 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008670:	bf00      	nop
 8008672:	bf00      	nop
 8008674:	3708      	adds	r7, #8
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}
 800867a:	bf00      	nop
 800867c:	20004a84 	.word	0x20004a84
 8008680:	20004ab0 	.word	0x20004ab0
 8008684:	20004a98 	.word	0x20004a98

08008688 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008688:	b580      	push	{r7, lr}
 800868a:	b084      	sub	sp, #16
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008696:	2b00      	cmp	r3, #0
 8008698:	d108      	bne.n	80086ac <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800869e:	4618      	mov	r0, r3
 80086a0:	f7fe f898 	bl	80067d4 <vPortFree>
				vPortFree( pxTCB );
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	f7fe f895 	bl	80067d4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80086aa:	e018      	b.n	80086de <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80086b2:	2b01      	cmp	r3, #1
 80086b4:	d103      	bne.n	80086be <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f7fe f88c 	bl	80067d4 <vPortFree>
	}
 80086bc:	e00f      	b.n	80086de <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80086c4:	2b02      	cmp	r3, #2
 80086c6:	d00a      	beq.n	80086de <prvDeleteTCB+0x56>
	__asm volatile
 80086c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086cc:	f383 8811 	msr	BASEPRI, r3
 80086d0:	f3bf 8f6f 	isb	sy
 80086d4:	f3bf 8f4f 	dsb	sy
 80086d8:	60fb      	str	r3, [r7, #12]
}
 80086da:	bf00      	nop
 80086dc:	e7fe      	b.n	80086dc <prvDeleteTCB+0x54>
	}
 80086de:	bf00      	nop
 80086e0:	3710      	adds	r7, #16
 80086e2:	46bd      	mov	sp, r7
 80086e4:	bd80      	pop	{r7, pc}
	...

080086e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80086e8:	b480      	push	{r7}
 80086ea:	b083      	sub	sp, #12
 80086ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80086ee:	4b0c      	ldr	r3, [pc, #48]	; (8008720 <prvResetNextTaskUnblockTime+0x38>)
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d104      	bne.n	8008702 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80086f8:	4b0a      	ldr	r3, [pc, #40]	; (8008724 <prvResetNextTaskUnblockTime+0x3c>)
 80086fa:	f04f 32ff 	mov.w	r2, #4294967295
 80086fe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008700:	e008      	b.n	8008714 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008702:	4b07      	ldr	r3, [pc, #28]	; (8008720 <prvResetNextTaskUnblockTime+0x38>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	68db      	ldr	r3, [r3, #12]
 8008708:	68db      	ldr	r3, [r3, #12]
 800870a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	685b      	ldr	r3, [r3, #4]
 8008710:	4a04      	ldr	r2, [pc, #16]	; (8008724 <prvResetNextTaskUnblockTime+0x3c>)
 8008712:	6013      	str	r3, [r2, #0]
}
 8008714:	bf00      	nop
 8008716:	370c      	adds	r7, #12
 8008718:	46bd      	mov	sp, r7
 800871a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871e:	4770      	bx	lr
 8008720:	20004a68 	.word	0x20004a68
 8008724:	20004ad0 	.word	0x20004ad0

08008728 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008728:	b480      	push	{r7}
 800872a:	b083      	sub	sp, #12
 800872c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800872e:	4b0b      	ldr	r3, [pc, #44]	; (800875c <xTaskGetSchedulerState+0x34>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d102      	bne.n	800873c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008736:	2301      	movs	r3, #1
 8008738:	607b      	str	r3, [r7, #4]
 800873a:	e008      	b.n	800874e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800873c:	4b08      	ldr	r3, [pc, #32]	; (8008760 <xTaskGetSchedulerState+0x38>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d102      	bne.n	800874a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008744:	2302      	movs	r3, #2
 8008746:	607b      	str	r3, [r7, #4]
 8008748:	e001      	b.n	800874e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800874a:	2300      	movs	r3, #0
 800874c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800874e:	687b      	ldr	r3, [r7, #4]
	}
 8008750:	4618      	mov	r0, r3
 8008752:	370c      	adds	r7, #12
 8008754:	46bd      	mov	sp, r7
 8008756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875a:	4770      	bx	lr
 800875c:	20004abc 	.word	0x20004abc
 8008760:	20004ad8 	.word	0x20004ad8

08008764 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008764:	b580      	push	{r7, lr}
 8008766:	b086      	sub	sp, #24
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008770:	2300      	movs	r3, #0
 8008772:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d056      	beq.n	8008828 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800877a:	4b2e      	ldr	r3, [pc, #184]	; (8008834 <xTaskPriorityDisinherit+0xd0>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	693a      	ldr	r2, [r7, #16]
 8008780:	429a      	cmp	r2, r3
 8008782:	d00a      	beq.n	800879a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008788:	f383 8811 	msr	BASEPRI, r3
 800878c:	f3bf 8f6f 	isb	sy
 8008790:	f3bf 8f4f 	dsb	sy
 8008794:	60fb      	str	r3, [r7, #12]
}
 8008796:	bf00      	nop
 8008798:	e7fe      	b.n	8008798 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800879a:	693b      	ldr	r3, [r7, #16]
 800879c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d10a      	bne.n	80087b8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80087a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087a6:	f383 8811 	msr	BASEPRI, r3
 80087aa:	f3bf 8f6f 	isb	sy
 80087ae:	f3bf 8f4f 	dsb	sy
 80087b2:	60bb      	str	r3, [r7, #8]
}
 80087b4:	bf00      	nop
 80087b6:	e7fe      	b.n	80087b6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80087b8:	693b      	ldr	r3, [r7, #16]
 80087ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087bc:	1e5a      	subs	r2, r3, #1
 80087be:	693b      	ldr	r3, [r7, #16]
 80087c0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80087c2:	693b      	ldr	r3, [r7, #16]
 80087c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087c6:	693b      	ldr	r3, [r7, #16]
 80087c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087ca:	429a      	cmp	r2, r3
 80087cc:	d02c      	beq.n	8008828 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80087ce:	693b      	ldr	r3, [r7, #16]
 80087d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d128      	bne.n	8008828 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80087d6:	693b      	ldr	r3, [r7, #16]
 80087d8:	3304      	adds	r3, #4
 80087da:	4618      	mov	r0, r3
 80087dc:	f7fe f9a2 	bl	8006b24 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80087e0:	693b      	ldr	r3, [r7, #16]
 80087e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80087e4:	693b      	ldr	r3, [r7, #16]
 80087e6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087e8:	693b      	ldr	r3, [r7, #16]
 80087ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087ec:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80087f0:	693b      	ldr	r3, [r7, #16]
 80087f2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80087f4:	693b      	ldr	r3, [r7, #16]
 80087f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087f8:	4b0f      	ldr	r3, [pc, #60]	; (8008838 <xTaskPriorityDisinherit+0xd4>)
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	429a      	cmp	r2, r3
 80087fe:	d903      	bls.n	8008808 <xTaskPriorityDisinherit+0xa4>
 8008800:	693b      	ldr	r3, [r7, #16]
 8008802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008804:	4a0c      	ldr	r2, [pc, #48]	; (8008838 <xTaskPriorityDisinherit+0xd4>)
 8008806:	6013      	str	r3, [r2, #0]
 8008808:	693b      	ldr	r3, [r7, #16]
 800880a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800880c:	4613      	mov	r3, r2
 800880e:	009b      	lsls	r3, r3, #2
 8008810:	4413      	add	r3, r2
 8008812:	009b      	lsls	r3, r3, #2
 8008814:	4a09      	ldr	r2, [pc, #36]	; (800883c <xTaskPriorityDisinherit+0xd8>)
 8008816:	441a      	add	r2, r3
 8008818:	693b      	ldr	r3, [r7, #16]
 800881a:	3304      	adds	r3, #4
 800881c:	4619      	mov	r1, r3
 800881e:	4610      	mov	r0, r2
 8008820:	f7fe f923 	bl	8006a6a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008824:	2301      	movs	r3, #1
 8008826:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008828:	697b      	ldr	r3, [r7, #20]
	}
 800882a:	4618      	mov	r0, r3
 800882c:	3718      	adds	r7, #24
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}
 8008832:	bf00      	nop
 8008834:	200045dc 	.word	0x200045dc
 8008838:	20004ab8 	.word	0x20004ab8
 800883c:	200045e0 	.word	0x200045e0

08008840 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b084      	sub	sp, #16
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
 8008848:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800884a:	4b21      	ldr	r3, [pc, #132]	; (80088d0 <prvAddCurrentTaskToDelayedList+0x90>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008850:	4b20      	ldr	r3, [pc, #128]	; (80088d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	3304      	adds	r3, #4
 8008856:	4618      	mov	r0, r3
 8008858:	f7fe f964 	bl	8006b24 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008862:	d10a      	bne.n	800887a <prvAddCurrentTaskToDelayedList+0x3a>
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d007      	beq.n	800887a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800886a:	4b1a      	ldr	r3, [pc, #104]	; (80088d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	3304      	adds	r3, #4
 8008870:	4619      	mov	r1, r3
 8008872:	4819      	ldr	r0, [pc, #100]	; (80088d8 <prvAddCurrentTaskToDelayedList+0x98>)
 8008874:	f7fe f8f9 	bl	8006a6a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008878:	e026      	b.n	80088c8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800887a:	68fa      	ldr	r2, [r7, #12]
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	4413      	add	r3, r2
 8008880:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008882:	4b14      	ldr	r3, [pc, #80]	; (80088d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	68ba      	ldr	r2, [r7, #8]
 8008888:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800888a:	68ba      	ldr	r2, [r7, #8]
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	429a      	cmp	r2, r3
 8008890:	d209      	bcs.n	80088a6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008892:	4b12      	ldr	r3, [pc, #72]	; (80088dc <prvAddCurrentTaskToDelayedList+0x9c>)
 8008894:	681a      	ldr	r2, [r3, #0]
 8008896:	4b0f      	ldr	r3, [pc, #60]	; (80088d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	3304      	adds	r3, #4
 800889c:	4619      	mov	r1, r3
 800889e:	4610      	mov	r0, r2
 80088a0:	f7fe f907 	bl	8006ab2 <vListInsert>
}
 80088a4:	e010      	b.n	80088c8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80088a6:	4b0e      	ldr	r3, [pc, #56]	; (80088e0 <prvAddCurrentTaskToDelayedList+0xa0>)
 80088a8:	681a      	ldr	r2, [r3, #0]
 80088aa:	4b0a      	ldr	r3, [pc, #40]	; (80088d4 <prvAddCurrentTaskToDelayedList+0x94>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	3304      	adds	r3, #4
 80088b0:	4619      	mov	r1, r3
 80088b2:	4610      	mov	r0, r2
 80088b4:	f7fe f8fd 	bl	8006ab2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80088b8:	4b0a      	ldr	r3, [pc, #40]	; (80088e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	68ba      	ldr	r2, [r7, #8]
 80088be:	429a      	cmp	r2, r3
 80088c0:	d202      	bcs.n	80088c8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80088c2:	4a08      	ldr	r2, [pc, #32]	; (80088e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80088c4:	68bb      	ldr	r3, [r7, #8]
 80088c6:	6013      	str	r3, [r2, #0]
}
 80088c8:	bf00      	nop
 80088ca:	3710      	adds	r7, #16
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bd80      	pop	{r7, pc}
 80088d0:	20004ab4 	.word	0x20004ab4
 80088d4:	200045dc 	.word	0x200045dc
 80088d8:	20004a9c 	.word	0x20004a9c
 80088dc:	20004a6c 	.word	0x20004a6c
 80088e0:	20004a68 	.word	0x20004a68
 80088e4:	20004ad0 	.word	0x20004ad0

080088e8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b08a      	sub	sp, #40	; 0x28
 80088ec:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80088ee:	2300      	movs	r3, #0
 80088f0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80088f2:	f000 fb07 	bl	8008f04 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80088f6:	4b1c      	ldr	r3, [pc, #112]	; (8008968 <xTimerCreateTimerTask+0x80>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d021      	beq.n	8008942 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80088fe:	2300      	movs	r3, #0
 8008900:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008902:	2300      	movs	r3, #0
 8008904:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008906:	1d3a      	adds	r2, r7, #4
 8008908:	f107 0108 	add.w	r1, r7, #8
 800890c:	f107 030c 	add.w	r3, r7, #12
 8008910:	4618      	mov	r0, r3
 8008912:	f7fd fe79 	bl	8006608 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008916:	6879      	ldr	r1, [r7, #4]
 8008918:	68bb      	ldr	r3, [r7, #8]
 800891a:	68fa      	ldr	r2, [r7, #12]
 800891c:	9202      	str	r2, [sp, #8]
 800891e:	9301      	str	r3, [sp, #4]
 8008920:	2302      	movs	r3, #2
 8008922:	9300      	str	r3, [sp, #0]
 8008924:	2300      	movs	r3, #0
 8008926:	460a      	mov	r2, r1
 8008928:	4910      	ldr	r1, [pc, #64]	; (800896c <xTimerCreateTimerTask+0x84>)
 800892a:	4811      	ldr	r0, [pc, #68]	; (8008970 <xTimerCreateTimerTask+0x88>)
 800892c:	f7ff f860 	bl	80079f0 <xTaskCreateStatic>
 8008930:	4603      	mov	r3, r0
 8008932:	4a10      	ldr	r2, [pc, #64]	; (8008974 <xTimerCreateTimerTask+0x8c>)
 8008934:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008936:	4b0f      	ldr	r3, [pc, #60]	; (8008974 <xTimerCreateTimerTask+0x8c>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d001      	beq.n	8008942 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800893e:	2301      	movs	r3, #1
 8008940:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008942:	697b      	ldr	r3, [r7, #20]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d10a      	bne.n	800895e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800894c:	f383 8811 	msr	BASEPRI, r3
 8008950:	f3bf 8f6f 	isb	sy
 8008954:	f3bf 8f4f 	dsb	sy
 8008958:	613b      	str	r3, [r7, #16]
}
 800895a:	bf00      	nop
 800895c:	e7fe      	b.n	800895c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800895e:	697b      	ldr	r3, [r7, #20]
}
 8008960:	4618      	mov	r0, r3
 8008962:	3718      	adds	r7, #24
 8008964:	46bd      	mov	sp, r7
 8008966:	bd80      	pop	{r7, pc}
 8008968:	20004b0c 	.word	0x20004b0c
 800896c:	08009f1c 	.word	0x08009f1c
 8008970:	08008aad 	.word	0x08008aad
 8008974:	20004b10 	.word	0x20004b10

08008978 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b08a      	sub	sp, #40	; 0x28
 800897c:	af00      	add	r7, sp, #0
 800897e:	60f8      	str	r0, [r7, #12]
 8008980:	60b9      	str	r1, [r7, #8]
 8008982:	607a      	str	r2, [r7, #4]
 8008984:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008986:	2300      	movs	r3, #0
 8008988:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d10a      	bne.n	80089a6 <xTimerGenericCommand+0x2e>
	__asm volatile
 8008990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008994:	f383 8811 	msr	BASEPRI, r3
 8008998:	f3bf 8f6f 	isb	sy
 800899c:	f3bf 8f4f 	dsb	sy
 80089a0:	623b      	str	r3, [r7, #32]
}
 80089a2:	bf00      	nop
 80089a4:	e7fe      	b.n	80089a4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80089a6:	4b1a      	ldr	r3, [pc, #104]	; (8008a10 <xTimerGenericCommand+0x98>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d02a      	beq.n	8008a04 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80089ae:	68bb      	ldr	r3, [r7, #8]
 80089b0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	2b05      	cmp	r3, #5
 80089be:	dc18      	bgt.n	80089f2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80089c0:	f7ff feb2 	bl	8008728 <xTaskGetSchedulerState>
 80089c4:	4603      	mov	r3, r0
 80089c6:	2b02      	cmp	r3, #2
 80089c8:	d109      	bne.n	80089de <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80089ca:	4b11      	ldr	r3, [pc, #68]	; (8008a10 <xTimerGenericCommand+0x98>)
 80089cc:	6818      	ldr	r0, [r3, #0]
 80089ce:	f107 0110 	add.w	r1, r7, #16
 80089d2:	2300      	movs	r3, #0
 80089d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80089d6:	f7fe fc23 	bl	8007220 <xQueueGenericSend>
 80089da:	6278      	str	r0, [r7, #36]	; 0x24
 80089dc:	e012      	b.n	8008a04 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80089de:	4b0c      	ldr	r3, [pc, #48]	; (8008a10 <xTimerGenericCommand+0x98>)
 80089e0:	6818      	ldr	r0, [r3, #0]
 80089e2:	f107 0110 	add.w	r1, r7, #16
 80089e6:	2300      	movs	r3, #0
 80089e8:	2200      	movs	r2, #0
 80089ea:	f7fe fc19 	bl	8007220 <xQueueGenericSend>
 80089ee:	6278      	str	r0, [r7, #36]	; 0x24
 80089f0:	e008      	b.n	8008a04 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80089f2:	4b07      	ldr	r3, [pc, #28]	; (8008a10 <xTimerGenericCommand+0x98>)
 80089f4:	6818      	ldr	r0, [r3, #0]
 80089f6:	f107 0110 	add.w	r1, r7, #16
 80089fa:	2300      	movs	r3, #0
 80089fc:	683a      	ldr	r2, [r7, #0]
 80089fe:	f7fe fd0d 	bl	800741c <xQueueGenericSendFromISR>
 8008a02:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008a06:	4618      	mov	r0, r3
 8008a08:	3728      	adds	r7, #40	; 0x28
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd80      	pop	{r7, pc}
 8008a0e:	bf00      	nop
 8008a10:	20004b0c 	.word	0x20004b0c

08008a14 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b088      	sub	sp, #32
 8008a18:	af02      	add	r7, sp, #8
 8008a1a:	6078      	str	r0, [r7, #4]
 8008a1c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a1e:	4b22      	ldr	r3, [pc, #136]	; (8008aa8 <prvProcessExpiredTimer+0x94>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	68db      	ldr	r3, [r3, #12]
 8008a24:	68db      	ldr	r3, [r3, #12]
 8008a26:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008a28:	697b      	ldr	r3, [r7, #20]
 8008a2a:	3304      	adds	r3, #4
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	f7fe f879 	bl	8006b24 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008a32:	697b      	ldr	r3, [r7, #20]
 8008a34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008a38:	f003 0304 	and.w	r3, r3, #4
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d022      	beq.n	8008a86 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008a40:	697b      	ldr	r3, [r7, #20]
 8008a42:	699a      	ldr	r2, [r3, #24]
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	18d1      	adds	r1, r2, r3
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	683a      	ldr	r2, [r7, #0]
 8008a4c:	6978      	ldr	r0, [r7, #20]
 8008a4e:	f000 f8d1 	bl	8008bf4 <prvInsertTimerInActiveList>
 8008a52:	4603      	mov	r3, r0
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d01f      	beq.n	8008a98 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008a58:	2300      	movs	r3, #0
 8008a5a:	9300      	str	r3, [sp, #0]
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	687a      	ldr	r2, [r7, #4]
 8008a60:	2100      	movs	r1, #0
 8008a62:	6978      	ldr	r0, [r7, #20]
 8008a64:	f7ff ff88 	bl	8008978 <xTimerGenericCommand>
 8008a68:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008a6a:	693b      	ldr	r3, [r7, #16]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d113      	bne.n	8008a98 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a74:	f383 8811 	msr	BASEPRI, r3
 8008a78:	f3bf 8f6f 	isb	sy
 8008a7c:	f3bf 8f4f 	dsb	sy
 8008a80:	60fb      	str	r3, [r7, #12]
}
 8008a82:	bf00      	nop
 8008a84:	e7fe      	b.n	8008a84 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008a86:	697b      	ldr	r3, [r7, #20]
 8008a88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008a8c:	f023 0301 	bic.w	r3, r3, #1
 8008a90:	b2da      	uxtb	r2, r3
 8008a92:	697b      	ldr	r3, [r7, #20]
 8008a94:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008a98:	697b      	ldr	r3, [r7, #20]
 8008a9a:	6a1b      	ldr	r3, [r3, #32]
 8008a9c:	6978      	ldr	r0, [r7, #20]
 8008a9e:	4798      	blx	r3
}
 8008aa0:	bf00      	nop
 8008aa2:	3718      	adds	r7, #24
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}
 8008aa8:	20004b04 	.word	0x20004b04

08008aac <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b084      	sub	sp, #16
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008ab4:	f107 0308 	add.w	r3, r7, #8
 8008ab8:	4618      	mov	r0, r3
 8008aba:	f000 f857 	bl	8008b6c <prvGetNextExpireTime>
 8008abe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	4619      	mov	r1, r3
 8008ac4:	68f8      	ldr	r0, [r7, #12]
 8008ac6:	f000 f803 	bl	8008ad0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008aca:	f000 f8d5 	bl	8008c78 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008ace:	e7f1      	b.n	8008ab4 <prvTimerTask+0x8>

08008ad0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b084      	sub	sp, #16
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
 8008ad8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008ada:	f7ff fa43 	bl	8007f64 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008ade:	f107 0308 	add.w	r3, r7, #8
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	f000 f866 	bl	8008bb4 <prvSampleTimeNow>
 8008ae8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d130      	bne.n	8008b52 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d10a      	bne.n	8008b0c <prvProcessTimerOrBlockTask+0x3c>
 8008af6:	687a      	ldr	r2, [r7, #4]
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	429a      	cmp	r2, r3
 8008afc:	d806      	bhi.n	8008b0c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008afe:	f7ff fa3f 	bl	8007f80 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008b02:	68f9      	ldr	r1, [r7, #12]
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	f7ff ff85 	bl	8008a14 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008b0a:	e024      	b.n	8008b56 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d008      	beq.n	8008b24 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008b12:	4b13      	ldr	r3, [pc, #76]	; (8008b60 <prvProcessTimerOrBlockTask+0x90>)
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d101      	bne.n	8008b20 <prvProcessTimerOrBlockTask+0x50>
 8008b1c:	2301      	movs	r3, #1
 8008b1e:	e000      	b.n	8008b22 <prvProcessTimerOrBlockTask+0x52>
 8008b20:	2300      	movs	r3, #0
 8008b22:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008b24:	4b0f      	ldr	r3, [pc, #60]	; (8008b64 <prvProcessTimerOrBlockTask+0x94>)
 8008b26:	6818      	ldr	r0, [r3, #0]
 8008b28:	687a      	ldr	r2, [r7, #4]
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	1ad3      	subs	r3, r2, r3
 8008b2e:	683a      	ldr	r2, [r7, #0]
 8008b30:	4619      	mov	r1, r3
 8008b32:	f7fe ff29 	bl	8007988 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008b36:	f7ff fa23 	bl	8007f80 <xTaskResumeAll>
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d10a      	bne.n	8008b56 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008b40:	4b09      	ldr	r3, [pc, #36]	; (8008b68 <prvProcessTimerOrBlockTask+0x98>)
 8008b42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b46:	601a      	str	r2, [r3, #0]
 8008b48:	f3bf 8f4f 	dsb	sy
 8008b4c:	f3bf 8f6f 	isb	sy
}
 8008b50:	e001      	b.n	8008b56 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008b52:	f7ff fa15 	bl	8007f80 <xTaskResumeAll>
}
 8008b56:	bf00      	nop
 8008b58:	3710      	adds	r7, #16
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	bd80      	pop	{r7, pc}
 8008b5e:	bf00      	nop
 8008b60:	20004b08 	.word	0x20004b08
 8008b64:	20004b0c 	.word	0x20004b0c
 8008b68:	e000ed04 	.word	0xe000ed04

08008b6c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b085      	sub	sp, #20
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008b74:	4b0e      	ldr	r3, [pc, #56]	; (8008bb0 <prvGetNextExpireTime+0x44>)
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d101      	bne.n	8008b82 <prvGetNextExpireTime+0x16>
 8008b7e:	2201      	movs	r2, #1
 8008b80:	e000      	b.n	8008b84 <prvGetNextExpireTime+0x18>
 8008b82:	2200      	movs	r2, #0
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d105      	bne.n	8008b9c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008b90:	4b07      	ldr	r3, [pc, #28]	; (8008bb0 <prvGetNextExpireTime+0x44>)
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	68db      	ldr	r3, [r3, #12]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	60fb      	str	r3, [r7, #12]
 8008b9a:	e001      	b.n	8008ba0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	3714      	adds	r7, #20
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bac:	4770      	bx	lr
 8008bae:	bf00      	nop
 8008bb0:	20004b04 	.word	0x20004b04

08008bb4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b084      	sub	sp, #16
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008bbc:	f7ff fa7e 	bl	80080bc <xTaskGetTickCount>
 8008bc0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008bc2:	4b0b      	ldr	r3, [pc, #44]	; (8008bf0 <prvSampleTimeNow+0x3c>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	68fa      	ldr	r2, [r7, #12]
 8008bc8:	429a      	cmp	r2, r3
 8008bca:	d205      	bcs.n	8008bd8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008bcc:	f000 f936 	bl	8008e3c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2201      	movs	r2, #1
 8008bd4:	601a      	str	r2, [r3, #0]
 8008bd6:	e002      	b.n	8008bde <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2200      	movs	r2, #0
 8008bdc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008bde:	4a04      	ldr	r2, [pc, #16]	; (8008bf0 <prvSampleTimeNow+0x3c>)
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008be4:	68fb      	ldr	r3, [r7, #12]
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	3710      	adds	r7, #16
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd80      	pop	{r7, pc}
 8008bee:	bf00      	nop
 8008bf0:	20004b14 	.word	0x20004b14

08008bf4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b086      	sub	sp, #24
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	60f8      	str	r0, [r7, #12]
 8008bfc:	60b9      	str	r1, [r7, #8]
 8008bfe:	607a      	str	r2, [r7, #4]
 8008c00:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008c02:	2300      	movs	r3, #0
 8008c04:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	68ba      	ldr	r2, [r7, #8]
 8008c0a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	68fa      	ldr	r2, [r7, #12]
 8008c10:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008c12:	68ba      	ldr	r2, [r7, #8]
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	429a      	cmp	r2, r3
 8008c18:	d812      	bhi.n	8008c40 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c1a:	687a      	ldr	r2, [r7, #4]
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	1ad2      	subs	r2, r2, r3
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	699b      	ldr	r3, [r3, #24]
 8008c24:	429a      	cmp	r2, r3
 8008c26:	d302      	bcc.n	8008c2e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008c28:	2301      	movs	r3, #1
 8008c2a:	617b      	str	r3, [r7, #20]
 8008c2c:	e01b      	b.n	8008c66 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008c2e:	4b10      	ldr	r3, [pc, #64]	; (8008c70 <prvInsertTimerInActiveList+0x7c>)
 8008c30:	681a      	ldr	r2, [r3, #0]
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	3304      	adds	r3, #4
 8008c36:	4619      	mov	r1, r3
 8008c38:	4610      	mov	r0, r2
 8008c3a:	f7fd ff3a 	bl	8006ab2 <vListInsert>
 8008c3e:	e012      	b.n	8008c66 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008c40:	687a      	ldr	r2, [r7, #4]
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	429a      	cmp	r2, r3
 8008c46:	d206      	bcs.n	8008c56 <prvInsertTimerInActiveList+0x62>
 8008c48:	68ba      	ldr	r2, [r7, #8]
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	429a      	cmp	r2, r3
 8008c4e:	d302      	bcc.n	8008c56 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008c50:	2301      	movs	r3, #1
 8008c52:	617b      	str	r3, [r7, #20]
 8008c54:	e007      	b.n	8008c66 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008c56:	4b07      	ldr	r3, [pc, #28]	; (8008c74 <prvInsertTimerInActiveList+0x80>)
 8008c58:	681a      	ldr	r2, [r3, #0]
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	3304      	adds	r3, #4
 8008c5e:	4619      	mov	r1, r3
 8008c60:	4610      	mov	r0, r2
 8008c62:	f7fd ff26 	bl	8006ab2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008c66:	697b      	ldr	r3, [r7, #20]
}
 8008c68:	4618      	mov	r0, r3
 8008c6a:	3718      	adds	r7, #24
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	bd80      	pop	{r7, pc}
 8008c70:	20004b08 	.word	0x20004b08
 8008c74:	20004b04 	.word	0x20004b04

08008c78 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b08e      	sub	sp, #56	; 0x38
 8008c7c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008c7e:	e0ca      	b.n	8008e16 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	da18      	bge.n	8008cb8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008c86:	1d3b      	adds	r3, r7, #4
 8008c88:	3304      	adds	r3, #4
 8008c8a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d10a      	bne.n	8008ca8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c96:	f383 8811 	msr	BASEPRI, r3
 8008c9a:	f3bf 8f6f 	isb	sy
 8008c9e:	f3bf 8f4f 	dsb	sy
 8008ca2:	61fb      	str	r3, [r7, #28]
}
 8008ca4:	bf00      	nop
 8008ca6:	e7fe      	b.n	8008ca6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008cae:	6850      	ldr	r0, [r2, #4]
 8008cb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008cb2:	6892      	ldr	r2, [r2, #8]
 8008cb4:	4611      	mov	r1, r2
 8008cb6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	f2c0 80aa 	blt.w	8008e14 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cc6:	695b      	ldr	r3, [r3, #20]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d004      	beq.n	8008cd6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cce:	3304      	adds	r3, #4
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	f7fd ff27 	bl	8006b24 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008cd6:	463b      	mov	r3, r7
 8008cd8:	4618      	mov	r0, r3
 8008cda:	f7ff ff6b 	bl	8008bb4 <prvSampleTimeNow>
 8008cde:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2b09      	cmp	r3, #9
 8008ce4:	f200 8097 	bhi.w	8008e16 <prvProcessReceivedCommands+0x19e>
 8008ce8:	a201      	add	r2, pc, #4	; (adr r2, 8008cf0 <prvProcessReceivedCommands+0x78>)
 8008cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cee:	bf00      	nop
 8008cf0:	08008d19 	.word	0x08008d19
 8008cf4:	08008d19 	.word	0x08008d19
 8008cf8:	08008d19 	.word	0x08008d19
 8008cfc:	08008d8d 	.word	0x08008d8d
 8008d00:	08008da1 	.word	0x08008da1
 8008d04:	08008deb 	.word	0x08008deb
 8008d08:	08008d19 	.word	0x08008d19
 8008d0c:	08008d19 	.word	0x08008d19
 8008d10:	08008d8d 	.word	0x08008d8d
 8008d14:	08008da1 	.word	0x08008da1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d1a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008d1e:	f043 0301 	orr.w	r3, r3, #1
 8008d22:	b2da      	uxtb	r2, r3
 8008d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008d2a:	68ba      	ldr	r2, [r7, #8]
 8008d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d2e:	699b      	ldr	r3, [r3, #24]
 8008d30:	18d1      	adds	r1, r2, r3
 8008d32:	68bb      	ldr	r3, [r7, #8]
 8008d34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d38:	f7ff ff5c 	bl	8008bf4 <prvInsertTimerInActiveList>
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d069      	beq.n	8008e16 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d44:	6a1b      	ldr	r3, [r3, #32]
 8008d46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d48:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008d50:	f003 0304 	and.w	r3, r3, #4
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d05e      	beq.n	8008e16 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008d58:	68ba      	ldr	r2, [r7, #8]
 8008d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d5c:	699b      	ldr	r3, [r3, #24]
 8008d5e:	441a      	add	r2, r3
 8008d60:	2300      	movs	r3, #0
 8008d62:	9300      	str	r3, [sp, #0]
 8008d64:	2300      	movs	r3, #0
 8008d66:	2100      	movs	r1, #0
 8008d68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008d6a:	f7ff fe05 	bl	8008978 <xTimerGenericCommand>
 8008d6e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008d70:	6a3b      	ldr	r3, [r7, #32]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d14f      	bne.n	8008e16 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8008d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d7a:	f383 8811 	msr	BASEPRI, r3
 8008d7e:	f3bf 8f6f 	isb	sy
 8008d82:	f3bf 8f4f 	dsb	sy
 8008d86:	61bb      	str	r3, [r7, #24]
}
 8008d88:	bf00      	nop
 8008d8a:	e7fe      	b.n	8008d8a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d8e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008d92:	f023 0301 	bic.w	r3, r3, #1
 8008d96:	b2da      	uxtb	r2, r3
 8008d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d9a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008d9e:	e03a      	b.n	8008e16 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008da2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008da6:	f043 0301 	orr.w	r3, r3, #1
 8008daa:	b2da      	uxtb	r2, r3
 8008dac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008db2:	68ba      	ldr	r2, [r7, #8]
 8008db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008db6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dba:	699b      	ldr	r3, [r3, #24]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d10a      	bne.n	8008dd6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dc4:	f383 8811 	msr	BASEPRI, r3
 8008dc8:	f3bf 8f6f 	isb	sy
 8008dcc:	f3bf 8f4f 	dsb	sy
 8008dd0:	617b      	str	r3, [r7, #20]
}
 8008dd2:	bf00      	nop
 8008dd4:	e7fe      	b.n	8008dd4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dd8:	699a      	ldr	r2, [r3, #24]
 8008dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ddc:	18d1      	adds	r1, r2, r3
 8008dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008de0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008de2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008de4:	f7ff ff06 	bl	8008bf4 <prvInsertTimerInActiveList>
					break;
 8008de8:	e015      	b.n	8008e16 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008df0:	f003 0302 	and.w	r3, r3, #2
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d103      	bne.n	8008e00 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008df8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008dfa:	f7fd fceb 	bl	80067d4 <vPortFree>
 8008dfe:	e00a      	b.n	8008e16 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008e06:	f023 0301 	bic.w	r3, r3, #1
 8008e0a:	b2da      	uxtb	r2, r3
 8008e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008e12:	e000      	b.n	8008e16 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8008e14:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008e16:	4b08      	ldr	r3, [pc, #32]	; (8008e38 <prvProcessReceivedCommands+0x1c0>)
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	1d39      	adds	r1, r7, #4
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	4618      	mov	r0, r3
 8008e20:	f7fe fb98 	bl	8007554 <xQueueReceive>
 8008e24:	4603      	mov	r3, r0
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	f47f af2a 	bne.w	8008c80 <prvProcessReceivedCommands+0x8>
	}
}
 8008e2c:	bf00      	nop
 8008e2e:	bf00      	nop
 8008e30:	3730      	adds	r7, #48	; 0x30
 8008e32:	46bd      	mov	sp, r7
 8008e34:	bd80      	pop	{r7, pc}
 8008e36:	bf00      	nop
 8008e38:	20004b0c 	.word	0x20004b0c

08008e3c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b088      	sub	sp, #32
 8008e40:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008e42:	e048      	b.n	8008ed6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008e44:	4b2d      	ldr	r3, [pc, #180]	; (8008efc <prvSwitchTimerLists+0xc0>)
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	68db      	ldr	r3, [r3, #12]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e4e:	4b2b      	ldr	r3, [pc, #172]	; (8008efc <prvSwitchTimerLists+0xc0>)
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	68db      	ldr	r3, [r3, #12]
 8008e54:	68db      	ldr	r3, [r3, #12]
 8008e56:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	3304      	adds	r3, #4
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	f7fd fe61 	bl	8006b24 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	6a1b      	ldr	r3, [r3, #32]
 8008e66:	68f8      	ldr	r0, [r7, #12]
 8008e68:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008e70:	f003 0304 	and.w	r3, r3, #4
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d02e      	beq.n	8008ed6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	699b      	ldr	r3, [r3, #24]
 8008e7c:	693a      	ldr	r2, [r7, #16]
 8008e7e:	4413      	add	r3, r2
 8008e80:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008e82:	68ba      	ldr	r2, [r7, #8]
 8008e84:	693b      	ldr	r3, [r7, #16]
 8008e86:	429a      	cmp	r2, r3
 8008e88:	d90e      	bls.n	8008ea8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	68ba      	ldr	r2, [r7, #8]
 8008e8e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	68fa      	ldr	r2, [r7, #12]
 8008e94:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008e96:	4b19      	ldr	r3, [pc, #100]	; (8008efc <prvSwitchTimerLists+0xc0>)
 8008e98:	681a      	ldr	r2, [r3, #0]
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	3304      	adds	r3, #4
 8008e9e:	4619      	mov	r1, r3
 8008ea0:	4610      	mov	r0, r2
 8008ea2:	f7fd fe06 	bl	8006ab2 <vListInsert>
 8008ea6:	e016      	b.n	8008ed6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	9300      	str	r3, [sp, #0]
 8008eac:	2300      	movs	r3, #0
 8008eae:	693a      	ldr	r2, [r7, #16]
 8008eb0:	2100      	movs	r1, #0
 8008eb2:	68f8      	ldr	r0, [r7, #12]
 8008eb4:	f7ff fd60 	bl	8008978 <xTimerGenericCommand>
 8008eb8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d10a      	bne.n	8008ed6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ec4:	f383 8811 	msr	BASEPRI, r3
 8008ec8:	f3bf 8f6f 	isb	sy
 8008ecc:	f3bf 8f4f 	dsb	sy
 8008ed0:	603b      	str	r3, [r7, #0]
}
 8008ed2:	bf00      	nop
 8008ed4:	e7fe      	b.n	8008ed4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008ed6:	4b09      	ldr	r3, [pc, #36]	; (8008efc <prvSwitchTimerLists+0xc0>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d1b1      	bne.n	8008e44 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008ee0:	4b06      	ldr	r3, [pc, #24]	; (8008efc <prvSwitchTimerLists+0xc0>)
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008ee6:	4b06      	ldr	r3, [pc, #24]	; (8008f00 <prvSwitchTimerLists+0xc4>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	4a04      	ldr	r2, [pc, #16]	; (8008efc <prvSwitchTimerLists+0xc0>)
 8008eec:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008eee:	4a04      	ldr	r2, [pc, #16]	; (8008f00 <prvSwitchTimerLists+0xc4>)
 8008ef0:	697b      	ldr	r3, [r7, #20]
 8008ef2:	6013      	str	r3, [r2, #0]
}
 8008ef4:	bf00      	nop
 8008ef6:	3718      	adds	r7, #24
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bd80      	pop	{r7, pc}
 8008efc:	20004b04 	.word	0x20004b04
 8008f00:	20004b08 	.word	0x20004b08

08008f04 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b082      	sub	sp, #8
 8008f08:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008f0a:	f7fd ff63 	bl	8006dd4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008f0e:	4b15      	ldr	r3, [pc, #84]	; (8008f64 <prvCheckForValidListAndQueue+0x60>)
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d120      	bne.n	8008f58 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008f16:	4814      	ldr	r0, [pc, #80]	; (8008f68 <prvCheckForValidListAndQueue+0x64>)
 8008f18:	f7fd fd7a 	bl	8006a10 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008f1c:	4813      	ldr	r0, [pc, #76]	; (8008f6c <prvCheckForValidListAndQueue+0x68>)
 8008f1e:	f7fd fd77 	bl	8006a10 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008f22:	4b13      	ldr	r3, [pc, #76]	; (8008f70 <prvCheckForValidListAndQueue+0x6c>)
 8008f24:	4a10      	ldr	r2, [pc, #64]	; (8008f68 <prvCheckForValidListAndQueue+0x64>)
 8008f26:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008f28:	4b12      	ldr	r3, [pc, #72]	; (8008f74 <prvCheckForValidListAndQueue+0x70>)
 8008f2a:	4a10      	ldr	r2, [pc, #64]	; (8008f6c <prvCheckForValidListAndQueue+0x68>)
 8008f2c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008f2e:	2300      	movs	r3, #0
 8008f30:	9300      	str	r3, [sp, #0]
 8008f32:	4b11      	ldr	r3, [pc, #68]	; (8008f78 <prvCheckForValidListAndQueue+0x74>)
 8008f34:	4a11      	ldr	r2, [pc, #68]	; (8008f7c <prvCheckForValidListAndQueue+0x78>)
 8008f36:	2110      	movs	r1, #16
 8008f38:	200a      	movs	r0, #10
 8008f3a:	f7fe f8d5 	bl	80070e8 <xQueueGenericCreateStatic>
 8008f3e:	4603      	mov	r3, r0
 8008f40:	4a08      	ldr	r2, [pc, #32]	; (8008f64 <prvCheckForValidListAndQueue+0x60>)
 8008f42:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008f44:	4b07      	ldr	r3, [pc, #28]	; (8008f64 <prvCheckForValidListAndQueue+0x60>)
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d005      	beq.n	8008f58 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008f4c:	4b05      	ldr	r3, [pc, #20]	; (8008f64 <prvCheckForValidListAndQueue+0x60>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	490b      	ldr	r1, [pc, #44]	; (8008f80 <prvCheckForValidListAndQueue+0x7c>)
 8008f52:	4618      	mov	r0, r3
 8008f54:	f7fe fcee 	bl	8007934 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008f58:	f7fd ff6c 	bl	8006e34 <vPortExitCritical>
}
 8008f5c:	bf00      	nop
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}
 8008f62:	bf00      	nop
 8008f64:	20004b0c 	.word	0x20004b0c
 8008f68:	20004adc 	.word	0x20004adc
 8008f6c:	20004af0 	.word	0x20004af0
 8008f70:	20004b04 	.word	0x20004b04
 8008f74:	20004b08 	.word	0x20004b08
 8008f78:	20004bb8 	.word	0x20004bb8
 8008f7c:	20004b18 	.word	0x20004b18
 8008f80:	08009f24 	.word	0x08009f24

08008f84 <gyroStart>:
#include "i2c.h"


// Enable and configure ICM-20948 gyroscope
// -------------------------------------------------------------------
void gyroStart() {
 8008f84:	b580      	push	{r7, lr}
 8008f86:	af00      	add	r7, sp, #0
	writeByte(0x07, 0x07); // Write 8'b00000111 to ICM register 7 (PWR_MGMT_2), disable Gyroscope (all axes)
 8008f88:	2107      	movs	r1, #7
 8008f8a:	2007      	movs	r0, #7
 8008f8c:	f000 f87c 	bl	8009088 <writeByte>
	osDelayUntil(10);
 8008f90:	200a      	movs	r0, #10
 8008f92:	f7fd faf2 	bl	800657a <osDelayUntil>
	writeByte(0x07, 0x00); // Enable Accelerometer and Gyroscope (all axes)
 8008f96:	2100      	movs	r1, #0
 8008f98:	2007      	movs	r0, #7
 8008f9a:	f000 f875 	bl	8009088 <writeByte>
	osDelayUntil(10);
 8008f9e:	200a      	movs	r0, #10
 8008fa0:	f7fd faeb 	bl	800657a <osDelayUntil>
}
 8008fa4:	bf00      	nop
 8008fa6:	bd80      	pop	{r7, pc}

08008fa8 <gyroInit>:

void gyroInit() {
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	af00      	add	r7, sp, #0
	writeByte(0x06, 0x00);	// Write 0x00 to ICM register 6 (PWR_MGMT_1), wakes chip from sleep mode,
 8008fac:	2100      	movs	r1, #0
 8008fae:	2006      	movs	r0, #6
 8008fb0:	f000 f86a 	bl	8009088 <writeByte>
							//turn off low power, Internal 20MHz oscillator
	osDelayUntil(10);
 8008fb4:	200a      	movs	r0, #10
 8008fb6:	f7fd fae0 	bl	800657a <osDelayUntil>
	writeByte(0x03, 0x80);	// Enables DMP (Digital Motion Processor) features
 8008fba:	2180      	movs	r1, #128	; 0x80
 8008fbc:	2003      	movs	r0, #3
 8008fbe:	f000 f863 	bl	8009088 <writeByte>
	osDelayUntil(10);
 8008fc2:	200a      	movs	r0, #10
 8008fc4:	f7fd fad9 	bl	800657a <osDelayUntil>
	writeByte(0x07, 0x07);	// Disable Gyroscope (all axes)
 8008fc8:	2107      	movs	r1, #7
 8008fca:	2007      	movs	r0, #7
 8008fcc:	f000 f85c 	bl	8009088 <writeByte>
	osDelayUntil(10);
 8008fd0:	200a      	movs	r0, #10
 8008fd2:	f7fd fad2 	bl	800657a <osDelayUntil>
	writeByte(0x06, 0x01);	// Auto select best available clock source
 8008fd6:	2101      	movs	r1, #1
 8008fd8:	2006      	movs	r0, #6
 8008fda:	f000 f855 	bl	8009088 <writeByte>
	osDelayUntil(10);
 8008fde:	200a      	movs	r0, #10
 8008fe0:	f7fd facb 	bl	800657a <osDelayUntil>
	writeByte(0x7F, 0x20);	// Switch to USER BANK 2
 8008fe4:	2120      	movs	r1, #32
 8008fe6:	207f      	movs	r0, #127	; 0x7f
 8008fe8:	f000 f84e 	bl	8009088 <writeByte>
	osDelayUntil(10);
 8008fec:	200a      	movs	r0, #10
 8008fee:	f7fd fac4 	bl	800657a <osDelayUntil>
	writeByte(0x01, 0x2F);	// Config gyro, enable gyro DLPF, set gyro Full Scale to +-2000dps,
 8008ff2:	212f      	movs	r1, #47	; 0x2f
 8008ff4:	2001      	movs	r0, #1
 8008ff6:	f000 f847 	bl	8009088 <writeByte>
							// gyro low pass filter = 3'b101
	osDelayUntil(10);
 8008ffa:	200a      	movs	r0, #10
 8008ffc:	f7fd fabd 	bl	800657a <osDelayUntil>
	writeByte(0x0, 0x00);	// Set gyro sample rate divider = 1 + 0(GYRO_SMPLRT_DIV[7:0])
 8009000:	2100      	movs	r1, #0
 8009002:	2000      	movs	r0, #0
 8009004:	f000 f840 	bl	8009088 <writeByte>
	osDelayUntil(10);
 8009008:	200a      	movs	r0, #10
 800900a:	f7fd fab6 	bl	800657a <osDelayUntil>
	writeByte(0x7F, 0x00);	// Switch to USER BANK 0
 800900e:	2100      	movs	r1, #0
 8009010:	207f      	movs	r0, #127	; 0x7f
 8009012:	f000 f839 	bl	8009088 <writeByte>
	osDelayUntil(10);
 8009016:	200a      	movs	r0, #10
 8009018:	f7fd faaf 	bl	800657a <osDelayUntil>
	writeByte(0x07, 0x00);	// Enable Gyroscope and Accelerometer
 800901c:	2100      	movs	r1, #0
 800901e:	2007      	movs	r0, #7
 8009020:	f000 f832 	bl	8009088 <writeByte>
	osDelayUntil(10);
 8009024:	200a      	movs	r0, #10
 8009026:	f7fd faa8 	bl	800657a <osDelayUntil>
}
 800902a:	bf00      	nop
 800902c:	bd80      	pop	{r7, pc}
	...

08009030 <readByte>:
uint8_t i2cBuffer[20];
uint8_t ICMAddr = 0x68;

// Helper functions to transmit and receive data from ICM using I2C
// -------------------------------------------------------------------
void readByte(uint8_t addr, uint8_t *data) {
 8009030:	b580      	push	{r7, lr}
 8009032:	b084      	sub	sp, #16
 8009034:	af02      	add	r7, sp, #8
 8009036:	4603      	mov	r3, r0
 8009038:	6039      	str	r1, [r7, #0]
 800903a:	71fb      	strb	r3, [r7, #7]
	i2cBuffer[0] = addr;
 800903c:	4a0f      	ldr	r2, [pc, #60]	; (800907c <readByte+0x4c>)
 800903e:	79fb      	ldrb	r3, [r7, #7]
 8009040:	7013      	strb	r3, [r2, #0]
	HAL_I2C_Master_Transmit(&hi2c1, ICMAddr << 1, i2cBuffer, 1, 10);
 8009042:	4b0f      	ldr	r3, [pc, #60]	; (8009080 <readByte+0x50>)
 8009044:	781b      	ldrb	r3, [r3, #0]
 8009046:	b29b      	uxth	r3, r3
 8009048:	005b      	lsls	r3, r3, #1
 800904a:	b299      	uxth	r1, r3
 800904c:	230a      	movs	r3, #10
 800904e:	9300      	str	r3, [sp, #0]
 8009050:	2301      	movs	r3, #1
 8009052:	4a0a      	ldr	r2, [pc, #40]	; (800907c <readByte+0x4c>)
 8009054:	480b      	ldr	r0, [pc, #44]	; (8009084 <readByte+0x54>)
 8009056:	f7f9 ff0f 	bl	8002e78 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, ICMAddr << 1, data, 2, 20);
 800905a:	4b09      	ldr	r3, [pc, #36]	; (8009080 <readByte+0x50>)
 800905c:	781b      	ldrb	r3, [r3, #0]
 800905e:	b29b      	uxth	r3, r3
 8009060:	005b      	lsls	r3, r3, #1
 8009062:	b299      	uxth	r1, r3
 8009064:	2314      	movs	r3, #20
 8009066:	9300      	str	r3, [sp, #0]
 8009068:	2302      	movs	r3, #2
 800906a:	683a      	ldr	r2, [r7, #0]
 800906c:	4805      	ldr	r0, [pc, #20]	; (8009084 <readByte+0x54>)
 800906e:	f7fa f801 	bl	8003074 <HAL_I2C_Master_Receive>
}
 8009072:	bf00      	nop
 8009074:	3708      	adds	r7, #8
 8009076:	46bd      	mov	sp, r7
 8009078:	bd80      	pop	{r7, pc}
 800907a:	bf00      	nop
 800907c:	20004c08 	.word	0x20004c08
 8009080:	20000018 	.word	0x20000018
 8009084:	2000009c 	.word	0x2000009c

08009088 <writeByte>:

void writeByte(uint8_t addr, uint8_t data) {
 8009088:	b580      	push	{r7, lr}
 800908a:	b084      	sub	sp, #16
 800908c:	af02      	add	r7, sp, #8
 800908e:	4603      	mov	r3, r0
 8009090:	460a      	mov	r2, r1
 8009092:	71fb      	strb	r3, [r7, #7]
 8009094:	4613      	mov	r3, r2
 8009096:	71bb      	strb	r3, [r7, #6]
	i2cBuffer[0] = addr;
 8009098:	4a0a      	ldr	r2, [pc, #40]	; (80090c4 <writeByte+0x3c>)
 800909a:	79fb      	ldrb	r3, [r7, #7]
 800909c:	7013      	strb	r3, [r2, #0]
	i2cBuffer[1] = data;
 800909e:	4a09      	ldr	r2, [pc, #36]	; (80090c4 <writeByte+0x3c>)
 80090a0:	79bb      	ldrb	r3, [r7, #6]
 80090a2:	7053      	strb	r3, [r2, #1]
	HAL_I2C_Master_Transmit(&hi2c1, ICMAddr << 1, i2cBuffer, 2, 20);
 80090a4:	4b08      	ldr	r3, [pc, #32]	; (80090c8 <writeByte+0x40>)
 80090a6:	781b      	ldrb	r3, [r3, #0]
 80090a8:	b29b      	uxth	r3, r3
 80090aa:	005b      	lsls	r3, r3, #1
 80090ac:	b299      	uxth	r1, r3
 80090ae:	2314      	movs	r3, #20
 80090b0:	9300      	str	r3, [sp, #0]
 80090b2:	2302      	movs	r3, #2
 80090b4:	4a03      	ldr	r2, [pc, #12]	; (80090c4 <writeByte+0x3c>)
 80090b6:	4805      	ldr	r0, [pc, #20]	; (80090cc <writeByte+0x44>)
 80090b8:	f7f9 fede 	bl	8002e78 <HAL_I2C_Master_Transmit>
}
 80090bc:	bf00      	nop
 80090be:	3708      	adds	r7, #8
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bd80      	pop	{r7, pc}
 80090c4:	20004c08 	.word	0x20004c08
 80090c8:	20000018 	.word	0x20000018
 80090cc:	2000009c 	.word	0x2000009c

080090d0 <OLED_Refresh_Gram>:

#include "../../PeripheralDriver/Inc/oledfont.h"

uint8_t OLED_GRAM[128][8];	 
void OLED_Refresh_Gram(void)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b082      	sub	sp, #8
 80090d4:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 80090d6:	2300      	movs	r3, #0
 80090d8:	71fb      	strb	r3, [r7, #7]
 80090da:	e026      	b.n	800912a <OLED_Refresh_Gram+0x5a>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    
 80090dc:	79fb      	ldrb	r3, [r7, #7]
 80090de:	3b50      	subs	r3, #80	; 0x50
 80090e0:	b2db      	uxtb	r3, r3
 80090e2:	2100      	movs	r1, #0
 80090e4:	4618      	mov	r0, r3
 80090e6:	f000 f82b 	bl	8009140 <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      
 80090ea:	2100      	movs	r1, #0
 80090ec:	2000      	movs	r0, #0
 80090ee:	f000 f827 	bl	8009140 <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);        
 80090f2:	2100      	movs	r1, #0
 80090f4:	2010      	movs	r0, #16
 80090f6:	f000 f823 	bl	8009140 <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA); 
 80090fa:	2300      	movs	r3, #0
 80090fc:	71bb      	strb	r3, [r7, #6]
 80090fe:	e00d      	b.n	800911c <OLED_Refresh_Gram+0x4c>
 8009100:	79ba      	ldrb	r2, [r7, #6]
 8009102:	79fb      	ldrb	r3, [r7, #7]
 8009104:	490d      	ldr	r1, [pc, #52]	; (800913c <OLED_Refresh_Gram+0x6c>)
 8009106:	00d2      	lsls	r2, r2, #3
 8009108:	440a      	add	r2, r1
 800910a:	4413      	add	r3, r2
 800910c:	781b      	ldrb	r3, [r3, #0]
 800910e:	2101      	movs	r1, #1
 8009110:	4618      	mov	r0, r3
 8009112:	f000 f815 	bl	8009140 <OLED_WR_Byte>
 8009116:	79bb      	ldrb	r3, [r7, #6]
 8009118:	3301      	adds	r3, #1
 800911a:	71bb      	strb	r3, [r7, #6]
 800911c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8009120:	2b00      	cmp	r3, #0
 8009122:	daed      	bge.n	8009100 <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)  
 8009124:	79fb      	ldrb	r3, [r7, #7]
 8009126:	3301      	adds	r3, #1
 8009128:	71fb      	strb	r3, [r7, #7]
 800912a:	79fb      	ldrb	r3, [r7, #7]
 800912c:	2b07      	cmp	r3, #7
 800912e:	d9d5      	bls.n	80090dc <OLED_Refresh_Gram+0xc>
	}   
}
 8009130:	bf00      	nop
 8009132:	bf00      	nop
 8009134:	3708      	adds	r7, #8
 8009136:	46bd      	mov	sp, r7
 8009138:	bd80      	pop	{r7, pc}
 800913a:	bf00      	nop
 800913c:	20004c1c 	.word	0x20004c1c

08009140 <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{	
 8009140:	b580      	push	{r7, lr}
 8009142:	b084      	sub	sp, #16
 8009144:	af00      	add	r7, sp, #0
 8009146:	4603      	mov	r3, r0
 8009148:	460a      	mov	r2, r1
 800914a:	71fb      	strb	r3, [r7, #7]
 800914c:	4613      	mov	r3, r2
 800914e:	71bb      	strb	r3, [r7, #6]
	uint8_t i;			  
	if(cmd)
 8009150:	79bb      	ldrb	r3, [r7, #6]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d006      	beq.n	8009164 <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 8009156:	2201      	movs	r2, #1
 8009158:	f44f 7180 	mov.w	r1, #256	; 0x100
 800915c:	481c      	ldr	r0, [pc, #112]	; (80091d0 <OLED_WR_Byte+0x90>)
 800915e:	f7f9 fd13 	bl	8002b88 <HAL_GPIO_WritePin>
 8009162:	e005      	b.n	8009170 <OLED_WR_Byte+0x30>
	else 
	  OLED_RS_Clr();		  
 8009164:	2200      	movs	r2, #0
 8009166:	f44f 7180 	mov.w	r1, #256	; 0x100
 800916a:	4819      	ldr	r0, [pc, #100]	; (80091d0 <OLED_WR_Byte+0x90>)
 800916c:	f7f9 fd0c 	bl	8002b88 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 8009170:	2300      	movs	r3, #0
 8009172:	73fb      	strb	r3, [r7, #15]
 8009174:	e01e      	b.n	80091b4 <OLED_WR_Byte+0x74>
	{			  
		OLED_SCLK_Clr();
 8009176:	2200      	movs	r2, #0
 8009178:	2120      	movs	r1, #32
 800917a:	4815      	ldr	r0, [pc, #84]	; (80091d0 <OLED_WR_Byte+0x90>)
 800917c:	f7f9 fd04 	bl	8002b88 <HAL_GPIO_WritePin>
		if(dat&0x80)
 8009180:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009184:	2b00      	cmp	r3, #0
 8009186:	da05      	bge.n	8009194 <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 8009188:	2201      	movs	r2, #1
 800918a:	2140      	movs	r1, #64	; 0x40
 800918c:	4810      	ldr	r0, [pc, #64]	; (80091d0 <OLED_WR_Byte+0x90>)
 800918e:	f7f9 fcfb 	bl	8002b88 <HAL_GPIO_WritePin>
 8009192:	e004      	b.n	800919e <OLED_WR_Byte+0x5e>
		else 
		   OLED_SDIN_Clr();
 8009194:	2200      	movs	r2, #0
 8009196:	2140      	movs	r1, #64	; 0x40
 8009198:	480d      	ldr	r0, [pc, #52]	; (80091d0 <OLED_WR_Byte+0x90>)
 800919a:	f7f9 fcf5 	bl	8002b88 <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 800919e:	2201      	movs	r2, #1
 80091a0:	2120      	movs	r1, #32
 80091a2:	480b      	ldr	r0, [pc, #44]	; (80091d0 <OLED_WR_Byte+0x90>)
 80091a4:	f7f9 fcf0 	bl	8002b88 <HAL_GPIO_WritePin>
		dat<<=1;   
 80091a8:	79fb      	ldrb	r3, [r7, #7]
 80091aa:	005b      	lsls	r3, r3, #1
 80091ac:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 80091ae:	7bfb      	ldrb	r3, [r7, #15]
 80091b0:	3301      	adds	r3, #1
 80091b2:	73fb      	strb	r3, [r7, #15]
 80091b4:	7bfb      	ldrb	r3, [r7, #15]
 80091b6:	2b07      	cmp	r3, #7
 80091b8:	d9dd      	bls.n	8009176 <OLED_WR_Byte+0x36>
	}				 		  
	OLED_RS_Set();   	  
 80091ba:	2201      	movs	r2, #1
 80091bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80091c0:	4803      	ldr	r0, [pc, #12]	; (80091d0 <OLED_WR_Byte+0x90>)
 80091c2:	f7f9 fce1 	bl	8002b88 <HAL_GPIO_WritePin>
} 
 80091c6:	bf00      	nop
 80091c8:	3710      	adds	r7, #16
 80091ca:	46bd      	mov	sp, r7
 80091cc:	bd80      	pop	{r7, pc}
 80091ce:	bf00      	nop
 80091d0:	40021000 	.word	0x40021000

080091d4 <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b082      	sub	sp, #8
 80091d8:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 80091da:	2300      	movs	r3, #0
 80091dc:	71fb      	strb	r3, [r7, #7]
 80091de:	e014      	b.n	800920a <OLED_Clear+0x36>
 80091e0:	2300      	movs	r3, #0
 80091e2:	71bb      	strb	r3, [r7, #6]
 80091e4:	e00a      	b.n	80091fc <OLED_Clear+0x28>
 80091e6:	79ba      	ldrb	r2, [r7, #6]
 80091e8:	79fb      	ldrb	r3, [r7, #7]
 80091ea:	490c      	ldr	r1, [pc, #48]	; (800921c <OLED_Clear+0x48>)
 80091ec:	00d2      	lsls	r2, r2, #3
 80091ee:	440a      	add	r2, r1
 80091f0:	4413      	add	r3, r2
 80091f2:	2200      	movs	r2, #0
 80091f4:	701a      	strb	r2, [r3, #0]
 80091f6:	79bb      	ldrb	r3, [r7, #6]
 80091f8:	3301      	adds	r3, #1
 80091fa:	71bb      	strb	r3, [r7, #6]
 80091fc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8009200:	2b00      	cmp	r3, #0
 8009202:	daf0      	bge.n	80091e6 <OLED_Clear+0x12>
 8009204:	79fb      	ldrb	r3, [r7, #7]
 8009206:	3301      	adds	r3, #1
 8009208:	71fb      	strb	r3, [r7, #7]
 800920a:	79fb      	ldrb	r3, [r7, #7]
 800920c:	2b07      	cmp	r3, #7
 800920e:	d9e7      	bls.n	80091e0 <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 8009210:	f7ff ff5e 	bl	80090d0 <OLED_Refresh_Gram>
}
 8009214:	bf00      	nop
 8009216:	3708      	adds	r7, #8
 8009218:	46bd      	mov	sp, r7
 800921a:	bd80      	pop	{r7, pc}
 800921c:	20004c1c 	.word	0x20004c1c

08009220 <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 8009220:	b480      	push	{r7}
 8009222:	b085      	sub	sp, #20
 8009224:	af00      	add	r7, sp, #0
 8009226:	4603      	mov	r3, r0
 8009228:	71fb      	strb	r3, [r7, #7]
 800922a:	460b      	mov	r3, r1
 800922c:	71bb      	strb	r3, [r7, #6]
 800922e:	4613      	mov	r3, r2
 8009230:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 8009232:	2300      	movs	r3, #0
 8009234:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 8009236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800923a:	2b00      	cmp	r3, #0
 800923c:	db41      	blt.n	80092c2 <OLED_DrawPoint+0xa2>
 800923e:	79bb      	ldrb	r3, [r7, #6]
 8009240:	2b3f      	cmp	r3, #63	; 0x3f
 8009242:	d83e      	bhi.n	80092c2 <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 8009244:	79bb      	ldrb	r3, [r7, #6]
 8009246:	08db      	lsrs	r3, r3, #3
 8009248:	b2db      	uxtb	r3, r3
 800924a:	f1c3 0307 	rsb	r3, r3, #7
 800924e:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 8009250:	79bb      	ldrb	r3, [r7, #6]
 8009252:	f003 0307 	and.w	r3, r3, #7
 8009256:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 8009258:	7b7b      	ldrb	r3, [r7, #13]
 800925a:	f1c3 0307 	rsb	r3, r3, #7
 800925e:	2201      	movs	r2, #1
 8009260:	fa02 f303 	lsl.w	r3, r2, r3
 8009264:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 8009266:	797b      	ldrb	r3, [r7, #5]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d012      	beq.n	8009292 <OLED_DrawPoint+0x72>
 800926c:	79fa      	ldrb	r2, [r7, #7]
 800926e:	7bbb      	ldrb	r3, [r7, #14]
 8009270:	4917      	ldr	r1, [pc, #92]	; (80092d0 <OLED_DrawPoint+0xb0>)
 8009272:	00d2      	lsls	r2, r2, #3
 8009274:	440a      	add	r2, r1
 8009276:	4413      	add	r3, r2
 8009278:	7818      	ldrb	r0, [r3, #0]
 800927a:	79fa      	ldrb	r2, [r7, #7]
 800927c:	7bbb      	ldrb	r3, [r7, #14]
 800927e:	7bf9      	ldrb	r1, [r7, #15]
 8009280:	4301      	orrs	r1, r0
 8009282:	b2c8      	uxtb	r0, r1
 8009284:	4912      	ldr	r1, [pc, #72]	; (80092d0 <OLED_DrawPoint+0xb0>)
 8009286:	00d2      	lsls	r2, r2, #3
 8009288:	440a      	add	r2, r1
 800928a:	4413      	add	r3, r2
 800928c:	4602      	mov	r2, r0
 800928e:	701a      	strb	r2, [r3, #0]
 8009290:	e018      	b.n	80092c4 <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 8009292:	79fa      	ldrb	r2, [r7, #7]
 8009294:	7bbb      	ldrb	r3, [r7, #14]
 8009296:	490e      	ldr	r1, [pc, #56]	; (80092d0 <OLED_DrawPoint+0xb0>)
 8009298:	00d2      	lsls	r2, r2, #3
 800929a:	440a      	add	r2, r1
 800929c:	4413      	add	r3, r2
 800929e:	781b      	ldrb	r3, [r3, #0]
 80092a0:	b25a      	sxtb	r2, r3
 80092a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80092a6:	43db      	mvns	r3, r3
 80092a8:	b25b      	sxtb	r3, r3
 80092aa:	4013      	ands	r3, r2
 80092ac:	b259      	sxtb	r1, r3
 80092ae:	79fa      	ldrb	r2, [r7, #7]
 80092b0:	7bbb      	ldrb	r3, [r7, #14]
 80092b2:	b2c8      	uxtb	r0, r1
 80092b4:	4906      	ldr	r1, [pc, #24]	; (80092d0 <OLED_DrawPoint+0xb0>)
 80092b6:	00d2      	lsls	r2, r2, #3
 80092b8:	440a      	add	r2, r1
 80092ba:	4413      	add	r3, r2
 80092bc:	4602      	mov	r2, r0
 80092be:	701a      	strb	r2, [r3, #0]
 80092c0:	e000      	b.n	80092c4 <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 80092c2:	bf00      	nop
}
 80092c4:	3714      	adds	r7, #20
 80092c6:	46bd      	mov	sp, r7
 80092c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092cc:	4770      	bx	lr
 80092ce:	bf00      	nop
 80092d0:	20004c1c 	.word	0x20004c1c

080092d4 <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 80092d4:	b590      	push	{r4, r7, lr}
 80092d6:	b085      	sub	sp, #20
 80092d8:	af00      	add	r7, sp, #0
 80092da:	4604      	mov	r4, r0
 80092dc:	4608      	mov	r0, r1
 80092de:	4611      	mov	r1, r2
 80092e0:	461a      	mov	r2, r3
 80092e2:	4623      	mov	r3, r4
 80092e4:	71fb      	strb	r3, [r7, #7]
 80092e6:	4603      	mov	r3, r0
 80092e8:	71bb      	strb	r3, [r7, #6]
 80092ea:	460b      	mov	r3, r1
 80092ec:	717b      	strb	r3, [r7, #5]
 80092ee:	4613      	mov	r3, r2
 80092f0:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 80092f2:	79bb      	ldrb	r3, [r7, #6]
 80092f4:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 80092f6:	797b      	ldrb	r3, [r7, #5]
 80092f8:	3b20      	subs	r3, #32
 80092fa:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 80092fc:	2300      	movs	r3, #0
 80092fe:	73bb      	strb	r3, [r7, #14]
 8009300:	e04d      	b.n	800939e <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 8009302:	793b      	ldrb	r3, [r7, #4]
 8009304:	2b0c      	cmp	r3, #12
 8009306:	d10b      	bne.n	8009320 <OLED_ShowChar+0x4c>
 8009308:	797a      	ldrb	r2, [r7, #5]
 800930a:	7bb9      	ldrb	r1, [r7, #14]
 800930c:	4828      	ldr	r0, [pc, #160]	; (80093b0 <OLED_ShowChar+0xdc>)
 800930e:	4613      	mov	r3, r2
 8009310:	005b      	lsls	r3, r3, #1
 8009312:	4413      	add	r3, r2
 8009314:	009b      	lsls	r3, r3, #2
 8009316:	4403      	add	r3, r0
 8009318:	440b      	add	r3, r1
 800931a:	781b      	ldrb	r3, [r3, #0]
 800931c:	73fb      	strb	r3, [r7, #15]
 800931e:	e007      	b.n	8009330 <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 8009320:	797a      	ldrb	r2, [r7, #5]
 8009322:	7bbb      	ldrb	r3, [r7, #14]
 8009324:	4923      	ldr	r1, [pc, #140]	; (80093b4 <OLED_ShowChar+0xe0>)
 8009326:	0112      	lsls	r2, r2, #4
 8009328:	440a      	add	r2, r1
 800932a:	4413      	add	r3, r2
 800932c:	781b      	ldrb	r3, [r3, #0]
 800932e:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 8009330:	2300      	movs	r3, #0
 8009332:	737b      	strb	r3, [r7, #13]
 8009334:	e02d      	b.n	8009392 <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 8009336:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800933a:	2b00      	cmp	r3, #0
 800933c:	da07      	bge.n	800934e <OLED_ShowChar+0x7a>
 800933e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8009342:	79b9      	ldrb	r1, [r7, #6]
 8009344:	79fb      	ldrb	r3, [r7, #7]
 8009346:	4618      	mov	r0, r3
 8009348:	f7ff ff6a 	bl	8009220 <OLED_DrawPoint>
 800934c:	e00c      	b.n	8009368 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 800934e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009352:	2b00      	cmp	r3, #0
 8009354:	bf0c      	ite	eq
 8009356:	2301      	moveq	r3, #1
 8009358:	2300      	movne	r3, #0
 800935a:	b2db      	uxtb	r3, r3
 800935c:	461a      	mov	r2, r3
 800935e:	79b9      	ldrb	r1, [r7, #6]
 8009360:	79fb      	ldrb	r3, [r7, #7]
 8009362:	4618      	mov	r0, r3
 8009364:	f7ff ff5c 	bl	8009220 <OLED_DrawPoint>
			temp<<=1;
 8009368:	7bfb      	ldrb	r3, [r7, #15]
 800936a:	005b      	lsls	r3, r3, #1
 800936c:	73fb      	strb	r3, [r7, #15]
			y++;
 800936e:	79bb      	ldrb	r3, [r7, #6]
 8009370:	3301      	adds	r3, #1
 8009372:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 8009374:	79ba      	ldrb	r2, [r7, #6]
 8009376:	7b3b      	ldrb	r3, [r7, #12]
 8009378:	1ad2      	subs	r2, r2, r3
 800937a:	793b      	ldrb	r3, [r7, #4]
 800937c:	429a      	cmp	r2, r3
 800937e:	d105      	bne.n	800938c <OLED_ShowChar+0xb8>
			{
				y=y0;
 8009380:	7b3b      	ldrb	r3, [r7, #12]
 8009382:	71bb      	strb	r3, [r7, #6]
				x++;
 8009384:	79fb      	ldrb	r3, [r7, #7]
 8009386:	3301      	adds	r3, #1
 8009388:	71fb      	strb	r3, [r7, #7]
				break;
 800938a:	e005      	b.n	8009398 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 800938c:	7b7b      	ldrb	r3, [r7, #13]
 800938e:	3301      	adds	r3, #1
 8009390:	737b      	strb	r3, [r7, #13]
 8009392:	7b7b      	ldrb	r3, [r7, #13]
 8009394:	2b07      	cmp	r3, #7
 8009396:	d9ce      	bls.n	8009336 <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 8009398:	7bbb      	ldrb	r3, [r7, #14]
 800939a:	3301      	adds	r3, #1
 800939c:	73bb      	strb	r3, [r7, #14]
 800939e:	7bba      	ldrb	r2, [r7, #14]
 80093a0:	793b      	ldrb	r3, [r7, #4]
 80093a2:	429a      	cmp	r2, r3
 80093a4:	d3ad      	bcc.n	8009302 <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 80093a6:	bf00      	nop
 80093a8:	bf00      	nop
 80093aa:	3714      	adds	r7, #20
 80093ac:	46bd      	mov	sp, r7
 80093ae:	bd90      	pop	{r4, r7, pc}
 80093b0:	08009fd4 	.word	0x08009fd4
 80093b4:	0800a448 	.word	0x0800a448

080093b8 <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	b084      	sub	sp, #16
 80093bc:	af02      	add	r7, sp, #8
 80093be:	4603      	mov	r3, r0
 80093c0:	603a      	str	r2, [r7, #0]
 80093c2:	71fb      	strb	r3, [r7, #7]
 80093c4:	460b      	mov	r3, r1
 80093c6:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 80093c8:	e01f      	b.n	800940a <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 80093ca:	79fb      	ldrb	r3, [r7, #7]
 80093cc:	2b7a      	cmp	r3, #122	; 0x7a
 80093ce:	d904      	bls.n	80093da <OLED_ShowString+0x22>
 80093d0:	2300      	movs	r3, #0
 80093d2:	71fb      	strb	r3, [r7, #7]
 80093d4:	79bb      	ldrb	r3, [r7, #6]
 80093d6:	3310      	adds	r3, #16
 80093d8:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 80093da:	79bb      	ldrb	r3, [r7, #6]
 80093dc:	2b3a      	cmp	r3, #58	; 0x3a
 80093de:	d905      	bls.n	80093ec <OLED_ShowString+0x34>
 80093e0:	2300      	movs	r3, #0
 80093e2:	71fb      	strb	r3, [r7, #7]
 80093e4:	79fb      	ldrb	r3, [r7, #7]
 80093e6:	71bb      	strb	r3, [r7, #6]
 80093e8:	f7ff fef4 	bl	80091d4 <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	781a      	ldrb	r2, [r3, #0]
 80093f0:	79b9      	ldrb	r1, [r7, #6]
 80093f2:	79f8      	ldrb	r0, [r7, #7]
 80093f4:	2301      	movs	r3, #1
 80093f6:	9300      	str	r3, [sp, #0]
 80093f8:	230c      	movs	r3, #12
 80093fa:	f7ff ff6b 	bl	80092d4 <OLED_ShowChar>
        x+=8;
 80093fe:	79fb      	ldrb	r3, [r7, #7]
 8009400:	3308      	adds	r3, #8
 8009402:	71fb      	strb	r3, [r7, #7]
        p++;
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	3301      	adds	r3, #1
 8009408:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	781b      	ldrb	r3, [r3, #0]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d1db      	bne.n	80093ca <OLED_ShowString+0x12>
    }  
}	 
 8009412:	bf00      	nop
 8009414:	bf00      	nop
 8009416:	3708      	adds	r7, #8
 8009418:	46bd      	mov	sp, r7
 800941a:	bd80      	pop	{r7, pc}

0800941c <OLED_Init>:

void OLED_Init(void)
{
 800941c:	b580      	push	{r7, lr}
 800941e:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 8009420:	f7fa fb7c 	bl	8003b1c <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 8009424:	4b41      	ldr	r3, [pc, #260]	; (800952c <OLED_Init+0x110>)
 8009426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009428:	4a40      	ldr	r2, [pc, #256]	; (800952c <OLED_Init+0x110>)
 800942a:	f023 0301 	bic.w	r3, r3, #1
 800942e:	6713      	str	r3, [r2, #112]	; 0x70
 8009430:	4b3e      	ldr	r3, [pc, #248]	; (800952c <OLED_Init+0x110>)
 8009432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009434:	4a3d      	ldr	r2, [pc, #244]	; (800952c <OLED_Init+0x110>)
 8009436:	f023 0304 	bic.w	r3, r3, #4
 800943a:	6713      	str	r3, [r2, #112]	; 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 800943c:	f7fa fb82 	bl	8003b44 <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 8009440:	2200      	movs	r2, #0
 8009442:	2180      	movs	r1, #128	; 0x80
 8009444:	483a      	ldr	r0, [pc, #232]	; (8009530 <OLED_Init+0x114>)
 8009446:	f7f9 fb9f 	bl	8002b88 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800944a:	2064      	movs	r0, #100	; 0x64
 800944c:	f7f9 f838 	bl	80024c0 <HAL_Delay>
	OLED_RST_Set();
 8009450:	2201      	movs	r2, #1
 8009452:	2180      	movs	r1, #128	; 0x80
 8009454:	4836      	ldr	r0, [pc, #216]	; (8009530 <OLED_Init+0x114>)
 8009456:	f7f9 fb97 	bl	8002b88 <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 800945a:	2100      	movs	r1, #0
 800945c:	20ae      	movs	r0, #174	; 0xae
 800945e:	f7ff fe6f 	bl	8009140 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 8009462:	2100      	movs	r1, #0
 8009464:	20d5      	movs	r0, #213	; 0xd5
 8009466:	f7ff fe6b 	bl	8009140 <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 800946a:	2100      	movs	r1, #0
 800946c:	2050      	movs	r0, #80	; 0x50
 800946e:	f7ff fe67 	bl	8009140 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 8009472:	2100      	movs	r1, #0
 8009474:	20a8      	movs	r0, #168	; 0xa8
 8009476:	f7ff fe63 	bl	8009140 <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 800947a:	2100      	movs	r1, #0
 800947c:	203f      	movs	r0, #63	; 0x3f
 800947e:	f7ff fe5f 	bl	8009140 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 8009482:	2100      	movs	r1, #0
 8009484:	20d3      	movs	r0, #211	; 0xd3
 8009486:	f7ff fe5b 	bl	8009140 <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 800948a:	2100      	movs	r1, #0
 800948c:	2000      	movs	r0, #0
 800948e:	f7ff fe57 	bl	8009140 <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 8009492:	2100      	movs	r1, #0
 8009494:	2040      	movs	r0, #64	; 0x40
 8009496:	f7ff fe53 	bl	8009140 <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 800949a:	2100      	movs	r1, #0
 800949c:	208d      	movs	r0, #141	; 0x8d
 800949e:	f7ff fe4f 	bl	8009140 <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 80094a2:	2100      	movs	r1, #0
 80094a4:	2014      	movs	r0, #20
 80094a6:	f7ff fe4b 	bl	8009140 <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 80094aa:	2100      	movs	r1, #0
 80094ac:	2020      	movs	r0, #32
 80094ae:	f7ff fe47 	bl	8009140 <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 80094b2:	2100      	movs	r1, #0
 80094b4:	2002      	movs	r0, #2
 80094b6:	f7ff fe43 	bl	8009140 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 80094ba:	2100      	movs	r1, #0
 80094bc:	20a1      	movs	r0, #161	; 0xa1
 80094be:	f7ff fe3f 	bl	8009140 <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 80094c2:	2100      	movs	r1, #0
 80094c4:	20c0      	movs	r0, #192	; 0xc0
 80094c6:	f7ff fe3b 	bl	8009140 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 80094ca:	2100      	movs	r1, #0
 80094cc:	20da      	movs	r0, #218	; 0xda
 80094ce:	f7ff fe37 	bl	8009140 <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 80094d2:	2100      	movs	r1, #0
 80094d4:	2012      	movs	r0, #18
 80094d6:	f7ff fe33 	bl	8009140 <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 80094da:	2100      	movs	r1, #0
 80094dc:	2081      	movs	r0, #129	; 0x81
 80094de:	f7ff fe2f 	bl	8009140 <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 80094e2:	2100      	movs	r1, #0
 80094e4:	20ef      	movs	r0, #239	; 0xef
 80094e6:	f7ff fe2b 	bl	8009140 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 80094ea:	2100      	movs	r1, #0
 80094ec:	20d9      	movs	r0, #217	; 0xd9
 80094ee:	f7ff fe27 	bl	8009140 <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 80094f2:	2100      	movs	r1, #0
 80094f4:	20f1      	movs	r0, #241	; 0xf1
 80094f6:	f7ff fe23 	bl	8009140 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 80094fa:	2100      	movs	r1, #0
 80094fc:	20db      	movs	r0, #219	; 0xdb
 80094fe:	f7ff fe1f 	bl	8009140 <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 8009502:	2100      	movs	r1, #0
 8009504:	2030      	movs	r0, #48	; 0x30
 8009506:	f7ff fe1b 	bl	8009140 <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 800950a:	2100      	movs	r1, #0
 800950c:	20a4      	movs	r0, #164	; 0xa4
 800950e:	f7ff fe17 	bl	8009140 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 8009512:	2100      	movs	r1, #0
 8009514:	20a6      	movs	r0, #166	; 0xa6
 8009516:	f7ff fe13 	bl	8009140 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 800951a:	2100      	movs	r1, #0
 800951c:	20af      	movs	r0, #175	; 0xaf
 800951e:	f7ff fe0f 	bl	8009140 <OLED_WR_Byte>
	OLED_Clear(); 
 8009522:	f7ff fe57 	bl	80091d4 <OLED_Clear>
 8009526:	bf00      	nop
 8009528:	bd80      	pop	{r7, pc}
 800952a:	bf00      	nop
 800952c:	40023800 	.word	0x40023800
 8009530:	40021000 	.word	0x40021000

08009534 <__errno>:
 8009534:	4b01      	ldr	r3, [pc, #4]	; (800953c <__errno+0x8>)
 8009536:	6818      	ldr	r0, [r3, #0]
 8009538:	4770      	bx	lr
 800953a:	bf00      	nop
 800953c:	2000001c 	.word	0x2000001c

08009540 <__libc_init_array>:
 8009540:	b570      	push	{r4, r5, r6, lr}
 8009542:	4d0d      	ldr	r5, [pc, #52]	; (8009578 <__libc_init_array+0x38>)
 8009544:	4c0d      	ldr	r4, [pc, #52]	; (800957c <__libc_init_array+0x3c>)
 8009546:	1b64      	subs	r4, r4, r5
 8009548:	10a4      	asrs	r4, r4, #2
 800954a:	2600      	movs	r6, #0
 800954c:	42a6      	cmp	r6, r4
 800954e:	d109      	bne.n	8009564 <__libc_init_array+0x24>
 8009550:	4d0b      	ldr	r5, [pc, #44]	; (8009580 <__libc_init_array+0x40>)
 8009552:	4c0c      	ldr	r4, [pc, #48]	; (8009584 <__libc_init_array+0x44>)
 8009554:	f000 fc9e 	bl	8009e94 <_init>
 8009558:	1b64      	subs	r4, r4, r5
 800955a:	10a4      	asrs	r4, r4, #2
 800955c:	2600      	movs	r6, #0
 800955e:	42a6      	cmp	r6, r4
 8009560:	d105      	bne.n	800956e <__libc_init_array+0x2e>
 8009562:	bd70      	pop	{r4, r5, r6, pc}
 8009564:	f855 3b04 	ldr.w	r3, [r5], #4
 8009568:	4798      	blx	r3
 800956a:	3601      	adds	r6, #1
 800956c:	e7ee      	b.n	800954c <__libc_init_array+0xc>
 800956e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009572:	4798      	blx	r3
 8009574:	3601      	adds	r6, #1
 8009576:	e7f2      	b.n	800955e <__libc_init_array+0x1e>
 8009578:	0800aa74 	.word	0x0800aa74
 800957c:	0800aa74 	.word	0x0800aa74
 8009580:	0800aa74 	.word	0x0800aa74
 8009584:	0800aa78 	.word	0x0800aa78

08009588 <malloc>:
 8009588:	4b02      	ldr	r3, [pc, #8]	; (8009594 <malloc+0xc>)
 800958a:	4601      	mov	r1, r0
 800958c:	6818      	ldr	r0, [r3, #0]
 800958e:	f000 b88d 	b.w	80096ac <_malloc_r>
 8009592:	bf00      	nop
 8009594:	2000001c 	.word	0x2000001c

08009598 <free>:
 8009598:	4b02      	ldr	r3, [pc, #8]	; (80095a4 <free+0xc>)
 800959a:	4601      	mov	r1, r0
 800959c:	6818      	ldr	r0, [r3, #0]
 800959e:	f000 b819 	b.w	80095d4 <_free_r>
 80095a2:	bf00      	nop
 80095a4:	2000001c 	.word	0x2000001c

080095a8 <memcpy>:
 80095a8:	440a      	add	r2, r1
 80095aa:	4291      	cmp	r1, r2
 80095ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80095b0:	d100      	bne.n	80095b4 <memcpy+0xc>
 80095b2:	4770      	bx	lr
 80095b4:	b510      	push	{r4, lr}
 80095b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80095ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80095be:	4291      	cmp	r1, r2
 80095c0:	d1f9      	bne.n	80095b6 <memcpy+0xe>
 80095c2:	bd10      	pop	{r4, pc}

080095c4 <memset>:
 80095c4:	4402      	add	r2, r0
 80095c6:	4603      	mov	r3, r0
 80095c8:	4293      	cmp	r3, r2
 80095ca:	d100      	bne.n	80095ce <memset+0xa>
 80095cc:	4770      	bx	lr
 80095ce:	f803 1b01 	strb.w	r1, [r3], #1
 80095d2:	e7f9      	b.n	80095c8 <memset+0x4>

080095d4 <_free_r>:
 80095d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80095d6:	2900      	cmp	r1, #0
 80095d8:	d044      	beq.n	8009664 <_free_r+0x90>
 80095da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80095de:	9001      	str	r0, [sp, #4]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	f1a1 0404 	sub.w	r4, r1, #4
 80095e6:	bfb8      	it	lt
 80095e8:	18e4      	addlt	r4, r4, r3
 80095ea:	f000 f903 	bl	80097f4 <__malloc_lock>
 80095ee:	4a1e      	ldr	r2, [pc, #120]	; (8009668 <_free_r+0x94>)
 80095f0:	9801      	ldr	r0, [sp, #4]
 80095f2:	6813      	ldr	r3, [r2, #0]
 80095f4:	b933      	cbnz	r3, 8009604 <_free_r+0x30>
 80095f6:	6063      	str	r3, [r4, #4]
 80095f8:	6014      	str	r4, [r2, #0]
 80095fa:	b003      	add	sp, #12
 80095fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009600:	f000 b8fe 	b.w	8009800 <__malloc_unlock>
 8009604:	42a3      	cmp	r3, r4
 8009606:	d908      	bls.n	800961a <_free_r+0x46>
 8009608:	6825      	ldr	r5, [r4, #0]
 800960a:	1961      	adds	r1, r4, r5
 800960c:	428b      	cmp	r3, r1
 800960e:	bf01      	itttt	eq
 8009610:	6819      	ldreq	r1, [r3, #0]
 8009612:	685b      	ldreq	r3, [r3, #4]
 8009614:	1949      	addeq	r1, r1, r5
 8009616:	6021      	streq	r1, [r4, #0]
 8009618:	e7ed      	b.n	80095f6 <_free_r+0x22>
 800961a:	461a      	mov	r2, r3
 800961c:	685b      	ldr	r3, [r3, #4]
 800961e:	b10b      	cbz	r3, 8009624 <_free_r+0x50>
 8009620:	42a3      	cmp	r3, r4
 8009622:	d9fa      	bls.n	800961a <_free_r+0x46>
 8009624:	6811      	ldr	r1, [r2, #0]
 8009626:	1855      	adds	r5, r2, r1
 8009628:	42a5      	cmp	r5, r4
 800962a:	d10b      	bne.n	8009644 <_free_r+0x70>
 800962c:	6824      	ldr	r4, [r4, #0]
 800962e:	4421      	add	r1, r4
 8009630:	1854      	adds	r4, r2, r1
 8009632:	42a3      	cmp	r3, r4
 8009634:	6011      	str	r1, [r2, #0]
 8009636:	d1e0      	bne.n	80095fa <_free_r+0x26>
 8009638:	681c      	ldr	r4, [r3, #0]
 800963a:	685b      	ldr	r3, [r3, #4]
 800963c:	6053      	str	r3, [r2, #4]
 800963e:	4421      	add	r1, r4
 8009640:	6011      	str	r1, [r2, #0]
 8009642:	e7da      	b.n	80095fa <_free_r+0x26>
 8009644:	d902      	bls.n	800964c <_free_r+0x78>
 8009646:	230c      	movs	r3, #12
 8009648:	6003      	str	r3, [r0, #0]
 800964a:	e7d6      	b.n	80095fa <_free_r+0x26>
 800964c:	6825      	ldr	r5, [r4, #0]
 800964e:	1961      	adds	r1, r4, r5
 8009650:	428b      	cmp	r3, r1
 8009652:	bf04      	itt	eq
 8009654:	6819      	ldreq	r1, [r3, #0]
 8009656:	685b      	ldreq	r3, [r3, #4]
 8009658:	6063      	str	r3, [r4, #4]
 800965a:	bf04      	itt	eq
 800965c:	1949      	addeq	r1, r1, r5
 800965e:	6021      	streq	r1, [r4, #0]
 8009660:	6054      	str	r4, [r2, #4]
 8009662:	e7ca      	b.n	80095fa <_free_r+0x26>
 8009664:	b003      	add	sp, #12
 8009666:	bd30      	pop	{r4, r5, pc}
 8009668:	2000501c 	.word	0x2000501c

0800966c <sbrk_aligned>:
 800966c:	b570      	push	{r4, r5, r6, lr}
 800966e:	4e0e      	ldr	r6, [pc, #56]	; (80096a8 <sbrk_aligned+0x3c>)
 8009670:	460c      	mov	r4, r1
 8009672:	6831      	ldr	r1, [r6, #0]
 8009674:	4605      	mov	r5, r0
 8009676:	b911      	cbnz	r1, 800967e <sbrk_aligned+0x12>
 8009678:	f000 f88c 	bl	8009794 <_sbrk_r>
 800967c:	6030      	str	r0, [r6, #0]
 800967e:	4621      	mov	r1, r4
 8009680:	4628      	mov	r0, r5
 8009682:	f000 f887 	bl	8009794 <_sbrk_r>
 8009686:	1c43      	adds	r3, r0, #1
 8009688:	d00a      	beq.n	80096a0 <sbrk_aligned+0x34>
 800968a:	1cc4      	adds	r4, r0, #3
 800968c:	f024 0403 	bic.w	r4, r4, #3
 8009690:	42a0      	cmp	r0, r4
 8009692:	d007      	beq.n	80096a4 <sbrk_aligned+0x38>
 8009694:	1a21      	subs	r1, r4, r0
 8009696:	4628      	mov	r0, r5
 8009698:	f000 f87c 	bl	8009794 <_sbrk_r>
 800969c:	3001      	adds	r0, #1
 800969e:	d101      	bne.n	80096a4 <sbrk_aligned+0x38>
 80096a0:	f04f 34ff 	mov.w	r4, #4294967295
 80096a4:	4620      	mov	r0, r4
 80096a6:	bd70      	pop	{r4, r5, r6, pc}
 80096a8:	20005020 	.word	0x20005020

080096ac <_malloc_r>:
 80096ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096b0:	1ccd      	adds	r5, r1, #3
 80096b2:	f025 0503 	bic.w	r5, r5, #3
 80096b6:	3508      	adds	r5, #8
 80096b8:	2d0c      	cmp	r5, #12
 80096ba:	bf38      	it	cc
 80096bc:	250c      	movcc	r5, #12
 80096be:	2d00      	cmp	r5, #0
 80096c0:	4607      	mov	r7, r0
 80096c2:	db01      	blt.n	80096c8 <_malloc_r+0x1c>
 80096c4:	42a9      	cmp	r1, r5
 80096c6:	d905      	bls.n	80096d4 <_malloc_r+0x28>
 80096c8:	230c      	movs	r3, #12
 80096ca:	603b      	str	r3, [r7, #0]
 80096cc:	2600      	movs	r6, #0
 80096ce:	4630      	mov	r0, r6
 80096d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096d4:	4e2e      	ldr	r6, [pc, #184]	; (8009790 <_malloc_r+0xe4>)
 80096d6:	f000 f88d 	bl	80097f4 <__malloc_lock>
 80096da:	6833      	ldr	r3, [r6, #0]
 80096dc:	461c      	mov	r4, r3
 80096de:	bb34      	cbnz	r4, 800972e <_malloc_r+0x82>
 80096e0:	4629      	mov	r1, r5
 80096e2:	4638      	mov	r0, r7
 80096e4:	f7ff ffc2 	bl	800966c <sbrk_aligned>
 80096e8:	1c43      	adds	r3, r0, #1
 80096ea:	4604      	mov	r4, r0
 80096ec:	d14d      	bne.n	800978a <_malloc_r+0xde>
 80096ee:	6834      	ldr	r4, [r6, #0]
 80096f0:	4626      	mov	r6, r4
 80096f2:	2e00      	cmp	r6, #0
 80096f4:	d140      	bne.n	8009778 <_malloc_r+0xcc>
 80096f6:	6823      	ldr	r3, [r4, #0]
 80096f8:	4631      	mov	r1, r6
 80096fa:	4638      	mov	r0, r7
 80096fc:	eb04 0803 	add.w	r8, r4, r3
 8009700:	f000 f848 	bl	8009794 <_sbrk_r>
 8009704:	4580      	cmp	r8, r0
 8009706:	d13a      	bne.n	800977e <_malloc_r+0xd2>
 8009708:	6821      	ldr	r1, [r4, #0]
 800970a:	3503      	adds	r5, #3
 800970c:	1a6d      	subs	r5, r5, r1
 800970e:	f025 0503 	bic.w	r5, r5, #3
 8009712:	3508      	adds	r5, #8
 8009714:	2d0c      	cmp	r5, #12
 8009716:	bf38      	it	cc
 8009718:	250c      	movcc	r5, #12
 800971a:	4629      	mov	r1, r5
 800971c:	4638      	mov	r0, r7
 800971e:	f7ff ffa5 	bl	800966c <sbrk_aligned>
 8009722:	3001      	adds	r0, #1
 8009724:	d02b      	beq.n	800977e <_malloc_r+0xd2>
 8009726:	6823      	ldr	r3, [r4, #0]
 8009728:	442b      	add	r3, r5
 800972a:	6023      	str	r3, [r4, #0]
 800972c:	e00e      	b.n	800974c <_malloc_r+0xa0>
 800972e:	6822      	ldr	r2, [r4, #0]
 8009730:	1b52      	subs	r2, r2, r5
 8009732:	d41e      	bmi.n	8009772 <_malloc_r+0xc6>
 8009734:	2a0b      	cmp	r2, #11
 8009736:	d916      	bls.n	8009766 <_malloc_r+0xba>
 8009738:	1961      	adds	r1, r4, r5
 800973a:	42a3      	cmp	r3, r4
 800973c:	6025      	str	r5, [r4, #0]
 800973e:	bf18      	it	ne
 8009740:	6059      	strne	r1, [r3, #4]
 8009742:	6863      	ldr	r3, [r4, #4]
 8009744:	bf08      	it	eq
 8009746:	6031      	streq	r1, [r6, #0]
 8009748:	5162      	str	r2, [r4, r5]
 800974a:	604b      	str	r3, [r1, #4]
 800974c:	4638      	mov	r0, r7
 800974e:	f104 060b 	add.w	r6, r4, #11
 8009752:	f000 f855 	bl	8009800 <__malloc_unlock>
 8009756:	f026 0607 	bic.w	r6, r6, #7
 800975a:	1d23      	adds	r3, r4, #4
 800975c:	1af2      	subs	r2, r6, r3
 800975e:	d0b6      	beq.n	80096ce <_malloc_r+0x22>
 8009760:	1b9b      	subs	r3, r3, r6
 8009762:	50a3      	str	r3, [r4, r2]
 8009764:	e7b3      	b.n	80096ce <_malloc_r+0x22>
 8009766:	6862      	ldr	r2, [r4, #4]
 8009768:	42a3      	cmp	r3, r4
 800976a:	bf0c      	ite	eq
 800976c:	6032      	streq	r2, [r6, #0]
 800976e:	605a      	strne	r2, [r3, #4]
 8009770:	e7ec      	b.n	800974c <_malloc_r+0xa0>
 8009772:	4623      	mov	r3, r4
 8009774:	6864      	ldr	r4, [r4, #4]
 8009776:	e7b2      	b.n	80096de <_malloc_r+0x32>
 8009778:	4634      	mov	r4, r6
 800977a:	6876      	ldr	r6, [r6, #4]
 800977c:	e7b9      	b.n	80096f2 <_malloc_r+0x46>
 800977e:	230c      	movs	r3, #12
 8009780:	603b      	str	r3, [r7, #0]
 8009782:	4638      	mov	r0, r7
 8009784:	f000 f83c 	bl	8009800 <__malloc_unlock>
 8009788:	e7a1      	b.n	80096ce <_malloc_r+0x22>
 800978a:	6025      	str	r5, [r4, #0]
 800978c:	e7de      	b.n	800974c <_malloc_r+0xa0>
 800978e:	bf00      	nop
 8009790:	2000501c 	.word	0x2000501c

08009794 <_sbrk_r>:
 8009794:	b538      	push	{r3, r4, r5, lr}
 8009796:	4d06      	ldr	r5, [pc, #24]	; (80097b0 <_sbrk_r+0x1c>)
 8009798:	2300      	movs	r3, #0
 800979a:	4604      	mov	r4, r0
 800979c:	4608      	mov	r0, r1
 800979e:	602b      	str	r3, [r5, #0]
 80097a0:	f7f8 fdaa 	bl	80022f8 <_sbrk>
 80097a4:	1c43      	adds	r3, r0, #1
 80097a6:	d102      	bne.n	80097ae <_sbrk_r+0x1a>
 80097a8:	682b      	ldr	r3, [r5, #0]
 80097aa:	b103      	cbz	r3, 80097ae <_sbrk_r+0x1a>
 80097ac:	6023      	str	r3, [r4, #0]
 80097ae:	bd38      	pop	{r3, r4, r5, pc}
 80097b0:	20005024 	.word	0x20005024

080097b4 <siprintf>:
 80097b4:	b40e      	push	{r1, r2, r3}
 80097b6:	b500      	push	{lr}
 80097b8:	b09c      	sub	sp, #112	; 0x70
 80097ba:	ab1d      	add	r3, sp, #116	; 0x74
 80097bc:	9002      	str	r0, [sp, #8]
 80097be:	9006      	str	r0, [sp, #24]
 80097c0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80097c4:	4809      	ldr	r0, [pc, #36]	; (80097ec <siprintf+0x38>)
 80097c6:	9107      	str	r1, [sp, #28]
 80097c8:	9104      	str	r1, [sp, #16]
 80097ca:	4909      	ldr	r1, [pc, #36]	; (80097f0 <siprintf+0x3c>)
 80097cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80097d0:	9105      	str	r1, [sp, #20]
 80097d2:	6800      	ldr	r0, [r0, #0]
 80097d4:	9301      	str	r3, [sp, #4]
 80097d6:	a902      	add	r1, sp, #8
 80097d8:	f000 f874 	bl	80098c4 <_svfiprintf_r>
 80097dc:	9b02      	ldr	r3, [sp, #8]
 80097de:	2200      	movs	r2, #0
 80097e0:	701a      	strb	r2, [r3, #0]
 80097e2:	b01c      	add	sp, #112	; 0x70
 80097e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80097e8:	b003      	add	sp, #12
 80097ea:	4770      	bx	lr
 80097ec:	2000001c 	.word	0x2000001c
 80097f0:	ffff0208 	.word	0xffff0208

080097f4 <__malloc_lock>:
 80097f4:	4801      	ldr	r0, [pc, #4]	; (80097fc <__malloc_lock+0x8>)
 80097f6:	f000 baf9 	b.w	8009dec <__retarget_lock_acquire_recursive>
 80097fa:	bf00      	nop
 80097fc:	20005028 	.word	0x20005028

08009800 <__malloc_unlock>:
 8009800:	4801      	ldr	r0, [pc, #4]	; (8009808 <__malloc_unlock+0x8>)
 8009802:	f000 baf4 	b.w	8009dee <__retarget_lock_release_recursive>
 8009806:	bf00      	nop
 8009808:	20005028 	.word	0x20005028

0800980c <__ssputs_r>:
 800980c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009810:	688e      	ldr	r6, [r1, #8]
 8009812:	429e      	cmp	r6, r3
 8009814:	4682      	mov	sl, r0
 8009816:	460c      	mov	r4, r1
 8009818:	4690      	mov	r8, r2
 800981a:	461f      	mov	r7, r3
 800981c:	d838      	bhi.n	8009890 <__ssputs_r+0x84>
 800981e:	898a      	ldrh	r2, [r1, #12]
 8009820:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009824:	d032      	beq.n	800988c <__ssputs_r+0x80>
 8009826:	6825      	ldr	r5, [r4, #0]
 8009828:	6909      	ldr	r1, [r1, #16]
 800982a:	eba5 0901 	sub.w	r9, r5, r1
 800982e:	6965      	ldr	r5, [r4, #20]
 8009830:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009834:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009838:	3301      	adds	r3, #1
 800983a:	444b      	add	r3, r9
 800983c:	106d      	asrs	r5, r5, #1
 800983e:	429d      	cmp	r5, r3
 8009840:	bf38      	it	cc
 8009842:	461d      	movcc	r5, r3
 8009844:	0553      	lsls	r3, r2, #21
 8009846:	d531      	bpl.n	80098ac <__ssputs_r+0xa0>
 8009848:	4629      	mov	r1, r5
 800984a:	f7ff ff2f 	bl	80096ac <_malloc_r>
 800984e:	4606      	mov	r6, r0
 8009850:	b950      	cbnz	r0, 8009868 <__ssputs_r+0x5c>
 8009852:	230c      	movs	r3, #12
 8009854:	f8ca 3000 	str.w	r3, [sl]
 8009858:	89a3      	ldrh	r3, [r4, #12]
 800985a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800985e:	81a3      	strh	r3, [r4, #12]
 8009860:	f04f 30ff 	mov.w	r0, #4294967295
 8009864:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009868:	6921      	ldr	r1, [r4, #16]
 800986a:	464a      	mov	r2, r9
 800986c:	f7ff fe9c 	bl	80095a8 <memcpy>
 8009870:	89a3      	ldrh	r3, [r4, #12]
 8009872:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009876:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800987a:	81a3      	strh	r3, [r4, #12]
 800987c:	6126      	str	r6, [r4, #16]
 800987e:	6165      	str	r5, [r4, #20]
 8009880:	444e      	add	r6, r9
 8009882:	eba5 0509 	sub.w	r5, r5, r9
 8009886:	6026      	str	r6, [r4, #0]
 8009888:	60a5      	str	r5, [r4, #8]
 800988a:	463e      	mov	r6, r7
 800988c:	42be      	cmp	r6, r7
 800988e:	d900      	bls.n	8009892 <__ssputs_r+0x86>
 8009890:	463e      	mov	r6, r7
 8009892:	6820      	ldr	r0, [r4, #0]
 8009894:	4632      	mov	r2, r6
 8009896:	4641      	mov	r1, r8
 8009898:	f000 faaa 	bl	8009df0 <memmove>
 800989c:	68a3      	ldr	r3, [r4, #8]
 800989e:	1b9b      	subs	r3, r3, r6
 80098a0:	60a3      	str	r3, [r4, #8]
 80098a2:	6823      	ldr	r3, [r4, #0]
 80098a4:	4433      	add	r3, r6
 80098a6:	6023      	str	r3, [r4, #0]
 80098a8:	2000      	movs	r0, #0
 80098aa:	e7db      	b.n	8009864 <__ssputs_r+0x58>
 80098ac:	462a      	mov	r2, r5
 80098ae:	f000 fab9 	bl	8009e24 <_realloc_r>
 80098b2:	4606      	mov	r6, r0
 80098b4:	2800      	cmp	r0, #0
 80098b6:	d1e1      	bne.n	800987c <__ssputs_r+0x70>
 80098b8:	6921      	ldr	r1, [r4, #16]
 80098ba:	4650      	mov	r0, sl
 80098bc:	f7ff fe8a 	bl	80095d4 <_free_r>
 80098c0:	e7c7      	b.n	8009852 <__ssputs_r+0x46>
	...

080098c4 <_svfiprintf_r>:
 80098c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098c8:	4698      	mov	r8, r3
 80098ca:	898b      	ldrh	r3, [r1, #12]
 80098cc:	061b      	lsls	r3, r3, #24
 80098ce:	b09d      	sub	sp, #116	; 0x74
 80098d0:	4607      	mov	r7, r0
 80098d2:	460d      	mov	r5, r1
 80098d4:	4614      	mov	r4, r2
 80098d6:	d50e      	bpl.n	80098f6 <_svfiprintf_r+0x32>
 80098d8:	690b      	ldr	r3, [r1, #16]
 80098da:	b963      	cbnz	r3, 80098f6 <_svfiprintf_r+0x32>
 80098dc:	2140      	movs	r1, #64	; 0x40
 80098de:	f7ff fee5 	bl	80096ac <_malloc_r>
 80098e2:	6028      	str	r0, [r5, #0]
 80098e4:	6128      	str	r0, [r5, #16]
 80098e6:	b920      	cbnz	r0, 80098f2 <_svfiprintf_r+0x2e>
 80098e8:	230c      	movs	r3, #12
 80098ea:	603b      	str	r3, [r7, #0]
 80098ec:	f04f 30ff 	mov.w	r0, #4294967295
 80098f0:	e0d1      	b.n	8009a96 <_svfiprintf_r+0x1d2>
 80098f2:	2340      	movs	r3, #64	; 0x40
 80098f4:	616b      	str	r3, [r5, #20]
 80098f6:	2300      	movs	r3, #0
 80098f8:	9309      	str	r3, [sp, #36]	; 0x24
 80098fa:	2320      	movs	r3, #32
 80098fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009900:	f8cd 800c 	str.w	r8, [sp, #12]
 8009904:	2330      	movs	r3, #48	; 0x30
 8009906:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009ab0 <_svfiprintf_r+0x1ec>
 800990a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800990e:	f04f 0901 	mov.w	r9, #1
 8009912:	4623      	mov	r3, r4
 8009914:	469a      	mov	sl, r3
 8009916:	f813 2b01 	ldrb.w	r2, [r3], #1
 800991a:	b10a      	cbz	r2, 8009920 <_svfiprintf_r+0x5c>
 800991c:	2a25      	cmp	r2, #37	; 0x25
 800991e:	d1f9      	bne.n	8009914 <_svfiprintf_r+0x50>
 8009920:	ebba 0b04 	subs.w	fp, sl, r4
 8009924:	d00b      	beq.n	800993e <_svfiprintf_r+0x7a>
 8009926:	465b      	mov	r3, fp
 8009928:	4622      	mov	r2, r4
 800992a:	4629      	mov	r1, r5
 800992c:	4638      	mov	r0, r7
 800992e:	f7ff ff6d 	bl	800980c <__ssputs_r>
 8009932:	3001      	adds	r0, #1
 8009934:	f000 80aa 	beq.w	8009a8c <_svfiprintf_r+0x1c8>
 8009938:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800993a:	445a      	add	r2, fp
 800993c:	9209      	str	r2, [sp, #36]	; 0x24
 800993e:	f89a 3000 	ldrb.w	r3, [sl]
 8009942:	2b00      	cmp	r3, #0
 8009944:	f000 80a2 	beq.w	8009a8c <_svfiprintf_r+0x1c8>
 8009948:	2300      	movs	r3, #0
 800994a:	f04f 32ff 	mov.w	r2, #4294967295
 800994e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009952:	f10a 0a01 	add.w	sl, sl, #1
 8009956:	9304      	str	r3, [sp, #16]
 8009958:	9307      	str	r3, [sp, #28]
 800995a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800995e:	931a      	str	r3, [sp, #104]	; 0x68
 8009960:	4654      	mov	r4, sl
 8009962:	2205      	movs	r2, #5
 8009964:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009968:	4851      	ldr	r0, [pc, #324]	; (8009ab0 <_svfiprintf_r+0x1ec>)
 800996a:	f7f6 fc31 	bl	80001d0 <memchr>
 800996e:	9a04      	ldr	r2, [sp, #16]
 8009970:	b9d8      	cbnz	r0, 80099aa <_svfiprintf_r+0xe6>
 8009972:	06d0      	lsls	r0, r2, #27
 8009974:	bf44      	itt	mi
 8009976:	2320      	movmi	r3, #32
 8009978:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800997c:	0711      	lsls	r1, r2, #28
 800997e:	bf44      	itt	mi
 8009980:	232b      	movmi	r3, #43	; 0x2b
 8009982:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009986:	f89a 3000 	ldrb.w	r3, [sl]
 800998a:	2b2a      	cmp	r3, #42	; 0x2a
 800998c:	d015      	beq.n	80099ba <_svfiprintf_r+0xf6>
 800998e:	9a07      	ldr	r2, [sp, #28]
 8009990:	4654      	mov	r4, sl
 8009992:	2000      	movs	r0, #0
 8009994:	f04f 0c0a 	mov.w	ip, #10
 8009998:	4621      	mov	r1, r4
 800999a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800999e:	3b30      	subs	r3, #48	; 0x30
 80099a0:	2b09      	cmp	r3, #9
 80099a2:	d94e      	bls.n	8009a42 <_svfiprintf_r+0x17e>
 80099a4:	b1b0      	cbz	r0, 80099d4 <_svfiprintf_r+0x110>
 80099a6:	9207      	str	r2, [sp, #28]
 80099a8:	e014      	b.n	80099d4 <_svfiprintf_r+0x110>
 80099aa:	eba0 0308 	sub.w	r3, r0, r8
 80099ae:	fa09 f303 	lsl.w	r3, r9, r3
 80099b2:	4313      	orrs	r3, r2
 80099b4:	9304      	str	r3, [sp, #16]
 80099b6:	46a2      	mov	sl, r4
 80099b8:	e7d2      	b.n	8009960 <_svfiprintf_r+0x9c>
 80099ba:	9b03      	ldr	r3, [sp, #12]
 80099bc:	1d19      	adds	r1, r3, #4
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	9103      	str	r1, [sp, #12]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	bfbb      	ittet	lt
 80099c6:	425b      	neglt	r3, r3
 80099c8:	f042 0202 	orrlt.w	r2, r2, #2
 80099cc:	9307      	strge	r3, [sp, #28]
 80099ce:	9307      	strlt	r3, [sp, #28]
 80099d0:	bfb8      	it	lt
 80099d2:	9204      	strlt	r2, [sp, #16]
 80099d4:	7823      	ldrb	r3, [r4, #0]
 80099d6:	2b2e      	cmp	r3, #46	; 0x2e
 80099d8:	d10c      	bne.n	80099f4 <_svfiprintf_r+0x130>
 80099da:	7863      	ldrb	r3, [r4, #1]
 80099dc:	2b2a      	cmp	r3, #42	; 0x2a
 80099de:	d135      	bne.n	8009a4c <_svfiprintf_r+0x188>
 80099e0:	9b03      	ldr	r3, [sp, #12]
 80099e2:	1d1a      	adds	r2, r3, #4
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	9203      	str	r2, [sp, #12]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	bfb8      	it	lt
 80099ec:	f04f 33ff 	movlt.w	r3, #4294967295
 80099f0:	3402      	adds	r4, #2
 80099f2:	9305      	str	r3, [sp, #20]
 80099f4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009ac0 <_svfiprintf_r+0x1fc>
 80099f8:	7821      	ldrb	r1, [r4, #0]
 80099fa:	2203      	movs	r2, #3
 80099fc:	4650      	mov	r0, sl
 80099fe:	f7f6 fbe7 	bl	80001d0 <memchr>
 8009a02:	b140      	cbz	r0, 8009a16 <_svfiprintf_r+0x152>
 8009a04:	2340      	movs	r3, #64	; 0x40
 8009a06:	eba0 000a 	sub.w	r0, r0, sl
 8009a0a:	fa03 f000 	lsl.w	r0, r3, r0
 8009a0e:	9b04      	ldr	r3, [sp, #16]
 8009a10:	4303      	orrs	r3, r0
 8009a12:	3401      	adds	r4, #1
 8009a14:	9304      	str	r3, [sp, #16]
 8009a16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a1a:	4826      	ldr	r0, [pc, #152]	; (8009ab4 <_svfiprintf_r+0x1f0>)
 8009a1c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009a20:	2206      	movs	r2, #6
 8009a22:	f7f6 fbd5 	bl	80001d0 <memchr>
 8009a26:	2800      	cmp	r0, #0
 8009a28:	d038      	beq.n	8009a9c <_svfiprintf_r+0x1d8>
 8009a2a:	4b23      	ldr	r3, [pc, #140]	; (8009ab8 <_svfiprintf_r+0x1f4>)
 8009a2c:	bb1b      	cbnz	r3, 8009a76 <_svfiprintf_r+0x1b2>
 8009a2e:	9b03      	ldr	r3, [sp, #12]
 8009a30:	3307      	adds	r3, #7
 8009a32:	f023 0307 	bic.w	r3, r3, #7
 8009a36:	3308      	adds	r3, #8
 8009a38:	9303      	str	r3, [sp, #12]
 8009a3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a3c:	4433      	add	r3, r6
 8009a3e:	9309      	str	r3, [sp, #36]	; 0x24
 8009a40:	e767      	b.n	8009912 <_svfiprintf_r+0x4e>
 8009a42:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a46:	460c      	mov	r4, r1
 8009a48:	2001      	movs	r0, #1
 8009a4a:	e7a5      	b.n	8009998 <_svfiprintf_r+0xd4>
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	3401      	adds	r4, #1
 8009a50:	9305      	str	r3, [sp, #20]
 8009a52:	4619      	mov	r1, r3
 8009a54:	f04f 0c0a 	mov.w	ip, #10
 8009a58:	4620      	mov	r0, r4
 8009a5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a5e:	3a30      	subs	r2, #48	; 0x30
 8009a60:	2a09      	cmp	r2, #9
 8009a62:	d903      	bls.n	8009a6c <_svfiprintf_r+0x1a8>
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d0c5      	beq.n	80099f4 <_svfiprintf_r+0x130>
 8009a68:	9105      	str	r1, [sp, #20]
 8009a6a:	e7c3      	b.n	80099f4 <_svfiprintf_r+0x130>
 8009a6c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a70:	4604      	mov	r4, r0
 8009a72:	2301      	movs	r3, #1
 8009a74:	e7f0      	b.n	8009a58 <_svfiprintf_r+0x194>
 8009a76:	ab03      	add	r3, sp, #12
 8009a78:	9300      	str	r3, [sp, #0]
 8009a7a:	462a      	mov	r2, r5
 8009a7c:	4b0f      	ldr	r3, [pc, #60]	; (8009abc <_svfiprintf_r+0x1f8>)
 8009a7e:	a904      	add	r1, sp, #16
 8009a80:	4638      	mov	r0, r7
 8009a82:	f3af 8000 	nop.w
 8009a86:	1c42      	adds	r2, r0, #1
 8009a88:	4606      	mov	r6, r0
 8009a8a:	d1d6      	bne.n	8009a3a <_svfiprintf_r+0x176>
 8009a8c:	89ab      	ldrh	r3, [r5, #12]
 8009a8e:	065b      	lsls	r3, r3, #25
 8009a90:	f53f af2c 	bmi.w	80098ec <_svfiprintf_r+0x28>
 8009a94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009a96:	b01d      	add	sp, #116	; 0x74
 8009a98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a9c:	ab03      	add	r3, sp, #12
 8009a9e:	9300      	str	r3, [sp, #0]
 8009aa0:	462a      	mov	r2, r5
 8009aa2:	4b06      	ldr	r3, [pc, #24]	; (8009abc <_svfiprintf_r+0x1f8>)
 8009aa4:	a904      	add	r1, sp, #16
 8009aa6:	4638      	mov	r0, r7
 8009aa8:	f000 f87a 	bl	8009ba0 <_printf_i>
 8009aac:	e7eb      	b.n	8009a86 <_svfiprintf_r+0x1c2>
 8009aae:	bf00      	nop
 8009ab0:	0800aa38 	.word	0x0800aa38
 8009ab4:	0800aa42 	.word	0x0800aa42
 8009ab8:	00000000 	.word	0x00000000
 8009abc:	0800980d 	.word	0x0800980d
 8009ac0:	0800aa3e 	.word	0x0800aa3e

08009ac4 <_printf_common>:
 8009ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ac8:	4616      	mov	r6, r2
 8009aca:	4699      	mov	r9, r3
 8009acc:	688a      	ldr	r2, [r1, #8]
 8009ace:	690b      	ldr	r3, [r1, #16]
 8009ad0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009ad4:	4293      	cmp	r3, r2
 8009ad6:	bfb8      	it	lt
 8009ad8:	4613      	movlt	r3, r2
 8009ada:	6033      	str	r3, [r6, #0]
 8009adc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009ae0:	4607      	mov	r7, r0
 8009ae2:	460c      	mov	r4, r1
 8009ae4:	b10a      	cbz	r2, 8009aea <_printf_common+0x26>
 8009ae6:	3301      	adds	r3, #1
 8009ae8:	6033      	str	r3, [r6, #0]
 8009aea:	6823      	ldr	r3, [r4, #0]
 8009aec:	0699      	lsls	r1, r3, #26
 8009aee:	bf42      	ittt	mi
 8009af0:	6833      	ldrmi	r3, [r6, #0]
 8009af2:	3302      	addmi	r3, #2
 8009af4:	6033      	strmi	r3, [r6, #0]
 8009af6:	6825      	ldr	r5, [r4, #0]
 8009af8:	f015 0506 	ands.w	r5, r5, #6
 8009afc:	d106      	bne.n	8009b0c <_printf_common+0x48>
 8009afe:	f104 0a19 	add.w	sl, r4, #25
 8009b02:	68e3      	ldr	r3, [r4, #12]
 8009b04:	6832      	ldr	r2, [r6, #0]
 8009b06:	1a9b      	subs	r3, r3, r2
 8009b08:	42ab      	cmp	r3, r5
 8009b0a:	dc26      	bgt.n	8009b5a <_printf_common+0x96>
 8009b0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009b10:	1e13      	subs	r3, r2, #0
 8009b12:	6822      	ldr	r2, [r4, #0]
 8009b14:	bf18      	it	ne
 8009b16:	2301      	movne	r3, #1
 8009b18:	0692      	lsls	r2, r2, #26
 8009b1a:	d42b      	bmi.n	8009b74 <_printf_common+0xb0>
 8009b1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009b20:	4649      	mov	r1, r9
 8009b22:	4638      	mov	r0, r7
 8009b24:	47c0      	blx	r8
 8009b26:	3001      	adds	r0, #1
 8009b28:	d01e      	beq.n	8009b68 <_printf_common+0xa4>
 8009b2a:	6823      	ldr	r3, [r4, #0]
 8009b2c:	68e5      	ldr	r5, [r4, #12]
 8009b2e:	6832      	ldr	r2, [r6, #0]
 8009b30:	f003 0306 	and.w	r3, r3, #6
 8009b34:	2b04      	cmp	r3, #4
 8009b36:	bf08      	it	eq
 8009b38:	1aad      	subeq	r5, r5, r2
 8009b3a:	68a3      	ldr	r3, [r4, #8]
 8009b3c:	6922      	ldr	r2, [r4, #16]
 8009b3e:	bf0c      	ite	eq
 8009b40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009b44:	2500      	movne	r5, #0
 8009b46:	4293      	cmp	r3, r2
 8009b48:	bfc4      	itt	gt
 8009b4a:	1a9b      	subgt	r3, r3, r2
 8009b4c:	18ed      	addgt	r5, r5, r3
 8009b4e:	2600      	movs	r6, #0
 8009b50:	341a      	adds	r4, #26
 8009b52:	42b5      	cmp	r5, r6
 8009b54:	d11a      	bne.n	8009b8c <_printf_common+0xc8>
 8009b56:	2000      	movs	r0, #0
 8009b58:	e008      	b.n	8009b6c <_printf_common+0xa8>
 8009b5a:	2301      	movs	r3, #1
 8009b5c:	4652      	mov	r2, sl
 8009b5e:	4649      	mov	r1, r9
 8009b60:	4638      	mov	r0, r7
 8009b62:	47c0      	blx	r8
 8009b64:	3001      	adds	r0, #1
 8009b66:	d103      	bne.n	8009b70 <_printf_common+0xac>
 8009b68:	f04f 30ff 	mov.w	r0, #4294967295
 8009b6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b70:	3501      	adds	r5, #1
 8009b72:	e7c6      	b.n	8009b02 <_printf_common+0x3e>
 8009b74:	18e1      	adds	r1, r4, r3
 8009b76:	1c5a      	adds	r2, r3, #1
 8009b78:	2030      	movs	r0, #48	; 0x30
 8009b7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009b7e:	4422      	add	r2, r4
 8009b80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009b84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009b88:	3302      	adds	r3, #2
 8009b8a:	e7c7      	b.n	8009b1c <_printf_common+0x58>
 8009b8c:	2301      	movs	r3, #1
 8009b8e:	4622      	mov	r2, r4
 8009b90:	4649      	mov	r1, r9
 8009b92:	4638      	mov	r0, r7
 8009b94:	47c0      	blx	r8
 8009b96:	3001      	adds	r0, #1
 8009b98:	d0e6      	beq.n	8009b68 <_printf_common+0xa4>
 8009b9a:	3601      	adds	r6, #1
 8009b9c:	e7d9      	b.n	8009b52 <_printf_common+0x8e>
	...

08009ba0 <_printf_i>:
 8009ba0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ba4:	7e0f      	ldrb	r7, [r1, #24]
 8009ba6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009ba8:	2f78      	cmp	r7, #120	; 0x78
 8009baa:	4691      	mov	r9, r2
 8009bac:	4680      	mov	r8, r0
 8009bae:	460c      	mov	r4, r1
 8009bb0:	469a      	mov	sl, r3
 8009bb2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009bb6:	d807      	bhi.n	8009bc8 <_printf_i+0x28>
 8009bb8:	2f62      	cmp	r7, #98	; 0x62
 8009bba:	d80a      	bhi.n	8009bd2 <_printf_i+0x32>
 8009bbc:	2f00      	cmp	r7, #0
 8009bbe:	f000 80d8 	beq.w	8009d72 <_printf_i+0x1d2>
 8009bc2:	2f58      	cmp	r7, #88	; 0x58
 8009bc4:	f000 80a3 	beq.w	8009d0e <_printf_i+0x16e>
 8009bc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009bcc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009bd0:	e03a      	b.n	8009c48 <_printf_i+0xa8>
 8009bd2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009bd6:	2b15      	cmp	r3, #21
 8009bd8:	d8f6      	bhi.n	8009bc8 <_printf_i+0x28>
 8009bda:	a101      	add	r1, pc, #4	; (adr r1, 8009be0 <_printf_i+0x40>)
 8009bdc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009be0:	08009c39 	.word	0x08009c39
 8009be4:	08009c4d 	.word	0x08009c4d
 8009be8:	08009bc9 	.word	0x08009bc9
 8009bec:	08009bc9 	.word	0x08009bc9
 8009bf0:	08009bc9 	.word	0x08009bc9
 8009bf4:	08009bc9 	.word	0x08009bc9
 8009bf8:	08009c4d 	.word	0x08009c4d
 8009bfc:	08009bc9 	.word	0x08009bc9
 8009c00:	08009bc9 	.word	0x08009bc9
 8009c04:	08009bc9 	.word	0x08009bc9
 8009c08:	08009bc9 	.word	0x08009bc9
 8009c0c:	08009d59 	.word	0x08009d59
 8009c10:	08009c7d 	.word	0x08009c7d
 8009c14:	08009d3b 	.word	0x08009d3b
 8009c18:	08009bc9 	.word	0x08009bc9
 8009c1c:	08009bc9 	.word	0x08009bc9
 8009c20:	08009d7b 	.word	0x08009d7b
 8009c24:	08009bc9 	.word	0x08009bc9
 8009c28:	08009c7d 	.word	0x08009c7d
 8009c2c:	08009bc9 	.word	0x08009bc9
 8009c30:	08009bc9 	.word	0x08009bc9
 8009c34:	08009d43 	.word	0x08009d43
 8009c38:	682b      	ldr	r3, [r5, #0]
 8009c3a:	1d1a      	adds	r2, r3, #4
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	602a      	str	r2, [r5, #0]
 8009c40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009c48:	2301      	movs	r3, #1
 8009c4a:	e0a3      	b.n	8009d94 <_printf_i+0x1f4>
 8009c4c:	6820      	ldr	r0, [r4, #0]
 8009c4e:	6829      	ldr	r1, [r5, #0]
 8009c50:	0606      	lsls	r6, r0, #24
 8009c52:	f101 0304 	add.w	r3, r1, #4
 8009c56:	d50a      	bpl.n	8009c6e <_printf_i+0xce>
 8009c58:	680e      	ldr	r6, [r1, #0]
 8009c5a:	602b      	str	r3, [r5, #0]
 8009c5c:	2e00      	cmp	r6, #0
 8009c5e:	da03      	bge.n	8009c68 <_printf_i+0xc8>
 8009c60:	232d      	movs	r3, #45	; 0x2d
 8009c62:	4276      	negs	r6, r6
 8009c64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c68:	485e      	ldr	r0, [pc, #376]	; (8009de4 <_printf_i+0x244>)
 8009c6a:	230a      	movs	r3, #10
 8009c6c:	e019      	b.n	8009ca2 <_printf_i+0x102>
 8009c6e:	680e      	ldr	r6, [r1, #0]
 8009c70:	602b      	str	r3, [r5, #0]
 8009c72:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009c76:	bf18      	it	ne
 8009c78:	b236      	sxthne	r6, r6
 8009c7a:	e7ef      	b.n	8009c5c <_printf_i+0xbc>
 8009c7c:	682b      	ldr	r3, [r5, #0]
 8009c7e:	6820      	ldr	r0, [r4, #0]
 8009c80:	1d19      	adds	r1, r3, #4
 8009c82:	6029      	str	r1, [r5, #0]
 8009c84:	0601      	lsls	r1, r0, #24
 8009c86:	d501      	bpl.n	8009c8c <_printf_i+0xec>
 8009c88:	681e      	ldr	r6, [r3, #0]
 8009c8a:	e002      	b.n	8009c92 <_printf_i+0xf2>
 8009c8c:	0646      	lsls	r6, r0, #25
 8009c8e:	d5fb      	bpl.n	8009c88 <_printf_i+0xe8>
 8009c90:	881e      	ldrh	r6, [r3, #0]
 8009c92:	4854      	ldr	r0, [pc, #336]	; (8009de4 <_printf_i+0x244>)
 8009c94:	2f6f      	cmp	r7, #111	; 0x6f
 8009c96:	bf0c      	ite	eq
 8009c98:	2308      	moveq	r3, #8
 8009c9a:	230a      	movne	r3, #10
 8009c9c:	2100      	movs	r1, #0
 8009c9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009ca2:	6865      	ldr	r5, [r4, #4]
 8009ca4:	60a5      	str	r5, [r4, #8]
 8009ca6:	2d00      	cmp	r5, #0
 8009ca8:	bfa2      	ittt	ge
 8009caa:	6821      	ldrge	r1, [r4, #0]
 8009cac:	f021 0104 	bicge.w	r1, r1, #4
 8009cb0:	6021      	strge	r1, [r4, #0]
 8009cb2:	b90e      	cbnz	r6, 8009cb8 <_printf_i+0x118>
 8009cb4:	2d00      	cmp	r5, #0
 8009cb6:	d04d      	beq.n	8009d54 <_printf_i+0x1b4>
 8009cb8:	4615      	mov	r5, r2
 8009cba:	fbb6 f1f3 	udiv	r1, r6, r3
 8009cbe:	fb03 6711 	mls	r7, r3, r1, r6
 8009cc2:	5dc7      	ldrb	r7, [r0, r7]
 8009cc4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009cc8:	4637      	mov	r7, r6
 8009cca:	42bb      	cmp	r3, r7
 8009ccc:	460e      	mov	r6, r1
 8009cce:	d9f4      	bls.n	8009cba <_printf_i+0x11a>
 8009cd0:	2b08      	cmp	r3, #8
 8009cd2:	d10b      	bne.n	8009cec <_printf_i+0x14c>
 8009cd4:	6823      	ldr	r3, [r4, #0]
 8009cd6:	07de      	lsls	r6, r3, #31
 8009cd8:	d508      	bpl.n	8009cec <_printf_i+0x14c>
 8009cda:	6923      	ldr	r3, [r4, #16]
 8009cdc:	6861      	ldr	r1, [r4, #4]
 8009cde:	4299      	cmp	r1, r3
 8009ce0:	bfde      	ittt	le
 8009ce2:	2330      	movle	r3, #48	; 0x30
 8009ce4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009ce8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009cec:	1b52      	subs	r2, r2, r5
 8009cee:	6122      	str	r2, [r4, #16]
 8009cf0:	f8cd a000 	str.w	sl, [sp]
 8009cf4:	464b      	mov	r3, r9
 8009cf6:	aa03      	add	r2, sp, #12
 8009cf8:	4621      	mov	r1, r4
 8009cfa:	4640      	mov	r0, r8
 8009cfc:	f7ff fee2 	bl	8009ac4 <_printf_common>
 8009d00:	3001      	adds	r0, #1
 8009d02:	d14c      	bne.n	8009d9e <_printf_i+0x1fe>
 8009d04:	f04f 30ff 	mov.w	r0, #4294967295
 8009d08:	b004      	add	sp, #16
 8009d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d0e:	4835      	ldr	r0, [pc, #212]	; (8009de4 <_printf_i+0x244>)
 8009d10:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009d14:	6829      	ldr	r1, [r5, #0]
 8009d16:	6823      	ldr	r3, [r4, #0]
 8009d18:	f851 6b04 	ldr.w	r6, [r1], #4
 8009d1c:	6029      	str	r1, [r5, #0]
 8009d1e:	061d      	lsls	r5, r3, #24
 8009d20:	d514      	bpl.n	8009d4c <_printf_i+0x1ac>
 8009d22:	07df      	lsls	r7, r3, #31
 8009d24:	bf44      	itt	mi
 8009d26:	f043 0320 	orrmi.w	r3, r3, #32
 8009d2a:	6023      	strmi	r3, [r4, #0]
 8009d2c:	b91e      	cbnz	r6, 8009d36 <_printf_i+0x196>
 8009d2e:	6823      	ldr	r3, [r4, #0]
 8009d30:	f023 0320 	bic.w	r3, r3, #32
 8009d34:	6023      	str	r3, [r4, #0]
 8009d36:	2310      	movs	r3, #16
 8009d38:	e7b0      	b.n	8009c9c <_printf_i+0xfc>
 8009d3a:	6823      	ldr	r3, [r4, #0]
 8009d3c:	f043 0320 	orr.w	r3, r3, #32
 8009d40:	6023      	str	r3, [r4, #0]
 8009d42:	2378      	movs	r3, #120	; 0x78
 8009d44:	4828      	ldr	r0, [pc, #160]	; (8009de8 <_printf_i+0x248>)
 8009d46:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009d4a:	e7e3      	b.n	8009d14 <_printf_i+0x174>
 8009d4c:	0659      	lsls	r1, r3, #25
 8009d4e:	bf48      	it	mi
 8009d50:	b2b6      	uxthmi	r6, r6
 8009d52:	e7e6      	b.n	8009d22 <_printf_i+0x182>
 8009d54:	4615      	mov	r5, r2
 8009d56:	e7bb      	b.n	8009cd0 <_printf_i+0x130>
 8009d58:	682b      	ldr	r3, [r5, #0]
 8009d5a:	6826      	ldr	r6, [r4, #0]
 8009d5c:	6961      	ldr	r1, [r4, #20]
 8009d5e:	1d18      	adds	r0, r3, #4
 8009d60:	6028      	str	r0, [r5, #0]
 8009d62:	0635      	lsls	r5, r6, #24
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	d501      	bpl.n	8009d6c <_printf_i+0x1cc>
 8009d68:	6019      	str	r1, [r3, #0]
 8009d6a:	e002      	b.n	8009d72 <_printf_i+0x1d2>
 8009d6c:	0670      	lsls	r0, r6, #25
 8009d6e:	d5fb      	bpl.n	8009d68 <_printf_i+0x1c8>
 8009d70:	8019      	strh	r1, [r3, #0]
 8009d72:	2300      	movs	r3, #0
 8009d74:	6123      	str	r3, [r4, #16]
 8009d76:	4615      	mov	r5, r2
 8009d78:	e7ba      	b.n	8009cf0 <_printf_i+0x150>
 8009d7a:	682b      	ldr	r3, [r5, #0]
 8009d7c:	1d1a      	adds	r2, r3, #4
 8009d7e:	602a      	str	r2, [r5, #0]
 8009d80:	681d      	ldr	r5, [r3, #0]
 8009d82:	6862      	ldr	r2, [r4, #4]
 8009d84:	2100      	movs	r1, #0
 8009d86:	4628      	mov	r0, r5
 8009d88:	f7f6 fa22 	bl	80001d0 <memchr>
 8009d8c:	b108      	cbz	r0, 8009d92 <_printf_i+0x1f2>
 8009d8e:	1b40      	subs	r0, r0, r5
 8009d90:	6060      	str	r0, [r4, #4]
 8009d92:	6863      	ldr	r3, [r4, #4]
 8009d94:	6123      	str	r3, [r4, #16]
 8009d96:	2300      	movs	r3, #0
 8009d98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d9c:	e7a8      	b.n	8009cf0 <_printf_i+0x150>
 8009d9e:	6923      	ldr	r3, [r4, #16]
 8009da0:	462a      	mov	r2, r5
 8009da2:	4649      	mov	r1, r9
 8009da4:	4640      	mov	r0, r8
 8009da6:	47d0      	blx	sl
 8009da8:	3001      	adds	r0, #1
 8009daa:	d0ab      	beq.n	8009d04 <_printf_i+0x164>
 8009dac:	6823      	ldr	r3, [r4, #0]
 8009dae:	079b      	lsls	r3, r3, #30
 8009db0:	d413      	bmi.n	8009dda <_printf_i+0x23a>
 8009db2:	68e0      	ldr	r0, [r4, #12]
 8009db4:	9b03      	ldr	r3, [sp, #12]
 8009db6:	4298      	cmp	r0, r3
 8009db8:	bfb8      	it	lt
 8009dba:	4618      	movlt	r0, r3
 8009dbc:	e7a4      	b.n	8009d08 <_printf_i+0x168>
 8009dbe:	2301      	movs	r3, #1
 8009dc0:	4632      	mov	r2, r6
 8009dc2:	4649      	mov	r1, r9
 8009dc4:	4640      	mov	r0, r8
 8009dc6:	47d0      	blx	sl
 8009dc8:	3001      	adds	r0, #1
 8009dca:	d09b      	beq.n	8009d04 <_printf_i+0x164>
 8009dcc:	3501      	adds	r5, #1
 8009dce:	68e3      	ldr	r3, [r4, #12]
 8009dd0:	9903      	ldr	r1, [sp, #12]
 8009dd2:	1a5b      	subs	r3, r3, r1
 8009dd4:	42ab      	cmp	r3, r5
 8009dd6:	dcf2      	bgt.n	8009dbe <_printf_i+0x21e>
 8009dd8:	e7eb      	b.n	8009db2 <_printf_i+0x212>
 8009dda:	2500      	movs	r5, #0
 8009ddc:	f104 0619 	add.w	r6, r4, #25
 8009de0:	e7f5      	b.n	8009dce <_printf_i+0x22e>
 8009de2:	bf00      	nop
 8009de4:	0800aa49 	.word	0x0800aa49
 8009de8:	0800aa5a 	.word	0x0800aa5a

08009dec <__retarget_lock_acquire_recursive>:
 8009dec:	4770      	bx	lr

08009dee <__retarget_lock_release_recursive>:
 8009dee:	4770      	bx	lr

08009df0 <memmove>:
 8009df0:	4288      	cmp	r0, r1
 8009df2:	b510      	push	{r4, lr}
 8009df4:	eb01 0402 	add.w	r4, r1, r2
 8009df8:	d902      	bls.n	8009e00 <memmove+0x10>
 8009dfa:	4284      	cmp	r4, r0
 8009dfc:	4623      	mov	r3, r4
 8009dfe:	d807      	bhi.n	8009e10 <memmove+0x20>
 8009e00:	1e43      	subs	r3, r0, #1
 8009e02:	42a1      	cmp	r1, r4
 8009e04:	d008      	beq.n	8009e18 <memmove+0x28>
 8009e06:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009e0a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009e0e:	e7f8      	b.n	8009e02 <memmove+0x12>
 8009e10:	4402      	add	r2, r0
 8009e12:	4601      	mov	r1, r0
 8009e14:	428a      	cmp	r2, r1
 8009e16:	d100      	bne.n	8009e1a <memmove+0x2a>
 8009e18:	bd10      	pop	{r4, pc}
 8009e1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009e1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009e22:	e7f7      	b.n	8009e14 <memmove+0x24>

08009e24 <_realloc_r>:
 8009e24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e28:	4680      	mov	r8, r0
 8009e2a:	4614      	mov	r4, r2
 8009e2c:	460e      	mov	r6, r1
 8009e2e:	b921      	cbnz	r1, 8009e3a <_realloc_r+0x16>
 8009e30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e34:	4611      	mov	r1, r2
 8009e36:	f7ff bc39 	b.w	80096ac <_malloc_r>
 8009e3a:	b92a      	cbnz	r2, 8009e48 <_realloc_r+0x24>
 8009e3c:	f7ff fbca 	bl	80095d4 <_free_r>
 8009e40:	4625      	mov	r5, r4
 8009e42:	4628      	mov	r0, r5
 8009e44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e48:	f000 f81b 	bl	8009e82 <_malloc_usable_size_r>
 8009e4c:	4284      	cmp	r4, r0
 8009e4e:	4607      	mov	r7, r0
 8009e50:	d802      	bhi.n	8009e58 <_realloc_r+0x34>
 8009e52:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009e56:	d812      	bhi.n	8009e7e <_realloc_r+0x5a>
 8009e58:	4621      	mov	r1, r4
 8009e5a:	4640      	mov	r0, r8
 8009e5c:	f7ff fc26 	bl	80096ac <_malloc_r>
 8009e60:	4605      	mov	r5, r0
 8009e62:	2800      	cmp	r0, #0
 8009e64:	d0ed      	beq.n	8009e42 <_realloc_r+0x1e>
 8009e66:	42bc      	cmp	r4, r7
 8009e68:	4622      	mov	r2, r4
 8009e6a:	4631      	mov	r1, r6
 8009e6c:	bf28      	it	cs
 8009e6e:	463a      	movcs	r2, r7
 8009e70:	f7ff fb9a 	bl	80095a8 <memcpy>
 8009e74:	4631      	mov	r1, r6
 8009e76:	4640      	mov	r0, r8
 8009e78:	f7ff fbac 	bl	80095d4 <_free_r>
 8009e7c:	e7e1      	b.n	8009e42 <_realloc_r+0x1e>
 8009e7e:	4635      	mov	r5, r6
 8009e80:	e7df      	b.n	8009e42 <_realloc_r+0x1e>

08009e82 <_malloc_usable_size_r>:
 8009e82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e86:	1f18      	subs	r0, r3, #4
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	bfbc      	itt	lt
 8009e8c:	580b      	ldrlt	r3, [r1, r0]
 8009e8e:	18c0      	addlt	r0, r0, r3
 8009e90:	4770      	bx	lr
	...

08009e94 <_init>:
 8009e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e96:	bf00      	nop
 8009e98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e9a:	bc08      	pop	{r3}
 8009e9c:	469e      	mov	lr, r3
 8009e9e:	4770      	bx	lr

08009ea0 <_fini>:
 8009ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ea2:	bf00      	nop
 8009ea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ea6:	bc08      	pop	{r3}
 8009ea8:	469e      	mov	lr, r3
 8009eaa:	4770      	bx	lr
