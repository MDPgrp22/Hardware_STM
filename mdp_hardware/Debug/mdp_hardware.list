
mdp_hardware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082b4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bc8  08008444  08008444  00018444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800900c  0800900c  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800900c  0800900c  0001900c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009014  08009014  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009014  08009014  00019014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009018  08009018  00019018  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800901c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00004f2c  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004fa4  20004fa4  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018a5d  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003420  00000000  00000000  00038b05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001580  00000000  00000000  0003bf28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001448  00000000  00000000  0003d4a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003eb1  00000000  00000000  0003e8f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000189c7  00000000  00000000  000427a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d542f  00000000  00000000  0005b168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00130597  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005f64  00000000  00000000  001305e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800842c 	.word	0x0800842c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	0800842c 	.word	0x0800842c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_dmul>:
 8000270:	b570      	push	{r4, r5, r6, lr}
 8000272:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000276:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800027a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800027e:	bf1d      	ittte	ne
 8000280:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000284:	ea94 0f0c 	teqne	r4, ip
 8000288:	ea95 0f0c 	teqne	r5, ip
 800028c:	f000 f8de 	bleq	800044c <__aeabi_dmul+0x1dc>
 8000290:	442c      	add	r4, r5
 8000292:	ea81 0603 	eor.w	r6, r1, r3
 8000296:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800029a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800029e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002a2:	bf18      	it	ne
 80002a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002b0:	d038      	beq.n	8000324 <__aeabi_dmul+0xb4>
 80002b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002b6:	f04f 0500 	mov.w	r5, #0
 80002ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002be:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002c6:	f04f 0600 	mov.w	r6, #0
 80002ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ce:	f09c 0f00 	teq	ip, #0
 80002d2:	bf18      	it	ne
 80002d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002d8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002dc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002e0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002e4:	d204      	bcs.n	80002f0 <__aeabi_dmul+0x80>
 80002e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002ea:	416d      	adcs	r5, r5
 80002ec:	eb46 0606 	adc.w	r6, r6, r6
 80002f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000300:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000304:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000308:	bf88      	it	hi
 800030a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800030e:	d81e      	bhi.n	800034e <__aeabi_dmul+0xde>
 8000310:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000314:	bf08      	it	eq
 8000316:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800031a:	f150 0000 	adcs.w	r0, r0, #0
 800031e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000328:	ea46 0101 	orr.w	r1, r6, r1
 800032c:	ea40 0002 	orr.w	r0, r0, r2
 8000330:	ea81 0103 	eor.w	r1, r1, r3
 8000334:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000338:	bfc2      	ittt	gt
 800033a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800033e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000342:	bd70      	popgt	{r4, r5, r6, pc}
 8000344:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000348:	f04f 0e00 	mov.w	lr, #0
 800034c:	3c01      	subs	r4, #1
 800034e:	f300 80ab 	bgt.w	80004a8 <__aeabi_dmul+0x238>
 8000352:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000356:	bfde      	ittt	le
 8000358:	2000      	movle	r0, #0
 800035a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800035e:	bd70      	pople	{r4, r5, r6, pc}
 8000360:	f1c4 0400 	rsb	r4, r4, #0
 8000364:	3c20      	subs	r4, #32
 8000366:	da35      	bge.n	80003d4 <__aeabi_dmul+0x164>
 8000368:	340c      	adds	r4, #12
 800036a:	dc1b      	bgt.n	80003a4 <__aeabi_dmul+0x134>
 800036c:	f104 0414 	add.w	r4, r4, #20
 8000370:	f1c4 0520 	rsb	r5, r4, #32
 8000374:	fa00 f305 	lsl.w	r3, r0, r5
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea40 0002 	orr.w	r0, r0, r2
 8000384:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000388:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800038c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000390:	fa21 f604 	lsr.w	r6, r1, r4
 8000394:	eb42 0106 	adc.w	r1, r2, r6
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f1c4 040c 	rsb	r4, r4, #12
 80003a8:	f1c4 0520 	rsb	r5, r4, #32
 80003ac:	fa00 f304 	lsl.w	r3, r0, r4
 80003b0:	fa20 f005 	lsr.w	r0, r0, r5
 80003b4:	fa01 f204 	lsl.w	r2, r1, r4
 80003b8:	ea40 0002 	orr.w	r0, r0, r2
 80003bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c4:	f141 0100 	adc.w	r1, r1, #0
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 0520 	rsb	r5, r4, #32
 80003d8:	fa00 f205 	lsl.w	r2, r0, r5
 80003dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80003e0:	fa20 f304 	lsr.w	r3, r0, r4
 80003e4:	fa01 f205 	lsl.w	r2, r1, r5
 80003e8:	ea43 0302 	orr.w	r3, r3, r2
 80003ec:	fa21 f004 	lsr.w	r0, r1, r4
 80003f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003f4:	fa21 f204 	lsr.w	r2, r1, r4
 80003f8:	ea20 0002 	bic.w	r0, r0, r2
 80003fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000400:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000404:	bf08      	it	eq
 8000406:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800040a:	bd70      	pop	{r4, r5, r6, pc}
 800040c:	f094 0f00 	teq	r4, #0
 8000410:	d10f      	bne.n	8000432 <__aeabi_dmul+0x1c2>
 8000412:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000416:	0040      	lsls	r0, r0, #1
 8000418:	eb41 0101 	adc.w	r1, r1, r1
 800041c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000420:	bf08      	it	eq
 8000422:	3c01      	subeq	r4, #1
 8000424:	d0f7      	beq.n	8000416 <__aeabi_dmul+0x1a6>
 8000426:	ea41 0106 	orr.w	r1, r1, r6
 800042a:	f095 0f00 	teq	r5, #0
 800042e:	bf18      	it	ne
 8000430:	4770      	bxne	lr
 8000432:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000436:	0052      	lsls	r2, r2, #1
 8000438:	eb43 0303 	adc.w	r3, r3, r3
 800043c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3d01      	subeq	r5, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1c6>
 8000446:	ea43 0306 	orr.w	r3, r3, r6
 800044a:	4770      	bx	lr
 800044c:	ea94 0f0c 	teq	r4, ip
 8000450:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000454:	bf18      	it	ne
 8000456:	ea95 0f0c 	teqne	r5, ip
 800045a:	d00c      	beq.n	8000476 <__aeabi_dmul+0x206>
 800045c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000460:	bf18      	it	ne
 8000462:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000466:	d1d1      	bne.n	800040c <__aeabi_dmul+0x19c>
 8000468:	ea81 0103 	eor.w	r1, r1, r3
 800046c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000470:	f04f 0000 	mov.w	r0, #0
 8000474:	bd70      	pop	{r4, r5, r6, pc}
 8000476:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800047a:	bf06      	itte	eq
 800047c:	4610      	moveq	r0, r2
 800047e:	4619      	moveq	r1, r3
 8000480:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000484:	d019      	beq.n	80004ba <__aeabi_dmul+0x24a>
 8000486:	ea94 0f0c 	teq	r4, ip
 800048a:	d102      	bne.n	8000492 <__aeabi_dmul+0x222>
 800048c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000490:	d113      	bne.n	80004ba <__aeabi_dmul+0x24a>
 8000492:	ea95 0f0c 	teq	r5, ip
 8000496:	d105      	bne.n	80004a4 <__aeabi_dmul+0x234>
 8000498:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800049c:	bf1c      	itt	ne
 800049e:	4610      	movne	r0, r2
 80004a0:	4619      	movne	r1, r3
 80004a2:	d10a      	bne.n	80004ba <__aeabi_dmul+0x24a>
 80004a4:	ea81 0103 	eor.w	r1, r1, r3
 80004a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004ac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004b4:	f04f 0000 	mov.w	r0, #0
 80004b8:	bd70      	pop	{r4, r5, r6, pc}
 80004ba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004be:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004c2:	bd70      	pop	{r4, r5, r6, pc}

080004c4 <__aeabi_drsub>:
 80004c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e002      	b.n	80004d0 <__adddf3>
 80004ca:	bf00      	nop

080004cc <__aeabi_dsub>:
 80004cc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004d0 <__adddf3>:
 80004d0:	b530      	push	{r4, r5, lr}
 80004d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004da:	ea94 0f05 	teq	r4, r5
 80004de:	bf08      	it	eq
 80004e0:	ea90 0f02 	teqeq	r0, r2
 80004e4:	bf1f      	itttt	ne
 80004e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f6:	f000 80e2 	beq.w	80006be <__adddf3+0x1ee>
 80004fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000502:	bfb8      	it	lt
 8000504:	426d      	neglt	r5, r5
 8000506:	dd0c      	ble.n	8000522 <__adddf3+0x52>
 8000508:	442c      	add	r4, r5
 800050a:	ea80 0202 	eor.w	r2, r0, r2
 800050e:	ea81 0303 	eor.w	r3, r1, r3
 8000512:	ea82 0000 	eor.w	r0, r2, r0
 8000516:	ea83 0101 	eor.w	r1, r3, r1
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	2d36      	cmp	r5, #54	; 0x36
 8000524:	bf88      	it	hi
 8000526:	bd30      	pophi	{r4, r5, pc}
 8000528:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800052c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000530:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000534:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000538:	d002      	beq.n	8000540 <__adddf3+0x70>
 800053a:	4240      	negs	r0, r0
 800053c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000540:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000544:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000548:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800054c:	d002      	beq.n	8000554 <__adddf3+0x84>
 800054e:	4252      	negs	r2, r2
 8000550:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000554:	ea94 0f05 	teq	r4, r5
 8000558:	f000 80a7 	beq.w	80006aa <__adddf3+0x1da>
 800055c:	f1a4 0401 	sub.w	r4, r4, #1
 8000560:	f1d5 0e20 	rsbs	lr, r5, #32
 8000564:	db0d      	blt.n	8000582 <__adddf3+0xb2>
 8000566:	fa02 fc0e 	lsl.w	ip, r2, lr
 800056a:	fa22 f205 	lsr.w	r2, r2, r5
 800056e:	1880      	adds	r0, r0, r2
 8000570:	f141 0100 	adc.w	r1, r1, #0
 8000574:	fa03 f20e 	lsl.w	r2, r3, lr
 8000578:	1880      	adds	r0, r0, r2
 800057a:	fa43 f305 	asr.w	r3, r3, r5
 800057e:	4159      	adcs	r1, r3
 8000580:	e00e      	b.n	80005a0 <__adddf3+0xd0>
 8000582:	f1a5 0520 	sub.w	r5, r5, #32
 8000586:	f10e 0e20 	add.w	lr, lr, #32
 800058a:	2a01      	cmp	r2, #1
 800058c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000590:	bf28      	it	cs
 8000592:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000596:	fa43 f305 	asr.w	r3, r3, r5
 800059a:	18c0      	adds	r0, r0, r3
 800059c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	d507      	bpl.n	80005b6 <__adddf3+0xe6>
 80005a6:	f04f 0e00 	mov.w	lr, #0
 80005aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005b6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ba:	d31b      	bcc.n	80005f4 <__adddf3+0x124>
 80005bc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005c0:	d30c      	bcc.n	80005dc <__adddf3+0x10c>
 80005c2:	0849      	lsrs	r1, r1, #1
 80005c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005cc:	f104 0401 	add.w	r4, r4, #1
 80005d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005d4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005d8:	f080 809a 	bcs.w	8000710 <__adddf3+0x240>
 80005dc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005e0:	bf08      	it	eq
 80005e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005e6:	f150 0000 	adcs.w	r0, r0, #0
 80005ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ee:	ea41 0105 	orr.w	r1, r1, r5
 80005f2:	bd30      	pop	{r4, r5, pc}
 80005f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005f8:	4140      	adcs	r0, r0
 80005fa:	eb41 0101 	adc.w	r1, r1, r1
 80005fe:	3c01      	subs	r4, #1
 8000600:	bf28      	it	cs
 8000602:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000606:	d2e9      	bcs.n	80005dc <__adddf3+0x10c>
 8000608:	f091 0f00 	teq	r1, #0
 800060c:	bf04      	itt	eq
 800060e:	4601      	moveq	r1, r0
 8000610:	2000      	moveq	r0, #0
 8000612:	fab1 f381 	clz	r3, r1
 8000616:	bf08      	it	eq
 8000618:	3320      	addeq	r3, #32
 800061a:	f1a3 030b 	sub.w	r3, r3, #11
 800061e:	f1b3 0220 	subs.w	r2, r3, #32
 8000622:	da0c      	bge.n	800063e <__adddf3+0x16e>
 8000624:	320c      	adds	r2, #12
 8000626:	dd08      	ble.n	800063a <__adddf3+0x16a>
 8000628:	f102 0c14 	add.w	ip, r2, #20
 800062c:	f1c2 020c 	rsb	r2, r2, #12
 8000630:	fa01 f00c 	lsl.w	r0, r1, ip
 8000634:	fa21 f102 	lsr.w	r1, r1, r2
 8000638:	e00c      	b.n	8000654 <__adddf3+0x184>
 800063a:	f102 0214 	add.w	r2, r2, #20
 800063e:	bfd8      	it	le
 8000640:	f1c2 0c20 	rsble	ip, r2, #32
 8000644:	fa01 f102 	lsl.w	r1, r1, r2
 8000648:	fa20 fc0c 	lsr.w	ip, r0, ip
 800064c:	bfdc      	itt	le
 800064e:	ea41 010c 	orrle.w	r1, r1, ip
 8000652:	4090      	lslle	r0, r2
 8000654:	1ae4      	subs	r4, r4, r3
 8000656:	bfa2      	ittt	ge
 8000658:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800065c:	4329      	orrge	r1, r5
 800065e:	bd30      	popge	{r4, r5, pc}
 8000660:	ea6f 0404 	mvn.w	r4, r4
 8000664:	3c1f      	subs	r4, #31
 8000666:	da1c      	bge.n	80006a2 <__adddf3+0x1d2>
 8000668:	340c      	adds	r4, #12
 800066a:	dc0e      	bgt.n	800068a <__adddf3+0x1ba>
 800066c:	f104 0414 	add.w	r4, r4, #20
 8000670:	f1c4 0220 	rsb	r2, r4, #32
 8000674:	fa20 f004 	lsr.w	r0, r0, r4
 8000678:	fa01 f302 	lsl.w	r3, r1, r2
 800067c:	ea40 0003 	orr.w	r0, r0, r3
 8000680:	fa21 f304 	lsr.w	r3, r1, r4
 8000684:	ea45 0103 	orr.w	r1, r5, r3
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	f1c4 040c 	rsb	r4, r4, #12
 800068e:	f1c4 0220 	rsb	r2, r4, #32
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 f304 	lsl.w	r3, r1, r4
 800069a:	ea40 0003 	orr.w	r0, r0, r3
 800069e:	4629      	mov	r1, r5
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	fa21 f004 	lsr.w	r0, r1, r4
 80006a6:	4629      	mov	r1, r5
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f094 0f00 	teq	r4, #0
 80006ae:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006b2:	bf06      	itte	eq
 80006b4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006b8:	3401      	addeq	r4, #1
 80006ba:	3d01      	subne	r5, #1
 80006bc:	e74e      	b.n	800055c <__adddf3+0x8c>
 80006be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006c2:	bf18      	it	ne
 80006c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006c8:	d029      	beq.n	800071e <__adddf3+0x24e>
 80006ca:	ea94 0f05 	teq	r4, r5
 80006ce:	bf08      	it	eq
 80006d0:	ea90 0f02 	teqeq	r0, r2
 80006d4:	d005      	beq.n	80006e2 <__adddf3+0x212>
 80006d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006da:	bf04      	itt	eq
 80006dc:	4619      	moveq	r1, r3
 80006de:	4610      	moveq	r0, r2
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	ea91 0f03 	teq	r1, r3
 80006e6:	bf1e      	ittt	ne
 80006e8:	2100      	movne	r1, #0
 80006ea:	2000      	movne	r0, #0
 80006ec:	bd30      	popne	{r4, r5, pc}
 80006ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006f2:	d105      	bne.n	8000700 <__adddf3+0x230>
 80006f4:	0040      	lsls	r0, r0, #1
 80006f6:	4149      	adcs	r1, r1
 80006f8:	bf28      	it	cs
 80006fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006fe:	bd30      	pop	{r4, r5, pc}
 8000700:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000704:	bf3c      	itt	cc
 8000706:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800070a:	bd30      	popcc	{r4, r5, pc}
 800070c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000710:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd30      	pop	{r4, r5, pc}
 800071e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000722:	bf1a      	itte	ne
 8000724:	4619      	movne	r1, r3
 8000726:	4610      	movne	r0, r2
 8000728:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800072c:	bf1c      	itt	ne
 800072e:	460b      	movne	r3, r1
 8000730:	4602      	movne	r2, r0
 8000732:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000736:	bf06      	itte	eq
 8000738:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800073c:	ea91 0f03 	teqeq	r1, r3
 8000740:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000744:	bd30      	pop	{r4, r5, pc}
 8000746:	bf00      	nop

08000748 <__aeabi_ui2d>:
 8000748:	f090 0f00 	teq	r0, #0
 800074c:	bf04      	itt	eq
 800074e:	2100      	moveq	r1, #0
 8000750:	4770      	bxeq	lr
 8000752:	b530      	push	{r4, r5, lr}
 8000754:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000758:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800075c:	f04f 0500 	mov.w	r5, #0
 8000760:	f04f 0100 	mov.w	r1, #0
 8000764:	e750      	b.n	8000608 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_i2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000780:	bf48      	it	mi
 8000782:	4240      	negmi	r0, r0
 8000784:	f04f 0100 	mov.w	r1, #0
 8000788:	e73e      	b.n	8000608 <__adddf3+0x138>
 800078a:	bf00      	nop

0800078c <__aeabi_f2d>:
 800078c:	0042      	lsls	r2, r0, #1
 800078e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000792:	ea4f 0131 	mov.w	r1, r1, rrx
 8000796:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800079a:	bf1f      	itttt	ne
 800079c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007a0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007a4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007a8:	4770      	bxne	lr
 80007aa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ae:	bf08      	it	eq
 80007b0:	4770      	bxeq	lr
 80007b2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007b6:	bf04      	itt	eq
 80007b8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007bc:	4770      	bxeq	lr
 80007be:	b530      	push	{r4, r5, lr}
 80007c0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	e71c      	b.n	8000608 <__adddf3+0x138>
 80007ce:	bf00      	nop

080007d0 <__aeabi_ul2d>:
 80007d0:	ea50 0201 	orrs.w	r2, r0, r1
 80007d4:	bf08      	it	eq
 80007d6:	4770      	bxeq	lr
 80007d8:	b530      	push	{r4, r5, lr}
 80007da:	f04f 0500 	mov.w	r5, #0
 80007de:	e00a      	b.n	80007f6 <__aeabi_l2d+0x16>

080007e0 <__aeabi_l2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007ee:	d502      	bpl.n	80007f6 <__aeabi_l2d+0x16>
 80007f0:	4240      	negs	r0, r0
 80007f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007f6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007fa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000802:	f43f aed8 	beq.w	80005b6 <__adddf3+0xe6>
 8000806:	f04f 0203 	mov.w	r2, #3
 800080a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800080e:	bf18      	it	ne
 8000810:	3203      	addne	r2, #3
 8000812:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000816:	bf18      	it	ne
 8000818:	3203      	addne	r2, #3
 800081a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800081e:	f1c2 0320 	rsb	r3, r2, #32
 8000822:	fa00 fc03 	lsl.w	ip, r0, r3
 8000826:	fa20 f002 	lsr.w	r0, r0, r2
 800082a:	fa01 fe03 	lsl.w	lr, r1, r3
 800082e:	ea40 000e 	orr.w	r0, r0, lr
 8000832:	fa21 f102 	lsr.w	r1, r1, r2
 8000836:	4414      	add	r4, r2
 8000838:	e6bd      	b.n	80005b6 <__adddf3+0xe6>
 800083a:	bf00      	nop

0800083c <__aeabi_d2uiz>:
 800083c:	004a      	lsls	r2, r1, #1
 800083e:	d211      	bcs.n	8000864 <__aeabi_d2uiz+0x28>
 8000840:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000844:	d211      	bcs.n	800086a <__aeabi_d2uiz+0x2e>
 8000846:	d50d      	bpl.n	8000864 <__aeabi_d2uiz+0x28>
 8000848:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800084c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000850:	d40e      	bmi.n	8000870 <__aeabi_d2uiz+0x34>
 8000852:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000856:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800085a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800085e:	fa23 f002 	lsr.w	r0, r3, r2
 8000862:	4770      	bx	lr
 8000864:	f04f 0000 	mov.w	r0, #0
 8000868:	4770      	bx	lr
 800086a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800086e:	d102      	bne.n	8000876 <__aeabi_d2uiz+0x3a>
 8000870:	f04f 30ff 	mov.w	r0, #4294967295
 8000874:	4770      	bx	lr
 8000876:	f04f 0000 	mov.w	r0, #0
 800087a:	4770      	bx	lr

0800087c <__aeabi_uldivmod>:
 800087c:	b953      	cbnz	r3, 8000894 <__aeabi_uldivmod+0x18>
 800087e:	b94a      	cbnz	r2, 8000894 <__aeabi_uldivmod+0x18>
 8000880:	2900      	cmp	r1, #0
 8000882:	bf08      	it	eq
 8000884:	2800      	cmpeq	r0, #0
 8000886:	bf1c      	itt	ne
 8000888:	f04f 31ff 	movne.w	r1, #4294967295
 800088c:	f04f 30ff 	movne.w	r0, #4294967295
 8000890:	f000 b974 	b.w	8000b7c <__aeabi_idiv0>
 8000894:	f1ad 0c08 	sub.w	ip, sp, #8
 8000898:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800089c:	f000 f806 	bl	80008ac <__udivmoddi4>
 80008a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008a8:	b004      	add	sp, #16
 80008aa:	4770      	bx	lr

080008ac <__udivmoddi4>:
 80008ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008b0:	9d08      	ldr	r5, [sp, #32]
 80008b2:	4604      	mov	r4, r0
 80008b4:	468e      	mov	lr, r1
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d14d      	bne.n	8000956 <__udivmoddi4+0xaa>
 80008ba:	428a      	cmp	r2, r1
 80008bc:	4694      	mov	ip, r2
 80008be:	d969      	bls.n	8000994 <__udivmoddi4+0xe8>
 80008c0:	fab2 f282 	clz	r2, r2
 80008c4:	b152      	cbz	r2, 80008dc <__udivmoddi4+0x30>
 80008c6:	fa01 f302 	lsl.w	r3, r1, r2
 80008ca:	f1c2 0120 	rsb	r1, r2, #32
 80008ce:	fa20 f101 	lsr.w	r1, r0, r1
 80008d2:	fa0c fc02 	lsl.w	ip, ip, r2
 80008d6:	ea41 0e03 	orr.w	lr, r1, r3
 80008da:	4094      	lsls	r4, r2
 80008dc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008e0:	0c21      	lsrs	r1, r4, #16
 80008e2:	fbbe f6f8 	udiv	r6, lr, r8
 80008e6:	fa1f f78c 	uxth.w	r7, ip
 80008ea:	fb08 e316 	mls	r3, r8, r6, lr
 80008ee:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80008f2:	fb06 f107 	mul.w	r1, r6, r7
 80008f6:	4299      	cmp	r1, r3
 80008f8:	d90a      	bls.n	8000910 <__udivmoddi4+0x64>
 80008fa:	eb1c 0303 	adds.w	r3, ip, r3
 80008fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000902:	f080 811f 	bcs.w	8000b44 <__udivmoddi4+0x298>
 8000906:	4299      	cmp	r1, r3
 8000908:	f240 811c 	bls.w	8000b44 <__udivmoddi4+0x298>
 800090c:	3e02      	subs	r6, #2
 800090e:	4463      	add	r3, ip
 8000910:	1a5b      	subs	r3, r3, r1
 8000912:	b2a4      	uxth	r4, r4
 8000914:	fbb3 f0f8 	udiv	r0, r3, r8
 8000918:	fb08 3310 	mls	r3, r8, r0, r3
 800091c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000920:	fb00 f707 	mul.w	r7, r0, r7
 8000924:	42a7      	cmp	r7, r4
 8000926:	d90a      	bls.n	800093e <__udivmoddi4+0x92>
 8000928:	eb1c 0404 	adds.w	r4, ip, r4
 800092c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000930:	f080 810a 	bcs.w	8000b48 <__udivmoddi4+0x29c>
 8000934:	42a7      	cmp	r7, r4
 8000936:	f240 8107 	bls.w	8000b48 <__udivmoddi4+0x29c>
 800093a:	4464      	add	r4, ip
 800093c:	3802      	subs	r0, #2
 800093e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000942:	1be4      	subs	r4, r4, r7
 8000944:	2600      	movs	r6, #0
 8000946:	b11d      	cbz	r5, 8000950 <__udivmoddi4+0xa4>
 8000948:	40d4      	lsrs	r4, r2
 800094a:	2300      	movs	r3, #0
 800094c:	e9c5 4300 	strd	r4, r3, [r5]
 8000950:	4631      	mov	r1, r6
 8000952:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000956:	428b      	cmp	r3, r1
 8000958:	d909      	bls.n	800096e <__udivmoddi4+0xc2>
 800095a:	2d00      	cmp	r5, #0
 800095c:	f000 80ef 	beq.w	8000b3e <__udivmoddi4+0x292>
 8000960:	2600      	movs	r6, #0
 8000962:	e9c5 0100 	strd	r0, r1, [r5]
 8000966:	4630      	mov	r0, r6
 8000968:	4631      	mov	r1, r6
 800096a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800096e:	fab3 f683 	clz	r6, r3
 8000972:	2e00      	cmp	r6, #0
 8000974:	d14a      	bne.n	8000a0c <__udivmoddi4+0x160>
 8000976:	428b      	cmp	r3, r1
 8000978:	d302      	bcc.n	8000980 <__udivmoddi4+0xd4>
 800097a:	4282      	cmp	r2, r0
 800097c:	f200 80f9 	bhi.w	8000b72 <__udivmoddi4+0x2c6>
 8000980:	1a84      	subs	r4, r0, r2
 8000982:	eb61 0303 	sbc.w	r3, r1, r3
 8000986:	2001      	movs	r0, #1
 8000988:	469e      	mov	lr, r3
 800098a:	2d00      	cmp	r5, #0
 800098c:	d0e0      	beq.n	8000950 <__udivmoddi4+0xa4>
 800098e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000992:	e7dd      	b.n	8000950 <__udivmoddi4+0xa4>
 8000994:	b902      	cbnz	r2, 8000998 <__udivmoddi4+0xec>
 8000996:	deff      	udf	#255	; 0xff
 8000998:	fab2 f282 	clz	r2, r2
 800099c:	2a00      	cmp	r2, #0
 800099e:	f040 8092 	bne.w	8000ac6 <__udivmoddi4+0x21a>
 80009a2:	eba1 010c 	sub.w	r1, r1, ip
 80009a6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009aa:	fa1f fe8c 	uxth.w	lr, ip
 80009ae:	2601      	movs	r6, #1
 80009b0:	0c20      	lsrs	r0, r4, #16
 80009b2:	fbb1 f3f7 	udiv	r3, r1, r7
 80009b6:	fb07 1113 	mls	r1, r7, r3, r1
 80009ba:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009be:	fb0e f003 	mul.w	r0, lr, r3
 80009c2:	4288      	cmp	r0, r1
 80009c4:	d908      	bls.n	80009d8 <__udivmoddi4+0x12c>
 80009c6:	eb1c 0101 	adds.w	r1, ip, r1
 80009ca:	f103 38ff 	add.w	r8, r3, #4294967295
 80009ce:	d202      	bcs.n	80009d6 <__udivmoddi4+0x12a>
 80009d0:	4288      	cmp	r0, r1
 80009d2:	f200 80cb 	bhi.w	8000b6c <__udivmoddi4+0x2c0>
 80009d6:	4643      	mov	r3, r8
 80009d8:	1a09      	subs	r1, r1, r0
 80009da:	b2a4      	uxth	r4, r4
 80009dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80009e0:	fb07 1110 	mls	r1, r7, r0, r1
 80009e4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80009e8:	fb0e fe00 	mul.w	lr, lr, r0
 80009ec:	45a6      	cmp	lr, r4
 80009ee:	d908      	bls.n	8000a02 <__udivmoddi4+0x156>
 80009f0:	eb1c 0404 	adds.w	r4, ip, r4
 80009f4:	f100 31ff 	add.w	r1, r0, #4294967295
 80009f8:	d202      	bcs.n	8000a00 <__udivmoddi4+0x154>
 80009fa:	45a6      	cmp	lr, r4
 80009fc:	f200 80bb 	bhi.w	8000b76 <__udivmoddi4+0x2ca>
 8000a00:	4608      	mov	r0, r1
 8000a02:	eba4 040e 	sub.w	r4, r4, lr
 8000a06:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a0a:	e79c      	b.n	8000946 <__udivmoddi4+0x9a>
 8000a0c:	f1c6 0720 	rsb	r7, r6, #32
 8000a10:	40b3      	lsls	r3, r6
 8000a12:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a16:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a1a:	fa20 f407 	lsr.w	r4, r0, r7
 8000a1e:	fa01 f306 	lsl.w	r3, r1, r6
 8000a22:	431c      	orrs	r4, r3
 8000a24:	40f9      	lsrs	r1, r7
 8000a26:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a2a:	fa00 f306 	lsl.w	r3, r0, r6
 8000a2e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a32:	0c20      	lsrs	r0, r4, #16
 8000a34:	fa1f fe8c 	uxth.w	lr, ip
 8000a38:	fb09 1118 	mls	r1, r9, r8, r1
 8000a3c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a40:	fb08 f00e 	mul.w	r0, r8, lr
 8000a44:	4288      	cmp	r0, r1
 8000a46:	fa02 f206 	lsl.w	r2, r2, r6
 8000a4a:	d90b      	bls.n	8000a64 <__udivmoddi4+0x1b8>
 8000a4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000a50:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a54:	f080 8088 	bcs.w	8000b68 <__udivmoddi4+0x2bc>
 8000a58:	4288      	cmp	r0, r1
 8000a5a:	f240 8085 	bls.w	8000b68 <__udivmoddi4+0x2bc>
 8000a5e:	f1a8 0802 	sub.w	r8, r8, #2
 8000a62:	4461      	add	r1, ip
 8000a64:	1a09      	subs	r1, r1, r0
 8000a66:	b2a4      	uxth	r4, r4
 8000a68:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a6c:	fb09 1110 	mls	r1, r9, r0, r1
 8000a70:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a74:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a78:	458e      	cmp	lr, r1
 8000a7a:	d908      	bls.n	8000a8e <__udivmoddi4+0x1e2>
 8000a7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000a80:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a84:	d26c      	bcs.n	8000b60 <__udivmoddi4+0x2b4>
 8000a86:	458e      	cmp	lr, r1
 8000a88:	d96a      	bls.n	8000b60 <__udivmoddi4+0x2b4>
 8000a8a:	3802      	subs	r0, #2
 8000a8c:	4461      	add	r1, ip
 8000a8e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000a92:	fba0 9402 	umull	r9, r4, r0, r2
 8000a96:	eba1 010e 	sub.w	r1, r1, lr
 8000a9a:	42a1      	cmp	r1, r4
 8000a9c:	46c8      	mov	r8, r9
 8000a9e:	46a6      	mov	lr, r4
 8000aa0:	d356      	bcc.n	8000b50 <__udivmoddi4+0x2a4>
 8000aa2:	d053      	beq.n	8000b4c <__udivmoddi4+0x2a0>
 8000aa4:	b15d      	cbz	r5, 8000abe <__udivmoddi4+0x212>
 8000aa6:	ebb3 0208 	subs.w	r2, r3, r8
 8000aaa:	eb61 010e 	sbc.w	r1, r1, lr
 8000aae:	fa01 f707 	lsl.w	r7, r1, r7
 8000ab2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ab6:	40f1      	lsrs	r1, r6
 8000ab8:	431f      	orrs	r7, r3
 8000aba:	e9c5 7100 	strd	r7, r1, [r5]
 8000abe:	2600      	movs	r6, #0
 8000ac0:	4631      	mov	r1, r6
 8000ac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ac6:	f1c2 0320 	rsb	r3, r2, #32
 8000aca:	40d8      	lsrs	r0, r3
 8000acc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ad0:	fa21 f303 	lsr.w	r3, r1, r3
 8000ad4:	4091      	lsls	r1, r2
 8000ad6:	4301      	orrs	r1, r0
 8000ad8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000adc:	fa1f fe8c 	uxth.w	lr, ip
 8000ae0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ae4:	fb07 3610 	mls	r6, r7, r0, r3
 8000ae8:	0c0b      	lsrs	r3, r1, #16
 8000aea:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000aee:	fb00 f60e 	mul.w	r6, r0, lr
 8000af2:	429e      	cmp	r6, r3
 8000af4:	fa04 f402 	lsl.w	r4, r4, r2
 8000af8:	d908      	bls.n	8000b0c <__udivmoddi4+0x260>
 8000afa:	eb1c 0303 	adds.w	r3, ip, r3
 8000afe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b02:	d22f      	bcs.n	8000b64 <__udivmoddi4+0x2b8>
 8000b04:	429e      	cmp	r6, r3
 8000b06:	d92d      	bls.n	8000b64 <__udivmoddi4+0x2b8>
 8000b08:	3802      	subs	r0, #2
 8000b0a:	4463      	add	r3, ip
 8000b0c:	1b9b      	subs	r3, r3, r6
 8000b0e:	b289      	uxth	r1, r1
 8000b10:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b14:	fb07 3316 	mls	r3, r7, r6, r3
 8000b18:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b1c:	fb06 f30e 	mul.w	r3, r6, lr
 8000b20:	428b      	cmp	r3, r1
 8000b22:	d908      	bls.n	8000b36 <__udivmoddi4+0x28a>
 8000b24:	eb1c 0101 	adds.w	r1, ip, r1
 8000b28:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b2c:	d216      	bcs.n	8000b5c <__udivmoddi4+0x2b0>
 8000b2e:	428b      	cmp	r3, r1
 8000b30:	d914      	bls.n	8000b5c <__udivmoddi4+0x2b0>
 8000b32:	3e02      	subs	r6, #2
 8000b34:	4461      	add	r1, ip
 8000b36:	1ac9      	subs	r1, r1, r3
 8000b38:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b3c:	e738      	b.n	80009b0 <__udivmoddi4+0x104>
 8000b3e:	462e      	mov	r6, r5
 8000b40:	4628      	mov	r0, r5
 8000b42:	e705      	b.n	8000950 <__udivmoddi4+0xa4>
 8000b44:	4606      	mov	r6, r0
 8000b46:	e6e3      	b.n	8000910 <__udivmoddi4+0x64>
 8000b48:	4618      	mov	r0, r3
 8000b4a:	e6f8      	b.n	800093e <__udivmoddi4+0x92>
 8000b4c:	454b      	cmp	r3, r9
 8000b4e:	d2a9      	bcs.n	8000aa4 <__udivmoddi4+0x1f8>
 8000b50:	ebb9 0802 	subs.w	r8, r9, r2
 8000b54:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b58:	3801      	subs	r0, #1
 8000b5a:	e7a3      	b.n	8000aa4 <__udivmoddi4+0x1f8>
 8000b5c:	4646      	mov	r6, r8
 8000b5e:	e7ea      	b.n	8000b36 <__udivmoddi4+0x28a>
 8000b60:	4620      	mov	r0, r4
 8000b62:	e794      	b.n	8000a8e <__udivmoddi4+0x1e2>
 8000b64:	4640      	mov	r0, r8
 8000b66:	e7d1      	b.n	8000b0c <__udivmoddi4+0x260>
 8000b68:	46d0      	mov	r8, sl
 8000b6a:	e77b      	b.n	8000a64 <__udivmoddi4+0x1b8>
 8000b6c:	3b02      	subs	r3, #2
 8000b6e:	4461      	add	r1, ip
 8000b70:	e732      	b.n	80009d8 <__udivmoddi4+0x12c>
 8000b72:	4630      	mov	r0, r6
 8000b74:	e709      	b.n	800098a <__udivmoddi4+0xde>
 8000b76:	4464      	add	r4, ip
 8000b78:	3802      	subs	r0, #2
 8000b7a:	e742      	b.n	8000a02 <__udivmoddi4+0x156>

08000b7c <__aeabi_idiv0>:
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop

08000b80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b84:	f000 fff2 	bl	8001b6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b88:	f000 f854 	bl	8000c34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b8c:	f000 faca 	bl	8001124 <MX_GPIO_Init>
  MX_TIM8_Init();
 8000b90:	f000 f9f4 	bl	8000f7c <MX_TIM8_Init>
  MX_TIM2_Init();
 8000b94:	f000 f94a 	bl	8000e2c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000b98:	f000 f99c 	bl	8000ed4 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000b9c:	f000 f8a8 	bl	8000cf0 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8000ba0:	f000 fa96 	bl	80010d0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  OLED_Init();
 8000ba4:	f006 ff16 	bl	80079d4 <OLED_Init>

  HAL_UART_Receive_IT(&huart3, (uint8_t *) aRxBuffer, 4);
 8000ba8:	2204      	movs	r2, #4
 8000baa:	4914      	ldr	r1, [pc, #80]	; (8000bfc <main+0x7c>)
 8000bac:	4814      	ldr	r0, [pc, #80]	; (8000c00 <main+0x80>)
 8000bae:	f003 f8c0 	bl	8003d32 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000bb2:	f004 f819 	bl	8004be8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000bb6:	4a13      	ldr	r2, [pc, #76]	; (8000c04 <main+0x84>)
 8000bb8:	2100      	movs	r1, #0
 8000bba:	4813      	ldr	r0, [pc, #76]	; (8000c08 <main+0x88>)
 8000bbc:	f004 f85e 	bl	8004c7c <osThreadNew>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	4a12      	ldr	r2, [pc, #72]	; (8000c0c <main+0x8c>)
 8000bc4:	6013      	str	r3, [r2, #0]

  /* creation of MotorTask */
  MotorTaskHandle = osThreadNew(motor, NULL, &MotorTask_attributes);
 8000bc6:	4a12      	ldr	r2, [pc, #72]	; (8000c10 <main+0x90>)
 8000bc8:	2100      	movs	r1, #0
 8000bca:	4812      	ldr	r0, [pc, #72]	; (8000c14 <main+0x94>)
 8000bcc:	f004 f856 	bl	8004c7c <osThreadNew>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	4a11      	ldr	r2, [pc, #68]	; (8000c18 <main+0x98>)
 8000bd4:	6013      	str	r3, [r2, #0]

  /* creation of showOLED */
  showOLEDHandle = osThreadNew(showoled, NULL, &showOLED_attributes);
 8000bd6:	4a11      	ldr	r2, [pc, #68]	; (8000c1c <main+0x9c>)
 8000bd8:	2100      	movs	r1, #0
 8000bda:	4811      	ldr	r0, [pc, #68]	; (8000c20 <main+0xa0>)
 8000bdc:	f004 f84e 	bl	8004c7c <osThreadNew>
 8000be0:	4603      	mov	r3, r0
 8000be2:	4a10      	ldr	r2, [pc, #64]	; (8000c24 <main+0xa4>)
 8000be4:	6013      	str	r3, [r2, #0]

  /* creation of EncoderTask */
  EncoderTaskHandle = osThreadNew(encoder_task, NULL, &EncoderTask_attributes);
 8000be6:	4a10      	ldr	r2, [pc, #64]	; (8000c28 <main+0xa8>)
 8000be8:	2100      	movs	r1, #0
 8000bea:	4810      	ldr	r0, [pc, #64]	; (8000c2c <main+0xac>)
 8000bec:	f004 f846 	bl	8004c7c <osThreadNew>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	4a0f      	ldr	r2, [pc, #60]	; (8000c30 <main+0xb0>)
 8000bf4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000bf6:	f004 f81b 	bl	8004c30 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000bfa:	e7fe      	b.n	8000bfa <main+0x7a>
 8000bfc:	20000208 	.word	0x20000208
 8000c00:	200001b4 	.word	0x200001b4
 8000c04:	080084cc 	.word	0x080084cc
 8000c08:	080012f5 	.word	0x080012f5
 8000c0c:	200001f8 	.word	0x200001f8
 8000c10:	080084f0 	.word	0x080084f0
 8000c14:	08001309 	.word	0x08001309
 8000c18:	200001fc 	.word	0x200001fc
 8000c1c:	08008514 	.word	0x08008514
 8000c20:	080015a9 	.word	0x080015a9
 8000c24:	20000200 	.word	0x20000200
 8000c28:	08008538 	.word	0x08008538
 8000c2c:	080015f1 	.word	0x080015f1
 8000c30:	20000204 	.word	0x20000204

08000c34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b094      	sub	sp, #80	; 0x50
 8000c38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c3a:	f107 0320 	add.w	r3, r7, #32
 8000c3e:	2230      	movs	r2, #48	; 0x30
 8000c40:	2100      	movs	r1, #0
 8000c42:	4618      	mov	r0, r3
 8000c44:	f006 ff8a 	bl	8007b5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c48:	f107 030c 	add.w	r3, r7, #12
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	605a      	str	r2, [r3, #4]
 8000c52:	609a      	str	r2, [r3, #8]
 8000c54:	60da      	str	r2, [r3, #12]
 8000c56:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c58:	2300      	movs	r3, #0
 8000c5a:	60bb      	str	r3, [r7, #8]
 8000c5c:	4b22      	ldr	r3, [pc, #136]	; (8000ce8 <SystemClock_Config+0xb4>)
 8000c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c60:	4a21      	ldr	r2, [pc, #132]	; (8000ce8 <SystemClock_Config+0xb4>)
 8000c62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c66:	6413      	str	r3, [r2, #64]	; 0x40
 8000c68:	4b1f      	ldr	r3, [pc, #124]	; (8000ce8 <SystemClock_Config+0xb4>)
 8000c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c70:	60bb      	str	r3, [r7, #8]
 8000c72:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c74:	2300      	movs	r3, #0
 8000c76:	607b      	str	r3, [r7, #4]
 8000c78:	4b1c      	ldr	r3, [pc, #112]	; (8000cec <SystemClock_Config+0xb8>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a1b      	ldr	r2, [pc, #108]	; (8000cec <SystemClock_Config+0xb8>)
 8000c7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c82:	6013      	str	r3, [r2, #0]
 8000c84:	4b19      	ldr	r3, [pc, #100]	; (8000cec <SystemClock_Config+0xb8>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c8c:	607b      	str	r3, [r7, #4]
 8000c8e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c90:	2302      	movs	r3, #2
 8000c92:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c94:	2301      	movs	r3, #1
 8000c96:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c98:	2310      	movs	r3, #16
 8000c9a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ca0:	f107 0320 	add.w	r3, r7, #32
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f001 fb93 	bl	80023d0 <HAL_RCC_OscConfig>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000cb0:	f000 fd08 	bl	80016c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cb4:	230f      	movs	r3, #15
 8000cb6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000cc8:	f107 030c 	add.w	r3, r7, #12
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f001 fdf6 	bl	80028c0 <HAL_RCC_ClockConfig>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000cda:	f000 fcf3 	bl	80016c4 <Error_Handler>
  }
}
 8000cde:	bf00      	nop
 8000ce0:	3750      	adds	r7, #80	; 0x50
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	40023800 	.word	0x40023800
 8000cec:	40007000 	.word	0x40007000

08000cf0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b096      	sub	sp, #88	; 0x58
 8000cf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cf6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	601a      	str	r2, [r3, #0]
 8000cfe:	605a      	str	r2, [r3, #4]
 8000d00:	609a      	str	r2, [r3, #8]
 8000d02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d04:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d12:	2200      	movs	r2, #0
 8000d14:	601a      	str	r2, [r3, #0]
 8000d16:	605a      	str	r2, [r3, #4]
 8000d18:	609a      	str	r2, [r3, #8]
 8000d1a:	60da      	str	r2, [r3, #12]
 8000d1c:	611a      	str	r2, [r3, #16]
 8000d1e:	615a      	str	r2, [r3, #20]
 8000d20:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d22:	1d3b      	adds	r3, r7, #4
 8000d24:	2220      	movs	r2, #32
 8000d26:	2100      	movs	r1, #0
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f006 ff17 	bl	8007b5c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d2e:	4b3d      	ldr	r3, [pc, #244]	; (8000e24 <MX_TIM1_Init+0x134>)
 8000d30:	4a3d      	ldr	r2, [pc, #244]	; (8000e28 <MX_TIM1_Init+0x138>)
 8000d32:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160;
 8000d34:	4b3b      	ldr	r3, [pc, #236]	; (8000e24 <MX_TIM1_Init+0x134>)
 8000d36:	22a0      	movs	r2, #160	; 0xa0
 8000d38:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d3a:	4b3a      	ldr	r3, [pc, #232]	; (8000e24 <MX_TIM1_Init+0x134>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8000d40:	4b38      	ldr	r3, [pc, #224]	; (8000e24 <MX_TIM1_Init+0x134>)
 8000d42:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d46:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d48:	4b36      	ldr	r3, [pc, #216]	; (8000e24 <MX_TIM1_Init+0x134>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d4e:	4b35      	ldr	r3, [pc, #212]	; (8000e24 <MX_TIM1_Init+0x134>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d54:	4b33      	ldr	r3, [pc, #204]	; (8000e24 <MX_TIM1_Init+0x134>)
 8000d56:	2280      	movs	r2, #128	; 0x80
 8000d58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d5a:	4832      	ldr	r0, [pc, #200]	; (8000e24 <MX_TIM1_Init+0x134>)
 8000d5c:	f001 ff90 	bl	8002c80 <HAL_TIM_Base_Init>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000d66:	f000 fcad 	bl	80016c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d6e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d70:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000d74:	4619      	mov	r1, r3
 8000d76:	482b      	ldr	r0, [pc, #172]	; (8000e24 <MX_TIM1_Init+0x134>)
 8000d78:	f002 fae8 	bl	800334c <HAL_TIM_ConfigClockSource>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000d82:	f000 fc9f 	bl	80016c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000d86:	4827      	ldr	r0, [pc, #156]	; (8000e24 <MX_TIM1_Init+0x134>)
 8000d88:	f001 ffc9 	bl	8002d1e <HAL_TIM_PWM_Init>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000d92:	f000 fc97 	bl	80016c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d96:	2300      	movs	r3, #0
 8000d98:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d9e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000da2:	4619      	mov	r1, r3
 8000da4:	481f      	ldr	r0, [pc, #124]	; (8000e24 <MX_TIM1_Init+0x134>)
 8000da6:	f002 fea9 	bl	8003afc <HAL_TIMEx_MasterConfigSynchronization>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000db0:	f000 fc88 	bl	80016c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000db4:	2360      	movs	r3, #96	; 0x60
 8000db6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000db8:	2300      	movs	r3, #0
 8000dba:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000dcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dd0:	220c      	movs	r2, #12
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4813      	ldr	r0, [pc, #76]	; (8000e24 <MX_TIM1_Init+0x134>)
 8000dd6:	f002 f9f7 	bl	80031c8 <HAL_TIM_PWM_ConfigChannel>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8000de0:	f000 fc70 	bl	80016c4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000de4:	2300      	movs	r3, #0
 8000de6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000de8:	2300      	movs	r3, #0
 8000dea:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000dec:	2300      	movs	r3, #0
 8000dee:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000df0:	2300      	movs	r3, #0
 8000df2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000df4:	2300      	movs	r3, #0
 8000df6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000df8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dfc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000e02:	1d3b      	adds	r3, r7, #4
 8000e04:	4619      	mov	r1, r3
 8000e06:	4807      	ldr	r0, [pc, #28]	; (8000e24 <MX_TIM1_Init+0x134>)
 8000e08:	f002 fef4 	bl	8003bf4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8000e12:	f000 fc57 	bl	80016c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000e16:	4803      	ldr	r0, [pc, #12]	; (8000e24 <MX_TIM1_Init+0x134>)
 8000e18:	f000 fd7e 	bl	8001918 <HAL_TIM_MspPostInit>

}
 8000e1c:	bf00      	nop
 8000e1e:	3758      	adds	r7, #88	; 0x58
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	20000094 	.word	0x20000094
 8000e28:	40010000 	.word	0x40010000

08000e2c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b08c      	sub	sp, #48	; 0x30
 8000e30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000e32:	f107 030c 	add.w	r3, r7, #12
 8000e36:	2224      	movs	r2, #36	; 0x24
 8000e38:	2100      	movs	r1, #0
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f006 fe8e 	bl	8007b5c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e40:	1d3b      	adds	r3, r7, #4
 8000e42:	2200      	movs	r2, #0
 8000e44:	601a      	str	r2, [r3, #0]
 8000e46:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e48:	4b21      	ldr	r3, [pc, #132]	; (8000ed0 <MX_TIM2_Init+0xa4>)
 8000e4a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e4e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000e50:	4b1f      	ldr	r3, [pc, #124]	; (8000ed0 <MX_TIM2_Init+0xa4>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e56:	4b1e      	ldr	r3, [pc, #120]	; (8000ed0 <MX_TIM2_Init+0xa4>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000e5c:	4b1c      	ldr	r3, [pc, #112]	; (8000ed0 <MX_TIM2_Init+0xa4>)
 8000e5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e62:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e64:	4b1a      	ldr	r3, [pc, #104]	; (8000ed0 <MX_TIM2_Init+0xa4>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e6a:	4b19      	ldr	r3, [pc, #100]	; (8000ed0 <MX_TIM2_Init+0xa4>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000e70:	2303      	movs	r3, #3
 8000e72:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000e74:	2300      	movs	r3, #0
 8000e76:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8000e80:	230a      	movs	r3, #10
 8000e82:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000e84:	2300      	movs	r3, #0
 8000e86:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8000e90:	230a      	movs	r3, #10
 8000e92:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000e94:	f107 030c 	add.w	r3, r7, #12
 8000e98:	4619      	mov	r1, r3
 8000e9a:	480d      	ldr	r0, [pc, #52]	; (8000ed0 <MX_TIM2_Init+0xa4>)
 8000e9c:	f002 f860 	bl	8002f60 <HAL_TIM_Encoder_Init>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000ea6:	f000 fc0d 	bl	80016c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000eb2:	1d3b      	adds	r3, r7, #4
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	4806      	ldr	r0, [pc, #24]	; (8000ed0 <MX_TIM2_Init+0xa4>)
 8000eb8:	f002 fe20 	bl	8003afc <HAL_TIMEx_MasterConfigSynchronization>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000ec2:	f000 fbff 	bl	80016c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ec6:	bf00      	nop
 8000ec8:	3730      	adds	r7, #48	; 0x30
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	200000dc 	.word	0x200000dc

08000ed4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b08c      	sub	sp, #48	; 0x30
 8000ed8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000eda:	f107 030c 	add.w	r3, r7, #12
 8000ede:	2224      	movs	r2, #36	; 0x24
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f006 fe3a 	bl	8007b5c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ee8:	1d3b      	adds	r3, r7, #4
 8000eea:	2200      	movs	r2, #0
 8000eec:	601a      	str	r2, [r3, #0]
 8000eee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ef0:	4b20      	ldr	r3, [pc, #128]	; (8000f74 <MX_TIM3_Init+0xa0>)
 8000ef2:	4a21      	ldr	r2, [pc, #132]	; (8000f78 <MX_TIM3_Init+0xa4>)
 8000ef4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000ef6:	4b1f      	ldr	r3, [pc, #124]	; (8000f74 <MX_TIM3_Init+0xa0>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000efc:	4b1d      	ldr	r3, [pc, #116]	; (8000f74 <MX_TIM3_Init+0xa0>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000f02:	4b1c      	ldr	r3, [pc, #112]	; (8000f74 <MX_TIM3_Init+0xa0>)
 8000f04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f08:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f0a:	4b1a      	ldr	r3, [pc, #104]	; (8000f74 <MX_TIM3_Init+0xa0>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f10:	4b18      	ldr	r3, [pc, #96]	; (8000f74 <MX_TIM3_Init+0xa0>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000f16:	2303      	movs	r3, #3
 8000f18:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000f22:	2300      	movs	r3, #0
 8000f24:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8000f26:	230a      	movs	r3, #10
 8000f28:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000f32:	2300      	movs	r3, #0
 8000f34:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8000f36:	230a      	movs	r3, #10
 8000f38:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000f3a:	f107 030c 	add.w	r3, r7, #12
 8000f3e:	4619      	mov	r1, r3
 8000f40:	480c      	ldr	r0, [pc, #48]	; (8000f74 <MX_TIM3_Init+0xa0>)
 8000f42:	f002 f80d 	bl	8002f60 <HAL_TIM_Encoder_Init>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000f4c:	f000 fbba 	bl	80016c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f50:	2300      	movs	r3, #0
 8000f52:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f54:	2300      	movs	r3, #0
 8000f56:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f58:	1d3b      	adds	r3, r7, #4
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4805      	ldr	r0, [pc, #20]	; (8000f74 <MX_TIM3_Init+0xa0>)
 8000f5e:	f002 fdcd 	bl	8003afc <HAL_TIMEx_MasterConfigSynchronization>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000f68:	f000 fbac 	bl	80016c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000f6c:	bf00      	nop
 8000f6e:	3730      	adds	r7, #48	; 0x30
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	20000124 	.word	0x20000124
 8000f78:	40000400 	.word	0x40000400

08000f7c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b096      	sub	sp, #88	; 0x58
 8000f80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f82:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f86:	2200      	movs	r2, #0
 8000f88:	601a      	str	r2, [r3, #0]
 8000f8a:	605a      	str	r2, [r3, #4]
 8000f8c:	609a      	str	r2, [r3, #8]
 8000f8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f90:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]
 8000fa2:	605a      	str	r2, [r3, #4]
 8000fa4:	609a      	str	r2, [r3, #8]
 8000fa6:	60da      	str	r2, [r3, #12]
 8000fa8:	611a      	str	r2, [r3, #16]
 8000faa:	615a      	str	r2, [r3, #20]
 8000fac:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000fae:	1d3b      	adds	r3, r7, #4
 8000fb0:	2220      	movs	r2, #32
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f006 fdd1 	bl	8007b5c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000fba:	4b43      	ldr	r3, [pc, #268]	; (80010c8 <MX_TIM8_Init+0x14c>)
 8000fbc:	4a43      	ldr	r2, [pc, #268]	; (80010cc <MX_TIM8_Init+0x150>)
 8000fbe:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000fc0:	4b41      	ldr	r3, [pc, #260]	; (80010c8 <MX_TIM8_Init+0x14c>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fc6:	4b40      	ldr	r3, [pc, #256]	; (80010c8 <MX_TIM8_Init+0x14c>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 8000fcc:	4b3e      	ldr	r3, [pc, #248]	; (80010c8 <MX_TIM8_Init+0x14c>)
 8000fce:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8000fd2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fd4:	4b3c      	ldr	r3, [pc, #240]	; (80010c8 <MX_TIM8_Init+0x14c>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000fda:	4b3b      	ldr	r3, [pc, #236]	; (80010c8 <MX_TIM8_Init+0x14c>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fe0:	4b39      	ldr	r3, [pc, #228]	; (80010c8 <MX_TIM8_Init+0x14c>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000fe6:	4838      	ldr	r0, [pc, #224]	; (80010c8 <MX_TIM8_Init+0x14c>)
 8000fe8:	f001 fe4a 	bl	8002c80 <HAL_TIM_Base_Init>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8000ff2:	f000 fb67 	bl	80016c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ff6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ffa:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000ffc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001000:	4619      	mov	r1, r3
 8001002:	4831      	ldr	r0, [pc, #196]	; (80010c8 <MX_TIM8_Init+0x14c>)
 8001004:	f002 f9a2 	bl	800334c <HAL_TIM_ConfigClockSource>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 800100e:	f000 fb59 	bl	80016c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001012:	482d      	ldr	r0, [pc, #180]	; (80010c8 <MX_TIM8_Init+0x14c>)
 8001014:	f001 fe83 	bl	8002d1e <HAL_TIM_PWM_Init>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 800101e:	f000 fb51 	bl	80016c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001022:	2300      	movs	r3, #0
 8001024:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001026:	2300      	movs	r3, #0
 8001028:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800102a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800102e:	4619      	mov	r1, r3
 8001030:	4825      	ldr	r0, [pc, #148]	; (80010c8 <MX_TIM8_Init+0x14c>)
 8001032:	f002 fd63 	bl	8003afc <HAL_TIMEx_MasterConfigSynchronization>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 800103c:	f000 fb42 	bl	80016c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001040:	2360      	movs	r3, #96	; 0x60
 8001042:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001044:	2300      	movs	r3, #0
 8001046:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001048:	2300      	movs	r3, #0
 800104a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800104c:	2300      	movs	r3, #0
 800104e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001050:	2300      	movs	r3, #0
 8001052:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001054:	2300      	movs	r3, #0
 8001056:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001058:	2300      	movs	r3, #0
 800105a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800105c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001060:	2200      	movs	r2, #0
 8001062:	4619      	mov	r1, r3
 8001064:	4818      	ldr	r0, [pc, #96]	; (80010c8 <MX_TIM8_Init+0x14c>)
 8001066:	f002 f8af 	bl	80031c8 <HAL_TIM_PWM_ConfigChannel>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8001070:	f000 fb28 	bl	80016c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001074:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001078:	2204      	movs	r2, #4
 800107a:	4619      	mov	r1, r3
 800107c:	4812      	ldr	r0, [pc, #72]	; (80010c8 <MX_TIM8_Init+0x14c>)
 800107e:	f002 f8a3 	bl	80031c8 <HAL_TIM_PWM_ConfigChannel>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8001088:	f000 fb1c 	bl	80016c4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800108c:	2300      	movs	r3, #0
 800108e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001090:	2300      	movs	r3, #0
 8001092:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001094:	2300      	movs	r3, #0
 8001096:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001098:	2300      	movs	r3, #0
 800109a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800109c:	2300      	movs	r3, #0
 800109e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010a4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010a6:	2300      	movs	r3, #0
 80010a8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80010aa:	1d3b      	adds	r3, r7, #4
 80010ac:	4619      	mov	r1, r3
 80010ae:	4806      	ldr	r0, [pc, #24]	; (80010c8 <MX_TIM8_Init+0x14c>)
 80010b0:	f002 fda0 	bl	8003bf4 <HAL_TIMEx_ConfigBreakDeadTime>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 80010ba:	f000 fb03 	bl	80016c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80010be:	bf00      	nop
 80010c0:	3758      	adds	r7, #88	; 0x58
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	2000016c 	.word	0x2000016c
 80010cc:	40010400 	.word	0x40010400

080010d0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80010d4:	4b11      	ldr	r3, [pc, #68]	; (800111c <MX_USART3_UART_Init+0x4c>)
 80010d6:	4a12      	ldr	r2, [pc, #72]	; (8001120 <MX_USART3_UART_Init+0x50>)
 80010d8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80010da:	4b10      	ldr	r3, [pc, #64]	; (800111c <MX_USART3_UART_Init+0x4c>)
 80010dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010e0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80010e2:	4b0e      	ldr	r3, [pc, #56]	; (800111c <MX_USART3_UART_Init+0x4c>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80010e8:	4b0c      	ldr	r3, [pc, #48]	; (800111c <MX_USART3_UART_Init+0x4c>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80010ee:	4b0b      	ldr	r3, [pc, #44]	; (800111c <MX_USART3_UART_Init+0x4c>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80010f4:	4b09      	ldr	r3, [pc, #36]	; (800111c <MX_USART3_UART_Init+0x4c>)
 80010f6:	220c      	movs	r2, #12
 80010f8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010fa:	4b08      	ldr	r3, [pc, #32]	; (800111c <MX_USART3_UART_Init+0x4c>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001100:	4b06      	ldr	r3, [pc, #24]	; (800111c <MX_USART3_UART_Init+0x4c>)
 8001102:	2200      	movs	r2, #0
 8001104:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001106:	4805      	ldr	r0, [pc, #20]	; (800111c <MX_USART3_UART_Init+0x4c>)
 8001108:	f002 fdc6 	bl	8003c98 <HAL_UART_Init>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001112:	f000 fad7 	bl	80016c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001116:	bf00      	nop
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	200001b4 	.word	0x200001b4
 8001120:	40004800 	.word	0x40004800

08001124 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b08a      	sub	sp, #40	; 0x28
 8001128:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112a:	f107 0314 	add.w	r3, r7, #20
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	605a      	str	r2, [r3, #4]
 8001134:	609a      	str	r2, [r3, #8]
 8001136:	60da      	str	r2, [r3, #12]
 8001138:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800113a:	2300      	movs	r3, #0
 800113c:	613b      	str	r3, [r7, #16]
 800113e:	4b31      	ldr	r3, [pc, #196]	; (8001204 <MX_GPIO_Init+0xe0>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	4a30      	ldr	r2, [pc, #192]	; (8001204 <MX_GPIO_Init+0xe0>)
 8001144:	f043 0310 	orr.w	r3, r3, #16
 8001148:	6313      	str	r3, [r2, #48]	; 0x30
 800114a:	4b2e      	ldr	r3, [pc, #184]	; (8001204 <MX_GPIO_Init+0xe0>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	f003 0310 	and.w	r3, r3, #16
 8001152:	613b      	str	r3, [r7, #16]
 8001154:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	60fb      	str	r3, [r7, #12]
 800115a:	4b2a      	ldr	r3, [pc, #168]	; (8001204 <MX_GPIO_Init+0xe0>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	4a29      	ldr	r2, [pc, #164]	; (8001204 <MX_GPIO_Init+0xe0>)
 8001160:	f043 0301 	orr.w	r3, r3, #1
 8001164:	6313      	str	r3, [r2, #48]	; 0x30
 8001166:	4b27      	ldr	r3, [pc, #156]	; (8001204 <MX_GPIO_Init+0xe0>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	f003 0301 	and.w	r3, r3, #1
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	60bb      	str	r3, [r7, #8]
 8001176:	4b23      	ldr	r3, [pc, #140]	; (8001204 <MX_GPIO_Init+0xe0>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	4a22      	ldr	r2, [pc, #136]	; (8001204 <MX_GPIO_Init+0xe0>)
 800117c:	f043 0304 	orr.w	r3, r3, #4
 8001180:	6313      	str	r3, [r2, #48]	; 0x30
 8001182:	4b20      	ldr	r3, [pc, #128]	; (8001204 <MX_GPIO_Init+0xe0>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	f003 0304 	and.w	r3, r3, #4
 800118a:	60bb      	str	r3, [r7, #8]
 800118c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	607b      	str	r3, [r7, #4]
 8001192:	4b1c      	ldr	r3, [pc, #112]	; (8001204 <MX_GPIO_Init+0xe0>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	4a1b      	ldr	r2, [pc, #108]	; (8001204 <MX_GPIO_Init+0xe0>)
 8001198:	f043 0302 	orr.w	r3, r3, #2
 800119c:	6313      	str	r3, [r2, #48]	; 0x30
 800119e:	4b19      	ldr	r3, [pc, #100]	; (8001204 <MX_GPIO_Init+0xe0>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	f003 0302 	and.w	r3, r3, #2
 80011a6:	607b      	str	r3, [r7, #4]
 80011a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 80011aa:	2200      	movs	r2, #0
 80011ac:	f44f 61bc 	mov.w	r1, #1504	; 0x5e0
 80011b0:	4815      	ldr	r0, [pc, #84]	; (8001208 <MX_GPIO_Init+0xe4>)
 80011b2:	f001 f8b1 	bl	8002318 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin, GPIO_PIN_RESET);
 80011b6:	2200      	movs	r2, #0
 80011b8:	213c      	movs	r1, #60	; 0x3c
 80011ba:	4814      	ldr	r0, [pc, #80]	; (800120c <MX_GPIO_Init+0xe8>)
 80011bc:	f001 f8ac 	bl	8002318 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin
                           LED3_Pin */
  GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 80011c0:	f44f 63bc 	mov.w	r3, #1504	; 0x5e0
 80011c4:	617b      	str	r3, [r7, #20]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c6:	2301      	movs	r3, #1
 80011c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ca:	2300      	movs	r3, #0
 80011cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ce:	2300      	movs	r3, #0
 80011d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011d2:	f107 0314 	add.w	r3, r7, #20
 80011d6:	4619      	mov	r1, r3
 80011d8:	480b      	ldr	r0, [pc, #44]	; (8001208 <MX_GPIO_Init+0xe4>)
 80011da:	f000 ff01 	bl	8001fe0 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin BIN1_Pin BIN2_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin;
 80011de:	233c      	movs	r3, #60	; 0x3c
 80011e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e2:	2301      	movs	r3, #1
 80011e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011ea:	2302      	movs	r3, #2
 80011ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ee:	f107 0314 	add.w	r3, r7, #20
 80011f2:	4619      	mov	r1, r3
 80011f4:	4805      	ldr	r0, [pc, #20]	; (800120c <MX_GPIO_Init+0xe8>)
 80011f6:	f000 fef3 	bl	8001fe0 <HAL_GPIO_Init>

}
 80011fa:	bf00      	nop
 80011fc:	3728      	adds	r7, #40	; 0x28
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40023800 	.word	0x40023800
 8001208:	40021000 	.word	0x40021000
 800120c:	40020000 	.word	0x40020000

08001210 <HAL_UART_RxCpltCallback>:
  * @brief  Function called during Serial interrupt
  * @param  argument: UART_HandleTypeDef
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b090      	sub	sp, #64	; 0x40
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
	// Prevent unused argument compiled warning
	UNUSED(huart);
	uint8_t hello[50];

	frontback = (uint8_t)(aRxBuffer[0]);
 8001218:	4b1f      	ldr	r3, [pc, #124]	; (8001298 <HAL_UART_RxCpltCallback+0x88>)
 800121a:	781a      	ldrb	r2, [r3, #0]
 800121c:	4b1f      	ldr	r3, [pc, #124]	; (800129c <HAL_UART_RxCpltCallback+0x8c>)
 800121e:	701a      	strb	r2, [r3, #0]
	fb_speed = (uint8_t)(aRxBuffer[1]);
 8001220:	4b1d      	ldr	r3, [pc, #116]	; (8001298 <HAL_UART_RxCpltCallback+0x88>)
 8001222:	785a      	ldrb	r2, [r3, #1]
 8001224:	4b1e      	ldr	r3, [pc, #120]	; (80012a0 <HAL_UART_RxCpltCallback+0x90>)
 8001226:	701a      	strb	r2, [r3, #0]
	leftright = (uint8_t)(aRxBuffer[2]);
 8001228:	4b1b      	ldr	r3, [pc, #108]	; (8001298 <HAL_UART_RxCpltCallback+0x88>)
 800122a:	789a      	ldrb	r2, [r3, #2]
 800122c:	4b1d      	ldr	r3, [pc, #116]	; (80012a4 <HAL_UART_RxCpltCallback+0x94>)
 800122e:	701a      	strb	r2, [r3, #0]
	lr_speed = (uint8_t)(aRxBuffer[3]);
 8001230:	4b19      	ldr	r3, [pc, #100]	; (8001298 <HAL_UART_RxCpltCallback+0x88>)
 8001232:	78da      	ldrb	r2, [r3, #3]
 8001234:	4b1c      	ldr	r3, [pc, #112]	; (80012a8 <HAL_UART_RxCpltCallback+0x98>)
 8001236:	701a      	strb	r2, [r3, #0]


	HAL_UART_Receive_IT(&huart3,(uint8_t *) aRxBuffer,4);
 8001238:	2204      	movs	r2, #4
 800123a:	4917      	ldr	r1, [pc, #92]	; (8001298 <HAL_UART_RxCpltCallback+0x88>)
 800123c:	481b      	ldr	r0, [pc, #108]	; (80012ac <HAL_UART_RxCpltCallback+0x9c>)
 800123e:	f002 fd78 	bl	8003d32 <HAL_UART_Receive_IT>
	sprintf(hello, "Dir %c : %d\0", frontback, fb_speed);
 8001242:	4b16      	ldr	r3, [pc, #88]	; (800129c <HAL_UART_RxCpltCallback+0x8c>)
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	461a      	mov	r2, r3
 8001248:	4b15      	ldr	r3, [pc, #84]	; (80012a0 <HAL_UART_RxCpltCallback+0x90>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	f107 000c 	add.w	r0, r7, #12
 8001250:	4917      	ldr	r1, [pc, #92]	; (80012b0 <HAL_UART_RxCpltCallback+0xa0>)
 8001252:	f006 fc8b 	bl	8007b6c <siprintf>
	OLED_ShowString(10, 20, hello);
 8001256:	f107 030c 	add.w	r3, r7, #12
 800125a:	461a      	mov	r2, r3
 800125c:	2114      	movs	r1, #20
 800125e:	200a      	movs	r0, #10
 8001260:	f006 fb86 	bl	8007970 <OLED_ShowString>

	sprintf(hello, "Turn %c : %d\0", leftright, lr_speed);
 8001264:	4b0f      	ldr	r3, [pc, #60]	; (80012a4 <HAL_UART_RxCpltCallback+0x94>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	461a      	mov	r2, r3
 800126a:	4b0f      	ldr	r3, [pc, #60]	; (80012a8 <HAL_UART_RxCpltCallback+0x98>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	f107 000c 	add.w	r0, r7, #12
 8001272:	4910      	ldr	r1, [pc, #64]	; (80012b4 <HAL_UART_RxCpltCallback+0xa4>)
 8001274:	f006 fc7a 	bl	8007b6c <siprintf>
	OLED_ShowString(10, 30, hello);
 8001278:	f107 030c 	add.w	r3, r7, #12
 800127c:	461a      	mov	r2, r3
 800127e:	211e      	movs	r1, #30
 8001280:	200a      	movs	r0, #10
 8001282:	f006 fb75 	bl	8007970 <OLED_ShowString>
	HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8001286:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800128a:	480b      	ldr	r0, [pc, #44]	; (80012b8 <HAL_UART_RxCpltCallback+0xa8>)
 800128c:	f001 f85d 	bl	800234a <HAL_GPIO_TogglePin>
}
 8001290:	bf00      	nop
 8001292:	3740      	adds	r7, #64	; 0x40
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	20000208 	.word	0x20000208
 800129c:	20000000 	.word	0x20000000
 80012a0:	20000001 	.word	0x20000001
 80012a4:	20000002 	.word	0x20000002
 80012a8:	20000003 	.word	0x20000003
 80012ac:	200001b4 	.word	0x200001b4
 80012b0:	08008474 	.word	0x08008474
 80012b4:	08008484 	.word	0x08008484
 80012b8:	40021000 	.word	0x40021000

080012bc <reset_motorVal>:

void reset_motorVal(){
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
	// Reset Values
	frontback = 'w';	// Front/back character
 80012c0:	4b08      	ldr	r3, [pc, #32]	; (80012e4 <reset_motorVal+0x28>)
 80012c2:	2277      	movs	r2, #119	; 0x77
 80012c4:	701a      	strb	r2, [r3, #0]
	fb_speed = '0';	// Front/back speed
 80012c6:	4b08      	ldr	r3, [pc, #32]	; (80012e8 <reset_motorVal+0x2c>)
 80012c8:	2230      	movs	r2, #48	; 0x30
 80012ca:	701a      	strb	r2, [r3, #0]
	leftright = 'a';	// Left/right character
 80012cc:	4b07      	ldr	r3, [pc, #28]	; (80012ec <reset_motorVal+0x30>)
 80012ce:	2261      	movs	r2, #97	; 0x61
 80012d0:	701a      	strb	r2, [r3, #0]
	lr_speed = '0';	// Left/right speed
 80012d2:	4b07      	ldr	r3, [pc, #28]	; (80012f0 <reset_motorVal+0x34>)
 80012d4:	2230      	movs	r2, #48	; 0x30
 80012d6:	701a      	strb	r2, [r3, #0]
}
 80012d8:	bf00      	nop
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	20000000 	.word	0x20000000
 80012e8:	20000001 	.word	0x20000001
 80012ec:	20000002 	.word	0x20000002
 80012f0:	20000003 	.word	0x20000003

080012f4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
//			  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
//			  aRxBuffer = NULL;
//		  }
//	  }
//	  HAL_UART_Transmit(&huart3, (uint8_t *)txData, strlen(txData), 10);
	  osDelay(5000);
 80012fc:	f241 3088 	movw	r0, #5000	; 0x1388
 8001300:	f003 fd4e 	bl	8004da0 <osDelay>
 8001304:	e7fa      	b.n	80012fc <StartDefaultTask+0x8>
	...

08001308 <motor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_motor */
void motor(void *argument)
{
 8001308:	b590      	push	{r4, r7, lr}
 800130a:	b08b      	sub	sp, #44	; 0x2c
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN motor */
	uint16_t servo_max = 3;	// max servo pwm turn
 8001310:	2303      	movs	r3, #3
 8001312:	827b      	strh	r3, [r7, #18]
	uint16_t pwmVal_servo = 149; // servo centre
 8001314:	2395      	movs	r3, #149	; 0x95
 8001316:	823b      	strh	r3, [r7, #16]
	double motor_offset_r = 1;
 8001318:	f04f 0200 	mov.w	r2, #0
 800131c:	4b9a      	ldr	r3, [pc, #616]	; (8001588 <motor+0x280>)
 800131e:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double motor_offset_l = 1;
 8001322:	f04f 0200 	mov.w	r2, #0
 8001326:	4b98      	ldr	r3, [pc, #608]	; (8001588 <motor+0x280>)
 8001328:	e9c7 2306 	strd	r2, r3, [r7, #24]

	uint16_t pwmVal_motor = 0;
 800132c:	2300      	movs	r3, #0
 800132e:	82fb      	strh	r3, [r7, #22]
	uint16_t motor_increment = 10;
 8001330:	230a      	movs	r3, #10
 8001332:	81fb      	strh	r3, [r7, #14]
	uint8_t accelerate;

	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8001334:	2100      	movs	r1, #0
 8001336:	4895      	ldr	r0, [pc, #596]	; (800158c <motor+0x284>)
 8001338:	f001 fd4a 	bl	8002dd0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 800133c:	2104      	movs	r1, #4
 800133e:	4893      	ldr	r0, [pc, #588]	; (800158c <motor+0x284>)
 8001340:	f001 fd46 	bl	8002dd0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001344:	210c      	movs	r1, #12
 8001346:	4892      	ldr	r0, [pc, #584]	; (8001590 <motor+0x288>)
 8001348:	f001 fd42 	bl	8002dd0 <HAL_TIM_PWM_Start>


  /* Infinite loop */
  for(;;)
  {
	  accelerate = 1; // Default always start with acceleration
 800134c:	2301      	movs	r3, #1
 800134e:	757b      	strb	r3, [r7, #21]

	  // Turn Servo to desired position
	  // Centre - offset for left turn
	  if(leftright == 'a'){
 8001350:	4b90      	ldr	r3, [pc, #576]	; (8001594 <motor+0x28c>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	2b61      	cmp	r3, #97	; 0x61
 8001356:	d128      	bne.n	80013aa <motor+0xa2>
		  htim1.Instance->CCR4 = pwmVal_servo - (lr_speed-48) *servo_max;
 8001358:	8a3a      	ldrh	r2, [r7, #16]
 800135a:	4b8f      	ldr	r3, [pc, #572]	; (8001598 <motor+0x290>)
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	3b30      	subs	r3, #48	; 0x30
 8001360:	8a79      	ldrh	r1, [r7, #18]
 8001362:	fb01 f303 	mul.w	r3, r1, r3
 8001366:	1ad2      	subs	r2, r2, r3
 8001368:	4b89      	ldr	r3, [pc, #548]	; (8001590 <motor+0x288>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	641a      	str	r2, [r3, #64]	; 0x40
		  // right motor offset
		  // right motor have to spin more due to differential steering
		  motor_offset_r = 0.05*(lr_speed-48)+1;
 800136e:	4b8a      	ldr	r3, [pc, #552]	; (8001598 <motor+0x290>)
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	3b30      	subs	r3, #48	; 0x30
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff f9f7 	bl	8000768 <__aeabi_i2d>
 800137a:	a381      	add	r3, pc, #516	; (adr r3, 8001580 <motor+0x278>)
 800137c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001380:	f7fe ff76 	bl	8000270 <__aeabi_dmul>
 8001384:	4602      	mov	r2, r0
 8001386:	460b      	mov	r3, r1
 8001388:	4610      	mov	r0, r2
 800138a:	4619      	mov	r1, r3
 800138c:	f04f 0200 	mov.w	r2, #0
 8001390:	4b7d      	ldr	r3, [pc, #500]	; (8001588 <motor+0x280>)
 8001392:	f7ff f89d 	bl	80004d0 <__adddf3>
 8001396:	4602      	mov	r2, r0
 8001398:	460b      	mov	r3, r1
 800139a:	e9c7 2308 	strd	r2, r3, [r7, #32]
		  motor_offset_l = 1;
 800139e:	f04f 0200 	mov.w	r2, #0
 80013a2:	4b79      	ldr	r3, [pc, #484]	; (8001588 <motor+0x280>)
 80013a4:	e9c7 2306 	strd	r2, r3, [r7, #24]
 80013a8:	e02b      	b.n	8001402 <motor+0xfa>

	  }
	  else if(leftright =='d'){
 80013aa:	4b7a      	ldr	r3, [pc, #488]	; (8001594 <motor+0x28c>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	2b64      	cmp	r3, #100	; 0x64
 80013b0:	d127      	bne.n	8001402 <motor+0xfa>
		  htim1.Instance->CCR4 = pwmVal_servo + (lr_speed-48) *servo_max;
 80013b2:	8a3a      	ldrh	r2, [r7, #16]
 80013b4:	4b78      	ldr	r3, [pc, #480]	; (8001598 <motor+0x290>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	3b30      	subs	r3, #48	; 0x30
 80013ba:	8a79      	ldrh	r1, [r7, #18]
 80013bc:	fb01 f303 	mul.w	r3, r1, r3
 80013c0:	441a      	add	r2, r3
 80013c2:	4b73      	ldr	r3, [pc, #460]	; (8001590 <motor+0x288>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	641a      	str	r2, [r3, #64]	; 0x40
		  // left motor offset
		  motor_offset_r = 1;
 80013c8:	f04f 0200 	mov.w	r2, #0
 80013cc:	4b6e      	ldr	r3, [pc, #440]	; (8001588 <motor+0x280>)
 80013ce:	e9c7 2308 	strd	r2, r3, [r7, #32]
		  motor_offset_l = 0.05*(lr_speed-48)+1;
 80013d2:	4b71      	ldr	r3, [pc, #452]	; (8001598 <motor+0x290>)
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	3b30      	subs	r3, #48	; 0x30
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff f9c5 	bl	8000768 <__aeabi_i2d>
 80013de:	a368      	add	r3, pc, #416	; (adr r3, 8001580 <motor+0x278>)
 80013e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e4:	f7fe ff44 	bl	8000270 <__aeabi_dmul>
 80013e8:	4602      	mov	r2, r0
 80013ea:	460b      	mov	r3, r1
 80013ec:	4610      	mov	r0, r2
 80013ee:	4619      	mov	r1, r3
 80013f0:	f04f 0200 	mov.w	r2, #0
 80013f4:	4b64      	ldr	r3, [pc, #400]	; (8001588 <motor+0x280>)
 80013f6:	f7ff f86b 	bl	80004d0 <__adddf3>
 80013fa:	4602      	mov	r2, r0
 80013fc:	460b      	mov	r3, r1
 80013fe:	e9c7 2306 	strd	r2, r3, [r7, #24]
	  }


	  // Move Motor forward
	  if(frontback == 'w'){
 8001402:	4b66      	ldr	r3, [pc, #408]	; (800159c <motor+0x294>)
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	2b77      	cmp	r3, #119	; 0x77
 8001408:	d158      	bne.n	80014bc <motor+0x1b4>
		  do
		  	  {

		  		  // H-Bridge Circuit for AINx; 1 turn on, the other turns off
		  		  // MOTOR A
		  		  HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 800140a:	2201      	movs	r2, #1
 800140c:	2104      	movs	r1, #4
 800140e:	4864      	ldr	r0, [pc, #400]	; (80015a0 <motor+0x298>)
 8001410:	f000 ff82 	bl	8002318 <HAL_GPIO_WritePin>
		  		  HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 8001414:	2200      	movs	r2, #0
 8001416:	2108      	movs	r1, #8
 8001418:	4861      	ldr	r0, [pc, #388]	; (80015a0 <motor+0x298>)
 800141a:	f000 ff7d 	bl	8002318 <HAL_GPIO_WritePin>

		  		  // MOTOR B
		  		  HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 800141e:	2201      	movs	r2, #1
 8001420:	2120      	movs	r1, #32
 8001422:	485f      	ldr	r0, [pc, #380]	; (80015a0 <motor+0x298>)
 8001424:	f000 ff78 	bl	8002318 <HAL_GPIO_WritePin>
		  		  HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 8001428:	2200      	movs	r2, #0
 800142a:	2110      	movs	r1, #16
 800142c:	485c      	ldr	r0, [pc, #368]	; (80015a0 <motor+0x298>)
 800142e:	f000 ff73 	bl	8002318 <HAL_GPIO_WritePin>

		  		  if(accelerate == 1){
 8001432:	7d7b      	ldrb	r3, [r7, #21]
 8001434:	2b01      	cmp	r3, #1
 8001436:	d112      	bne.n	800145e <motor+0x156>
		  			  pwmVal_motor+=motor_increment;	// Accelerating
 8001438:	8afa      	ldrh	r2, [r7, #22]
 800143a:	89fb      	ldrh	r3, [r7, #14]
 800143c:	4413      	add	r3, r2
 800143e:	82fb      	strh	r3, [r7, #22]
		  			  if(pwmVal_motor > (fb_speed-48) * 400){
 8001440:	8afa      	ldrh	r2, [r7, #22]
 8001442:	4b58      	ldr	r3, [pc, #352]	; (80015a4 <motor+0x29c>)
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	3b30      	subs	r3, #48	; 0x30
 8001448:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800144c:	fb01 f303 	mul.w	r3, r1, r3
 8001450:	429a      	cmp	r2, r3
 8001452:	dd08      	ble.n	8001466 <motor+0x15e>
		  				  accelerate = 0;		// Decelerating
 8001454:	2300      	movs	r3, #0
 8001456:	757b      	strb	r3, [r7, #21]
		  				  reset_motorVal(); // Remove infinite motor loop
 8001458:	f7ff ff30 	bl	80012bc <reset_motorVal>
 800145c:	e003      	b.n	8001466 <motor+0x15e>
		  			  }

		  		  }

		  		  else
		  			pwmVal_motor-=motor_increment;
 800145e:	8afa      	ldrh	r2, [r7, #22]
 8001460:	89fb      	ldrh	r3, [r7, #14]
 8001462:	1ad3      	subs	r3, r2, r3
 8001464:	82fb      	strh	r3, [r7, #22]
		  		  // Modify comparison value for duty cycle
		  		  __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, motor_offset_r*pwmVal_motor);
 8001466:	8afb      	ldrh	r3, [r7, #22]
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff f97d 	bl	8000768 <__aeabi_i2d>
 800146e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001472:	f7fe fefd 	bl	8000270 <__aeabi_dmul>
 8001476:	4602      	mov	r2, r0
 8001478:	460b      	mov	r3, r1
 800147a:	4944      	ldr	r1, [pc, #272]	; (800158c <motor+0x284>)
 800147c:	680c      	ldr	r4, [r1, #0]
 800147e:	4610      	mov	r0, r2
 8001480:	4619      	mov	r1, r3
 8001482:	f7ff f9db 	bl	800083c <__aeabi_d2uiz>
 8001486:	4603      	mov	r3, r0
 8001488:	6363      	str	r3, [r4, #52]	; 0x34
		  		  __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, motor_offset_l*pwmVal_motor);
 800148a:	8afb      	ldrh	r3, [r7, #22]
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff f96b 	bl	8000768 <__aeabi_i2d>
 8001492:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001496:	f7fe feeb 	bl	8000270 <__aeabi_dmul>
 800149a:	4602      	mov	r2, r0
 800149c:	460b      	mov	r3, r1
 800149e:	493b      	ldr	r1, [pc, #236]	; (800158c <motor+0x284>)
 80014a0:	680c      	ldr	r4, [r1, #0]
 80014a2:	4610      	mov	r0, r2
 80014a4:	4619      	mov	r1, r3
 80014a6:	f7ff f9c9 	bl	800083c <__aeabi_d2uiz>
 80014aa:	4603      	mov	r3, r0
 80014ac:	63a3      	str	r3, [r4, #56]	; 0x38
		  		  osDelay(10);
 80014ae:	200a      	movs	r0, #10
 80014b0:	f003 fc76 	bl	8004da0 <osDelay>

		  	  }while(pwmVal_motor >0);
 80014b4:	8afb      	ldrh	r3, [r7, #22]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d1a7      	bne.n	800140a <motor+0x102>
 80014ba:	e05b      	b.n	8001574 <motor+0x26c>
	  }

	  else if(frontback == 's'){
 80014bc:	4b37      	ldr	r3, [pc, #220]	; (800159c <motor+0x294>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	2b73      	cmp	r3, #115	; 0x73
 80014c2:	d157      	bne.n	8001574 <motor+0x26c>
		  do
		  	  {
		  		  // MOTOR A
		  		  HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 80014c4:	2200      	movs	r2, #0
 80014c6:	2104      	movs	r1, #4
 80014c8:	4835      	ldr	r0, [pc, #212]	; (80015a0 <motor+0x298>)
 80014ca:	f000 ff25 	bl	8002318 <HAL_GPIO_WritePin>
		  		  HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 80014ce:	2201      	movs	r2, #1
 80014d0:	2108      	movs	r1, #8
 80014d2:	4833      	ldr	r0, [pc, #204]	; (80015a0 <motor+0x298>)
 80014d4:	f000 ff20 	bl	8002318 <HAL_GPIO_WritePin>

		  		  // MOTOR B
		  		  HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 80014d8:	2200      	movs	r2, #0
 80014da:	2120      	movs	r1, #32
 80014dc:	4830      	ldr	r0, [pc, #192]	; (80015a0 <motor+0x298>)
 80014de:	f000 ff1b 	bl	8002318 <HAL_GPIO_WritePin>
		  		  HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET);
 80014e2:	2201      	movs	r2, #1
 80014e4:	2110      	movs	r1, #16
 80014e6:	482e      	ldr	r0, [pc, #184]	; (80015a0 <motor+0x298>)
 80014e8:	f000 ff16 	bl	8002318 <HAL_GPIO_WritePin>

		  		  if(accelerate == 1){
 80014ec:	7d7b      	ldrb	r3, [r7, #21]
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d112      	bne.n	8001518 <motor+0x210>
		  			pwmVal_motor+=motor_increment;
 80014f2:	8afa      	ldrh	r2, [r7, #22]
 80014f4:	89fb      	ldrh	r3, [r7, #14]
 80014f6:	4413      	add	r3, r2
 80014f8:	82fb      	strh	r3, [r7, #22]
		  			  if(pwmVal_motor > (fb_speed-48) * 400){
 80014fa:	8afa      	ldrh	r2, [r7, #22]
 80014fc:	4b29      	ldr	r3, [pc, #164]	; (80015a4 <motor+0x29c>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	3b30      	subs	r3, #48	; 0x30
 8001502:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8001506:	fb01 f303 	mul.w	r3, r1, r3
 800150a:	429a      	cmp	r2, r3
 800150c:	dd08      	ble.n	8001520 <motor+0x218>
		  				accelerate = 0;		// Decelerating
 800150e:	2300      	movs	r3, #0
 8001510:	757b      	strb	r3, [r7, #21]
		  				reset_motorVal(); // Remove infinite motor loop
 8001512:	f7ff fed3 	bl	80012bc <reset_motorVal>
 8001516:	e003      	b.n	8001520 <motor+0x218>
		  			  }
		  		  }

		  		  else
		  			pwmVal_motor-=motor_increment;
 8001518:	8afa      	ldrh	r2, [r7, #22]
 800151a:	89fb      	ldrh	r3, [r7, #14]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	82fb      	strh	r3, [r7, #22]

		  		  __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, motor_offset_r*pwmVal_motor);
 8001520:	8afb      	ldrh	r3, [r7, #22]
 8001522:	4618      	mov	r0, r3
 8001524:	f7ff f920 	bl	8000768 <__aeabi_i2d>
 8001528:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800152c:	f7fe fea0 	bl	8000270 <__aeabi_dmul>
 8001530:	4602      	mov	r2, r0
 8001532:	460b      	mov	r3, r1
 8001534:	4915      	ldr	r1, [pc, #84]	; (800158c <motor+0x284>)
 8001536:	680c      	ldr	r4, [r1, #0]
 8001538:	4610      	mov	r0, r2
 800153a:	4619      	mov	r1, r3
 800153c:	f7ff f97e 	bl	800083c <__aeabi_d2uiz>
 8001540:	4603      	mov	r3, r0
 8001542:	6363      	str	r3, [r4, #52]	; 0x34
				  __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, motor_offset_l*pwmVal_motor);
 8001544:	8afb      	ldrh	r3, [r7, #22]
 8001546:	4618      	mov	r0, r3
 8001548:	f7ff f90e 	bl	8000768 <__aeabi_i2d>
 800154c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001550:	f7fe fe8e 	bl	8000270 <__aeabi_dmul>
 8001554:	4602      	mov	r2, r0
 8001556:	460b      	mov	r3, r1
 8001558:	490c      	ldr	r1, [pc, #48]	; (800158c <motor+0x284>)
 800155a:	680c      	ldr	r4, [r1, #0]
 800155c:	4610      	mov	r0, r2
 800155e:	4619      	mov	r1, r3
 8001560:	f7ff f96c 	bl	800083c <__aeabi_d2uiz>
 8001564:	4603      	mov	r3, r0
 8001566:	63a3      	str	r3, [r4, #56]	; 0x38
		  		  osDelay(10);
 8001568:	200a      	movs	r0, #10
 800156a:	f003 fc19 	bl	8004da0 <osDelay>
		  	  }while(pwmVal_motor>0);
 800156e:	8afb      	ldrh	r3, [r7, #22]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d1a7      	bne.n	80014c4 <motor+0x1bc>
	  }
	  osDelay(100);
 8001574:	2064      	movs	r0, #100	; 0x64
 8001576:	f003 fc13 	bl	8004da0 <osDelay>
	  accelerate = 1; // Default always start with acceleration
 800157a:	e6e7      	b.n	800134c <motor+0x44>
 800157c:	f3af 8000 	nop.w
 8001580:	9999999a 	.word	0x9999999a
 8001584:	3fa99999 	.word	0x3fa99999
 8001588:	3ff00000 	.word	0x3ff00000
 800158c:	2000016c 	.word	0x2000016c
 8001590:	20000094 	.word	0x20000094
 8001594:	20000002 	.word	0x20000002
 8001598:	20000003 	.word	0x20000003
 800159c:	20000000 	.word	0x20000000
 80015a0:	40020000 	.word	0x40020000
 80015a4:	20000001 	.word	0x20000001

080015a8 <showoled>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_showoled */
void showoled(void *argument)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b088      	sub	sp, #32
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN showoled */
  /* Infinite loop */
	uint8_t hello[20] = "test\0";
 80015b0:	4a0e      	ldr	r2, [pc, #56]	; (80015ec <showoled+0x44>)
 80015b2:	f107 030c 	add.w	r3, r7, #12
 80015b6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015ba:	6018      	str	r0, [r3, #0]
 80015bc:	3304      	adds	r3, #4
 80015be:	8019      	strh	r1, [r3, #0]
 80015c0:	f107 0312 	add.w	r3, r7, #18
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	605a      	str	r2, [r3, #4]
 80015ca:	609a      	str	r2, [r3, #8]
 80015cc:	819a      	strh	r2, [r3, #12]
	for(;;)
	{

		OLED_ShowString(10, 10, hello);
 80015ce:	f107 030c 	add.w	r3, r7, #12
 80015d2:	461a      	mov	r2, r3
 80015d4:	210a      	movs	r1, #10
 80015d6:	200a      	movs	r0, #10
 80015d8:	f006 f9ca 	bl	8007970 <OLED_ShowString>
		OLED_Refresh_Gram();
 80015dc:	f006 f854 	bl	8007688 <OLED_Refresh_Gram>
		osDelay(1000);
 80015e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015e4:	f003 fbdc 	bl	8004da0 <osDelay>
		OLED_ShowString(10, 10, hello);
 80015e8:	e7f1      	b.n	80015ce <showoled+0x26>
 80015ea:	bf00      	nop
 80015ec:	08008494 	.word	0x08008494

080015f0 <encoder_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_encoder_task */
void encoder_task(void *argument)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b08e      	sub	sp, #56	; 0x38
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN encoder_task */
  /* Infinite loop */
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80015f8:	213c      	movs	r1, #60	; 0x3c
 80015fa:	482f      	ldr	r0, [pc, #188]	; (80016b8 <encoder_task+0xc8>)
 80015fc:	f001 fd56 	bl	80030ac <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 8001600:	213c      	movs	r1, #60	; 0x3c
 8001602:	482e      	ldr	r0, [pc, #184]	; (80016bc <encoder_task+0xcc>)
 8001604:	f001 fd52 	bl	80030ac <HAL_TIM_Encoder_Start>

	int cnt1, diffa=0;
 8001608:	2300      	movs	r3, #0
 800160a:	637b      	str	r3, [r7, #52]	; 0x34
	int cnt2, diffb=0;
 800160c:	2300      	movs	r3, #0
 800160e:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t tick;

	tick = HAL_GetTick();
 8001610:	f000 fb12 	bl	8001c38 <HAL_GetTick>
 8001614:	62f8      	str	r0, [r7, #44]	; 0x2c

	int cur_dist = 0;
 8001616:	2300      	movs	r3, #0
 8001618:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t msg[20];

	for(;;)
	{
		// Every 1000 ticks, get reading(How fast wheel turn)
		if(HAL_GetTick()-tick > 10){
 800161a:	f000 fb0d 	bl	8001c38 <HAL_GetTick>
 800161e:	4602      	mov	r2, r0
 8001620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	2b0a      	cmp	r3, #10
 8001626:	d9f8      	bls.n	800161a <encoder_task+0x2a>
			// At rising edge, counter increase by 1
			cnt1 = __HAL_TIM_GET_COUNTER(&htim2);
 8001628:	4b23      	ldr	r3, [pc, #140]	; (80016b8 <encoder_task+0xc8>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800162e:	627b      	str	r3, [r7, #36]	; 0x24
			cnt2 = __HAL_TIM_GET_COUNTER(&htim3);
 8001630:	4b22      	ldr	r3, [pc, #136]	; (80016bc <encoder_task+0xcc>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001636:	623b      	str	r3, [r7, #32]

			/* Motor A */
			// Counting up; Motor moving forward
			if(cnt1 - 32500 > 0){
 8001638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163a:	f647 62f4 	movw	r2, #32500	; 0x7ef4
 800163e:	4293      	cmp	r3, r2
 8001640:	dd05      	ble.n	800164e <encoder_task+0x5e>
				diffa = cnt1 - 65535;
 8001642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001644:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8001648:	3bff      	subs	r3, #255	; 0xff
 800164a:	637b      	str	r3, [r7, #52]	; 0x34
 800164c:	e006      	b.n	800165c <encoder_task+0x6c>
			}
			// Counting down; Motor moving backward
			else if(cnt1 - 32500 < 0){
 800164e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001650:	f647 62f3 	movw	r2, #32499	; 0x7ef3
 8001654:	4293      	cmp	r3, r2
 8001656:	dc01      	bgt.n	800165c <encoder_task+0x6c>
				diffa = cnt1;
 8001658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165a:	637b      	str	r3, [r7, #52]	; 0x34
			}

			/* Motor B */
			// Counting up; Motor moving backward
			if(cnt2 - 32500 > 0){
 800165c:	6a3b      	ldr	r3, [r7, #32]
 800165e:	f647 62f4 	movw	r2, #32500	; 0x7ef4
 8001662:	4293      	cmp	r3, r2
 8001664:	dd05      	ble.n	8001672 <encoder_task+0x82>
				diffb = (cnt2 - 65535);
 8001666:	6a3b      	ldr	r3, [r7, #32]
 8001668:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 800166c:	3bff      	subs	r3, #255	; 0xff
 800166e:	633b      	str	r3, [r7, #48]	; 0x30
 8001670:	e006      	b.n	8001680 <encoder_task+0x90>
			}
			// Counting down; Motor moving forward
			else if(cnt2 - 32500 < 0){
 8001672:	6a3b      	ldr	r3, [r7, #32]
 8001674:	f647 62f3 	movw	r2, #32499	; 0x7ef3
 8001678:	4293      	cmp	r3, r2
 800167a:	dc01      	bgt.n	8001680 <encoder_task+0x90>
				diffb = cnt2;
 800167c:	6a3b      	ldr	r3, [r7, #32]
 800167e:	633b      	str	r3, [r7, #48]	; 0x30
			}


			// Display difference
			sprintf(msg, "Diff: %3d\0", diffa + diffb);
 8001680:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001684:	441a      	add	r2, r3
 8001686:	f107 030c 	add.w	r3, r7, #12
 800168a:	490d      	ldr	r1, [pc, #52]	; (80016c0 <encoder_task+0xd0>)
 800168c:	4618      	mov	r0, r3
 800168e:	f006 fa6d 	bl	8007b6c <siprintf>

			OLED_ShowString(10,40,msg);
 8001692:	f107 030c 	add.w	r3, r7, #12
 8001696:	461a      	mov	r2, r3
 8001698:	2128      	movs	r1, #40	; 0x28
 800169a:	200a      	movs	r0, #10
 800169c:	f006 f968 	bl	8007970 <OLED_ShowString>
//			msg[0] = '\0';
			// Reset base tick
			__HAL_TIM_SET_COUNTER(&htim2, 0);
 80016a0:	4b05      	ldr	r3, [pc, #20]	; (80016b8 <encoder_task+0xc8>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2200      	movs	r2, #0
 80016a6:	625a      	str	r2, [r3, #36]	; 0x24
			__HAL_TIM_SET_COUNTER(&htim3, 0);
 80016a8:	4b04      	ldr	r3, [pc, #16]	; (80016bc <encoder_task+0xcc>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	2200      	movs	r2, #0
 80016ae:	625a      	str	r2, [r3, #36]	; 0x24

			tick = HAL_GetTick();
 80016b0:	f000 fac2 	bl	8001c38 <HAL_GetTick>
 80016b4:	62f8      	str	r0, [r7, #44]	; 0x2c
		if(HAL_GetTick()-tick > 10){
 80016b6:	e7b0      	b.n	800161a <encoder_task+0x2a>
 80016b8:	200000dc 	.word	0x200000dc
 80016bc:	20000124 	.word	0x20000124
 80016c0:	080084a8 	.word	0x080084a8

080016c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016c8:	b672      	cpsid	i
}
 80016ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016cc:	e7fe      	b.n	80016cc <Error_Handler+0x8>
	...

080016d0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	607b      	str	r3, [r7, #4]
 80016da:	4b12      	ldr	r3, [pc, #72]	; (8001724 <HAL_MspInit+0x54>)
 80016dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016de:	4a11      	ldr	r2, [pc, #68]	; (8001724 <HAL_MspInit+0x54>)
 80016e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016e4:	6453      	str	r3, [r2, #68]	; 0x44
 80016e6:	4b0f      	ldr	r3, [pc, #60]	; (8001724 <HAL_MspInit+0x54>)
 80016e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016ee:	607b      	str	r3, [r7, #4]
 80016f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	603b      	str	r3, [r7, #0]
 80016f6:	4b0b      	ldr	r3, [pc, #44]	; (8001724 <HAL_MspInit+0x54>)
 80016f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fa:	4a0a      	ldr	r2, [pc, #40]	; (8001724 <HAL_MspInit+0x54>)
 80016fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001700:	6413      	str	r3, [r2, #64]	; 0x40
 8001702:	4b08      	ldr	r3, [pc, #32]	; (8001724 <HAL_MspInit+0x54>)
 8001704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800170a:	603b      	str	r3, [r7, #0]
 800170c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800170e:	2200      	movs	r2, #0
 8001710:	210f      	movs	r1, #15
 8001712:	f06f 0001 	mvn.w	r0, #1
 8001716:	f000 fb9a 	bl	8001e4e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800171a:	bf00      	nop
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40023800 	.word	0x40023800

08001728 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b08a      	sub	sp, #40	; 0x28
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001730:	f107 0314 	add.w	r3, r7, #20
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	605a      	str	r2, [r3, #4]
 800173a:	609a      	str	r2, [r3, #8]
 800173c:	60da      	str	r2, [r3, #12]
 800173e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a23      	ldr	r2, [pc, #140]	; (80017d4 <HAL_TIM_Base_MspInit+0xac>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d10e      	bne.n	8001768 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800174a:	2300      	movs	r3, #0
 800174c:	613b      	str	r3, [r7, #16]
 800174e:	4b22      	ldr	r3, [pc, #136]	; (80017d8 <HAL_TIM_Base_MspInit+0xb0>)
 8001750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001752:	4a21      	ldr	r2, [pc, #132]	; (80017d8 <HAL_TIM_Base_MspInit+0xb0>)
 8001754:	f043 0301 	orr.w	r3, r3, #1
 8001758:	6453      	str	r3, [r2, #68]	; 0x44
 800175a:	4b1f      	ldr	r3, [pc, #124]	; (80017d8 <HAL_TIM_Base_MspInit+0xb0>)
 800175c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	613b      	str	r3, [r7, #16]
 8001764:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001766:	e030      	b.n	80017ca <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM8)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a1b      	ldr	r2, [pc, #108]	; (80017dc <HAL_TIM_Base_MspInit+0xb4>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d12b      	bne.n	80017ca <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001772:	2300      	movs	r3, #0
 8001774:	60fb      	str	r3, [r7, #12]
 8001776:	4b18      	ldr	r3, [pc, #96]	; (80017d8 <HAL_TIM_Base_MspInit+0xb0>)
 8001778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800177a:	4a17      	ldr	r2, [pc, #92]	; (80017d8 <HAL_TIM_Base_MspInit+0xb0>)
 800177c:	f043 0302 	orr.w	r3, r3, #2
 8001780:	6453      	str	r3, [r2, #68]	; 0x44
 8001782:	4b15      	ldr	r3, [pc, #84]	; (80017d8 <HAL_TIM_Base_MspInit+0xb0>)
 8001784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001786:	f003 0302 	and.w	r3, r3, #2
 800178a:	60fb      	str	r3, [r7, #12]
 800178c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	60bb      	str	r3, [r7, #8]
 8001792:	4b11      	ldr	r3, [pc, #68]	; (80017d8 <HAL_TIM_Base_MspInit+0xb0>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	4a10      	ldr	r2, [pc, #64]	; (80017d8 <HAL_TIM_Base_MspInit+0xb0>)
 8001798:	f043 0304 	orr.w	r3, r3, #4
 800179c:	6313      	str	r3, [r2, #48]	; 0x30
 800179e:	4b0e      	ldr	r3, [pc, #56]	; (80017d8 <HAL_TIM_Base_MspInit+0xb0>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a2:	f003 0304 	and.w	r3, r3, #4
 80017a6:	60bb      	str	r3, [r7, #8]
 80017a8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 80017aa:	23c0      	movs	r3, #192	; 0xc0
 80017ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ae:	2302      	movs	r3, #2
 80017b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b2:	2300      	movs	r3, #0
 80017b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b6:	2300      	movs	r3, #0
 80017b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80017ba:	2303      	movs	r3, #3
 80017bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017be:	f107 0314 	add.w	r3, r7, #20
 80017c2:	4619      	mov	r1, r3
 80017c4:	4806      	ldr	r0, [pc, #24]	; (80017e0 <HAL_TIM_Base_MspInit+0xb8>)
 80017c6:	f000 fc0b 	bl	8001fe0 <HAL_GPIO_Init>
}
 80017ca:	bf00      	nop
 80017cc:	3728      	adds	r7, #40	; 0x28
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	40010000 	.word	0x40010000
 80017d8:	40023800 	.word	0x40023800
 80017dc:	40010400 	.word	0x40010400
 80017e0:	40020800 	.word	0x40020800

080017e4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b08c      	sub	sp, #48	; 0x30
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ec:	f107 031c 	add.w	r3, r7, #28
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]
 80017f4:	605a      	str	r2, [r3, #4]
 80017f6:	609a      	str	r2, [r3, #8]
 80017f8:	60da      	str	r2, [r3, #12]
 80017fa:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001804:	d14b      	bne.n	800189e <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001806:	2300      	movs	r3, #0
 8001808:	61bb      	str	r3, [r7, #24]
 800180a:	4b3f      	ldr	r3, [pc, #252]	; (8001908 <HAL_TIM_Encoder_MspInit+0x124>)
 800180c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180e:	4a3e      	ldr	r2, [pc, #248]	; (8001908 <HAL_TIM_Encoder_MspInit+0x124>)
 8001810:	f043 0301 	orr.w	r3, r3, #1
 8001814:	6413      	str	r3, [r2, #64]	; 0x40
 8001816:	4b3c      	ldr	r3, [pc, #240]	; (8001908 <HAL_TIM_Encoder_MspInit+0x124>)
 8001818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181a:	f003 0301 	and.w	r3, r3, #1
 800181e:	61bb      	str	r3, [r7, #24]
 8001820:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001822:	2300      	movs	r3, #0
 8001824:	617b      	str	r3, [r7, #20]
 8001826:	4b38      	ldr	r3, [pc, #224]	; (8001908 <HAL_TIM_Encoder_MspInit+0x124>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182a:	4a37      	ldr	r2, [pc, #220]	; (8001908 <HAL_TIM_Encoder_MspInit+0x124>)
 800182c:	f043 0301 	orr.w	r3, r3, #1
 8001830:	6313      	str	r3, [r2, #48]	; 0x30
 8001832:	4b35      	ldr	r3, [pc, #212]	; (8001908 <HAL_TIM_Encoder_MspInit+0x124>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	617b      	str	r3, [r7, #20]
 800183c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800183e:	2300      	movs	r3, #0
 8001840:	613b      	str	r3, [r7, #16]
 8001842:	4b31      	ldr	r3, [pc, #196]	; (8001908 <HAL_TIM_Encoder_MspInit+0x124>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001846:	4a30      	ldr	r2, [pc, #192]	; (8001908 <HAL_TIM_Encoder_MspInit+0x124>)
 8001848:	f043 0302 	orr.w	r3, r3, #2
 800184c:	6313      	str	r3, [r2, #48]	; 0x30
 800184e:	4b2e      	ldr	r3, [pc, #184]	; (8001908 <HAL_TIM_Encoder_MspInit+0x124>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	f003 0302 	and.w	r3, r3, #2
 8001856:	613b      	str	r3, [r7, #16]
 8001858:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800185a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800185e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001860:	2302      	movs	r3, #2
 8001862:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001864:	2300      	movs	r3, #0
 8001866:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001868:	2300      	movs	r3, #0
 800186a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800186c:	2301      	movs	r3, #1
 800186e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001870:	f107 031c 	add.w	r3, r7, #28
 8001874:	4619      	mov	r1, r3
 8001876:	4825      	ldr	r0, [pc, #148]	; (800190c <HAL_TIM_Encoder_MspInit+0x128>)
 8001878:	f000 fbb2 	bl	8001fe0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800187c:	2308      	movs	r3, #8
 800187e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001880:	2302      	movs	r3, #2
 8001882:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001884:	2300      	movs	r3, #0
 8001886:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001888:	2300      	movs	r3, #0
 800188a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800188c:	2301      	movs	r3, #1
 800188e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001890:	f107 031c 	add.w	r3, r7, #28
 8001894:	4619      	mov	r1, r3
 8001896:	481e      	ldr	r0, [pc, #120]	; (8001910 <HAL_TIM_Encoder_MspInit+0x12c>)
 8001898:	f000 fba2 	bl	8001fe0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800189c:	e030      	b.n	8001900 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM3)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a1c      	ldr	r2, [pc, #112]	; (8001914 <HAL_TIM_Encoder_MspInit+0x130>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d12b      	bne.n	8001900 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80018a8:	2300      	movs	r3, #0
 80018aa:	60fb      	str	r3, [r7, #12]
 80018ac:	4b16      	ldr	r3, [pc, #88]	; (8001908 <HAL_TIM_Encoder_MspInit+0x124>)
 80018ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b0:	4a15      	ldr	r2, [pc, #84]	; (8001908 <HAL_TIM_Encoder_MspInit+0x124>)
 80018b2:	f043 0302 	orr.w	r3, r3, #2
 80018b6:	6413      	str	r3, [r2, #64]	; 0x40
 80018b8:	4b13      	ldr	r3, [pc, #76]	; (8001908 <HAL_TIM_Encoder_MspInit+0x124>)
 80018ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018bc:	f003 0302 	and.w	r3, r3, #2
 80018c0:	60fb      	str	r3, [r7, #12]
 80018c2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018c4:	2300      	movs	r3, #0
 80018c6:	60bb      	str	r3, [r7, #8]
 80018c8:	4b0f      	ldr	r3, [pc, #60]	; (8001908 <HAL_TIM_Encoder_MspInit+0x124>)
 80018ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018cc:	4a0e      	ldr	r2, [pc, #56]	; (8001908 <HAL_TIM_Encoder_MspInit+0x124>)
 80018ce:	f043 0301 	orr.w	r3, r3, #1
 80018d2:	6313      	str	r3, [r2, #48]	; 0x30
 80018d4:	4b0c      	ldr	r3, [pc, #48]	; (8001908 <HAL_TIM_Encoder_MspInit+0x124>)
 80018d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d8:	f003 0301 	and.w	r3, r3, #1
 80018dc:	60bb      	str	r3, [r7, #8]
 80018de:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80018e0:	23c0      	movs	r3, #192	; 0xc0
 80018e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e4:	2302      	movs	r3, #2
 80018e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e8:	2300      	movs	r3, #0
 80018ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ec:	2300      	movs	r3, #0
 80018ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80018f0:	2302      	movs	r3, #2
 80018f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f4:	f107 031c 	add.w	r3, r7, #28
 80018f8:	4619      	mov	r1, r3
 80018fa:	4804      	ldr	r0, [pc, #16]	; (800190c <HAL_TIM_Encoder_MspInit+0x128>)
 80018fc:	f000 fb70 	bl	8001fe0 <HAL_GPIO_Init>
}
 8001900:	bf00      	nop
 8001902:	3730      	adds	r7, #48	; 0x30
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	40023800 	.word	0x40023800
 800190c:	40020000 	.word	0x40020000
 8001910:	40020400 	.word	0x40020400
 8001914:	40000400 	.word	0x40000400

08001918 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b088      	sub	sp, #32
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001920:	f107 030c 	add.w	r3, r7, #12
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]
 8001928:	605a      	str	r2, [r3, #4]
 800192a:	609a      	str	r2, [r3, #8]
 800192c:	60da      	str	r2, [r3, #12]
 800192e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a12      	ldr	r2, [pc, #72]	; (8001980 <HAL_TIM_MspPostInit+0x68>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d11e      	bne.n	8001978 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800193a:	2300      	movs	r3, #0
 800193c:	60bb      	str	r3, [r7, #8]
 800193e:	4b11      	ldr	r3, [pc, #68]	; (8001984 <HAL_TIM_MspPostInit+0x6c>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001942:	4a10      	ldr	r2, [pc, #64]	; (8001984 <HAL_TIM_MspPostInit+0x6c>)
 8001944:	f043 0310 	orr.w	r3, r3, #16
 8001948:	6313      	str	r3, [r2, #48]	; 0x30
 800194a:	4b0e      	ldr	r3, [pc, #56]	; (8001984 <HAL_TIM_MspPostInit+0x6c>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194e:	f003 0310 	and.w	r3, r3, #16
 8001952:	60bb      	str	r3, [r7, #8]
 8001954:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001956:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800195a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800195c:	2302      	movs	r3, #2
 800195e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001960:	2300      	movs	r3, #0
 8001962:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001964:	2300      	movs	r3, #0
 8001966:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001968:	2301      	movs	r3, #1
 800196a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800196c:	f107 030c 	add.w	r3, r7, #12
 8001970:	4619      	mov	r1, r3
 8001972:	4805      	ldr	r0, [pc, #20]	; (8001988 <HAL_TIM_MspPostInit+0x70>)
 8001974:	f000 fb34 	bl	8001fe0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001978:	bf00      	nop
 800197a:	3720      	adds	r7, #32
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	40010000 	.word	0x40010000
 8001984:	40023800 	.word	0x40023800
 8001988:	40021000 	.word	0x40021000

0800198c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b08a      	sub	sp, #40	; 0x28
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001994:	f107 0314 	add.w	r3, r7, #20
 8001998:	2200      	movs	r2, #0
 800199a:	601a      	str	r2, [r3, #0]
 800199c:	605a      	str	r2, [r3, #4]
 800199e:	609a      	str	r2, [r3, #8]
 80019a0:	60da      	str	r2, [r3, #12]
 80019a2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a1d      	ldr	r2, [pc, #116]	; (8001a20 <HAL_UART_MspInit+0x94>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d134      	bne.n	8001a18 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80019ae:	2300      	movs	r3, #0
 80019b0:	613b      	str	r3, [r7, #16]
 80019b2:	4b1c      	ldr	r3, [pc, #112]	; (8001a24 <HAL_UART_MspInit+0x98>)
 80019b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b6:	4a1b      	ldr	r2, [pc, #108]	; (8001a24 <HAL_UART_MspInit+0x98>)
 80019b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019bc:	6413      	str	r3, [r2, #64]	; 0x40
 80019be:	4b19      	ldr	r3, [pc, #100]	; (8001a24 <HAL_UART_MspInit+0x98>)
 80019c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019c6:	613b      	str	r3, [r7, #16]
 80019c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019ca:	2300      	movs	r3, #0
 80019cc:	60fb      	str	r3, [r7, #12]
 80019ce:	4b15      	ldr	r3, [pc, #84]	; (8001a24 <HAL_UART_MspInit+0x98>)
 80019d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d2:	4a14      	ldr	r2, [pc, #80]	; (8001a24 <HAL_UART_MspInit+0x98>)
 80019d4:	f043 0304 	orr.w	r3, r3, #4
 80019d8:	6313      	str	r3, [r2, #48]	; 0x30
 80019da:	4b12      	ldr	r3, [pc, #72]	; (8001a24 <HAL_UART_MspInit+0x98>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019de:	f003 0304 	and.w	r3, r3, #4
 80019e2:	60fb      	str	r3, [r7, #12]
 80019e4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80019e6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80019ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ec:	2302      	movs	r3, #2
 80019ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f0:	2300      	movs	r3, #0
 80019f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f4:	2303      	movs	r3, #3
 80019f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80019f8:	2307      	movs	r3, #7
 80019fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019fc:	f107 0314 	add.w	r3, r7, #20
 8001a00:	4619      	mov	r1, r3
 8001a02:	4809      	ldr	r0, [pc, #36]	; (8001a28 <HAL_UART_MspInit+0x9c>)
 8001a04:	f000 faec 	bl	8001fe0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001a08:	2200      	movs	r2, #0
 8001a0a:	2105      	movs	r1, #5
 8001a0c:	2027      	movs	r0, #39	; 0x27
 8001a0e:	f000 fa1e 	bl	8001e4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001a12:	2027      	movs	r0, #39	; 0x27
 8001a14:	f000 fa37 	bl	8001e86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001a18:	bf00      	nop
 8001a1a:	3728      	adds	r7, #40	; 0x28
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	40004800 	.word	0x40004800
 8001a24:	40023800 	.word	0x40023800
 8001a28:	40020800 	.word	0x40020800

08001a2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a30:	e7fe      	b.n	8001a30 <NMI_Handler+0x4>

08001a32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a32:	b480      	push	{r7}
 8001a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a36:	e7fe      	b.n	8001a36 <HardFault_Handler+0x4>

08001a38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a3c:	e7fe      	b.n	8001a3c <MemManage_Handler+0x4>

08001a3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a42:	e7fe      	b.n	8001a42 <BusFault_Handler+0x4>

08001a44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a48:	e7fe      	b.n	8001a48 <UsageFault_Handler+0x4>

08001a4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a4e:	bf00      	nop
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr

08001a58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a5c:	f000 f8d8 	bl	8001c10 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001a60:	f005 f9e4 	bl	8006e2c <xTaskGetSchedulerState>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d001      	beq.n	8001a6e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001a6a:	f003 fe45 	bl	80056f8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a6e:	bf00      	nop
 8001a70:	bd80      	pop	{r7, pc}
	...

08001a74 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001a78:	4802      	ldr	r0, [pc, #8]	; (8001a84 <USART3_IRQHandler+0x10>)
 8001a7a:	f002 f98b 	bl	8003d94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001a7e:	bf00      	nop
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	200001b4 	.word	0x200001b4

08001a88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b086      	sub	sp, #24
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a90:	4a14      	ldr	r2, [pc, #80]	; (8001ae4 <_sbrk+0x5c>)
 8001a92:	4b15      	ldr	r3, [pc, #84]	; (8001ae8 <_sbrk+0x60>)
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a9c:	4b13      	ldr	r3, [pc, #76]	; (8001aec <_sbrk+0x64>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d102      	bne.n	8001aaa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001aa4:	4b11      	ldr	r3, [pc, #68]	; (8001aec <_sbrk+0x64>)
 8001aa6:	4a12      	ldr	r2, [pc, #72]	; (8001af0 <_sbrk+0x68>)
 8001aa8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001aaa:	4b10      	ldr	r3, [pc, #64]	; (8001aec <_sbrk+0x64>)
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	693a      	ldr	r2, [r7, #16]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d207      	bcs.n	8001ac8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ab8:	f006 f818 	bl	8007aec <__errno>
 8001abc:	4603      	mov	r3, r0
 8001abe:	220c      	movs	r2, #12
 8001ac0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ac2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ac6:	e009      	b.n	8001adc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ac8:	4b08      	ldr	r3, [pc, #32]	; (8001aec <_sbrk+0x64>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ace:	4b07      	ldr	r3, [pc, #28]	; (8001aec <_sbrk+0x64>)
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	4a05      	ldr	r2, [pc, #20]	; (8001aec <_sbrk+0x64>)
 8001ad8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ada:	68fb      	ldr	r3, [r7, #12]
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3718      	adds	r7, #24
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	20020000 	.word	0x20020000
 8001ae8:	00000400 	.word	0x00000400
 8001aec:	2000023c 	.word	0x2000023c
 8001af0:	20004fa8 	.word	0x20004fa8

08001af4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001af8:	4b06      	ldr	r3, [pc, #24]	; (8001b14 <SystemInit+0x20>)
 8001afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001afe:	4a05      	ldr	r2, [pc, #20]	; (8001b14 <SystemInit+0x20>)
 8001b00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b08:	bf00      	nop
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	e000ed00 	.word	0xe000ed00

08001b18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001b18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b50 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b1c:	480d      	ldr	r0, [pc, #52]	; (8001b54 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b1e:	490e      	ldr	r1, [pc, #56]	; (8001b58 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b20:	4a0e      	ldr	r2, [pc, #56]	; (8001b5c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b24:	e002      	b.n	8001b2c <LoopCopyDataInit>

08001b26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b2a:	3304      	adds	r3, #4

08001b2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b30:	d3f9      	bcc.n	8001b26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b32:	4a0b      	ldr	r2, [pc, #44]	; (8001b60 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b34:	4c0b      	ldr	r4, [pc, #44]	; (8001b64 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b38:	e001      	b.n	8001b3e <LoopFillZerobss>

08001b3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b3c:	3204      	adds	r2, #4

08001b3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b40:	d3fb      	bcc.n	8001b3a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001b42:	f7ff ffd7 	bl	8001af4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b46:	f005 ffd7 	bl	8007af8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b4a:	f7ff f819 	bl	8000b80 <main>
  bx  lr    
 8001b4e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001b50:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b58:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001b5c:	0800901c 	.word	0x0800901c
  ldr r2, =_sbss
 8001b60:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001b64:	20004fa4 	.word	0x20004fa4

08001b68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b68:	e7fe      	b.n	8001b68 <ADC_IRQHandler>
	...

08001b6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b70:	4b0e      	ldr	r3, [pc, #56]	; (8001bac <HAL_Init+0x40>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a0d      	ldr	r2, [pc, #52]	; (8001bac <HAL_Init+0x40>)
 8001b76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b7c:	4b0b      	ldr	r3, [pc, #44]	; (8001bac <HAL_Init+0x40>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a0a      	ldr	r2, [pc, #40]	; (8001bac <HAL_Init+0x40>)
 8001b82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b88:	4b08      	ldr	r3, [pc, #32]	; (8001bac <HAL_Init+0x40>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a07      	ldr	r2, [pc, #28]	; (8001bac <HAL_Init+0x40>)
 8001b8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b94:	2003      	movs	r0, #3
 8001b96:	f000 f94f 	bl	8001e38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b9a:	200f      	movs	r0, #15
 8001b9c:	f000 f808 	bl	8001bb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ba0:	f7ff fd96 	bl	80016d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	40023c00 	.word	0x40023c00

08001bb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bb8:	4b12      	ldr	r3, [pc, #72]	; (8001c04 <HAL_InitTick+0x54>)
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	4b12      	ldr	r3, [pc, #72]	; (8001c08 <HAL_InitTick+0x58>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f000 f967 	bl	8001ea2 <HAL_SYSTICK_Config>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e00e      	b.n	8001bfc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2b0f      	cmp	r3, #15
 8001be2:	d80a      	bhi.n	8001bfa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001be4:	2200      	movs	r2, #0
 8001be6:	6879      	ldr	r1, [r7, #4]
 8001be8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bec:	f000 f92f 	bl	8001e4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bf0:	4a06      	ldr	r2, [pc, #24]	; (8001c0c <HAL_InitTick+0x5c>)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	e000      	b.n	8001bfc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3708      	adds	r7, #8
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	20000004 	.word	0x20000004
 8001c08:	2000000c 	.word	0x2000000c
 8001c0c:	20000008 	.word	0x20000008

08001c10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c14:	4b06      	ldr	r3, [pc, #24]	; (8001c30 <HAL_IncTick+0x20>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	461a      	mov	r2, r3
 8001c1a:	4b06      	ldr	r3, [pc, #24]	; (8001c34 <HAL_IncTick+0x24>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4413      	add	r3, r2
 8001c20:	4a04      	ldr	r2, [pc, #16]	; (8001c34 <HAL_IncTick+0x24>)
 8001c22:	6013      	str	r3, [r2, #0]
}
 8001c24:	bf00      	nop
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	2000000c 	.word	0x2000000c
 8001c34:	20000240 	.word	0x20000240

08001c38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c3c:	4b03      	ldr	r3, [pc, #12]	; (8001c4c <HAL_GetTick+0x14>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	20000240 	.word	0x20000240

08001c50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c58:	f7ff ffee 	bl	8001c38 <HAL_GetTick>
 8001c5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c68:	d005      	beq.n	8001c76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c6a:	4b0a      	ldr	r3, [pc, #40]	; (8001c94 <HAL_Delay+0x44>)
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	461a      	mov	r2, r3
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	4413      	add	r3, r2
 8001c74:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c76:	bf00      	nop
 8001c78:	f7ff ffde 	bl	8001c38 <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	68fa      	ldr	r2, [r7, #12]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d8f7      	bhi.n	8001c78 <HAL_Delay+0x28>
  {
  }
}
 8001c88:	bf00      	nop
 8001c8a:	bf00      	nop
 8001c8c:	3710      	adds	r7, #16
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	2000000c 	.word	0x2000000c

08001c98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b085      	sub	sp, #20
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	f003 0307 	and.w	r3, r3, #7
 8001ca6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ca8:	4b0c      	ldr	r3, [pc, #48]	; (8001cdc <__NVIC_SetPriorityGrouping+0x44>)
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cae:	68ba      	ldr	r2, [r7, #8]
 8001cb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cca:	4a04      	ldr	r2, [pc, #16]	; (8001cdc <__NVIC_SetPriorityGrouping+0x44>)
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	60d3      	str	r3, [r2, #12]
}
 8001cd0:	bf00      	nop
 8001cd2:	3714      	adds	r7, #20
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr
 8001cdc:	e000ed00 	.word	0xe000ed00

08001ce0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ce4:	4b04      	ldr	r3, [pc, #16]	; (8001cf8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	0a1b      	lsrs	r3, r3, #8
 8001cea:	f003 0307 	and.w	r3, r3, #7
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr
 8001cf8:	e000ed00 	.word	0xe000ed00

08001cfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	4603      	mov	r3, r0
 8001d04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	db0b      	blt.n	8001d26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d0e:	79fb      	ldrb	r3, [r7, #7]
 8001d10:	f003 021f 	and.w	r2, r3, #31
 8001d14:	4907      	ldr	r1, [pc, #28]	; (8001d34 <__NVIC_EnableIRQ+0x38>)
 8001d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1a:	095b      	lsrs	r3, r3, #5
 8001d1c:	2001      	movs	r0, #1
 8001d1e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d26:	bf00      	nop
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	e000e100 	.word	0xe000e100

08001d38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	4603      	mov	r3, r0
 8001d40:	6039      	str	r1, [r7, #0]
 8001d42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	db0a      	blt.n	8001d62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	b2da      	uxtb	r2, r3
 8001d50:	490c      	ldr	r1, [pc, #48]	; (8001d84 <__NVIC_SetPriority+0x4c>)
 8001d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d56:	0112      	lsls	r2, r2, #4
 8001d58:	b2d2      	uxtb	r2, r2
 8001d5a:	440b      	add	r3, r1
 8001d5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d60:	e00a      	b.n	8001d78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	b2da      	uxtb	r2, r3
 8001d66:	4908      	ldr	r1, [pc, #32]	; (8001d88 <__NVIC_SetPriority+0x50>)
 8001d68:	79fb      	ldrb	r3, [r7, #7]
 8001d6a:	f003 030f 	and.w	r3, r3, #15
 8001d6e:	3b04      	subs	r3, #4
 8001d70:	0112      	lsls	r2, r2, #4
 8001d72:	b2d2      	uxtb	r2, r2
 8001d74:	440b      	add	r3, r1
 8001d76:	761a      	strb	r2, [r3, #24]
}
 8001d78:	bf00      	nop
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr
 8001d84:	e000e100 	.word	0xe000e100
 8001d88:	e000ed00 	.word	0xe000ed00

08001d8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b089      	sub	sp, #36	; 0x24
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	60f8      	str	r0, [r7, #12]
 8001d94:	60b9      	str	r1, [r7, #8]
 8001d96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	f003 0307 	and.w	r3, r3, #7
 8001d9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	f1c3 0307 	rsb	r3, r3, #7
 8001da6:	2b04      	cmp	r3, #4
 8001da8:	bf28      	it	cs
 8001daa:	2304      	movcs	r3, #4
 8001dac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	3304      	adds	r3, #4
 8001db2:	2b06      	cmp	r3, #6
 8001db4:	d902      	bls.n	8001dbc <NVIC_EncodePriority+0x30>
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	3b03      	subs	r3, #3
 8001dba:	e000      	b.n	8001dbe <NVIC_EncodePriority+0x32>
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dca:	43da      	mvns	r2, r3
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	401a      	ands	r2, r3
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dd4:	f04f 31ff 	mov.w	r1, #4294967295
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	fa01 f303 	lsl.w	r3, r1, r3
 8001dde:	43d9      	mvns	r1, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de4:	4313      	orrs	r3, r2
         );
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3724      	adds	r7, #36	; 0x24
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
	...

08001df4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	3b01      	subs	r3, #1
 8001e00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e04:	d301      	bcc.n	8001e0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e06:	2301      	movs	r3, #1
 8001e08:	e00f      	b.n	8001e2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e0a:	4a0a      	ldr	r2, [pc, #40]	; (8001e34 <SysTick_Config+0x40>)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	3b01      	subs	r3, #1
 8001e10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e12:	210f      	movs	r1, #15
 8001e14:	f04f 30ff 	mov.w	r0, #4294967295
 8001e18:	f7ff ff8e 	bl	8001d38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e1c:	4b05      	ldr	r3, [pc, #20]	; (8001e34 <SysTick_Config+0x40>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e22:	4b04      	ldr	r3, [pc, #16]	; (8001e34 <SysTick_Config+0x40>)
 8001e24:	2207      	movs	r2, #7
 8001e26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	e000e010 	.word	0xe000e010

08001e38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f7ff ff29 	bl	8001c98 <__NVIC_SetPriorityGrouping>
}
 8001e46:	bf00      	nop
 8001e48:	3708      	adds	r7, #8
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}

08001e4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	b086      	sub	sp, #24
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	4603      	mov	r3, r0
 8001e56:	60b9      	str	r1, [r7, #8]
 8001e58:	607a      	str	r2, [r7, #4]
 8001e5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e60:	f7ff ff3e 	bl	8001ce0 <__NVIC_GetPriorityGrouping>
 8001e64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	68b9      	ldr	r1, [r7, #8]
 8001e6a:	6978      	ldr	r0, [r7, #20]
 8001e6c:	f7ff ff8e 	bl	8001d8c <NVIC_EncodePriority>
 8001e70:	4602      	mov	r2, r0
 8001e72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e76:	4611      	mov	r1, r2
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7ff ff5d 	bl	8001d38 <__NVIC_SetPriority>
}
 8001e7e:	bf00      	nop
 8001e80:	3718      	adds	r7, #24
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b082      	sub	sp, #8
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7ff ff31 	bl	8001cfc <__NVIC_EnableIRQ>
}
 8001e9a:	bf00      	nop
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b082      	sub	sp, #8
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f7ff ffa2 	bl	8001df4 <SysTick_Config>
 8001eb0:	4603      	mov	r3, r0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	b084      	sub	sp, #16
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ec6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001ec8:	f7ff feb6 	bl	8001c38 <HAL_GetTick>
 8001ecc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d008      	beq.n	8001eec <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2280      	movs	r2, #128	; 0x80
 8001ede:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e052      	b.n	8001f92 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f022 0216 	bic.w	r2, r2, #22
 8001efa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	695a      	ldr	r2, [r3, #20]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f0a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d103      	bne.n	8001f1c <HAL_DMA_Abort+0x62>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d007      	beq.n	8001f2c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f022 0208 	bic.w	r2, r2, #8
 8001f2a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f022 0201 	bic.w	r2, r2, #1
 8001f3a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f3c:	e013      	b.n	8001f66 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f3e:	f7ff fe7b 	bl	8001c38 <HAL_GetTick>
 8001f42:	4602      	mov	r2, r0
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	2b05      	cmp	r3, #5
 8001f4a:	d90c      	bls.n	8001f66 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2220      	movs	r2, #32
 8001f50:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2203      	movs	r2, #3
 8001f56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e015      	b.n	8001f92 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0301 	and.w	r3, r3, #1
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d1e4      	bne.n	8001f3e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f78:	223f      	movs	r2, #63	; 0x3f
 8001f7a:	409a      	lsls	r2, r3
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2201      	movs	r2, #1
 8001f84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3710      	adds	r7, #16
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	b083      	sub	sp, #12
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d004      	beq.n	8001fb8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2280      	movs	r2, #128	; 0x80
 8001fb2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e00c      	b.n	8001fd2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2205      	movs	r2, #5
 8001fbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f022 0201 	bic.w	r2, r2, #1
 8001fce:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001fd0:	2300      	movs	r3, #0
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	370c      	adds	r7, #12
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
	...

08001fe0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b089      	sub	sp, #36	; 0x24
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001fea:	2300      	movs	r3, #0
 8001fec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	61fb      	str	r3, [r7, #28]
 8001ffa:	e16b      	b.n	80022d4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	fa02 f303 	lsl.w	r3, r2, r3
 8002004:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	697a      	ldr	r2, [r7, #20]
 800200c:	4013      	ands	r3, r2
 800200e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002010:	693a      	ldr	r2, [r7, #16]
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	429a      	cmp	r2, r3
 8002016:	f040 815a 	bne.w	80022ce <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f003 0303 	and.w	r3, r3, #3
 8002022:	2b01      	cmp	r3, #1
 8002024:	d005      	beq.n	8002032 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800202e:	2b02      	cmp	r3, #2
 8002030:	d130      	bne.n	8002094 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	2203      	movs	r2, #3
 800203e:	fa02 f303 	lsl.w	r3, r2, r3
 8002042:	43db      	mvns	r3, r3
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	4013      	ands	r3, r2
 8002048:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	68da      	ldr	r2, [r3, #12]
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	005b      	lsls	r3, r3, #1
 8002052:	fa02 f303 	lsl.w	r3, r2, r3
 8002056:	69ba      	ldr	r2, [r7, #24]
 8002058:	4313      	orrs	r3, r2
 800205a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	69ba      	ldr	r2, [r7, #24]
 8002060:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002068:	2201      	movs	r2, #1
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	fa02 f303 	lsl.w	r3, r2, r3
 8002070:	43db      	mvns	r3, r3
 8002072:	69ba      	ldr	r2, [r7, #24]
 8002074:	4013      	ands	r3, r2
 8002076:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	091b      	lsrs	r3, r3, #4
 800207e:	f003 0201 	and.w	r2, r3, #1
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	fa02 f303 	lsl.w	r3, r2, r3
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	4313      	orrs	r3, r2
 800208c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f003 0303 	and.w	r3, r3, #3
 800209c:	2b03      	cmp	r3, #3
 800209e:	d017      	beq.n	80020d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	005b      	lsls	r3, r3, #1
 80020aa:	2203      	movs	r2, #3
 80020ac:	fa02 f303 	lsl.w	r3, r2, r3
 80020b0:	43db      	mvns	r3, r3
 80020b2:	69ba      	ldr	r2, [r7, #24]
 80020b4:	4013      	ands	r3, r2
 80020b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	689a      	ldr	r2, [r3, #8]
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	005b      	lsls	r3, r3, #1
 80020c0:	fa02 f303 	lsl.w	r3, r2, r3
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f003 0303 	and.w	r3, r3, #3
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d123      	bne.n	8002124 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	08da      	lsrs	r2, r3, #3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	3208      	adds	r2, #8
 80020e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	f003 0307 	and.w	r3, r3, #7
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	220f      	movs	r2, #15
 80020f4:	fa02 f303 	lsl.w	r3, r2, r3
 80020f8:	43db      	mvns	r3, r3
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	4013      	ands	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	691a      	ldr	r2, [r3, #16]
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	f003 0307 	and.w	r3, r3, #7
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	fa02 f303 	lsl.w	r3, r2, r3
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	4313      	orrs	r3, r2
 8002114:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	08da      	lsrs	r2, r3, #3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	3208      	adds	r2, #8
 800211e:	69b9      	ldr	r1, [r7, #24]
 8002120:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	005b      	lsls	r3, r3, #1
 800212e:	2203      	movs	r2, #3
 8002130:	fa02 f303 	lsl.w	r3, r2, r3
 8002134:	43db      	mvns	r3, r3
 8002136:	69ba      	ldr	r2, [r7, #24]
 8002138:	4013      	ands	r3, r2
 800213a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f003 0203 	and.w	r2, r3, #3
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	005b      	lsls	r3, r3, #1
 8002148:	fa02 f303 	lsl.w	r3, r2, r3
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	4313      	orrs	r3, r2
 8002150:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002160:	2b00      	cmp	r3, #0
 8002162:	f000 80b4 	beq.w	80022ce <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002166:	2300      	movs	r3, #0
 8002168:	60fb      	str	r3, [r7, #12]
 800216a:	4b60      	ldr	r3, [pc, #384]	; (80022ec <HAL_GPIO_Init+0x30c>)
 800216c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800216e:	4a5f      	ldr	r2, [pc, #380]	; (80022ec <HAL_GPIO_Init+0x30c>)
 8002170:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002174:	6453      	str	r3, [r2, #68]	; 0x44
 8002176:	4b5d      	ldr	r3, [pc, #372]	; (80022ec <HAL_GPIO_Init+0x30c>)
 8002178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800217a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800217e:	60fb      	str	r3, [r7, #12]
 8002180:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002182:	4a5b      	ldr	r2, [pc, #364]	; (80022f0 <HAL_GPIO_Init+0x310>)
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	089b      	lsrs	r3, r3, #2
 8002188:	3302      	adds	r3, #2
 800218a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800218e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	f003 0303 	and.w	r3, r3, #3
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	220f      	movs	r2, #15
 800219a:	fa02 f303 	lsl.w	r3, r2, r3
 800219e:	43db      	mvns	r3, r3
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	4013      	ands	r3, r2
 80021a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a52      	ldr	r2, [pc, #328]	; (80022f4 <HAL_GPIO_Init+0x314>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d02b      	beq.n	8002206 <HAL_GPIO_Init+0x226>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a51      	ldr	r2, [pc, #324]	; (80022f8 <HAL_GPIO_Init+0x318>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d025      	beq.n	8002202 <HAL_GPIO_Init+0x222>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a50      	ldr	r2, [pc, #320]	; (80022fc <HAL_GPIO_Init+0x31c>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d01f      	beq.n	80021fe <HAL_GPIO_Init+0x21e>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a4f      	ldr	r2, [pc, #316]	; (8002300 <HAL_GPIO_Init+0x320>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d019      	beq.n	80021fa <HAL_GPIO_Init+0x21a>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a4e      	ldr	r2, [pc, #312]	; (8002304 <HAL_GPIO_Init+0x324>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d013      	beq.n	80021f6 <HAL_GPIO_Init+0x216>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a4d      	ldr	r2, [pc, #308]	; (8002308 <HAL_GPIO_Init+0x328>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d00d      	beq.n	80021f2 <HAL_GPIO_Init+0x212>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a4c      	ldr	r2, [pc, #304]	; (800230c <HAL_GPIO_Init+0x32c>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d007      	beq.n	80021ee <HAL_GPIO_Init+0x20e>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a4b      	ldr	r2, [pc, #300]	; (8002310 <HAL_GPIO_Init+0x330>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d101      	bne.n	80021ea <HAL_GPIO_Init+0x20a>
 80021e6:	2307      	movs	r3, #7
 80021e8:	e00e      	b.n	8002208 <HAL_GPIO_Init+0x228>
 80021ea:	2308      	movs	r3, #8
 80021ec:	e00c      	b.n	8002208 <HAL_GPIO_Init+0x228>
 80021ee:	2306      	movs	r3, #6
 80021f0:	e00a      	b.n	8002208 <HAL_GPIO_Init+0x228>
 80021f2:	2305      	movs	r3, #5
 80021f4:	e008      	b.n	8002208 <HAL_GPIO_Init+0x228>
 80021f6:	2304      	movs	r3, #4
 80021f8:	e006      	b.n	8002208 <HAL_GPIO_Init+0x228>
 80021fa:	2303      	movs	r3, #3
 80021fc:	e004      	b.n	8002208 <HAL_GPIO_Init+0x228>
 80021fe:	2302      	movs	r3, #2
 8002200:	e002      	b.n	8002208 <HAL_GPIO_Init+0x228>
 8002202:	2301      	movs	r3, #1
 8002204:	e000      	b.n	8002208 <HAL_GPIO_Init+0x228>
 8002206:	2300      	movs	r3, #0
 8002208:	69fa      	ldr	r2, [r7, #28]
 800220a:	f002 0203 	and.w	r2, r2, #3
 800220e:	0092      	lsls	r2, r2, #2
 8002210:	4093      	lsls	r3, r2
 8002212:	69ba      	ldr	r2, [r7, #24]
 8002214:	4313      	orrs	r3, r2
 8002216:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002218:	4935      	ldr	r1, [pc, #212]	; (80022f0 <HAL_GPIO_Init+0x310>)
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	089b      	lsrs	r3, r3, #2
 800221e:	3302      	adds	r3, #2
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002226:	4b3b      	ldr	r3, [pc, #236]	; (8002314 <HAL_GPIO_Init+0x334>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	43db      	mvns	r3, r3
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	4013      	ands	r3, r2
 8002234:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d003      	beq.n	800224a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002242:	69ba      	ldr	r2, [r7, #24]
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	4313      	orrs	r3, r2
 8002248:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800224a:	4a32      	ldr	r2, [pc, #200]	; (8002314 <HAL_GPIO_Init+0x334>)
 800224c:	69bb      	ldr	r3, [r7, #24]
 800224e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002250:	4b30      	ldr	r3, [pc, #192]	; (8002314 <HAL_GPIO_Init+0x334>)
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	43db      	mvns	r3, r3
 800225a:	69ba      	ldr	r2, [r7, #24]
 800225c:	4013      	ands	r3, r2
 800225e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d003      	beq.n	8002274 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	4313      	orrs	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002274:	4a27      	ldr	r2, [pc, #156]	; (8002314 <HAL_GPIO_Init+0x334>)
 8002276:	69bb      	ldr	r3, [r7, #24]
 8002278:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800227a:	4b26      	ldr	r3, [pc, #152]	; (8002314 <HAL_GPIO_Init+0x334>)
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	43db      	mvns	r3, r3
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	4013      	ands	r3, r2
 8002288:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d003      	beq.n	800229e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002296:	69ba      	ldr	r2, [r7, #24]
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	4313      	orrs	r3, r2
 800229c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800229e:	4a1d      	ldr	r2, [pc, #116]	; (8002314 <HAL_GPIO_Init+0x334>)
 80022a0:	69bb      	ldr	r3, [r7, #24]
 80022a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022a4:	4b1b      	ldr	r3, [pc, #108]	; (8002314 <HAL_GPIO_Init+0x334>)
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	43db      	mvns	r3, r3
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	4013      	ands	r3, r2
 80022b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d003      	beq.n	80022c8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022c8:	4a12      	ldr	r2, [pc, #72]	; (8002314 <HAL_GPIO_Init+0x334>)
 80022ca:	69bb      	ldr	r3, [r7, #24]
 80022cc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	3301      	adds	r3, #1
 80022d2:	61fb      	str	r3, [r7, #28]
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	2b0f      	cmp	r3, #15
 80022d8:	f67f ae90 	bls.w	8001ffc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022dc:	bf00      	nop
 80022de:	bf00      	nop
 80022e0:	3724      	adds	r7, #36	; 0x24
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop
 80022ec:	40023800 	.word	0x40023800
 80022f0:	40013800 	.word	0x40013800
 80022f4:	40020000 	.word	0x40020000
 80022f8:	40020400 	.word	0x40020400
 80022fc:	40020800 	.word	0x40020800
 8002300:	40020c00 	.word	0x40020c00
 8002304:	40021000 	.word	0x40021000
 8002308:	40021400 	.word	0x40021400
 800230c:	40021800 	.word	0x40021800
 8002310:	40021c00 	.word	0x40021c00
 8002314:	40013c00 	.word	0x40013c00

08002318 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	460b      	mov	r3, r1
 8002322:	807b      	strh	r3, [r7, #2]
 8002324:	4613      	mov	r3, r2
 8002326:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002328:	787b      	ldrb	r3, [r7, #1]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d003      	beq.n	8002336 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800232e:	887a      	ldrh	r2, [r7, #2]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002334:	e003      	b.n	800233e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002336:	887b      	ldrh	r3, [r7, #2]
 8002338:	041a      	lsls	r2, r3, #16
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	619a      	str	r2, [r3, #24]
}
 800233e:	bf00      	nop
 8002340:	370c      	adds	r7, #12
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr

0800234a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800234a:	b480      	push	{r7}
 800234c:	b085      	sub	sp, #20
 800234e:	af00      	add	r7, sp, #0
 8002350:	6078      	str	r0, [r7, #4]
 8002352:	460b      	mov	r3, r1
 8002354:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	695b      	ldr	r3, [r3, #20]
 800235a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800235c:	887a      	ldrh	r2, [r7, #2]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	4013      	ands	r3, r2
 8002362:	041a      	lsls	r2, r3, #16
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	43d9      	mvns	r1, r3
 8002368:	887b      	ldrh	r3, [r7, #2]
 800236a:	400b      	ands	r3, r1
 800236c:	431a      	orrs	r2, r3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	619a      	str	r2, [r3, #24]
}
 8002372:	bf00      	nop
 8002374:	3714      	adds	r7, #20
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
	...

08002380 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8002386:	4b06      	ldr	r3, [pc, #24]	; (80023a0 <HAL_PWR_EnableBkUpAccess+0x20>)
 8002388:	2201      	movs	r2, #1
 800238a:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 800238c:	4b05      	ldr	r3, [pc, #20]	; (80023a4 <HAL_PWR_EnableBkUpAccess+0x24>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8002392:	687b      	ldr	r3, [r7, #4]
}
 8002394:	bf00      	nop
 8002396:	370c      	adds	r7, #12
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr
 80023a0:	420e0020 	.word	0x420e0020
 80023a4:	40007000 	.word	0x40007000

080023a8 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 80023ae:	4b06      	ldr	r3, [pc, #24]	; (80023c8 <HAL_PWR_DisableBkUpAccess+0x20>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 80023b4:	4b05      	ldr	r3, [pc, #20]	; (80023cc <HAL_PWR_DisableBkUpAccess+0x24>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 80023ba:	687b      	ldr	r3, [r7, #4]
}
 80023bc:	bf00      	nop
 80023be:	370c      	adds	r7, #12
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr
 80023c8:	420e0020 	.word	0x420e0020
 80023cc:	40007000 	.word	0x40007000

080023d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b086      	sub	sp, #24
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d101      	bne.n	80023e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e267      	b.n	80028b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d075      	beq.n	80024da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023ee:	4b88      	ldr	r3, [pc, #544]	; (8002610 <HAL_RCC_OscConfig+0x240>)
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	f003 030c 	and.w	r3, r3, #12
 80023f6:	2b04      	cmp	r3, #4
 80023f8:	d00c      	beq.n	8002414 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023fa:	4b85      	ldr	r3, [pc, #532]	; (8002610 <HAL_RCC_OscConfig+0x240>)
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002402:	2b08      	cmp	r3, #8
 8002404:	d112      	bne.n	800242c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002406:	4b82      	ldr	r3, [pc, #520]	; (8002610 <HAL_RCC_OscConfig+0x240>)
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800240e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002412:	d10b      	bne.n	800242c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002414:	4b7e      	ldr	r3, [pc, #504]	; (8002610 <HAL_RCC_OscConfig+0x240>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800241c:	2b00      	cmp	r3, #0
 800241e:	d05b      	beq.n	80024d8 <HAL_RCC_OscConfig+0x108>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d157      	bne.n	80024d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e242      	b.n	80028b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002434:	d106      	bne.n	8002444 <HAL_RCC_OscConfig+0x74>
 8002436:	4b76      	ldr	r3, [pc, #472]	; (8002610 <HAL_RCC_OscConfig+0x240>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a75      	ldr	r2, [pc, #468]	; (8002610 <HAL_RCC_OscConfig+0x240>)
 800243c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002440:	6013      	str	r3, [r2, #0]
 8002442:	e01d      	b.n	8002480 <HAL_RCC_OscConfig+0xb0>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800244c:	d10c      	bne.n	8002468 <HAL_RCC_OscConfig+0x98>
 800244e:	4b70      	ldr	r3, [pc, #448]	; (8002610 <HAL_RCC_OscConfig+0x240>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a6f      	ldr	r2, [pc, #444]	; (8002610 <HAL_RCC_OscConfig+0x240>)
 8002454:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002458:	6013      	str	r3, [r2, #0]
 800245a:	4b6d      	ldr	r3, [pc, #436]	; (8002610 <HAL_RCC_OscConfig+0x240>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a6c      	ldr	r2, [pc, #432]	; (8002610 <HAL_RCC_OscConfig+0x240>)
 8002460:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002464:	6013      	str	r3, [r2, #0]
 8002466:	e00b      	b.n	8002480 <HAL_RCC_OscConfig+0xb0>
 8002468:	4b69      	ldr	r3, [pc, #420]	; (8002610 <HAL_RCC_OscConfig+0x240>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a68      	ldr	r2, [pc, #416]	; (8002610 <HAL_RCC_OscConfig+0x240>)
 800246e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002472:	6013      	str	r3, [r2, #0]
 8002474:	4b66      	ldr	r3, [pc, #408]	; (8002610 <HAL_RCC_OscConfig+0x240>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a65      	ldr	r2, [pc, #404]	; (8002610 <HAL_RCC_OscConfig+0x240>)
 800247a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800247e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d013      	beq.n	80024b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002488:	f7ff fbd6 	bl	8001c38 <HAL_GetTick>
 800248c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800248e:	e008      	b.n	80024a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002490:	f7ff fbd2 	bl	8001c38 <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	2b64      	cmp	r3, #100	; 0x64
 800249c:	d901      	bls.n	80024a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e207      	b.n	80028b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024a2:	4b5b      	ldr	r3, [pc, #364]	; (8002610 <HAL_RCC_OscConfig+0x240>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d0f0      	beq.n	8002490 <HAL_RCC_OscConfig+0xc0>
 80024ae:	e014      	b.n	80024da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b0:	f7ff fbc2 	bl	8001c38 <HAL_GetTick>
 80024b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024b6:	e008      	b.n	80024ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024b8:	f7ff fbbe 	bl	8001c38 <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	2b64      	cmp	r3, #100	; 0x64
 80024c4:	d901      	bls.n	80024ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e1f3      	b.n	80028b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ca:	4b51      	ldr	r3, [pc, #324]	; (8002610 <HAL_RCC_OscConfig+0x240>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d1f0      	bne.n	80024b8 <HAL_RCC_OscConfig+0xe8>
 80024d6:	e000      	b.n	80024da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0302 	and.w	r3, r3, #2
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d063      	beq.n	80025ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024e6:	4b4a      	ldr	r3, [pc, #296]	; (8002610 <HAL_RCC_OscConfig+0x240>)
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f003 030c 	and.w	r3, r3, #12
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d00b      	beq.n	800250a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024f2:	4b47      	ldr	r3, [pc, #284]	; (8002610 <HAL_RCC_OscConfig+0x240>)
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024fa:	2b08      	cmp	r3, #8
 80024fc:	d11c      	bne.n	8002538 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024fe:	4b44      	ldr	r3, [pc, #272]	; (8002610 <HAL_RCC_OscConfig+0x240>)
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d116      	bne.n	8002538 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800250a:	4b41      	ldr	r3, [pc, #260]	; (8002610 <HAL_RCC_OscConfig+0x240>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d005      	beq.n	8002522 <HAL_RCC_OscConfig+0x152>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	2b01      	cmp	r3, #1
 800251c:	d001      	beq.n	8002522 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e1c7      	b.n	80028b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002522:	4b3b      	ldr	r3, [pc, #236]	; (8002610 <HAL_RCC_OscConfig+0x240>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	691b      	ldr	r3, [r3, #16]
 800252e:	00db      	lsls	r3, r3, #3
 8002530:	4937      	ldr	r1, [pc, #220]	; (8002610 <HAL_RCC_OscConfig+0x240>)
 8002532:	4313      	orrs	r3, r2
 8002534:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002536:	e03a      	b.n	80025ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d020      	beq.n	8002582 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002540:	4b34      	ldr	r3, [pc, #208]	; (8002614 <HAL_RCC_OscConfig+0x244>)
 8002542:	2201      	movs	r2, #1
 8002544:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002546:	f7ff fb77 	bl	8001c38 <HAL_GetTick>
 800254a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800254c:	e008      	b.n	8002560 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800254e:	f7ff fb73 	bl	8001c38 <HAL_GetTick>
 8002552:	4602      	mov	r2, r0
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	2b02      	cmp	r3, #2
 800255a:	d901      	bls.n	8002560 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800255c:	2303      	movs	r3, #3
 800255e:	e1a8      	b.n	80028b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002560:	4b2b      	ldr	r3, [pc, #172]	; (8002610 <HAL_RCC_OscConfig+0x240>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0302 	and.w	r3, r3, #2
 8002568:	2b00      	cmp	r3, #0
 800256a:	d0f0      	beq.n	800254e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800256c:	4b28      	ldr	r3, [pc, #160]	; (8002610 <HAL_RCC_OscConfig+0x240>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	691b      	ldr	r3, [r3, #16]
 8002578:	00db      	lsls	r3, r3, #3
 800257a:	4925      	ldr	r1, [pc, #148]	; (8002610 <HAL_RCC_OscConfig+0x240>)
 800257c:	4313      	orrs	r3, r2
 800257e:	600b      	str	r3, [r1, #0]
 8002580:	e015      	b.n	80025ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002582:	4b24      	ldr	r3, [pc, #144]	; (8002614 <HAL_RCC_OscConfig+0x244>)
 8002584:	2200      	movs	r2, #0
 8002586:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002588:	f7ff fb56 	bl	8001c38 <HAL_GetTick>
 800258c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800258e:	e008      	b.n	80025a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002590:	f7ff fb52 	bl	8001c38 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	2b02      	cmp	r3, #2
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e187      	b.n	80028b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025a2:	4b1b      	ldr	r3, [pc, #108]	; (8002610 <HAL_RCC_OscConfig+0x240>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0302 	and.w	r3, r3, #2
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d1f0      	bne.n	8002590 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0308 	and.w	r3, r3, #8
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d036      	beq.n	8002628 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	695b      	ldr	r3, [r3, #20]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d016      	beq.n	80025f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025c2:	4b15      	ldr	r3, [pc, #84]	; (8002618 <HAL_RCC_OscConfig+0x248>)
 80025c4:	2201      	movs	r2, #1
 80025c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025c8:	f7ff fb36 	bl	8001c38 <HAL_GetTick>
 80025cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025ce:	e008      	b.n	80025e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025d0:	f7ff fb32 	bl	8001c38 <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d901      	bls.n	80025e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e167      	b.n	80028b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025e2:	4b0b      	ldr	r3, [pc, #44]	; (8002610 <HAL_RCC_OscConfig+0x240>)
 80025e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025e6:	f003 0302 	and.w	r3, r3, #2
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d0f0      	beq.n	80025d0 <HAL_RCC_OscConfig+0x200>
 80025ee:	e01b      	b.n	8002628 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025f0:	4b09      	ldr	r3, [pc, #36]	; (8002618 <HAL_RCC_OscConfig+0x248>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025f6:	f7ff fb1f 	bl	8001c38 <HAL_GetTick>
 80025fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025fc:	e00e      	b.n	800261c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025fe:	f7ff fb1b 	bl	8001c38 <HAL_GetTick>
 8002602:	4602      	mov	r2, r0
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	2b02      	cmp	r3, #2
 800260a:	d907      	bls.n	800261c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	e150      	b.n	80028b2 <HAL_RCC_OscConfig+0x4e2>
 8002610:	40023800 	.word	0x40023800
 8002614:	42470000 	.word	0x42470000
 8002618:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800261c:	4b88      	ldr	r3, [pc, #544]	; (8002840 <HAL_RCC_OscConfig+0x470>)
 800261e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002620:	f003 0302 	and.w	r3, r3, #2
 8002624:	2b00      	cmp	r3, #0
 8002626:	d1ea      	bne.n	80025fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0304 	and.w	r3, r3, #4
 8002630:	2b00      	cmp	r3, #0
 8002632:	f000 8097 	beq.w	8002764 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002636:	2300      	movs	r3, #0
 8002638:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800263a:	4b81      	ldr	r3, [pc, #516]	; (8002840 <HAL_RCC_OscConfig+0x470>)
 800263c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d10f      	bne.n	8002666 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002646:	2300      	movs	r3, #0
 8002648:	60bb      	str	r3, [r7, #8]
 800264a:	4b7d      	ldr	r3, [pc, #500]	; (8002840 <HAL_RCC_OscConfig+0x470>)
 800264c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264e:	4a7c      	ldr	r2, [pc, #496]	; (8002840 <HAL_RCC_OscConfig+0x470>)
 8002650:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002654:	6413      	str	r3, [r2, #64]	; 0x40
 8002656:	4b7a      	ldr	r3, [pc, #488]	; (8002840 <HAL_RCC_OscConfig+0x470>)
 8002658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800265e:	60bb      	str	r3, [r7, #8]
 8002660:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002662:	2301      	movs	r3, #1
 8002664:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002666:	4b77      	ldr	r3, [pc, #476]	; (8002844 <HAL_RCC_OscConfig+0x474>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800266e:	2b00      	cmp	r3, #0
 8002670:	d118      	bne.n	80026a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002672:	4b74      	ldr	r3, [pc, #464]	; (8002844 <HAL_RCC_OscConfig+0x474>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a73      	ldr	r2, [pc, #460]	; (8002844 <HAL_RCC_OscConfig+0x474>)
 8002678:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800267c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800267e:	f7ff fadb 	bl	8001c38 <HAL_GetTick>
 8002682:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002684:	e008      	b.n	8002698 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002686:	f7ff fad7 	bl	8001c38 <HAL_GetTick>
 800268a:	4602      	mov	r2, r0
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	2b02      	cmp	r3, #2
 8002692:	d901      	bls.n	8002698 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002694:	2303      	movs	r3, #3
 8002696:	e10c      	b.n	80028b2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002698:	4b6a      	ldr	r3, [pc, #424]	; (8002844 <HAL_RCC_OscConfig+0x474>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d0f0      	beq.n	8002686 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d106      	bne.n	80026ba <HAL_RCC_OscConfig+0x2ea>
 80026ac:	4b64      	ldr	r3, [pc, #400]	; (8002840 <HAL_RCC_OscConfig+0x470>)
 80026ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b0:	4a63      	ldr	r2, [pc, #396]	; (8002840 <HAL_RCC_OscConfig+0x470>)
 80026b2:	f043 0301 	orr.w	r3, r3, #1
 80026b6:	6713      	str	r3, [r2, #112]	; 0x70
 80026b8:	e01c      	b.n	80026f4 <HAL_RCC_OscConfig+0x324>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	2b05      	cmp	r3, #5
 80026c0:	d10c      	bne.n	80026dc <HAL_RCC_OscConfig+0x30c>
 80026c2:	4b5f      	ldr	r3, [pc, #380]	; (8002840 <HAL_RCC_OscConfig+0x470>)
 80026c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026c6:	4a5e      	ldr	r2, [pc, #376]	; (8002840 <HAL_RCC_OscConfig+0x470>)
 80026c8:	f043 0304 	orr.w	r3, r3, #4
 80026cc:	6713      	str	r3, [r2, #112]	; 0x70
 80026ce:	4b5c      	ldr	r3, [pc, #368]	; (8002840 <HAL_RCC_OscConfig+0x470>)
 80026d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d2:	4a5b      	ldr	r2, [pc, #364]	; (8002840 <HAL_RCC_OscConfig+0x470>)
 80026d4:	f043 0301 	orr.w	r3, r3, #1
 80026d8:	6713      	str	r3, [r2, #112]	; 0x70
 80026da:	e00b      	b.n	80026f4 <HAL_RCC_OscConfig+0x324>
 80026dc:	4b58      	ldr	r3, [pc, #352]	; (8002840 <HAL_RCC_OscConfig+0x470>)
 80026de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026e0:	4a57      	ldr	r2, [pc, #348]	; (8002840 <HAL_RCC_OscConfig+0x470>)
 80026e2:	f023 0301 	bic.w	r3, r3, #1
 80026e6:	6713      	str	r3, [r2, #112]	; 0x70
 80026e8:	4b55      	ldr	r3, [pc, #340]	; (8002840 <HAL_RCC_OscConfig+0x470>)
 80026ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ec:	4a54      	ldr	r2, [pc, #336]	; (8002840 <HAL_RCC_OscConfig+0x470>)
 80026ee:	f023 0304 	bic.w	r3, r3, #4
 80026f2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d015      	beq.n	8002728 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026fc:	f7ff fa9c 	bl	8001c38 <HAL_GetTick>
 8002700:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002702:	e00a      	b.n	800271a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002704:	f7ff fa98 	bl	8001c38 <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002712:	4293      	cmp	r3, r2
 8002714:	d901      	bls.n	800271a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e0cb      	b.n	80028b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800271a:	4b49      	ldr	r3, [pc, #292]	; (8002840 <HAL_RCC_OscConfig+0x470>)
 800271c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	2b00      	cmp	r3, #0
 8002724:	d0ee      	beq.n	8002704 <HAL_RCC_OscConfig+0x334>
 8002726:	e014      	b.n	8002752 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002728:	f7ff fa86 	bl	8001c38 <HAL_GetTick>
 800272c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800272e:	e00a      	b.n	8002746 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002730:	f7ff fa82 	bl	8001c38 <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	f241 3288 	movw	r2, #5000	; 0x1388
 800273e:	4293      	cmp	r3, r2
 8002740:	d901      	bls.n	8002746 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e0b5      	b.n	80028b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002746:	4b3e      	ldr	r3, [pc, #248]	; (8002840 <HAL_RCC_OscConfig+0x470>)
 8002748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800274a:	f003 0302 	and.w	r3, r3, #2
 800274e:	2b00      	cmp	r3, #0
 8002750:	d1ee      	bne.n	8002730 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002752:	7dfb      	ldrb	r3, [r7, #23]
 8002754:	2b01      	cmp	r3, #1
 8002756:	d105      	bne.n	8002764 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002758:	4b39      	ldr	r3, [pc, #228]	; (8002840 <HAL_RCC_OscConfig+0x470>)
 800275a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275c:	4a38      	ldr	r2, [pc, #224]	; (8002840 <HAL_RCC_OscConfig+0x470>)
 800275e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002762:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	699b      	ldr	r3, [r3, #24]
 8002768:	2b00      	cmp	r3, #0
 800276a:	f000 80a1 	beq.w	80028b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800276e:	4b34      	ldr	r3, [pc, #208]	; (8002840 <HAL_RCC_OscConfig+0x470>)
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	f003 030c 	and.w	r3, r3, #12
 8002776:	2b08      	cmp	r3, #8
 8002778:	d05c      	beq.n	8002834 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	699b      	ldr	r3, [r3, #24]
 800277e:	2b02      	cmp	r3, #2
 8002780:	d141      	bne.n	8002806 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002782:	4b31      	ldr	r3, [pc, #196]	; (8002848 <HAL_RCC_OscConfig+0x478>)
 8002784:	2200      	movs	r2, #0
 8002786:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002788:	f7ff fa56 	bl	8001c38 <HAL_GetTick>
 800278c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800278e:	e008      	b.n	80027a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002790:	f7ff fa52 	bl	8001c38 <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	2b02      	cmp	r3, #2
 800279c:	d901      	bls.n	80027a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e087      	b.n	80028b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027a2:	4b27      	ldr	r3, [pc, #156]	; (8002840 <HAL_RCC_OscConfig+0x470>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d1f0      	bne.n	8002790 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	69da      	ldr	r2, [r3, #28]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a1b      	ldr	r3, [r3, #32]
 80027b6:	431a      	orrs	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027bc:	019b      	lsls	r3, r3, #6
 80027be:	431a      	orrs	r2, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c4:	085b      	lsrs	r3, r3, #1
 80027c6:	3b01      	subs	r3, #1
 80027c8:	041b      	lsls	r3, r3, #16
 80027ca:	431a      	orrs	r2, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d0:	061b      	lsls	r3, r3, #24
 80027d2:	491b      	ldr	r1, [pc, #108]	; (8002840 <HAL_RCC_OscConfig+0x470>)
 80027d4:	4313      	orrs	r3, r2
 80027d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027d8:	4b1b      	ldr	r3, [pc, #108]	; (8002848 <HAL_RCC_OscConfig+0x478>)
 80027da:	2201      	movs	r2, #1
 80027dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027de:	f7ff fa2b 	bl	8001c38 <HAL_GetTick>
 80027e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027e4:	e008      	b.n	80027f8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027e6:	f7ff fa27 	bl	8001c38 <HAL_GetTick>
 80027ea:	4602      	mov	r2, r0
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d901      	bls.n	80027f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e05c      	b.n	80028b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027f8:	4b11      	ldr	r3, [pc, #68]	; (8002840 <HAL_RCC_OscConfig+0x470>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d0f0      	beq.n	80027e6 <HAL_RCC_OscConfig+0x416>
 8002804:	e054      	b.n	80028b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002806:	4b10      	ldr	r3, [pc, #64]	; (8002848 <HAL_RCC_OscConfig+0x478>)
 8002808:	2200      	movs	r2, #0
 800280a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800280c:	f7ff fa14 	bl	8001c38 <HAL_GetTick>
 8002810:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002812:	e008      	b.n	8002826 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002814:	f7ff fa10 	bl	8001c38 <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	2b02      	cmp	r3, #2
 8002820:	d901      	bls.n	8002826 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e045      	b.n	80028b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002826:	4b06      	ldr	r3, [pc, #24]	; (8002840 <HAL_RCC_OscConfig+0x470>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d1f0      	bne.n	8002814 <HAL_RCC_OscConfig+0x444>
 8002832:	e03d      	b.n	80028b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	699b      	ldr	r3, [r3, #24]
 8002838:	2b01      	cmp	r3, #1
 800283a:	d107      	bne.n	800284c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e038      	b.n	80028b2 <HAL_RCC_OscConfig+0x4e2>
 8002840:	40023800 	.word	0x40023800
 8002844:	40007000 	.word	0x40007000
 8002848:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800284c:	4b1b      	ldr	r3, [pc, #108]	; (80028bc <HAL_RCC_OscConfig+0x4ec>)
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	699b      	ldr	r3, [r3, #24]
 8002856:	2b01      	cmp	r3, #1
 8002858:	d028      	beq.n	80028ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002864:	429a      	cmp	r2, r3
 8002866:	d121      	bne.n	80028ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002872:	429a      	cmp	r2, r3
 8002874:	d11a      	bne.n	80028ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002876:	68fa      	ldr	r2, [r7, #12]
 8002878:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800287c:	4013      	ands	r3, r2
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002882:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002884:	4293      	cmp	r3, r2
 8002886:	d111      	bne.n	80028ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002892:	085b      	lsrs	r3, r3, #1
 8002894:	3b01      	subs	r3, #1
 8002896:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002898:	429a      	cmp	r2, r3
 800289a:	d107      	bne.n	80028ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d001      	beq.n	80028b0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e000      	b.n	80028b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3718      	adds	r7, #24
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	40023800 	.word	0x40023800

080028c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d101      	bne.n	80028d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e0cc      	b.n	8002a6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028d4:	4b68      	ldr	r3, [pc, #416]	; (8002a78 <HAL_RCC_ClockConfig+0x1b8>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0307 	and.w	r3, r3, #7
 80028dc:	683a      	ldr	r2, [r7, #0]
 80028de:	429a      	cmp	r2, r3
 80028e0:	d90c      	bls.n	80028fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028e2:	4b65      	ldr	r3, [pc, #404]	; (8002a78 <HAL_RCC_ClockConfig+0x1b8>)
 80028e4:	683a      	ldr	r2, [r7, #0]
 80028e6:	b2d2      	uxtb	r2, r2
 80028e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ea:	4b63      	ldr	r3, [pc, #396]	; (8002a78 <HAL_RCC_ClockConfig+0x1b8>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0307 	and.w	r3, r3, #7
 80028f2:	683a      	ldr	r2, [r7, #0]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d001      	beq.n	80028fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e0b8      	b.n	8002a6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0302 	and.w	r3, r3, #2
 8002904:	2b00      	cmp	r3, #0
 8002906:	d020      	beq.n	800294a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0304 	and.w	r3, r3, #4
 8002910:	2b00      	cmp	r3, #0
 8002912:	d005      	beq.n	8002920 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002914:	4b59      	ldr	r3, [pc, #356]	; (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	4a58      	ldr	r2, [pc, #352]	; (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 800291a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800291e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0308 	and.w	r3, r3, #8
 8002928:	2b00      	cmp	r3, #0
 800292a:	d005      	beq.n	8002938 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800292c:	4b53      	ldr	r3, [pc, #332]	; (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	4a52      	ldr	r2, [pc, #328]	; (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 8002932:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002936:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002938:	4b50      	ldr	r3, [pc, #320]	; (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	494d      	ldr	r1, [pc, #308]	; (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 8002946:	4313      	orrs	r3, r2
 8002948:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0301 	and.w	r3, r3, #1
 8002952:	2b00      	cmp	r3, #0
 8002954:	d044      	beq.n	80029e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	2b01      	cmp	r3, #1
 800295c:	d107      	bne.n	800296e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800295e:	4b47      	ldr	r3, [pc, #284]	; (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d119      	bne.n	800299e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e07f      	b.n	8002a6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	2b02      	cmp	r3, #2
 8002974:	d003      	beq.n	800297e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800297a:	2b03      	cmp	r3, #3
 800297c:	d107      	bne.n	800298e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800297e:	4b3f      	ldr	r3, [pc, #252]	; (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d109      	bne.n	800299e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e06f      	b.n	8002a6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800298e:	4b3b      	ldr	r3, [pc, #236]	; (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0302 	and.w	r3, r3, #2
 8002996:	2b00      	cmp	r3, #0
 8002998:	d101      	bne.n	800299e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e067      	b.n	8002a6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800299e:	4b37      	ldr	r3, [pc, #220]	; (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f023 0203 	bic.w	r2, r3, #3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	4934      	ldr	r1, [pc, #208]	; (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 80029ac:	4313      	orrs	r3, r2
 80029ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029b0:	f7ff f942 	bl	8001c38 <HAL_GetTick>
 80029b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029b6:	e00a      	b.n	80029ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029b8:	f7ff f93e 	bl	8001c38 <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d901      	bls.n	80029ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e04f      	b.n	8002a6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ce:	4b2b      	ldr	r3, [pc, #172]	; (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	f003 020c 	and.w	r2, r3, #12
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	429a      	cmp	r2, r3
 80029de:	d1eb      	bne.n	80029b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029e0:	4b25      	ldr	r3, [pc, #148]	; (8002a78 <HAL_RCC_ClockConfig+0x1b8>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0307 	and.w	r3, r3, #7
 80029e8:	683a      	ldr	r2, [r7, #0]
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d20c      	bcs.n	8002a08 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ee:	4b22      	ldr	r3, [pc, #136]	; (8002a78 <HAL_RCC_ClockConfig+0x1b8>)
 80029f0:	683a      	ldr	r2, [r7, #0]
 80029f2:	b2d2      	uxtb	r2, r2
 80029f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029f6:	4b20      	ldr	r3, [pc, #128]	; (8002a78 <HAL_RCC_ClockConfig+0x1b8>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0307 	and.w	r3, r3, #7
 80029fe:	683a      	ldr	r2, [r7, #0]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d001      	beq.n	8002a08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e032      	b.n	8002a6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0304 	and.w	r3, r3, #4
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d008      	beq.n	8002a26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a14:	4b19      	ldr	r3, [pc, #100]	; (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	4916      	ldr	r1, [pc, #88]	; (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 8002a22:	4313      	orrs	r3, r2
 8002a24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0308 	and.w	r3, r3, #8
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d009      	beq.n	8002a46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a32:	4b12      	ldr	r3, [pc, #72]	; (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	691b      	ldr	r3, [r3, #16]
 8002a3e:	00db      	lsls	r3, r3, #3
 8002a40:	490e      	ldr	r1, [pc, #56]	; (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a46:	f000 f821 	bl	8002a8c <HAL_RCC_GetSysClockFreq>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	4b0b      	ldr	r3, [pc, #44]	; (8002a7c <HAL_RCC_ClockConfig+0x1bc>)
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	091b      	lsrs	r3, r3, #4
 8002a52:	f003 030f 	and.w	r3, r3, #15
 8002a56:	490a      	ldr	r1, [pc, #40]	; (8002a80 <HAL_RCC_ClockConfig+0x1c0>)
 8002a58:	5ccb      	ldrb	r3, [r1, r3]
 8002a5a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a5e:	4a09      	ldr	r2, [pc, #36]	; (8002a84 <HAL_RCC_ClockConfig+0x1c4>)
 8002a60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a62:	4b09      	ldr	r3, [pc, #36]	; (8002a88 <HAL_RCC_ClockConfig+0x1c8>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4618      	mov	r0, r3
 8002a68:	f7ff f8a2 	bl	8001bb0 <HAL_InitTick>

  return HAL_OK;
 8002a6c:	2300      	movs	r3, #0
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3710      	adds	r7, #16
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	40023c00 	.word	0x40023c00
 8002a7c:	40023800 	.word	0x40023800
 8002a80:	0800855c 	.word	0x0800855c
 8002a84:	20000004 	.word	0x20000004
 8002a88:	20000008 	.word	0x20000008

08002a8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a90:	b090      	sub	sp, #64	; 0x40
 8002a92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002a94:	2300      	movs	r3, #0
 8002a96:	637b      	str	r3, [r7, #52]	; 0x34
 8002a98:	2300      	movs	r3, #0
 8002a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002aa4:	4b59      	ldr	r3, [pc, #356]	; (8002c0c <HAL_RCC_GetSysClockFreq+0x180>)
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	f003 030c 	and.w	r3, r3, #12
 8002aac:	2b08      	cmp	r3, #8
 8002aae:	d00d      	beq.n	8002acc <HAL_RCC_GetSysClockFreq+0x40>
 8002ab0:	2b08      	cmp	r3, #8
 8002ab2:	f200 80a1 	bhi.w	8002bf8 <HAL_RCC_GetSysClockFreq+0x16c>
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d002      	beq.n	8002ac0 <HAL_RCC_GetSysClockFreq+0x34>
 8002aba:	2b04      	cmp	r3, #4
 8002abc:	d003      	beq.n	8002ac6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002abe:	e09b      	b.n	8002bf8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ac0:	4b53      	ldr	r3, [pc, #332]	; (8002c10 <HAL_RCC_GetSysClockFreq+0x184>)
 8002ac2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002ac4:	e09b      	b.n	8002bfe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ac6:	4b53      	ldr	r3, [pc, #332]	; (8002c14 <HAL_RCC_GetSysClockFreq+0x188>)
 8002ac8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002aca:	e098      	b.n	8002bfe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002acc:	4b4f      	ldr	r3, [pc, #316]	; (8002c0c <HAL_RCC_GetSysClockFreq+0x180>)
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ad4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ad6:	4b4d      	ldr	r3, [pc, #308]	; (8002c0c <HAL_RCC_GetSysClockFreq+0x180>)
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d028      	beq.n	8002b34 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ae2:	4b4a      	ldr	r3, [pc, #296]	; (8002c0c <HAL_RCC_GetSysClockFreq+0x180>)
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	099b      	lsrs	r3, r3, #6
 8002ae8:	2200      	movs	r2, #0
 8002aea:	623b      	str	r3, [r7, #32]
 8002aec:	627a      	str	r2, [r7, #36]	; 0x24
 8002aee:	6a3b      	ldr	r3, [r7, #32]
 8002af0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002af4:	2100      	movs	r1, #0
 8002af6:	4b47      	ldr	r3, [pc, #284]	; (8002c14 <HAL_RCC_GetSysClockFreq+0x188>)
 8002af8:	fb03 f201 	mul.w	r2, r3, r1
 8002afc:	2300      	movs	r3, #0
 8002afe:	fb00 f303 	mul.w	r3, r0, r3
 8002b02:	4413      	add	r3, r2
 8002b04:	4a43      	ldr	r2, [pc, #268]	; (8002c14 <HAL_RCC_GetSysClockFreq+0x188>)
 8002b06:	fba0 1202 	umull	r1, r2, r0, r2
 8002b0a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b0c:	460a      	mov	r2, r1
 8002b0e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002b10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b12:	4413      	add	r3, r2
 8002b14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b18:	2200      	movs	r2, #0
 8002b1a:	61bb      	str	r3, [r7, #24]
 8002b1c:	61fa      	str	r2, [r7, #28]
 8002b1e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b22:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002b26:	f7fd fea9 	bl	800087c <__aeabi_uldivmod>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	460b      	mov	r3, r1
 8002b2e:	4613      	mov	r3, r2
 8002b30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b32:	e053      	b.n	8002bdc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b34:	4b35      	ldr	r3, [pc, #212]	; (8002c0c <HAL_RCC_GetSysClockFreq+0x180>)
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	099b      	lsrs	r3, r3, #6
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	613b      	str	r3, [r7, #16]
 8002b3e:	617a      	str	r2, [r7, #20]
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002b46:	f04f 0b00 	mov.w	fp, #0
 8002b4a:	4652      	mov	r2, sl
 8002b4c:	465b      	mov	r3, fp
 8002b4e:	f04f 0000 	mov.w	r0, #0
 8002b52:	f04f 0100 	mov.w	r1, #0
 8002b56:	0159      	lsls	r1, r3, #5
 8002b58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b5c:	0150      	lsls	r0, r2, #5
 8002b5e:	4602      	mov	r2, r0
 8002b60:	460b      	mov	r3, r1
 8002b62:	ebb2 080a 	subs.w	r8, r2, sl
 8002b66:	eb63 090b 	sbc.w	r9, r3, fp
 8002b6a:	f04f 0200 	mov.w	r2, #0
 8002b6e:	f04f 0300 	mov.w	r3, #0
 8002b72:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002b76:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002b7a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002b7e:	ebb2 0408 	subs.w	r4, r2, r8
 8002b82:	eb63 0509 	sbc.w	r5, r3, r9
 8002b86:	f04f 0200 	mov.w	r2, #0
 8002b8a:	f04f 0300 	mov.w	r3, #0
 8002b8e:	00eb      	lsls	r3, r5, #3
 8002b90:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b94:	00e2      	lsls	r2, r4, #3
 8002b96:	4614      	mov	r4, r2
 8002b98:	461d      	mov	r5, r3
 8002b9a:	eb14 030a 	adds.w	r3, r4, sl
 8002b9e:	603b      	str	r3, [r7, #0]
 8002ba0:	eb45 030b 	adc.w	r3, r5, fp
 8002ba4:	607b      	str	r3, [r7, #4]
 8002ba6:	f04f 0200 	mov.w	r2, #0
 8002baa:	f04f 0300 	mov.w	r3, #0
 8002bae:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002bb2:	4629      	mov	r1, r5
 8002bb4:	028b      	lsls	r3, r1, #10
 8002bb6:	4621      	mov	r1, r4
 8002bb8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002bbc:	4621      	mov	r1, r4
 8002bbe:	028a      	lsls	r2, r1, #10
 8002bc0:	4610      	mov	r0, r2
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	60bb      	str	r3, [r7, #8]
 8002bca:	60fa      	str	r2, [r7, #12]
 8002bcc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002bd0:	f7fd fe54 	bl	800087c <__aeabi_uldivmod>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	460b      	mov	r3, r1
 8002bd8:	4613      	mov	r3, r2
 8002bda:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002bdc:	4b0b      	ldr	r3, [pc, #44]	; (8002c0c <HAL_RCC_GetSysClockFreq+0x180>)
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	0c1b      	lsrs	r3, r3, #16
 8002be2:	f003 0303 	and.w	r3, r3, #3
 8002be6:	3301      	adds	r3, #1
 8002be8:	005b      	lsls	r3, r3, #1
 8002bea:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002bec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bf4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002bf6:	e002      	b.n	8002bfe <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002bf8:	4b05      	ldr	r3, [pc, #20]	; (8002c10 <HAL_RCC_GetSysClockFreq+0x184>)
 8002bfa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002bfc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3740      	adds	r7, #64	; 0x40
 8002c04:	46bd      	mov	sp, r7
 8002c06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c0a:	bf00      	nop
 8002c0c:	40023800 	.word	0x40023800
 8002c10:	00f42400 	.word	0x00f42400
 8002c14:	017d7840 	.word	0x017d7840

08002c18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c1c:	4b03      	ldr	r3, [pc, #12]	; (8002c2c <HAL_RCC_GetHCLKFreq+0x14>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr
 8002c2a:	bf00      	nop
 8002c2c:	20000004 	.word	0x20000004

08002c30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c34:	f7ff fff0 	bl	8002c18 <HAL_RCC_GetHCLKFreq>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	4b05      	ldr	r3, [pc, #20]	; (8002c50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	0a9b      	lsrs	r3, r3, #10
 8002c40:	f003 0307 	and.w	r3, r3, #7
 8002c44:	4903      	ldr	r1, [pc, #12]	; (8002c54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c46:	5ccb      	ldrb	r3, [r1, r3]
 8002c48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	40023800 	.word	0x40023800
 8002c54:	0800856c 	.word	0x0800856c

08002c58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002c5c:	f7ff ffdc 	bl	8002c18 <HAL_RCC_GetHCLKFreq>
 8002c60:	4602      	mov	r2, r0
 8002c62:	4b05      	ldr	r3, [pc, #20]	; (8002c78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	0b5b      	lsrs	r3, r3, #13
 8002c68:	f003 0307 	and.w	r3, r3, #7
 8002c6c:	4903      	ldr	r1, [pc, #12]	; (8002c7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c6e:	5ccb      	ldrb	r3, [r1, r3]
 8002c70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	40023800 	.word	0x40023800
 8002c7c:	0800856c 	.word	0x0800856c

08002c80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d101      	bne.n	8002c92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e041      	b.n	8002d16 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d106      	bne.n	8002cac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f7fe fd3e 	bl	8001728 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2202      	movs	r2, #2
 8002cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	3304      	adds	r3, #4
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	4610      	mov	r0, r2
 8002cc0:	f000 fc0c 	bl	80034dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2201      	movs	r2, #1
 8002d08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d14:	2300      	movs	r3, #0
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3708      	adds	r7, #8
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}

08002d1e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002d1e:	b580      	push	{r7, lr}
 8002d20:	b082      	sub	sp, #8
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d101      	bne.n	8002d30 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e041      	b.n	8002db4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d106      	bne.n	8002d4a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f000 f839 	bl	8002dbc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2202      	movs	r2, #2
 8002d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	3304      	adds	r3, #4
 8002d5a:	4619      	mov	r1, r3
 8002d5c:	4610      	mov	r0, r2
 8002d5e:	f000 fbbd 	bl	80034dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2201      	movs	r2, #1
 8002d66:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2201      	movs	r2, #1
 8002d76:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2201      	movs	r2, #1
 8002d86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2201      	movs	r2, #1
 8002d96:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2201      	movs	r2, #1
 8002da6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2201      	movs	r2, #1
 8002dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002db2:	2300      	movs	r3, #0
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3708      	adds	r7, #8
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}

08002dbc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002dc4:	bf00      	nop
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr

08002dd0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d109      	bne.n	8002df4 <HAL_TIM_PWM_Start+0x24>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	bf14      	ite	ne
 8002dec:	2301      	movne	r3, #1
 8002dee:	2300      	moveq	r3, #0
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	e022      	b.n	8002e3a <HAL_TIM_PWM_Start+0x6a>
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	2b04      	cmp	r3, #4
 8002df8:	d109      	bne.n	8002e0e <HAL_TIM_PWM_Start+0x3e>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	bf14      	ite	ne
 8002e06:	2301      	movne	r3, #1
 8002e08:	2300      	moveq	r3, #0
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	e015      	b.n	8002e3a <HAL_TIM_PWM_Start+0x6a>
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	2b08      	cmp	r3, #8
 8002e12:	d109      	bne.n	8002e28 <HAL_TIM_PWM_Start+0x58>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	bf14      	ite	ne
 8002e20:	2301      	movne	r3, #1
 8002e22:	2300      	moveq	r3, #0
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	e008      	b.n	8002e3a <HAL_TIM_PWM_Start+0x6a>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	bf14      	ite	ne
 8002e34:	2301      	movne	r3, #1
 8002e36:	2300      	moveq	r3, #0
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d001      	beq.n	8002e42 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e07c      	b.n	8002f3c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d104      	bne.n	8002e52 <HAL_TIM_PWM_Start+0x82>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2202      	movs	r2, #2
 8002e4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e50:	e013      	b.n	8002e7a <HAL_TIM_PWM_Start+0xaa>
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	2b04      	cmp	r3, #4
 8002e56:	d104      	bne.n	8002e62 <HAL_TIM_PWM_Start+0x92>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2202      	movs	r2, #2
 8002e5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e60:	e00b      	b.n	8002e7a <HAL_TIM_PWM_Start+0xaa>
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	2b08      	cmp	r3, #8
 8002e66:	d104      	bne.n	8002e72 <HAL_TIM_PWM_Start+0xa2>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2202      	movs	r2, #2
 8002e6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e70:	e003      	b.n	8002e7a <HAL_TIM_PWM_Start+0xaa>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2202      	movs	r2, #2
 8002e76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	6839      	ldr	r1, [r7, #0]
 8002e82:	4618      	mov	r0, r3
 8002e84:	f000 fe14 	bl	8003ab0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a2d      	ldr	r2, [pc, #180]	; (8002f44 <HAL_TIM_PWM_Start+0x174>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d004      	beq.n	8002e9c <HAL_TIM_PWM_Start+0xcc>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a2c      	ldr	r2, [pc, #176]	; (8002f48 <HAL_TIM_PWM_Start+0x178>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d101      	bne.n	8002ea0 <HAL_TIM_PWM_Start+0xd0>
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e000      	b.n	8002ea2 <HAL_TIM_PWM_Start+0xd2>
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d007      	beq.n	8002eb6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002eb4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a22      	ldr	r2, [pc, #136]	; (8002f44 <HAL_TIM_PWM_Start+0x174>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d022      	beq.n	8002f06 <HAL_TIM_PWM_Start+0x136>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ec8:	d01d      	beq.n	8002f06 <HAL_TIM_PWM_Start+0x136>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a1f      	ldr	r2, [pc, #124]	; (8002f4c <HAL_TIM_PWM_Start+0x17c>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d018      	beq.n	8002f06 <HAL_TIM_PWM_Start+0x136>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a1d      	ldr	r2, [pc, #116]	; (8002f50 <HAL_TIM_PWM_Start+0x180>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d013      	beq.n	8002f06 <HAL_TIM_PWM_Start+0x136>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a1c      	ldr	r2, [pc, #112]	; (8002f54 <HAL_TIM_PWM_Start+0x184>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d00e      	beq.n	8002f06 <HAL_TIM_PWM_Start+0x136>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a16      	ldr	r2, [pc, #88]	; (8002f48 <HAL_TIM_PWM_Start+0x178>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d009      	beq.n	8002f06 <HAL_TIM_PWM_Start+0x136>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a18      	ldr	r2, [pc, #96]	; (8002f58 <HAL_TIM_PWM_Start+0x188>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d004      	beq.n	8002f06 <HAL_TIM_PWM_Start+0x136>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a16      	ldr	r2, [pc, #88]	; (8002f5c <HAL_TIM_PWM_Start+0x18c>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d111      	bne.n	8002f2a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	689b      	ldr	r3, [r3, #8]
 8002f0c:	f003 0307 	and.w	r3, r3, #7
 8002f10:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2b06      	cmp	r3, #6
 8002f16:	d010      	beq.n	8002f3a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f042 0201 	orr.w	r2, r2, #1
 8002f26:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f28:	e007      	b.n	8002f3a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f042 0201 	orr.w	r2, r2, #1
 8002f38:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f3a:	2300      	movs	r3, #0
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3710      	adds	r7, #16
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	40010000 	.word	0x40010000
 8002f48:	40010400 	.word	0x40010400
 8002f4c:	40000400 	.word	0x40000400
 8002f50:	40000800 	.word	0x40000800
 8002f54:	40000c00 	.word	0x40000c00
 8002f58:	40014000 	.word	0x40014000
 8002f5c:	40001800 	.word	0x40001800

08002f60 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b086      	sub	sp, #24
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d101      	bne.n	8002f74 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e097      	b.n	80030a4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d106      	bne.n	8002f8e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f7fe fc2b 	bl	80017e4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2202      	movs	r2, #2
 8002f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	6812      	ldr	r2, [r2, #0]
 8002fa0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002fa4:	f023 0307 	bic.w	r3, r3, #7
 8002fa8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	3304      	adds	r3, #4
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	4610      	mov	r0, r2
 8002fb6:	f000 fa91 	bl	80034dc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	699b      	ldr	r3, [r3, #24]
 8002fc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	6a1b      	ldr	r3, [r3, #32]
 8002fd0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	697a      	ldr	r2, [r7, #20]
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fe2:	f023 0303 	bic.w	r3, r3, #3
 8002fe6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	689a      	ldr	r2, [r3, #8]
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	699b      	ldr	r3, [r3, #24]
 8002ff0:	021b      	lsls	r3, r3, #8
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	693a      	ldr	r2, [r7, #16]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003000:	f023 030c 	bic.w	r3, r3, #12
 8003004:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800300c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003010:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	68da      	ldr	r2, [r3, #12]
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	69db      	ldr	r3, [r3, #28]
 800301a:	021b      	lsls	r3, r3, #8
 800301c:	4313      	orrs	r3, r2
 800301e:	693a      	ldr	r2, [r7, #16]
 8003020:	4313      	orrs	r3, r2
 8003022:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	691b      	ldr	r3, [r3, #16]
 8003028:	011a      	lsls	r2, r3, #4
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	6a1b      	ldr	r3, [r3, #32]
 800302e:	031b      	lsls	r3, r3, #12
 8003030:	4313      	orrs	r3, r2
 8003032:	693a      	ldr	r2, [r7, #16]
 8003034:	4313      	orrs	r3, r2
 8003036:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800303e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003046:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	685a      	ldr	r2, [r3, #4]
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	695b      	ldr	r3, [r3, #20]
 8003050:	011b      	lsls	r3, r3, #4
 8003052:	4313      	orrs	r3, r2
 8003054:	68fa      	ldr	r2, [r7, #12]
 8003056:	4313      	orrs	r3, r2
 8003058:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	697a      	ldr	r2, [r7, #20]
 8003060:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	693a      	ldr	r2, [r7, #16]
 8003068:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	68fa      	ldr	r2, [r7, #12]
 8003070:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2201      	movs	r2, #1
 8003076:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2201      	movs	r2, #1
 800307e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2201      	movs	r2, #1
 8003086:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2201      	movs	r2, #1
 800308e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2201      	movs	r2, #1
 8003096:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2201      	movs	r2, #1
 800309e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030a2:	2300      	movs	r3, #0
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3718      	adds	r7, #24
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}

080030ac <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b084      	sub	sp, #16
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030bc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80030c4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80030cc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80030d4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d110      	bne.n	80030fe <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80030dc:	7bfb      	ldrb	r3, [r7, #15]
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d102      	bne.n	80030e8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80030e2:	7b7b      	ldrb	r3, [r7, #13]
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d001      	beq.n	80030ec <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e069      	b.n	80031c0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2202      	movs	r2, #2
 80030f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2202      	movs	r2, #2
 80030f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030fc:	e031      	b.n	8003162 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	2b04      	cmp	r3, #4
 8003102:	d110      	bne.n	8003126 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003104:	7bbb      	ldrb	r3, [r7, #14]
 8003106:	2b01      	cmp	r3, #1
 8003108:	d102      	bne.n	8003110 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800310a:	7b3b      	ldrb	r3, [r7, #12]
 800310c:	2b01      	cmp	r3, #1
 800310e:	d001      	beq.n	8003114 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e055      	b.n	80031c0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2202      	movs	r2, #2
 8003118:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2202      	movs	r2, #2
 8003120:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003124:	e01d      	b.n	8003162 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003126:	7bfb      	ldrb	r3, [r7, #15]
 8003128:	2b01      	cmp	r3, #1
 800312a:	d108      	bne.n	800313e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800312c:	7bbb      	ldrb	r3, [r7, #14]
 800312e:	2b01      	cmp	r3, #1
 8003130:	d105      	bne.n	800313e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003132:	7b7b      	ldrb	r3, [r7, #13]
 8003134:	2b01      	cmp	r3, #1
 8003136:	d102      	bne.n	800313e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003138:	7b3b      	ldrb	r3, [r7, #12]
 800313a:	2b01      	cmp	r3, #1
 800313c:	d001      	beq.n	8003142 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e03e      	b.n	80031c0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2202      	movs	r2, #2
 8003146:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2202      	movs	r2, #2
 800314e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2202      	movs	r2, #2
 8003156:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2202      	movs	r2, #2
 800315e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d003      	beq.n	8003170 <HAL_TIM_Encoder_Start+0xc4>
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	2b04      	cmp	r3, #4
 800316c:	d008      	beq.n	8003180 <HAL_TIM_Encoder_Start+0xd4>
 800316e:	e00f      	b.n	8003190 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2201      	movs	r2, #1
 8003176:	2100      	movs	r1, #0
 8003178:	4618      	mov	r0, r3
 800317a:	f000 fc99 	bl	8003ab0 <TIM_CCxChannelCmd>
      break;
 800317e:	e016      	b.n	80031ae <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2201      	movs	r2, #1
 8003186:	2104      	movs	r1, #4
 8003188:	4618      	mov	r0, r3
 800318a:	f000 fc91 	bl	8003ab0 <TIM_CCxChannelCmd>
      break;
 800318e:	e00e      	b.n	80031ae <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	2201      	movs	r2, #1
 8003196:	2100      	movs	r1, #0
 8003198:	4618      	mov	r0, r3
 800319a:	f000 fc89 	bl	8003ab0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	2201      	movs	r2, #1
 80031a4:	2104      	movs	r1, #4
 80031a6:	4618      	mov	r0, r3
 80031a8:	f000 fc82 	bl	8003ab0 <TIM_CCxChannelCmd>
      break;
 80031ac:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f042 0201 	orr.w	r2, r2, #1
 80031bc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80031be:	2300      	movs	r3, #0
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	3710      	adds	r7, #16
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b086      	sub	sp, #24
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	60f8      	str	r0, [r7, #12]
 80031d0:	60b9      	str	r1, [r7, #8]
 80031d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031d4:	2300      	movs	r3, #0
 80031d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d101      	bne.n	80031e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80031e2:	2302      	movs	r3, #2
 80031e4:	e0ae      	b.n	8003344 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2201      	movs	r2, #1
 80031ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2b0c      	cmp	r3, #12
 80031f2:	f200 809f 	bhi.w	8003334 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80031f6:	a201      	add	r2, pc, #4	; (adr r2, 80031fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80031f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031fc:	08003231 	.word	0x08003231
 8003200:	08003335 	.word	0x08003335
 8003204:	08003335 	.word	0x08003335
 8003208:	08003335 	.word	0x08003335
 800320c:	08003271 	.word	0x08003271
 8003210:	08003335 	.word	0x08003335
 8003214:	08003335 	.word	0x08003335
 8003218:	08003335 	.word	0x08003335
 800321c:	080032b3 	.word	0x080032b3
 8003220:	08003335 	.word	0x08003335
 8003224:	08003335 	.word	0x08003335
 8003228:	08003335 	.word	0x08003335
 800322c:	080032f3 	.word	0x080032f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	68b9      	ldr	r1, [r7, #8]
 8003236:	4618      	mov	r0, r3
 8003238:	f000 f9f0 	bl	800361c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	699a      	ldr	r2, [r3, #24]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f042 0208 	orr.w	r2, r2, #8
 800324a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	699a      	ldr	r2, [r3, #24]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f022 0204 	bic.w	r2, r2, #4
 800325a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	6999      	ldr	r1, [r3, #24]
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	691a      	ldr	r2, [r3, #16]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	430a      	orrs	r2, r1
 800326c:	619a      	str	r2, [r3, #24]
      break;
 800326e:	e064      	b.n	800333a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	68b9      	ldr	r1, [r7, #8]
 8003276:	4618      	mov	r0, r3
 8003278:	f000 fa40 	bl	80036fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	699a      	ldr	r2, [r3, #24]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800328a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	699a      	ldr	r2, [r3, #24]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800329a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	6999      	ldr	r1, [r3, #24]
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	691b      	ldr	r3, [r3, #16]
 80032a6:	021a      	lsls	r2, r3, #8
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	430a      	orrs	r2, r1
 80032ae:	619a      	str	r2, [r3, #24]
      break;
 80032b0:	e043      	b.n	800333a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	68b9      	ldr	r1, [r7, #8]
 80032b8:	4618      	mov	r0, r3
 80032ba:	f000 fa95 	bl	80037e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	69da      	ldr	r2, [r3, #28]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f042 0208 	orr.w	r2, r2, #8
 80032cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	69da      	ldr	r2, [r3, #28]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f022 0204 	bic.w	r2, r2, #4
 80032dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	69d9      	ldr	r1, [r3, #28]
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	691a      	ldr	r2, [r3, #16]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	430a      	orrs	r2, r1
 80032ee:	61da      	str	r2, [r3, #28]
      break;
 80032f0:	e023      	b.n	800333a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	68b9      	ldr	r1, [r7, #8]
 80032f8:	4618      	mov	r0, r3
 80032fa:	f000 fae9 	bl	80038d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	69da      	ldr	r2, [r3, #28]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800330c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	69da      	ldr	r2, [r3, #28]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800331c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	69d9      	ldr	r1, [r3, #28]
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	691b      	ldr	r3, [r3, #16]
 8003328:	021a      	lsls	r2, r3, #8
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	430a      	orrs	r2, r1
 8003330:	61da      	str	r2, [r3, #28]
      break;
 8003332:	e002      	b.n	800333a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	75fb      	strb	r3, [r7, #23]
      break;
 8003338:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2200      	movs	r2, #0
 800333e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003342:	7dfb      	ldrb	r3, [r7, #23]
}
 8003344:	4618      	mov	r0, r3
 8003346:	3718      	adds	r7, #24
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}

0800334c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003356:	2300      	movs	r3, #0
 8003358:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003360:	2b01      	cmp	r3, #1
 8003362:	d101      	bne.n	8003368 <HAL_TIM_ConfigClockSource+0x1c>
 8003364:	2302      	movs	r3, #2
 8003366:	e0b4      	b.n	80034d2 <HAL_TIM_ConfigClockSource+0x186>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2202      	movs	r2, #2
 8003374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003386:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800338e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	68ba      	ldr	r2, [r7, #8]
 8003396:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033a0:	d03e      	beq.n	8003420 <HAL_TIM_ConfigClockSource+0xd4>
 80033a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033a6:	f200 8087 	bhi.w	80034b8 <HAL_TIM_ConfigClockSource+0x16c>
 80033aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033ae:	f000 8086 	beq.w	80034be <HAL_TIM_ConfigClockSource+0x172>
 80033b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033b6:	d87f      	bhi.n	80034b8 <HAL_TIM_ConfigClockSource+0x16c>
 80033b8:	2b70      	cmp	r3, #112	; 0x70
 80033ba:	d01a      	beq.n	80033f2 <HAL_TIM_ConfigClockSource+0xa6>
 80033bc:	2b70      	cmp	r3, #112	; 0x70
 80033be:	d87b      	bhi.n	80034b8 <HAL_TIM_ConfigClockSource+0x16c>
 80033c0:	2b60      	cmp	r3, #96	; 0x60
 80033c2:	d050      	beq.n	8003466 <HAL_TIM_ConfigClockSource+0x11a>
 80033c4:	2b60      	cmp	r3, #96	; 0x60
 80033c6:	d877      	bhi.n	80034b8 <HAL_TIM_ConfigClockSource+0x16c>
 80033c8:	2b50      	cmp	r3, #80	; 0x50
 80033ca:	d03c      	beq.n	8003446 <HAL_TIM_ConfigClockSource+0xfa>
 80033cc:	2b50      	cmp	r3, #80	; 0x50
 80033ce:	d873      	bhi.n	80034b8 <HAL_TIM_ConfigClockSource+0x16c>
 80033d0:	2b40      	cmp	r3, #64	; 0x40
 80033d2:	d058      	beq.n	8003486 <HAL_TIM_ConfigClockSource+0x13a>
 80033d4:	2b40      	cmp	r3, #64	; 0x40
 80033d6:	d86f      	bhi.n	80034b8 <HAL_TIM_ConfigClockSource+0x16c>
 80033d8:	2b30      	cmp	r3, #48	; 0x30
 80033da:	d064      	beq.n	80034a6 <HAL_TIM_ConfigClockSource+0x15a>
 80033dc:	2b30      	cmp	r3, #48	; 0x30
 80033de:	d86b      	bhi.n	80034b8 <HAL_TIM_ConfigClockSource+0x16c>
 80033e0:	2b20      	cmp	r3, #32
 80033e2:	d060      	beq.n	80034a6 <HAL_TIM_ConfigClockSource+0x15a>
 80033e4:	2b20      	cmp	r3, #32
 80033e6:	d867      	bhi.n	80034b8 <HAL_TIM_ConfigClockSource+0x16c>
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d05c      	beq.n	80034a6 <HAL_TIM_ConfigClockSource+0x15a>
 80033ec:	2b10      	cmp	r3, #16
 80033ee:	d05a      	beq.n	80034a6 <HAL_TIM_ConfigClockSource+0x15a>
 80033f0:	e062      	b.n	80034b8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6818      	ldr	r0, [r3, #0]
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	6899      	ldr	r1, [r3, #8]
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	685a      	ldr	r2, [r3, #4]
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	f000 fb35 	bl	8003a70 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003414:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	68ba      	ldr	r2, [r7, #8]
 800341c:	609a      	str	r2, [r3, #8]
      break;
 800341e:	e04f      	b.n	80034c0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6818      	ldr	r0, [r3, #0]
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	6899      	ldr	r1, [r3, #8]
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	685a      	ldr	r2, [r3, #4]
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	f000 fb1e 	bl	8003a70 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	689a      	ldr	r2, [r3, #8]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003442:	609a      	str	r2, [r3, #8]
      break;
 8003444:	e03c      	b.n	80034c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6818      	ldr	r0, [r3, #0]
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	6859      	ldr	r1, [r3, #4]
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	461a      	mov	r2, r3
 8003454:	f000 fa92 	bl	800397c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2150      	movs	r1, #80	; 0x50
 800345e:	4618      	mov	r0, r3
 8003460:	f000 faeb 	bl	8003a3a <TIM_ITRx_SetConfig>
      break;
 8003464:	e02c      	b.n	80034c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6818      	ldr	r0, [r3, #0]
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	6859      	ldr	r1, [r3, #4]
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	461a      	mov	r2, r3
 8003474:	f000 fab1 	bl	80039da <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	2160      	movs	r1, #96	; 0x60
 800347e:	4618      	mov	r0, r3
 8003480:	f000 fadb 	bl	8003a3a <TIM_ITRx_SetConfig>
      break;
 8003484:	e01c      	b.n	80034c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6818      	ldr	r0, [r3, #0]
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	6859      	ldr	r1, [r3, #4]
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	68db      	ldr	r3, [r3, #12]
 8003492:	461a      	mov	r2, r3
 8003494:	f000 fa72 	bl	800397c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	2140      	movs	r1, #64	; 0x40
 800349e:	4618      	mov	r0, r3
 80034a0:	f000 facb 	bl	8003a3a <TIM_ITRx_SetConfig>
      break;
 80034a4:	e00c      	b.n	80034c0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4619      	mov	r1, r3
 80034b0:	4610      	mov	r0, r2
 80034b2:	f000 fac2 	bl	8003a3a <TIM_ITRx_SetConfig>
      break;
 80034b6:	e003      	b.n	80034c0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	73fb      	strb	r3, [r7, #15]
      break;
 80034bc:	e000      	b.n	80034c0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80034be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80034d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3710      	adds	r7, #16
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
	...

080034dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80034dc:	b480      	push	{r7}
 80034de:	b085      	sub	sp, #20
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	4a40      	ldr	r2, [pc, #256]	; (80035f0 <TIM_Base_SetConfig+0x114>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d013      	beq.n	800351c <TIM_Base_SetConfig+0x40>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034fa:	d00f      	beq.n	800351c <TIM_Base_SetConfig+0x40>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	4a3d      	ldr	r2, [pc, #244]	; (80035f4 <TIM_Base_SetConfig+0x118>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d00b      	beq.n	800351c <TIM_Base_SetConfig+0x40>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	4a3c      	ldr	r2, [pc, #240]	; (80035f8 <TIM_Base_SetConfig+0x11c>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d007      	beq.n	800351c <TIM_Base_SetConfig+0x40>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	4a3b      	ldr	r2, [pc, #236]	; (80035fc <TIM_Base_SetConfig+0x120>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d003      	beq.n	800351c <TIM_Base_SetConfig+0x40>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	4a3a      	ldr	r2, [pc, #232]	; (8003600 <TIM_Base_SetConfig+0x124>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d108      	bne.n	800352e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003522:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	68fa      	ldr	r2, [r7, #12]
 800352a:	4313      	orrs	r3, r2
 800352c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a2f      	ldr	r2, [pc, #188]	; (80035f0 <TIM_Base_SetConfig+0x114>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d02b      	beq.n	800358e <TIM_Base_SetConfig+0xb2>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800353c:	d027      	beq.n	800358e <TIM_Base_SetConfig+0xb2>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a2c      	ldr	r2, [pc, #176]	; (80035f4 <TIM_Base_SetConfig+0x118>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d023      	beq.n	800358e <TIM_Base_SetConfig+0xb2>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a2b      	ldr	r2, [pc, #172]	; (80035f8 <TIM_Base_SetConfig+0x11c>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d01f      	beq.n	800358e <TIM_Base_SetConfig+0xb2>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a2a      	ldr	r2, [pc, #168]	; (80035fc <TIM_Base_SetConfig+0x120>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d01b      	beq.n	800358e <TIM_Base_SetConfig+0xb2>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a29      	ldr	r2, [pc, #164]	; (8003600 <TIM_Base_SetConfig+0x124>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d017      	beq.n	800358e <TIM_Base_SetConfig+0xb2>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a28      	ldr	r2, [pc, #160]	; (8003604 <TIM_Base_SetConfig+0x128>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d013      	beq.n	800358e <TIM_Base_SetConfig+0xb2>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a27      	ldr	r2, [pc, #156]	; (8003608 <TIM_Base_SetConfig+0x12c>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d00f      	beq.n	800358e <TIM_Base_SetConfig+0xb2>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a26      	ldr	r2, [pc, #152]	; (800360c <TIM_Base_SetConfig+0x130>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d00b      	beq.n	800358e <TIM_Base_SetConfig+0xb2>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a25      	ldr	r2, [pc, #148]	; (8003610 <TIM_Base_SetConfig+0x134>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d007      	beq.n	800358e <TIM_Base_SetConfig+0xb2>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a24      	ldr	r2, [pc, #144]	; (8003614 <TIM_Base_SetConfig+0x138>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d003      	beq.n	800358e <TIM_Base_SetConfig+0xb2>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a23      	ldr	r2, [pc, #140]	; (8003618 <TIM_Base_SetConfig+0x13c>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d108      	bne.n	80035a0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003594:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	68fa      	ldr	r2, [r7, #12]
 800359c:	4313      	orrs	r3, r2
 800359e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	68fa      	ldr	r2, [r7, #12]
 80035b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	689a      	ldr	r2, [r3, #8]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	4a0a      	ldr	r2, [pc, #40]	; (80035f0 <TIM_Base_SetConfig+0x114>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d003      	beq.n	80035d4 <TIM_Base_SetConfig+0xf8>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	4a0c      	ldr	r2, [pc, #48]	; (8003600 <TIM_Base_SetConfig+0x124>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d103      	bne.n	80035dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	691a      	ldr	r2, [r3, #16]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	615a      	str	r2, [r3, #20]
}
 80035e2:	bf00      	nop
 80035e4:	3714      	adds	r7, #20
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr
 80035ee:	bf00      	nop
 80035f0:	40010000 	.word	0x40010000
 80035f4:	40000400 	.word	0x40000400
 80035f8:	40000800 	.word	0x40000800
 80035fc:	40000c00 	.word	0x40000c00
 8003600:	40010400 	.word	0x40010400
 8003604:	40014000 	.word	0x40014000
 8003608:	40014400 	.word	0x40014400
 800360c:	40014800 	.word	0x40014800
 8003610:	40001800 	.word	0x40001800
 8003614:	40001c00 	.word	0x40001c00
 8003618:	40002000 	.word	0x40002000

0800361c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800361c:	b480      	push	{r7}
 800361e:	b087      	sub	sp, #28
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a1b      	ldr	r3, [r3, #32]
 800362a:	f023 0201 	bic.w	r2, r3, #1
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a1b      	ldr	r3, [r3, #32]
 8003636:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	699b      	ldr	r3, [r3, #24]
 8003642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800364a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f023 0303 	bic.w	r3, r3, #3
 8003652:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	68fa      	ldr	r2, [r7, #12]
 800365a:	4313      	orrs	r3, r2
 800365c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	f023 0302 	bic.w	r3, r3, #2
 8003664:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	697a      	ldr	r2, [r7, #20]
 800366c:	4313      	orrs	r3, r2
 800366e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	4a20      	ldr	r2, [pc, #128]	; (80036f4 <TIM_OC1_SetConfig+0xd8>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d003      	beq.n	8003680 <TIM_OC1_SetConfig+0x64>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	4a1f      	ldr	r2, [pc, #124]	; (80036f8 <TIM_OC1_SetConfig+0xdc>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d10c      	bne.n	800369a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	f023 0308 	bic.w	r3, r3, #8
 8003686:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	697a      	ldr	r2, [r7, #20]
 800368e:	4313      	orrs	r3, r2
 8003690:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	f023 0304 	bic.w	r3, r3, #4
 8003698:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4a15      	ldr	r2, [pc, #84]	; (80036f4 <TIM_OC1_SetConfig+0xd8>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d003      	beq.n	80036aa <TIM_OC1_SetConfig+0x8e>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	4a14      	ldr	r2, [pc, #80]	; (80036f8 <TIM_OC1_SetConfig+0xdc>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d111      	bne.n	80036ce <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80036b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	695b      	ldr	r3, [r3, #20]
 80036be:	693a      	ldr	r2, [r7, #16]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	699b      	ldr	r3, [r3, #24]
 80036c8:	693a      	ldr	r2, [r7, #16]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	693a      	ldr	r2, [r7, #16]
 80036d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	68fa      	ldr	r2, [r7, #12]
 80036d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	685a      	ldr	r2, [r3, #4]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	697a      	ldr	r2, [r7, #20]
 80036e6:	621a      	str	r2, [r3, #32]
}
 80036e8:	bf00      	nop
 80036ea:	371c      	adds	r7, #28
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr
 80036f4:	40010000 	.word	0x40010000
 80036f8:	40010400 	.word	0x40010400

080036fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b087      	sub	sp, #28
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6a1b      	ldr	r3, [r3, #32]
 800370a:	f023 0210 	bic.w	r2, r3, #16
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a1b      	ldr	r3, [r3, #32]
 8003716:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	699b      	ldr	r3, [r3, #24]
 8003722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800372a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003732:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	021b      	lsls	r3, r3, #8
 800373a:	68fa      	ldr	r2, [r7, #12]
 800373c:	4313      	orrs	r3, r2
 800373e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	f023 0320 	bic.w	r3, r3, #32
 8003746:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	011b      	lsls	r3, r3, #4
 800374e:	697a      	ldr	r2, [r7, #20]
 8003750:	4313      	orrs	r3, r2
 8003752:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	4a22      	ldr	r2, [pc, #136]	; (80037e0 <TIM_OC2_SetConfig+0xe4>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d003      	beq.n	8003764 <TIM_OC2_SetConfig+0x68>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	4a21      	ldr	r2, [pc, #132]	; (80037e4 <TIM_OC2_SetConfig+0xe8>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d10d      	bne.n	8003780 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800376a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	011b      	lsls	r3, r3, #4
 8003772:	697a      	ldr	r2, [r7, #20]
 8003774:	4313      	orrs	r3, r2
 8003776:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800377e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	4a17      	ldr	r2, [pc, #92]	; (80037e0 <TIM_OC2_SetConfig+0xe4>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d003      	beq.n	8003790 <TIM_OC2_SetConfig+0x94>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	4a16      	ldr	r2, [pc, #88]	; (80037e4 <TIM_OC2_SetConfig+0xe8>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d113      	bne.n	80037b8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003796:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800379e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	695b      	ldr	r3, [r3, #20]
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	693a      	ldr	r2, [r7, #16]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	699b      	ldr	r3, [r3, #24]
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	693a      	ldr	r2, [r7, #16]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	693a      	ldr	r2, [r7, #16]
 80037bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	68fa      	ldr	r2, [r7, #12]
 80037c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	685a      	ldr	r2, [r3, #4]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	697a      	ldr	r2, [r7, #20]
 80037d0:	621a      	str	r2, [r3, #32]
}
 80037d2:	bf00      	nop
 80037d4:	371c      	adds	r7, #28
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop
 80037e0:	40010000 	.word	0x40010000
 80037e4:	40010400 	.word	0x40010400

080037e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b087      	sub	sp, #28
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a1b      	ldr	r3, [r3, #32]
 80037f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a1b      	ldr	r3, [r3, #32]
 8003802:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	69db      	ldr	r3, [r3, #28]
 800380e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003816:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f023 0303 	bic.w	r3, r3, #3
 800381e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	68fa      	ldr	r2, [r7, #12]
 8003826:	4313      	orrs	r3, r2
 8003828:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003830:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	021b      	lsls	r3, r3, #8
 8003838:	697a      	ldr	r2, [r7, #20]
 800383a:	4313      	orrs	r3, r2
 800383c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a21      	ldr	r2, [pc, #132]	; (80038c8 <TIM_OC3_SetConfig+0xe0>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d003      	beq.n	800384e <TIM_OC3_SetConfig+0x66>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a20      	ldr	r2, [pc, #128]	; (80038cc <TIM_OC3_SetConfig+0xe4>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d10d      	bne.n	800386a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003854:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	021b      	lsls	r3, r3, #8
 800385c:	697a      	ldr	r2, [r7, #20]
 800385e:	4313      	orrs	r3, r2
 8003860:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003868:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a16      	ldr	r2, [pc, #88]	; (80038c8 <TIM_OC3_SetConfig+0xe0>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d003      	beq.n	800387a <TIM_OC3_SetConfig+0x92>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4a15      	ldr	r2, [pc, #84]	; (80038cc <TIM_OC3_SetConfig+0xe4>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d113      	bne.n	80038a2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003880:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003888:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	695b      	ldr	r3, [r3, #20]
 800388e:	011b      	lsls	r3, r3, #4
 8003890:	693a      	ldr	r2, [r7, #16]
 8003892:	4313      	orrs	r3, r2
 8003894:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	699b      	ldr	r3, [r3, #24]
 800389a:	011b      	lsls	r3, r3, #4
 800389c:	693a      	ldr	r2, [r7, #16]
 800389e:	4313      	orrs	r3, r2
 80038a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	693a      	ldr	r2, [r7, #16]
 80038a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	68fa      	ldr	r2, [r7, #12]
 80038ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	685a      	ldr	r2, [r3, #4]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	697a      	ldr	r2, [r7, #20]
 80038ba:	621a      	str	r2, [r3, #32]
}
 80038bc:	bf00      	nop
 80038be:	371c      	adds	r7, #28
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr
 80038c8:	40010000 	.word	0x40010000
 80038cc:	40010400 	.word	0x40010400

080038d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b087      	sub	sp, #28
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
 80038d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a1b      	ldr	r3, [r3, #32]
 80038de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6a1b      	ldr	r3, [r3, #32]
 80038ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	69db      	ldr	r3, [r3, #28]
 80038f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003906:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	021b      	lsls	r3, r3, #8
 800390e:	68fa      	ldr	r2, [r7, #12]
 8003910:	4313      	orrs	r3, r2
 8003912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800391a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	031b      	lsls	r3, r3, #12
 8003922:	693a      	ldr	r2, [r7, #16]
 8003924:	4313      	orrs	r3, r2
 8003926:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	4a12      	ldr	r2, [pc, #72]	; (8003974 <TIM_OC4_SetConfig+0xa4>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d003      	beq.n	8003938 <TIM_OC4_SetConfig+0x68>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	4a11      	ldr	r2, [pc, #68]	; (8003978 <TIM_OC4_SetConfig+0xa8>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d109      	bne.n	800394c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800393e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	695b      	ldr	r3, [r3, #20]
 8003944:	019b      	lsls	r3, r3, #6
 8003946:	697a      	ldr	r2, [r7, #20]
 8003948:	4313      	orrs	r3, r2
 800394a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	697a      	ldr	r2, [r7, #20]
 8003950:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	68fa      	ldr	r2, [r7, #12]
 8003956:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	685a      	ldr	r2, [r3, #4]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	693a      	ldr	r2, [r7, #16]
 8003964:	621a      	str	r2, [r3, #32]
}
 8003966:	bf00      	nop
 8003968:	371c      	adds	r7, #28
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop
 8003974:	40010000 	.word	0x40010000
 8003978:	40010400 	.word	0x40010400

0800397c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800397c:	b480      	push	{r7}
 800397e:	b087      	sub	sp, #28
 8003980:	af00      	add	r7, sp, #0
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6a1b      	ldr	r3, [r3, #32]
 800398c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	6a1b      	ldr	r3, [r3, #32]
 8003992:	f023 0201 	bic.w	r2, r3, #1
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	699b      	ldr	r3, [r3, #24]
 800399e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	011b      	lsls	r3, r3, #4
 80039ac:	693a      	ldr	r2, [r7, #16]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	f023 030a 	bic.w	r3, r3, #10
 80039b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80039ba:	697a      	ldr	r2, [r7, #20]
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	4313      	orrs	r3, r2
 80039c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	693a      	ldr	r2, [r7, #16]
 80039c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	697a      	ldr	r2, [r7, #20]
 80039cc:	621a      	str	r2, [r3, #32]
}
 80039ce:	bf00      	nop
 80039d0:	371c      	adds	r7, #28
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr

080039da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039da:	b480      	push	{r7}
 80039dc:	b087      	sub	sp, #28
 80039de:	af00      	add	r7, sp, #0
 80039e0:	60f8      	str	r0, [r7, #12]
 80039e2:	60b9      	str	r1, [r7, #8]
 80039e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	6a1b      	ldr	r3, [r3, #32]
 80039ea:	f023 0210 	bic.w	r2, r3, #16
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	699b      	ldr	r3, [r3, #24]
 80039f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6a1b      	ldr	r3, [r3, #32]
 80039fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a04:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	031b      	lsls	r3, r3, #12
 8003a0a:	697a      	ldr	r2, [r7, #20]
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003a16:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	011b      	lsls	r3, r3, #4
 8003a1c:	693a      	ldr	r2, [r7, #16]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	697a      	ldr	r2, [r7, #20]
 8003a26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	693a      	ldr	r2, [r7, #16]
 8003a2c:	621a      	str	r2, [r3, #32]
}
 8003a2e:	bf00      	nop
 8003a30:	371c      	adds	r7, #28
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr

08003a3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a3a:	b480      	push	{r7}
 8003a3c:	b085      	sub	sp, #20
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
 8003a42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a52:	683a      	ldr	r2, [r7, #0]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	f043 0307 	orr.w	r3, r3, #7
 8003a5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	68fa      	ldr	r2, [r7, #12]
 8003a62:	609a      	str	r2, [r3, #8]
}
 8003a64:	bf00      	nop
 8003a66:	3714      	adds	r7, #20
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr

08003a70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b087      	sub	sp, #28
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	60f8      	str	r0, [r7, #12]
 8003a78:	60b9      	str	r1, [r7, #8]
 8003a7a:	607a      	str	r2, [r7, #4]
 8003a7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a8a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	021a      	lsls	r2, r3, #8
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	431a      	orrs	r2, r3
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	697a      	ldr	r2, [r7, #20]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	697a      	ldr	r2, [r7, #20]
 8003aa2:	609a      	str	r2, [r3, #8]
}
 8003aa4:	bf00      	nop
 8003aa6:	371c      	adds	r7, #28
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr

08003ab0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b087      	sub	sp, #28
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	60b9      	str	r1, [r7, #8]
 8003aba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	f003 031f 	and.w	r3, r3, #31
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6a1a      	ldr	r2, [r3, #32]
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	43db      	mvns	r3, r3
 8003ad2:	401a      	ands	r2, r3
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6a1a      	ldr	r2, [r3, #32]
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	f003 031f 	and.w	r3, r3, #31
 8003ae2:	6879      	ldr	r1, [r7, #4]
 8003ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ae8:	431a      	orrs	r2, r3
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	621a      	str	r2, [r3, #32]
}
 8003aee:	bf00      	nop
 8003af0:	371c      	adds	r7, #28
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr
	...

08003afc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b085      	sub	sp, #20
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d101      	bne.n	8003b14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b10:	2302      	movs	r3, #2
 8003b12:	e05a      	b.n	8003bca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2201      	movs	r2, #1
 8003b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2202      	movs	r2, #2
 8003b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	68fa      	ldr	r2, [r7, #12]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	68fa      	ldr	r2, [r7, #12]
 8003b4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a21      	ldr	r2, [pc, #132]	; (8003bd8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d022      	beq.n	8003b9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b60:	d01d      	beq.n	8003b9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a1d      	ldr	r2, [pc, #116]	; (8003bdc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d018      	beq.n	8003b9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a1b      	ldr	r2, [pc, #108]	; (8003be0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d013      	beq.n	8003b9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a1a      	ldr	r2, [pc, #104]	; (8003be4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d00e      	beq.n	8003b9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a18      	ldr	r2, [pc, #96]	; (8003be8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d009      	beq.n	8003b9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a17      	ldr	r2, [pc, #92]	; (8003bec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d004      	beq.n	8003b9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a15      	ldr	r2, [pc, #84]	; (8003bf0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d10c      	bne.n	8003bb8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ba4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	68ba      	ldr	r2, [r7, #8]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	68ba      	ldr	r2, [r7, #8]
 8003bb6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003bc8:	2300      	movs	r3, #0
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3714      	adds	r7, #20
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr
 8003bd6:	bf00      	nop
 8003bd8:	40010000 	.word	0x40010000
 8003bdc:	40000400 	.word	0x40000400
 8003be0:	40000800 	.word	0x40000800
 8003be4:	40000c00 	.word	0x40000c00
 8003be8:	40010400 	.word	0x40010400
 8003bec:	40014000 	.word	0x40014000
 8003bf0:	40001800 	.word	0x40001800

08003bf4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b085      	sub	sp, #20
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d101      	bne.n	8003c10 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003c0c:	2302      	movs	r3, #2
 8003c0e:	e03d      	b.n	8003c8c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	691b      	ldr	r3, [r3, #16]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	695b      	ldr	r3, [r3, #20]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	69db      	ldr	r3, [r3, #28]
 8003c76:	4313      	orrs	r3, r2
 8003c78:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	68fa      	ldr	r2, [r7, #12]
 8003c80:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2200      	movs	r2, #0
 8003c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c8a:	2300      	movs	r3, #0
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3714      	adds	r7, #20
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d101      	bne.n	8003caa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e03f      	b.n	8003d2a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d106      	bne.n	8003cc4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f7fd fe64 	bl	800198c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2224      	movs	r2, #36	; 0x24
 8003cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	68da      	ldr	r2, [r3, #12]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003cda:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f000 fcdb 	bl	8004698 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	691a      	ldr	r2, [r3, #16]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003cf0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	695a      	ldr	r2, [r3, #20]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	68da      	ldr	r2, [r3, #12]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2220      	movs	r2, #32
 8003d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2220      	movs	r2, #32
 8003d24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d28:	2300      	movs	r3, #0
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3708      	adds	r7, #8
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}

08003d32 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003d32:	b580      	push	{r7, lr}
 8003d34:	b084      	sub	sp, #16
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	60f8      	str	r0, [r7, #12]
 8003d3a:	60b9      	str	r1, [r7, #8]
 8003d3c:	4613      	mov	r3, r2
 8003d3e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	2b20      	cmp	r3, #32
 8003d4a:	d11d      	bne.n	8003d88 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d002      	beq.n	8003d58 <HAL_UART_Receive_IT+0x26>
 8003d52:	88fb      	ldrh	r3, [r7, #6]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d101      	bne.n	8003d5c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e016      	b.n	8003d8a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d101      	bne.n	8003d6a <HAL_UART_Receive_IT+0x38>
 8003d66:	2302      	movs	r3, #2
 8003d68:	e00f      	b.n	8003d8a <HAL_UART_Receive_IT+0x58>
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2200      	movs	r2, #0
 8003d76:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003d78:	88fb      	ldrh	r3, [r7, #6]
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	68b9      	ldr	r1, [r7, #8]
 8003d7e:	68f8      	ldr	r0, [r7, #12]
 8003d80:	f000 fab6 	bl	80042f0 <UART_Start_Receive_IT>
 8003d84:	4603      	mov	r3, r0
 8003d86:	e000      	b.n	8003d8a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003d88:	2302      	movs	r3, #2
  }
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3710      	adds	r7, #16
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
	...

08003d94 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b0ba      	sub	sp, #232	; 0xe8
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	695b      	ldr	r3, [r3, #20]
 8003db6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003dc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dca:	f003 030f 	and.w	r3, r3, #15
 8003dce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003dd2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d10f      	bne.n	8003dfa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003dda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dde:	f003 0320 	and.w	r3, r3, #32
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d009      	beq.n	8003dfa <HAL_UART_IRQHandler+0x66>
 8003de6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dea:	f003 0320 	and.w	r3, r3, #32
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d003      	beq.n	8003dfa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f000 fb95 	bl	8004522 <UART_Receive_IT>
      return;
 8003df8:	e256      	b.n	80042a8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003dfa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	f000 80de 	beq.w	8003fc0 <HAL_UART_IRQHandler+0x22c>
 8003e04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e08:	f003 0301 	and.w	r3, r3, #1
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d106      	bne.n	8003e1e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003e10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e14:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	f000 80d1 	beq.w	8003fc0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003e1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e22:	f003 0301 	and.w	r3, r3, #1
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d00b      	beq.n	8003e42 <HAL_UART_IRQHandler+0xae>
 8003e2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d005      	beq.n	8003e42 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3a:	f043 0201 	orr.w	r2, r3, #1
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e46:	f003 0304 	and.w	r3, r3, #4
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d00b      	beq.n	8003e66 <HAL_UART_IRQHandler+0xd2>
 8003e4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e52:	f003 0301 	and.w	r3, r3, #1
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d005      	beq.n	8003e66 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5e:	f043 0202 	orr.w	r2, r3, #2
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e6a:	f003 0302 	and.w	r3, r3, #2
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d00b      	beq.n	8003e8a <HAL_UART_IRQHandler+0xf6>
 8003e72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e76:	f003 0301 	and.w	r3, r3, #1
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d005      	beq.n	8003e8a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e82:	f043 0204 	orr.w	r2, r3, #4
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003e8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e8e:	f003 0308 	and.w	r3, r3, #8
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d011      	beq.n	8003eba <HAL_UART_IRQHandler+0x126>
 8003e96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e9a:	f003 0320 	and.w	r3, r3, #32
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d105      	bne.n	8003eae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003ea2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ea6:	f003 0301 	and.w	r3, r3, #1
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d005      	beq.n	8003eba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb2:	f043 0208 	orr.w	r2, r3, #8
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	f000 81ed 	beq.w	800429e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ec4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ec8:	f003 0320 	and.w	r3, r3, #32
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d008      	beq.n	8003ee2 <HAL_UART_IRQHandler+0x14e>
 8003ed0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ed4:	f003 0320 	and.w	r3, r3, #32
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d002      	beq.n	8003ee2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f000 fb20 	bl	8004522 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	695b      	ldr	r3, [r3, #20]
 8003ee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eec:	2b40      	cmp	r3, #64	; 0x40
 8003eee:	bf0c      	ite	eq
 8003ef0:	2301      	moveq	r3, #1
 8003ef2:	2300      	movne	r3, #0
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efe:	f003 0308 	and.w	r3, r3, #8
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d103      	bne.n	8003f0e <HAL_UART_IRQHandler+0x17a>
 8003f06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d04f      	beq.n	8003fae <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f000 fa28 	bl	8004364 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	695b      	ldr	r3, [r3, #20]
 8003f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f1e:	2b40      	cmp	r3, #64	; 0x40
 8003f20:	d141      	bne.n	8003fa6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	3314      	adds	r3, #20
 8003f28:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003f30:	e853 3f00 	ldrex	r3, [r3]
 8003f34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003f38:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003f3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f40:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	3314      	adds	r3, #20
 8003f4a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003f4e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003f52:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f56:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003f5a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003f5e:	e841 2300 	strex	r3, r2, [r1]
 8003f62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003f66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d1d9      	bne.n	8003f22 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d013      	beq.n	8003f9e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f7a:	4a7d      	ldr	r2, [pc, #500]	; (8004170 <HAL_UART_IRQHandler+0x3dc>)
 8003f7c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f82:	4618      	mov	r0, r3
 8003f84:	f7fe f809 	bl	8001f9a <HAL_DMA_Abort_IT>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d016      	beq.n	8003fbc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f98:	4610      	mov	r0, r2
 8003f9a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f9c:	e00e      	b.n	8003fbc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f000 f990 	bl	80042c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fa4:	e00a      	b.n	8003fbc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f000 f98c 	bl	80042c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fac:	e006      	b.n	8003fbc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f000 f988 	bl	80042c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003fba:	e170      	b.n	800429e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fbc:	bf00      	nop
    return;
 8003fbe:	e16e      	b.n	800429e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	f040 814a 	bne.w	800425e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003fca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fce:	f003 0310 	and.w	r3, r3, #16
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	f000 8143 	beq.w	800425e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003fd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fdc:	f003 0310 	and.w	r3, r3, #16
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	f000 813c 	beq.w	800425e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	60bb      	str	r3, [r7, #8]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	60bb      	str	r3, [r7, #8]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	60bb      	str	r3, [r7, #8]
 8003ffa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	695b      	ldr	r3, [r3, #20]
 8004002:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004006:	2b40      	cmp	r3, #64	; 0x40
 8004008:	f040 80b4 	bne.w	8004174 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004018:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800401c:	2b00      	cmp	r3, #0
 800401e:	f000 8140 	beq.w	80042a2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004026:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800402a:	429a      	cmp	r2, r3
 800402c:	f080 8139 	bcs.w	80042a2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004036:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800403c:	69db      	ldr	r3, [r3, #28]
 800403e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004042:	f000 8088 	beq.w	8004156 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	330c      	adds	r3, #12
 800404c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004050:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004054:	e853 3f00 	ldrex	r3, [r3]
 8004058:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800405c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004060:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004064:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	330c      	adds	r3, #12
 800406e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004072:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004076:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800407a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800407e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004082:	e841 2300 	strex	r3, r2, [r1]
 8004086:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800408a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800408e:	2b00      	cmp	r3, #0
 8004090:	d1d9      	bne.n	8004046 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	3314      	adds	r3, #20
 8004098:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800409a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800409c:	e853 3f00 	ldrex	r3, [r3]
 80040a0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80040a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80040a4:	f023 0301 	bic.w	r3, r3, #1
 80040a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	3314      	adds	r3, #20
 80040b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80040b6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80040ba:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040bc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80040be:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80040c2:	e841 2300 	strex	r3, r2, [r1]
 80040c6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80040c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d1e1      	bne.n	8004092 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	3314      	adds	r3, #20
 80040d4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80040d8:	e853 3f00 	ldrex	r3, [r3]
 80040dc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80040de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	3314      	adds	r3, #20
 80040ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80040f2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80040f4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040f6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80040f8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80040fa:	e841 2300 	strex	r3, r2, [r1]
 80040fe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004100:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004102:	2b00      	cmp	r3, #0
 8004104:	d1e3      	bne.n	80040ce <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2220      	movs	r2, #32
 800410a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	330c      	adds	r3, #12
 800411a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800411c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800411e:	e853 3f00 	ldrex	r3, [r3]
 8004122:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004124:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004126:	f023 0310 	bic.w	r3, r3, #16
 800412a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	330c      	adds	r3, #12
 8004134:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004138:	65ba      	str	r2, [r7, #88]	; 0x58
 800413a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800413c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800413e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004140:	e841 2300 	strex	r3, r2, [r1]
 8004144:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004146:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004148:	2b00      	cmp	r3, #0
 800414a:	d1e3      	bne.n	8004114 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004150:	4618      	mov	r0, r3
 8004152:	f7fd feb2 	bl	8001eba <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800415e:	b29b      	uxth	r3, r3
 8004160:	1ad3      	subs	r3, r2, r3
 8004162:	b29b      	uxth	r3, r3
 8004164:	4619      	mov	r1, r3
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f000 f8b6 	bl	80042d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800416c:	e099      	b.n	80042a2 <HAL_UART_IRQHandler+0x50e>
 800416e:	bf00      	nop
 8004170:	0800442b 	.word	0x0800442b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800417c:	b29b      	uxth	r3, r3
 800417e:	1ad3      	subs	r3, r2, r3
 8004180:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004188:	b29b      	uxth	r3, r3
 800418a:	2b00      	cmp	r3, #0
 800418c:	f000 808b 	beq.w	80042a6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004190:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004194:	2b00      	cmp	r3, #0
 8004196:	f000 8086 	beq.w	80042a6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	330c      	adds	r3, #12
 80041a0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041a4:	e853 3f00 	ldrex	r3, [r3]
 80041a8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80041aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80041b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	330c      	adds	r3, #12
 80041ba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80041be:	647a      	str	r2, [r7, #68]	; 0x44
 80041c0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80041c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80041c6:	e841 2300 	strex	r3, r2, [r1]
 80041ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80041cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d1e3      	bne.n	800419a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	3314      	adds	r3, #20
 80041d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041dc:	e853 3f00 	ldrex	r3, [r3]
 80041e0:	623b      	str	r3, [r7, #32]
   return(result);
 80041e2:	6a3b      	ldr	r3, [r7, #32]
 80041e4:	f023 0301 	bic.w	r3, r3, #1
 80041e8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	3314      	adds	r3, #20
 80041f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80041f6:	633a      	str	r2, [r7, #48]	; 0x30
 80041f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80041fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041fe:	e841 2300 	strex	r3, r2, [r1]
 8004202:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004206:	2b00      	cmp	r3, #0
 8004208:	d1e3      	bne.n	80041d2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2220      	movs	r2, #32
 800420e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	330c      	adds	r3, #12
 800421e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	e853 3f00 	ldrex	r3, [r3]
 8004226:	60fb      	str	r3, [r7, #12]
   return(result);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f023 0310 	bic.w	r3, r3, #16
 800422e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	330c      	adds	r3, #12
 8004238:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800423c:	61fa      	str	r2, [r7, #28]
 800423e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004240:	69b9      	ldr	r1, [r7, #24]
 8004242:	69fa      	ldr	r2, [r7, #28]
 8004244:	e841 2300 	strex	r3, r2, [r1]
 8004248:	617b      	str	r3, [r7, #20]
   return(result);
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d1e3      	bne.n	8004218 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004250:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004254:	4619      	mov	r1, r3
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f000 f83e 	bl	80042d8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800425c:	e023      	b.n	80042a6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800425e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004266:	2b00      	cmp	r3, #0
 8004268:	d009      	beq.n	800427e <HAL_UART_IRQHandler+0x4ea>
 800426a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800426e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004272:	2b00      	cmp	r3, #0
 8004274:	d003      	beq.n	800427e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f000 f8eb 	bl	8004452 <UART_Transmit_IT>
    return;
 800427c:	e014      	b.n	80042a8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800427e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004286:	2b00      	cmp	r3, #0
 8004288:	d00e      	beq.n	80042a8 <HAL_UART_IRQHandler+0x514>
 800428a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800428e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004292:	2b00      	cmp	r3, #0
 8004294:	d008      	beq.n	80042a8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f000 f92b 	bl	80044f2 <UART_EndTransmit_IT>
    return;
 800429c:	e004      	b.n	80042a8 <HAL_UART_IRQHandler+0x514>
    return;
 800429e:	bf00      	nop
 80042a0:	e002      	b.n	80042a8 <HAL_UART_IRQHandler+0x514>
      return;
 80042a2:	bf00      	nop
 80042a4:	e000      	b.n	80042a8 <HAL_UART_IRQHandler+0x514>
      return;
 80042a6:	bf00      	nop
  }
}
 80042a8:	37e8      	adds	r7, #232	; 0xe8
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop

080042b0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80042b8:	bf00      	nop
 80042ba:	370c      	adds	r7, #12
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80042cc:	bf00      	nop
 80042ce:	370c      	adds	r7, #12
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr

080042d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80042d8:	b480      	push	{r7}
 80042da:	b083      	sub	sp, #12
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	460b      	mov	r3, r1
 80042e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80042e4:	bf00      	nop
 80042e6:	370c      	adds	r7, #12
 80042e8:	46bd      	mov	sp, r7
 80042ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ee:	4770      	bx	lr

080042f0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b085      	sub	sp, #20
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	60b9      	str	r1, [r7, #8]
 80042fa:	4613      	mov	r3, r2
 80042fc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	68ba      	ldr	r2, [r7, #8]
 8004302:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	88fa      	ldrh	r2, [r7, #6]
 8004308:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	88fa      	ldrh	r2, [r7, #6]
 800430e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2200      	movs	r2, #0
 8004314:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2222      	movs	r2, #34	; 0x22
 800431a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2200      	movs	r2, #0
 8004322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	68da      	ldr	r2, [r3, #12]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004334:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	695a      	ldr	r2, [r3, #20]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f042 0201 	orr.w	r2, r2, #1
 8004344:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	68da      	ldr	r2, [r3, #12]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f042 0220 	orr.w	r2, r2, #32
 8004354:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004356:	2300      	movs	r3, #0
}
 8004358:	4618      	mov	r0, r3
 800435a:	3714      	adds	r7, #20
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr

08004364 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004364:	b480      	push	{r7}
 8004366:	b095      	sub	sp, #84	; 0x54
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	330c      	adds	r3, #12
 8004372:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004376:	e853 3f00 	ldrex	r3, [r3]
 800437a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800437c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800437e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004382:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	330c      	adds	r3, #12
 800438a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800438c:	643a      	str	r2, [r7, #64]	; 0x40
 800438e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004390:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004392:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004394:	e841 2300 	strex	r3, r2, [r1]
 8004398:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800439a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800439c:	2b00      	cmp	r3, #0
 800439e:	d1e5      	bne.n	800436c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	3314      	adds	r3, #20
 80043a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a8:	6a3b      	ldr	r3, [r7, #32]
 80043aa:	e853 3f00 	ldrex	r3, [r3]
 80043ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	f023 0301 	bic.w	r3, r3, #1
 80043b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	3314      	adds	r3, #20
 80043be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80043c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80043c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80043c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043c8:	e841 2300 	strex	r3, r2, [r1]
 80043cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80043ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d1e5      	bne.n	80043a0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d119      	bne.n	8004410 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	330c      	adds	r3, #12
 80043e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	e853 3f00 	ldrex	r3, [r3]
 80043ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	f023 0310 	bic.w	r3, r3, #16
 80043f2:	647b      	str	r3, [r7, #68]	; 0x44
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	330c      	adds	r3, #12
 80043fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80043fc:	61ba      	str	r2, [r7, #24]
 80043fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004400:	6979      	ldr	r1, [r7, #20]
 8004402:	69ba      	ldr	r2, [r7, #24]
 8004404:	e841 2300 	strex	r3, r2, [r1]
 8004408:	613b      	str	r3, [r7, #16]
   return(result);
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d1e5      	bne.n	80043dc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2220      	movs	r2, #32
 8004414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800441e:	bf00      	nop
 8004420:	3754      	adds	r7, #84	; 0x54
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr

0800442a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800442a:	b580      	push	{r7, lr}
 800442c:	b084      	sub	sp, #16
 800442e:	af00      	add	r7, sp, #0
 8004430:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004436:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2200      	movs	r2, #0
 800443c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2200      	movs	r2, #0
 8004442:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004444:	68f8      	ldr	r0, [r7, #12]
 8004446:	f7ff ff3d 	bl	80042c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800444a:	bf00      	nop
 800444c:	3710      	adds	r7, #16
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}

08004452 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004452:	b480      	push	{r7}
 8004454:	b085      	sub	sp, #20
 8004456:	af00      	add	r7, sp, #0
 8004458:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004460:	b2db      	uxtb	r3, r3
 8004462:	2b21      	cmp	r3, #33	; 0x21
 8004464:	d13e      	bne.n	80044e4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800446e:	d114      	bne.n	800449a <UART_Transmit_IT+0x48>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	691b      	ldr	r3, [r3, #16]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d110      	bne.n	800449a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6a1b      	ldr	r3, [r3, #32]
 800447c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	881b      	ldrh	r3, [r3, #0]
 8004482:	461a      	mov	r2, r3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800448c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6a1b      	ldr	r3, [r3, #32]
 8004492:	1c9a      	adds	r2, r3, #2
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	621a      	str	r2, [r3, #32]
 8004498:	e008      	b.n	80044ac <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a1b      	ldr	r3, [r3, #32]
 800449e:	1c59      	adds	r1, r3, #1
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	6211      	str	r1, [r2, #32]
 80044a4:	781a      	ldrb	r2, [r3, #0]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	3b01      	subs	r3, #1
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	4619      	mov	r1, r3
 80044ba:	84d1      	strh	r1, [r2, #38]	; 0x26
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d10f      	bne.n	80044e0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	68da      	ldr	r2, [r3, #12]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80044ce:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	68da      	ldr	r2, [r3, #12]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80044de:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80044e0:	2300      	movs	r3, #0
 80044e2:	e000      	b.n	80044e6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80044e4:	2302      	movs	r3, #2
  }
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3714      	adds	r7, #20
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr

080044f2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80044f2:	b580      	push	{r7, lr}
 80044f4:	b082      	sub	sp, #8
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	68da      	ldr	r2, [r3, #12]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004508:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2220      	movs	r2, #32
 800450e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f7ff fecc 	bl	80042b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004518:	2300      	movs	r3, #0
}
 800451a:	4618      	mov	r0, r3
 800451c:	3708      	adds	r7, #8
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}

08004522 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004522:	b580      	push	{r7, lr}
 8004524:	b08c      	sub	sp, #48	; 0x30
 8004526:	af00      	add	r7, sp, #0
 8004528:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004530:	b2db      	uxtb	r3, r3
 8004532:	2b22      	cmp	r3, #34	; 0x22
 8004534:	f040 80ab 	bne.w	800468e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004540:	d117      	bne.n	8004572 <UART_Receive_IT+0x50>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	691b      	ldr	r3, [r3, #16]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d113      	bne.n	8004572 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800454a:	2300      	movs	r3, #0
 800454c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004552:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	b29b      	uxth	r3, r3
 800455c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004560:	b29a      	uxth	r2, r3
 8004562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004564:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800456a:	1c9a      	adds	r2, r3, #2
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	629a      	str	r2, [r3, #40]	; 0x28
 8004570:	e026      	b.n	80045c0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004576:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004578:	2300      	movs	r3, #0
 800457a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004584:	d007      	beq.n	8004596 <UART_Receive_IT+0x74>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d10a      	bne.n	80045a4 <UART_Receive_IT+0x82>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	691b      	ldr	r3, [r3, #16]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d106      	bne.n	80045a4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	b2da      	uxtb	r2, r3
 800459e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045a0:	701a      	strb	r2, [r3, #0]
 80045a2:	e008      	b.n	80045b6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045b0:	b2da      	uxtb	r2, r3
 80045b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045b4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ba:	1c5a      	adds	r2, r3, #1
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	3b01      	subs	r3, #1
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	4619      	mov	r1, r3
 80045ce:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d15a      	bne.n	800468a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	68da      	ldr	r2, [r3, #12]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f022 0220 	bic.w	r2, r2, #32
 80045e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	68da      	ldr	r2, [r3, #12]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80045f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	695a      	ldr	r2, [r3, #20]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f022 0201 	bic.w	r2, r2, #1
 8004602:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2220      	movs	r2, #32
 8004608:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004610:	2b01      	cmp	r3, #1
 8004612:	d135      	bne.n	8004680 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2200      	movs	r2, #0
 8004618:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	330c      	adds	r3, #12
 8004620:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	e853 3f00 	ldrex	r3, [r3]
 8004628:	613b      	str	r3, [r7, #16]
   return(result);
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	f023 0310 	bic.w	r3, r3, #16
 8004630:	627b      	str	r3, [r7, #36]	; 0x24
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	330c      	adds	r3, #12
 8004638:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800463a:	623a      	str	r2, [r7, #32]
 800463c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800463e:	69f9      	ldr	r1, [r7, #28]
 8004640:	6a3a      	ldr	r2, [r7, #32]
 8004642:	e841 2300 	strex	r3, r2, [r1]
 8004646:	61bb      	str	r3, [r7, #24]
   return(result);
 8004648:	69bb      	ldr	r3, [r7, #24]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d1e5      	bne.n	800461a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 0310 	and.w	r3, r3, #16
 8004658:	2b10      	cmp	r3, #16
 800465a:	d10a      	bne.n	8004672 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800465c:	2300      	movs	r3, #0
 800465e:	60fb      	str	r3, [r7, #12]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	60fb      	str	r3, [r7, #12]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	60fb      	str	r3, [r7, #12]
 8004670:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004676:	4619      	mov	r1, r3
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f7ff fe2d 	bl	80042d8 <HAL_UARTEx_RxEventCallback>
 800467e:	e002      	b.n	8004686 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f7fc fdc5 	bl	8001210 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004686:	2300      	movs	r3, #0
 8004688:	e002      	b.n	8004690 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800468a:	2300      	movs	r3, #0
 800468c:	e000      	b.n	8004690 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800468e:	2302      	movs	r3, #2
  }
}
 8004690:	4618      	mov	r0, r3
 8004692:	3730      	adds	r7, #48	; 0x30
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}

08004698 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004698:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800469c:	b0c0      	sub	sp, #256	; 0x100
 800469e:	af00      	add	r7, sp, #0
 80046a0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	691b      	ldr	r3, [r3, #16]
 80046ac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80046b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046b4:	68d9      	ldr	r1, [r3, #12]
 80046b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	ea40 0301 	orr.w	r3, r0, r1
 80046c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80046c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046c6:	689a      	ldr	r2, [r3, #8]
 80046c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046cc:	691b      	ldr	r3, [r3, #16]
 80046ce:	431a      	orrs	r2, r3
 80046d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046d4:	695b      	ldr	r3, [r3, #20]
 80046d6:	431a      	orrs	r2, r3
 80046d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046dc:	69db      	ldr	r3, [r3, #28]
 80046de:	4313      	orrs	r3, r2
 80046e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80046e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80046f0:	f021 010c 	bic.w	r1, r1, #12
 80046f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80046fe:	430b      	orrs	r3, r1
 8004700:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004702:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	695b      	ldr	r3, [r3, #20]
 800470a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800470e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004712:	6999      	ldr	r1, [r3, #24]
 8004714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	ea40 0301 	orr.w	r3, r0, r1
 800471e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	4b8f      	ldr	r3, [pc, #572]	; (8004964 <UART_SetConfig+0x2cc>)
 8004728:	429a      	cmp	r2, r3
 800472a:	d005      	beq.n	8004738 <UART_SetConfig+0xa0>
 800472c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	4b8d      	ldr	r3, [pc, #564]	; (8004968 <UART_SetConfig+0x2d0>)
 8004734:	429a      	cmp	r2, r3
 8004736:	d104      	bne.n	8004742 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004738:	f7fe fa8e 	bl	8002c58 <HAL_RCC_GetPCLK2Freq>
 800473c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004740:	e003      	b.n	800474a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004742:	f7fe fa75 	bl	8002c30 <HAL_RCC_GetPCLK1Freq>
 8004746:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800474a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800474e:	69db      	ldr	r3, [r3, #28]
 8004750:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004754:	f040 810c 	bne.w	8004970 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004758:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800475c:	2200      	movs	r2, #0
 800475e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004762:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004766:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800476a:	4622      	mov	r2, r4
 800476c:	462b      	mov	r3, r5
 800476e:	1891      	adds	r1, r2, r2
 8004770:	65b9      	str	r1, [r7, #88]	; 0x58
 8004772:	415b      	adcs	r3, r3
 8004774:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004776:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800477a:	4621      	mov	r1, r4
 800477c:	eb12 0801 	adds.w	r8, r2, r1
 8004780:	4629      	mov	r1, r5
 8004782:	eb43 0901 	adc.w	r9, r3, r1
 8004786:	f04f 0200 	mov.w	r2, #0
 800478a:	f04f 0300 	mov.w	r3, #0
 800478e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004792:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004796:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800479a:	4690      	mov	r8, r2
 800479c:	4699      	mov	r9, r3
 800479e:	4623      	mov	r3, r4
 80047a0:	eb18 0303 	adds.w	r3, r8, r3
 80047a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80047a8:	462b      	mov	r3, r5
 80047aa:	eb49 0303 	adc.w	r3, r9, r3
 80047ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80047b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80047be:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80047c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80047c6:	460b      	mov	r3, r1
 80047c8:	18db      	adds	r3, r3, r3
 80047ca:	653b      	str	r3, [r7, #80]	; 0x50
 80047cc:	4613      	mov	r3, r2
 80047ce:	eb42 0303 	adc.w	r3, r2, r3
 80047d2:	657b      	str	r3, [r7, #84]	; 0x54
 80047d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80047d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80047dc:	f7fc f84e 	bl	800087c <__aeabi_uldivmod>
 80047e0:	4602      	mov	r2, r0
 80047e2:	460b      	mov	r3, r1
 80047e4:	4b61      	ldr	r3, [pc, #388]	; (800496c <UART_SetConfig+0x2d4>)
 80047e6:	fba3 2302 	umull	r2, r3, r3, r2
 80047ea:	095b      	lsrs	r3, r3, #5
 80047ec:	011c      	lsls	r4, r3, #4
 80047ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047f2:	2200      	movs	r2, #0
 80047f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80047f8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80047fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004800:	4642      	mov	r2, r8
 8004802:	464b      	mov	r3, r9
 8004804:	1891      	adds	r1, r2, r2
 8004806:	64b9      	str	r1, [r7, #72]	; 0x48
 8004808:	415b      	adcs	r3, r3
 800480a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800480c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004810:	4641      	mov	r1, r8
 8004812:	eb12 0a01 	adds.w	sl, r2, r1
 8004816:	4649      	mov	r1, r9
 8004818:	eb43 0b01 	adc.w	fp, r3, r1
 800481c:	f04f 0200 	mov.w	r2, #0
 8004820:	f04f 0300 	mov.w	r3, #0
 8004824:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004828:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800482c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004830:	4692      	mov	sl, r2
 8004832:	469b      	mov	fp, r3
 8004834:	4643      	mov	r3, r8
 8004836:	eb1a 0303 	adds.w	r3, sl, r3
 800483a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800483e:	464b      	mov	r3, r9
 8004840:	eb4b 0303 	adc.w	r3, fp, r3
 8004844:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004854:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004858:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800485c:	460b      	mov	r3, r1
 800485e:	18db      	adds	r3, r3, r3
 8004860:	643b      	str	r3, [r7, #64]	; 0x40
 8004862:	4613      	mov	r3, r2
 8004864:	eb42 0303 	adc.w	r3, r2, r3
 8004868:	647b      	str	r3, [r7, #68]	; 0x44
 800486a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800486e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004872:	f7fc f803 	bl	800087c <__aeabi_uldivmod>
 8004876:	4602      	mov	r2, r0
 8004878:	460b      	mov	r3, r1
 800487a:	4611      	mov	r1, r2
 800487c:	4b3b      	ldr	r3, [pc, #236]	; (800496c <UART_SetConfig+0x2d4>)
 800487e:	fba3 2301 	umull	r2, r3, r3, r1
 8004882:	095b      	lsrs	r3, r3, #5
 8004884:	2264      	movs	r2, #100	; 0x64
 8004886:	fb02 f303 	mul.w	r3, r2, r3
 800488a:	1acb      	subs	r3, r1, r3
 800488c:	00db      	lsls	r3, r3, #3
 800488e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004892:	4b36      	ldr	r3, [pc, #216]	; (800496c <UART_SetConfig+0x2d4>)
 8004894:	fba3 2302 	umull	r2, r3, r3, r2
 8004898:	095b      	lsrs	r3, r3, #5
 800489a:	005b      	lsls	r3, r3, #1
 800489c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80048a0:	441c      	add	r4, r3
 80048a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048a6:	2200      	movs	r2, #0
 80048a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80048ac:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80048b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80048b4:	4642      	mov	r2, r8
 80048b6:	464b      	mov	r3, r9
 80048b8:	1891      	adds	r1, r2, r2
 80048ba:	63b9      	str	r1, [r7, #56]	; 0x38
 80048bc:	415b      	adcs	r3, r3
 80048be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80048c4:	4641      	mov	r1, r8
 80048c6:	1851      	adds	r1, r2, r1
 80048c8:	6339      	str	r1, [r7, #48]	; 0x30
 80048ca:	4649      	mov	r1, r9
 80048cc:	414b      	adcs	r3, r1
 80048ce:	637b      	str	r3, [r7, #52]	; 0x34
 80048d0:	f04f 0200 	mov.w	r2, #0
 80048d4:	f04f 0300 	mov.w	r3, #0
 80048d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80048dc:	4659      	mov	r1, fp
 80048de:	00cb      	lsls	r3, r1, #3
 80048e0:	4651      	mov	r1, sl
 80048e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048e6:	4651      	mov	r1, sl
 80048e8:	00ca      	lsls	r2, r1, #3
 80048ea:	4610      	mov	r0, r2
 80048ec:	4619      	mov	r1, r3
 80048ee:	4603      	mov	r3, r0
 80048f0:	4642      	mov	r2, r8
 80048f2:	189b      	adds	r3, r3, r2
 80048f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80048f8:	464b      	mov	r3, r9
 80048fa:	460a      	mov	r2, r1
 80048fc:	eb42 0303 	adc.w	r3, r2, r3
 8004900:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004910:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004914:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004918:	460b      	mov	r3, r1
 800491a:	18db      	adds	r3, r3, r3
 800491c:	62bb      	str	r3, [r7, #40]	; 0x28
 800491e:	4613      	mov	r3, r2
 8004920:	eb42 0303 	adc.w	r3, r2, r3
 8004924:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004926:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800492a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800492e:	f7fb ffa5 	bl	800087c <__aeabi_uldivmod>
 8004932:	4602      	mov	r2, r0
 8004934:	460b      	mov	r3, r1
 8004936:	4b0d      	ldr	r3, [pc, #52]	; (800496c <UART_SetConfig+0x2d4>)
 8004938:	fba3 1302 	umull	r1, r3, r3, r2
 800493c:	095b      	lsrs	r3, r3, #5
 800493e:	2164      	movs	r1, #100	; 0x64
 8004940:	fb01 f303 	mul.w	r3, r1, r3
 8004944:	1ad3      	subs	r3, r2, r3
 8004946:	00db      	lsls	r3, r3, #3
 8004948:	3332      	adds	r3, #50	; 0x32
 800494a:	4a08      	ldr	r2, [pc, #32]	; (800496c <UART_SetConfig+0x2d4>)
 800494c:	fba2 2303 	umull	r2, r3, r2, r3
 8004950:	095b      	lsrs	r3, r3, #5
 8004952:	f003 0207 	and.w	r2, r3, #7
 8004956:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4422      	add	r2, r4
 800495e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004960:	e105      	b.n	8004b6e <UART_SetConfig+0x4d6>
 8004962:	bf00      	nop
 8004964:	40011000 	.word	0x40011000
 8004968:	40011400 	.word	0x40011400
 800496c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004970:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004974:	2200      	movs	r2, #0
 8004976:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800497a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800497e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004982:	4642      	mov	r2, r8
 8004984:	464b      	mov	r3, r9
 8004986:	1891      	adds	r1, r2, r2
 8004988:	6239      	str	r1, [r7, #32]
 800498a:	415b      	adcs	r3, r3
 800498c:	627b      	str	r3, [r7, #36]	; 0x24
 800498e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004992:	4641      	mov	r1, r8
 8004994:	1854      	adds	r4, r2, r1
 8004996:	4649      	mov	r1, r9
 8004998:	eb43 0501 	adc.w	r5, r3, r1
 800499c:	f04f 0200 	mov.w	r2, #0
 80049a0:	f04f 0300 	mov.w	r3, #0
 80049a4:	00eb      	lsls	r3, r5, #3
 80049a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80049aa:	00e2      	lsls	r2, r4, #3
 80049ac:	4614      	mov	r4, r2
 80049ae:	461d      	mov	r5, r3
 80049b0:	4643      	mov	r3, r8
 80049b2:	18e3      	adds	r3, r4, r3
 80049b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80049b8:	464b      	mov	r3, r9
 80049ba:	eb45 0303 	adc.w	r3, r5, r3
 80049be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80049c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	2200      	movs	r2, #0
 80049ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80049ce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80049d2:	f04f 0200 	mov.w	r2, #0
 80049d6:	f04f 0300 	mov.w	r3, #0
 80049da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80049de:	4629      	mov	r1, r5
 80049e0:	008b      	lsls	r3, r1, #2
 80049e2:	4621      	mov	r1, r4
 80049e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049e8:	4621      	mov	r1, r4
 80049ea:	008a      	lsls	r2, r1, #2
 80049ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80049f0:	f7fb ff44 	bl	800087c <__aeabi_uldivmod>
 80049f4:	4602      	mov	r2, r0
 80049f6:	460b      	mov	r3, r1
 80049f8:	4b60      	ldr	r3, [pc, #384]	; (8004b7c <UART_SetConfig+0x4e4>)
 80049fa:	fba3 2302 	umull	r2, r3, r3, r2
 80049fe:	095b      	lsrs	r3, r3, #5
 8004a00:	011c      	lsls	r4, r3, #4
 8004a02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a06:	2200      	movs	r2, #0
 8004a08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004a0c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004a10:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004a14:	4642      	mov	r2, r8
 8004a16:	464b      	mov	r3, r9
 8004a18:	1891      	adds	r1, r2, r2
 8004a1a:	61b9      	str	r1, [r7, #24]
 8004a1c:	415b      	adcs	r3, r3
 8004a1e:	61fb      	str	r3, [r7, #28]
 8004a20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a24:	4641      	mov	r1, r8
 8004a26:	1851      	adds	r1, r2, r1
 8004a28:	6139      	str	r1, [r7, #16]
 8004a2a:	4649      	mov	r1, r9
 8004a2c:	414b      	adcs	r3, r1
 8004a2e:	617b      	str	r3, [r7, #20]
 8004a30:	f04f 0200 	mov.w	r2, #0
 8004a34:	f04f 0300 	mov.w	r3, #0
 8004a38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a3c:	4659      	mov	r1, fp
 8004a3e:	00cb      	lsls	r3, r1, #3
 8004a40:	4651      	mov	r1, sl
 8004a42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a46:	4651      	mov	r1, sl
 8004a48:	00ca      	lsls	r2, r1, #3
 8004a4a:	4610      	mov	r0, r2
 8004a4c:	4619      	mov	r1, r3
 8004a4e:	4603      	mov	r3, r0
 8004a50:	4642      	mov	r2, r8
 8004a52:	189b      	adds	r3, r3, r2
 8004a54:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004a58:	464b      	mov	r3, r9
 8004a5a:	460a      	mov	r2, r1
 8004a5c:	eb42 0303 	adc.w	r3, r2, r3
 8004a60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	67bb      	str	r3, [r7, #120]	; 0x78
 8004a6e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004a70:	f04f 0200 	mov.w	r2, #0
 8004a74:	f04f 0300 	mov.w	r3, #0
 8004a78:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004a7c:	4649      	mov	r1, r9
 8004a7e:	008b      	lsls	r3, r1, #2
 8004a80:	4641      	mov	r1, r8
 8004a82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a86:	4641      	mov	r1, r8
 8004a88:	008a      	lsls	r2, r1, #2
 8004a8a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004a8e:	f7fb fef5 	bl	800087c <__aeabi_uldivmod>
 8004a92:	4602      	mov	r2, r0
 8004a94:	460b      	mov	r3, r1
 8004a96:	4b39      	ldr	r3, [pc, #228]	; (8004b7c <UART_SetConfig+0x4e4>)
 8004a98:	fba3 1302 	umull	r1, r3, r3, r2
 8004a9c:	095b      	lsrs	r3, r3, #5
 8004a9e:	2164      	movs	r1, #100	; 0x64
 8004aa0:	fb01 f303 	mul.w	r3, r1, r3
 8004aa4:	1ad3      	subs	r3, r2, r3
 8004aa6:	011b      	lsls	r3, r3, #4
 8004aa8:	3332      	adds	r3, #50	; 0x32
 8004aaa:	4a34      	ldr	r2, [pc, #208]	; (8004b7c <UART_SetConfig+0x4e4>)
 8004aac:	fba2 2303 	umull	r2, r3, r2, r3
 8004ab0:	095b      	lsrs	r3, r3, #5
 8004ab2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ab6:	441c      	add	r4, r3
 8004ab8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004abc:	2200      	movs	r2, #0
 8004abe:	673b      	str	r3, [r7, #112]	; 0x70
 8004ac0:	677a      	str	r2, [r7, #116]	; 0x74
 8004ac2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004ac6:	4642      	mov	r2, r8
 8004ac8:	464b      	mov	r3, r9
 8004aca:	1891      	adds	r1, r2, r2
 8004acc:	60b9      	str	r1, [r7, #8]
 8004ace:	415b      	adcs	r3, r3
 8004ad0:	60fb      	str	r3, [r7, #12]
 8004ad2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ad6:	4641      	mov	r1, r8
 8004ad8:	1851      	adds	r1, r2, r1
 8004ada:	6039      	str	r1, [r7, #0]
 8004adc:	4649      	mov	r1, r9
 8004ade:	414b      	adcs	r3, r1
 8004ae0:	607b      	str	r3, [r7, #4]
 8004ae2:	f04f 0200 	mov.w	r2, #0
 8004ae6:	f04f 0300 	mov.w	r3, #0
 8004aea:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004aee:	4659      	mov	r1, fp
 8004af0:	00cb      	lsls	r3, r1, #3
 8004af2:	4651      	mov	r1, sl
 8004af4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004af8:	4651      	mov	r1, sl
 8004afa:	00ca      	lsls	r2, r1, #3
 8004afc:	4610      	mov	r0, r2
 8004afe:	4619      	mov	r1, r3
 8004b00:	4603      	mov	r3, r0
 8004b02:	4642      	mov	r2, r8
 8004b04:	189b      	adds	r3, r3, r2
 8004b06:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b08:	464b      	mov	r3, r9
 8004b0a:	460a      	mov	r2, r1
 8004b0c:	eb42 0303 	adc.w	r3, r2, r3
 8004b10:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	663b      	str	r3, [r7, #96]	; 0x60
 8004b1c:	667a      	str	r2, [r7, #100]	; 0x64
 8004b1e:	f04f 0200 	mov.w	r2, #0
 8004b22:	f04f 0300 	mov.w	r3, #0
 8004b26:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004b2a:	4649      	mov	r1, r9
 8004b2c:	008b      	lsls	r3, r1, #2
 8004b2e:	4641      	mov	r1, r8
 8004b30:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b34:	4641      	mov	r1, r8
 8004b36:	008a      	lsls	r2, r1, #2
 8004b38:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004b3c:	f7fb fe9e 	bl	800087c <__aeabi_uldivmod>
 8004b40:	4602      	mov	r2, r0
 8004b42:	460b      	mov	r3, r1
 8004b44:	4b0d      	ldr	r3, [pc, #52]	; (8004b7c <UART_SetConfig+0x4e4>)
 8004b46:	fba3 1302 	umull	r1, r3, r3, r2
 8004b4a:	095b      	lsrs	r3, r3, #5
 8004b4c:	2164      	movs	r1, #100	; 0x64
 8004b4e:	fb01 f303 	mul.w	r3, r1, r3
 8004b52:	1ad3      	subs	r3, r2, r3
 8004b54:	011b      	lsls	r3, r3, #4
 8004b56:	3332      	adds	r3, #50	; 0x32
 8004b58:	4a08      	ldr	r2, [pc, #32]	; (8004b7c <UART_SetConfig+0x4e4>)
 8004b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b5e:	095b      	lsrs	r3, r3, #5
 8004b60:	f003 020f 	and.w	r2, r3, #15
 8004b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4422      	add	r2, r4
 8004b6c:	609a      	str	r2, [r3, #8]
}
 8004b6e:	bf00      	nop
 8004b70:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004b74:	46bd      	mov	sp, r7
 8004b76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b7a:	bf00      	nop
 8004b7c:	51eb851f 	.word	0x51eb851f

08004b80 <__NVIC_SetPriority>:
{
 8004b80:	b480      	push	{r7}
 8004b82:	b083      	sub	sp, #12
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	4603      	mov	r3, r0
 8004b88:	6039      	str	r1, [r7, #0]
 8004b8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	db0a      	blt.n	8004baa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	b2da      	uxtb	r2, r3
 8004b98:	490c      	ldr	r1, [pc, #48]	; (8004bcc <__NVIC_SetPriority+0x4c>)
 8004b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b9e:	0112      	lsls	r2, r2, #4
 8004ba0:	b2d2      	uxtb	r2, r2
 8004ba2:	440b      	add	r3, r1
 8004ba4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004ba8:	e00a      	b.n	8004bc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	b2da      	uxtb	r2, r3
 8004bae:	4908      	ldr	r1, [pc, #32]	; (8004bd0 <__NVIC_SetPriority+0x50>)
 8004bb0:	79fb      	ldrb	r3, [r7, #7]
 8004bb2:	f003 030f 	and.w	r3, r3, #15
 8004bb6:	3b04      	subs	r3, #4
 8004bb8:	0112      	lsls	r2, r2, #4
 8004bba:	b2d2      	uxtb	r2, r2
 8004bbc:	440b      	add	r3, r1
 8004bbe:	761a      	strb	r2, [r3, #24]
}
 8004bc0:	bf00      	nop
 8004bc2:	370c      	adds	r7, #12
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr
 8004bcc:	e000e100 	.word	0xe000e100
 8004bd0:	e000ed00 	.word	0xe000ed00

08004bd4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004bd8:	2100      	movs	r1, #0
 8004bda:	f06f 0004 	mvn.w	r0, #4
 8004bde:	f7ff ffcf 	bl	8004b80 <__NVIC_SetPriority>
#endif
}
 8004be2:	bf00      	nop
 8004be4:	bd80      	pop	{r7, pc}
	...

08004be8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004be8:	b480      	push	{r7}
 8004bea:	b083      	sub	sp, #12
 8004bec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004bee:	f3ef 8305 	mrs	r3, IPSR
 8004bf2:	603b      	str	r3, [r7, #0]
  return(result);
 8004bf4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d003      	beq.n	8004c02 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004bfa:	f06f 0305 	mvn.w	r3, #5
 8004bfe:	607b      	str	r3, [r7, #4]
 8004c00:	e00c      	b.n	8004c1c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004c02:	4b0a      	ldr	r3, [pc, #40]	; (8004c2c <osKernelInitialize+0x44>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d105      	bne.n	8004c16 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004c0a:	4b08      	ldr	r3, [pc, #32]	; (8004c2c <osKernelInitialize+0x44>)
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004c10:	2300      	movs	r3, #0
 8004c12:	607b      	str	r3, [r7, #4]
 8004c14:	e002      	b.n	8004c1c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004c16:	f04f 33ff 	mov.w	r3, #4294967295
 8004c1a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004c1c:	687b      	ldr	r3, [r7, #4]
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	370c      	adds	r7, #12
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr
 8004c2a:	bf00      	nop
 8004c2c:	20000244 	.word	0x20000244

08004c30 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b082      	sub	sp, #8
 8004c34:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c36:	f3ef 8305 	mrs	r3, IPSR
 8004c3a:	603b      	str	r3, [r7, #0]
  return(result);
 8004c3c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d003      	beq.n	8004c4a <osKernelStart+0x1a>
    stat = osErrorISR;
 8004c42:	f06f 0305 	mvn.w	r3, #5
 8004c46:	607b      	str	r3, [r7, #4]
 8004c48:	e010      	b.n	8004c6c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004c4a:	4b0b      	ldr	r3, [pc, #44]	; (8004c78 <osKernelStart+0x48>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d109      	bne.n	8004c66 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004c52:	f7ff ffbf 	bl	8004bd4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004c56:	4b08      	ldr	r3, [pc, #32]	; (8004c78 <osKernelStart+0x48>)
 8004c58:	2202      	movs	r2, #2
 8004c5a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004c5c:	f001 fc9e 	bl	800659c <vTaskStartScheduler>
      stat = osOK;
 8004c60:	2300      	movs	r3, #0
 8004c62:	607b      	str	r3, [r7, #4]
 8004c64:	e002      	b.n	8004c6c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004c66:	f04f 33ff 	mov.w	r3, #4294967295
 8004c6a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004c6c:	687b      	ldr	r3, [r7, #4]
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3708      	adds	r7, #8
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop
 8004c78:	20000244 	.word	0x20000244

08004c7c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b08e      	sub	sp, #56	; 0x38
 8004c80:	af04      	add	r7, sp, #16
 8004c82:	60f8      	str	r0, [r7, #12]
 8004c84:	60b9      	str	r1, [r7, #8]
 8004c86:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c8c:	f3ef 8305 	mrs	r3, IPSR
 8004c90:	617b      	str	r3, [r7, #20]
  return(result);
 8004c92:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d17e      	bne.n	8004d96 <osThreadNew+0x11a>
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d07b      	beq.n	8004d96 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004c9e:	2380      	movs	r3, #128	; 0x80
 8004ca0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004ca2:	2318      	movs	r3, #24
 8004ca4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004caa:	f04f 33ff 	mov.w	r3, #4294967295
 8004cae:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d045      	beq.n	8004d42 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d002      	beq.n	8004cc4 <osThreadNew+0x48>
        name = attr->name;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	699b      	ldr	r3, [r3, #24]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d002      	beq.n	8004cd2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	699b      	ldr	r3, [r3, #24]
 8004cd0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004cd2:	69fb      	ldr	r3, [r7, #28]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d008      	beq.n	8004cea <osThreadNew+0x6e>
 8004cd8:	69fb      	ldr	r3, [r7, #28]
 8004cda:	2b38      	cmp	r3, #56	; 0x38
 8004cdc:	d805      	bhi.n	8004cea <osThreadNew+0x6e>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	f003 0301 	and.w	r3, r3, #1
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d001      	beq.n	8004cee <osThreadNew+0x72>
        return (NULL);
 8004cea:	2300      	movs	r3, #0
 8004cec:	e054      	b.n	8004d98 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	695b      	ldr	r3, [r3, #20]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d003      	beq.n	8004cfe <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	695b      	ldr	r3, [r3, #20]
 8004cfa:	089b      	lsrs	r3, r3, #2
 8004cfc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d00e      	beq.n	8004d24 <osThreadNew+0xa8>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	68db      	ldr	r3, [r3, #12]
 8004d0a:	2b5b      	cmp	r3, #91	; 0x5b
 8004d0c:	d90a      	bls.n	8004d24 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d006      	beq.n	8004d24 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	695b      	ldr	r3, [r3, #20]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d002      	beq.n	8004d24 <osThreadNew+0xa8>
        mem = 1;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	61bb      	str	r3, [r7, #24]
 8004d22:	e010      	b.n	8004d46 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d10c      	bne.n	8004d46 <osThreadNew+0xca>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	68db      	ldr	r3, [r3, #12]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d108      	bne.n	8004d46 <osThreadNew+0xca>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	691b      	ldr	r3, [r3, #16]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d104      	bne.n	8004d46 <osThreadNew+0xca>
          mem = 0;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	61bb      	str	r3, [r7, #24]
 8004d40:	e001      	b.n	8004d46 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004d42:	2300      	movs	r3, #0
 8004d44:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004d46:	69bb      	ldr	r3, [r7, #24]
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d110      	bne.n	8004d6e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004d50:	687a      	ldr	r2, [r7, #4]
 8004d52:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004d54:	9202      	str	r2, [sp, #8]
 8004d56:	9301      	str	r3, [sp, #4]
 8004d58:	69fb      	ldr	r3, [r7, #28]
 8004d5a:	9300      	str	r3, [sp, #0]
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	6a3a      	ldr	r2, [r7, #32]
 8004d60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004d62:	68f8      	ldr	r0, [r7, #12]
 8004d64:	f001 fa44 	bl	80061f0 <xTaskCreateStatic>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	613b      	str	r3, [r7, #16]
 8004d6c:	e013      	b.n	8004d96 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004d6e:	69bb      	ldr	r3, [r7, #24]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d110      	bne.n	8004d96 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004d74:	6a3b      	ldr	r3, [r7, #32]
 8004d76:	b29a      	uxth	r2, r3
 8004d78:	f107 0310 	add.w	r3, r7, #16
 8004d7c:	9301      	str	r3, [sp, #4]
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	9300      	str	r3, [sp, #0]
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004d86:	68f8      	ldr	r0, [r7, #12]
 8004d88:	f001 fa8f 	bl	80062aa <xTaskCreate>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	d001      	beq.n	8004d96 <osThreadNew+0x11a>
            hTask = NULL;
 8004d92:	2300      	movs	r3, #0
 8004d94:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004d96:	693b      	ldr	r3, [r7, #16]
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3728      	adds	r7, #40	; 0x28
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}

08004da0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b084      	sub	sp, #16
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004da8:	f3ef 8305 	mrs	r3, IPSR
 8004dac:	60bb      	str	r3, [r7, #8]
  return(result);
 8004dae:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d003      	beq.n	8004dbc <osDelay+0x1c>
    stat = osErrorISR;
 8004db4:	f06f 0305 	mvn.w	r3, #5
 8004db8:	60fb      	str	r3, [r7, #12]
 8004dba:	e007      	b.n	8004dcc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d002      	beq.n	8004dcc <osDelay+0x2c>
      vTaskDelay(ticks);
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f001 fbb4 	bl	8006534 <vTaskDelay>
    }
  }

  return (stat);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3710      	adds	r7, #16
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
	...

08004dd8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004dd8:	b480      	push	{r7}
 8004dda:	b085      	sub	sp, #20
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	60b9      	str	r1, [r7, #8]
 8004de2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	4a07      	ldr	r2, [pc, #28]	; (8004e04 <vApplicationGetIdleTaskMemory+0x2c>)
 8004de8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	4a06      	ldr	r2, [pc, #24]	; (8004e08 <vApplicationGetIdleTaskMemory+0x30>)
 8004dee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2280      	movs	r2, #128	; 0x80
 8004df4:	601a      	str	r2, [r3, #0]
}
 8004df6:	bf00      	nop
 8004df8:	3714      	adds	r7, #20
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr
 8004e02:	bf00      	nop
 8004e04:	20000248 	.word	0x20000248
 8004e08:	200002a4 	.word	0x200002a4

08004e0c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004e0c:	b480      	push	{r7}
 8004e0e:	b085      	sub	sp, #20
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	60f8      	str	r0, [r7, #12]
 8004e14:	60b9      	str	r1, [r7, #8]
 8004e16:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	4a07      	ldr	r2, [pc, #28]	; (8004e38 <vApplicationGetTimerTaskMemory+0x2c>)
 8004e1c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	4a06      	ldr	r2, [pc, #24]	; (8004e3c <vApplicationGetTimerTaskMemory+0x30>)
 8004e22:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004e2a:	601a      	str	r2, [r3, #0]
}
 8004e2c:	bf00      	nop
 8004e2e:	3714      	adds	r7, #20
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr
 8004e38:	200004a4 	.word	0x200004a4
 8004e3c:	20000500 	.word	0x20000500

08004e40 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b08a      	sub	sp, #40	; 0x28
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004e4c:	f001 fc0c 	bl	8006668 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004e50:	4b5b      	ldr	r3, [pc, #364]	; (8004fc0 <pvPortMalloc+0x180>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d101      	bne.n	8004e5c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004e58:	f000 f920 	bl	800509c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004e5c:	4b59      	ldr	r3, [pc, #356]	; (8004fc4 <pvPortMalloc+0x184>)
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	4013      	ands	r3, r2
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	f040 8093 	bne.w	8004f90 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d01d      	beq.n	8004eac <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004e70:	2208      	movs	r2, #8
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4413      	add	r3, r2
 8004e76:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f003 0307 	and.w	r3, r3, #7
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d014      	beq.n	8004eac <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	f023 0307 	bic.w	r3, r3, #7
 8004e88:	3308      	adds	r3, #8
 8004e8a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f003 0307 	and.w	r3, r3, #7
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d00a      	beq.n	8004eac <pvPortMalloc+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e9a:	f383 8811 	msr	BASEPRI, r3
 8004e9e:	f3bf 8f6f 	isb	sy
 8004ea2:	f3bf 8f4f 	dsb	sy
 8004ea6:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004ea8:	bf00      	nop
 8004eaa:	e7fe      	b.n	8004eaa <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d06e      	beq.n	8004f90 <pvPortMalloc+0x150>
 8004eb2:	4b45      	ldr	r3, [pc, #276]	; (8004fc8 <pvPortMalloc+0x188>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d869      	bhi.n	8004f90 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004ebc:	4b43      	ldr	r3, [pc, #268]	; (8004fcc <pvPortMalloc+0x18c>)
 8004ebe:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004ec0:	4b42      	ldr	r3, [pc, #264]	; (8004fcc <pvPortMalloc+0x18c>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004ec6:	e004      	b.n	8004ed2 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eca:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	687a      	ldr	r2, [r7, #4]
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d903      	bls.n	8004ee4 <pvPortMalloc+0xa4>
 8004edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d1f1      	bne.n	8004ec8 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004ee4:	4b36      	ldr	r3, [pc, #216]	; (8004fc0 <pvPortMalloc+0x180>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d050      	beq.n	8004f90 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004eee:	6a3b      	ldr	r3, [r7, #32]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	2208      	movs	r2, #8
 8004ef4:	4413      	add	r3, r2
 8004ef6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	6a3b      	ldr	r3, [r7, #32]
 8004efe:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f02:	685a      	ldr	r2, [r3, #4]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	1ad2      	subs	r2, r2, r3
 8004f08:	2308      	movs	r3, #8
 8004f0a:	005b      	lsls	r3, r3, #1
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d91f      	bls.n	8004f50 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004f10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	4413      	add	r3, r2
 8004f16:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f18:	69bb      	ldr	r3, [r7, #24]
 8004f1a:	f003 0307 	and.w	r3, r3, #7
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d00a      	beq.n	8004f38 <pvPortMalloc+0xf8>
	__asm volatile
 8004f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f26:	f383 8811 	msr	BASEPRI, r3
 8004f2a:	f3bf 8f6f 	isb	sy
 8004f2e:	f3bf 8f4f 	dsb	sy
 8004f32:	613b      	str	r3, [r7, #16]
}
 8004f34:	bf00      	nop
 8004f36:	e7fe      	b.n	8004f36 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f3a:	685a      	ldr	r2, [r3, #4]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	1ad2      	subs	r2, r2, r3
 8004f40:	69bb      	ldr	r3, [r7, #24]
 8004f42:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f46:	687a      	ldr	r2, [r7, #4]
 8004f48:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004f4a:	69b8      	ldr	r0, [r7, #24]
 8004f4c:	f000 f908 	bl	8005160 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004f50:	4b1d      	ldr	r3, [pc, #116]	; (8004fc8 <pvPortMalloc+0x188>)
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	4a1b      	ldr	r2, [pc, #108]	; (8004fc8 <pvPortMalloc+0x188>)
 8004f5c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004f5e:	4b1a      	ldr	r3, [pc, #104]	; (8004fc8 <pvPortMalloc+0x188>)
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	4b1b      	ldr	r3, [pc, #108]	; (8004fd0 <pvPortMalloc+0x190>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d203      	bcs.n	8004f72 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004f6a:	4b17      	ldr	r3, [pc, #92]	; (8004fc8 <pvPortMalloc+0x188>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a18      	ldr	r2, [pc, #96]	; (8004fd0 <pvPortMalloc+0x190>)
 8004f70:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f74:	685a      	ldr	r2, [r3, #4]
 8004f76:	4b13      	ldr	r3, [pc, #76]	; (8004fc4 <pvPortMalloc+0x184>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	431a      	orrs	r2, r3
 8004f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f82:	2200      	movs	r2, #0
 8004f84:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004f86:	4b13      	ldr	r3, [pc, #76]	; (8004fd4 <pvPortMalloc+0x194>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	3301      	adds	r3, #1
 8004f8c:	4a11      	ldr	r2, [pc, #68]	; (8004fd4 <pvPortMalloc+0x194>)
 8004f8e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004f90:	f001 fb78 	bl	8006684 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f94:	69fb      	ldr	r3, [r7, #28]
 8004f96:	f003 0307 	and.w	r3, r3, #7
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d00a      	beq.n	8004fb4 <pvPortMalloc+0x174>
	__asm volatile
 8004f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa2:	f383 8811 	msr	BASEPRI, r3
 8004fa6:	f3bf 8f6f 	isb	sy
 8004faa:	f3bf 8f4f 	dsb	sy
 8004fae:	60fb      	str	r3, [r7, #12]
}
 8004fb0:	bf00      	nop
 8004fb2:	e7fe      	b.n	8004fb2 <pvPortMalloc+0x172>
	return pvReturn;
 8004fb4:	69fb      	ldr	r3, [r7, #28]
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3728      	adds	r7, #40	; 0x28
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}
 8004fbe:	bf00      	nop
 8004fc0:	20004508 	.word	0x20004508
 8004fc4:	2000451c 	.word	0x2000451c
 8004fc8:	2000450c 	.word	0x2000450c
 8004fcc:	20004500 	.word	0x20004500
 8004fd0:	20004510 	.word	0x20004510
 8004fd4:	20004514 	.word	0x20004514

08004fd8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b086      	sub	sp, #24
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d04d      	beq.n	8005086 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004fea:	2308      	movs	r3, #8
 8004fec:	425b      	negs	r3, r3
 8004fee:	697a      	ldr	r2, [r7, #20]
 8004ff0:	4413      	add	r3, r2
 8004ff2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	685a      	ldr	r2, [r3, #4]
 8004ffc:	4b24      	ldr	r3, [pc, #144]	; (8005090 <vPortFree+0xb8>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4013      	ands	r3, r2
 8005002:	2b00      	cmp	r3, #0
 8005004:	d10a      	bne.n	800501c <vPortFree+0x44>
	__asm volatile
 8005006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800500a:	f383 8811 	msr	BASEPRI, r3
 800500e:	f3bf 8f6f 	isb	sy
 8005012:	f3bf 8f4f 	dsb	sy
 8005016:	60fb      	str	r3, [r7, #12]
}
 8005018:	bf00      	nop
 800501a:	e7fe      	b.n	800501a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d00a      	beq.n	800503a <vPortFree+0x62>
	__asm volatile
 8005024:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005028:	f383 8811 	msr	BASEPRI, r3
 800502c:	f3bf 8f6f 	isb	sy
 8005030:	f3bf 8f4f 	dsb	sy
 8005034:	60bb      	str	r3, [r7, #8]
}
 8005036:	bf00      	nop
 8005038:	e7fe      	b.n	8005038 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	685a      	ldr	r2, [r3, #4]
 800503e:	4b14      	ldr	r3, [pc, #80]	; (8005090 <vPortFree+0xb8>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4013      	ands	r3, r2
 8005044:	2b00      	cmp	r3, #0
 8005046:	d01e      	beq.n	8005086 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d11a      	bne.n	8005086 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	685a      	ldr	r2, [r3, #4]
 8005054:	4b0e      	ldr	r3, [pc, #56]	; (8005090 <vPortFree+0xb8>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	43db      	mvns	r3, r3
 800505a:	401a      	ands	r2, r3
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005060:	f001 fb02 	bl	8006668 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	685a      	ldr	r2, [r3, #4]
 8005068:	4b0a      	ldr	r3, [pc, #40]	; (8005094 <vPortFree+0xbc>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4413      	add	r3, r2
 800506e:	4a09      	ldr	r2, [pc, #36]	; (8005094 <vPortFree+0xbc>)
 8005070:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005072:	6938      	ldr	r0, [r7, #16]
 8005074:	f000 f874 	bl	8005160 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005078:	4b07      	ldr	r3, [pc, #28]	; (8005098 <vPortFree+0xc0>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	3301      	adds	r3, #1
 800507e:	4a06      	ldr	r2, [pc, #24]	; (8005098 <vPortFree+0xc0>)
 8005080:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005082:	f001 faff 	bl	8006684 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005086:	bf00      	nop
 8005088:	3718      	adds	r7, #24
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}
 800508e:	bf00      	nop
 8005090:	2000451c 	.word	0x2000451c
 8005094:	2000450c 	.word	0x2000450c
 8005098:	20004518 	.word	0x20004518

0800509c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800509c:	b480      	push	{r7}
 800509e:	b085      	sub	sp, #20
 80050a0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80050a2:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80050a6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80050a8:	4b27      	ldr	r3, [pc, #156]	; (8005148 <prvHeapInit+0xac>)
 80050aa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f003 0307 	and.w	r3, r3, #7
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d00c      	beq.n	80050d0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	3307      	adds	r3, #7
 80050ba:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f023 0307 	bic.w	r3, r3, #7
 80050c2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80050c4:	68ba      	ldr	r2, [r7, #8]
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	1ad3      	subs	r3, r2, r3
 80050ca:	4a1f      	ldr	r2, [pc, #124]	; (8005148 <prvHeapInit+0xac>)
 80050cc:	4413      	add	r3, r2
 80050ce:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80050d4:	4a1d      	ldr	r2, [pc, #116]	; (800514c <prvHeapInit+0xb0>)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80050da:	4b1c      	ldr	r3, [pc, #112]	; (800514c <prvHeapInit+0xb0>)
 80050dc:	2200      	movs	r2, #0
 80050de:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	68ba      	ldr	r2, [r7, #8]
 80050e4:	4413      	add	r3, r2
 80050e6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80050e8:	2208      	movs	r2, #8
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	1a9b      	subs	r3, r3, r2
 80050ee:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f023 0307 	bic.w	r3, r3, #7
 80050f6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	4a15      	ldr	r2, [pc, #84]	; (8005150 <prvHeapInit+0xb4>)
 80050fc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80050fe:	4b14      	ldr	r3, [pc, #80]	; (8005150 <prvHeapInit+0xb4>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	2200      	movs	r2, #0
 8005104:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005106:	4b12      	ldr	r3, [pc, #72]	; (8005150 <prvHeapInit+0xb4>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	2200      	movs	r2, #0
 800510c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	68fa      	ldr	r2, [r7, #12]
 8005116:	1ad2      	subs	r2, r2, r3
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800511c:	4b0c      	ldr	r3, [pc, #48]	; (8005150 <prvHeapInit+0xb4>)
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	4a0a      	ldr	r2, [pc, #40]	; (8005154 <prvHeapInit+0xb8>)
 800512a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	4a09      	ldr	r2, [pc, #36]	; (8005158 <prvHeapInit+0xbc>)
 8005132:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005134:	4b09      	ldr	r3, [pc, #36]	; (800515c <prvHeapInit+0xc0>)
 8005136:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800513a:	601a      	str	r2, [r3, #0]
}
 800513c:	bf00      	nop
 800513e:	3714      	adds	r7, #20
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr
 8005148:	20000900 	.word	0x20000900
 800514c:	20004500 	.word	0x20004500
 8005150:	20004508 	.word	0x20004508
 8005154:	20004510 	.word	0x20004510
 8005158:	2000450c 	.word	0x2000450c
 800515c:	2000451c 	.word	0x2000451c

08005160 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005160:	b480      	push	{r7}
 8005162:	b085      	sub	sp, #20
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005168:	4b28      	ldr	r3, [pc, #160]	; (800520c <prvInsertBlockIntoFreeList+0xac>)
 800516a:	60fb      	str	r3, [r7, #12]
 800516c:	e002      	b.n	8005174 <prvInsertBlockIntoFreeList+0x14>
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	60fb      	str	r3, [r7, #12]
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	687a      	ldr	r2, [r7, #4]
 800517a:	429a      	cmp	r2, r3
 800517c:	d8f7      	bhi.n	800516e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	68ba      	ldr	r2, [r7, #8]
 8005188:	4413      	add	r3, r2
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	429a      	cmp	r2, r3
 800518e:	d108      	bne.n	80051a2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	685a      	ldr	r2, [r3, #4]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	441a      	add	r2, r3
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	68ba      	ldr	r2, [r7, #8]
 80051ac:	441a      	add	r2, r3
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	429a      	cmp	r2, r3
 80051b4:	d118      	bne.n	80051e8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	4b15      	ldr	r3, [pc, #84]	; (8005210 <prvInsertBlockIntoFreeList+0xb0>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	429a      	cmp	r2, r3
 80051c0:	d00d      	beq.n	80051de <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	685a      	ldr	r2, [r3, #4]
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	441a      	add	r2, r3
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	601a      	str	r2, [r3, #0]
 80051dc:	e008      	b.n	80051f0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80051de:	4b0c      	ldr	r3, [pc, #48]	; (8005210 <prvInsertBlockIntoFreeList+0xb0>)
 80051e0:	681a      	ldr	r2, [r3, #0]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	601a      	str	r2, [r3, #0]
 80051e6:	e003      	b.n	80051f0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80051f0:	68fa      	ldr	r2, [r7, #12]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d002      	beq.n	80051fe <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	687a      	ldr	r2, [r7, #4]
 80051fc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80051fe:	bf00      	nop
 8005200:	3714      	adds	r7, #20
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr
 800520a:	bf00      	nop
 800520c:	20004500 	.word	0x20004500
 8005210:	20004508 	.word	0x20004508

08005214 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005214:	b480      	push	{r7}
 8005216:	b083      	sub	sp, #12
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f103 0208 	add.w	r2, r3, #8
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f04f 32ff 	mov.w	r2, #4294967295
 800522c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f103 0208 	add.w	r2, r3, #8
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f103 0208 	add.w	r2, r3, #8
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2200      	movs	r2, #0
 8005246:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005248:	bf00      	nop
 800524a:	370c      	adds	r7, #12
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr

08005254 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005254:	b480      	push	{r7}
 8005256:	b083      	sub	sp, #12
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2200      	movs	r2, #0
 8005260:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005262:	bf00      	nop
 8005264:	370c      	adds	r7, #12
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr

0800526e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800526e:	b480      	push	{r7}
 8005270:	b085      	sub	sp, #20
 8005272:	af00      	add	r7, sp, #0
 8005274:	6078      	str	r0, [r7, #4]
 8005276:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	68fa      	ldr	r2, [r7, #12]
 8005282:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	689a      	ldr	r2, [r3, #8]
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	683a      	ldr	r2, [r7, #0]
 8005292:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	683a      	ldr	r2, [r7, #0]
 8005298:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	687a      	ldr	r2, [r7, #4]
 800529e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	1c5a      	adds	r2, r3, #1
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	601a      	str	r2, [r3, #0]
}
 80052aa:	bf00      	nop
 80052ac:	3714      	adds	r7, #20
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr

080052b6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80052b6:	b480      	push	{r7}
 80052b8:	b085      	sub	sp, #20
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	6078      	str	r0, [r7, #4]
 80052be:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052cc:	d103      	bne.n	80052d6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	691b      	ldr	r3, [r3, #16]
 80052d2:	60fb      	str	r3, [r7, #12]
 80052d4:	e00c      	b.n	80052f0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	3308      	adds	r3, #8
 80052da:	60fb      	str	r3, [r7, #12]
 80052dc:	e002      	b.n	80052e4 <vListInsert+0x2e>
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	60fb      	str	r3, [r7, #12]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	68ba      	ldr	r2, [r7, #8]
 80052ec:	429a      	cmp	r2, r3
 80052ee:	d2f6      	bcs.n	80052de <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	685a      	ldr	r2, [r3, #4]
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	683a      	ldr	r2, [r7, #0]
 80052fe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	68fa      	ldr	r2, [r7, #12]
 8005304:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	683a      	ldr	r2, [r7, #0]
 800530a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	1c5a      	adds	r2, r3, #1
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	601a      	str	r2, [r3, #0]
}
 800531c:	bf00      	nop
 800531e:	3714      	adds	r7, #20
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr

08005328 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005328:	b480      	push	{r7}
 800532a:	b085      	sub	sp, #20
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	691b      	ldr	r3, [r3, #16]
 8005334:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	687a      	ldr	r2, [r7, #4]
 800533c:	6892      	ldr	r2, [r2, #8]
 800533e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	687a      	ldr	r2, [r7, #4]
 8005346:	6852      	ldr	r2, [r2, #4]
 8005348:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	429a      	cmp	r2, r3
 8005352:	d103      	bne.n	800535c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	689a      	ldr	r2, [r3, #8]
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	1e5a      	subs	r2, r3, #1
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
}
 8005370:	4618      	mov	r0, r3
 8005372:	3714      	adds	r7, #20
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr

0800537c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800537c:	b480      	push	{r7}
 800537e:	b085      	sub	sp, #20
 8005380:	af00      	add	r7, sp, #0
 8005382:	60f8      	str	r0, [r7, #12]
 8005384:	60b9      	str	r1, [r7, #8]
 8005386:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	3b04      	subs	r3, #4
 800538c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005394:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	3b04      	subs	r3, #4
 800539a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	f023 0201 	bic.w	r2, r3, #1
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	3b04      	subs	r3, #4
 80053aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80053ac:	4a0c      	ldr	r2, [pc, #48]	; (80053e0 <pxPortInitialiseStack+0x64>)
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	3b14      	subs	r3, #20
 80053b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	3b04      	subs	r3, #4
 80053c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f06f 0202 	mvn.w	r2, #2
 80053ca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	3b20      	subs	r3, #32
 80053d0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80053d2:	68fb      	ldr	r3, [r7, #12]
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3714      	adds	r7, #20
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr
 80053e0:	080053e5 	.word	0x080053e5

080053e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80053e4:	b480      	push	{r7}
 80053e6:	b085      	sub	sp, #20
 80053e8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80053ea:	2300      	movs	r3, #0
 80053ec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80053ee:	4b12      	ldr	r3, [pc, #72]	; (8005438 <prvTaskExitError+0x54>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053f6:	d00a      	beq.n	800540e <prvTaskExitError+0x2a>
	__asm volatile
 80053f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053fc:	f383 8811 	msr	BASEPRI, r3
 8005400:	f3bf 8f6f 	isb	sy
 8005404:	f3bf 8f4f 	dsb	sy
 8005408:	60fb      	str	r3, [r7, #12]
}
 800540a:	bf00      	nop
 800540c:	e7fe      	b.n	800540c <prvTaskExitError+0x28>
	__asm volatile
 800540e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005412:	f383 8811 	msr	BASEPRI, r3
 8005416:	f3bf 8f6f 	isb	sy
 800541a:	f3bf 8f4f 	dsb	sy
 800541e:	60bb      	str	r3, [r7, #8]
}
 8005420:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005422:	bf00      	nop
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d0fc      	beq.n	8005424 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800542a:	bf00      	nop
 800542c:	bf00      	nop
 800542e:	3714      	adds	r7, #20
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr
 8005438:	20000010 	.word	0x20000010
 800543c:	00000000 	.word	0x00000000

08005440 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005440:	4b07      	ldr	r3, [pc, #28]	; (8005460 <pxCurrentTCBConst2>)
 8005442:	6819      	ldr	r1, [r3, #0]
 8005444:	6808      	ldr	r0, [r1, #0]
 8005446:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800544a:	f380 8809 	msr	PSP, r0
 800544e:	f3bf 8f6f 	isb	sy
 8005452:	f04f 0000 	mov.w	r0, #0
 8005456:	f380 8811 	msr	BASEPRI, r0
 800545a:	4770      	bx	lr
 800545c:	f3af 8000 	nop.w

08005460 <pxCurrentTCBConst2>:
 8005460:	20004568 	.word	0x20004568
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005464:	bf00      	nop
 8005466:	bf00      	nop

08005468 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005468:	4808      	ldr	r0, [pc, #32]	; (800548c <prvPortStartFirstTask+0x24>)
 800546a:	6800      	ldr	r0, [r0, #0]
 800546c:	6800      	ldr	r0, [r0, #0]
 800546e:	f380 8808 	msr	MSP, r0
 8005472:	f04f 0000 	mov.w	r0, #0
 8005476:	f380 8814 	msr	CONTROL, r0
 800547a:	b662      	cpsie	i
 800547c:	b661      	cpsie	f
 800547e:	f3bf 8f4f 	dsb	sy
 8005482:	f3bf 8f6f 	isb	sy
 8005486:	df00      	svc	0
 8005488:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800548a:	bf00      	nop
 800548c:	e000ed08 	.word	0xe000ed08

08005490 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b086      	sub	sp, #24
 8005494:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005496:	4b46      	ldr	r3, [pc, #280]	; (80055b0 <xPortStartScheduler+0x120>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a46      	ldr	r2, [pc, #280]	; (80055b4 <xPortStartScheduler+0x124>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d10a      	bne.n	80054b6 <xPortStartScheduler+0x26>
	__asm volatile
 80054a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a4:	f383 8811 	msr	BASEPRI, r3
 80054a8:	f3bf 8f6f 	isb	sy
 80054ac:	f3bf 8f4f 	dsb	sy
 80054b0:	613b      	str	r3, [r7, #16]
}
 80054b2:	bf00      	nop
 80054b4:	e7fe      	b.n	80054b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80054b6:	4b3e      	ldr	r3, [pc, #248]	; (80055b0 <xPortStartScheduler+0x120>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a3f      	ldr	r2, [pc, #252]	; (80055b8 <xPortStartScheduler+0x128>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d10a      	bne.n	80054d6 <xPortStartScheduler+0x46>
	__asm volatile
 80054c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c4:	f383 8811 	msr	BASEPRI, r3
 80054c8:	f3bf 8f6f 	isb	sy
 80054cc:	f3bf 8f4f 	dsb	sy
 80054d0:	60fb      	str	r3, [r7, #12]
}
 80054d2:	bf00      	nop
 80054d4:	e7fe      	b.n	80054d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80054d6:	4b39      	ldr	r3, [pc, #228]	; (80055bc <xPortStartScheduler+0x12c>)
 80054d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	781b      	ldrb	r3, [r3, #0]
 80054de:	b2db      	uxtb	r3, r3
 80054e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	22ff      	movs	r2, #255	; 0xff
 80054e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	781b      	ldrb	r3, [r3, #0]
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80054f0:	78fb      	ldrb	r3, [r7, #3]
 80054f2:	b2db      	uxtb	r3, r3
 80054f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80054f8:	b2da      	uxtb	r2, r3
 80054fa:	4b31      	ldr	r3, [pc, #196]	; (80055c0 <xPortStartScheduler+0x130>)
 80054fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80054fe:	4b31      	ldr	r3, [pc, #196]	; (80055c4 <xPortStartScheduler+0x134>)
 8005500:	2207      	movs	r2, #7
 8005502:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005504:	e009      	b.n	800551a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005506:	4b2f      	ldr	r3, [pc, #188]	; (80055c4 <xPortStartScheduler+0x134>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	3b01      	subs	r3, #1
 800550c:	4a2d      	ldr	r2, [pc, #180]	; (80055c4 <xPortStartScheduler+0x134>)
 800550e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005510:	78fb      	ldrb	r3, [r7, #3]
 8005512:	b2db      	uxtb	r3, r3
 8005514:	005b      	lsls	r3, r3, #1
 8005516:	b2db      	uxtb	r3, r3
 8005518:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800551a:	78fb      	ldrb	r3, [r7, #3]
 800551c:	b2db      	uxtb	r3, r3
 800551e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005522:	2b80      	cmp	r3, #128	; 0x80
 8005524:	d0ef      	beq.n	8005506 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005526:	4b27      	ldr	r3, [pc, #156]	; (80055c4 <xPortStartScheduler+0x134>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f1c3 0307 	rsb	r3, r3, #7
 800552e:	2b04      	cmp	r3, #4
 8005530:	d00a      	beq.n	8005548 <xPortStartScheduler+0xb8>
	__asm volatile
 8005532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005536:	f383 8811 	msr	BASEPRI, r3
 800553a:	f3bf 8f6f 	isb	sy
 800553e:	f3bf 8f4f 	dsb	sy
 8005542:	60bb      	str	r3, [r7, #8]
}
 8005544:	bf00      	nop
 8005546:	e7fe      	b.n	8005546 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005548:	4b1e      	ldr	r3, [pc, #120]	; (80055c4 <xPortStartScheduler+0x134>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	021b      	lsls	r3, r3, #8
 800554e:	4a1d      	ldr	r2, [pc, #116]	; (80055c4 <xPortStartScheduler+0x134>)
 8005550:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005552:	4b1c      	ldr	r3, [pc, #112]	; (80055c4 <xPortStartScheduler+0x134>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800555a:	4a1a      	ldr	r2, [pc, #104]	; (80055c4 <xPortStartScheduler+0x134>)
 800555c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	b2da      	uxtb	r2, r3
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005566:	4b18      	ldr	r3, [pc, #96]	; (80055c8 <xPortStartScheduler+0x138>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a17      	ldr	r2, [pc, #92]	; (80055c8 <xPortStartScheduler+0x138>)
 800556c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005570:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005572:	4b15      	ldr	r3, [pc, #84]	; (80055c8 <xPortStartScheduler+0x138>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a14      	ldr	r2, [pc, #80]	; (80055c8 <xPortStartScheduler+0x138>)
 8005578:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800557c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800557e:	f000 f8dd 	bl	800573c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005582:	4b12      	ldr	r3, [pc, #72]	; (80055cc <xPortStartScheduler+0x13c>)
 8005584:	2200      	movs	r2, #0
 8005586:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005588:	f000 f8fc 	bl	8005784 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800558c:	4b10      	ldr	r3, [pc, #64]	; (80055d0 <xPortStartScheduler+0x140>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a0f      	ldr	r2, [pc, #60]	; (80055d0 <xPortStartScheduler+0x140>)
 8005592:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005596:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005598:	f7ff ff66 	bl	8005468 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800559c:	f001 f9da 	bl	8006954 <vTaskSwitchContext>
	prvTaskExitError();
 80055a0:	f7ff ff20 	bl	80053e4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80055a4:	2300      	movs	r3, #0
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3718      	adds	r7, #24
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	bf00      	nop
 80055b0:	e000ed00 	.word	0xe000ed00
 80055b4:	410fc271 	.word	0x410fc271
 80055b8:	410fc270 	.word	0x410fc270
 80055bc:	e000e400 	.word	0xe000e400
 80055c0:	20004520 	.word	0x20004520
 80055c4:	20004524 	.word	0x20004524
 80055c8:	e000ed20 	.word	0xe000ed20
 80055cc:	20000010 	.word	0x20000010
 80055d0:	e000ef34 	.word	0xe000ef34

080055d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80055d4:	b480      	push	{r7}
 80055d6:	b083      	sub	sp, #12
 80055d8:	af00      	add	r7, sp, #0
	__asm volatile
 80055da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055de:	f383 8811 	msr	BASEPRI, r3
 80055e2:	f3bf 8f6f 	isb	sy
 80055e6:	f3bf 8f4f 	dsb	sy
 80055ea:	607b      	str	r3, [r7, #4]
}
 80055ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80055ee:	4b0f      	ldr	r3, [pc, #60]	; (800562c <vPortEnterCritical+0x58>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	3301      	adds	r3, #1
 80055f4:	4a0d      	ldr	r2, [pc, #52]	; (800562c <vPortEnterCritical+0x58>)
 80055f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80055f8:	4b0c      	ldr	r3, [pc, #48]	; (800562c <vPortEnterCritical+0x58>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	d10f      	bne.n	8005620 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005600:	4b0b      	ldr	r3, [pc, #44]	; (8005630 <vPortEnterCritical+0x5c>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	b2db      	uxtb	r3, r3
 8005606:	2b00      	cmp	r3, #0
 8005608:	d00a      	beq.n	8005620 <vPortEnterCritical+0x4c>
	__asm volatile
 800560a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800560e:	f383 8811 	msr	BASEPRI, r3
 8005612:	f3bf 8f6f 	isb	sy
 8005616:	f3bf 8f4f 	dsb	sy
 800561a:	603b      	str	r3, [r7, #0]
}
 800561c:	bf00      	nop
 800561e:	e7fe      	b.n	800561e <vPortEnterCritical+0x4a>
	}
}
 8005620:	bf00      	nop
 8005622:	370c      	adds	r7, #12
 8005624:	46bd      	mov	sp, r7
 8005626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562a:	4770      	bx	lr
 800562c:	20000010 	.word	0x20000010
 8005630:	e000ed04 	.word	0xe000ed04

08005634 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005634:	b480      	push	{r7}
 8005636:	b083      	sub	sp, #12
 8005638:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800563a:	4b12      	ldr	r3, [pc, #72]	; (8005684 <vPortExitCritical+0x50>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d10a      	bne.n	8005658 <vPortExitCritical+0x24>
	__asm volatile
 8005642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005646:	f383 8811 	msr	BASEPRI, r3
 800564a:	f3bf 8f6f 	isb	sy
 800564e:	f3bf 8f4f 	dsb	sy
 8005652:	607b      	str	r3, [r7, #4]
}
 8005654:	bf00      	nop
 8005656:	e7fe      	b.n	8005656 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005658:	4b0a      	ldr	r3, [pc, #40]	; (8005684 <vPortExitCritical+0x50>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	3b01      	subs	r3, #1
 800565e:	4a09      	ldr	r2, [pc, #36]	; (8005684 <vPortExitCritical+0x50>)
 8005660:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005662:	4b08      	ldr	r3, [pc, #32]	; (8005684 <vPortExitCritical+0x50>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d105      	bne.n	8005676 <vPortExitCritical+0x42>
 800566a:	2300      	movs	r3, #0
 800566c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005674:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005676:	bf00      	nop
 8005678:	370c      	adds	r7, #12
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr
 8005682:	bf00      	nop
 8005684:	20000010 	.word	0x20000010
	...

08005690 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005690:	f3ef 8009 	mrs	r0, PSP
 8005694:	f3bf 8f6f 	isb	sy
 8005698:	4b15      	ldr	r3, [pc, #84]	; (80056f0 <pxCurrentTCBConst>)
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	f01e 0f10 	tst.w	lr, #16
 80056a0:	bf08      	it	eq
 80056a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80056a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056aa:	6010      	str	r0, [r2, #0]
 80056ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80056b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80056b4:	f380 8811 	msr	BASEPRI, r0
 80056b8:	f3bf 8f4f 	dsb	sy
 80056bc:	f3bf 8f6f 	isb	sy
 80056c0:	f001 f948 	bl	8006954 <vTaskSwitchContext>
 80056c4:	f04f 0000 	mov.w	r0, #0
 80056c8:	f380 8811 	msr	BASEPRI, r0
 80056cc:	bc09      	pop	{r0, r3}
 80056ce:	6819      	ldr	r1, [r3, #0]
 80056d0:	6808      	ldr	r0, [r1, #0]
 80056d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056d6:	f01e 0f10 	tst.w	lr, #16
 80056da:	bf08      	it	eq
 80056dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80056e0:	f380 8809 	msr	PSP, r0
 80056e4:	f3bf 8f6f 	isb	sy
 80056e8:	4770      	bx	lr
 80056ea:	bf00      	nop
 80056ec:	f3af 8000 	nop.w

080056f0 <pxCurrentTCBConst>:
 80056f0:	20004568 	.word	0x20004568
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80056f4:	bf00      	nop
 80056f6:	bf00      	nop

080056f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b082      	sub	sp, #8
 80056fc:	af00      	add	r7, sp, #0
	__asm volatile
 80056fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005702:	f383 8811 	msr	BASEPRI, r3
 8005706:	f3bf 8f6f 	isb	sy
 800570a:	f3bf 8f4f 	dsb	sy
 800570e:	607b      	str	r3, [r7, #4]
}
 8005710:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005712:	f001 f865 	bl	80067e0 <xTaskIncrementTick>
 8005716:	4603      	mov	r3, r0
 8005718:	2b00      	cmp	r3, #0
 800571a:	d003      	beq.n	8005724 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800571c:	4b06      	ldr	r3, [pc, #24]	; (8005738 <xPortSysTickHandler+0x40>)
 800571e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005722:	601a      	str	r2, [r3, #0]
 8005724:	2300      	movs	r3, #0
 8005726:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	f383 8811 	msr	BASEPRI, r3
}
 800572e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005730:	bf00      	nop
 8005732:	3708      	adds	r7, #8
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}
 8005738:	e000ed04 	.word	0xe000ed04

0800573c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800573c:	b480      	push	{r7}
 800573e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005740:	4b0b      	ldr	r3, [pc, #44]	; (8005770 <vPortSetupTimerInterrupt+0x34>)
 8005742:	2200      	movs	r2, #0
 8005744:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005746:	4b0b      	ldr	r3, [pc, #44]	; (8005774 <vPortSetupTimerInterrupt+0x38>)
 8005748:	2200      	movs	r2, #0
 800574a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800574c:	4b0a      	ldr	r3, [pc, #40]	; (8005778 <vPortSetupTimerInterrupt+0x3c>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a0a      	ldr	r2, [pc, #40]	; (800577c <vPortSetupTimerInterrupt+0x40>)
 8005752:	fba2 2303 	umull	r2, r3, r2, r3
 8005756:	099b      	lsrs	r3, r3, #6
 8005758:	4a09      	ldr	r2, [pc, #36]	; (8005780 <vPortSetupTimerInterrupt+0x44>)
 800575a:	3b01      	subs	r3, #1
 800575c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800575e:	4b04      	ldr	r3, [pc, #16]	; (8005770 <vPortSetupTimerInterrupt+0x34>)
 8005760:	2207      	movs	r2, #7
 8005762:	601a      	str	r2, [r3, #0]
}
 8005764:	bf00      	nop
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr
 800576e:	bf00      	nop
 8005770:	e000e010 	.word	0xe000e010
 8005774:	e000e018 	.word	0xe000e018
 8005778:	20000004 	.word	0x20000004
 800577c:	10624dd3 	.word	0x10624dd3
 8005780:	e000e014 	.word	0xe000e014

08005784 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005784:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005794 <vPortEnableVFP+0x10>
 8005788:	6801      	ldr	r1, [r0, #0]
 800578a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800578e:	6001      	str	r1, [r0, #0]
 8005790:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005792:	bf00      	nop
 8005794:	e000ed88 	.word	0xe000ed88

08005798 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005798:	b480      	push	{r7}
 800579a:	b085      	sub	sp, #20
 800579c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800579e:	f3ef 8305 	mrs	r3, IPSR
 80057a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2b0f      	cmp	r3, #15
 80057a8:	d914      	bls.n	80057d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80057aa:	4a17      	ldr	r2, [pc, #92]	; (8005808 <vPortValidateInterruptPriority+0x70>)
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	4413      	add	r3, r2
 80057b0:	781b      	ldrb	r3, [r3, #0]
 80057b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80057b4:	4b15      	ldr	r3, [pc, #84]	; (800580c <vPortValidateInterruptPriority+0x74>)
 80057b6:	781b      	ldrb	r3, [r3, #0]
 80057b8:	7afa      	ldrb	r2, [r7, #11]
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d20a      	bcs.n	80057d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80057be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057c2:	f383 8811 	msr	BASEPRI, r3
 80057c6:	f3bf 8f6f 	isb	sy
 80057ca:	f3bf 8f4f 	dsb	sy
 80057ce:	607b      	str	r3, [r7, #4]
}
 80057d0:	bf00      	nop
 80057d2:	e7fe      	b.n	80057d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80057d4:	4b0e      	ldr	r3, [pc, #56]	; (8005810 <vPortValidateInterruptPriority+0x78>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80057dc:	4b0d      	ldr	r3, [pc, #52]	; (8005814 <vPortValidateInterruptPriority+0x7c>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d90a      	bls.n	80057fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80057e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e8:	f383 8811 	msr	BASEPRI, r3
 80057ec:	f3bf 8f6f 	isb	sy
 80057f0:	f3bf 8f4f 	dsb	sy
 80057f4:	603b      	str	r3, [r7, #0]
}
 80057f6:	bf00      	nop
 80057f8:	e7fe      	b.n	80057f8 <vPortValidateInterruptPriority+0x60>
	}
 80057fa:	bf00      	nop
 80057fc:	3714      	adds	r7, #20
 80057fe:	46bd      	mov	sp, r7
 8005800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005804:	4770      	bx	lr
 8005806:	bf00      	nop
 8005808:	e000e3f0 	.word	0xe000e3f0
 800580c:	20004520 	.word	0x20004520
 8005810:	e000ed0c 	.word	0xe000ed0c
 8005814:	20004524 	.word	0x20004524

08005818 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b084      	sub	sp, #16
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
 8005820:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d10a      	bne.n	8005842 <xQueueGenericReset+0x2a>
	__asm volatile
 800582c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005830:	f383 8811 	msr	BASEPRI, r3
 8005834:	f3bf 8f6f 	isb	sy
 8005838:	f3bf 8f4f 	dsb	sy
 800583c:	60bb      	str	r3, [r7, #8]
}
 800583e:	bf00      	nop
 8005840:	e7fe      	b.n	8005840 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005842:	f7ff fec7 	bl	80055d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800584e:	68f9      	ldr	r1, [r7, #12]
 8005850:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005852:	fb01 f303 	mul.w	r3, r1, r3
 8005856:	441a      	add	r2, r3
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2200      	movs	r2, #0
 8005860:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681a      	ldr	r2, [r3, #0]
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005872:	3b01      	subs	r3, #1
 8005874:	68f9      	ldr	r1, [r7, #12]
 8005876:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005878:	fb01 f303 	mul.w	r3, r1, r3
 800587c:	441a      	add	r2, r3
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	22ff      	movs	r2, #255	; 0xff
 8005886:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	22ff      	movs	r2, #255	; 0xff
 800588e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d114      	bne.n	80058c2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	691b      	ldr	r3, [r3, #16]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d01a      	beq.n	80058d6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	3310      	adds	r3, #16
 80058a4:	4618      	mov	r0, r3
 80058a6:	f001 f903 	bl	8006ab0 <xTaskRemoveFromEventList>
 80058aa:	4603      	mov	r3, r0
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d012      	beq.n	80058d6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80058b0:	4b0c      	ldr	r3, [pc, #48]	; (80058e4 <xQueueGenericReset+0xcc>)
 80058b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058b6:	601a      	str	r2, [r3, #0]
 80058b8:	f3bf 8f4f 	dsb	sy
 80058bc:	f3bf 8f6f 	isb	sy
 80058c0:	e009      	b.n	80058d6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	3310      	adds	r3, #16
 80058c6:	4618      	mov	r0, r3
 80058c8:	f7ff fca4 	bl	8005214 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	3324      	adds	r3, #36	; 0x24
 80058d0:	4618      	mov	r0, r3
 80058d2:	f7ff fc9f 	bl	8005214 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80058d6:	f7ff fead 	bl	8005634 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80058da:	2301      	movs	r3, #1
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3710      	adds	r7, #16
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}
 80058e4:	e000ed04 	.word	0xe000ed04

080058e8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b08e      	sub	sp, #56	; 0x38
 80058ec:	af02      	add	r7, sp, #8
 80058ee:	60f8      	str	r0, [r7, #12]
 80058f0:	60b9      	str	r1, [r7, #8]
 80058f2:	607a      	str	r2, [r7, #4]
 80058f4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d10a      	bne.n	8005912 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80058fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005900:	f383 8811 	msr	BASEPRI, r3
 8005904:	f3bf 8f6f 	isb	sy
 8005908:	f3bf 8f4f 	dsb	sy
 800590c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800590e:	bf00      	nop
 8005910:	e7fe      	b.n	8005910 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d10a      	bne.n	800592e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800591c:	f383 8811 	msr	BASEPRI, r3
 8005920:	f3bf 8f6f 	isb	sy
 8005924:	f3bf 8f4f 	dsb	sy
 8005928:	627b      	str	r3, [r7, #36]	; 0x24
}
 800592a:	bf00      	nop
 800592c:	e7fe      	b.n	800592c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d002      	beq.n	800593a <xQueueGenericCreateStatic+0x52>
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d001      	beq.n	800593e <xQueueGenericCreateStatic+0x56>
 800593a:	2301      	movs	r3, #1
 800593c:	e000      	b.n	8005940 <xQueueGenericCreateStatic+0x58>
 800593e:	2300      	movs	r3, #0
 8005940:	2b00      	cmp	r3, #0
 8005942:	d10a      	bne.n	800595a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005948:	f383 8811 	msr	BASEPRI, r3
 800594c:	f3bf 8f6f 	isb	sy
 8005950:	f3bf 8f4f 	dsb	sy
 8005954:	623b      	str	r3, [r7, #32]
}
 8005956:	bf00      	nop
 8005958:	e7fe      	b.n	8005958 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d102      	bne.n	8005966 <xQueueGenericCreateStatic+0x7e>
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d101      	bne.n	800596a <xQueueGenericCreateStatic+0x82>
 8005966:	2301      	movs	r3, #1
 8005968:	e000      	b.n	800596c <xQueueGenericCreateStatic+0x84>
 800596a:	2300      	movs	r3, #0
 800596c:	2b00      	cmp	r3, #0
 800596e:	d10a      	bne.n	8005986 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005974:	f383 8811 	msr	BASEPRI, r3
 8005978:	f3bf 8f6f 	isb	sy
 800597c:	f3bf 8f4f 	dsb	sy
 8005980:	61fb      	str	r3, [r7, #28]
}
 8005982:	bf00      	nop
 8005984:	e7fe      	b.n	8005984 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005986:	2350      	movs	r3, #80	; 0x50
 8005988:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	2b50      	cmp	r3, #80	; 0x50
 800598e:	d00a      	beq.n	80059a6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005994:	f383 8811 	msr	BASEPRI, r3
 8005998:	f3bf 8f6f 	isb	sy
 800599c:	f3bf 8f4f 	dsb	sy
 80059a0:	61bb      	str	r3, [r7, #24]
}
 80059a2:	bf00      	nop
 80059a4:	e7fe      	b.n	80059a4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80059a6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80059ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d00d      	beq.n	80059ce <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80059b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059b4:	2201      	movs	r2, #1
 80059b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80059ba:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80059be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059c0:	9300      	str	r3, [sp, #0]
 80059c2:	4613      	mov	r3, r2
 80059c4:	687a      	ldr	r2, [r7, #4]
 80059c6:	68b9      	ldr	r1, [r7, #8]
 80059c8:	68f8      	ldr	r0, [r7, #12]
 80059ca:	f000 f805 	bl	80059d8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80059ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3730      	adds	r7, #48	; 0x30
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}

080059d8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b084      	sub	sp, #16
 80059dc:	af00      	add	r7, sp, #0
 80059de:	60f8      	str	r0, [r7, #12]
 80059e0:	60b9      	str	r1, [r7, #8]
 80059e2:	607a      	str	r2, [r7, #4]
 80059e4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d103      	bne.n	80059f4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80059ec:	69bb      	ldr	r3, [r7, #24]
 80059ee:	69ba      	ldr	r2, [r7, #24]
 80059f0:	601a      	str	r2, [r3, #0]
 80059f2:	e002      	b.n	80059fa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80059f4:	69bb      	ldr	r3, [r7, #24]
 80059f6:	687a      	ldr	r2, [r7, #4]
 80059f8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80059fa:	69bb      	ldr	r3, [r7, #24]
 80059fc:	68fa      	ldr	r2, [r7, #12]
 80059fe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005a00:	69bb      	ldr	r3, [r7, #24]
 8005a02:	68ba      	ldr	r2, [r7, #8]
 8005a04:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005a06:	2101      	movs	r1, #1
 8005a08:	69b8      	ldr	r0, [r7, #24]
 8005a0a:	f7ff ff05 	bl	8005818 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005a0e:	69bb      	ldr	r3, [r7, #24]
 8005a10:	78fa      	ldrb	r2, [r7, #3]
 8005a12:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005a16:	bf00      	nop
 8005a18:	3710      	adds	r7, #16
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}
	...

08005a20 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b08e      	sub	sp, #56	; 0x38
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	60f8      	str	r0, [r7, #12]
 8005a28:	60b9      	str	r1, [r7, #8]
 8005a2a:	607a      	str	r2, [r7, #4]
 8005a2c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d10a      	bne.n	8005a52 <xQueueGenericSend+0x32>
	__asm volatile
 8005a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a40:	f383 8811 	msr	BASEPRI, r3
 8005a44:	f3bf 8f6f 	isb	sy
 8005a48:	f3bf 8f4f 	dsb	sy
 8005a4c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005a4e:	bf00      	nop
 8005a50:	e7fe      	b.n	8005a50 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d103      	bne.n	8005a60 <xQueueGenericSend+0x40>
 8005a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d101      	bne.n	8005a64 <xQueueGenericSend+0x44>
 8005a60:	2301      	movs	r3, #1
 8005a62:	e000      	b.n	8005a66 <xQueueGenericSend+0x46>
 8005a64:	2300      	movs	r3, #0
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d10a      	bne.n	8005a80 <xQueueGenericSend+0x60>
	__asm volatile
 8005a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a6e:	f383 8811 	msr	BASEPRI, r3
 8005a72:	f3bf 8f6f 	isb	sy
 8005a76:	f3bf 8f4f 	dsb	sy
 8005a7a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005a7c:	bf00      	nop
 8005a7e:	e7fe      	b.n	8005a7e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	2b02      	cmp	r3, #2
 8005a84:	d103      	bne.n	8005a8e <xQueueGenericSend+0x6e>
 8005a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a8a:	2b01      	cmp	r3, #1
 8005a8c:	d101      	bne.n	8005a92 <xQueueGenericSend+0x72>
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e000      	b.n	8005a94 <xQueueGenericSend+0x74>
 8005a92:	2300      	movs	r3, #0
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d10a      	bne.n	8005aae <xQueueGenericSend+0x8e>
	__asm volatile
 8005a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a9c:	f383 8811 	msr	BASEPRI, r3
 8005aa0:	f3bf 8f6f 	isb	sy
 8005aa4:	f3bf 8f4f 	dsb	sy
 8005aa8:	623b      	str	r3, [r7, #32]
}
 8005aaa:	bf00      	nop
 8005aac:	e7fe      	b.n	8005aac <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005aae:	f001 f9bd 	bl	8006e2c <xTaskGetSchedulerState>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d102      	bne.n	8005abe <xQueueGenericSend+0x9e>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d101      	bne.n	8005ac2 <xQueueGenericSend+0xa2>
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e000      	b.n	8005ac4 <xQueueGenericSend+0xa4>
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d10a      	bne.n	8005ade <xQueueGenericSend+0xbe>
	__asm volatile
 8005ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005acc:	f383 8811 	msr	BASEPRI, r3
 8005ad0:	f3bf 8f6f 	isb	sy
 8005ad4:	f3bf 8f4f 	dsb	sy
 8005ad8:	61fb      	str	r3, [r7, #28]
}
 8005ada:	bf00      	nop
 8005adc:	e7fe      	b.n	8005adc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005ade:	f7ff fd79 	bl	80055d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d302      	bcc.n	8005af4 <xQueueGenericSend+0xd4>
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	2b02      	cmp	r3, #2
 8005af2:	d129      	bne.n	8005b48 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005af4:	683a      	ldr	r2, [r7, #0]
 8005af6:	68b9      	ldr	r1, [r7, #8]
 8005af8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005afa:	f000 fa0b 	bl	8005f14 <prvCopyDataToQueue>
 8005afe:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d010      	beq.n	8005b2a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b0a:	3324      	adds	r3, #36	; 0x24
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f000 ffcf 	bl	8006ab0 <xTaskRemoveFromEventList>
 8005b12:	4603      	mov	r3, r0
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d013      	beq.n	8005b40 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005b18:	4b3f      	ldr	r3, [pc, #252]	; (8005c18 <xQueueGenericSend+0x1f8>)
 8005b1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b1e:	601a      	str	r2, [r3, #0]
 8005b20:	f3bf 8f4f 	dsb	sy
 8005b24:	f3bf 8f6f 	isb	sy
 8005b28:	e00a      	b.n	8005b40 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d007      	beq.n	8005b40 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005b30:	4b39      	ldr	r3, [pc, #228]	; (8005c18 <xQueueGenericSend+0x1f8>)
 8005b32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b36:	601a      	str	r2, [r3, #0]
 8005b38:	f3bf 8f4f 	dsb	sy
 8005b3c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005b40:	f7ff fd78 	bl	8005634 <vPortExitCritical>
				return pdPASS;
 8005b44:	2301      	movs	r3, #1
 8005b46:	e063      	b.n	8005c10 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d103      	bne.n	8005b56 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005b4e:	f7ff fd71 	bl	8005634 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005b52:	2300      	movs	r3, #0
 8005b54:	e05c      	b.n	8005c10 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005b56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d106      	bne.n	8005b6a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005b5c:	f107 0314 	add.w	r3, r7, #20
 8005b60:	4618      	mov	r0, r3
 8005b62:	f001 f809 	bl	8006b78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005b66:	2301      	movs	r3, #1
 8005b68:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005b6a:	f7ff fd63 	bl	8005634 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005b6e:	f000 fd7b 	bl	8006668 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005b72:	f7ff fd2f 	bl	80055d4 <vPortEnterCritical>
 8005b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b78:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b7c:	b25b      	sxtb	r3, r3
 8005b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b82:	d103      	bne.n	8005b8c <xQueueGenericSend+0x16c>
 8005b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b86:	2200      	movs	r2, #0
 8005b88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b92:	b25b      	sxtb	r3, r3
 8005b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b98:	d103      	bne.n	8005ba2 <xQueueGenericSend+0x182>
 8005b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ba2:	f7ff fd47 	bl	8005634 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005ba6:	1d3a      	adds	r2, r7, #4
 8005ba8:	f107 0314 	add.w	r3, r7, #20
 8005bac:	4611      	mov	r1, r2
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f000 fff8 	bl	8006ba4 <xTaskCheckForTimeOut>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d124      	bne.n	8005c04 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005bba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005bbc:	f000 faa2 	bl	8006104 <prvIsQueueFull>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d018      	beq.n	8005bf8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc8:	3310      	adds	r3, #16
 8005bca:	687a      	ldr	r2, [r7, #4]
 8005bcc:	4611      	mov	r1, r2
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f000 ff1e 	bl	8006a10 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005bd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005bd6:	f000 fa2d 	bl	8006034 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005bda:	f000 fd53 	bl	8006684 <xTaskResumeAll>
 8005bde:	4603      	mov	r3, r0
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	f47f af7c 	bne.w	8005ade <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005be6:	4b0c      	ldr	r3, [pc, #48]	; (8005c18 <xQueueGenericSend+0x1f8>)
 8005be8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bec:	601a      	str	r2, [r3, #0]
 8005bee:	f3bf 8f4f 	dsb	sy
 8005bf2:	f3bf 8f6f 	isb	sy
 8005bf6:	e772      	b.n	8005ade <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005bf8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005bfa:	f000 fa1b 	bl	8006034 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005bfe:	f000 fd41 	bl	8006684 <xTaskResumeAll>
 8005c02:	e76c      	b.n	8005ade <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005c04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c06:	f000 fa15 	bl	8006034 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005c0a:	f000 fd3b 	bl	8006684 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005c0e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3738      	adds	r7, #56	; 0x38
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}
 8005c18:	e000ed04 	.word	0xe000ed04

08005c1c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b090      	sub	sp, #64	; 0x40
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	60f8      	str	r0, [r7, #12]
 8005c24:	60b9      	str	r1, [r7, #8]
 8005c26:	607a      	str	r2, [r7, #4]
 8005c28:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d10a      	bne.n	8005c4a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c38:	f383 8811 	msr	BASEPRI, r3
 8005c3c:	f3bf 8f6f 	isb	sy
 8005c40:	f3bf 8f4f 	dsb	sy
 8005c44:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005c46:	bf00      	nop
 8005c48:	e7fe      	b.n	8005c48 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d103      	bne.n	8005c58 <xQueueGenericSendFromISR+0x3c>
 8005c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d101      	bne.n	8005c5c <xQueueGenericSendFromISR+0x40>
 8005c58:	2301      	movs	r3, #1
 8005c5a:	e000      	b.n	8005c5e <xQueueGenericSendFromISR+0x42>
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d10a      	bne.n	8005c78 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c66:	f383 8811 	msr	BASEPRI, r3
 8005c6a:	f3bf 8f6f 	isb	sy
 8005c6e:	f3bf 8f4f 	dsb	sy
 8005c72:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005c74:	bf00      	nop
 8005c76:	e7fe      	b.n	8005c76 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	2b02      	cmp	r3, #2
 8005c7c:	d103      	bne.n	8005c86 <xQueueGenericSendFromISR+0x6a>
 8005c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c82:	2b01      	cmp	r3, #1
 8005c84:	d101      	bne.n	8005c8a <xQueueGenericSendFromISR+0x6e>
 8005c86:	2301      	movs	r3, #1
 8005c88:	e000      	b.n	8005c8c <xQueueGenericSendFromISR+0x70>
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d10a      	bne.n	8005ca6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c94:	f383 8811 	msr	BASEPRI, r3
 8005c98:	f3bf 8f6f 	isb	sy
 8005c9c:	f3bf 8f4f 	dsb	sy
 8005ca0:	623b      	str	r3, [r7, #32]
}
 8005ca2:	bf00      	nop
 8005ca4:	e7fe      	b.n	8005ca4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005ca6:	f7ff fd77 	bl	8005798 <vPortValidateInterruptPriority>
	__asm volatile
 8005caa:	f3ef 8211 	mrs	r2, BASEPRI
 8005cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cb2:	f383 8811 	msr	BASEPRI, r3
 8005cb6:	f3bf 8f6f 	isb	sy
 8005cba:	f3bf 8f4f 	dsb	sy
 8005cbe:	61fa      	str	r2, [r7, #28]
 8005cc0:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8005cc2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005cc4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	d302      	bcc.n	8005cd8 <xQueueGenericSendFromISR+0xbc>
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	2b02      	cmp	r3, #2
 8005cd6:	d12f      	bne.n	8005d38 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cda:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005cde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005ce8:	683a      	ldr	r2, [r7, #0]
 8005cea:	68b9      	ldr	r1, [r7, #8]
 8005cec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005cee:	f000 f911 	bl	8005f14 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005cf2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005cf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cfa:	d112      	bne.n	8005d22 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d016      	beq.n	8005d32 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d06:	3324      	adds	r3, #36	; 0x24
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f000 fed1 	bl	8006ab0 <xTaskRemoveFromEventList>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d00e      	beq.n	8005d32 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d00b      	beq.n	8005d32 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	601a      	str	r2, [r3, #0]
 8005d20:	e007      	b.n	8005d32 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005d22:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005d26:	3301      	adds	r3, #1
 8005d28:	b2db      	uxtb	r3, r3
 8005d2a:	b25a      	sxtb	r2, r3
 8005d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005d32:	2301      	movs	r3, #1
 8005d34:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005d36:	e001      	b.n	8005d3c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d3e:	617b      	str	r3, [r7, #20]
	__asm volatile
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	f383 8811 	msr	BASEPRI, r3
}
 8005d46:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005d48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3740      	adds	r7, #64	; 0x40
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}
	...

08005d54 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b08c      	sub	sp, #48	; 0x30
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	60f8      	str	r0, [r7, #12]
 8005d5c:	60b9      	str	r1, [r7, #8]
 8005d5e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005d60:	2300      	movs	r3, #0
 8005d62:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d10a      	bne.n	8005d84 <xQueueReceive+0x30>
	__asm volatile
 8005d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d72:	f383 8811 	msr	BASEPRI, r3
 8005d76:	f3bf 8f6f 	isb	sy
 8005d7a:	f3bf 8f4f 	dsb	sy
 8005d7e:	623b      	str	r3, [r7, #32]
}
 8005d80:	bf00      	nop
 8005d82:	e7fe      	b.n	8005d82 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d103      	bne.n	8005d92 <xQueueReceive+0x3e>
 8005d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d101      	bne.n	8005d96 <xQueueReceive+0x42>
 8005d92:	2301      	movs	r3, #1
 8005d94:	e000      	b.n	8005d98 <xQueueReceive+0x44>
 8005d96:	2300      	movs	r3, #0
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d10a      	bne.n	8005db2 <xQueueReceive+0x5e>
	__asm volatile
 8005d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da0:	f383 8811 	msr	BASEPRI, r3
 8005da4:	f3bf 8f6f 	isb	sy
 8005da8:	f3bf 8f4f 	dsb	sy
 8005dac:	61fb      	str	r3, [r7, #28]
}
 8005dae:	bf00      	nop
 8005db0:	e7fe      	b.n	8005db0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005db2:	f001 f83b 	bl	8006e2c <xTaskGetSchedulerState>
 8005db6:	4603      	mov	r3, r0
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d102      	bne.n	8005dc2 <xQueueReceive+0x6e>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d101      	bne.n	8005dc6 <xQueueReceive+0x72>
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	e000      	b.n	8005dc8 <xQueueReceive+0x74>
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d10a      	bne.n	8005de2 <xQueueReceive+0x8e>
	__asm volatile
 8005dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd0:	f383 8811 	msr	BASEPRI, r3
 8005dd4:	f3bf 8f6f 	isb	sy
 8005dd8:	f3bf 8f4f 	dsb	sy
 8005ddc:	61bb      	str	r3, [r7, #24]
}
 8005dde:	bf00      	nop
 8005de0:	e7fe      	b.n	8005de0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005de2:	f7ff fbf7 	bl	80055d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dea:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d01f      	beq.n	8005e32 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005df2:	68b9      	ldr	r1, [r7, #8]
 8005df4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005df6:	f000 f8f7 	bl	8005fe8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dfc:	1e5a      	subs	r2, r3, #1
 8005dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e00:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e04:	691b      	ldr	r3, [r3, #16]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d00f      	beq.n	8005e2a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e0c:	3310      	adds	r3, #16
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f000 fe4e 	bl	8006ab0 <xTaskRemoveFromEventList>
 8005e14:	4603      	mov	r3, r0
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d007      	beq.n	8005e2a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005e1a:	4b3d      	ldr	r3, [pc, #244]	; (8005f10 <xQueueReceive+0x1bc>)
 8005e1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e20:	601a      	str	r2, [r3, #0]
 8005e22:	f3bf 8f4f 	dsb	sy
 8005e26:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005e2a:	f7ff fc03 	bl	8005634 <vPortExitCritical>
				return pdPASS;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	e069      	b.n	8005f06 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d103      	bne.n	8005e40 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005e38:	f7ff fbfc 	bl	8005634 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	e062      	b.n	8005f06 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d106      	bne.n	8005e54 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005e46:	f107 0310 	add.w	r3, r7, #16
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f000 fe94 	bl	8006b78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005e50:	2301      	movs	r3, #1
 8005e52:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005e54:	f7ff fbee 	bl	8005634 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005e58:	f000 fc06 	bl	8006668 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005e5c:	f7ff fbba 	bl	80055d4 <vPortEnterCritical>
 8005e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e66:	b25b      	sxtb	r3, r3
 8005e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e6c:	d103      	bne.n	8005e76 <xQueueReceive+0x122>
 8005e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e70:	2200      	movs	r2, #0
 8005e72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e7c:	b25b      	sxtb	r3, r3
 8005e7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e82:	d103      	bne.n	8005e8c <xQueueReceive+0x138>
 8005e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e86:	2200      	movs	r2, #0
 8005e88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e8c:	f7ff fbd2 	bl	8005634 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005e90:	1d3a      	adds	r2, r7, #4
 8005e92:	f107 0310 	add.w	r3, r7, #16
 8005e96:	4611      	mov	r1, r2
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f000 fe83 	bl	8006ba4 <xTaskCheckForTimeOut>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d123      	bne.n	8005eec <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005ea4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ea6:	f000 f917 	bl	80060d8 <prvIsQueueEmpty>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d017      	beq.n	8005ee0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eb2:	3324      	adds	r3, #36	; 0x24
 8005eb4:	687a      	ldr	r2, [r7, #4]
 8005eb6:	4611      	mov	r1, r2
 8005eb8:	4618      	mov	r0, r3
 8005eba:	f000 fda9 	bl	8006a10 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005ebe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ec0:	f000 f8b8 	bl	8006034 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005ec4:	f000 fbde 	bl	8006684 <xTaskResumeAll>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d189      	bne.n	8005de2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005ece:	4b10      	ldr	r3, [pc, #64]	; (8005f10 <xQueueReceive+0x1bc>)
 8005ed0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ed4:	601a      	str	r2, [r3, #0]
 8005ed6:	f3bf 8f4f 	dsb	sy
 8005eda:	f3bf 8f6f 	isb	sy
 8005ede:	e780      	b.n	8005de2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005ee0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ee2:	f000 f8a7 	bl	8006034 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005ee6:	f000 fbcd 	bl	8006684 <xTaskResumeAll>
 8005eea:	e77a      	b.n	8005de2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005eec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005eee:	f000 f8a1 	bl	8006034 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005ef2:	f000 fbc7 	bl	8006684 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005ef6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ef8:	f000 f8ee 	bl	80060d8 <prvIsQueueEmpty>
 8005efc:	4603      	mov	r3, r0
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	f43f af6f 	beq.w	8005de2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005f04:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3730      	adds	r7, #48	; 0x30
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}
 8005f0e:	bf00      	nop
 8005f10:	e000ed04 	.word	0xe000ed04

08005f14 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b086      	sub	sp, #24
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	60f8      	str	r0, [r7, #12]
 8005f1c:	60b9      	str	r1, [r7, #8]
 8005f1e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005f20:	2300      	movs	r3, #0
 8005f22:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f28:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d10d      	bne.n	8005f4e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d14d      	bne.n	8005fd6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	689b      	ldr	r3, [r3, #8]
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f000 ff92 	bl	8006e68 <xTaskPriorityDisinherit>
 8005f44:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	609a      	str	r2, [r3, #8]
 8005f4c:	e043      	b.n	8005fd6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d119      	bne.n	8005f88 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	6858      	ldr	r0, [r3, #4]
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	68b9      	ldr	r1, [r7, #8]
 8005f60:	f001 fdee 	bl	8007b40 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	685a      	ldr	r2, [r3, #4]
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f6c:	441a      	add	r2, r3
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	685a      	ldr	r2, [r3, #4]
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	689b      	ldr	r3, [r3, #8]
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	d32b      	bcc.n	8005fd6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681a      	ldr	r2, [r3, #0]
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	605a      	str	r2, [r3, #4]
 8005f86:	e026      	b.n	8005fd6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	68d8      	ldr	r0, [r3, #12]
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f90:	461a      	mov	r2, r3
 8005f92:	68b9      	ldr	r1, [r7, #8]
 8005f94:	f001 fdd4 	bl	8007b40 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	68da      	ldr	r2, [r3, #12]
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa0:	425b      	negs	r3, r3
 8005fa2:	441a      	add	r2, r3
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	68da      	ldr	r2, [r3, #12]
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	429a      	cmp	r2, r3
 8005fb2:	d207      	bcs.n	8005fc4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	689a      	ldr	r2, [r3, #8]
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fbc:	425b      	negs	r3, r3
 8005fbe:	441a      	add	r2, r3
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2b02      	cmp	r3, #2
 8005fc8:	d105      	bne.n	8005fd6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d002      	beq.n	8005fd6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	3b01      	subs	r3, #1
 8005fd4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	1c5a      	adds	r2, r3, #1
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005fde:	697b      	ldr	r3, [r7, #20]
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	3718      	adds	r7, #24
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}

08005fe8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b082      	sub	sp, #8
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d018      	beq.n	800602c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	68da      	ldr	r2, [r3, #12]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006002:	441a      	add	r2, r3
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	68da      	ldr	r2, [r3, #12]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	689b      	ldr	r3, [r3, #8]
 8006010:	429a      	cmp	r2, r3
 8006012:	d303      	bcc.n	800601c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681a      	ldr	r2, [r3, #0]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	68d9      	ldr	r1, [r3, #12]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006024:	461a      	mov	r2, r3
 8006026:	6838      	ldr	r0, [r7, #0]
 8006028:	f001 fd8a 	bl	8007b40 <memcpy>
	}
}
 800602c:	bf00      	nop
 800602e:	3708      	adds	r7, #8
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}

08006034 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b084      	sub	sp, #16
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800603c:	f7ff faca 	bl	80055d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006046:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006048:	e011      	b.n	800606e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800604e:	2b00      	cmp	r3, #0
 8006050:	d012      	beq.n	8006078 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	3324      	adds	r3, #36	; 0x24
 8006056:	4618      	mov	r0, r3
 8006058:	f000 fd2a 	bl	8006ab0 <xTaskRemoveFromEventList>
 800605c:	4603      	mov	r3, r0
 800605e:	2b00      	cmp	r3, #0
 8006060:	d001      	beq.n	8006066 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006062:	f000 fe01 	bl	8006c68 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006066:	7bfb      	ldrb	r3, [r7, #15]
 8006068:	3b01      	subs	r3, #1
 800606a:	b2db      	uxtb	r3, r3
 800606c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800606e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006072:	2b00      	cmp	r3, #0
 8006074:	dce9      	bgt.n	800604a <prvUnlockQueue+0x16>
 8006076:	e000      	b.n	800607a <prvUnlockQueue+0x46>
					break;
 8006078:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	22ff      	movs	r2, #255	; 0xff
 800607e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006082:	f7ff fad7 	bl	8005634 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006086:	f7ff faa5 	bl	80055d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006090:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006092:	e011      	b.n	80060b8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	691b      	ldr	r3, [r3, #16]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d012      	beq.n	80060c2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	3310      	adds	r3, #16
 80060a0:	4618      	mov	r0, r3
 80060a2:	f000 fd05 	bl	8006ab0 <xTaskRemoveFromEventList>
 80060a6:	4603      	mov	r3, r0
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d001      	beq.n	80060b0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80060ac:	f000 fddc 	bl	8006c68 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80060b0:	7bbb      	ldrb	r3, [r7, #14]
 80060b2:	3b01      	subs	r3, #1
 80060b4:	b2db      	uxtb	r3, r3
 80060b6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80060b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	dce9      	bgt.n	8006094 <prvUnlockQueue+0x60>
 80060c0:	e000      	b.n	80060c4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80060c2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	22ff      	movs	r2, #255	; 0xff
 80060c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80060cc:	f7ff fab2 	bl	8005634 <vPortExitCritical>
}
 80060d0:	bf00      	nop
 80060d2:	3710      	adds	r7, #16
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}

080060d8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b084      	sub	sp, #16
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80060e0:	f7ff fa78 	bl	80055d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d102      	bne.n	80060f2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80060ec:	2301      	movs	r3, #1
 80060ee:	60fb      	str	r3, [r7, #12]
 80060f0:	e001      	b.n	80060f6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80060f2:	2300      	movs	r3, #0
 80060f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80060f6:	f7ff fa9d 	bl	8005634 <vPortExitCritical>

	return xReturn;
 80060fa:	68fb      	ldr	r3, [r7, #12]
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	3710      	adds	r7, #16
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}

08006104 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b084      	sub	sp, #16
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800610c:	f7ff fa62 	bl	80055d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006118:	429a      	cmp	r2, r3
 800611a:	d102      	bne.n	8006122 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800611c:	2301      	movs	r3, #1
 800611e:	60fb      	str	r3, [r7, #12]
 8006120:	e001      	b.n	8006126 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006122:	2300      	movs	r3, #0
 8006124:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006126:	f7ff fa85 	bl	8005634 <vPortExitCritical>

	return xReturn;
 800612a:	68fb      	ldr	r3, [r7, #12]
}
 800612c:	4618      	mov	r0, r3
 800612e:	3710      	adds	r7, #16
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}

08006134 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006134:	b480      	push	{r7}
 8006136:	b085      	sub	sp, #20
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
 800613c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800613e:	2300      	movs	r3, #0
 8006140:	60fb      	str	r3, [r7, #12]
 8006142:	e014      	b.n	800616e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006144:	4a0f      	ldr	r2, [pc, #60]	; (8006184 <vQueueAddToRegistry+0x50>)
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d10b      	bne.n	8006168 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006150:	490c      	ldr	r1, [pc, #48]	; (8006184 <vQueueAddToRegistry+0x50>)
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	683a      	ldr	r2, [r7, #0]
 8006156:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800615a:	4a0a      	ldr	r2, [pc, #40]	; (8006184 <vQueueAddToRegistry+0x50>)
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	00db      	lsls	r3, r3, #3
 8006160:	4413      	add	r3, r2
 8006162:	687a      	ldr	r2, [r7, #4]
 8006164:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006166:	e006      	b.n	8006176 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	3301      	adds	r3, #1
 800616c:	60fb      	str	r3, [r7, #12]
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2b07      	cmp	r3, #7
 8006172:	d9e7      	bls.n	8006144 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006174:	bf00      	nop
 8006176:	bf00      	nop
 8006178:	3714      	adds	r7, #20
 800617a:	46bd      	mov	sp, r7
 800617c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006180:	4770      	bx	lr
 8006182:	bf00      	nop
 8006184:	20004528 	.word	0x20004528

08006188 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006188:	b580      	push	{r7, lr}
 800618a:	b086      	sub	sp, #24
 800618c:	af00      	add	r7, sp, #0
 800618e:	60f8      	str	r0, [r7, #12]
 8006190:	60b9      	str	r1, [r7, #8]
 8006192:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006198:	f7ff fa1c 	bl	80055d4 <vPortEnterCritical>
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80061a2:	b25b      	sxtb	r3, r3
 80061a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061a8:	d103      	bne.n	80061b2 <vQueueWaitForMessageRestricted+0x2a>
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	2200      	movs	r2, #0
 80061ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80061b8:	b25b      	sxtb	r3, r3
 80061ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061be:	d103      	bne.n	80061c8 <vQueueWaitForMessageRestricted+0x40>
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	2200      	movs	r2, #0
 80061c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80061c8:	f7ff fa34 	bl	8005634 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d106      	bne.n	80061e2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	3324      	adds	r3, #36	; 0x24
 80061d8:	687a      	ldr	r2, [r7, #4]
 80061da:	68b9      	ldr	r1, [r7, #8]
 80061dc:	4618      	mov	r0, r3
 80061de:	f000 fc3b 	bl	8006a58 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80061e2:	6978      	ldr	r0, [r7, #20]
 80061e4:	f7ff ff26 	bl	8006034 <prvUnlockQueue>
	}
 80061e8:	bf00      	nop
 80061ea:	3718      	adds	r7, #24
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}

080061f0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b08e      	sub	sp, #56	; 0x38
 80061f4:	af04      	add	r7, sp, #16
 80061f6:	60f8      	str	r0, [r7, #12]
 80061f8:	60b9      	str	r1, [r7, #8]
 80061fa:	607a      	str	r2, [r7, #4]
 80061fc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80061fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006200:	2b00      	cmp	r3, #0
 8006202:	d10a      	bne.n	800621a <xTaskCreateStatic+0x2a>
	__asm volatile
 8006204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006208:	f383 8811 	msr	BASEPRI, r3
 800620c:	f3bf 8f6f 	isb	sy
 8006210:	f3bf 8f4f 	dsb	sy
 8006214:	623b      	str	r3, [r7, #32]
}
 8006216:	bf00      	nop
 8006218:	e7fe      	b.n	8006218 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800621a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800621c:	2b00      	cmp	r3, #0
 800621e:	d10a      	bne.n	8006236 <xTaskCreateStatic+0x46>
	__asm volatile
 8006220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006224:	f383 8811 	msr	BASEPRI, r3
 8006228:	f3bf 8f6f 	isb	sy
 800622c:	f3bf 8f4f 	dsb	sy
 8006230:	61fb      	str	r3, [r7, #28]
}
 8006232:	bf00      	nop
 8006234:	e7fe      	b.n	8006234 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006236:	235c      	movs	r3, #92	; 0x5c
 8006238:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	2b5c      	cmp	r3, #92	; 0x5c
 800623e:	d00a      	beq.n	8006256 <xTaskCreateStatic+0x66>
	__asm volatile
 8006240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006244:	f383 8811 	msr	BASEPRI, r3
 8006248:	f3bf 8f6f 	isb	sy
 800624c:	f3bf 8f4f 	dsb	sy
 8006250:	61bb      	str	r3, [r7, #24]
}
 8006252:	bf00      	nop
 8006254:	e7fe      	b.n	8006254 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006256:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800625a:	2b00      	cmp	r3, #0
 800625c:	d01e      	beq.n	800629c <xTaskCreateStatic+0xac>
 800625e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006260:	2b00      	cmp	r3, #0
 8006262:	d01b      	beq.n	800629c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006266:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800626a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800626c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800626e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006270:	2202      	movs	r2, #2
 8006272:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006276:	2300      	movs	r3, #0
 8006278:	9303      	str	r3, [sp, #12]
 800627a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800627c:	9302      	str	r3, [sp, #8]
 800627e:	f107 0314 	add.w	r3, r7, #20
 8006282:	9301      	str	r3, [sp, #4]
 8006284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006286:	9300      	str	r3, [sp, #0]
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	687a      	ldr	r2, [r7, #4]
 800628c:	68b9      	ldr	r1, [r7, #8]
 800628e:	68f8      	ldr	r0, [r7, #12]
 8006290:	f000 f850 	bl	8006334 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006294:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006296:	f000 f8dd 	bl	8006454 <prvAddNewTaskToReadyList>
 800629a:	e001      	b.n	80062a0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800629c:	2300      	movs	r3, #0
 800629e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80062a0:	697b      	ldr	r3, [r7, #20]
	}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3728      	adds	r7, #40	; 0x28
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}

080062aa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80062aa:	b580      	push	{r7, lr}
 80062ac:	b08c      	sub	sp, #48	; 0x30
 80062ae:	af04      	add	r7, sp, #16
 80062b0:	60f8      	str	r0, [r7, #12]
 80062b2:	60b9      	str	r1, [r7, #8]
 80062b4:	603b      	str	r3, [r7, #0]
 80062b6:	4613      	mov	r3, r2
 80062b8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80062ba:	88fb      	ldrh	r3, [r7, #6]
 80062bc:	009b      	lsls	r3, r3, #2
 80062be:	4618      	mov	r0, r3
 80062c0:	f7fe fdbe 	bl	8004e40 <pvPortMalloc>
 80062c4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d00e      	beq.n	80062ea <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80062cc:	205c      	movs	r0, #92	; 0x5c
 80062ce:	f7fe fdb7 	bl	8004e40 <pvPortMalloc>
 80062d2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80062d4:	69fb      	ldr	r3, [r7, #28]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d003      	beq.n	80062e2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80062da:	69fb      	ldr	r3, [r7, #28]
 80062dc:	697a      	ldr	r2, [r7, #20]
 80062de:	631a      	str	r2, [r3, #48]	; 0x30
 80062e0:	e005      	b.n	80062ee <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80062e2:	6978      	ldr	r0, [r7, #20]
 80062e4:	f7fe fe78 	bl	8004fd8 <vPortFree>
 80062e8:	e001      	b.n	80062ee <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80062ea:	2300      	movs	r3, #0
 80062ec:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80062ee:	69fb      	ldr	r3, [r7, #28]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d017      	beq.n	8006324 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80062f4:	69fb      	ldr	r3, [r7, #28]
 80062f6:	2200      	movs	r2, #0
 80062f8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80062fc:	88fa      	ldrh	r2, [r7, #6]
 80062fe:	2300      	movs	r3, #0
 8006300:	9303      	str	r3, [sp, #12]
 8006302:	69fb      	ldr	r3, [r7, #28]
 8006304:	9302      	str	r3, [sp, #8]
 8006306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006308:	9301      	str	r3, [sp, #4]
 800630a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800630c:	9300      	str	r3, [sp, #0]
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	68b9      	ldr	r1, [r7, #8]
 8006312:	68f8      	ldr	r0, [r7, #12]
 8006314:	f000 f80e 	bl	8006334 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006318:	69f8      	ldr	r0, [r7, #28]
 800631a:	f000 f89b 	bl	8006454 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800631e:	2301      	movs	r3, #1
 8006320:	61bb      	str	r3, [r7, #24]
 8006322:	e002      	b.n	800632a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006324:	f04f 33ff 	mov.w	r3, #4294967295
 8006328:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800632a:	69bb      	ldr	r3, [r7, #24]
	}
 800632c:	4618      	mov	r0, r3
 800632e:	3720      	adds	r7, #32
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}

08006334 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b088      	sub	sp, #32
 8006338:	af00      	add	r7, sp, #0
 800633a:	60f8      	str	r0, [r7, #12]
 800633c:	60b9      	str	r1, [r7, #8]
 800633e:	607a      	str	r2, [r7, #4]
 8006340:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006344:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	009b      	lsls	r3, r3, #2
 800634a:	461a      	mov	r2, r3
 800634c:	21a5      	movs	r1, #165	; 0xa5
 800634e:	f001 fc05 	bl	8007b5c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006354:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800635c:	3b01      	subs	r3, #1
 800635e:	009b      	lsls	r3, r3, #2
 8006360:	4413      	add	r3, r2
 8006362:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006364:	69bb      	ldr	r3, [r7, #24]
 8006366:	f023 0307 	bic.w	r3, r3, #7
 800636a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800636c:	69bb      	ldr	r3, [r7, #24]
 800636e:	f003 0307 	and.w	r3, r3, #7
 8006372:	2b00      	cmp	r3, #0
 8006374:	d00a      	beq.n	800638c <prvInitialiseNewTask+0x58>
	__asm volatile
 8006376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800637a:	f383 8811 	msr	BASEPRI, r3
 800637e:	f3bf 8f6f 	isb	sy
 8006382:	f3bf 8f4f 	dsb	sy
 8006386:	617b      	str	r3, [r7, #20]
}
 8006388:	bf00      	nop
 800638a:	e7fe      	b.n	800638a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d01f      	beq.n	80063d2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006392:	2300      	movs	r3, #0
 8006394:	61fb      	str	r3, [r7, #28]
 8006396:	e012      	b.n	80063be <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006398:	68ba      	ldr	r2, [r7, #8]
 800639a:	69fb      	ldr	r3, [r7, #28]
 800639c:	4413      	add	r3, r2
 800639e:	7819      	ldrb	r1, [r3, #0]
 80063a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063a2:	69fb      	ldr	r3, [r7, #28]
 80063a4:	4413      	add	r3, r2
 80063a6:	3334      	adds	r3, #52	; 0x34
 80063a8:	460a      	mov	r2, r1
 80063aa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80063ac:	68ba      	ldr	r2, [r7, #8]
 80063ae:	69fb      	ldr	r3, [r7, #28]
 80063b0:	4413      	add	r3, r2
 80063b2:	781b      	ldrb	r3, [r3, #0]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d006      	beq.n	80063c6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80063b8:	69fb      	ldr	r3, [r7, #28]
 80063ba:	3301      	adds	r3, #1
 80063bc:	61fb      	str	r3, [r7, #28]
 80063be:	69fb      	ldr	r3, [r7, #28]
 80063c0:	2b0f      	cmp	r3, #15
 80063c2:	d9e9      	bls.n	8006398 <prvInitialiseNewTask+0x64>
 80063c4:	e000      	b.n	80063c8 <prvInitialiseNewTask+0x94>
			{
				break;
 80063c6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80063c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ca:	2200      	movs	r2, #0
 80063cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80063d0:	e003      	b.n	80063da <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80063d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063d4:	2200      	movs	r2, #0
 80063d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80063da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063dc:	2b37      	cmp	r3, #55	; 0x37
 80063de:	d901      	bls.n	80063e4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80063e0:	2337      	movs	r3, #55	; 0x37
 80063e2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80063e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063e8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80063ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063ee:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80063f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063f2:	2200      	movs	r2, #0
 80063f4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80063f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063f8:	3304      	adds	r3, #4
 80063fa:	4618      	mov	r0, r3
 80063fc:	f7fe ff2a 	bl	8005254 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006402:	3318      	adds	r3, #24
 8006404:	4618      	mov	r0, r3
 8006406:	f7fe ff25 	bl	8005254 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800640a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800640c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800640e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006412:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006418:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800641a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800641c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800641e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006422:	2200      	movs	r2, #0
 8006424:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006428:	2200      	movs	r2, #0
 800642a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800642e:	683a      	ldr	r2, [r7, #0]
 8006430:	68f9      	ldr	r1, [r7, #12]
 8006432:	69b8      	ldr	r0, [r7, #24]
 8006434:	f7fe ffa2 	bl	800537c <pxPortInitialiseStack>
 8006438:	4602      	mov	r2, r0
 800643a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800643c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800643e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006440:	2b00      	cmp	r3, #0
 8006442:	d002      	beq.n	800644a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006446:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006448:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800644a:	bf00      	nop
 800644c:	3720      	adds	r7, #32
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}
	...

08006454 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b082      	sub	sp, #8
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800645c:	f7ff f8ba 	bl	80055d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006460:	4b2d      	ldr	r3, [pc, #180]	; (8006518 <prvAddNewTaskToReadyList+0xc4>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	3301      	adds	r3, #1
 8006466:	4a2c      	ldr	r2, [pc, #176]	; (8006518 <prvAddNewTaskToReadyList+0xc4>)
 8006468:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800646a:	4b2c      	ldr	r3, [pc, #176]	; (800651c <prvAddNewTaskToReadyList+0xc8>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d109      	bne.n	8006486 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006472:	4a2a      	ldr	r2, [pc, #168]	; (800651c <prvAddNewTaskToReadyList+0xc8>)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006478:	4b27      	ldr	r3, [pc, #156]	; (8006518 <prvAddNewTaskToReadyList+0xc4>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	2b01      	cmp	r3, #1
 800647e:	d110      	bne.n	80064a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006480:	f000 fc16 	bl	8006cb0 <prvInitialiseTaskLists>
 8006484:	e00d      	b.n	80064a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006486:	4b26      	ldr	r3, [pc, #152]	; (8006520 <prvAddNewTaskToReadyList+0xcc>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d109      	bne.n	80064a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800648e:	4b23      	ldr	r3, [pc, #140]	; (800651c <prvAddNewTaskToReadyList+0xc8>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006498:	429a      	cmp	r2, r3
 800649a:	d802      	bhi.n	80064a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800649c:	4a1f      	ldr	r2, [pc, #124]	; (800651c <prvAddNewTaskToReadyList+0xc8>)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80064a2:	4b20      	ldr	r3, [pc, #128]	; (8006524 <prvAddNewTaskToReadyList+0xd0>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	3301      	adds	r3, #1
 80064a8:	4a1e      	ldr	r2, [pc, #120]	; (8006524 <prvAddNewTaskToReadyList+0xd0>)
 80064aa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80064ac:	4b1d      	ldr	r3, [pc, #116]	; (8006524 <prvAddNewTaskToReadyList+0xd0>)
 80064ae:	681a      	ldr	r2, [r3, #0]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064b8:	4b1b      	ldr	r3, [pc, #108]	; (8006528 <prvAddNewTaskToReadyList+0xd4>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	429a      	cmp	r2, r3
 80064be:	d903      	bls.n	80064c8 <prvAddNewTaskToReadyList+0x74>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064c4:	4a18      	ldr	r2, [pc, #96]	; (8006528 <prvAddNewTaskToReadyList+0xd4>)
 80064c6:	6013      	str	r3, [r2, #0]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064cc:	4613      	mov	r3, r2
 80064ce:	009b      	lsls	r3, r3, #2
 80064d0:	4413      	add	r3, r2
 80064d2:	009b      	lsls	r3, r3, #2
 80064d4:	4a15      	ldr	r2, [pc, #84]	; (800652c <prvAddNewTaskToReadyList+0xd8>)
 80064d6:	441a      	add	r2, r3
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	3304      	adds	r3, #4
 80064dc:	4619      	mov	r1, r3
 80064de:	4610      	mov	r0, r2
 80064e0:	f7fe fec5 	bl	800526e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80064e4:	f7ff f8a6 	bl	8005634 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80064e8:	4b0d      	ldr	r3, [pc, #52]	; (8006520 <prvAddNewTaskToReadyList+0xcc>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d00e      	beq.n	800650e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80064f0:	4b0a      	ldr	r3, [pc, #40]	; (800651c <prvAddNewTaskToReadyList+0xc8>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064fa:	429a      	cmp	r2, r3
 80064fc:	d207      	bcs.n	800650e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80064fe:	4b0c      	ldr	r3, [pc, #48]	; (8006530 <prvAddNewTaskToReadyList+0xdc>)
 8006500:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006504:	601a      	str	r2, [r3, #0]
 8006506:	f3bf 8f4f 	dsb	sy
 800650a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800650e:	bf00      	nop
 8006510:	3708      	adds	r7, #8
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}
 8006516:	bf00      	nop
 8006518:	20004a3c 	.word	0x20004a3c
 800651c:	20004568 	.word	0x20004568
 8006520:	20004a48 	.word	0x20004a48
 8006524:	20004a58 	.word	0x20004a58
 8006528:	20004a44 	.word	0x20004a44
 800652c:	2000456c 	.word	0x2000456c
 8006530:	e000ed04 	.word	0xe000ed04

08006534 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006534:	b580      	push	{r7, lr}
 8006536:	b084      	sub	sp, #16
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800653c:	2300      	movs	r3, #0
 800653e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d017      	beq.n	8006576 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006546:	4b13      	ldr	r3, [pc, #76]	; (8006594 <vTaskDelay+0x60>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d00a      	beq.n	8006564 <vTaskDelay+0x30>
	__asm volatile
 800654e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006552:	f383 8811 	msr	BASEPRI, r3
 8006556:	f3bf 8f6f 	isb	sy
 800655a:	f3bf 8f4f 	dsb	sy
 800655e:	60bb      	str	r3, [r7, #8]
}
 8006560:	bf00      	nop
 8006562:	e7fe      	b.n	8006562 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006564:	f000 f880 	bl	8006668 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006568:	2100      	movs	r1, #0
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f000 fcea 	bl	8006f44 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006570:	f000 f888 	bl	8006684 <xTaskResumeAll>
 8006574:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d107      	bne.n	800658c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800657c:	4b06      	ldr	r3, [pc, #24]	; (8006598 <vTaskDelay+0x64>)
 800657e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006582:	601a      	str	r2, [r3, #0]
 8006584:	f3bf 8f4f 	dsb	sy
 8006588:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800658c:	bf00      	nop
 800658e:	3710      	adds	r7, #16
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}
 8006594:	20004a64 	.word	0x20004a64
 8006598:	e000ed04 	.word	0xe000ed04

0800659c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b08a      	sub	sp, #40	; 0x28
 80065a0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80065a2:	2300      	movs	r3, #0
 80065a4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80065a6:	2300      	movs	r3, #0
 80065a8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80065aa:	463a      	mov	r2, r7
 80065ac:	1d39      	adds	r1, r7, #4
 80065ae:	f107 0308 	add.w	r3, r7, #8
 80065b2:	4618      	mov	r0, r3
 80065b4:	f7fe fc10 	bl	8004dd8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80065b8:	6839      	ldr	r1, [r7, #0]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	68ba      	ldr	r2, [r7, #8]
 80065be:	9202      	str	r2, [sp, #8]
 80065c0:	9301      	str	r3, [sp, #4]
 80065c2:	2300      	movs	r3, #0
 80065c4:	9300      	str	r3, [sp, #0]
 80065c6:	2300      	movs	r3, #0
 80065c8:	460a      	mov	r2, r1
 80065ca:	4921      	ldr	r1, [pc, #132]	; (8006650 <vTaskStartScheduler+0xb4>)
 80065cc:	4821      	ldr	r0, [pc, #132]	; (8006654 <vTaskStartScheduler+0xb8>)
 80065ce:	f7ff fe0f 	bl	80061f0 <xTaskCreateStatic>
 80065d2:	4603      	mov	r3, r0
 80065d4:	4a20      	ldr	r2, [pc, #128]	; (8006658 <vTaskStartScheduler+0xbc>)
 80065d6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80065d8:	4b1f      	ldr	r3, [pc, #124]	; (8006658 <vTaskStartScheduler+0xbc>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d002      	beq.n	80065e6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80065e0:	2301      	movs	r3, #1
 80065e2:	617b      	str	r3, [r7, #20]
 80065e4:	e001      	b.n	80065ea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80065e6:	2300      	movs	r3, #0
 80065e8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	d102      	bne.n	80065f6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80065f0:	f000 fcfc 	bl	8006fec <xTimerCreateTimerTask>
 80065f4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	d116      	bne.n	800662a <vTaskStartScheduler+0x8e>
	__asm volatile
 80065fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006600:	f383 8811 	msr	BASEPRI, r3
 8006604:	f3bf 8f6f 	isb	sy
 8006608:	f3bf 8f4f 	dsb	sy
 800660c:	613b      	str	r3, [r7, #16]
}
 800660e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006610:	4b12      	ldr	r3, [pc, #72]	; (800665c <vTaskStartScheduler+0xc0>)
 8006612:	f04f 32ff 	mov.w	r2, #4294967295
 8006616:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006618:	4b11      	ldr	r3, [pc, #68]	; (8006660 <vTaskStartScheduler+0xc4>)
 800661a:	2201      	movs	r2, #1
 800661c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800661e:	4b11      	ldr	r3, [pc, #68]	; (8006664 <vTaskStartScheduler+0xc8>)
 8006620:	2200      	movs	r2, #0
 8006622:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006624:	f7fe ff34 	bl	8005490 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006628:	e00e      	b.n	8006648 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006630:	d10a      	bne.n	8006648 <vTaskStartScheduler+0xac>
	__asm volatile
 8006632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006636:	f383 8811 	msr	BASEPRI, r3
 800663a:	f3bf 8f6f 	isb	sy
 800663e:	f3bf 8f4f 	dsb	sy
 8006642:	60fb      	str	r3, [r7, #12]
}
 8006644:	bf00      	nop
 8006646:	e7fe      	b.n	8006646 <vTaskStartScheduler+0xaa>
}
 8006648:	bf00      	nop
 800664a:	3718      	adds	r7, #24
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}
 8006650:	080084b4 	.word	0x080084b4
 8006654:	08006c81 	.word	0x08006c81
 8006658:	20004a60 	.word	0x20004a60
 800665c:	20004a5c 	.word	0x20004a5c
 8006660:	20004a48 	.word	0x20004a48
 8006664:	20004a40 	.word	0x20004a40

08006668 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006668:	b480      	push	{r7}
 800666a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800666c:	4b04      	ldr	r3, [pc, #16]	; (8006680 <vTaskSuspendAll+0x18>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	3301      	adds	r3, #1
 8006672:	4a03      	ldr	r2, [pc, #12]	; (8006680 <vTaskSuspendAll+0x18>)
 8006674:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006676:	bf00      	nop
 8006678:	46bd      	mov	sp, r7
 800667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667e:	4770      	bx	lr
 8006680:	20004a64 	.word	0x20004a64

08006684 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b084      	sub	sp, #16
 8006688:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800668a:	2300      	movs	r3, #0
 800668c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800668e:	2300      	movs	r3, #0
 8006690:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006692:	4b42      	ldr	r3, [pc, #264]	; (800679c <xTaskResumeAll+0x118>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d10a      	bne.n	80066b0 <xTaskResumeAll+0x2c>
	__asm volatile
 800669a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800669e:	f383 8811 	msr	BASEPRI, r3
 80066a2:	f3bf 8f6f 	isb	sy
 80066a6:	f3bf 8f4f 	dsb	sy
 80066aa:	603b      	str	r3, [r7, #0]
}
 80066ac:	bf00      	nop
 80066ae:	e7fe      	b.n	80066ae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80066b0:	f7fe ff90 	bl	80055d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80066b4:	4b39      	ldr	r3, [pc, #228]	; (800679c <xTaskResumeAll+0x118>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	3b01      	subs	r3, #1
 80066ba:	4a38      	ldr	r2, [pc, #224]	; (800679c <xTaskResumeAll+0x118>)
 80066bc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80066be:	4b37      	ldr	r3, [pc, #220]	; (800679c <xTaskResumeAll+0x118>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d162      	bne.n	800678c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80066c6:	4b36      	ldr	r3, [pc, #216]	; (80067a0 <xTaskResumeAll+0x11c>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d05e      	beq.n	800678c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80066ce:	e02f      	b.n	8006730 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066d0:	4b34      	ldr	r3, [pc, #208]	; (80067a4 <xTaskResumeAll+0x120>)
 80066d2:	68db      	ldr	r3, [r3, #12]
 80066d4:	68db      	ldr	r3, [r3, #12]
 80066d6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	3318      	adds	r3, #24
 80066dc:	4618      	mov	r0, r3
 80066de:	f7fe fe23 	bl	8005328 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	3304      	adds	r3, #4
 80066e6:	4618      	mov	r0, r3
 80066e8:	f7fe fe1e 	bl	8005328 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066f0:	4b2d      	ldr	r3, [pc, #180]	; (80067a8 <xTaskResumeAll+0x124>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	429a      	cmp	r2, r3
 80066f6:	d903      	bls.n	8006700 <xTaskResumeAll+0x7c>
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066fc:	4a2a      	ldr	r2, [pc, #168]	; (80067a8 <xTaskResumeAll+0x124>)
 80066fe:	6013      	str	r3, [r2, #0]
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006704:	4613      	mov	r3, r2
 8006706:	009b      	lsls	r3, r3, #2
 8006708:	4413      	add	r3, r2
 800670a:	009b      	lsls	r3, r3, #2
 800670c:	4a27      	ldr	r2, [pc, #156]	; (80067ac <xTaskResumeAll+0x128>)
 800670e:	441a      	add	r2, r3
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	3304      	adds	r3, #4
 8006714:	4619      	mov	r1, r3
 8006716:	4610      	mov	r0, r2
 8006718:	f7fe fda9 	bl	800526e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006720:	4b23      	ldr	r3, [pc, #140]	; (80067b0 <xTaskResumeAll+0x12c>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006726:	429a      	cmp	r2, r3
 8006728:	d302      	bcc.n	8006730 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800672a:	4b22      	ldr	r3, [pc, #136]	; (80067b4 <xTaskResumeAll+0x130>)
 800672c:	2201      	movs	r2, #1
 800672e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006730:	4b1c      	ldr	r3, [pc, #112]	; (80067a4 <xTaskResumeAll+0x120>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d1cb      	bne.n	80066d0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d001      	beq.n	8006742 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800673e:	f000 fb55 	bl	8006dec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006742:	4b1d      	ldr	r3, [pc, #116]	; (80067b8 <xTaskResumeAll+0x134>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d010      	beq.n	8006770 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800674e:	f000 f847 	bl	80067e0 <xTaskIncrementTick>
 8006752:	4603      	mov	r3, r0
 8006754:	2b00      	cmp	r3, #0
 8006756:	d002      	beq.n	800675e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006758:	4b16      	ldr	r3, [pc, #88]	; (80067b4 <xTaskResumeAll+0x130>)
 800675a:	2201      	movs	r2, #1
 800675c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	3b01      	subs	r3, #1
 8006762:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d1f1      	bne.n	800674e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800676a:	4b13      	ldr	r3, [pc, #76]	; (80067b8 <xTaskResumeAll+0x134>)
 800676c:	2200      	movs	r2, #0
 800676e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006770:	4b10      	ldr	r3, [pc, #64]	; (80067b4 <xTaskResumeAll+0x130>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d009      	beq.n	800678c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006778:	2301      	movs	r3, #1
 800677a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800677c:	4b0f      	ldr	r3, [pc, #60]	; (80067bc <xTaskResumeAll+0x138>)
 800677e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006782:	601a      	str	r2, [r3, #0]
 8006784:	f3bf 8f4f 	dsb	sy
 8006788:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800678c:	f7fe ff52 	bl	8005634 <vPortExitCritical>

	return xAlreadyYielded;
 8006790:	68bb      	ldr	r3, [r7, #8]
}
 8006792:	4618      	mov	r0, r3
 8006794:	3710      	adds	r7, #16
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}
 800679a:	bf00      	nop
 800679c:	20004a64 	.word	0x20004a64
 80067a0:	20004a3c 	.word	0x20004a3c
 80067a4:	200049fc 	.word	0x200049fc
 80067a8:	20004a44 	.word	0x20004a44
 80067ac:	2000456c 	.word	0x2000456c
 80067b0:	20004568 	.word	0x20004568
 80067b4:	20004a50 	.word	0x20004a50
 80067b8:	20004a4c 	.word	0x20004a4c
 80067bc:	e000ed04 	.word	0xe000ed04

080067c0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80067c0:	b480      	push	{r7}
 80067c2:	b083      	sub	sp, #12
 80067c4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80067c6:	4b05      	ldr	r3, [pc, #20]	; (80067dc <xTaskGetTickCount+0x1c>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80067cc:	687b      	ldr	r3, [r7, #4]
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	370c      	adds	r7, #12
 80067d2:	46bd      	mov	sp, r7
 80067d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d8:	4770      	bx	lr
 80067da:	bf00      	nop
 80067dc:	20004a40 	.word	0x20004a40

080067e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b086      	sub	sp, #24
 80067e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80067e6:	2300      	movs	r3, #0
 80067e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80067ea:	4b4f      	ldr	r3, [pc, #316]	; (8006928 <xTaskIncrementTick+0x148>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	f040 808f 	bne.w	8006912 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80067f4:	4b4d      	ldr	r3, [pc, #308]	; (800692c <xTaskIncrementTick+0x14c>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	3301      	adds	r3, #1
 80067fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80067fc:	4a4b      	ldr	r2, [pc, #300]	; (800692c <xTaskIncrementTick+0x14c>)
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d120      	bne.n	800684a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006808:	4b49      	ldr	r3, [pc, #292]	; (8006930 <xTaskIncrementTick+0x150>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d00a      	beq.n	8006828 <xTaskIncrementTick+0x48>
	__asm volatile
 8006812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006816:	f383 8811 	msr	BASEPRI, r3
 800681a:	f3bf 8f6f 	isb	sy
 800681e:	f3bf 8f4f 	dsb	sy
 8006822:	603b      	str	r3, [r7, #0]
}
 8006824:	bf00      	nop
 8006826:	e7fe      	b.n	8006826 <xTaskIncrementTick+0x46>
 8006828:	4b41      	ldr	r3, [pc, #260]	; (8006930 <xTaskIncrementTick+0x150>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	60fb      	str	r3, [r7, #12]
 800682e:	4b41      	ldr	r3, [pc, #260]	; (8006934 <xTaskIncrementTick+0x154>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	4a3f      	ldr	r2, [pc, #252]	; (8006930 <xTaskIncrementTick+0x150>)
 8006834:	6013      	str	r3, [r2, #0]
 8006836:	4a3f      	ldr	r2, [pc, #252]	; (8006934 <xTaskIncrementTick+0x154>)
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	6013      	str	r3, [r2, #0]
 800683c:	4b3e      	ldr	r3, [pc, #248]	; (8006938 <xTaskIncrementTick+0x158>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	3301      	adds	r3, #1
 8006842:	4a3d      	ldr	r2, [pc, #244]	; (8006938 <xTaskIncrementTick+0x158>)
 8006844:	6013      	str	r3, [r2, #0]
 8006846:	f000 fad1 	bl	8006dec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800684a:	4b3c      	ldr	r3, [pc, #240]	; (800693c <xTaskIncrementTick+0x15c>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	693a      	ldr	r2, [r7, #16]
 8006850:	429a      	cmp	r2, r3
 8006852:	d349      	bcc.n	80068e8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006854:	4b36      	ldr	r3, [pc, #216]	; (8006930 <xTaskIncrementTick+0x150>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d104      	bne.n	8006868 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800685e:	4b37      	ldr	r3, [pc, #220]	; (800693c <xTaskIncrementTick+0x15c>)
 8006860:	f04f 32ff 	mov.w	r2, #4294967295
 8006864:	601a      	str	r2, [r3, #0]
					break;
 8006866:	e03f      	b.n	80068e8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006868:	4b31      	ldr	r3, [pc, #196]	; (8006930 <xTaskIncrementTick+0x150>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	68db      	ldr	r3, [r3, #12]
 800686e:	68db      	ldr	r3, [r3, #12]
 8006870:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	685b      	ldr	r3, [r3, #4]
 8006876:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006878:	693a      	ldr	r2, [r7, #16]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	429a      	cmp	r2, r3
 800687e:	d203      	bcs.n	8006888 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006880:	4a2e      	ldr	r2, [pc, #184]	; (800693c <xTaskIncrementTick+0x15c>)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006886:	e02f      	b.n	80068e8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	3304      	adds	r3, #4
 800688c:	4618      	mov	r0, r3
 800688e:	f7fe fd4b 	bl	8005328 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006896:	2b00      	cmp	r3, #0
 8006898:	d004      	beq.n	80068a4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	3318      	adds	r3, #24
 800689e:	4618      	mov	r0, r3
 80068a0:	f7fe fd42 	bl	8005328 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068a8:	4b25      	ldr	r3, [pc, #148]	; (8006940 <xTaskIncrementTick+0x160>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	429a      	cmp	r2, r3
 80068ae:	d903      	bls.n	80068b8 <xTaskIncrementTick+0xd8>
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068b4:	4a22      	ldr	r2, [pc, #136]	; (8006940 <xTaskIncrementTick+0x160>)
 80068b6:	6013      	str	r3, [r2, #0]
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068bc:	4613      	mov	r3, r2
 80068be:	009b      	lsls	r3, r3, #2
 80068c0:	4413      	add	r3, r2
 80068c2:	009b      	lsls	r3, r3, #2
 80068c4:	4a1f      	ldr	r2, [pc, #124]	; (8006944 <xTaskIncrementTick+0x164>)
 80068c6:	441a      	add	r2, r3
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	3304      	adds	r3, #4
 80068cc:	4619      	mov	r1, r3
 80068ce:	4610      	mov	r0, r2
 80068d0:	f7fe fccd 	bl	800526e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068d8:	4b1b      	ldr	r3, [pc, #108]	; (8006948 <xTaskIncrementTick+0x168>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068de:	429a      	cmp	r2, r3
 80068e0:	d3b8      	bcc.n	8006854 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80068e2:	2301      	movs	r3, #1
 80068e4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80068e6:	e7b5      	b.n	8006854 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80068e8:	4b17      	ldr	r3, [pc, #92]	; (8006948 <xTaskIncrementTick+0x168>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068ee:	4915      	ldr	r1, [pc, #84]	; (8006944 <xTaskIncrementTick+0x164>)
 80068f0:	4613      	mov	r3, r2
 80068f2:	009b      	lsls	r3, r3, #2
 80068f4:	4413      	add	r3, r2
 80068f6:	009b      	lsls	r3, r3, #2
 80068f8:	440b      	add	r3, r1
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d901      	bls.n	8006904 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006900:	2301      	movs	r3, #1
 8006902:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006904:	4b11      	ldr	r3, [pc, #68]	; (800694c <xTaskIncrementTick+0x16c>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d007      	beq.n	800691c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800690c:	2301      	movs	r3, #1
 800690e:	617b      	str	r3, [r7, #20]
 8006910:	e004      	b.n	800691c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006912:	4b0f      	ldr	r3, [pc, #60]	; (8006950 <xTaskIncrementTick+0x170>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	3301      	adds	r3, #1
 8006918:	4a0d      	ldr	r2, [pc, #52]	; (8006950 <xTaskIncrementTick+0x170>)
 800691a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800691c:	697b      	ldr	r3, [r7, #20]
}
 800691e:	4618      	mov	r0, r3
 8006920:	3718      	adds	r7, #24
 8006922:	46bd      	mov	sp, r7
 8006924:	bd80      	pop	{r7, pc}
 8006926:	bf00      	nop
 8006928:	20004a64 	.word	0x20004a64
 800692c:	20004a40 	.word	0x20004a40
 8006930:	200049f4 	.word	0x200049f4
 8006934:	200049f8 	.word	0x200049f8
 8006938:	20004a54 	.word	0x20004a54
 800693c:	20004a5c 	.word	0x20004a5c
 8006940:	20004a44 	.word	0x20004a44
 8006944:	2000456c 	.word	0x2000456c
 8006948:	20004568 	.word	0x20004568
 800694c:	20004a50 	.word	0x20004a50
 8006950:	20004a4c 	.word	0x20004a4c

08006954 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006954:	b480      	push	{r7}
 8006956:	b085      	sub	sp, #20
 8006958:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800695a:	4b28      	ldr	r3, [pc, #160]	; (80069fc <vTaskSwitchContext+0xa8>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d003      	beq.n	800696a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006962:	4b27      	ldr	r3, [pc, #156]	; (8006a00 <vTaskSwitchContext+0xac>)
 8006964:	2201      	movs	r2, #1
 8006966:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006968:	e041      	b.n	80069ee <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800696a:	4b25      	ldr	r3, [pc, #148]	; (8006a00 <vTaskSwitchContext+0xac>)
 800696c:	2200      	movs	r2, #0
 800696e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006970:	4b24      	ldr	r3, [pc, #144]	; (8006a04 <vTaskSwitchContext+0xb0>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	60fb      	str	r3, [r7, #12]
 8006976:	e010      	b.n	800699a <vTaskSwitchContext+0x46>
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d10a      	bne.n	8006994 <vTaskSwitchContext+0x40>
	__asm volatile
 800697e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006982:	f383 8811 	msr	BASEPRI, r3
 8006986:	f3bf 8f6f 	isb	sy
 800698a:	f3bf 8f4f 	dsb	sy
 800698e:	607b      	str	r3, [r7, #4]
}
 8006990:	bf00      	nop
 8006992:	e7fe      	b.n	8006992 <vTaskSwitchContext+0x3e>
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	3b01      	subs	r3, #1
 8006998:	60fb      	str	r3, [r7, #12]
 800699a:	491b      	ldr	r1, [pc, #108]	; (8006a08 <vTaskSwitchContext+0xb4>)
 800699c:	68fa      	ldr	r2, [r7, #12]
 800699e:	4613      	mov	r3, r2
 80069a0:	009b      	lsls	r3, r3, #2
 80069a2:	4413      	add	r3, r2
 80069a4:	009b      	lsls	r3, r3, #2
 80069a6:	440b      	add	r3, r1
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d0e4      	beq.n	8006978 <vTaskSwitchContext+0x24>
 80069ae:	68fa      	ldr	r2, [r7, #12]
 80069b0:	4613      	mov	r3, r2
 80069b2:	009b      	lsls	r3, r3, #2
 80069b4:	4413      	add	r3, r2
 80069b6:	009b      	lsls	r3, r3, #2
 80069b8:	4a13      	ldr	r2, [pc, #76]	; (8006a08 <vTaskSwitchContext+0xb4>)
 80069ba:	4413      	add	r3, r2
 80069bc:	60bb      	str	r3, [r7, #8]
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	685a      	ldr	r2, [r3, #4]
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	605a      	str	r2, [r3, #4]
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	685a      	ldr	r2, [r3, #4]
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	3308      	adds	r3, #8
 80069d0:	429a      	cmp	r2, r3
 80069d2:	d104      	bne.n	80069de <vTaskSwitchContext+0x8a>
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	685a      	ldr	r2, [r3, #4]
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	605a      	str	r2, [r3, #4]
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	68db      	ldr	r3, [r3, #12]
 80069e4:	4a09      	ldr	r2, [pc, #36]	; (8006a0c <vTaskSwitchContext+0xb8>)
 80069e6:	6013      	str	r3, [r2, #0]
 80069e8:	4a06      	ldr	r2, [pc, #24]	; (8006a04 <vTaskSwitchContext+0xb0>)
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	6013      	str	r3, [r2, #0]
}
 80069ee:	bf00      	nop
 80069f0:	3714      	adds	r7, #20
 80069f2:	46bd      	mov	sp, r7
 80069f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f8:	4770      	bx	lr
 80069fa:	bf00      	nop
 80069fc:	20004a64 	.word	0x20004a64
 8006a00:	20004a50 	.word	0x20004a50
 8006a04:	20004a44 	.word	0x20004a44
 8006a08:	2000456c 	.word	0x2000456c
 8006a0c:	20004568 	.word	0x20004568

08006a10 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b084      	sub	sp, #16
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
 8006a18:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d10a      	bne.n	8006a36 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a24:	f383 8811 	msr	BASEPRI, r3
 8006a28:	f3bf 8f6f 	isb	sy
 8006a2c:	f3bf 8f4f 	dsb	sy
 8006a30:	60fb      	str	r3, [r7, #12]
}
 8006a32:	bf00      	nop
 8006a34:	e7fe      	b.n	8006a34 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006a36:	4b07      	ldr	r3, [pc, #28]	; (8006a54 <vTaskPlaceOnEventList+0x44>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	3318      	adds	r3, #24
 8006a3c:	4619      	mov	r1, r3
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f7fe fc39 	bl	80052b6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006a44:	2101      	movs	r1, #1
 8006a46:	6838      	ldr	r0, [r7, #0]
 8006a48:	f000 fa7c 	bl	8006f44 <prvAddCurrentTaskToDelayedList>
}
 8006a4c:	bf00      	nop
 8006a4e:	3710      	adds	r7, #16
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}
 8006a54:	20004568 	.word	0x20004568

08006a58 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b086      	sub	sp, #24
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	60f8      	str	r0, [r7, #12]
 8006a60:	60b9      	str	r1, [r7, #8]
 8006a62:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d10a      	bne.n	8006a80 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a6e:	f383 8811 	msr	BASEPRI, r3
 8006a72:	f3bf 8f6f 	isb	sy
 8006a76:	f3bf 8f4f 	dsb	sy
 8006a7a:	617b      	str	r3, [r7, #20]
}
 8006a7c:	bf00      	nop
 8006a7e:	e7fe      	b.n	8006a7e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006a80:	4b0a      	ldr	r3, [pc, #40]	; (8006aac <vTaskPlaceOnEventListRestricted+0x54>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	3318      	adds	r3, #24
 8006a86:	4619      	mov	r1, r3
 8006a88:	68f8      	ldr	r0, [r7, #12]
 8006a8a:	f7fe fbf0 	bl	800526e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d002      	beq.n	8006a9a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006a94:	f04f 33ff 	mov.w	r3, #4294967295
 8006a98:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006a9a:	6879      	ldr	r1, [r7, #4]
 8006a9c:	68b8      	ldr	r0, [r7, #8]
 8006a9e:	f000 fa51 	bl	8006f44 <prvAddCurrentTaskToDelayedList>
	}
 8006aa2:	bf00      	nop
 8006aa4:	3718      	adds	r7, #24
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}
 8006aaa:	bf00      	nop
 8006aac:	20004568 	.word	0x20004568

08006ab0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b086      	sub	sp, #24
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	68db      	ldr	r3, [r3, #12]
 8006abc:	68db      	ldr	r3, [r3, #12]
 8006abe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d10a      	bne.n	8006adc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006ac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aca:	f383 8811 	msr	BASEPRI, r3
 8006ace:	f3bf 8f6f 	isb	sy
 8006ad2:	f3bf 8f4f 	dsb	sy
 8006ad6:	60fb      	str	r3, [r7, #12]
}
 8006ad8:	bf00      	nop
 8006ada:	e7fe      	b.n	8006ada <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	3318      	adds	r3, #24
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	f7fe fc21 	bl	8005328 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ae6:	4b1e      	ldr	r3, [pc, #120]	; (8006b60 <xTaskRemoveFromEventList+0xb0>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d11d      	bne.n	8006b2a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	3304      	adds	r3, #4
 8006af2:	4618      	mov	r0, r3
 8006af4:	f7fe fc18 	bl	8005328 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006afc:	4b19      	ldr	r3, [pc, #100]	; (8006b64 <xTaskRemoveFromEventList+0xb4>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	429a      	cmp	r2, r3
 8006b02:	d903      	bls.n	8006b0c <xTaskRemoveFromEventList+0x5c>
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b08:	4a16      	ldr	r2, [pc, #88]	; (8006b64 <xTaskRemoveFromEventList+0xb4>)
 8006b0a:	6013      	str	r3, [r2, #0]
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b10:	4613      	mov	r3, r2
 8006b12:	009b      	lsls	r3, r3, #2
 8006b14:	4413      	add	r3, r2
 8006b16:	009b      	lsls	r3, r3, #2
 8006b18:	4a13      	ldr	r2, [pc, #76]	; (8006b68 <xTaskRemoveFromEventList+0xb8>)
 8006b1a:	441a      	add	r2, r3
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	3304      	adds	r3, #4
 8006b20:	4619      	mov	r1, r3
 8006b22:	4610      	mov	r0, r2
 8006b24:	f7fe fba3 	bl	800526e <vListInsertEnd>
 8006b28:	e005      	b.n	8006b36 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	3318      	adds	r3, #24
 8006b2e:	4619      	mov	r1, r3
 8006b30:	480e      	ldr	r0, [pc, #56]	; (8006b6c <xTaskRemoveFromEventList+0xbc>)
 8006b32:	f7fe fb9c 	bl	800526e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b3a:	4b0d      	ldr	r3, [pc, #52]	; (8006b70 <xTaskRemoveFromEventList+0xc0>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b40:	429a      	cmp	r2, r3
 8006b42:	d905      	bls.n	8006b50 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006b44:	2301      	movs	r3, #1
 8006b46:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006b48:	4b0a      	ldr	r3, [pc, #40]	; (8006b74 <xTaskRemoveFromEventList+0xc4>)
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	601a      	str	r2, [r3, #0]
 8006b4e:	e001      	b.n	8006b54 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006b50:	2300      	movs	r3, #0
 8006b52:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006b54:	697b      	ldr	r3, [r7, #20]
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3718      	adds	r7, #24
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}
 8006b5e:	bf00      	nop
 8006b60:	20004a64 	.word	0x20004a64
 8006b64:	20004a44 	.word	0x20004a44
 8006b68:	2000456c 	.word	0x2000456c
 8006b6c:	200049fc 	.word	0x200049fc
 8006b70:	20004568 	.word	0x20004568
 8006b74:	20004a50 	.word	0x20004a50

08006b78 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b083      	sub	sp, #12
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006b80:	4b06      	ldr	r3, [pc, #24]	; (8006b9c <vTaskInternalSetTimeOutState+0x24>)
 8006b82:	681a      	ldr	r2, [r3, #0]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006b88:	4b05      	ldr	r3, [pc, #20]	; (8006ba0 <vTaskInternalSetTimeOutState+0x28>)
 8006b8a:	681a      	ldr	r2, [r3, #0]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	605a      	str	r2, [r3, #4]
}
 8006b90:	bf00      	nop
 8006b92:	370c      	adds	r7, #12
 8006b94:	46bd      	mov	sp, r7
 8006b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9a:	4770      	bx	lr
 8006b9c:	20004a54 	.word	0x20004a54
 8006ba0:	20004a40 	.word	0x20004a40

08006ba4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b088      	sub	sp, #32
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
 8006bac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d10a      	bne.n	8006bca <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bb8:	f383 8811 	msr	BASEPRI, r3
 8006bbc:	f3bf 8f6f 	isb	sy
 8006bc0:	f3bf 8f4f 	dsb	sy
 8006bc4:	613b      	str	r3, [r7, #16]
}
 8006bc6:	bf00      	nop
 8006bc8:	e7fe      	b.n	8006bc8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d10a      	bne.n	8006be6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bd4:	f383 8811 	msr	BASEPRI, r3
 8006bd8:	f3bf 8f6f 	isb	sy
 8006bdc:	f3bf 8f4f 	dsb	sy
 8006be0:	60fb      	str	r3, [r7, #12]
}
 8006be2:	bf00      	nop
 8006be4:	e7fe      	b.n	8006be4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006be6:	f7fe fcf5 	bl	80055d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006bea:	4b1d      	ldr	r3, [pc, #116]	; (8006c60 <xTaskCheckForTimeOut+0xbc>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	69ba      	ldr	r2, [r7, #24]
 8006bf6:	1ad3      	subs	r3, r2, r3
 8006bf8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c02:	d102      	bne.n	8006c0a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006c04:	2300      	movs	r3, #0
 8006c06:	61fb      	str	r3, [r7, #28]
 8006c08:	e023      	b.n	8006c52 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681a      	ldr	r2, [r3, #0]
 8006c0e:	4b15      	ldr	r3, [pc, #84]	; (8006c64 <xTaskCheckForTimeOut+0xc0>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	429a      	cmp	r2, r3
 8006c14:	d007      	beq.n	8006c26 <xTaskCheckForTimeOut+0x82>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	685b      	ldr	r3, [r3, #4]
 8006c1a:	69ba      	ldr	r2, [r7, #24]
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	d302      	bcc.n	8006c26 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006c20:	2301      	movs	r3, #1
 8006c22:	61fb      	str	r3, [r7, #28]
 8006c24:	e015      	b.n	8006c52 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	697a      	ldr	r2, [r7, #20]
 8006c2c:	429a      	cmp	r2, r3
 8006c2e:	d20b      	bcs.n	8006c48 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	681a      	ldr	r2, [r3, #0]
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	1ad2      	subs	r2, r2, r3
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f7ff ff9b 	bl	8006b78 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006c42:	2300      	movs	r3, #0
 8006c44:	61fb      	str	r3, [r7, #28]
 8006c46:	e004      	b.n	8006c52 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006c4e:	2301      	movs	r3, #1
 8006c50:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006c52:	f7fe fcef 	bl	8005634 <vPortExitCritical>

	return xReturn;
 8006c56:	69fb      	ldr	r3, [r7, #28]
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	3720      	adds	r7, #32
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}
 8006c60:	20004a40 	.word	0x20004a40
 8006c64:	20004a54 	.word	0x20004a54

08006c68 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006c68:	b480      	push	{r7}
 8006c6a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006c6c:	4b03      	ldr	r3, [pc, #12]	; (8006c7c <vTaskMissedYield+0x14>)
 8006c6e:	2201      	movs	r2, #1
 8006c70:	601a      	str	r2, [r3, #0]
}
 8006c72:	bf00      	nop
 8006c74:	46bd      	mov	sp, r7
 8006c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7a:	4770      	bx	lr
 8006c7c:	20004a50 	.word	0x20004a50

08006c80 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b082      	sub	sp, #8
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006c88:	f000 f852 	bl	8006d30 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006c8c:	4b06      	ldr	r3, [pc, #24]	; (8006ca8 <prvIdleTask+0x28>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	2b01      	cmp	r3, #1
 8006c92:	d9f9      	bls.n	8006c88 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006c94:	4b05      	ldr	r3, [pc, #20]	; (8006cac <prvIdleTask+0x2c>)
 8006c96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c9a:	601a      	str	r2, [r3, #0]
 8006c9c:	f3bf 8f4f 	dsb	sy
 8006ca0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006ca4:	e7f0      	b.n	8006c88 <prvIdleTask+0x8>
 8006ca6:	bf00      	nop
 8006ca8:	2000456c 	.word	0x2000456c
 8006cac:	e000ed04 	.word	0xe000ed04

08006cb0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b082      	sub	sp, #8
 8006cb4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	607b      	str	r3, [r7, #4]
 8006cba:	e00c      	b.n	8006cd6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006cbc:	687a      	ldr	r2, [r7, #4]
 8006cbe:	4613      	mov	r3, r2
 8006cc0:	009b      	lsls	r3, r3, #2
 8006cc2:	4413      	add	r3, r2
 8006cc4:	009b      	lsls	r3, r3, #2
 8006cc6:	4a12      	ldr	r2, [pc, #72]	; (8006d10 <prvInitialiseTaskLists+0x60>)
 8006cc8:	4413      	add	r3, r2
 8006cca:	4618      	mov	r0, r3
 8006ccc:	f7fe faa2 	bl	8005214 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	3301      	adds	r3, #1
 8006cd4:	607b      	str	r3, [r7, #4]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2b37      	cmp	r3, #55	; 0x37
 8006cda:	d9ef      	bls.n	8006cbc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006cdc:	480d      	ldr	r0, [pc, #52]	; (8006d14 <prvInitialiseTaskLists+0x64>)
 8006cde:	f7fe fa99 	bl	8005214 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006ce2:	480d      	ldr	r0, [pc, #52]	; (8006d18 <prvInitialiseTaskLists+0x68>)
 8006ce4:	f7fe fa96 	bl	8005214 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006ce8:	480c      	ldr	r0, [pc, #48]	; (8006d1c <prvInitialiseTaskLists+0x6c>)
 8006cea:	f7fe fa93 	bl	8005214 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006cee:	480c      	ldr	r0, [pc, #48]	; (8006d20 <prvInitialiseTaskLists+0x70>)
 8006cf0:	f7fe fa90 	bl	8005214 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006cf4:	480b      	ldr	r0, [pc, #44]	; (8006d24 <prvInitialiseTaskLists+0x74>)
 8006cf6:	f7fe fa8d 	bl	8005214 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006cfa:	4b0b      	ldr	r3, [pc, #44]	; (8006d28 <prvInitialiseTaskLists+0x78>)
 8006cfc:	4a05      	ldr	r2, [pc, #20]	; (8006d14 <prvInitialiseTaskLists+0x64>)
 8006cfe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006d00:	4b0a      	ldr	r3, [pc, #40]	; (8006d2c <prvInitialiseTaskLists+0x7c>)
 8006d02:	4a05      	ldr	r2, [pc, #20]	; (8006d18 <prvInitialiseTaskLists+0x68>)
 8006d04:	601a      	str	r2, [r3, #0]
}
 8006d06:	bf00      	nop
 8006d08:	3708      	adds	r7, #8
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}
 8006d0e:	bf00      	nop
 8006d10:	2000456c 	.word	0x2000456c
 8006d14:	200049cc 	.word	0x200049cc
 8006d18:	200049e0 	.word	0x200049e0
 8006d1c:	200049fc 	.word	0x200049fc
 8006d20:	20004a10 	.word	0x20004a10
 8006d24:	20004a28 	.word	0x20004a28
 8006d28:	200049f4 	.word	0x200049f4
 8006d2c:	200049f8 	.word	0x200049f8

08006d30 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b082      	sub	sp, #8
 8006d34:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006d36:	e019      	b.n	8006d6c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006d38:	f7fe fc4c 	bl	80055d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d3c:	4b10      	ldr	r3, [pc, #64]	; (8006d80 <prvCheckTasksWaitingTermination+0x50>)
 8006d3e:	68db      	ldr	r3, [r3, #12]
 8006d40:	68db      	ldr	r3, [r3, #12]
 8006d42:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	3304      	adds	r3, #4
 8006d48:	4618      	mov	r0, r3
 8006d4a:	f7fe faed 	bl	8005328 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006d4e:	4b0d      	ldr	r3, [pc, #52]	; (8006d84 <prvCheckTasksWaitingTermination+0x54>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	3b01      	subs	r3, #1
 8006d54:	4a0b      	ldr	r2, [pc, #44]	; (8006d84 <prvCheckTasksWaitingTermination+0x54>)
 8006d56:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006d58:	4b0b      	ldr	r3, [pc, #44]	; (8006d88 <prvCheckTasksWaitingTermination+0x58>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	3b01      	subs	r3, #1
 8006d5e:	4a0a      	ldr	r2, [pc, #40]	; (8006d88 <prvCheckTasksWaitingTermination+0x58>)
 8006d60:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006d62:	f7fe fc67 	bl	8005634 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f000 f810 	bl	8006d8c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006d6c:	4b06      	ldr	r3, [pc, #24]	; (8006d88 <prvCheckTasksWaitingTermination+0x58>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d1e1      	bne.n	8006d38 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006d74:	bf00      	nop
 8006d76:	bf00      	nop
 8006d78:	3708      	adds	r7, #8
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}
 8006d7e:	bf00      	nop
 8006d80:	20004a10 	.word	0x20004a10
 8006d84:	20004a3c 	.word	0x20004a3c
 8006d88:	20004a24 	.word	0x20004a24

08006d8c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b084      	sub	sp, #16
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d108      	bne.n	8006db0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006da2:	4618      	mov	r0, r3
 8006da4:	f7fe f918 	bl	8004fd8 <vPortFree>
				vPortFree( pxTCB );
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f7fe f915 	bl	8004fd8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006dae:	e018      	b.n	8006de2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006db6:	2b01      	cmp	r3, #1
 8006db8:	d103      	bne.n	8006dc2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006dba:	6878      	ldr	r0, [r7, #4]
 8006dbc:	f7fe f90c 	bl	8004fd8 <vPortFree>
	}
 8006dc0:	e00f      	b.n	8006de2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006dc8:	2b02      	cmp	r3, #2
 8006dca:	d00a      	beq.n	8006de2 <prvDeleteTCB+0x56>
	__asm volatile
 8006dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd0:	f383 8811 	msr	BASEPRI, r3
 8006dd4:	f3bf 8f6f 	isb	sy
 8006dd8:	f3bf 8f4f 	dsb	sy
 8006ddc:	60fb      	str	r3, [r7, #12]
}
 8006dde:	bf00      	nop
 8006de0:	e7fe      	b.n	8006de0 <prvDeleteTCB+0x54>
	}
 8006de2:	bf00      	nop
 8006de4:	3710      	adds	r7, #16
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}
	...

08006dec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006dec:	b480      	push	{r7}
 8006dee:	b083      	sub	sp, #12
 8006df0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006df2:	4b0c      	ldr	r3, [pc, #48]	; (8006e24 <prvResetNextTaskUnblockTime+0x38>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d104      	bne.n	8006e06 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006dfc:	4b0a      	ldr	r3, [pc, #40]	; (8006e28 <prvResetNextTaskUnblockTime+0x3c>)
 8006dfe:	f04f 32ff 	mov.w	r2, #4294967295
 8006e02:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006e04:	e008      	b.n	8006e18 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e06:	4b07      	ldr	r3, [pc, #28]	; (8006e24 <prvResetNextTaskUnblockTime+0x38>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	68db      	ldr	r3, [r3, #12]
 8006e0c:	68db      	ldr	r3, [r3, #12]
 8006e0e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	685b      	ldr	r3, [r3, #4]
 8006e14:	4a04      	ldr	r2, [pc, #16]	; (8006e28 <prvResetNextTaskUnblockTime+0x3c>)
 8006e16:	6013      	str	r3, [r2, #0]
}
 8006e18:	bf00      	nop
 8006e1a:	370c      	adds	r7, #12
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e22:	4770      	bx	lr
 8006e24:	200049f4 	.word	0x200049f4
 8006e28:	20004a5c 	.word	0x20004a5c

08006e2c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b083      	sub	sp, #12
 8006e30:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006e32:	4b0b      	ldr	r3, [pc, #44]	; (8006e60 <xTaskGetSchedulerState+0x34>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d102      	bne.n	8006e40 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	607b      	str	r3, [r7, #4]
 8006e3e:	e008      	b.n	8006e52 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e40:	4b08      	ldr	r3, [pc, #32]	; (8006e64 <xTaskGetSchedulerState+0x38>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d102      	bne.n	8006e4e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006e48:	2302      	movs	r3, #2
 8006e4a:	607b      	str	r3, [r7, #4]
 8006e4c:	e001      	b.n	8006e52 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006e52:	687b      	ldr	r3, [r7, #4]
	}
 8006e54:	4618      	mov	r0, r3
 8006e56:	370c      	adds	r7, #12
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5e:	4770      	bx	lr
 8006e60:	20004a48 	.word	0x20004a48
 8006e64:	20004a64 	.word	0x20004a64

08006e68 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b086      	sub	sp, #24
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006e74:	2300      	movs	r3, #0
 8006e76:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d056      	beq.n	8006f2c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006e7e:	4b2e      	ldr	r3, [pc, #184]	; (8006f38 <xTaskPriorityDisinherit+0xd0>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	693a      	ldr	r2, [r7, #16]
 8006e84:	429a      	cmp	r2, r3
 8006e86:	d00a      	beq.n	8006e9e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e8c:	f383 8811 	msr	BASEPRI, r3
 8006e90:	f3bf 8f6f 	isb	sy
 8006e94:	f3bf 8f4f 	dsb	sy
 8006e98:	60fb      	str	r3, [r7, #12]
}
 8006e9a:	bf00      	nop
 8006e9c:	e7fe      	b.n	8006e9c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006e9e:	693b      	ldr	r3, [r7, #16]
 8006ea0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d10a      	bne.n	8006ebc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eaa:	f383 8811 	msr	BASEPRI, r3
 8006eae:	f3bf 8f6f 	isb	sy
 8006eb2:	f3bf 8f4f 	dsb	sy
 8006eb6:	60bb      	str	r3, [r7, #8]
}
 8006eb8:	bf00      	nop
 8006eba:	e7fe      	b.n	8006eba <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006ebc:	693b      	ldr	r3, [r7, #16]
 8006ebe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ec0:	1e5a      	subs	r2, r3, #1
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ece:	429a      	cmp	r2, r3
 8006ed0:	d02c      	beq.n	8006f2c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d128      	bne.n	8006f2c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	3304      	adds	r3, #4
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f7fe fa22 	bl	8005328 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ef0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006efc:	4b0f      	ldr	r3, [pc, #60]	; (8006f3c <xTaskPriorityDisinherit+0xd4>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	429a      	cmp	r2, r3
 8006f02:	d903      	bls.n	8006f0c <xTaskPriorityDisinherit+0xa4>
 8006f04:	693b      	ldr	r3, [r7, #16]
 8006f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f08:	4a0c      	ldr	r2, [pc, #48]	; (8006f3c <xTaskPriorityDisinherit+0xd4>)
 8006f0a:	6013      	str	r3, [r2, #0]
 8006f0c:	693b      	ldr	r3, [r7, #16]
 8006f0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f10:	4613      	mov	r3, r2
 8006f12:	009b      	lsls	r3, r3, #2
 8006f14:	4413      	add	r3, r2
 8006f16:	009b      	lsls	r3, r3, #2
 8006f18:	4a09      	ldr	r2, [pc, #36]	; (8006f40 <xTaskPriorityDisinherit+0xd8>)
 8006f1a:	441a      	add	r2, r3
 8006f1c:	693b      	ldr	r3, [r7, #16]
 8006f1e:	3304      	adds	r3, #4
 8006f20:	4619      	mov	r1, r3
 8006f22:	4610      	mov	r0, r2
 8006f24:	f7fe f9a3 	bl	800526e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006f2c:	697b      	ldr	r3, [r7, #20]
	}
 8006f2e:	4618      	mov	r0, r3
 8006f30:	3718      	adds	r7, #24
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bd80      	pop	{r7, pc}
 8006f36:	bf00      	nop
 8006f38:	20004568 	.word	0x20004568
 8006f3c:	20004a44 	.word	0x20004a44
 8006f40:	2000456c 	.word	0x2000456c

08006f44 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b084      	sub	sp, #16
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
 8006f4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006f4e:	4b21      	ldr	r3, [pc, #132]	; (8006fd4 <prvAddCurrentTaskToDelayedList+0x90>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f54:	4b20      	ldr	r3, [pc, #128]	; (8006fd8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	3304      	adds	r3, #4
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	f7fe f9e4 	bl	8005328 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f66:	d10a      	bne.n	8006f7e <prvAddCurrentTaskToDelayedList+0x3a>
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d007      	beq.n	8006f7e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f6e:	4b1a      	ldr	r3, [pc, #104]	; (8006fd8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	3304      	adds	r3, #4
 8006f74:	4619      	mov	r1, r3
 8006f76:	4819      	ldr	r0, [pc, #100]	; (8006fdc <prvAddCurrentTaskToDelayedList+0x98>)
 8006f78:	f7fe f979 	bl	800526e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006f7c:	e026      	b.n	8006fcc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006f7e:	68fa      	ldr	r2, [r7, #12]
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	4413      	add	r3, r2
 8006f84:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006f86:	4b14      	ldr	r3, [pc, #80]	; (8006fd8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	68ba      	ldr	r2, [r7, #8]
 8006f8c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006f8e:	68ba      	ldr	r2, [r7, #8]
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	429a      	cmp	r2, r3
 8006f94:	d209      	bcs.n	8006faa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f96:	4b12      	ldr	r3, [pc, #72]	; (8006fe0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006f98:	681a      	ldr	r2, [r3, #0]
 8006f9a:	4b0f      	ldr	r3, [pc, #60]	; (8006fd8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	3304      	adds	r3, #4
 8006fa0:	4619      	mov	r1, r3
 8006fa2:	4610      	mov	r0, r2
 8006fa4:	f7fe f987 	bl	80052b6 <vListInsert>
}
 8006fa8:	e010      	b.n	8006fcc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006faa:	4b0e      	ldr	r3, [pc, #56]	; (8006fe4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006fac:	681a      	ldr	r2, [r3, #0]
 8006fae:	4b0a      	ldr	r3, [pc, #40]	; (8006fd8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	3304      	adds	r3, #4
 8006fb4:	4619      	mov	r1, r3
 8006fb6:	4610      	mov	r0, r2
 8006fb8:	f7fe f97d 	bl	80052b6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006fbc:	4b0a      	ldr	r3, [pc, #40]	; (8006fe8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	68ba      	ldr	r2, [r7, #8]
 8006fc2:	429a      	cmp	r2, r3
 8006fc4:	d202      	bcs.n	8006fcc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006fc6:	4a08      	ldr	r2, [pc, #32]	; (8006fe8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006fc8:	68bb      	ldr	r3, [r7, #8]
 8006fca:	6013      	str	r3, [r2, #0]
}
 8006fcc:	bf00      	nop
 8006fce:	3710      	adds	r7, #16
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bd80      	pop	{r7, pc}
 8006fd4:	20004a40 	.word	0x20004a40
 8006fd8:	20004568 	.word	0x20004568
 8006fdc:	20004a28 	.word	0x20004a28
 8006fe0:	200049f8 	.word	0x200049f8
 8006fe4:	200049f4 	.word	0x200049f4
 8006fe8:	20004a5c 	.word	0x20004a5c

08006fec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b08a      	sub	sp, #40	; 0x28
 8006ff0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006ff6:	f000 fb07 	bl	8007608 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006ffa:	4b1c      	ldr	r3, [pc, #112]	; (800706c <xTimerCreateTimerTask+0x80>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d021      	beq.n	8007046 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007002:	2300      	movs	r3, #0
 8007004:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007006:	2300      	movs	r3, #0
 8007008:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800700a:	1d3a      	adds	r2, r7, #4
 800700c:	f107 0108 	add.w	r1, r7, #8
 8007010:	f107 030c 	add.w	r3, r7, #12
 8007014:	4618      	mov	r0, r3
 8007016:	f7fd fef9 	bl	8004e0c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800701a:	6879      	ldr	r1, [r7, #4]
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	68fa      	ldr	r2, [r7, #12]
 8007020:	9202      	str	r2, [sp, #8]
 8007022:	9301      	str	r3, [sp, #4]
 8007024:	2302      	movs	r3, #2
 8007026:	9300      	str	r3, [sp, #0]
 8007028:	2300      	movs	r3, #0
 800702a:	460a      	mov	r2, r1
 800702c:	4910      	ldr	r1, [pc, #64]	; (8007070 <xTimerCreateTimerTask+0x84>)
 800702e:	4811      	ldr	r0, [pc, #68]	; (8007074 <xTimerCreateTimerTask+0x88>)
 8007030:	f7ff f8de 	bl	80061f0 <xTaskCreateStatic>
 8007034:	4603      	mov	r3, r0
 8007036:	4a10      	ldr	r2, [pc, #64]	; (8007078 <xTimerCreateTimerTask+0x8c>)
 8007038:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800703a:	4b0f      	ldr	r3, [pc, #60]	; (8007078 <xTimerCreateTimerTask+0x8c>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d001      	beq.n	8007046 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007042:	2301      	movs	r3, #1
 8007044:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d10a      	bne.n	8007062 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800704c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007050:	f383 8811 	msr	BASEPRI, r3
 8007054:	f3bf 8f6f 	isb	sy
 8007058:	f3bf 8f4f 	dsb	sy
 800705c:	613b      	str	r3, [r7, #16]
}
 800705e:	bf00      	nop
 8007060:	e7fe      	b.n	8007060 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007062:	697b      	ldr	r3, [r7, #20]
}
 8007064:	4618      	mov	r0, r3
 8007066:	3718      	adds	r7, #24
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}
 800706c:	20004a98 	.word	0x20004a98
 8007070:	080084bc 	.word	0x080084bc
 8007074:	080071b1 	.word	0x080071b1
 8007078:	20004a9c 	.word	0x20004a9c

0800707c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b08a      	sub	sp, #40	; 0x28
 8007080:	af00      	add	r7, sp, #0
 8007082:	60f8      	str	r0, [r7, #12]
 8007084:	60b9      	str	r1, [r7, #8]
 8007086:	607a      	str	r2, [r7, #4]
 8007088:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800708a:	2300      	movs	r3, #0
 800708c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d10a      	bne.n	80070aa <xTimerGenericCommand+0x2e>
	__asm volatile
 8007094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007098:	f383 8811 	msr	BASEPRI, r3
 800709c:	f3bf 8f6f 	isb	sy
 80070a0:	f3bf 8f4f 	dsb	sy
 80070a4:	623b      	str	r3, [r7, #32]
}
 80070a6:	bf00      	nop
 80070a8:	e7fe      	b.n	80070a8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80070aa:	4b1a      	ldr	r3, [pc, #104]	; (8007114 <xTimerGenericCommand+0x98>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d02a      	beq.n	8007108 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	2b05      	cmp	r3, #5
 80070c2:	dc18      	bgt.n	80070f6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80070c4:	f7ff feb2 	bl	8006e2c <xTaskGetSchedulerState>
 80070c8:	4603      	mov	r3, r0
 80070ca:	2b02      	cmp	r3, #2
 80070cc:	d109      	bne.n	80070e2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80070ce:	4b11      	ldr	r3, [pc, #68]	; (8007114 <xTimerGenericCommand+0x98>)
 80070d0:	6818      	ldr	r0, [r3, #0]
 80070d2:	f107 0110 	add.w	r1, r7, #16
 80070d6:	2300      	movs	r3, #0
 80070d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070da:	f7fe fca1 	bl	8005a20 <xQueueGenericSend>
 80070de:	6278      	str	r0, [r7, #36]	; 0x24
 80070e0:	e012      	b.n	8007108 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80070e2:	4b0c      	ldr	r3, [pc, #48]	; (8007114 <xTimerGenericCommand+0x98>)
 80070e4:	6818      	ldr	r0, [r3, #0]
 80070e6:	f107 0110 	add.w	r1, r7, #16
 80070ea:	2300      	movs	r3, #0
 80070ec:	2200      	movs	r2, #0
 80070ee:	f7fe fc97 	bl	8005a20 <xQueueGenericSend>
 80070f2:	6278      	str	r0, [r7, #36]	; 0x24
 80070f4:	e008      	b.n	8007108 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80070f6:	4b07      	ldr	r3, [pc, #28]	; (8007114 <xTimerGenericCommand+0x98>)
 80070f8:	6818      	ldr	r0, [r3, #0]
 80070fa:	f107 0110 	add.w	r1, r7, #16
 80070fe:	2300      	movs	r3, #0
 8007100:	683a      	ldr	r2, [r7, #0]
 8007102:	f7fe fd8b 	bl	8005c1c <xQueueGenericSendFromISR>
 8007106:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800710a:	4618      	mov	r0, r3
 800710c:	3728      	adds	r7, #40	; 0x28
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}
 8007112:	bf00      	nop
 8007114:	20004a98 	.word	0x20004a98

08007118 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b088      	sub	sp, #32
 800711c:	af02      	add	r7, sp, #8
 800711e:	6078      	str	r0, [r7, #4]
 8007120:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007122:	4b22      	ldr	r3, [pc, #136]	; (80071ac <prvProcessExpiredTimer+0x94>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	68db      	ldr	r3, [r3, #12]
 8007128:	68db      	ldr	r3, [r3, #12]
 800712a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	3304      	adds	r3, #4
 8007130:	4618      	mov	r0, r3
 8007132:	f7fe f8f9 	bl	8005328 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800713c:	f003 0304 	and.w	r3, r3, #4
 8007140:	2b00      	cmp	r3, #0
 8007142:	d022      	beq.n	800718a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	699a      	ldr	r2, [r3, #24]
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	18d1      	adds	r1, r2, r3
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	683a      	ldr	r2, [r7, #0]
 8007150:	6978      	ldr	r0, [r7, #20]
 8007152:	f000 f8d1 	bl	80072f8 <prvInsertTimerInActiveList>
 8007156:	4603      	mov	r3, r0
 8007158:	2b00      	cmp	r3, #0
 800715a:	d01f      	beq.n	800719c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800715c:	2300      	movs	r3, #0
 800715e:	9300      	str	r3, [sp, #0]
 8007160:	2300      	movs	r3, #0
 8007162:	687a      	ldr	r2, [r7, #4]
 8007164:	2100      	movs	r1, #0
 8007166:	6978      	ldr	r0, [r7, #20]
 8007168:	f7ff ff88 	bl	800707c <xTimerGenericCommand>
 800716c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d113      	bne.n	800719c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007178:	f383 8811 	msr	BASEPRI, r3
 800717c:	f3bf 8f6f 	isb	sy
 8007180:	f3bf 8f4f 	dsb	sy
 8007184:	60fb      	str	r3, [r7, #12]
}
 8007186:	bf00      	nop
 8007188:	e7fe      	b.n	8007188 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007190:	f023 0301 	bic.w	r3, r3, #1
 8007194:	b2da      	uxtb	r2, r3
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	6a1b      	ldr	r3, [r3, #32]
 80071a0:	6978      	ldr	r0, [r7, #20]
 80071a2:	4798      	blx	r3
}
 80071a4:	bf00      	nop
 80071a6:	3718      	adds	r7, #24
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}
 80071ac:	20004a90 	.word	0x20004a90

080071b0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b084      	sub	sp, #16
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80071b8:	f107 0308 	add.w	r3, r7, #8
 80071bc:	4618      	mov	r0, r3
 80071be:	f000 f857 	bl	8007270 <prvGetNextExpireTime>
 80071c2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	4619      	mov	r1, r3
 80071c8:	68f8      	ldr	r0, [r7, #12]
 80071ca:	f000 f803 	bl	80071d4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80071ce:	f000 f8d5 	bl	800737c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80071d2:	e7f1      	b.n	80071b8 <prvTimerTask+0x8>

080071d4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b084      	sub	sp, #16
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
 80071dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80071de:	f7ff fa43 	bl	8006668 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80071e2:	f107 0308 	add.w	r3, r7, #8
 80071e6:	4618      	mov	r0, r3
 80071e8:	f000 f866 	bl	80072b8 <prvSampleTimeNow>
 80071ec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d130      	bne.n	8007256 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d10a      	bne.n	8007210 <prvProcessTimerOrBlockTask+0x3c>
 80071fa:	687a      	ldr	r2, [r7, #4]
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	429a      	cmp	r2, r3
 8007200:	d806      	bhi.n	8007210 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007202:	f7ff fa3f 	bl	8006684 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007206:	68f9      	ldr	r1, [r7, #12]
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f7ff ff85 	bl	8007118 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800720e:	e024      	b.n	800725a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d008      	beq.n	8007228 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007216:	4b13      	ldr	r3, [pc, #76]	; (8007264 <prvProcessTimerOrBlockTask+0x90>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d101      	bne.n	8007224 <prvProcessTimerOrBlockTask+0x50>
 8007220:	2301      	movs	r3, #1
 8007222:	e000      	b.n	8007226 <prvProcessTimerOrBlockTask+0x52>
 8007224:	2300      	movs	r3, #0
 8007226:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007228:	4b0f      	ldr	r3, [pc, #60]	; (8007268 <prvProcessTimerOrBlockTask+0x94>)
 800722a:	6818      	ldr	r0, [r3, #0]
 800722c:	687a      	ldr	r2, [r7, #4]
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	1ad3      	subs	r3, r2, r3
 8007232:	683a      	ldr	r2, [r7, #0]
 8007234:	4619      	mov	r1, r3
 8007236:	f7fe ffa7 	bl	8006188 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800723a:	f7ff fa23 	bl	8006684 <xTaskResumeAll>
 800723e:	4603      	mov	r3, r0
 8007240:	2b00      	cmp	r3, #0
 8007242:	d10a      	bne.n	800725a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007244:	4b09      	ldr	r3, [pc, #36]	; (800726c <prvProcessTimerOrBlockTask+0x98>)
 8007246:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800724a:	601a      	str	r2, [r3, #0]
 800724c:	f3bf 8f4f 	dsb	sy
 8007250:	f3bf 8f6f 	isb	sy
}
 8007254:	e001      	b.n	800725a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007256:	f7ff fa15 	bl	8006684 <xTaskResumeAll>
}
 800725a:	bf00      	nop
 800725c:	3710      	adds	r7, #16
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}
 8007262:	bf00      	nop
 8007264:	20004a94 	.word	0x20004a94
 8007268:	20004a98 	.word	0x20004a98
 800726c:	e000ed04 	.word	0xe000ed04

08007270 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007270:	b480      	push	{r7}
 8007272:	b085      	sub	sp, #20
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007278:	4b0e      	ldr	r3, [pc, #56]	; (80072b4 <prvGetNextExpireTime+0x44>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d101      	bne.n	8007286 <prvGetNextExpireTime+0x16>
 8007282:	2201      	movs	r2, #1
 8007284:	e000      	b.n	8007288 <prvGetNextExpireTime+0x18>
 8007286:	2200      	movs	r2, #0
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d105      	bne.n	80072a0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007294:	4b07      	ldr	r3, [pc, #28]	; (80072b4 <prvGetNextExpireTime+0x44>)
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	68db      	ldr	r3, [r3, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	60fb      	str	r3, [r7, #12]
 800729e:	e001      	b.n	80072a4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80072a0:	2300      	movs	r3, #0
 80072a2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80072a4:	68fb      	ldr	r3, [r7, #12]
}
 80072a6:	4618      	mov	r0, r3
 80072a8:	3714      	adds	r7, #20
 80072aa:	46bd      	mov	sp, r7
 80072ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b0:	4770      	bx	lr
 80072b2:	bf00      	nop
 80072b4:	20004a90 	.word	0x20004a90

080072b8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b084      	sub	sp, #16
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80072c0:	f7ff fa7e 	bl	80067c0 <xTaskGetTickCount>
 80072c4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80072c6:	4b0b      	ldr	r3, [pc, #44]	; (80072f4 <prvSampleTimeNow+0x3c>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	68fa      	ldr	r2, [r7, #12]
 80072cc:	429a      	cmp	r2, r3
 80072ce:	d205      	bcs.n	80072dc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80072d0:	f000 f936 	bl	8007540 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2201      	movs	r2, #1
 80072d8:	601a      	str	r2, [r3, #0]
 80072da:	e002      	b.n	80072e2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2200      	movs	r2, #0
 80072e0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80072e2:	4a04      	ldr	r2, [pc, #16]	; (80072f4 <prvSampleTimeNow+0x3c>)
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80072e8:	68fb      	ldr	r3, [r7, #12]
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	3710      	adds	r7, #16
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}
 80072f2:	bf00      	nop
 80072f4:	20004aa0 	.word	0x20004aa0

080072f8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b086      	sub	sp, #24
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	60f8      	str	r0, [r7, #12]
 8007300:	60b9      	str	r1, [r7, #8]
 8007302:	607a      	str	r2, [r7, #4]
 8007304:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007306:	2300      	movs	r3, #0
 8007308:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	68ba      	ldr	r2, [r7, #8]
 800730e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	68fa      	ldr	r2, [r7, #12]
 8007314:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007316:	68ba      	ldr	r2, [r7, #8]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	429a      	cmp	r2, r3
 800731c:	d812      	bhi.n	8007344 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800731e:	687a      	ldr	r2, [r7, #4]
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	1ad2      	subs	r2, r2, r3
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	699b      	ldr	r3, [r3, #24]
 8007328:	429a      	cmp	r2, r3
 800732a:	d302      	bcc.n	8007332 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800732c:	2301      	movs	r3, #1
 800732e:	617b      	str	r3, [r7, #20]
 8007330:	e01b      	b.n	800736a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007332:	4b10      	ldr	r3, [pc, #64]	; (8007374 <prvInsertTimerInActiveList+0x7c>)
 8007334:	681a      	ldr	r2, [r3, #0]
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	3304      	adds	r3, #4
 800733a:	4619      	mov	r1, r3
 800733c:	4610      	mov	r0, r2
 800733e:	f7fd ffba 	bl	80052b6 <vListInsert>
 8007342:	e012      	b.n	800736a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007344:	687a      	ldr	r2, [r7, #4]
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	429a      	cmp	r2, r3
 800734a:	d206      	bcs.n	800735a <prvInsertTimerInActiveList+0x62>
 800734c:	68ba      	ldr	r2, [r7, #8]
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	429a      	cmp	r2, r3
 8007352:	d302      	bcc.n	800735a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007354:	2301      	movs	r3, #1
 8007356:	617b      	str	r3, [r7, #20]
 8007358:	e007      	b.n	800736a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800735a:	4b07      	ldr	r3, [pc, #28]	; (8007378 <prvInsertTimerInActiveList+0x80>)
 800735c:	681a      	ldr	r2, [r3, #0]
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	3304      	adds	r3, #4
 8007362:	4619      	mov	r1, r3
 8007364:	4610      	mov	r0, r2
 8007366:	f7fd ffa6 	bl	80052b6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800736a:	697b      	ldr	r3, [r7, #20]
}
 800736c:	4618      	mov	r0, r3
 800736e:	3718      	adds	r7, #24
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}
 8007374:	20004a94 	.word	0x20004a94
 8007378:	20004a90 	.word	0x20004a90

0800737c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b08e      	sub	sp, #56	; 0x38
 8007380:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007382:	e0ca      	b.n	800751a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2b00      	cmp	r3, #0
 8007388:	da18      	bge.n	80073bc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800738a:	1d3b      	adds	r3, r7, #4
 800738c:	3304      	adds	r3, #4
 800738e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007392:	2b00      	cmp	r3, #0
 8007394:	d10a      	bne.n	80073ac <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800739a:	f383 8811 	msr	BASEPRI, r3
 800739e:	f3bf 8f6f 	isb	sy
 80073a2:	f3bf 8f4f 	dsb	sy
 80073a6:	61fb      	str	r3, [r7, #28]
}
 80073a8:	bf00      	nop
 80073aa:	e7fe      	b.n	80073aa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80073ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80073b2:	6850      	ldr	r0, [r2, #4]
 80073b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80073b6:	6892      	ldr	r2, [r2, #8]
 80073b8:	4611      	mov	r1, r2
 80073ba:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	f2c0 80aa 	blt.w	8007518 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80073c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073ca:	695b      	ldr	r3, [r3, #20]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d004      	beq.n	80073da <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80073d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073d2:	3304      	adds	r3, #4
 80073d4:	4618      	mov	r0, r3
 80073d6:	f7fd ffa7 	bl	8005328 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80073da:	463b      	mov	r3, r7
 80073dc:	4618      	mov	r0, r3
 80073de:	f7ff ff6b 	bl	80072b8 <prvSampleTimeNow>
 80073e2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2b09      	cmp	r3, #9
 80073e8:	f200 8097 	bhi.w	800751a <prvProcessReceivedCommands+0x19e>
 80073ec:	a201      	add	r2, pc, #4	; (adr r2, 80073f4 <prvProcessReceivedCommands+0x78>)
 80073ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073f2:	bf00      	nop
 80073f4:	0800741d 	.word	0x0800741d
 80073f8:	0800741d 	.word	0x0800741d
 80073fc:	0800741d 	.word	0x0800741d
 8007400:	08007491 	.word	0x08007491
 8007404:	080074a5 	.word	0x080074a5
 8007408:	080074ef 	.word	0x080074ef
 800740c:	0800741d 	.word	0x0800741d
 8007410:	0800741d 	.word	0x0800741d
 8007414:	08007491 	.word	0x08007491
 8007418:	080074a5 	.word	0x080074a5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800741c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800741e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007422:	f043 0301 	orr.w	r3, r3, #1
 8007426:	b2da      	uxtb	r2, r3
 8007428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800742a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800742e:	68ba      	ldr	r2, [r7, #8]
 8007430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007432:	699b      	ldr	r3, [r3, #24]
 8007434:	18d1      	adds	r1, r2, r3
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800743a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800743c:	f7ff ff5c 	bl	80072f8 <prvInsertTimerInActiveList>
 8007440:	4603      	mov	r3, r0
 8007442:	2b00      	cmp	r3, #0
 8007444:	d069      	beq.n	800751a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007448:	6a1b      	ldr	r3, [r3, #32]
 800744a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800744c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800744e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007450:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007454:	f003 0304 	and.w	r3, r3, #4
 8007458:	2b00      	cmp	r3, #0
 800745a:	d05e      	beq.n	800751a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800745c:	68ba      	ldr	r2, [r7, #8]
 800745e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007460:	699b      	ldr	r3, [r3, #24]
 8007462:	441a      	add	r2, r3
 8007464:	2300      	movs	r3, #0
 8007466:	9300      	str	r3, [sp, #0]
 8007468:	2300      	movs	r3, #0
 800746a:	2100      	movs	r1, #0
 800746c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800746e:	f7ff fe05 	bl	800707c <xTimerGenericCommand>
 8007472:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007474:	6a3b      	ldr	r3, [r7, #32]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d14f      	bne.n	800751a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800747a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800747e:	f383 8811 	msr	BASEPRI, r3
 8007482:	f3bf 8f6f 	isb	sy
 8007486:	f3bf 8f4f 	dsb	sy
 800748a:	61bb      	str	r3, [r7, #24]
}
 800748c:	bf00      	nop
 800748e:	e7fe      	b.n	800748e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007492:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007496:	f023 0301 	bic.w	r3, r3, #1
 800749a:	b2da      	uxtb	r2, r3
 800749c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800749e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80074a2:	e03a      	b.n	800751a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80074a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80074aa:	f043 0301 	orr.w	r3, r3, #1
 80074ae:	b2da      	uxtb	r2, r3
 80074b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80074b6:	68ba      	ldr	r2, [r7, #8]
 80074b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ba:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80074bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074be:	699b      	ldr	r3, [r3, #24]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d10a      	bne.n	80074da <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80074c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074c8:	f383 8811 	msr	BASEPRI, r3
 80074cc:	f3bf 8f6f 	isb	sy
 80074d0:	f3bf 8f4f 	dsb	sy
 80074d4:	617b      	str	r3, [r7, #20]
}
 80074d6:	bf00      	nop
 80074d8:	e7fe      	b.n	80074d8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80074da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074dc:	699a      	ldr	r2, [r3, #24]
 80074de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074e0:	18d1      	adds	r1, r2, r3
 80074e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074e8:	f7ff ff06 	bl	80072f8 <prvInsertTimerInActiveList>
					break;
 80074ec:	e015      	b.n	800751a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80074ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80074f4:	f003 0302 	and.w	r3, r3, #2
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d103      	bne.n	8007504 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80074fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074fe:	f7fd fd6b 	bl	8004fd8 <vPortFree>
 8007502:	e00a      	b.n	800751a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007506:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800750a:	f023 0301 	bic.w	r3, r3, #1
 800750e:	b2da      	uxtb	r2, r3
 8007510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007512:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007516:	e000      	b.n	800751a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007518:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800751a:	4b08      	ldr	r3, [pc, #32]	; (800753c <prvProcessReceivedCommands+0x1c0>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	1d39      	adds	r1, r7, #4
 8007520:	2200      	movs	r2, #0
 8007522:	4618      	mov	r0, r3
 8007524:	f7fe fc16 	bl	8005d54 <xQueueReceive>
 8007528:	4603      	mov	r3, r0
 800752a:	2b00      	cmp	r3, #0
 800752c:	f47f af2a 	bne.w	8007384 <prvProcessReceivedCommands+0x8>
	}
}
 8007530:	bf00      	nop
 8007532:	bf00      	nop
 8007534:	3730      	adds	r7, #48	; 0x30
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}
 800753a:	bf00      	nop
 800753c:	20004a98 	.word	0x20004a98

08007540 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b088      	sub	sp, #32
 8007544:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007546:	e048      	b.n	80075da <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007548:	4b2d      	ldr	r3, [pc, #180]	; (8007600 <prvSwitchTimerLists+0xc0>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	68db      	ldr	r3, [r3, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007552:	4b2b      	ldr	r3, [pc, #172]	; (8007600 <prvSwitchTimerLists+0xc0>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	68db      	ldr	r3, [r3, #12]
 8007558:	68db      	ldr	r3, [r3, #12]
 800755a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	3304      	adds	r3, #4
 8007560:	4618      	mov	r0, r3
 8007562:	f7fd fee1 	bl	8005328 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	6a1b      	ldr	r3, [r3, #32]
 800756a:	68f8      	ldr	r0, [r7, #12]
 800756c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007574:	f003 0304 	and.w	r3, r3, #4
 8007578:	2b00      	cmp	r3, #0
 800757a:	d02e      	beq.n	80075da <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	699b      	ldr	r3, [r3, #24]
 8007580:	693a      	ldr	r2, [r7, #16]
 8007582:	4413      	add	r3, r2
 8007584:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007586:	68ba      	ldr	r2, [r7, #8]
 8007588:	693b      	ldr	r3, [r7, #16]
 800758a:	429a      	cmp	r2, r3
 800758c:	d90e      	bls.n	80075ac <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	68ba      	ldr	r2, [r7, #8]
 8007592:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	68fa      	ldr	r2, [r7, #12]
 8007598:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800759a:	4b19      	ldr	r3, [pc, #100]	; (8007600 <prvSwitchTimerLists+0xc0>)
 800759c:	681a      	ldr	r2, [r3, #0]
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	3304      	adds	r3, #4
 80075a2:	4619      	mov	r1, r3
 80075a4:	4610      	mov	r0, r2
 80075a6:	f7fd fe86 	bl	80052b6 <vListInsert>
 80075aa:	e016      	b.n	80075da <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80075ac:	2300      	movs	r3, #0
 80075ae:	9300      	str	r3, [sp, #0]
 80075b0:	2300      	movs	r3, #0
 80075b2:	693a      	ldr	r2, [r7, #16]
 80075b4:	2100      	movs	r1, #0
 80075b6:	68f8      	ldr	r0, [r7, #12]
 80075b8:	f7ff fd60 	bl	800707c <xTimerGenericCommand>
 80075bc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d10a      	bne.n	80075da <prvSwitchTimerLists+0x9a>
	__asm volatile
 80075c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075c8:	f383 8811 	msr	BASEPRI, r3
 80075cc:	f3bf 8f6f 	isb	sy
 80075d0:	f3bf 8f4f 	dsb	sy
 80075d4:	603b      	str	r3, [r7, #0]
}
 80075d6:	bf00      	nop
 80075d8:	e7fe      	b.n	80075d8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80075da:	4b09      	ldr	r3, [pc, #36]	; (8007600 <prvSwitchTimerLists+0xc0>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d1b1      	bne.n	8007548 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80075e4:	4b06      	ldr	r3, [pc, #24]	; (8007600 <prvSwitchTimerLists+0xc0>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80075ea:	4b06      	ldr	r3, [pc, #24]	; (8007604 <prvSwitchTimerLists+0xc4>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4a04      	ldr	r2, [pc, #16]	; (8007600 <prvSwitchTimerLists+0xc0>)
 80075f0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80075f2:	4a04      	ldr	r2, [pc, #16]	; (8007604 <prvSwitchTimerLists+0xc4>)
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	6013      	str	r3, [r2, #0]
}
 80075f8:	bf00      	nop
 80075fa:	3718      	adds	r7, #24
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bd80      	pop	{r7, pc}
 8007600:	20004a90 	.word	0x20004a90
 8007604:	20004a94 	.word	0x20004a94

08007608 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b082      	sub	sp, #8
 800760c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800760e:	f7fd ffe1 	bl	80055d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007612:	4b15      	ldr	r3, [pc, #84]	; (8007668 <prvCheckForValidListAndQueue+0x60>)
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d120      	bne.n	800765c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800761a:	4814      	ldr	r0, [pc, #80]	; (800766c <prvCheckForValidListAndQueue+0x64>)
 800761c:	f7fd fdfa 	bl	8005214 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007620:	4813      	ldr	r0, [pc, #76]	; (8007670 <prvCheckForValidListAndQueue+0x68>)
 8007622:	f7fd fdf7 	bl	8005214 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007626:	4b13      	ldr	r3, [pc, #76]	; (8007674 <prvCheckForValidListAndQueue+0x6c>)
 8007628:	4a10      	ldr	r2, [pc, #64]	; (800766c <prvCheckForValidListAndQueue+0x64>)
 800762a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800762c:	4b12      	ldr	r3, [pc, #72]	; (8007678 <prvCheckForValidListAndQueue+0x70>)
 800762e:	4a10      	ldr	r2, [pc, #64]	; (8007670 <prvCheckForValidListAndQueue+0x68>)
 8007630:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007632:	2300      	movs	r3, #0
 8007634:	9300      	str	r3, [sp, #0]
 8007636:	4b11      	ldr	r3, [pc, #68]	; (800767c <prvCheckForValidListAndQueue+0x74>)
 8007638:	4a11      	ldr	r2, [pc, #68]	; (8007680 <prvCheckForValidListAndQueue+0x78>)
 800763a:	2110      	movs	r1, #16
 800763c:	200a      	movs	r0, #10
 800763e:	f7fe f953 	bl	80058e8 <xQueueGenericCreateStatic>
 8007642:	4603      	mov	r3, r0
 8007644:	4a08      	ldr	r2, [pc, #32]	; (8007668 <prvCheckForValidListAndQueue+0x60>)
 8007646:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007648:	4b07      	ldr	r3, [pc, #28]	; (8007668 <prvCheckForValidListAndQueue+0x60>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d005      	beq.n	800765c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007650:	4b05      	ldr	r3, [pc, #20]	; (8007668 <prvCheckForValidListAndQueue+0x60>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	490b      	ldr	r1, [pc, #44]	; (8007684 <prvCheckForValidListAndQueue+0x7c>)
 8007656:	4618      	mov	r0, r3
 8007658:	f7fe fd6c 	bl	8006134 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800765c:	f7fd ffea 	bl	8005634 <vPortExitCritical>
}
 8007660:	bf00      	nop
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}
 8007666:	bf00      	nop
 8007668:	20004a98 	.word	0x20004a98
 800766c:	20004a68 	.word	0x20004a68
 8007670:	20004a7c 	.word	0x20004a7c
 8007674:	20004a90 	.word	0x20004a90
 8007678:	20004a94 	.word	0x20004a94
 800767c:	20004b44 	.word	0x20004b44
 8007680:	20004aa4 	.word	0x20004aa4
 8007684:	080084c4 	.word	0x080084c4

08007688 <OLED_Refresh_Gram>:

#include "../../PeripheralDriver/Inc/oledfont.h"

uint8_t OLED_GRAM[128][8];	 
void OLED_Refresh_Gram(void)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b082      	sub	sp, #8
 800768c:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 800768e:	2300      	movs	r3, #0
 8007690:	71fb      	strb	r3, [r7, #7]
 8007692:	e026      	b.n	80076e2 <OLED_Refresh_Gram+0x5a>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    
 8007694:	79fb      	ldrb	r3, [r7, #7]
 8007696:	3b50      	subs	r3, #80	; 0x50
 8007698:	b2db      	uxtb	r3, r3
 800769a:	2100      	movs	r1, #0
 800769c:	4618      	mov	r0, r3
 800769e:	f000 f82b 	bl	80076f8 <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      
 80076a2:	2100      	movs	r1, #0
 80076a4:	2000      	movs	r0, #0
 80076a6:	f000 f827 	bl	80076f8 <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);        
 80076aa:	2100      	movs	r1, #0
 80076ac:	2010      	movs	r0, #16
 80076ae:	f000 f823 	bl	80076f8 <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA); 
 80076b2:	2300      	movs	r3, #0
 80076b4:	71bb      	strb	r3, [r7, #6]
 80076b6:	e00d      	b.n	80076d4 <OLED_Refresh_Gram+0x4c>
 80076b8:	79ba      	ldrb	r2, [r7, #6]
 80076ba:	79fb      	ldrb	r3, [r7, #7]
 80076bc:	490d      	ldr	r1, [pc, #52]	; (80076f4 <OLED_Refresh_Gram+0x6c>)
 80076be:	00d2      	lsls	r2, r2, #3
 80076c0:	440a      	add	r2, r1
 80076c2:	4413      	add	r3, r2
 80076c4:	781b      	ldrb	r3, [r3, #0]
 80076c6:	2101      	movs	r1, #1
 80076c8:	4618      	mov	r0, r3
 80076ca:	f000 f815 	bl	80076f8 <OLED_WR_Byte>
 80076ce:	79bb      	ldrb	r3, [r7, #6]
 80076d0:	3301      	adds	r3, #1
 80076d2:	71bb      	strb	r3, [r7, #6]
 80076d4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	daed      	bge.n	80076b8 <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)  
 80076dc:	79fb      	ldrb	r3, [r7, #7]
 80076de:	3301      	adds	r3, #1
 80076e0:	71fb      	strb	r3, [r7, #7]
 80076e2:	79fb      	ldrb	r3, [r7, #7]
 80076e4:	2b07      	cmp	r3, #7
 80076e6:	d9d5      	bls.n	8007694 <OLED_Refresh_Gram+0xc>
	}   
}
 80076e8:	bf00      	nop
 80076ea:	bf00      	nop
 80076ec:	3708      	adds	r7, #8
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}
 80076f2:	bf00      	nop
 80076f4:	20004b94 	.word	0x20004b94

080076f8 <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{	
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b084      	sub	sp, #16
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	4603      	mov	r3, r0
 8007700:	460a      	mov	r2, r1
 8007702:	71fb      	strb	r3, [r7, #7]
 8007704:	4613      	mov	r3, r2
 8007706:	71bb      	strb	r3, [r7, #6]
	uint8_t i;			  
	if(cmd)
 8007708:	79bb      	ldrb	r3, [r7, #6]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d006      	beq.n	800771c <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 800770e:	2201      	movs	r2, #1
 8007710:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007714:	481c      	ldr	r0, [pc, #112]	; (8007788 <OLED_WR_Byte+0x90>)
 8007716:	f7fa fdff 	bl	8002318 <HAL_GPIO_WritePin>
 800771a:	e005      	b.n	8007728 <OLED_WR_Byte+0x30>
	else 
	  OLED_RS_Clr();		  
 800771c:	2200      	movs	r2, #0
 800771e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007722:	4819      	ldr	r0, [pc, #100]	; (8007788 <OLED_WR_Byte+0x90>)
 8007724:	f7fa fdf8 	bl	8002318 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 8007728:	2300      	movs	r3, #0
 800772a:	73fb      	strb	r3, [r7, #15]
 800772c:	e01e      	b.n	800776c <OLED_WR_Byte+0x74>
	{			  
		OLED_SCLK_Clr();
 800772e:	2200      	movs	r2, #0
 8007730:	2120      	movs	r1, #32
 8007732:	4815      	ldr	r0, [pc, #84]	; (8007788 <OLED_WR_Byte+0x90>)
 8007734:	f7fa fdf0 	bl	8002318 <HAL_GPIO_WritePin>
		if(dat&0x80)
 8007738:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800773c:	2b00      	cmp	r3, #0
 800773e:	da05      	bge.n	800774c <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 8007740:	2201      	movs	r2, #1
 8007742:	2140      	movs	r1, #64	; 0x40
 8007744:	4810      	ldr	r0, [pc, #64]	; (8007788 <OLED_WR_Byte+0x90>)
 8007746:	f7fa fde7 	bl	8002318 <HAL_GPIO_WritePin>
 800774a:	e004      	b.n	8007756 <OLED_WR_Byte+0x5e>
		else 
		   OLED_SDIN_Clr();
 800774c:	2200      	movs	r2, #0
 800774e:	2140      	movs	r1, #64	; 0x40
 8007750:	480d      	ldr	r0, [pc, #52]	; (8007788 <OLED_WR_Byte+0x90>)
 8007752:	f7fa fde1 	bl	8002318 <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 8007756:	2201      	movs	r2, #1
 8007758:	2120      	movs	r1, #32
 800775a:	480b      	ldr	r0, [pc, #44]	; (8007788 <OLED_WR_Byte+0x90>)
 800775c:	f7fa fddc 	bl	8002318 <HAL_GPIO_WritePin>
		dat<<=1;   
 8007760:	79fb      	ldrb	r3, [r7, #7]
 8007762:	005b      	lsls	r3, r3, #1
 8007764:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 8007766:	7bfb      	ldrb	r3, [r7, #15]
 8007768:	3301      	adds	r3, #1
 800776a:	73fb      	strb	r3, [r7, #15]
 800776c:	7bfb      	ldrb	r3, [r7, #15]
 800776e:	2b07      	cmp	r3, #7
 8007770:	d9dd      	bls.n	800772e <OLED_WR_Byte+0x36>
	}				 		  
	OLED_RS_Set();   	  
 8007772:	2201      	movs	r2, #1
 8007774:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007778:	4803      	ldr	r0, [pc, #12]	; (8007788 <OLED_WR_Byte+0x90>)
 800777a:	f7fa fdcd 	bl	8002318 <HAL_GPIO_WritePin>
} 
 800777e:	bf00      	nop
 8007780:	3710      	adds	r7, #16
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}
 8007786:	bf00      	nop
 8007788:	40021000 	.word	0x40021000

0800778c <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 800778c:	b580      	push	{r7, lr}
 800778e:	b082      	sub	sp, #8
 8007790:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 8007792:	2300      	movs	r3, #0
 8007794:	71fb      	strb	r3, [r7, #7]
 8007796:	e014      	b.n	80077c2 <OLED_Clear+0x36>
 8007798:	2300      	movs	r3, #0
 800779a:	71bb      	strb	r3, [r7, #6]
 800779c:	e00a      	b.n	80077b4 <OLED_Clear+0x28>
 800779e:	79ba      	ldrb	r2, [r7, #6]
 80077a0:	79fb      	ldrb	r3, [r7, #7]
 80077a2:	490c      	ldr	r1, [pc, #48]	; (80077d4 <OLED_Clear+0x48>)
 80077a4:	00d2      	lsls	r2, r2, #3
 80077a6:	440a      	add	r2, r1
 80077a8:	4413      	add	r3, r2
 80077aa:	2200      	movs	r2, #0
 80077ac:	701a      	strb	r2, [r3, #0]
 80077ae:	79bb      	ldrb	r3, [r7, #6]
 80077b0:	3301      	adds	r3, #1
 80077b2:	71bb      	strb	r3, [r7, #6]
 80077b4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	daf0      	bge.n	800779e <OLED_Clear+0x12>
 80077bc:	79fb      	ldrb	r3, [r7, #7]
 80077be:	3301      	adds	r3, #1
 80077c0:	71fb      	strb	r3, [r7, #7]
 80077c2:	79fb      	ldrb	r3, [r7, #7]
 80077c4:	2b07      	cmp	r3, #7
 80077c6:	d9e7      	bls.n	8007798 <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 80077c8:	f7ff ff5e 	bl	8007688 <OLED_Refresh_Gram>
}
 80077cc:	bf00      	nop
 80077ce:	3708      	adds	r7, #8
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bd80      	pop	{r7, pc}
 80077d4:	20004b94 	.word	0x20004b94

080077d8 <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 80077d8:	b480      	push	{r7}
 80077da:	b085      	sub	sp, #20
 80077dc:	af00      	add	r7, sp, #0
 80077de:	4603      	mov	r3, r0
 80077e0:	71fb      	strb	r3, [r7, #7]
 80077e2:	460b      	mov	r3, r1
 80077e4:	71bb      	strb	r3, [r7, #6]
 80077e6:	4613      	mov	r3, r2
 80077e8:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 80077ea:	2300      	movs	r3, #0
 80077ec:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 80077ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	db41      	blt.n	800787a <OLED_DrawPoint+0xa2>
 80077f6:	79bb      	ldrb	r3, [r7, #6]
 80077f8:	2b3f      	cmp	r3, #63	; 0x3f
 80077fa:	d83e      	bhi.n	800787a <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 80077fc:	79bb      	ldrb	r3, [r7, #6]
 80077fe:	08db      	lsrs	r3, r3, #3
 8007800:	b2db      	uxtb	r3, r3
 8007802:	f1c3 0307 	rsb	r3, r3, #7
 8007806:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 8007808:	79bb      	ldrb	r3, [r7, #6]
 800780a:	f003 0307 	and.w	r3, r3, #7
 800780e:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 8007810:	7b7b      	ldrb	r3, [r7, #13]
 8007812:	f1c3 0307 	rsb	r3, r3, #7
 8007816:	2201      	movs	r2, #1
 8007818:	fa02 f303 	lsl.w	r3, r2, r3
 800781c:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 800781e:	797b      	ldrb	r3, [r7, #5]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d012      	beq.n	800784a <OLED_DrawPoint+0x72>
 8007824:	79fa      	ldrb	r2, [r7, #7]
 8007826:	7bbb      	ldrb	r3, [r7, #14]
 8007828:	4917      	ldr	r1, [pc, #92]	; (8007888 <OLED_DrawPoint+0xb0>)
 800782a:	00d2      	lsls	r2, r2, #3
 800782c:	440a      	add	r2, r1
 800782e:	4413      	add	r3, r2
 8007830:	7818      	ldrb	r0, [r3, #0]
 8007832:	79fa      	ldrb	r2, [r7, #7]
 8007834:	7bbb      	ldrb	r3, [r7, #14]
 8007836:	7bf9      	ldrb	r1, [r7, #15]
 8007838:	4301      	orrs	r1, r0
 800783a:	b2c8      	uxtb	r0, r1
 800783c:	4912      	ldr	r1, [pc, #72]	; (8007888 <OLED_DrawPoint+0xb0>)
 800783e:	00d2      	lsls	r2, r2, #3
 8007840:	440a      	add	r2, r1
 8007842:	4413      	add	r3, r2
 8007844:	4602      	mov	r2, r0
 8007846:	701a      	strb	r2, [r3, #0]
 8007848:	e018      	b.n	800787c <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 800784a:	79fa      	ldrb	r2, [r7, #7]
 800784c:	7bbb      	ldrb	r3, [r7, #14]
 800784e:	490e      	ldr	r1, [pc, #56]	; (8007888 <OLED_DrawPoint+0xb0>)
 8007850:	00d2      	lsls	r2, r2, #3
 8007852:	440a      	add	r2, r1
 8007854:	4413      	add	r3, r2
 8007856:	781b      	ldrb	r3, [r3, #0]
 8007858:	b25a      	sxtb	r2, r3
 800785a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800785e:	43db      	mvns	r3, r3
 8007860:	b25b      	sxtb	r3, r3
 8007862:	4013      	ands	r3, r2
 8007864:	b259      	sxtb	r1, r3
 8007866:	79fa      	ldrb	r2, [r7, #7]
 8007868:	7bbb      	ldrb	r3, [r7, #14]
 800786a:	b2c8      	uxtb	r0, r1
 800786c:	4906      	ldr	r1, [pc, #24]	; (8007888 <OLED_DrawPoint+0xb0>)
 800786e:	00d2      	lsls	r2, r2, #3
 8007870:	440a      	add	r2, r1
 8007872:	4413      	add	r3, r2
 8007874:	4602      	mov	r2, r0
 8007876:	701a      	strb	r2, [r3, #0]
 8007878:	e000      	b.n	800787c <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 800787a:	bf00      	nop
}
 800787c:	3714      	adds	r7, #20
 800787e:	46bd      	mov	sp, r7
 8007880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007884:	4770      	bx	lr
 8007886:	bf00      	nop
 8007888:	20004b94 	.word	0x20004b94

0800788c <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 800788c:	b590      	push	{r4, r7, lr}
 800788e:	b085      	sub	sp, #20
 8007890:	af00      	add	r7, sp, #0
 8007892:	4604      	mov	r4, r0
 8007894:	4608      	mov	r0, r1
 8007896:	4611      	mov	r1, r2
 8007898:	461a      	mov	r2, r3
 800789a:	4623      	mov	r3, r4
 800789c:	71fb      	strb	r3, [r7, #7]
 800789e:	4603      	mov	r3, r0
 80078a0:	71bb      	strb	r3, [r7, #6]
 80078a2:	460b      	mov	r3, r1
 80078a4:	717b      	strb	r3, [r7, #5]
 80078a6:	4613      	mov	r3, r2
 80078a8:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 80078aa:	79bb      	ldrb	r3, [r7, #6]
 80078ac:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 80078ae:	797b      	ldrb	r3, [r7, #5]
 80078b0:	3b20      	subs	r3, #32
 80078b2:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 80078b4:	2300      	movs	r3, #0
 80078b6:	73bb      	strb	r3, [r7, #14]
 80078b8:	e04d      	b.n	8007956 <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 80078ba:	793b      	ldrb	r3, [r7, #4]
 80078bc:	2b0c      	cmp	r3, #12
 80078be:	d10b      	bne.n	80078d8 <OLED_ShowChar+0x4c>
 80078c0:	797a      	ldrb	r2, [r7, #5]
 80078c2:	7bb9      	ldrb	r1, [r7, #14]
 80078c4:	4828      	ldr	r0, [pc, #160]	; (8007968 <OLED_ShowChar+0xdc>)
 80078c6:	4613      	mov	r3, r2
 80078c8:	005b      	lsls	r3, r3, #1
 80078ca:	4413      	add	r3, r2
 80078cc:	009b      	lsls	r3, r3, #2
 80078ce:	4403      	add	r3, r0
 80078d0:	440b      	add	r3, r1
 80078d2:	781b      	ldrb	r3, [r3, #0]
 80078d4:	73fb      	strb	r3, [r7, #15]
 80078d6:	e007      	b.n	80078e8 <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 80078d8:	797a      	ldrb	r2, [r7, #5]
 80078da:	7bbb      	ldrb	r3, [r7, #14]
 80078dc:	4923      	ldr	r1, [pc, #140]	; (800796c <OLED_ShowChar+0xe0>)
 80078de:	0112      	lsls	r2, r2, #4
 80078e0:	440a      	add	r2, r1
 80078e2:	4413      	add	r3, r2
 80078e4:	781b      	ldrb	r3, [r3, #0]
 80078e6:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 80078e8:	2300      	movs	r3, #0
 80078ea:	737b      	strb	r3, [r7, #13]
 80078ec:	e02d      	b.n	800794a <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 80078ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	da07      	bge.n	8007906 <OLED_ShowChar+0x7a>
 80078f6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80078fa:	79b9      	ldrb	r1, [r7, #6]
 80078fc:	79fb      	ldrb	r3, [r7, #7]
 80078fe:	4618      	mov	r0, r3
 8007900:	f7ff ff6a 	bl	80077d8 <OLED_DrawPoint>
 8007904:	e00c      	b.n	8007920 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 8007906:	f897 3020 	ldrb.w	r3, [r7, #32]
 800790a:	2b00      	cmp	r3, #0
 800790c:	bf0c      	ite	eq
 800790e:	2301      	moveq	r3, #1
 8007910:	2300      	movne	r3, #0
 8007912:	b2db      	uxtb	r3, r3
 8007914:	461a      	mov	r2, r3
 8007916:	79b9      	ldrb	r1, [r7, #6]
 8007918:	79fb      	ldrb	r3, [r7, #7]
 800791a:	4618      	mov	r0, r3
 800791c:	f7ff ff5c 	bl	80077d8 <OLED_DrawPoint>
			temp<<=1;
 8007920:	7bfb      	ldrb	r3, [r7, #15]
 8007922:	005b      	lsls	r3, r3, #1
 8007924:	73fb      	strb	r3, [r7, #15]
			y++;
 8007926:	79bb      	ldrb	r3, [r7, #6]
 8007928:	3301      	adds	r3, #1
 800792a:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 800792c:	79ba      	ldrb	r2, [r7, #6]
 800792e:	7b3b      	ldrb	r3, [r7, #12]
 8007930:	1ad2      	subs	r2, r2, r3
 8007932:	793b      	ldrb	r3, [r7, #4]
 8007934:	429a      	cmp	r2, r3
 8007936:	d105      	bne.n	8007944 <OLED_ShowChar+0xb8>
			{
				y=y0;
 8007938:	7b3b      	ldrb	r3, [r7, #12]
 800793a:	71bb      	strb	r3, [r7, #6]
				x++;
 800793c:	79fb      	ldrb	r3, [r7, #7]
 800793e:	3301      	adds	r3, #1
 8007940:	71fb      	strb	r3, [r7, #7]
				break;
 8007942:	e005      	b.n	8007950 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 8007944:	7b7b      	ldrb	r3, [r7, #13]
 8007946:	3301      	adds	r3, #1
 8007948:	737b      	strb	r3, [r7, #13]
 800794a:	7b7b      	ldrb	r3, [r7, #13]
 800794c:	2b07      	cmp	r3, #7
 800794e:	d9ce      	bls.n	80078ee <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 8007950:	7bbb      	ldrb	r3, [r7, #14]
 8007952:	3301      	adds	r3, #1
 8007954:	73bb      	strb	r3, [r7, #14]
 8007956:	7bba      	ldrb	r2, [r7, #14]
 8007958:	793b      	ldrb	r3, [r7, #4]
 800795a:	429a      	cmp	r2, r3
 800795c:	d3ad      	bcc.n	80078ba <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 800795e:	bf00      	nop
 8007960:	bf00      	nop
 8007962:	3714      	adds	r7, #20
 8007964:	46bd      	mov	sp, r7
 8007966:	bd90      	pop	{r4, r7, pc}
 8007968:	08008574 	.word	0x08008574
 800796c:	080089e8 	.word	0x080089e8

08007970 <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b084      	sub	sp, #16
 8007974:	af02      	add	r7, sp, #8
 8007976:	4603      	mov	r3, r0
 8007978:	603a      	str	r2, [r7, #0]
 800797a:	71fb      	strb	r3, [r7, #7]
 800797c:	460b      	mov	r3, r1
 800797e:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 8007980:	e01f      	b.n	80079c2 <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 8007982:	79fb      	ldrb	r3, [r7, #7]
 8007984:	2b7a      	cmp	r3, #122	; 0x7a
 8007986:	d904      	bls.n	8007992 <OLED_ShowString+0x22>
 8007988:	2300      	movs	r3, #0
 800798a:	71fb      	strb	r3, [r7, #7]
 800798c:	79bb      	ldrb	r3, [r7, #6]
 800798e:	3310      	adds	r3, #16
 8007990:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 8007992:	79bb      	ldrb	r3, [r7, #6]
 8007994:	2b3a      	cmp	r3, #58	; 0x3a
 8007996:	d905      	bls.n	80079a4 <OLED_ShowString+0x34>
 8007998:	2300      	movs	r3, #0
 800799a:	71fb      	strb	r3, [r7, #7]
 800799c:	79fb      	ldrb	r3, [r7, #7]
 800799e:	71bb      	strb	r3, [r7, #6]
 80079a0:	f7ff fef4 	bl	800778c <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	781a      	ldrb	r2, [r3, #0]
 80079a8:	79b9      	ldrb	r1, [r7, #6]
 80079aa:	79f8      	ldrb	r0, [r7, #7]
 80079ac:	2301      	movs	r3, #1
 80079ae:	9300      	str	r3, [sp, #0]
 80079b0:	230c      	movs	r3, #12
 80079b2:	f7ff ff6b 	bl	800788c <OLED_ShowChar>
        x+=8;
 80079b6:	79fb      	ldrb	r3, [r7, #7]
 80079b8:	3308      	adds	r3, #8
 80079ba:	71fb      	strb	r3, [r7, #7]
        p++;
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	3301      	adds	r3, #1
 80079c0:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	781b      	ldrb	r3, [r3, #0]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d1db      	bne.n	8007982 <OLED_ShowString+0x12>
    }  
}	 
 80079ca:	bf00      	nop
 80079cc:	bf00      	nop
 80079ce:	3708      	adds	r7, #8
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}

080079d4 <OLED_Init>:

void OLED_Init(void)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 80079d8:	f7fa fcd2 	bl	8002380 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 80079dc:	4b41      	ldr	r3, [pc, #260]	; (8007ae4 <OLED_Init+0x110>)
 80079de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079e0:	4a40      	ldr	r2, [pc, #256]	; (8007ae4 <OLED_Init+0x110>)
 80079e2:	f023 0301 	bic.w	r3, r3, #1
 80079e6:	6713      	str	r3, [r2, #112]	; 0x70
 80079e8:	4b3e      	ldr	r3, [pc, #248]	; (8007ae4 <OLED_Init+0x110>)
 80079ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079ec:	4a3d      	ldr	r2, [pc, #244]	; (8007ae4 <OLED_Init+0x110>)
 80079ee:	f023 0304 	bic.w	r3, r3, #4
 80079f2:	6713      	str	r3, [r2, #112]	; 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 80079f4:	f7fa fcd8 	bl	80023a8 <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 80079f8:	2200      	movs	r2, #0
 80079fa:	2180      	movs	r1, #128	; 0x80
 80079fc:	483a      	ldr	r0, [pc, #232]	; (8007ae8 <OLED_Init+0x114>)
 80079fe:	f7fa fc8b 	bl	8002318 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8007a02:	2064      	movs	r0, #100	; 0x64
 8007a04:	f7fa f924 	bl	8001c50 <HAL_Delay>
	OLED_RST_Set();
 8007a08:	2201      	movs	r2, #1
 8007a0a:	2180      	movs	r1, #128	; 0x80
 8007a0c:	4836      	ldr	r0, [pc, #216]	; (8007ae8 <OLED_Init+0x114>)
 8007a0e:	f7fa fc83 	bl	8002318 <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 8007a12:	2100      	movs	r1, #0
 8007a14:	20ae      	movs	r0, #174	; 0xae
 8007a16:	f7ff fe6f 	bl	80076f8 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 8007a1a:	2100      	movs	r1, #0
 8007a1c:	20d5      	movs	r0, #213	; 0xd5
 8007a1e:	f7ff fe6b 	bl	80076f8 <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 8007a22:	2100      	movs	r1, #0
 8007a24:	2050      	movs	r0, #80	; 0x50
 8007a26:	f7ff fe67 	bl	80076f8 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 8007a2a:	2100      	movs	r1, #0
 8007a2c:	20a8      	movs	r0, #168	; 0xa8
 8007a2e:	f7ff fe63 	bl	80076f8 <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 8007a32:	2100      	movs	r1, #0
 8007a34:	203f      	movs	r0, #63	; 0x3f
 8007a36:	f7ff fe5f 	bl	80076f8 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 8007a3a:	2100      	movs	r1, #0
 8007a3c:	20d3      	movs	r0, #211	; 0xd3
 8007a3e:	f7ff fe5b 	bl	80076f8 <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 8007a42:	2100      	movs	r1, #0
 8007a44:	2000      	movs	r0, #0
 8007a46:	f7ff fe57 	bl	80076f8 <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 8007a4a:	2100      	movs	r1, #0
 8007a4c:	2040      	movs	r0, #64	; 0x40
 8007a4e:	f7ff fe53 	bl	80076f8 <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 8007a52:	2100      	movs	r1, #0
 8007a54:	208d      	movs	r0, #141	; 0x8d
 8007a56:	f7ff fe4f 	bl	80076f8 <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 8007a5a:	2100      	movs	r1, #0
 8007a5c:	2014      	movs	r0, #20
 8007a5e:	f7ff fe4b 	bl	80076f8 <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 8007a62:	2100      	movs	r1, #0
 8007a64:	2020      	movs	r0, #32
 8007a66:	f7ff fe47 	bl	80076f8 <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 8007a6a:	2100      	movs	r1, #0
 8007a6c:	2002      	movs	r0, #2
 8007a6e:	f7ff fe43 	bl	80076f8 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 8007a72:	2100      	movs	r1, #0
 8007a74:	20a1      	movs	r0, #161	; 0xa1
 8007a76:	f7ff fe3f 	bl	80076f8 <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 8007a7a:	2100      	movs	r1, #0
 8007a7c:	20c0      	movs	r0, #192	; 0xc0
 8007a7e:	f7ff fe3b 	bl	80076f8 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 8007a82:	2100      	movs	r1, #0
 8007a84:	20da      	movs	r0, #218	; 0xda
 8007a86:	f7ff fe37 	bl	80076f8 <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 8007a8a:	2100      	movs	r1, #0
 8007a8c:	2012      	movs	r0, #18
 8007a8e:	f7ff fe33 	bl	80076f8 <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 8007a92:	2100      	movs	r1, #0
 8007a94:	2081      	movs	r0, #129	; 0x81
 8007a96:	f7ff fe2f 	bl	80076f8 <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 8007a9a:	2100      	movs	r1, #0
 8007a9c:	20ef      	movs	r0, #239	; 0xef
 8007a9e:	f7ff fe2b 	bl	80076f8 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 8007aa2:	2100      	movs	r1, #0
 8007aa4:	20d9      	movs	r0, #217	; 0xd9
 8007aa6:	f7ff fe27 	bl	80076f8 <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 8007aaa:	2100      	movs	r1, #0
 8007aac:	20f1      	movs	r0, #241	; 0xf1
 8007aae:	f7ff fe23 	bl	80076f8 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 8007ab2:	2100      	movs	r1, #0
 8007ab4:	20db      	movs	r0, #219	; 0xdb
 8007ab6:	f7ff fe1f 	bl	80076f8 <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 8007aba:	2100      	movs	r1, #0
 8007abc:	2030      	movs	r0, #48	; 0x30
 8007abe:	f7ff fe1b 	bl	80076f8 <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 8007ac2:	2100      	movs	r1, #0
 8007ac4:	20a4      	movs	r0, #164	; 0xa4
 8007ac6:	f7ff fe17 	bl	80076f8 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 8007aca:	2100      	movs	r1, #0
 8007acc:	20a6      	movs	r0, #166	; 0xa6
 8007ace:	f7ff fe13 	bl	80076f8 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 8007ad2:	2100      	movs	r1, #0
 8007ad4:	20af      	movs	r0, #175	; 0xaf
 8007ad6:	f7ff fe0f 	bl	80076f8 <OLED_WR_Byte>
	OLED_Clear(); 
 8007ada:	f7ff fe57 	bl	800778c <OLED_Clear>
 8007ade:	bf00      	nop
 8007ae0:	bd80      	pop	{r7, pc}
 8007ae2:	bf00      	nop
 8007ae4:	40023800 	.word	0x40023800
 8007ae8:	40021000 	.word	0x40021000

08007aec <__errno>:
 8007aec:	4b01      	ldr	r3, [pc, #4]	; (8007af4 <__errno+0x8>)
 8007aee:	6818      	ldr	r0, [r3, #0]
 8007af0:	4770      	bx	lr
 8007af2:	bf00      	nop
 8007af4:	20000014 	.word	0x20000014

08007af8 <__libc_init_array>:
 8007af8:	b570      	push	{r4, r5, r6, lr}
 8007afa:	4d0d      	ldr	r5, [pc, #52]	; (8007b30 <__libc_init_array+0x38>)
 8007afc:	4c0d      	ldr	r4, [pc, #52]	; (8007b34 <__libc_init_array+0x3c>)
 8007afe:	1b64      	subs	r4, r4, r5
 8007b00:	10a4      	asrs	r4, r4, #2
 8007b02:	2600      	movs	r6, #0
 8007b04:	42a6      	cmp	r6, r4
 8007b06:	d109      	bne.n	8007b1c <__libc_init_array+0x24>
 8007b08:	4d0b      	ldr	r5, [pc, #44]	; (8007b38 <__libc_init_array+0x40>)
 8007b0a:	4c0c      	ldr	r4, [pc, #48]	; (8007b3c <__libc_init_array+0x44>)
 8007b0c:	f000 fc8e 	bl	800842c <_init>
 8007b10:	1b64      	subs	r4, r4, r5
 8007b12:	10a4      	asrs	r4, r4, #2
 8007b14:	2600      	movs	r6, #0
 8007b16:	42a6      	cmp	r6, r4
 8007b18:	d105      	bne.n	8007b26 <__libc_init_array+0x2e>
 8007b1a:	bd70      	pop	{r4, r5, r6, pc}
 8007b1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b20:	4798      	blx	r3
 8007b22:	3601      	adds	r6, #1
 8007b24:	e7ee      	b.n	8007b04 <__libc_init_array+0xc>
 8007b26:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b2a:	4798      	blx	r3
 8007b2c:	3601      	adds	r6, #1
 8007b2e:	e7f2      	b.n	8007b16 <__libc_init_array+0x1e>
 8007b30:	08009014 	.word	0x08009014
 8007b34:	08009014 	.word	0x08009014
 8007b38:	08009014 	.word	0x08009014
 8007b3c:	08009018 	.word	0x08009018

08007b40 <memcpy>:
 8007b40:	440a      	add	r2, r1
 8007b42:	4291      	cmp	r1, r2
 8007b44:	f100 33ff 	add.w	r3, r0, #4294967295
 8007b48:	d100      	bne.n	8007b4c <memcpy+0xc>
 8007b4a:	4770      	bx	lr
 8007b4c:	b510      	push	{r4, lr}
 8007b4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b52:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b56:	4291      	cmp	r1, r2
 8007b58:	d1f9      	bne.n	8007b4e <memcpy+0xe>
 8007b5a:	bd10      	pop	{r4, pc}

08007b5c <memset>:
 8007b5c:	4402      	add	r2, r0
 8007b5e:	4603      	mov	r3, r0
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d100      	bne.n	8007b66 <memset+0xa>
 8007b64:	4770      	bx	lr
 8007b66:	f803 1b01 	strb.w	r1, [r3], #1
 8007b6a:	e7f9      	b.n	8007b60 <memset+0x4>

08007b6c <siprintf>:
 8007b6c:	b40e      	push	{r1, r2, r3}
 8007b6e:	b500      	push	{lr}
 8007b70:	b09c      	sub	sp, #112	; 0x70
 8007b72:	ab1d      	add	r3, sp, #116	; 0x74
 8007b74:	9002      	str	r0, [sp, #8]
 8007b76:	9006      	str	r0, [sp, #24]
 8007b78:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007b7c:	4809      	ldr	r0, [pc, #36]	; (8007ba4 <siprintf+0x38>)
 8007b7e:	9107      	str	r1, [sp, #28]
 8007b80:	9104      	str	r1, [sp, #16]
 8007b82:	4909      	ldr	r1, [pc, #36]	; (8007ba8 <siprintf+0x3c>)
 8007b84:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b88:	9105      	str	r1, [sp, #20]
 8007b8a:	6800      	ldr	r0, [r0, #0]
 8007b8c:	9301      	str	r3, [sp, #4]
 8007b8e:	a902      	add	r1, sp, #8
 8007b90:	f000 f868 	bl	8007c64 <_svfiprintf_r>
 8007b94:	9b02      	ldr	r3, [sp, #8]
 8007b96:	2200      	movs	r2, #0
 8007b98:	701a      	strb	r2, [r3, #0]
 8007b9a:	b01c      	add	sp, #112	; 0x70
 8007b9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ba0:	b003      	add	sp, #12
 8007ba2:	4770      	bx	lr
 8007ba4:	20000014 	.word	0x20000014
 8007ba8:	ffff0208 	.word	0xffff0208

08007bac <__ssputs_r>:
 8007bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bb0:	688e      	ldr	r6, [r1, #8]
 8007bb2:	429e      	cmp	r6, r3
 8007bb4:	4682      	mov	sl, r0
 8007bb6:	460c      	mov	r4, r1
 8007bb8:	4690      	mov	r8, r2
 8007bba:	461f      	mov	r7, r3
 8007bbc:	d838      	bhi.n	8007c30 <__ssputs_r+0x84>
 8007bbe:	898a      	ldrh	r2, [r1, #12]
 8007bc0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007bc4:	d032      	beq.n	8007c2c <__ssputs_r+0x80>
 8007bc6:	6825      	ldr	r5, [r4, #0]
 8007bc8:	6909      	ldr	r1, [r1, #16]
 8007bca:	eba5 0901 	sub.w	r9, r5, r1
 8007bce:	6965      	ldr	r5, [r4, #20]
 8007bd0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007bd4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007bd8:	3301      	adds	r3, #1
 8007bda:	444b      	add	r3, r9
 8007bdc:	106d      	asrs	r5, r5, #1
 8007bde:	429d      	cmp	r5, r3
 8007be0:	bf38      	it	cc
 8007be2:	461d      	movcc	r5, r3
 8007be4:	0553      	lsls	r3, r2, #21
 8007be6:	d531      	bpl.n	8007c4c <__ssputs_r+0xa0>
 8007be8:	4629      	mov	r1, r5
 8007bea:	f000 fb55 	bl	8008298 <_malloc_r>
 8007bee:	4606      	mov	r6, r0
 8007bf0:	b950      	cbnz	r0, 8007c08 <__ssputs_r+0x5c>
 8007bf2:	230c      	movs	r3, #12
 8007bf4:	f8ca 3000 	str.w	r3, [sl]
 8007bf8:	89a3      	ldrh	r3, [r4, #12]
 8007bfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bfe:	81a3      	strh	r3, [r4, #12]
 8007c00:	f04f 30ff 	mov.w	r0, #4294967295
 8007c04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c08:	6921      	ldr	r1, [r4, #16]
 8007c0a:	464a      	mov	r2, r9
 8007c0c:	f7ff ff98 	bl	8007b40 <memcpy>
 8007c10:	89a3      	ldrh	r3, [r4, #12]
 8007c12:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007c16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c1a:	81a3      	strh	r3, [r4, #12]
 8007c1c:	6126      	str	r6, [r4, #16]
 8007c1e:	6165      	str	r5, [r4, #20]
 8007c20:	444e      	add	r6, r9
 8007c22:	eba5 0509 	sub.w	r5, r5, r9
 8007c26:	6026      	str	r6, [r4, #0]
 8007c28:	60a5      	str	r5, [r4, #8]
 8007c2a:	463e      	mov	r6, r7
 8007c2c:	42be      	cmp	r6, r7
 8007c2e:	d900      	bls.n	8007c32 <__ssputs_r+0x86>
 8007c30:	463e      	mov	r6, r7
 8007c32:	6820      	ldr	r0, [r4, #0]
 8007c34:	4632      	mov	r2, r6
 8007c36:	4641      	mov	r1, r8
 8007c38:	f000 faa8 	bl	800818c <memmove>
 8007c3c:	68a3      	ldr	r3, [r4, #8]
 8007c3e:	1b9b      	subs	r3, r3, r6
 8007c40:	60a3      	str	r3, [r4, #8]
 8007c42:	6823      	ldr	r3, [r4, #0]
 8007c44:	4433      	add	r3, r6
 8007c46:	6023      	str	r3, [r4, #0]
 8007c48:	2000      	movs	r0, #0
 8007c4a:	e7db      	b.n	8007c04 <__ssputs_r+0x58>
 8007c4c:	462a      	mov	r2, r5
 8007c4e:	f000 fb97 	bl	8008380 <_realloc_r>
 8007c52:	4606      	mov	r6, r0
 8007c54:	2800      	cmp	r0, #0
 8007c56:	d1e1      	bne.n	8007c1c <__ssputs_r+0x70>
 8007c58:	6921      	ldr	r1, [r4, #16]
 8007c5a:	4650      	mov	r0, sl
 8007c5c:	f000 fab0 	bl	80081c0 <_free_r>
 8007c60:	e7c7      	b.n	8007bf2 <__ssputs_r+0x46>
	...

08007c64 <_svfiprintf_r>:
 8007c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c68:	4698      	mov	r8, r3
 8007c6a:	898b      	ldrh	r3, [r1, #12]
 8007c6c:	061b      	lsls	r3, r3, #24
 8007c6e:	b09d      	sub	sp, #116	; 0x74
 8007c70:	4607      	mov	r7, r0
 8007c72:	460d      	mov	r5, r1
 8007c74:	4614      	mov	r4, r2
 8007c76:	d50e      	bpl.n	8007c96 <_svfiprintf_r+0x32>
 8007c78:	690b      	ldr	r3, [r1, #16]
 8007c7a:	b963      	cbnz	r3, 8007c96 <_svfiprintf_r+0x32>
 8007c7c:	2140      	movs	r1, #64	; 0x40
 8007c7e:	f000 fb0b 	bl	8008298 <_malloc_r>
 8007c82:	6028      	str	r0, [r5, #0]
 8007c84:	6128      	str	r0, [r5, #16]
 8007c86:	b920      	cbnz	r0, 8007c92 <_svfiprintf_r+0x2e>
 8007c88:	230c      	movs	r3, #12
 8007c8a:	603b      	str	r3, [r7, #0]
 8007c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8007c90:	e0d1      	b.n	8007e36 <_svfiprintf_r+0x1d2>
 8007c92:	2340      	movs	r3, #64	; 0x40
 8007c94:	616b      	str	r3, [r5, #20]
 8007c96:	2300      	movs	r3, #0
 8007c98:	9309      	str	r3, [sp, #36]	; 0x24
 8007c9a:	2320      	movs	r3, #32
 8007c9c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007ca0:	f8cd 800c 	str.w	r8, [sp, #12]
 8007ca4:	2330      	movs	r3, #48	; 0x30
 8007ca6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007e50 <_svfiprintf_r+0x1ec>
 8007caa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007cae:	f04f 0901 	mov.w	r9, #1
 8007cb2:	4623      	mov	r3, r4
 8007cb4:	469a      	mov	sl, r3
 8007cb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007cba:	b10a      	cbz	r2, 8007cc0 <_svfiprintf_r+0x5c>
 8007cbc:	2a25      	cmp	r2, #37	; 0x25
 8007cbe:	d1f9      	bne.n	8007cb4 <_svfiprintf_r+0x50>
 8007cc0:	ebba 0b04 	subs.w	fp, sl, r4
 8007cc4:	d00b      	beq.n	8007cde <_svfiprintf_r+0x7a>
 8007cc6:	465b      	mov	r3, fp
 8007cc8:	4622      	mov	r2, r4
 8007cca:	4629      	mov	r1, r5
 8007ccc:	4638      	mov	r0, r7
 8007cce:	f7ff ff6d 	bl	8007bac <__ssputs_r>
 8007cd2:	3001      	adds	r0, #1
 8007cd4:	f000 80aa 	beq.w	8007e2c <_svfiprintf_r+0x1c8>
 8007cd8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007cda:	445a      	add	r2, fp
 8007cdc:	9209      	str	r2, [sp, #36]	; 0x24
 8007cde:	f89a 3000 	ldrb.w	r3, [sl]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	f000 80a2 	beq.w	8007e2c <_svfiprintf_r+0x1c8>
 8007ce8:	2300      	movs	r3, #0
 8007cea:	f04f 32ff 	mov.w	r2, #4294967295
 8007cee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007cf2:	f10a 0a01 	add.w	sl, sl, #1
 8007cf6:	9304      	str	r3, [sp, #16]
 8007cf8:	9307      	str	r3, [sp, #28]
 8007cfa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007cfe:	931a      	str	r3, [sp, #104]	; 0x68
 8007d00:	4654      	mov	r4, sl
 8007d02:	2205      	movs	r2, #5
 8007d04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d08:	4851      	ldr	r0, [pc, #324]	; (8007e50 <_svfiprintf_r+0x1ec>)
 8007d0a:	f7f8 fa61 	bl	80001d0 <memchr>
 8007d0e:	9a04      	ldr	r2, [sp, #16]
 8007d10:	b9d8      	cbnz	r0, 8007d4a <_svfiprintf_r+0xe6>
 8007d12:	06d0      	lsls	r0, r2, #27
 8007d14:	bf44      	itt	mi
 8007d16:	2320      	movmi	r3, #32
 8007d18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d1c:	0711      	lsls	r1, r2, #28
 8007d1e:	bf44      	itt	mi
 8007d20:	232b      	movmi	r3, #43	; 0x2b
 8007d22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007d26:	f89a 3000 	ldrb.w	r3, [sl]
 8007d2a:	2b2a      	cmp	r3, #42	; 0x2a
 8007d2c:	d015      	beq.n	8007d5a <_svfiprintf_r+0xf6>
 8007d2e:	9a07      	ldr	r2, [sp, #28]
 8007d30:	4654      	mov	r4, sl
 8007d32:	2000      	movs	r0, #0
 8007d34:	f04f 0c0a 	mov.w	ip, #10
 8007d38:	4621      	mov	r1, r4
 8007d3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d3e:	3b30      	subs	r3, #48	; 0x30
 8007d40:	2b09      	cmp	r3, #9
 8007d42:	d94e      	bls.n	8007de2 <_svfiprintf_r+0x17e>
 8007d44:	b1b0      	cbz	r0, 8007d74 <_svfiprintf_r+0x110>
 8007d46:	9207      	str	r2, [sp, #28]
 8007d48:	e014      	b.n	8007d74 <_svfiprintf_r+0x110>
 8007d4a:	eba0 0308 	sub.w	r3, r0, r8
 8007d4e:	fa09 f303 	lsl.w	r3, r9, r3
 8007d52:	4313      	orrs	r3, r2
 8007d54:	9304      	str	r3, [sp, #16]
 8007d56:	46a2      	mov	sl, r4
 8007d58:	e7d2      	b.n	8007d00 <_svfiprintf_r+0x9c>
 8007d5a:	9b03      	ldr	r3, [sp, #12]
 8007d5c:	1d19      	adds	r1, r3, #4
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	9103      	str	r1, [sp, #12]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	bfbb      	ittet	lt
 8007d66:	425b      	neglt	r3, r3
 8007d68:	f042 0202 	orrlt.w	r2, r2, #2
 8007d6c:	9307      	strge	r3, [sp, #28]
 8007d6e:	9307      	strlt	r3, [sp, #28]
 8007d70:	bfb8      	it	lt
 8007d72:	9204      	strlt	r2, [sp, #16]
 8007d74:	7823      	ldrb	r3, [r4, #0]
 8007d76:	2b2e      	cmp	r3, #46	; 0x2e
 8007d78:	d10c      	bne.n	8007d94 <_svfiprintf_r+0x130>
 8007d7a:	7863      	ldrb	r3, [r4, #1]
 8007d7c:	2b2a      	cmp	r3, #42	; 0x2a
 8007d7e:	d135      	bne.n	8007dec <_svfiprintf_r+0x188>
 8007d80:	9b03      	ldr	r3, [sp, #12]
 8007d82:	1d1a      	adds	r2, r3, #4
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	9203      	str	r2, [sp, #12]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	bfb8      	it	lt
 8007d8c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007d90:	3402      	adds	r4, #2
 8007d92:	9305      	str	r3, [sp, #20]
 8007d94:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007e60 <_svfiprintf_r+0x1fc>
 8007d98:	7821      	ldrb	r1, [r4, #0]
 8007d9a:	2203      	movs	r2, #3
 8007d9c:	4650      	mov	r0, sl
 8007d9e:	f7f8 fa17 	bl	80001d0 <memchr>
 8007da2:	b140      	cbz	r0, 8007db6 <_svfiprintf_r+0x152>
 8007da4:	2340      	movs	r3, #64	; 0x40
 8007da6:	eba0 000a 	sub.w	r0, r0, sl
 8007daa:	fa03 f000 	lsl.w	r0, r3, r0
 8007dae:	9b04      	ldr	r3, [sp, #16]
 8007db0:	4303      	orrs	r3, r0
 8007db2:	3401      	adds	r4, #1
 8007db4:	9304      	str	r3, [sp, #16]
 8007db6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007dba:	4826      	ldr	r0, [pc, #152]	; (8007e54 <_svfiprintf_r+0x1f0>)
 8007dbc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007dc0:	2206      	movs	r2, #6
 8007dc2:	f7f8 fa05 	bl	80001d0 <memchr>
 8007dc6:	2800      	cmp	r0, #0
 8007dc8:	d038      	beq.n	8007e3c <_svfiprintf_r+0x1d8>
 8007dca:	4b23      	ldr	r3, [pc, #140]	; (8007e58 <_svfiprintf_r+0x1f4>)
 8007dcc:	bb1b      	cbnz	r3, 8007e16 <_svfiprintf_r+0x1b2>
 8007dce:	9b03      	ldr	r3, [sp, #12]
 8007dd0:	3307      	adds	r3, #7
 8007dd2:	f023 0307 	bic.w	r3, r3, #7
 8007dd6:	3308      	adds	r3, #8
 8007dd8:	9303      	str	r3, [sp, #12]
 8007dda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ddc:	4433      	add	r3, r6
 8007dde:	9309      	str	r3, [sp, #36]	; 0x24
 8007de0:	e767      	b.n	8007cb2 <_svfiprintf_r+0x4e>
 8007de2:	fb0c 3202 	mla	r2, ip, r2, r3
 8007de6:	460c      	mov	r4, r1
 8007de8:	2001      	movs	r0, #1
 8007dea:	e7a5      	b.n	8007d38 <_svfiprintf_r+0xd4>
 8007dec:	2300      	movs	r3, #0
 8007dee:	3401      	adds	r4, #1
 8007df0:	9305      	str	r3, [sp, #20]
 8007df2:	4619      	mov	r1, r3
 8007df4:	f04f 0c0a 	mov.w	ip, #10
 8007df8:	4620      	mov	r0, r4
 8007dfa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007dfe:	3a30      	subs	r2, #48	; 0x30
 8007e00:	2a09      	cmp	r2, #9
 8007e02:	d903      	bls.n	8007e0c <_svfiprintf_r+0x1a8>
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d0c5      	beq.n	8007d94 <_svfiprintf_r+0x130>
 8007e08:	9105      	str	r1, [sp, #20]
 8007e0a:	e7c3      	b.n	8007d94 <_svfiprintf_r+0x130>
 8007e0c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007e10:	4604      	mov	r4, r0
 8007e12:	2301      	movs	r3, #1
 8007e14:	e7f0      	b.n	8007df8 <_svfiprintf_r+0x194>
 8007e16:	ab03      	add	r3, sp, #12
 8007e18:	9300      	str	r3, [sp, #0]
 8007e1a:	462a      	mov	r2, r5
 8007e1c:	4b0f      	ldr	r3, [pc, #60]	; (8007e5c <_svfiprintf_r+0x1f8>)
 8007e1e:	a904      	add	r1, sp, #16
 8007e20:	4638      	mov	r0, r7
 8007e22:	f3af 8000 	nop.w
 8007e26:	1c42      	adds	r2, r0, #1
 8007e28:	4606      	mov	r6, r0
 8007e2a:	d1d6      	bne.n	8007dda <_svfiprintf_r+0x176>
 8007e2c:	89ab      	ldrh	r3, [r5, #12]
 8007e2e:	065b      	lsls	r3, r3, #25
 8007e30:	f53f af2c 	bmi.w	8007c8c <_svfiprintf_r+0x28>
 8007e34:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007e36:	b01d      	add	sp, #116	; 0x74
 8007e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e3c:	ab03      	add	r3, sp, #12
 8007e3e:	9300      	str	r3, [sp, #0]
 8007e40:	462a      	mov	r2, r5
 8007e42:	4b06      	ldr	r3, [pc, #24]	; (8007e5c <_svfiprintf_r+0x1f8>)
 8007e44:	a904      	add	r1, sp, #16
 8007e46:	4638      	mov	r0, r7
 8007e48:	f000 f87a 	bl	8007f40 <_printf_i>
 8007e4c:	e7eb      	b.n	8007e26 <_svfiprintf_r+0x1c2>
 8007e4e:	bf00      	nop
 8007e50:	08008fd8 	.word	0x08008fd8
 8007e54:	08008fe2 	.word	0x08008fe2
 8007e58:	00000000 	.word	0x00000000
 8007e5c:	08007bad 	.word	0x08007bad
 8007e60:	08008fde 	.word	0x08008fde

08007e64 <_printf_common>:
 8007e64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e68:	4616      	mov	r6, r2
 8007e6a:	4699      	mov	r9, r3
 8007e6c:	688a      	ldr	r2, [r1, #8]
 8007e6e:	690b      	ldr	r3, [r1, #16]
 8007e70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007e74:	4293      	cmp	r3, r2
 8007e76:	bfb8      	it	lt
 8007e78:	4613      	movlt	r3, r2
 8007e7a:	6033      	str	r3, [r6, #0]
 8007e7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007e80:	4607      	mov	r7, r0
 8007e82:	460c      	mov	r4, r1
 8007e84:	b10a      	cbz	r2, 8007e8a <_printf_common+0x26>
 8007e86:	3301      	adds	r3, #1
 8007e88:	6033      	str	r3, [r6, #0]
 8007e8a:	6823      	ldr	r3, [r4, #0]
 8007e8c:	0699      	lsls	r1, r3, #26
 8007e8e:	bf42      	ittt	mi
 8007e90:	6833      	ldrmi	r3, [r6, #0]
 8007e92:	3302      	addmi	r3, #2
 8007e94:	6033      	strmi	r3, [r6, #0]
 8007e96:	6825      	ldr	r5, [r4, #0]
 8007e98:	f015 0506 	ands.w	r5, r5, #6
 8007e9c:	d106      	bne.n	8007eac <_printf_common+0x48>
 8007e9e:	f104 0a19 	add.w	sl, r4, #25
 8007ea2:	68e3      	ldr	r3, [r4, #12]
 8007ea4:	6832      	ldr	r2, [r6, #0]
 8007ea6:	1a9b      	subs	r3, r3, r2
 8007ea8:	42ab      	cmp	r3, r5
 8007eaa:	dc26      	bgt.n	8007efa <_printf_common+0x96>
 8007eac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007eb0:	1e13      	subs	r3, r2, #0
 8007eb2:	6822      	ldr	r2, [r4, #0]
 8007eb4:	bf18      	it	ne
 8007eb6:	2301      	movne	r3, #1
 8007eb8:	0692      	lsls	r2, r2, #26
 8007eba:	d42b      	bmi.n	8007f14 <_printf_common+0xb0>
 8007ebc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007ec0:	4649      	mov	r1, r9
 8007ec2:	4638      	mov	r0, r7
 8007ec4:	47c0      	blx	r8
 8007ec6:	3001      	adds	r0, #1
 8007ec8:	d01e      	beq.n	8007f08 <_printf_common+0xa4>
 8007eca:	6823      	ldr	r3, [r4, #0]
 8007ecc:	68e5      	ldr	r5, [r4, #12]
 8007ece:	6832      	ldr	r2, [r6, #0]
 8007ed0:	f003 0306 	and.w	r3, r3, #6
 8007ed4:	2b04      	cmp	r3, #4
 8007ed6:	bf08      	it	eq
 8007ed8:	1aad      	subeq	r5, r5, r2
 8007eda:	68a3      	ldr	r3, [r4, #8]
 8007edc:	6922      	ldr	r2, [r4, #16]
 8007ede:	bf0c      	ite	eq
 8007ee0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ee4:	2500      	movne	r5, #0
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	bfc4      	itt	gt
 8007eea:	1a9b      	subgt	r3, r3, r2
 8007eec:	18ed      	addgt	r5, r5, r3
 8007eee:	2600      	movs	r6, #0
 8007ef0:	341a      	adds	r4, #26
 8007ef2:	42b5      	cmp	r5, r6
 8007ef4:	d11a      	bne.n	8007f2c <_printf_common+0xc8>
 8007ef6:	2000      	movs	r0, #0
 8007ef8:	e008      	b.n	8007f0c <_printf_common+0xa8>
 8007efa:	2301      	movs	r3, #1
 8007efc:	4652      	mov	r2, sl
 8007efe:	4649      	mov	r1, r9
 8007f00:	4638      	mov	r0, r7
 8007f02:	47c0      	blx	r8
 8007f04:	3001      	adds	r0, #1
 8007f06:	d103      	bne.n	8007f10 <_printf_common+0xac>
 8007f08:	f04f 30ff 	mov.w	r0, #4294967295
 8007f0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f10:	3501      	adds	r5, #1
 8007f12:	e7c6      	b.n	8007ea2 <_printf_common+0x3e>
 8007f14:	18e1      	adds	r1, r4, r3
 8007f16:	1c5a      	adds	r2, r3, #1
 8007f18:	2030      	movs	r0, #48	; 0x30
 8007f1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007f1e:	4422      	add	r2, r4
 8007f20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007f24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007f28:	3302      	adds	r3, #2
 8007f2a:	e7c7      	b.n	8007ebc <_printf_common+0x58>
 8007f2c:	2301      	movs	r3, #1
 8007f2e:	4622      	mov	r2, r4
 8007f30:	4649      	mov	r1, r9
 8007f32:	4638      	mov	r0, r7
 8007f34:	47c0      	blx	r8
 8007f36:	3001      	adds	r0, #1
 8007f38:	d0e6      	beq.n	8007f08 <_printf_common+0xa4>
 8007f3a:	3601      	adds	r6, #1
 8007f3c:	e7d9      	b.n	8007ef2 <_printf_common+0x8e>
	...

08007f40 <_printf_i>:
 8007f40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f44:	7e0f      	ldrb	r7, [r1, #24]
 8007f46:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007f48:	2f78      	cmp	r7, #120	; 0x78
 8007f4a:	4691      	mov	r9, r2
 8007f4c:	4680      	mov	r8, r0
 8007f4e:	460c      	mov	r4, r1
 8007f50:	469a      	mov	sl, r3
 8007f52:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007f56:	d807      	bhi.n	8007f68 <_printf_i+0x28>
 8007f58:	2f62      	cmp	r7, #98	; 0x62
 8007f5a:	d80a      	bhi.n	8007f72 <_printf_i+0x32>
 8007f5c:	2f00      	cmp	r7, #0
 8007f5e:	f000 80d8 	beq.w	8008112 <_printf_i+0x1d2>
 8007f62:	2f58      	cmp	r7, #88	; 0x58
 8007f64:	f000 80a3 	beq.w	80080ae <_printf_i+0x16e>
 8007f68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007f70:	e03a      	b.n	8007fe8 <_printf_i+0xa8>
 8007f72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007f76:	2b15      	cmp	r3, #21
 8007f78:	d8f6      	bhi.n	8007f68 <_printf_i+0x28>
 8007f7a:	a101      	add	r1, pc, #4	; (adr r1, 8007f80 <_printf_i+0x40>)
 8007f7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007f80:	08007fd9 	.word	0x08007fd9
 8007f84:	08007fed 	.word	0x08007fed
 8007f88:	08007f69 	.word	0x08007f69
 8007f8c:	08007f69 	.word	0x08007f69
 8007f90:	08007f69 	.word	0x08007f69
 8007f94:	08007f69 	.word	0x08007f69
 8007f98:	08007fed 	.word	0x08007fed
 8007f9c:	08007f69 	.word	0x08007f69
 8007fa0:	08007f69 	.word	0x08007f69
 8007fa4:	08007f69 	.word	0x08007f69
 8007fa8:	08007f69 	.word	0x08007f69
 8007fac:	080080f9 	.word	0x080080f9
 8007fb0:	0800801d 	.word	0x0800801d
 8007fb4:	080080db 	.word	0x080080db
 8007fb8:	08007f69 	.word	0x08007f69
 8007fbc:	08007f69 	.word	0x08007f69
 8007fc0:	0800811b 	.word	0x0800811b
 8007fc4:	08007f69 	.word	0x08007f69
 8007fc8:	0800801d 	.word	0x0800801d
 8007fcc:	08007f69 	.word	0x08007f69
 8007fd0:	08007f69 	.word	0x08007f69
 8007fd4:	080080e3 	.word	0x080080e3
 8007fd8:	682b      	ldr	r3, [r5, #0]
 8007fda:	1d1a      	adds	r2, r3, #4
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	602a      	str	r2, [r5, #0]
 8007fe0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007fe4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007fe8:	2301      	movs	r3, #1
 8007fea:	e0a3      	b.n	8008134 <_printf_i+0x1f4>
 8007fec:	6820      	ldr	r0, [r4, #0]
 8007fee:	6829      	ldr	r1, [r5, #0]
 8007ff0:	0606      	lsls	r6, r0, #24
 8007ff2:	f101 0304 	add.w	r3, r1, #4
 8007ff6:	d50a      	bpl.n	800800e <_printf_i+0xce>
 8007ff8:	680e      	ldr	r6, [r1, #0]
 8007ffa:	602b      	str	r3, [r5, #0]
 8007ffc:	2e00      	cmp	r6, #0
 8007ffe:	da03      	bge.n	8008008 <_printf_i+0xc8>
 8008000:	232d      	movs	r3, #45	; 0x2d
 8008002:	4276      	negs	r6, r6
 8008004:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008008:	485e      	ldr	r0, [pc, #376]	; (8008184 <_printf_i+0x244>)
 800800a:	230a      	movs	r3, #10
 800800c:	e019      	b.n	8008042 <_printf_i+0x102>
 800800e:	680e      	ldr	r6, [r1, #0]
 8008010:	602b      	str	r3, [r5, #0]
 8008012:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008016:	bf18      	it	ne
 8008018:	b236      	sxthne	r6, r6
 800801a:	e7ef      	b.n	8007ffc <_printf_i+0xbc>
 800801c:	682b      	ldr	r3, [r5, #0]
 800801e:	6820      	ldr	r0, [r4, #0]
 8008020:	1d19      	adds	r1, r3, #4
 8008022:	6029      	str	r1, [r5, #0]
 8008024:	0601      	lsls	r1, r0, #24
 8008026:	d501      	bpl.n	800802c <_printf_i+0xec>
 8008028:	681e      	ldr	r6, [r3, #0]
 800802a:	e002      	b.n	8008032 <_printf_i+0xf2>
 800802c:	0646      	lsls	r6, r0, #25
 800802e:	d5fb      	bpl.n	8008028 <_printf_i+0xe8>
 8008030:	881e      	ldrh	r6, [r3, #0]
 8008032:	4854      	ldr	r0, [pc, #336]	; (8008184 <_printf_i+0x244>)
 8008034:	2f6f      	cmp	r7, #111	; 0x6f
 8008036:	bf0c      	ite	eq
 8008038:	2308      	moveq	r3, #8
 800803a:	230a      	movne	r3, #10
 800803c:	2100      	movs	r1, #0
 800803e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008042:	6865      	ldr	r5, [r4, #4]
 8008044:	60a5      	str	r5, [r4, #8]
 8008046:	2d00      	cmp	r5, #0
 8008048:	bfa2      	ittt	ge
 800804a:	6821      	ldrge	r1, [r4, #0]
 800804c:	f021 0104 	bicge.w	r1, r1, #4
 8008050:	6021      	strge	r1, [r4, #0]
 8008052:	b90e      	cbnz	r6, 8008058 <_printf_i+0x118>
 8008054:	2d00      	cmp	r5, #0
 8008056:	d04d      	beq.n	80080f4 <_printf_i+0x1b4>
 8008058:	4615      	mov	r5, r2
 800805a:	fbb6 f1f3 	udiv	r1, r6, r3
 800805e:	fb03 6711 	mls	r7, r3, r1, r6
 8008062:	5dc7      	ldrb	r7, [r0, r7]
 8008064:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008068:	4637      	mov	r7, r6
 800806a:	42bb      	cmp	r3, r7
 800806c:	460e      	mov	r6, r1
 800806e:	d9f4      	bls.n	800805a <_printf_i+0x11a>
 8008070:	2b08      	cmp	r3, #8
 8008072:	d10b      	bne.n	800808c <_printf_i+0x14c>
 8008074:	6823      	ldr	r3, [r4, #0]
 8008076:	07de      	lsls	r6, r3, #31
 8008078:	d508      	bpl.n	800808c <_printf_i+0x14c>
 800807a:	6923      	ldr	r3, [r4, #16]
 800807c:	6861      	ldr	r1, [r4, #4]
 800807e:	4299      	cmp	r1, r3
 8008080:	bfde      	ittt	le
 8008082:	2330      	movle	r3, #48	; 0x30
 8008084:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008088:	f105 35ff 	addle.w	r5, r5, #4294967295
 800808c:	1b52      	subs	r2, r2, r5
 800808e:	6122      	str	r2, [r4, #16]
 8008090:	f8cd a000 	str.w	sl, [sp]
 8008094:	464b      	mov	r3, r9
 8008096:	aa03      	add	r2, sp, #12
 8008098:	4621      	mov	r1, r4
 800809a:	4640      	mov	r0, r8
 800809c:	f7ff fee2 	bl	8007e64 <_printf_common>
 80080a0:	3001      	adds	r0, #1
 80080a2:	d14c      	bne.n	800813e <_printf_i+0x1fe>
 80080a4:	f04f 30ff 	mov.w	r0, #4294967295
 80080a8:	b004      	add	sp, #16
 80080aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080ae:	4835      	ldr	r0, [pc, #212]	; (8008184 <_printf_i+0x244>)
 80080b0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80080b4:	6829      	ldr	r1, [r5, #0]
 80080b6:	6823      	ldr	r3, [r4, #0]
 80080b8:	f851 6b04 	ldr.w	r6, [r1], #4
 80080bc:	6029      	str	r1, [r5, #0]
 80080be:	061d      	lsls	r5, r3, #24
 80080c0:	d514      	bpl.n	80080ec <_printf_i+0x1ac>
 80080c2:	07df      	lsls	r7, r3, #31
 80080c4:	bf44      	itt	mi
 80080c6:	f043 0320 	orrmi.w	r3, r3, #32
 80080ca:	6023      	strmi	r3, [r4, #0]
 80080cc:	b91e      	cbnz	r6, 80080d6 <_printf_i+0x196>
 80080ce:	6823      	ldr	r3, [r4, #0]
 80080d0:	f023 0320 	bic.w	r3, r3, #32
 80080d4:	6023      	str	r3, [r4, #0]
 80080d6:	2310      	movs	r3, #16
 80080d8:	e7b0      	b.n	800803c <_printf_i+0xfc>
 80080da:	6823      	ldr	r3, [r4, #0]
 80080dc:	f043 0320 	orr.w	r3, r3, #32
 80080e0:	6023      	str	r3, [r4, #0]
 80080e2:	2378      	movs	r3, #120	; 0x78
 80080e4:	4828      	ldr	r0, [pc, #160]	; (8008188 <_printf_i+0x248>)
 80080e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80080ea:	e7e3      	b.n	80080b4 <_printf_i+0x174>
 80080ec:	0659      	lsls	r1, r3, #25
 80080ee:	bf48      	it	mi
 80080f0:	b2b6      	uxthmi	r6, r6
 80080f2:	e7e6      	b.n	80080c2 <_printf_i+0x182>
 80080f4:	4615      	mov	r5, r2
 80080f6:	e7bb      	b.n	8008070 <_printf_i+0x130>
 80080f8:	682b      	ldr	r3, [r5, #0]
 80080fa:	6826      	ldr	r6, [r4, #0]
 80080fc:	6961      	ldr	r1, [r4, #20]
 80080fe:	1d18      	adds	r0, r3, #4
 8008100:	6028      	str	r0, [r5, #0]
 8008102:	0635      	lsls	r5, r6, #24
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	d501      	bpl.n	800810c <_printf_i+0x1cc>
 8008108:	6019      	str	r1, [r3, #0]
 800810a:	e002      	b.n	8008112 <_printf_i+0x1d2>
 800810c:	0670      	lsls	r0, r6, #25
 800810e:	d5fb      	bpl.n	8008108 <_printf_i+0x1c8>
 8008110:	8019      	strh	r1, [r3, #0]
 8008112:	2300      	movs	r3, #0
 8008114:	6123      	str	r3, [r4, #16]
 8008116:	4615      	mov	r5, r2
 8008118:	e7ba      	b.n	8008090 <_printf_i+0x150>
 800811a:	682b      	ldr	r3, [r5, #0]
 800811c:	1d1a      	adds	r2, r3, #4
 800811e:	602a      	str	r2, [r5, #0]
 8008120:	681d      	ldr	r5, [r3, #0]
 8008122:	6862      	ldr	r2, [r4, #4]
 8008124:	2100      	movs	r1, #0
 8008126:	4628      	mov	r0, r5
 8008128:	f7f8 f852 	bl	80001d0 <memchr>
 800812c:	b108      	cbz	r0, 8008132 <_printf_i+0x1f2>
 800812e:	1b40      	subs	r0, r0, r5
 8008130:	6060      	str	r0, [r4, #4]
 8008132:	6863      	ldr	r3, [r4, #4]
 8008134:	6123      	str	r3, [r4, #16]
 8008136:	2300      	movs	r3, #0
 8008138:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800813c:	e7a8      	b.n	8008090 <_printf_i+0x150>
 800813e:	6923      	ldr	r3, [r4, #16]
 8008140:	462a      	mov	r2, r5
 8008142:	4649      	mov	r1, r9
 8008144:	4640      	mov	r0, r8
 8008146:	47d0      	blx	sl
 8008148:	3001      	adds	r0, #1
 800814a:	d0ab      	beq.n	80080a4 <_printf_i+0x164>
 800814c:	6823      	ldr	r3, [r4, #0]
 800814e:	079b      	lsls	r3, r3, #30
 8008150:	d413      	bmi.n	800817a <_printf_i+0x23a>
 8008152:	68e0      	ldr	r0, [r4, #12]
 8008154:	9b03      	ldr	r3, [sp, #12]
 8008156:	4298      	cmp	r0, r3
 8008158:	bfb8      	it	lt
 800815a:	4618      	movlt	r0, r3
 800815c:	e7a4      	b.n	80080a8 <_printf_i+0x168>
 800815e:	2301      	movs	r3, #1
 8008160:	4632      	mov	r2, r6
 8008162:	4649      	mov	r1, r9
 8008164:	4640      	mov	r0, r8
 8008166:	47d0      	blx	sl
 8008168:	3001      	adds	r0, #1
 800816a:	d09b      	beq.n	80080a4 <_printf_i+0x164>
 800816c:	3501      	adds	r5, #1
 800816e:	68e3      	ldr	r3, [r4, #12]
 8008170:	9903      	ldr	r1, [sp, #12]
 8008172:	1a5b      	subs	r3, r3, r1
 8008174:	42ab      	cmp	r3, r5
 8008176:	dcf2      	bgt.n	800815e <_printf_i+0x21e>
 8008178:	e7eb      	b.n	8008152 <_printf_i+0x212>
 800817a:	2500      	movs	r5, #0
 800817c:	f104 0619 	add.w	r6, r4, #25
 8008180:	e7f5      	b.n	800816e <_printf_i+0x22e>
 8008182:	bf00      	nop
 8008184:	08008fe9 	.word	0x08008fe9
 8008188:	08008ffa 	.word	0x08008ffa

0800818c <memmove>:
 800818c:	4288      	cmp	r0, r1
 800818e:	b510      	push	{r4, lr}
 8008190:	eb01 0402 	add.w	r4, r1, r2
 8008194:	d902      	bls.n	800819c <memmove+0x10>
 8008196:	4284      	cmp	r4, r0
 8008198:	4623      	mov	r3, r4
 800819a:	d807      	bhi.n	80081ac <memmove+0x20>
 800819c:	1e43      	subs	r3, r0, #1
 800819e:	42a1      	cmp	r1, r4
 80081a0:	d008      	beq.n	80081b4 <memmove+0x28>
 80081a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80081a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80081aa:	e7f8      	b.n	800819e <memmove+0x12>
 80081ac:	4402      	add	r2, r0
 80081ae:	4601      	mov	r1, r0
 80081b0:	428a      	cmp	r2, r1
 80081b2:	d100      	bne.n	80081b6 <memmove+0x2a>
 80081b4:	bd10      	pop	{r4, pc}
 80081b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80081ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80081be:	e7f7      	b.n	80081b0 <memmove+0x24>

080081c0 <_free_r>:
 80081c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80081c2:	2900      	cmp	r1, #0
 80081c4:	d044      	beq.n	8008250 <_free_r+0x90>
 80081c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081ca:	9001      	str	r0, [sp, #4]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	f1a1 0404 	sub.w	r4, r1, #4
 80081d2:	bfb8      	it	lt
 80081d4:	18e4      	addlt	r4, r4, r3
 80081d6:	f000 f913 	bl	8008400 <__malloc_lock>
 80081da:	4a1e      	ldr	r2, [pc, #120]	; (8008254 <_free_r+0x94>)
 80081dc:	9801      	ldr	r0, [sp, #4]
 80081de:	6813      	ldr	r3, [r2, #0]
 80081e0:	b933      	cbnz	r3, 80081f0 <_free_r+0x30>
 80081e2:	6063      	str	r3, [r4, #4]
 80081e4:	6014      	str	r4, [r2, #0]
 80081e6:	b003      	add	sp, #12
 80081e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80081ec:	f000 b90e 	b.w	800840c <__malloc_unlock>
 80081f0:	42a3      	cmp	r3, r4
 80081f2:	d908      	bls.n	8008206 <_free_r+0x46>
 80081f4:	6825      	ldr	r5, [r4, #0]
 80081f6:	1961      	adds	r1, r4, r5
 80081f8:	428b      	cmp	r3, r1
 80081fa:	bf01      	itttt	eq
 80081fc:	6819      	ldreq	r1, [r3, #0]
 80081fe:	685b      	ldreq	r3, [r3, #4]
 8008200:	1949      	addeq	r1, r1, r5
 8008202:	6021      	streq	r1, [r4, #0]
 8008204:	e7ed      	b.n	80081e2 <_free_r+0x22>
 8008206:	461a      	mov	r2, r3
 8008208:	685b      	ldr	r3, [r3, #4]
 800820a:	b10b      	cbz	r3, 8008210 <_free_r+0x50>
 800820c:	42a3      	cmp	r3, r4
 800820e:	d9fa      	bls.n	8008206 <_free_r+0x46>
 8008210:	6811      	ldr	r1, [r2, #0]
 8008212:	1855      	adds	r5, r2, r1
 8008214:	42a5      	cmp	r5, r4
 8008216:	d10b      	bne.n	8008230 <_free_r+0x70>
 8008218:	6824      	ldr	r4, [r4, #0]
 800821a:	4421      	add	r1, r4
 800821c:	1854      	adds	r4, r2, r1
 800821e:	42a3      	cmp	r3, r4
 8008220:	6011      	str	r1, [r2, #0]
 8008222:	d1e0      	bne.n	80081e6 <_free_r+0x26>
 8008224:	681c      	ldr	r4, [r3, #0]
 8008226:	685b      	ldr	r3, [r3, #4]
 8008228:	6053      	str	r3, [r2, #4]
 800822a:	4421      	add	r1, r4
 800822c:	6011      	str	r1, [r2, #0]
 800822e:	e7da      	b.n	80081e6 <_free_r+0x26>
 8008230:	d902      	bls.n	8008238 <_free_r+0x78>
 8008232:	230c      	movs	r3, #12
 8008234:	6003      	str	r3, [r0, #0]
 8008236:	e7d6      	b.n	80081e6 <_free_r+0x26>
 8008238:	6825      	ldr	r5, [r4, #0]
 800823a:	1961      	adds	r1, r4, r5
 800823c:	428b      	cmp	r3, r1
 800823e:	bf04      	itt	eq
 8008240:	6819      	ldreq	r1, [r3, #0]
 8008242:	685b      	ldreq	r3, [r3, #4]
 8008244:	6063      	str	r3, [r4, #4]
 8008246:	bf04      	itt	eq
 8008248:	1949      	addeq	r1, r1, r5
 800824a:	6021      	streq	r1, [r4, #0]
 800824c:	6054      	str	r4, [r2, #4]
 800824e:	e7ca      	b.n	80081e6 <_free_r+0x26>
 8008250:	b003      	add	sp, #12
 8008252:	bd30      	pop	{r4, r5, pc}
 8008254:	20004f94 	.word	0x20004f94

08008258 <sbrk_aligned>:
 8008258:	b570      	push	{r4, r5, r6, lr}
 800825a:	4e0e      	ldr	r6, [pc, #56]	; (8008294 <sbrk_aligned+0x3c>)
 800825c:	460c      	mov	r4, r1
 800825e:	6831      	ldr	r1, [r6, #0]
 8008260:	4605      	mov	r5, r0
 8008262:	b911      	cbnz	r1, 800826a <sbrk_aligned+0x12>
 8008264:	f000 f8bc 	bl	80083e0 <_sbrk_r>
 8008268:	6030      	str	r0, [r6, #0]
 800826a:	4621      	mov	r1, r4
 800826c:	4628      	mov	r0, r5
 800826e:	f000 f8b7 	bl	80083e0 <_sbrk_r>
 8008272:	1c43      	adds	r3, r0, #1
 8008274:	d00a      	beq.n	800828c <sbrk_aligned+0x34>
 8008276:	1cc4      	adds	r4, r0, #3
 8008278:	f024 0403 	bic.w	r4, r4, #3
 800827c:	42a0      	cmp	r0, r4
 800827e:	d007      	beq.n	8008290 <sbrk_aligned+0x38>
 8008280:	1a21      	subs	r1, r4, r0
 8008282:	4628      	mov	r0, r5
 8008284:	f000 f8ac 	bl	80083e0 <_sbrk_r>
 8008288:	3001      	adds	r0, #1
 800828a:	d101      	bne.n	8008290 <sbrk_aligned+0x38>
 800828c:	f04f 34ff 	mov.w	r4, #4294967295
 8008290:	4620      	mov	r0, r4
 8008292:	bd70      	pop	{r4, r5, r6, pc}
 8008294:	20004f98 	.word	0x20004f98

08008298 <_malloc_r>:
 8008298:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800829c:	1ccd      	adds	r5, r1, #3
 800829e:	f025 0503 	bic.w	r5, r5, #3
 80082a2:	3508      	adds	r5, #8
 80082a4:	2d0c      	cmp	r5, #12
 80082a6:	bf38      	it	cc
 80082a8:	250c      	movcc	r5, #12
 80082aa:	2d00      	cmp	r5, #0
 80082ac:	4607      	mov	r7, r0
 80082ae:	db01      	blt.n	80082b4 <_malloc_r+0x1c>
 80082b0:	42a9      	cmp	r1, r5
 80082b2:	d905      	bls.n	80082c0 <_malloc_r+0x28>
 80082b4:	230c      	movs	r3, #12
 80082b6:	603b      	str	r3, [r7, #0]
 80082b8:	2600      	movs	r6, #0
 80082ba:	4630      	mov	r0, r6
 80082bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082c0:	4e2e      	ldr	r6, [pc, #184]	; (800837c <_malloc_r+0xe4>)
 80082c2:	f000 f89d 	bl	8008400 <__malloc_lock>
 80082c6:	6833      	ldr	r3, [r6, #0]
 80082c8:	461c      	mov	r4, r3
 80082ca:	bb34      	cbnz	r4, 800831a <_malloc_r+0x82>
 80082cc:	4629      	mov	r1, r5
 80082ce:	4638      	mov	r0, r7
 80082d0:	f7ff ffc2 	bl	8008258 <sbrk_aligned>
 80082d4:	1c43      	adds	r3, r0, #1
 80082d6:	4604      	mov	r4, r0
 80082d8:	d14d      	bne.n	8008376 <_malloc_r+0xde>
 80082da:	6834      	ldr	r4, [r6, #0]
 80082dc:	4626      	mov	r6, r4
 80082de:	2e00      	cmp	r6, #0
 80082e0:	d140      	bne.n	8008364 <_malloc_r+0xcc>
 80082e2:	6823      	ldr	r3, [r4, #0]
 80082e4:	4631      	mov	r1, r6
 80082e6:	4638      	mov	r0, r7
 80082e8:	eb04 0803 	add.w	r8, r4, r3
 80082ec:	f000 f878 	bl	80083e0 <_sbrk_r>
 80082f0:	4580      	cmp	r8, r0
 80082f2:	d13a      	bne.n	800836a <_malloc_r+0xd2>
 80082f4:	6821      	ldr	r1, [r4, #0]
 80082f6:	3503      	adds	r5, #3
 80082f8:	1a6d      	subs	r5, r5, r1
 80082fa:	f025 0503 	bic.w	r5, r5, #3
 80082fe:	3508      	adds	r5, #8
 8008300:	2d0c      	cmp	r5, #12
 8008302:	bf38      	it	cc
 8008304:	250c      	movcc	r5, #12
 8008306:	4629      	mov	r1, r5
 8008308:	4638      	mov	r0, r7
 800830a:	f7ff ffa5 	bl	8008258 <sbrk_aligned>
 800830e:	3001      	adds	r0, #1
 8008310:	d02b      	beq.n	800836a <_malloc_r+0xd2>
 8008312:	6823      	ldr	r3, [r4, #0]
 8008314:	442b      	add	r3, r5
 8008316:	6023      	str	r3, [r4, #0]
 8008318:	e00e      	b.n	8008338 <_malloc_r+0xa0>
 800831a:	6822      	ldr	r2, [r4, #0]
 800831c:	1b52      	subs	r2, r2, r5
 800831e:	d41e      	bmi.n	800835e <_malloc_r+0xc6>
 8008320:	2a0b      	cmp	r2, #11
 8008322:	d916      	bls.n	8008352 <_malloc_r+0xba>
 8008324:	1961      	adds	r1, r4, r5
 8008326:	42a3      	cmp	r3, r4
 8008328:	6025      	str	r5, [r4, #0]
 800832a:	bf18      	it	ne
 800832c:	6059      	strne	r1, [r3, #4]
 800832e:	6863      	ldr	r3, [r4, #4]
 8008330:	bf08      	it	eq
 8008332:	6031      	streq	r1, [r6, #0]
 8008334:	5162      	str	r2, [r4, r5]
 8008336:	604b      	str	r3, [r1, #4]
 8008338:	4638      	mov	r0, r7
 800833a:	f104 060b 	add.w	r6, r4, #11
 800833e:	f000 f865 	bl	800840c <__malloc_unlock>
 8008342:	f026 0607 	bic.w	r6, r6, #7
 8008346:	1d23      	adds	r3, r4, #4
 8008348:	1af2      	subs	r2, r6, r3
 800834a:	d0b6      	beq.n	80082ba <_malloc_r+0x22>
 800834c:	1b9b      	subs	r3, r3, r6
 800834e:	50a3      	str	r3, [r4, r2]
 8008350:	e7b3      	b.n	80082ba <_malloc_r+0x22>
 8008352:	6862      	ldr	r2, [r4, #4]
 8008354:	42a3      	cmp	r3, r4
 8008356:	bf0c      	ite	eq
 8008358:	6032      	streq	r2, [r6, #0]
 800835a:	605a      	strne	r2, [r3, #4]
 800835c:	e7ec      	b.n	8008338 <_malloc_r+0xa0>
 800835e:	4623      	mov	r3, r4
 8008360:	6864      	ldr	r4, [r4, #4]
 8008362:	e7b2      	b.n	80082ca <_malloc_r+0x32>
 8008364:	4634      	mov	r4, r6
 8008366:	6876      	ldr	r6, [r6, #4]
 8008368:	e7b9      	b.n	80082de <_malloc_r+0x46>
 800836a:	230c      	movs	r3, #12
 800836c:	603b      	str	r3, [r7, #0]
 800836e:	4638      	mov	r0, r7
 8008370:	f000 f84c 	bl	800840c <__malloc_unlock>
 8008374:	e7a1      	b.n	80082ba <_malloc_r+0x22>
 8008376:	6025      	str	r5, [r4, #0]
 8008378:	e7de      	b.n	8008338 <_malloc_r+0xa0>
 800837a:	bf00      	nop
 800837c:	20004f94 	.word	0x20004f94

08008380 <_realloc_r>:
 8008380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008384:	4680      	mov	r8, r0
 8008386:	4614      	mov	r4, r2
 8008388:	460e      	mov	r6, r1
 800838a:	b921      	cbnz	r1, 8008396 <_realloc_r+0x16>
 800838c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008390:	4611      	mov	r1, r2
 8008392:	f7ff bf81 	b.w	8008298 <_malloc_r>
 8008396:	b92a      	cbnz	r2, 80083a4 <_realloc_r+0x24>
 8008398:	f7ff ff12 	bl	80081c0 <_free_r>
 800839c:	4625      	mov	r5, r4
 800839e:	4628      	mov	r0, r5
 80083a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083a4:	f000 f838 	bl	8008418 <_malloc_usable_size_r>
 80083a8:	4284      	cmp	r4, r0
 80083aa:	4607      	mov	r7, r0
 80083ac:	d802      	bhi.n	80083b4 <_realloc_r+0x34>
 80083ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80083b2:	d812      	bhi.n	80083da <_realloc_r+0x5a>
 80083b4:	4621      	mov	r1, r4
 80083b6:	4640      	mov	r0, r8
 80083b8:	f7ff ff6e 	bl	8008298 <_malloc_r>
 80083bc:	4605      	mov	r5, r0
 80083be:	2800      	cmp	r0, #0
 80083c0:	d0ed      	beq.n	800839e <_realloc_r+0x1e>
 80083c2:	42bc      	cmp	r4, r7
 80083c4:	4622      	mov	r2, r4
 80083c6:	4631      	mov	r1, r6
 80083c8:	bf28      	it	cs
 80083ca:	463a      	movcs	r2, r7
 80083cc:	f7ff fbb8 	bl	8007b40 <memcpy>
 80083d0:	4631      	mov	r1, r6
 80083d2:	4640      	mov	r0, r8
 80083d4:	f7ff fef4 	bl	80081c0 <_free_r>
 80083d8:	e7e1      	b.n	800839e <_realloc_r+0x1e>
 80083da:	4635      	mov	r5, r6
 80083dc:	e7df      	b.n	800839e <_realloc_r+0x1e>
	...

080083e0 <_sbrk_r>:
 80083e0:	b538      	push	{r3, r4, r5, lr}
 80083e2:	4d06      	ldr	r5, [pc, #24]	; (80083fc <_sbrk_r+0x1c>)
 80083e4:	2300      	movs	r3, #0
 80083e6:	4604      	mov	r4, r0
 80083e8:	4608      	mov	r0, r1
 80083ea:	602b      	str	r3, [r5, #0]
 80083ec:	f7f9 fb4c 	bl	8001a88 <_sbrk>
 80083f0:	1c43      	adds	r3, r0, #1
 80083f2:	d102      	bne.n	80083fa <_sbrk_r+0x1a>
 80083f4:	682b      	ldr	r3, [r5, #0]
 80083f6:	b103      	cbz	r3, 80083fa <_sbrk_r+0x1a>
 80083f8:	6023      	str	r3, [r4, #0]
 80083fa:	bd38      	pop	{r3, r4, r5, pc}
 80083fc:	20004f9c 	.word	0x20004f9c

08008400 <__malloc_lock>:
 8008400:	4801      	ldr	r0, [pc, #4]	; (8008408 <__malloc_lock+0x8>)
 8008402:	f000 b811 	b.w	8008428 <__retarget_lock_acquire_recursive>
 8008406:	bf00      	nop
 8008408:	20004fa0 	.word	0x20004fa0

0800840c <__malloc_unlock>:
 800840c:	4801      	ldr	r0, [pc, #4]	; (8008414 <__malloc_unlock+0x8>)
 800840e:	f000 b80c 	b.w	800842a <__retarget_lock_release_recursive>
 8008412:	bf00      	nop
 8008414:	20004fa0 	.word	0x20004fa0

08008418 <_malloc_usable_size_r>:
 8008418:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800841c:	1f18      	subs	r0, r3, #4
 800841e:	2b00      	cmp	r3, #0
 8008420:	bfbc      	itt	lt
 8008422:	580b      	ldrlt	r3, [r1, r0]
 8008424:	18c0      	addlt	r0, r0, r3
 8008426:	4770      	bx	lr

08008428 <__retarget_lock_acquire_recursive>:
 8008428:	4770      	bx	lr

0800842a <__retarget_lock_release_recursive>:
 800842a:	4770      	bx	lr

0800842c <_init>:
 800842c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800842e:	bf00      	nop
 8008430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008432:	bc08      	pop	{r3}
 8008434:	469e      	mov	lr, r3
 8008436:	4770      	bx	lr

08008438 <_fini>:
 8008438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800843a:	bf00      	nop
 800843c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800843e:	bc08      	pop	{r3}
 8008440:	469e      	mov	lr, r3
 8008442:	4770      	bx	lr
